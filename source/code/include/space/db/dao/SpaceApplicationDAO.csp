<?php

namespace grn\space\db\dao;

use grn\space\common\utility\ValidateUtility;

use grn\space\common\db\dao\DataAccessControlAbstract;

use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\ErrorCode;
use grn\space\data\bean\SpaceApplication;
use grn\space\data\collection\SpaceApplicationCollection;
use grn\space\data\condition\SpaceApplicationSearchCondition;

/**
 * Class SpaceApplicationDAO
 */
class SpaceApplicationDAO extends DataAccessControlAbstract
{
    /**
     * Insert SpaceApplication
     *
     * @param \grn\space\data\bean\SpaceApplication $application
     *
     * @return \grn\space\data\bean\SpaceApplication
     * @throws GrnDatabaseException
     */
    public function insert(SpaceApplication $application)
    {
        //set create/modify time
        $time = time();
        $application->setCreateTimestamp($time);
        $application->setModifyTimestamp($time);

        try {
            $db = $this->getDatabaseConnection();

            $query = "INSERT INTO tab_grn_space_space_application SET"
                     . " col_space = '{$db->escape( $application->getSpaceId() )}', "
                     . " col_application = '{$db->escape( $application->getId() )}', "
                     . " col_root_category = '{$db->escape($application->getRootCategoryId())}', "
                     . " col_is_external_application_owner = '"
                     . ($application->isExternalApplicationOwner() ? "1" : "0")
                     . "', "
                     . " col_creator='"
                     . $db->escape($application->getCreatorId()) . "', "
                     . " col_creator_name='"
                     . $db->escape($application->getCreatorName()) . "', "
                     . " col_create_timestamp='"
                     . $db->escape($application->getCreateTimestamp()) . "', "
                     . " col_modifier='"
                     . $db->escape($application->getModifierId()) . "', "
                     . " col_modify_timestamp='"
                     . $db->escape($application->getModifyTimestamp()) . "', "
                     . " col_modifier_name='"
                     . $db->escape($application->getModifierName()) . "'; ";

            $db->query($query);

            return $application;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete SpaceApplication
     *
     * @param string $spaceID
     * @param string $applicationID
     *
     * @return bool
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function delete($spaceID, $applicationID)
    {
        try {
            $db = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_space_space_application WHERE col_space = '{$db->escape($spaceID)}' AND col_application = '{$db->escape($applicationID)}'";
            $db->query($query);
            $deleteCount = $db->affected_rows();
            if ($deleteCount === 0) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_APPLICATION_NOT_FOUND);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return true;
    }

    /**
     * Select SpaceApplication
     *
     * @param string $spaceID
     * @param string $applicationID
     * @param string $languageCode
     *
     * @return \grn\space\data\bean\SpaceApplication
     * @throws GrnDataNotFoundException
     * @throws GrnDatabaseException
     */
    public function select($spaceID, $applicationID, $languageCode)
    {
        try {
            $db = $this->getDatabaseConnection();

            $query = "SELECT " .
                     "application.col_application_code, " .
                     "IFNULL(local.col_application_name, application.col_application_name) AS col_application_name, "
                     .
                     "application.col_is_available, " .
                     "application.col_application_type, " .
                     "application.col_external_application_id, " .
                     "application.col_is_forced_use, " .
                     "application.col_is_system_use, " .
                     "space_application.col_application AS _id, " .
                     "space_application.col_space, " .
                     "space_application.col_application, " .
                     "space_application.col_root_category, " .
                     "space_application.col_is_external_application_owner, " .
                     "space_application.col_creator, " .
                     "space_application.col_creator_name, " .
                     "space_application.col_create_timestamp, " .
                     "space_application.col_modifier, " .
                     "space_application.col_modifier_name, " .
                     "space_application.col_modify_timestamp " .
                     "FROM " .
                     "tab_grn_space_space_application AS space_application " .
                     "LEFT JOIN " .
                     "tab_grn_space_application AS application " .
                     "ON space_application.col_application = application._id "
                     .
                     "LEFT JOIN " .
                     "(" .
                     "tab_grn_space_application_local AS local " .
                     "INNER JOIN " .
                     "tab_cb_language_status AS l " .
                     "ON " .
                     "local.col_language = l._id AND l.col_language = '{$db->escape($languageCode)}' "
                     .
                     ")" .
                     "ON space_application.col_application = local.col_application "
                     .
                     "WHERE " .
                     "space_application.col_space = '{$db->escape($spaceID)}' "
                     .
                     "AND " .
                     "space_application.col_application = '{$db->escape($applicationID)}'";
            $result = $db->query($query);
            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            if ( ! $row) {
                throw new GrnDataNotFoundException(ErrorCode::GRN_APPLICATION_NOT_FOUND);
            }

        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return new SpaceApplication($row, SpaceApplication::NOT_CHECK_INPUT);
    }

    /**
     * Search SpaceApplicationCollection
     *
     * @param \grn\space\data\condition\SpaceApplicationSearchCondition $condition
     *
     * @return \grn\space\data\collection\SpaceApplicationCollection
     * @throws GrnDatabaseException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function search(SpaceApplicationSearchCondition $condition)
    {
        try {
            $db = $this->getDatabaseConnection();

            $query = "SELECT " .
                     "application.col_application_code, " .
                     "IFNULL(local.col_application_name, application.col_application_name) AS col_application_name, "
                     .
                     "application.col_is_available, " .
                     "application.col_application_type, " .
                     "application.col_external_application_id, " .
                     "application.col_is_forced_use, " .
                     "application.col_is_system_use, " .
                     "space_application.col_application AS _id, " .
                     "space_application.col_space, " .
                     "space_application.col_application, " .
                     "space_application.col_root_category, " .
                     "space_application.col_is_external_application_owner, " .
                     "space_application.col_creator, " .
                     "space_application.col_creator_name, " .
                     "space_application.col_create_timestamp, " .
                     "space_application.col_modifier, " .
                     "space_application.col_modifier_name, " .
                     "space_application.col_modify_timestamp " .
                     "FROM " .
                     "tab_grn_space_space_application AS space_application " .
                     "LEFT JOIN " .
                     "tab_grn_space_application AS application " .
                     "ON space_application.col_application = application._id " .
                     "LEFT JOIN " .
                     "(" .
                     "tab_grn_space_application_local AS local " .
                     "INNER JOIN " .
                     "tab_cb_language_status AS l " .
                     "ON " .
                     "local.col_language = l._id AND l.col_language = '{$db->escape($condition->getLanguageCode())}' "
                     .
                     ")" .
                     "ON space_application.col_application = local.col_application "
                     .

                     $where = "";

            // Space ID
            if (ValidateUtility::isNumber($condition->getSearchSpaceId(),
                ValidateUtility::DISABLE_EMPTY,
                ValidateUtility::EXCEPTION_NOT_THROW)
            ) {
                $spaceID = $condition->getSearchSpaceId();
                $where .= " space_application.col_space = '{$db->escape($spaceID)}'";
            }

            // External application owner
            if ($condition->getSearchExternalApplicationOwner()
                != SpaceApplication::EXTERNAL_APPLICATION_OWNER_ANY
            ) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $where .= " space_application.col_is_external_application_owner = '{$db->escape($condition->getSearchExternalApplicationOwner())}'";
            }

            // Application Type
            if (is_int($condition->getSearchApplicationType())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $applicationType = $condition->getSearchApplicationType();
                $where .= " application.col_application_type = '{$db->escape($applicationType)}'";
            }

            // Availability
            if (is_bool($condition->getSearchAvailable())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $availability = $condition->getSearchAvailable();
                $where .= " application.col_available = '"
                          . (int)$availability . "'";
            }

            // System Use
            if (is_bool($condition->getSearchSystemUse())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $systemUse = $condition->getSearchSystemUse();
                $where .= " application.col_is_system_use = '"
                          . (int)$systemUse . "'";
            }

            if (strlen($condition->getSearchApplicationId())) {
                if (strlen($where) > 0) {
                    $where .= " AND ";
                }

                $applicationId = $condition->getSearchApplicationId();
                $where .= "application._id = '{$db->escape($applicationId)}'";
            }

            if (strlen($where) > 0) {
                $query .= " WHERE " . $where;
            }

            $result = $db->query($query);
            $collection = new SpaceApplicationCollection();
            while ($row = $db->fetch_assoc($result)) {
                $collection->appendBean(new SpaceApplication($row,
                    SpaceApplication::NOT_CHECK_INPUT));
            }
            $db->free_result($result);

            return $collection;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete SpaceApplication(s) by applicationId
     *
     * @param string $applicationId
     *
     * @return boolean true Always
     * @throws GrnDatabaseException
     */
    public function deleteByApplicationId($applicationId)
    {
        try {
            $db = $this->getDatabaseConnection();
            $db->query(
                "DELETE " .
                "FROM " .
                "tab_grn_space_space_application " .
                "WHERE " .
                "col_application = '{$db->escape($applicationId)}';"
            );

            return true;
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }
}
