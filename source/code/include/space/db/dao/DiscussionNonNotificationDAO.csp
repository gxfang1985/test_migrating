<?php

namespace grn\space\db\dao;

use grn\grn\MemberLogic;
use grn\space\data\bean\DiscussionNonNotification;
use grn\space\data\bean\SpaceUser;
use grn\space\data\collection\DiscussionNonNotificationCollection;
use grn\space\data\collection\SpaceUserCollection;
use grn\space\data\collection\ThreadCollection;
use grn\space\common\db\dao\DataAccessControlAbstract;
use grn\space\common\exception\GrnDatabaseException;

/**
 * Database Back Layer
 * This layer mediates the database front layer and the DB.
 *
 * Discussion-non-notification-user Facade Data Access Object Class
 * Accept requests from the database front layer for all Discussion-non-notification-user
 **/
class DiscussionNonNotificationDAO extends DataAccessControlAbstract
{
    /**
     * Insert a record into tab_grn_space_discussion_non_notification_user.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The returned value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_discussion and col_user were the same with $discussionId, $userId so that a new record was inserted.
     * 2 : There had been the record whose col_discussion and col_user were the same with $discussionId, $userId so that only col_discussion of the record was updated.
     *
     * @param int $discussionId discussion sequence id
     * @param int $userId       user sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return integer the number of affected rows.
     */
    public function insertOnDuplicateUpdateDiscussionNonNotification(
        $discussionId,
        $userId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query
                = "INSERT INTO tab_grn_space_discussion_non_notification_user SET ";
            $query .= "  col_discussion='" . $dbConn->escape($discussionId)
                      . "'";
            $query .= ", col_user='" . $dbConn->escape($userId) . "'";
            $query .= " ON DUPLICATE KEY UPDATE";
            $query .= "  col_discussion='" . $dbConn->escape($discussionId)
                      . "'";
            $query .= ";";

            $dbConn->query($query);

            return $dbConn->affected_rows();
        } catch (GrnDatabaseException $exception) {
            throw $exception;
        }
    }

    /**
     * The delete of discussion_non_notification_user is executed to the database.
     *
     * @param int $discussionId discussion sequence id
     * @param int $userId       user sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function deleteDiscussionNonNotification($discussionId, $userId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_space_discussion_non_notification_user WHERE col_discussion = '{$dbConn->escape($discussionId)}' AND col_user = '{$dbConn->escape($userId)}';";
            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Delete all record in discussion_non_notification_user
     *
     * @param ThreadCollection $discussionCollection
     * @param array            $removedSpaceUserIds
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function deleteAllDiscussionNonNotification(
        ThreadCollection $discussionCollection,
        array $removedSpaceUserIds
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();
            $query
                = "DELETE FROM tab_grn_space_discussion_non_notification_user WHERE col_user IN (";

            $tempIsNeedComma = false;
            foreach ($removedSpaceUserIds as $uid) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }
                $query .= "'$uid'";
                $tempIsNeedComma = true;
            }
            $query .= ") AND col_discussion IN (";

            $tempIsNeedComma = false;
            foreach ($discussionCollection as $discussion) {
                if ($tempIsNeedComma) {
                    $query .= ", ";
                }
                /** @var \grn\space\data\bean\Thread $discussion */
                $query .= "'{$dbConn->escape($discussion->getId())}'";
                $tempIsNeedComma = true;
            }

            $query .= ");";
            $dbConn->query($query);
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * Select discussion non notification
     *
     * @param int $discussionId
     * @param int $userId
     *
     * @return \grn\space\data\bean\DiscussionNonNotification
     * @throws GrnDatabaseException
     */
    public function selectDiscussionNonNotification($discussionId, $userId)
    {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " col_discussion AS _id, ";
            $query .= " col_user ";
            $query .= " FROM ";
            $query .= " tab_grn_space_discussion_non_notification_user ";
            $query .= " WHERE ";
            $query .= " col_discussion = '" . $dbConn->escape($discussionId)
                      . "'";
            $query .= " AND ";
            $query .= " col_user = '" . $dbConn->escape($userId) . "'";
            $query .= ";";

            $result = $dbConn->query($query);
            $row = $dbConn->fetch_assoc($result);
            $dbConn->free_result($result);

            if ( ! $row) {
                return new DiscussionNonNotification();
            } else {
                return new DiscussionNonNotification($row,
                    DiscussionNonNotification::NOT_CHECK_INPUT);
            }
        } catch (GrnDatabaseException $e) {
            throw $e;
        }
    }

    /**
     * The select of discussion_non_notification_user is executed to the database.
     *
     * @param int $discussionId $discussionId sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return DiscussionNonNotificationCollection
     */
    public function selectDiscussionNonNotificationCollectionByDiscussionId(
        $discussionId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT";
            $query .= " col_discussion AS _id, ";
            $query .= " col_user ";
            $query .= " FROM ";
            $query .= " tab_grn_space_discussion_non_notification_user ";
            $query .= " WHERE ";
            $query .= " col_discussion = '" . $dbConn->escape($discussionId)
                      . "'";
            $query .= ";";

            $result = $dbConn->query($query);
            $discussionNonNotificationCollection
                = new DiscussionNonNotificationCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $discussionNonNotificationCollection->appendBean(new DiscussionNonNotification($row,
                    DiscussionNonNotification::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            //search total count
            $discussionNonNotificationCollection->setCountNoLimit(count($discussionNonNotificationCollection));
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $discussionNonNotificationCollection;
    }

    /**
     * Get discussion notification user collection
     *
     * @param int $spaceId
     * @param int $discussionId
     * @param int $operationUserId
     *
     * @return \grn\space\data\collection\SpaceUserCollection
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function getDiscussionNotificationUserCollection(
        $spaceId,
        $discussionId,
        $operationUserId
    ) {
        try {
            $dbConn = $this->getDatabaseConnection();

            $query = "SELECT " .
                     "space_user.col_user AS _id, " .
                     "space_user.col_space, " .
                     "space_user.col_display_order, " .
                     "user.col_valid AS " . MemberLogic::IS_INVALID_USER . "," .
                     "user.col_slash " .
                     "FROM " .
                     "tab_grn_space_space_user AS space_user, " .
                     "tab_cb_user AS user " .
                     "LEFT JOIN " .
                     "tab_cb_user_name_language l " .
                     "ON " .
                     "user.col_display_name_language = l.col_language " .
                     "AND " .
                     "l._id = '{$dbConn->escape($operationUserId)}', " .
                     "tab_grn_userinfo AS userinfo " .
                     "WHERE " .
                     "space_user.col_user = user._id " .
                     "AND " .
                     "user._id = userinfo.col_user " .
                     "AND " .
                     "user.col_deleted IS NULL " .
                     "AND " .
                     "space_user.col_space = '{$dbConn->escape($spaceId)}' " .
                     "AND " .
                     "space_user.col_user NOT IN ( " .
                     "SELECT col_user " .
                     "FROM tab_grn_space_discussion_non_notification_user " .
                     "WHERE col_discussion = '{$dbConn->escape($discussionId)}' ) "
                     .
                     "ORDER BY " .
                     "space_user.col_display_order ASC ";

            $result = $dbConn->query($query);
            $spaceUserCollection = new SpaceUserCollection();
            while ($row = $dbConn->fetch_assoc($result)) {
                $spaceUserCollection->appendBean(new SpaceUser($row,
                    SpaceUser::NOT_CHECK_INPUT));
            }
            $dbConn->free_result($result);

            //search total count
            $spaceUserCollection->setCountNoLimit(count($spaceUserCollection));
        } catch (GrnDatabaseException $e) {
            throw $e;
        }

        return $spaceUserCollection;
    }
}
