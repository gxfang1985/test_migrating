<?php

namespace grn\space\db;

use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\data\collection\CommentCollection;
use grn\space\common\data\collection\SpaceMemberCollection;
use grn\space\data\bean\Todo;
use grn\space\data\bean\TodoUser;
use grn\space\db\dao\TodoCommentDAO;
use grn\space\db\dao\TodoDAO;
use grn\space\db\dao\TodoFileDAO;
use grn\space\db\dao\TodoSequenceDAO;
use grn\space\db\dao\TodoThreadDAO;
use grn\space\db\dao\TodoUserDAO;
use grn\space\data\condition\TodoSearchCondition;
use grn\space\data\collection\TodoCollection;
use grn\space\data\collection\TodoUserCollection;

/**
 * Database Front Layer
 * This layer mediates the business logic layer and the DB layer.
 * Also, keep a log if needed.
 *
 * Todo Facade class
 * Accept requests from the business logic layer for all TodoInfomation
 **/
class TodoFacade
{
    //**************************************************************************************************
    //***********************************        todo        *****************************************
    //**************************************************************************************************
    /**
     * todo is inserted.
     *
     * @param \grn\space\data\bean\Todo $todo Todo
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return Todo
     */
    public function insertTodo(Todo $todo)
    {
        $todoDAO = new TodoDAO();
        $newTodo = $todoDAO->insertTodo($todo);

        return $newTodo;
    }

    /**
     * todo is updated.
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return Todo
     */
    public function updateTodo(Todo $todo)
    {
        $todoDAO = new TodoDAO();
        $modTodo = $todoDAO->updateTodo($todo);

        return $modTodo;
    }

    /**
     * The update of is_complete of todo to the database.
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function updateCompleteTodo($todoId)
    {
        $todoDAO = new TodoDAO();
        $todoDAO->updateCompleteTodo($todoId);
    }

    /**
     * The update of is_complete of todo to the database.
     *
     * @param string $categoryId category sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function updateCompleteTodosByCategoryId($categoryId)
    {
        $todoDAO = new TodoDAO();
        $todoDAO->updateCompleteTodosByCategoryId($categoryId);
    }

    /**
     * todo is deleted
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @throws GrnDataNotFoundException     When the specified todo is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return Todo
     */
    public function deleteTodo(Todo $todo)
    {
        $todoDAO = new TodoDAO();
        $todo = $todoDAO->deleteTodo($todo);

        return $todo;
    }

    /**
     * Delete Todos by Thread ID array
     *
     * @param array $threadIdArray
     *
     * @return resource
     */
    public function deleteTodoByThreadId(array $threadIdArray)
    {
        $todoDao = new TodoDAO();

        return $todoDao->deleteTodoByThreadId($threadIdArray);
    }

    /**
     * Referring to the todo.
     *
     * @param string $todoId todo sequence id
     *
     * @return \grn\space\data\bean\Todo
     * @throws GrnDataNotFoundException     When the specified todo is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function selectTodo($todoId)
    {
        $todoDAO = new TodoDAO();

        return $todoDAO->selectTodo($todoId);
    }

    /**
     * Referring to the todo.
     *
     * @param     string $spaceId  space sequence id
     * @param     string $threadId thread sequence id
     * @param     string $todoId   todo sequence id
     *
     * @return    \grn\space\data\bean\Todo
     * @throws GrnDataNotFoundException     When the specified todo is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function selectTodoBySpaceIdThreadIdTodoId(
        $spaceId,
        $threadId,
        $todoId
    ) {
        $todoDAO = new TodoDAO();

        return $todoDAO->selectTodoBySpaceIdThreadIdTodoId($spaceId, $threadId,
            $todoId);
    }

    /**
     * Find todos.
     *
     * @param  \grn\space\data\condition\TodoSearchCondition $todoSearchCondition
     * @param  boolean                                       $is_mobile
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return TodoCollection
     */
    public function selectTodoList(
        TodoSearchCondition $todoSearchCondition,
        $is_mobile = false
    ) {
        $todoTodoDAO = new TodoDAO();

        if ($is_mobile) {
            return $todoTodoDAO->selectTodoListForMoblie($todoSearchCondition);
        }

        return $todoTodoDAO->selectTodoList($todoSearchCondition);
    }

    /**
     * Find todos.
     *
     * @param \grn\space\common\data\collection\CommentCollection $commentCollection
     *
     * @throws GrnDatabaseException           Any error in the database.
     * @return TodoCollection
     */
    public function selectTodoListByCommentCollection(
        CommentCollection $commentCollection
    ) {
        $todoTodoDAO = new TodoDAO();

        return $todoTodoDAO->selectTodoListByCommentCollection($commentCollection);
    }

    /**
     * Find todos.
     *
     * @param  array  $spaceIdArray    spaceId array
     * @param  string $operationUserId user sequence id
     * @param  string $languageCode    dispaly language code.
     *
     * @throws GrnDatabaseException           Any error in the database.
     * @return TodoCollection
     */
    public function selectIncompleteTodoListBySpaceIdsUserId(
        array $spaceIdArray,
        $operationUserId,
        $languageCode
    ) {
        $todoTodoDAO = new TodoDAO();

        return $todoTodoDAO->selectIncompleteTodoListBySpaceIdsUserId($spaceIdArray,
            $operationUserId, $languageCode);
    }

    /**
     * Find todos.
     *
     * @param  string $operationUserId user sequence id
     * @param  string $languageCode    dispaly language code.
     *
     * @throws GrnDatabaseException           Any error in the database.
     * @return TodoCollection
     */
    public function selectAssignedIncompleteTodoListByUserId(
        $operationUserId,
        $languageCode
    ) {
        $todoTodoDAO = new TodoDAO();

        return $todoTodoDAO->selectAssignedIncompleteTodoListByUserId($operationUserId,
            $languageCode);
    }

    /**
     * Select Todo by Comment ID
     *
     * @param string $commentId
     *
     * @return Todo
     * @throws GrnDataNotFoundException
     */
    public function selectTodoByCommentId($commentId)
    {
        $todoDao = new TodoDAO();

        return $todoDao->selectTodoByCommentId($commentId);
    }

    //**************************************************************************************************
    //***********************************        todo sequence       ***********************************
    //**************************************************************************************************
    /**
     * next sequence id of todo.
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return int
     */
    public function getTodoNextSequenceId()
    {
        $todoSequenceDao = new TodoSequenceDAO();

        return $todoSequenceDao->getNextSequenceId();
    }

    //**********************************************************************************************************
    //***********************************        todo user        **********************************************
    //**********************************************************************************************************
    /**
     * todo user is inserted.
     *
     * @param \grn\space\data\collection\TodoUserCollection $todoUserCollection
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\data\collection\TodoUserCollection
     */
    public function insertTodoUsers(TodoUserCollection $todoUserCollection)
    {
        //call database facade
        $todoUserDAO = new TodoUserDAO();
        $todoUserDAO->insertTodoUsers($todoUserCollection);

        return $todoUserCollection;
    }

    /**
     * todo user is inserted or updated.
     *
     * @param \grn\space\data\collection\TodoUserCollection $todoUserCollection
     *
     * @throws GrnDatabaseException             Any error in the database.
     * @return \grn\space\data\collection\TodoUserCollection
     */
    public function insertOnDuplicateUpdateTodoUsers(
        TodoUserCollection $todoUserCollection
    ) {
        //call database facade
        $todoUserDAO = new TodoUserDAO();
        $todoUserDAO->insertOnDuplicateUpdateTodoUsers($todoUserCollection);

        return $todoUserCollection;
    }

    /**
     * todo user is updated.
     *
     * @param \grn\space\data\bean\TodoUser $todoUser
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return \grn\space\data\bean\TodoUser
     */
    public function updateTodoUser(TodoUser $todoUser)
    {
        //call database facade
        $todoUserDAO = new TodoUserDAO();
        $modTodoUser = $todoUserDAO->updateTodoUser($todoUser);

        return $modTodoUser;
    }

    /**
     * todo suers is deleted
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDataNotFoundException     When the specified todo user is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function deleteTodoUsersByTodoId($todoId)
    {
        //call database facade
        $todoUserDAO = new TodoUserDAO();
        $todoUserDAO->deleteTodoUsersByTodoId($todoId);
    }

    /**
     * todo suers is deleted
     *
     * @param string                                        $todoId todo sequence id
     * @param \grn\space\data\collection\TodoUserCollection $todoUserCollection
     *
     * @throws GrnDataNotFoundException     When the specified todo user is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function deleteTodoUsersByTodoIdTodoUserCollection(
        $todoId,
        TodoUserCollection $todoUserCollection
    ) {
        //call database facade
        $todoUserDAO = new TodoUserDAO();
        $todoUserDAO->deleteTodoUsersByTodoIdTodoUserCollection($todoId,
            $todoUserCollection);
    }

    /**
     * todo suers is deleted
     *
     * @param string $spaceId space sequence id
     * @param array  $removedSpaceUserIds
     *
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function deleteTodoUsersBySpaceIdSpaceMemberCollection(
        $spaceId,
        array $removedSpaceUserIds
    ) {
        //call database facade
        $todoUserDAO = new TodoUserDAO();
        $todoUserDAO->deleteTodoUsersBySpaceIdSpaceMemberCollection($spaceId,
            $removedSpaceUserIds);
    }

    /**
     * todo suer is selected
     *
     * @param string $userId user sequence id
     * @param string $todoId todo sequence id
     *
     * @return \grn\space\data\bean\TodoUser
     * @throws GrnDataNotFoundException     When the specified todo user is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function selectTodoUser($userId, $todoId)
    {
        //call database facade
        $todoUserDAO = new TodoUserDAO();

        return $todoUserDAO->selectTodoUser($userId, $todoId);
    }

    /**
     * todo suers is selected
     *
     * @param string $todoId todo sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\TodoUserCollection
     */
    public function selectTodoUserListByTodoId($todoId)
    {
        $todoUserDAO = new TodoUserDAO();

        return $todoUserDAO->selectTodoUserListByTodoId($todoId);
    }

    /**
     * Find todo users with TodoUserCollection of each todoId
     *
     * @param \grn\space\data\collection\TodoCollection $todoCollection
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return array {todo sequence id, TodoUserCollection}
     */
    public function selectTodoUserListByTodoCollection(
        TodoCollection $todoCollection
    ) {
        static $cache = [];

        $notCachedTodoCollection = new TodoCollection();
        $todoUsers = [];
        /** @var \grn\space\data\bean\Todo $todo */
        foreach ($todoCollection as $index => $todo) {
            if (isset($cache[$todo->getId()])) {
                // get cache
                $todoUsers[$todo->getId()] = $cache[$todo->getId()];
            } else {
                $notCachedTodoCollection->appendBean($todo);
            }
        }

        $todoUserDAO = new TodoUserDAO();
        $collection
            = $todoUserDAO->selectTodoUserListByTodoCollection($notCachedTodoCollection);

        foreach ($collection as $todoId => $users) {
            $todoUsers[$todoId] = $users;

            // set cache
            $cache[$todoId] = $users;
        }

        return $todoUsers;
    }

    public function selectTodoUserIDsFromTodoCollection(
        TodoCollection $todoCollection
    ) {
        $todoUserDAO = new TodoUserDAO();
        $user_ids
            = $todoUserDAO->selectTodoUserIDsFromTodoCollection($todoCollection);

        return $user_ids;
    }


    //***************************************************************************************************
    //***********************************        todo thread       **************************************
    //***************************************************************************************************
    /**
     * todo-thread-relation is inserted.
     *
     * @param string $todoId   todo sequence id
     * @param string $threadId thread sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertTodoThread($todoId, $threadId)
    {
        $todoThreadDAO = new TodoThreadDAO();
        $todoThreadDAO->insertTodoThread($todoId, $threadId);
    }


    //**********************************************************************************************************
    //***********************************        todo comment        *******************************************
    //**********************************************************************************************************
    /**
     * todo-comment-relation is inserted.
     *
     * @param string $todoId    todo sequence id
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertTodoCommentReletion($todoId, $commentId)
    {
        $todoCommentDAO = new TodoCommentDAO();
        $todoCommentDAO->insertTodoCommentReletion($todoId, $commentId);
    }

    //*****************************************************************************************************
    //***********************************        todo file        *****************************************
    //*****************************************************************************************************
    /**
     * todo-file-relation is inserted.
     *
     * @param string $todoId todo sequence id
     * @param string $fileId file sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertTodoFileReletion($todoId, $fileId)
    {
        $todoFileDAO = new TodoFileDAO();
        $todoFileDAO->insertTodoFileReletion($todoId, $fileId);
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllTodoForFtsFullIndexer($startId, $endId, $maxLength)
    {
        $todoDao = new TodoDAO();

        return $todoDao->getAllTodoForFtsFullIndexer($startId, $endId,
            $maxLength);
    }

    /**
     * @param int $startId
     * @param int $endId
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllTodoCommentForFtsFullIndexer(
        $startId,
        $endId,
        $maxLength
    ) {
        $todoCommentDao = new TodoCommentDAO();

        return $todoCommentDao->getAllTodoCommentForFtsFullIndexer($startId,
            $endId, $maxLength);
    }

    /**
     * @param array $discussionIds
     *
     * @return array
     */
    public function getTodoIdByDiscussionId(array $discussionIds)
    {
        $todoDao = new TodoDAO();

        return $todoDao->getTodoIdByDiscussionId($discussionIds);
    }

    /**
     * @param array $todoIds
     *
     * @return array
     */
    public function getTodoCommentIdByTodoId(array $todoIds)
    {
        $todoDao = new TodoCommentDao();

        return $todoDao->getTodoCommentIdByTodoId($todoIds);
    }

    /**
     * @param $todo_id_list
     * @param $target_category_id
     *
     * @return bool|\mysqli_result
     */
    public function moveTodoList($todo_id_list, $target_category_id)
    {
        $todoDao = new TodoDAO();

        return $todoDao->moveTodoList($todo_id_list, $target_category_id);
    }
}
