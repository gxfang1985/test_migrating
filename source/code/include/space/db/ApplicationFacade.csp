<?php

namespace grn\space\db;

use grn\space\common\data\bean\ApplicationLocal;

use grn\space\db\dao\ApplicationLocalDAO;

use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\data\bean\Application;
use grn\space\common\data\condition\ApplicationSearchCondition;
use grn\space\db\dao\ApplicationDAO;


/**
 * Class ApplicationFacade
 */
class ApplicationFacade
{
    /**
     * Select Application
     *
     * @param string $applicationId
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Application
     * @throws GrnDataNotFoundException
     */
    public function select($applicationId, $languageCode)
    {
        $dao = new ApplicationDAO();
        $result = $dao->select($applicationId, $languageCode);

        return $result;
    }

    /**
     * Search Application
     *
     * @param \grn\space\common\data\condition\ApplicationSearchCondition $condition
     * @param string                                                      $languageCode
     *
     * @return \grn\space\common\data\collection\ApplicationCollection
     */
    public function search(ApplicationSearchCondition $condition, $languageCode)
    {
        $dao = new ApplicationDAO();
        $result = $dao->search($condition, $languageCode);

        return $result;
    }

    /**
     * Insert Application
     *
     * @param \grn\space\common\data\bean\Application $application
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function insert(Application $application)
    {
        $dao = new ApplicationDAO();
        $result = $dao->insert($application);

        return $result;
    }

    /**
     * Delete Application
     *
     * @param string $applicationId
     *
     * @return bool
     */
    public function delete($applicationId)
    {
        $dao = new ApplicationDAO();
        $result = $dao->delete($applicationId);

        return $result;
    }

    /**
     * Update Application
     *
     * @param \grn\space\common\data\bean\Application $application
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function update(Application $application)
    {
        $dao = new ApplicationDAO();
        $result = $dao->update($application);

        return $result;
    }

    /**
     * Select single Application by Application Code
     *
     * This method returns only one Application object even when there are many record whose application code is $applicationCode
     *
     * @param string $applicationCode
     * @param string $languageCode
     *
     * @return \grn\space\common\data\bean\Application
     */
    public function selectByApplicationCode($applicationCode, $languageCode)
    {
        $dao = new ApplicationDAO();

        return $dao->selectByApplicationCode($applicationCode, $languageCode);
    }

    /**
     * Select applicationLocal by application ID
     *
     * @param string $applicationId
     *
     * @return \grn\space\common\data\collection\ApplicationLocalCollection
     */
    public function searchApplicationLocalByApplicationId($applicationId)
    {
        $dao = new ApplicationLocalDAO();

        return $dao->searchByApplicationId($applicationId);
    }

    /**
     * Insert a record into tab_grn_space_application_local.
     * When the record is duplicated, this method updates col_name value of the record.
     *
     * The retuend value is a little tricky.
     * 0 : There had been the same record already so that no record was changed.
     * 1 : There had been no record whose col_category and col_language were the same with $categoryLocal so that a new record was inserted.
     * 2 : There had been the record whose col_category and col_language were the same with $categoryLocal so that only col_category_name of the record was updated.
     *
     * @param \grn\space\common\data\bean\ApplicationLocal $applicationLocal
     *
     * @return integer the number of affected rows.
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    public function insertOnDuplicateUpdateApplicationLocal(
        ApplicationLocal $applicationLocal
    ) {
        $applicationLocalDao = new ApplicationLocalDAO();

        return $applicationLocalDao->insertOnDuplicateUpdate($applicationLocal);
    }

    /**
     * Delete ApplicationLocal
     *
     * @param \grn\space\common\data\bean\ApplicationLocal $applicationLocal
     * @param string                                       $languageId
     *
     * @return \grn\space\common\data\bean\ApplicationLocal
     */
    public function deleteApplicationLocal(
        ApplicationLocal $applicationLocal,
        $languageId
    ) {
        $applicationLocalDao = new ApplicationLocalDAO();

        return $applicationLocalDao->delete($applicationLocal, $languageId);
    }
}
