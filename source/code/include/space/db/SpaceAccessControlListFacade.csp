<?php

namespace grn\space\db;

use grn\space\data\bean\SpaceAccessControlList;
use grn\space\db\dao\SpaceAccessControlListDAO;
use grn\space\data\collection\SpaceAccessControlListCollection;
use grn\space\data\condition\SpaceAccessControlListSearchCondition;

/**
 * Database Front Layer
 * This layer mediates the business logic layer and the DB layer.
 * Also, keep a log if needed.
 *
 * SpaceAccessControlList Facade class
 * Accept requests from the business logic layer for all SpaceAccessControlList Infomation
 **/
class SpaceAccessControlListFacade
{
    //*************************************************************************************************************
    //******************************        space access control list        **************************************
    //*************************************************************************************************************
    /**
     * space access control list is inserted.
     *
     * @param  SpaceAccessControlListCollection $spaceAclCollection
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     */
    public function insertSpaceAccessControleLists(
        SpaceAccessControlListCollection $spaceAclCollection
    ) {
        $spaceAclDAO = new SpaceAccessControlListDAO();
        $spaceAclDAO->insertSpaceAccessControleLists($spaceAclCollection);
    }

    /**
     * space access control list is update.
     *
     * @param  SpaceAccessControlList $spaceAcl
     *
     * @throws \grn\space\common\exception\GrnDatabaseException     Any error in the database.
     */
    public function updateSpaceAccessControleList(
        SpaceAccessControlList $spaceAcl
    ) {
        $spaceAclDAO = new SpaceAccessControlListDAO();
        $spaceAclDAO->updateSpaceAccessControleList($spaceAcl);
    }

    /**
     * Get to the space access control list
     *
     * @param     string $authorityCode The constant has been defined in Authority class
     * @param     string $spaceId       space sequence id
     *
     * @throws    \grn\space\common\exception\GrnDataNotFoundException          When the specified space access control list is not found.
     * @throws    \grn\space\common\exception\GrnDatabaseException              Any error in the database.
     * @return    SpaceAccessControlList
     */
    public function selectSpaceAccessControleList($authorityCode, $spaceId)
    {
        $spaceAclDAO = new SpaceAccessControlListDAO();

        return $spaceAclDAO->selectSpaceAccessControleList($authorityCode,
            $spaceId);
    }

    /**
     * Search space access control list
     *
     * @param SpaceAccessControlListSearchCondition $spaceAclSearchCondition
     *
     * @throws \grn\space\common\exception\GrnDatabaseException                 Any error in the database.
     * @return SpaceAccessControlListCollection
     */
    public function searchSpaceAccessControlList(
        SpaceAccessControlListSearchCondition $spaceAclSearchCondition
    ) {
        $spaceAclDAO = new SpaceAccessControlListDAO();

        return $spaceAclDAO->searchSpaceAccessControlList($spaceAclSearchCondition);
    }

    /**
     * Get the array of spaceId with spaceACL
     *
     * @param string $authorityCode   The constant has been defined in Authority class
     * @param string $operationUserId user sequence id
     *
     * @throws \grn\space\common\exception\GrnDatabaseException             Any error in the database.
     * @return array
     */
    public function getSpaceIdArrayWithSpaceAccessControl(
        $authorityCode,
        $operationUserId
    ) {
        $spaceAclDAO = new SpaceAccessControlListDAO();

        return $spaceAclDAO->getSpaceIdArrayWithSpaceAccessControl($authorityCode,
            $operationUserId);
    }
}
