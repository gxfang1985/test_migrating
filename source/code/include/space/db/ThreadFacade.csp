<?php

namespace grn\space\db;

use grn\space\common\data\bean\Category;
use grn\space\common\exception\GrnDatabaseException;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\data\collection\DiscussionNonNotificationCollection;
use grn\space\db\dao\DiscussionNotificationDAO;
use grn\space\data\bean\Thread;
use grn\space\db\dao\DiscussionNonNotificationDAO;
use grn\space\db\dao\ThreadCommentDAO;
use grn\space\db\dao\ThreadDAO;
use grn\space\db\dao\ThreadFileDAO;
use grn\space\db\dao\ThreadReadStatusDAO;
use grn\space\db\dao\ThreadSequenceDAO;
use grn\space\data\condition\SynthesisThreadCommentSearchCondition;
use grn\space\data\condition\ThreadSearchCondition;
use grn\space\data\collection\ThreadCollection;
use grn\space\data\collection\TodoCollection;
use grn\space\data\collection\SpaceUserCollection;

/**
 * Database Front Layer
 * This layer mediates the business logic layer and the DB layer.
 * Also, keep a log if needed.
 *
 * Thread Facade class
 * Accept requests from the business logic layer for all ThreadInformation
 **/
class ThreadFacade
{
    //**************************************************************************************************
    //***********************************        thread        *****************************************
    //**************************************************************************************************
    /**
     * thread is inserted.
     *
     * @param \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDatabaseException  Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function insertThread(Thread $thread)
    {
        $threadDAO = new ThreadDAO();
        $newThread = $threadDAO->insertThread($thread);

        return $newThread;
    }

    /**
     * thread is updated.
     *
     * @param \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDatabaseException  Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function updateThread(Thread $thread)
    {
        $threadDAO = new ThreadDAO();
        $newThread = $threadDAO->updateThread($thread);

        return $newThread;
    }

    /**
     * Update thread component modify timestamp
     *
     * @param \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDatabaseException  Any error in the database.
     */
    public function updateThreadComponentModifyTimestamp(Thread $thread)
    {
        $threadDao = new ThreadDAO();
        $threadDao->updateThreadComponentModifyTimestamp($thread);
    }

    /**
     * thread is deleted
     *
     * @param \grn\space\data\bean\Thread $thread
     *
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\bean\Thread
     */
    public function deleteThread(Thread $thread)
    {
        $threadDAO = new ThreadDAO();
        $thread = $threadDAO->deleteThread($thread);

        return $thread;
    }

    /**
     * Referring to the thread.
     *
     * @param string $todoId todo sequence id
     *
     * @return \grn\space\data\bean\Thread
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function selectThreadByTodoId($todoId)
    {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThreadByTodoId($todoId);
    }

    /**
     * Referring to the thread.
     *
     * @param string $commentId Comment sequence id
     *
     * @return \grn\space\data\bean\Thread
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function selectThreadByCommentId($commentId)
    {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThreadByCommentId($commentId);
    }

    /**
     * Referring to the thread.
     *
     * @param string $threadId thread sequence id
     * @param bool   $need_html_content
     *
     * @return \grn\space\data\bean\Thread
     */
    public function selectThread($threadId, $need_html_content = true)
    {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThread($threadId, $need_html_content);
    }

    /**
     * Referring to the thread.
     *
     * @param string $spaceId  space sequence id
     * @param string $threadId thread sequence id
     *
     * @return \grn\space\data\bean\Thread
     * @throws GrnDataNotFoundException     When the specified thread is not found.
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function selectThreadBySpaceIdThreadId($spaceId, $threadId)
    {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThreadBySpaceIdThreadId($spaceId, $threadId);
    }

    /**
     * select threads.
     *
     * @param \grn\space\data\collection\TodoCollection|string $todoCollection TodoCollection
     *
     * @return \grn\space\data\collection\ThreadCollection
     * @throws GrnDatabaseException         Any error in the database.
     */
    public function selectThreadListByTodoCollection(
        TodoCollection $todoCollection
    ) {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThreadListByTodoCollection($todoCollection);
    }

    /**
     * Find threads.
     *
     * @param \grn\space\data\condition\ThreadSearchCondition $threadSearchCondition
     *
     * @throws GrnDatabaseException                 Any error in the database.
     * @return \grn\space\data\collection\ThreadCollection
     */
    public function selectThreadList(
        ThreadSearchCondition $threadSearchCondition
    ) {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThreadList($threadSearchCondition);
    }

    //**************************************************************************************************
    //***********************************        thread sequence       *********************************
    //**************************************************************************************************
    /**
     * next sequence id of thread.
     *
     * @throws GrnDatabaseException     Any error in the database.
     * @return int
     */
    public function getThreadNextSequenceId()
    {
        $threadSequenceDao = new ThreadSequenceDAO();

        return $threadSequenceDao->getNextSequenceId();
    }

    //**********************************************************************************************************
    //***********************************        thread comment        *****************************************
    //**********************************************************************************************************
    /**
     * thread-comment-relation is inserted.
     *
     * @param string $threadId  thread sequence id
     * @param string $commentId comment sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertThreadCommentReletion($threadId, $commentId)
    {
        $threadCommentDAO = new ThreadCommentDAO();
        $threadCommentDAO->insertThreadCommentReletion($threadId, $commentId);
    }


    //*******************************************************************************************************
    //***********************************        thread file        *****************************************
    //*******************************************************************************************************
    /**
     * thread-file-relation is inserted.
     *
     * @param string $threadId thread sequence id
     * @param string $fileId   file sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertThreadFileReletion($threadId, $fileId)
    {
        $threadFileDAO = new ThreadFileDAO();
        $threadFileDAO->insertThreadFileReletion($threadId, $fileId);
    }

    //************************************************************************************************************
    //***********************************        thread and thread comment       *********************************
    //************************************************************************************************************
    /**
     * Select for the thread, and thread comment.
     *
     * @param \grn\space\data\condition\SynthesisThreadCommentSearchCondition $searchCondition
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\SynthesisThreadCommentCollection
     */
    public function selectSynthesisThreadCommentList(
        SynthesisThreadCommentSearchCondition $searchCondition
    ) {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectSynthesisThreadCommentList($searchCondition);
    }


    //*****************************************************************************************************
    //***********************************        thread read status       *********************************
    //*****************************************************************************************************
    /**
     * thread-read-status is inserted or updated.
     *
     * @param string $threadId thread sequence id
     * @param string $userId   user sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function insertOnDuplicateUpdateThreadReadStatus($threadId, $userId)
    {
        $threadReadStatusDAO = new ThreadReadStatusDAO();
        $threadReadStatusDAO->insertOnDuplicateUpdateThreadReadStatus($threadId,
            $userId);
    }

    /**
     * thread-read-status is deleted
     *
     * @param string $threadId thread sequence id
     *
     * @throws GrnDatabaseException     Any error in the database.
     */
    public function deleteThreadReadStatusByThreadId($threadId)
    {
        $threadReadStatusDAO = new ThreadReadStatusDAO();
        $threadReadStatusDAO->deleteThreadReadStatusByThreadId($threadId);
    }

    /**
     * Find thread-read-status.
     *
     * @param \grn\space\data\collection\ThreadCollection $threadCollection
     * @param  string                                     $userId user sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\ThreadReadStatusCollection
     */
    public function selectThreadReadStatusCollection(
        ThreadCollection $threadCollection,
        $userId
    ) {
        $threadReadStatusDAO = new ThreadReadStatusDAO();

        return $threadReadStatusDAO->selectThreadReadStatusCollection($threadCollection,
            $userId);
    }

    /**
     * Find thread-under-unread-status.
     *
     * @param \grn\space\data\collection\ThreadCollection $threadCollection
     * @param string                                      $userId user sequence id
     *
     * @throws GrnDatabaseException         Any error in the database.
     * @return \grn\space\data\collection\ThreadUnreadStatusCollection
     */
    public function selectThreadUnreadStatusCollectionUnderThreThreads(
        ThreadCollection $threadCollection,
        $userId
    ) {
        $threadReadStatusDAO = new ThreadReadStatusDAO();

        return $threadReadStatusDAO->selectThreadUnreadStatusCollectionUnderThreThreads($threadCollection,
            $userId);
    }

    /**
     * @param int $limit
     * @param int $offset
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllThreadForFtsFullIndexer($limit, $offset, $maxLength)
    {
        $threadDao = new ThreadDAO();

        return $threadDao->getAllThreadForFtsFullIndexer($limit, $offset,
            $maxLength);
    }

    /**
     * @param int $limit
     * @param int $offset
     * @param int $maxLength
     *
     * @return array
     */
    public function getAllThreadCommentForFtsFullIndexer(
        $limit,
        $offset,
        $maxLength
    ) {
        $threadCommentDao = new ThreadCommentDAO();

        return $threadCommentDao->getAllThreadCommentForFtsFullIndexer($limit,
            $offset, $maxLength);
    }

    /**
     * @param  int $discussionId
     * @param  int $userId
     *
     * @return \grn\space\data\bean\DiscussionNonNotification
     */
    public function selectDiscussionNonNotification($discussionId, $userId)
    {
        $discussionNonNotificationDao = new DiscussionNonNotificationDAO();

        return $discussionNonNotificationDao->selectDiscussionNonNotification($discussionId,
            $userId);
    }

    /**
     * @param  int $spaceId
     * @param  int $discussionId
     * @param  int $operationUserId
     *
     * @return \grn\space\data\collection\SpaceUserCollection
     */
    public function getDiscussionNotificationUserCollection(
        $spaceId,
        $discussionId,
        $operationUserId
    ) {
        $discussionNonNotificationDao = new DiscussionNonNotificationDAO();

        return $discussionNonNotificationDao->getDiscussionNotificationUserCollection($spaceId,
            $discussionId, $operationUserId);
    }

    /**
     * @param  int $discussionId
     *
     * @return DiscussionNonNotificationCollection
     */
    public function selectDiscussionNonNotificationCollectionByDiscussionId(
        $discussionId
    ) {
        $discussionNonNotificationDao = new DiscussionNonNotificationDAO();

        return $discussionNonNotificationDao->selectDiscussionNonNotificationCollectionByDiscussionId($discussionId);
    }

    /**
     * @param  int $discussionId
     * @param  int $userId
     */
    public function insertOnDuplicateUpdateDiscussionNonNotification(
        $discussionId,
        $userId
    ) {
        $discussionNonNotificationDao = new DiscussionNonNotificationDAO();
        $discussionNonNotificationDao->insertOnDuplicateUpdateDiscussionNonNotification($discussionId,
            $userId);
    }

    /**
     * @param int $discussionId
     * @param int $userId
     */
    public function deleteDiscussionNonNotification($discussionId, $userId)
    {
        $discussionNonNotificationDao = new DiscussionNonNotificationDAO();
        $discussionNonNotificationDao->deleteDiscussionNonNotification($discussionId,
            $userId);
    }

    /**
     * @param \grn\space\data\collection\ThreadCollection $discussionCollection
     * @param array                                       $removedSpaceUserIds
     */
    public function deleteAllDiscussionNonNotification(
        ThreadCollection $discussionCollection,
        array $removedSpaceUserIds
    ) {
        $discussionNonNotificationDao = new DiscussionNonNotificationDAO();
        $discussionNonNotificationDao->deleteAllDiscussionNonNotification($discussionCollection,
            $removedSpaceUserIds);
    }

    /**
     * @param array $discussionIds
     *
     * @return array
     */
    public function getDiscussionCommentIdByDiscussionId(array $discussionIds)
    {
        $dao = new ThreadCommentDAO();

        return $dao->getDiscussionCommentIdByDiscussionId($discussionIds);
    }

    /**
     * @param int $spaceId
     *
     * @return array
     */
    public function getAllDiscussionIdBySpaceId($spaceId)
    {
        $dao = new ThreadDao();

        return $dao->getAllDiscussionIdBySpaceId($spaceId);
    }

    /**
     * @param $discussionId
     * @param $userId
     *
     * @return \grn\space\data\bean\DiscussionNotification
     * @throws GrnDatabaseException
     */
    public function selectDiscussionNotification($discussionId, $userId)
    {
        $discussionNotificationDao = new DiscussionNotificationDAO();

        return $discussionNotificationDao->selectDiscussionNotification($discussionId,
            $userId);
    }

    /**
     * @param $discussionId
     * @param $userId
     *
     * @throws GrnDatabaseException
     */
    public function insertOnDuplicateUpdateDiscussionNotification(
        $discussionId,
        $userId
    ) {
        $discussionNotificationDao = new DiscussionNotificationDAO();
        $discussionNotificationDao->insertOnDuplicateUpdateDiscussionNotification($discussionId,
            $userId);
    }

    /**
     * @param $discussionId
     * @param $userId
     *
     * @throws GrnDatabaseException
     */
    public function deleteDiscussionNotification($discussionId, $userId)
    {
        $discussionNotificationDao = new DiscussionNotificationDAO();
        $discussionNotificationDao->deleteDiscussionNotification($discussionId,
            $userId);
    }

    /**
     * @param $discussionId
     *
     * @return array
     * @throws GrnDatabaseException
     */
    public function getDiscussionNotificationUserId($discussionId)
    {
        $discussionNotificationDao = new DiscussionNotificationDAO();

        return $discussionNotificationDao->getDiscussionNotificationUserId($discussionId);
    }

    /**
     * @param $discussionCollection
     * @param $spaceUserCollection
     *
     * @throws GrnDatabaseException
     */
    public function deleteMultiDiscussionNotification(
        $discussionCollection,
        $spaceUserCollection
    ) {
        $discussionNotificationDao = new DiscussionNotificationDAO();
        $discussionNotificationDao->deleteMultiDiscussionNotification($discussionCollection,
            $spaceUserCollection);
    }

    /**
     * @param array $discussionId
     *
     * @throws GrnDatabaseException
     */
    public function deleteDiscussionNotificationByDiscussionId(
        array $discussionId
    ) {
        $discussionNotificationDao = new DiscussionNotificationDAO();
        $discussionNotificationDao->deleteDiscussionNotificationByDiscussionId($discussionId);
    }

    /**
     * @param $folderId_list
     *
     * @return array
     */
    public function getThreadListByFolderIdList($folderId_list)
    {
        $threadDao = new ThreadDAO();

        return $threadDao->getThreadListByFolderIdList($folderId_list);
    }

    /**
     * @param $threadCollection
     * @param $target_category_id
     * @param $target_folder_id
     *
     * @return bool|\mysqli_result
     */
    public function moveThreadList(
        $threadCollection,
        $target_category_id,
        $target_folder_id
    ) {
        $threadDAO = new ThreadDAO();

        return $threadDAO->moveThreadList($threadCollection,
            $target_category_id, $target_folder_id);
    }

    /**
     * @param Category $rootCategory
     * @param          $folder_id
     * @param array    $thread_id_list
     *
     * @return ThreadCollection
     */
    public function selectThreadListByFolderIdThreadIdList(
        Category $rootCategory,
        $folder_id,
        array $thread_id_list
    ) {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThreadListByFolderIdThreadIdList($rootCategory,
            $folder_id, $thread_id_list);
    }

    /**
     * @param ThreadSearchCondition $threadSearchCondition
     *
     * @return ThreadCollection
     * @throws GrnDatabaseException
     */
    public function selectThreadListByCondition(
        ThreadSearchCondition $threadSearchCondition
    ) {
        $threadDAO = new ThreadDAO();

        return $threadDAO->selectThreadListByCondition($threadSearchCondition);
    }
}
