<?php

/**
 *  複数組織/ユーザー/施設選択テンプレート用の初期化コード、およびAPI
 *
 * @version    1.0
 * @package    grn.schedule
 * @author     HATA,Shinya
 *
 *  インクルード元からの引き渡しを想定している変数：
 *  session_name    セッション名（例：'system.user.org_user_assign', 'system.user.role_user_vest'）
 *  ous_params      N件ナビゲーション引き渡し用CGIパラメータ
 *  G_INPUT['poid'] 組織ID
 *  G_INPUT['reset']初期化の可否
 *
 *  本コード実行後に設定されるSmarty変数：
 *  poid            組織ID
 *  org             組織情報
 *  is_root         （ルート）かどうか
 *  is_nogroups     未所属ユーザーかどうか
 *  is_search       検索結果かどうか
 *  user_list       ユーザー一覧
 *  navi_info       N件ナビゲーション情報
 *  selected_list   選択されたユーザーの一覧
 */

$target = @ $G_INPUT['tid'];
$org_id = @ $G_INPUT['poid'];
$fgroup_id = @ $G_INPUT['fagid'];

//-- prepare uum
global $G_container_base;
$uum = $G_container_base->getInstance('uum');

//-- prepare facility logic
require_once('schedule/facility_system_logic.csp');
$fsl = GRN_Facility_SystemLogic::getInstance();

require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');

//--number on page
require_once('grn/ui.csp');
$ucm = GRN_UIConfigManager::getInstance();
$login =& $uum->getLoginUser();
$uc =& $ucm->getUserConfig($login);
$number_on_page = $uc->getListMax();

//--group information structure
$is_target_facility = false;
if ($can_select_facility && $target == 'facility') {
    //(for target 'facility')
    $is_target_facility = true;

    $tree_org = [];

    //--faclity group list
    $facility_group_rows = $fsl->getFacilityGroups();
    $facility_group_list = [];
    foreach (array_keys($facility_group_rows) as $id) {
        $facility_group =& $facility_group_rows[$id];
        $facility_group_list[$id] = [
            'fagid' => $id,
            'name'  => $facility_group->get('name'),
        ];
    }

    require_once('grn/org_tree.csp');
    $page_name = cb_get_pagename() . '_facility';
    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name, 'GRN_FacilityTree');

    if (is_null($fgroup_id)) {
        $fgroup_id = $tree->getSelectedNode();
    }
    if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
        $tree->initialize();
        $fgroup_id = null;
    }

    $tree->setSelectedNode($fgroup_id);
    $util->setTree($page_name, $tree);
    $tree_org = $tree->getRoot();

    $t->assign('tree_org', $tree_org);
    $t->assign('page_name', $page_name);
    $t->assign('async_page', 'schedule/system/json/facility_tree');

    //--faclity list
    if ($fgroup_id > 0 || $fgroup_id == -1) {
        require_once('grn/controller.csp');
        $utility = new GRN_ControllerUtil();
        //--current positoin
        $navi_start_position = $utility->getNaviStartPosition();
        //--save to session
        $utility->setNaviStartPosition($navi_start_position);

        //$number_on_page = 10;   // fixed

        //(for facilities in facility group)
        $facility_rows = $fsl->getGroupFacilities($fgroup_id,
            $navi_start_position, $number_on_page);

        //--total facility caount
        $facility_count = $fsl->getFacilitiesCount($fgroup_id);
        //--navigation information
        $navi_params = [
            'tid'   => $target,
            'oid'   => $org_id,
            'fagid' => $fgroup_id
        ];
        $navigation_info = $utility->makeNaviInformation($navi_start_position,
            $number_on_page, $facility_count, $navi_params);
    } elseif ($fgroup_id == -2) {
        require_once('grn/controller.csp');
        $utility = new GRN_ControllerUtil();
        //--current positoin
        $navi_start_position = $utility->getNaviStartPosition();
        //--save to session
        $utility->setNaviStartPosition($navi_start_position);

        //$number_on_page = 10;   // fixed

        //(for facilities in facility group)
        $facility_rows = $fsl->getGroupFacilities(null, $navi_start_position,
            $number_on_page);

        //--total facility caount
        $facility_count = $fsl->getFacilityTotalCount();
        //--navigation information
        $navi_params = [
            'tid'   => $target,
            'oid'   => $org_id,
            'fagid' => $fgroup_id
        ];
        $navigation_info = $utility->makeNaviInformation($navi_start_position,
            $number_on_page, $facility_count, $navi_params);
    } else {
        $facility_rows = [];
        $facility_count = 0;
        $navigation_info = [
            'navi' => [
                'number_on_page'               => $number_on_page,
                'previous_page_start_position' => -1,
                'next_page_start_position'     => -1,
            ],
        ];
    }
    require_once('schedule/system_logic.csp');
    $system_logic = GRN_Schedule_SystemLogic::getInstance();
    $t->assign('allow_all_facilities', $system_logic->getAllowAllFacilities());

    /*
    else
    {
        //--number on page
        $number_on_page = 10;   // fixed

        //--N-navigation
        require_once( 'grn/controller.csp' ); 
        $utility = new GRN_ControllerUtil(); 
        //--current positoin
        $navi_start_position = $utility->getNaviStartPosition();
        //--save to session
        $utility->setNaviStartPosition( $navi_start_position );
        //--total facility caount
        $facility_count = $fsl->getFacilityTotalCount();
        //--navigation information
        $navi_params = array( 'tid'=>$target, 'oid'=>$org_id, 'fagid'=>$fgroup_id );
        $navigation_info = $utility->makeNaviInformation( $navi_start_position, $number_on_page, $facility_count, $navi_params ); 

        //--facility objects
        $facility_rows = $fsl->getGroupFacilities( null, $navi_start_position, $number_on_page );
    }
    */
    $facility_list = [];
    foreach (array_keys($facility_rows) as $id) {
        $facility =& $facility_rows[$id];
        $facility_list[$id] = [
            'faid'        => $id,
            'name'        => $facility->get('name'),
            'foreign_key' => $facility->get('foreign_key'),
        ];
    }
} else {
    //-- initialize organization tree view
    require_once('grn/org_tree.csp');

    $page_name = cb_get_pagename() . '_org';

    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name);
    $dynamic_roles = $uum->listGrantedRoles();
    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_logic::getInstance();
    if (is_null($org_id)) {
        $org_id = $tree->getSelectedNode();
        if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())
            || is_null($org_id)
        ) {
            $user_list = [];
        } else {
            //--N-navigation
            $navi_params = $ous_params;
            $navi_params['poid'] = $org_id;
            $navigation_info = grn_get_user_list_info($org_id, $navi_params,
                $number_on_page);
            //--user list
            $user_list = grn_get_user_list($org_id, $navigation_info);
            if (@$is_admin == false) {
                $user_list = $acc_logic->evaluateAccessesById($login,
                    $user_list, ['read'], $dynamic_roles, 'user');
            }
        }
    }

    if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
        $tree->initialize();
        $org_id = null;
    }

    $tree->setSelectedNode($org_id);
    $util->setTree($page_name, $tree);
    $tree_org = $tree->getRoot();

    $t->assign('tree_org', $tree_org);
    $t->assign('page_name', $page_name);
    //--

    if (0 > $org_id) {
        $org_row = null;

        $org['oid'] = -1;
        $org['name'] = cb_msg('grn.system', 'nogroup_users');
        $org['foreign_key'] = null;
        $org['description'] = null;
        $org['children'] = [];
        $org['child_count'] = 0;
    } else {
        $org_row = grn_get_org_row($org_id);
        $org =& grn_get_org_info($org_row, false, true);

        //--child groups
        $org['children'] =& grn_get_org_children($org_id, true);
        $org['child_count'] = count($org['children']);
    }

    //--ancestors group list
    $org['ancestors'] =& grn_get_org_ancestors($org_row);

    $is_search = array_key_exists('search_text', $G_INPUT);
    if ($is_search) {
        //search

        //--N-navigation
        $search_text = $G_INPUT['search_text'];
        /*
                $condition = grn_get_user_search_condition( $org_id, $search_text, $search_login_name );
                $count = grn_get_user_search_count( $org_id, $condition );
        */
        $navi_params = $ous_params;
        $navi_params['poid'] = $org_id;
        $navi_params['search_text'] = $search_text;
        if (@$is_admin) {
            $condition = grn_get_user_info_search_condition($org_id,
                $search_text, $search_login_name);
            $count = grn_get_user_info_search_count($org_id, $condition);

        } else {
            $condition = grn_get_user_info_search_condition($org_id,
                $search_text, $search_login_name);
            $user_ids = grn_search_user_ids($org_id, $condition);
            $user_ids = $acc_logic->evaluateAccessesById($login, $user_ids,
                ['read'], $dynamic_roles, 'user', true);

            if (is_array($user_ids) && count($user_ids) > 0) {
                $condition = " tab_cb_user._id IN (" . implode(',', $user_ids)
                             . " )";
            } else {
                $condition = "";
            }

            $count = count($user_ids);
        }

        $navigation_info = grn_get_user_navigation_info($count, $navi_params,
            $number_on_page);
        //user list
        $user_list =& grn_search_user_info($org_id, $condition,
            $navigation_info);
        $t->assign('search_text', $search_text);
    } elseif ($org_id) {
        //list

        //--N-navigation
        $navi_params = $ous_params;
        $navi_params['poid'] = $org_id;
        if (@$is_admin) {
            $navigation_info = grn_get_user_list_info($org_id, $navi_params,
                $number_on_page);

            //--user list
            $user_list = grn_get_user_list($org_id, $navigation_info);
        } else {
            $user_ids = grn_get_user_ids($org_id);
            $user_ids = $acc_logic->evaluateAccessesById($login,
                $user_ids, ['read'], $dynamic_roles, 'user', true);
            $count = count($user_ids);
            $navigation_info = grn_get_user_navigation_info($count,
                $navi_params, $number_on_page);

            $group =& $uum->getGroup($org_id);
            if ($group
                && ! $acc_logic->evaluateAccess($login, $group, ['read'],
                    $dynamic_roles)
            ) {
                $user_is_nogroups = true;
            }
            if (is_array($user_ids) && count($user_ids) > 0) {
                $condition = " tab_cb_user._id IN (" . implode(',', $user_ids)
                             . " )";
            } else {
                $condition = "";
            }
            $user_list =& grn_search_user_info($org_id, $condition,
                $navigation_info);
        }
    } else {
        $navigation_info = [
            'navi' => [
                'number_on_page'               => $number_on_page,
                'previous_page_start_position' => -1,
                'next_page_start_position'     => -1,
            ],
        ];
    }
}

//-- setup the list of selected groups
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession($session_name);
$target_ids = $session->get('target_ids');
if ( ! is_array($target_ids)) {
    $target_ids = [];
}

//--reset selected user list
if (@ $G_INPUT['reset']) {
    $target_ids = [];
} //--added user list
elseif (@ $G_INPUT['add']) {
    $aids = @ $G_INPUT['aid'];
    if (is_array($aids) && count($aids)) {
        foreach ($aids as $aid) {
            $target_ids[$aid] = 1;
        }
        $t->assign('add', true);
    }
} //--removed user list
elseif (@ $G_INPUT['remove']) {
    $rids = @ $G_INPUT['rid'];
    if (is_array($rids) && count($rids)) {
        foreach ($rids as $rid) {
            unset($target_ids[$rid]);
        }
    }
}

//--set selected organization list to session
$session->set('target_ids', $target_ids);

//--construct selected user list
$selected_list = [];
foreach (array_keys($target_ids) as $id) {
    $id_pair = explode(':', $id);
    if (count($id_pair) < 2) {
        continue;
    }

    $target_id = $id_pair[1];
    switch ($id_pair[0]) {
        case 'user':
            $user =& $uum->getUser($target_id);
            if ($user) {
                $selected_list[$id] = [
                    'id'           => "user:{$target_id}",
                    'type'         => 'user',
                    'uid'          => $target_id,
                    'display_name' => GRN_ControllerUtil::getUserNameText($login->getOID(),
                        $target_id),
                    'foreign_key'  => $user->get('foreign_key'),
                ];
            }
            break;

        case 'group':
            $group = $uum->getGroup($target_id);
            if ($group) {
                $selected_list[$id] = [
                    'id'           => "group:{$target_id}",
                    'type'         => 'group',
                    'gid'          => $target_id,
                    'display_name' => $group->get('name'),
                    'foreign_key'  => $group->get('foreign_key'),
                ];
                continue;
            }
            break;

        case 'facility':
            $facility = $fsl->getFacility($target_id);
            if ($facility !== false) {
                $selected_list[$id] = [
                    'id'           => "facility:{$target_id}",
                    'type'         => 'facility',
                    'faid'         => $target_id,
                    'display_name' => $facility->get('name'),
                    'foreign_key'  => $facility->get('foreign_key'),
                ];
            }
            break;
    }
}

//-- set variables for view
$t->assign('target', $target);
$t->assign('poid', $org_id);
$t->assign('fagid', $fgroup_id);
if ($is_target_facility) {
    $t->assign('facility_group_list', $facility_group_list);
    $t->assign('facility_list', $facility_list);
    $t->assign('is_root', ! $fgroup_id);
} else {
    $t->assign('org', $org);
    $t->assign('is_root', ! $org_id);
    $t->assign('is_nogroups', $org_id == '-1' || @$user_is_nogroups);
    $t->assign('is_search', $is_search);
    $t->assign('user_list', @$user_list);
}
$t->assign('navi_info', @ $navigation_info);
$t->assign('selected_list', $selected_list);

