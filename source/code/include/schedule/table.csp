<?php

use grn\schedule\AttendanceStatusLogic;

/**
 * Database tables for Scheduler.
 *
 * @package grn.schedule
 */

require_once('grn/inspection.csp');
require_once('grn/access_table.csp');
require_once('schedule/resources.csp');
require_once('schedule/utility.csp');

/* -------------- VCBSCH0010 START ----------------- */
require_once('schedule/netmeeting_resources.csp');
/* -------------- VCBSCH0010 END   ----------------- */

define('GRN_SCHEDULE_ROOT_FACILITYGROUP_ID', 1);

/**
 * 予定の内容のクラス
 *
 * @package grn.schedule
 */
class GRN_Schedule_Event extends GRN_InspectionBase
{
    private $_refresh_attendance_status_flag = false;

    public function getRefreshAttendanceStatusFlag()
    {
        return $this->_refresh_attendance_status_flag;
    }

    public function setRefreshAttendanceStatusFlag($value)
    {
        $this->_refresh_attendance_status_flag = $value;
    }

    function __construct($row)
    {
        parent::__construct($row, GRN_SCHEDULE_MODULE_ID);
    }

    var $_app_id = 'schedule';

    var $col_eventmenu
        = [
            'type'   => 'char',
            'length' => '100',
        ];             // 予定
    var $col_detail
        = [
            'type'   => 'char',
            'length' => '100'
        ];                 // 詳細
    var $col_memo
        = [
            'type'   => 'char',
            'length' => '65535',
            'lazy'   => true
        ];    // メモ
    var $col_private = ['type' => 'int',];                                 // 非公開の区分
    /*
    GRN2-1931
        var $col_checkabsence = array( 'type' =>'int', 'notnull'=>'TRUE' );          // 出欠確認機能の予定か否か
    */
    var $col_event_type = ['type' => 'int',];                              // イベントのタイプ

    var $col_dummytitle
        = [
            'type'   => 'char',
            'length' => '255',
            'lazy'   => true
        ];   // 検索用の予定のタイトル

    /** 登録情報 **/
    /*
        var $col_creator = array('type'=>'weak_relation', 'to'=>'CB_User' );                // 登録者
        var $col_creator_name = array('type'=>'char', 'length'=>'100', 'lazy'=>TRUE );      // 登録者名
        var $col_ctime = array('type'=>'timestamp', 'lazy'=>TRUE);                          // 登録日時
        var $col_modifier = array('type'=>'weak_relation', 'to'=>'CB_User', 'lazy'=>TRUE ); // 変更者
        var $col_modifier_name = array('type'=>'char', 'length'=>'100', 'lazy'=>TRUE );     // 変更者名
        var $col_mtime = array('type'=>'timestamp', 'lazy'=>TRUE);                          // 変更日時
    */

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    var $col_additional_items = ['type' => 'char', 'length' => '1048575'];

    var $idx_reserve_int1 = ['cols' => ['reserve_int1']];

    private $_extension_log_messages = null;

    /**
     * タイトルの取得
     *
     * @return  string  イベントのタイトル
     */
    function getTitle()
    {
        return grn_schedule_get_event_title($this->get('eventmenu'),
            $this->get('detail'));
    }

    /**
     * ログ
     *
     * @param string $action
     *
     * @return mixed
     */
    function getInspectionMessage($action)
    {
        return false;
    }

    /**
     *
     * @param string $action Action name.
     * @param object $logger Logger object.
     */
    function customLog($action, $logger)
    {
        switch ($action) {
            case 'create':
                break;
            case 'update':
                $action = 'modify';
                break;
            case 'delete':
                break;
            case 'fix':
                break;
            default:
                parent::getInspectionMessage($action);

                return;
        }

        $log_params = [
            'eid'         => $this->getOID(),
            'event_title' => html_entity_decode($this->getTitle())
        ];
        if (is_array($this->_extension_log_messages)
            && count($this->_extension_log_messages)
        ) {
            $log_params += $this->_extension_log_messages;
        }

        // GTM-1622
        $attendanceStatusLogic = new AttendanceStatusLogic();
        if ($attendanceStatusLogic->isEnableAttendanceCheck()) {
            $isAttendanceCheckEvent = $this->get('reserve_int3');
            if ( ! is_null($isAttendanceCheckEvent)
                 && strlen($isAttendanceCheckEvent) > 0
            ) {
                $log_params['attendance_check'] = 1;
                if ($action == 'modify'
                    && ! is_null($this->getRefreshAttendanceStatusFlag())
                ) {
                    $log_params['attendance_status_initialize']
                        = $this->getRefreshAttendanceStatusFlag() == '1' ? 1
                        : 0;
                }
            } else {
                $log_params['attendance_check'] = 0;
            }
        }

        $logger->noticeEx($action, 'event', $log_params);
    }

    /**
     * ログに追加で出力するメッセージを設定する
     *
     * @param array $messages　メッセージ
     */
    public function setExtensionLogMessage(array $messages)
    {
        $this->_extension_log_messages = $messages;
    }
}

class GRN_Schedule_AddressData extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';


    // 予定
    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];  // 内容

    /** 会社名 */
    var $col_company_name = ['type' => 'char', 'length' => 100];
    /** 郵便番号 */
    var $col_zip_code = ['type' => 'char', 'length' => 100];
    /** 住所 */
    var $col_physical_address = ['type' => 'char', 'length' => 4095];
    /** 地図（ビジネス情報） **/
    var $col_map = ['type' => 'char', 'length' => CB_DATABASE_MAX_STRINDEX];
    /** 路線（ビジネス情報） */
    var $col_route = ['type' => 'char', 'length' => 65535];
    /** 路線（ビジネス情報） */
    var $col_route_time = ['type' => 'char', 'length' => 100];
    /** 路線（ビジネス情報） */
    var $col_route_fare = ['type' => 'char', 'length' => 100];
    /** 会社電話番号 */
    var $col_company_telephone_number = ['type' => 'char', 'length' => 100];
    /** 会社Fax番号 */
    var $col_facsimile_number = ['type' => 'char', 'length' => 100];
    /** URL */
    var $col_url = ['type' => 'char', 'length' => CB_DATABASE_MAX_STRINDEX];

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

}

/**
 * 予定の日時のクラス（時間ありの通常予定、繰り返しの時間あり、仮予定で時間が入っている各予定で使用する）
 *
 * @package grn.schedule
 */
class GRN_Schedule_EventDateTime extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_setdatetime = ['type' => 'timestamp'];                    // 開始日時
    var $col_enddatetime = ['type' => 'timestamp'];                    // 終了日時
    var $col_event_type
        = [
            'type' => 'int',
            'lazy' => true
        ];             // イベントのタイプ
    var $col_timezone
        = [
            'type'   => 'char',
            'length' => '100',
        ];          // タイムゾーン
    var $col_end_timezone
        = [
            'type'   => 'char',
            'length' => '100',
        ];      // 終了日時に異なるタイムゾーンを指定する場合のタイムゾーン

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];  // 内容

    var $idx_eventtime = ['cols' => ['event', 'setdatetime', 'enddatetime']];
    var $idx_type = ['cols' => ['event_type']];
}

/**
 * 予定の日付のクラス（終日の通常、バナー、繰り返し予定の終日で時間のない各予定で使用する）
 *
 * @package grn.schedule
 */
class GRN_Schedule_EventDate extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_setdate = ['type' => 'date'];                    // 開始日付
    var $col_enddate = ['type' => 'date'];                    // 終了日付
    var $col_event_type
        = [
            'type' => 'int',
            'lazy' => true
        ];                  // イベントのタイプ
    var $col_timezone = ['type' => 'char', 'length' => '100',]; // タイムゾーン
    var $col_end_timezone
        = [
            'type'   => 'char',
            'length' => '100',
        ]; //終了日に異なるタイムゾーンを指定する場合のタイムゾーン

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];  // 内容

    var $idx_eventtime = ['cols' => ['event', 'setdate', 'enddate']];
    var $idx_type = ['cols' => ['event_type']];
}


/**
 * 予定の参加者のクラス
 *          ユーザー、組織、施設のいずれかが必ず入る
 *
 * @package grn.schedule
 */
class GRN_Schedule_EventMember extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];   // イベント
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User',
            'lazy' => 'TRUE',
        ];                          // 参加者
    var $col_group
        = [
            'type' => 'relation',
            'to'   => 'CB_Group',
        ];                        // 参加組織
    var $col_facility
        = [
            'type' => 'relation',
            'to'   => 'GRN_Facility_Facility',
        ];       // 施設
    var $col_member_list
        = [
            'type' => 'list_index',
            'lazy' => true
        ];                                       // 参加者のリストインデックス
    var $col_event_type
        = [
            'type' => 'int',
            'lazy' => true,
        ];                                            // イベントタイプ
    var $col_single = ['type' => 'int'];
    var $col_event_type_simple = ['type' => 'int', 'lazy' => true,];

    //GRN2-2286
    var $col_status = ['type' => 'int', 'lazy' => true,];
    //GRN2-2286
    var $idx_event_user
        = [
            'cols'   => ['event', 'user'],
            'unique' => true
        ];           // ユーザーとイベントタイプのインデックス
    var $idx_event_group
        = [
            'cols'   => ['event', 'group'],
            'unique' => true
        ];           // ユーザーとイベントタイプのインデックス
    var $idx_event_facility
        = [
            'cols'   => ['event', 'facility'],
            'unique' => true
        ];           // ユーザーとイベントタイプのインデックス
    var $idx_user_eventtype
        = [
            'cols' => [
                'user',
                'event_type'
            ]
        ];           // ユーザーとイベントタイプのインデックス
    var $idx_group_eventtype
        = [
            'cols' => [
                'group',
                'event_type'
            ]
        ];         // グループとイベントタイプのインデックス
    var $idx_facility_eventtype
        = [
            'cols' => [
                'facility',
                'event_type'
            ]
        ];         // グループとイベントタイプのインデックス
    var $idx_event_type_simple_user_event
        = [
            'cols' => [
                'event_type_simple',
                'user',
                'event'
            ]
        ];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } elseif ($col_name == 'facility') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityData = $dao->referFacilityById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityData->getId(),
                    $scheduleFacilityData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 繰り返しイベントの条件のクラス
 *
 * @package grn.schedule
 */
class GRN_Schedule_RepeatCondition extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];   // イベント

    var $col_repeat_type
        = [
            'type'   => 'char',
            'length' => '100',
        ];       // 繰り返しのタイプ
    var $col_repeat_day = ['type' => 'int',];                          // 日付条件（日付：1～31、0は月末）
    var $col_repeat_wday = ['type' => 'int',];                         // 日付条件（曜日：0-日曜、6-土曜）
    var $col_settime = ['type' => 'time'];                             // 開始時刻
    var $col_endtime = ['type' => 'time'];                             // 開始時刻
    var $col_setdate = ['type' => 'date',];                            // 繰り返し期間の開始日
    var $col_enddate = ['type' => 'date',];                            // 繰り返し期間の終了日
    var $col_timezone
        = [
            'type'   => 'char',
            'length' => '100',
        ];          // タイムゾーン

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
}

/**
 * 繰り返しイベントの例外日のクラス
 *
 * @package grn.schedule
 */
class GRN_Schedule_RepeatExcept extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];   // イベント
    var $col_event_condition
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_RepeatCondition',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];   // 繰り返しの条件

    var $col_date = ['type' => 'date',];                       // 日付
    var $col_timezone = ['type' => 'char', 'length' => '100',];  // タイムゾーン

}

/**
 * 仮予定の OR で登録した場合の条件
 *
 * @package grn.schedule
 */
class GRN_Schedule_TemporaryEventRelation extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];   // イベント
    var $col_date
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_EventDateTime',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ]; // 日時
    var $col_member
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_EventMember',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];    // 参加者（実際には施設）
}

/**
 * 予定のフォローのクラス
 *
 * @package grn.schedule
 */
class GRN_Schedule_EventFollow extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, GRN_SCHEDULE_MODULE_ID);
    }

    var $_app_id = 'schedule';

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => 'TRUE'
        ];  // イベント
    var $col_follow
        = [
            'type'   => 'char',
            'length' => '65535',
            'lazy'   => true
        ];         // フォロー

    /**
     * ログ
     *
     * @param string $action
     *
     * @return mixed
     */
    function getInspectionMessage($action)
    {
        return false;
    }

    /**
     *
     * @param string $action Action name.
     * @param object $logger Logger object.
     */
    function customLog($action, $logger)
    {
        switch ($action) {
            case 'create':
                break;
            default:
                parent::getInspectionMessage($action);

                return;
        }
        $event = $this->get('event');
        $log_params = [
            'eid'       => $event->getOID(),
            'follow_id' => $this->getOID()
        ];
        $logger->noticeEx($action, 'follow', $log_params);
    }
}

/**
 * 予定の通知先
 *
 * @package grn.schedule
 */
class GRN_Schedule_NotifyAddress extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'lazy'    => true,
            'notnull' => true
        ];// イベント
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User',
            'lazy' => true
        ];// 公開先ユーザー
    var $col_group
        = [
            'type' => 'relation',
            'to'   => 'CB_Group',
            'lazy' => true
        ];// 公開先組織
    var $col_role
        = [
            'type' => 'relation',
            'to'   => 'CB_Role',
            'lazy' => true
        ];// 公開先ロール
    var $col_order = ['type' => 'list_index', 'lazy' => true];// 公開先の表示順

    var $idx_event_user = ['cols' => ['event', 'user'], 'unique' => true];
    var $idx_event_group = ['cols' => ['event', 'group'], 'unique' => true];
    var $idx_event_role = ['cols' => ['event', 'role'], 'unique' => true];
    var $idx_event_order = ['cols' => ['event', 'order']];
}

/**
 * 予定の公開先初期値
 *
 * @package grn.schedule
 */
class GRN_Schedule_NotifyAddress_Default extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_target
        = [
            'type'    => 'relation',
            'to'      => 'CB_User',
            'lazy'    => true,
            'notnull' => true
        ];// 対象ユーザー
    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User',
            'lazy' => true
        ];// 公開先ユーザー
    var $col_group
        = [
            'type' => 'relation',
            'to'   => 'CB_Group',
            'lazy' => true
        ];// 公開先組織
    var $col_role
        = [
            'type' => 'relation',
            'to'   => 'CB_Role',
            'lazy' => true
        ];// 公開先ロール
    var $col_order = ['type' => 'list_index', 'lazy' => true];// 公開先の表示順

    var $idx_target_user = ['cols' => ['target', 'user'], 'unique' => true];
    var $idx_target_group = ['cols' => ['target', 'group'], 'unique' => true];
    var $idx_target_role = ['cols' => ['target', 'role'], 'unique' => true];
    var $idx_target_order = ['cols' => ['target', 'order']];
}

/**
 * 予定のメニュー連携
 *
 * @package grn.schedule
 */
class GRN_Schedule_EventPage extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, GRN_SCHEDULE_MODULE_ID);
    }

    var $_app_id = 'schedule';

    var $col_menu
        = [
            'type'    => 'char',
            'length'  => '100',
            'notnull' => 'TRUE',
            'unique'  => 'TRUE'
        ];  // メニュー名
    var $col_page
        = [
            'type'   => 'char',
            'length' => '65535',
            'lazy'   => true
        ];                       // 内容
    var $col_menu_list = ['type' => 'list_index'];                                               // メニューのリストインデックス

    var $idx_menu = ['cols' => ['menu']];                                                // メニューのインデックス

    /**
     * ログ
     *
     * @param string $action
     *
     * @return mixed
     */
    function getInspectionMessage($action)
    {
        return false;
    }

    /**
     *
     * @param string $action Action name.
     * @param object $logger Logger object.
     */
    function customLog($action, $logger)
    {
        switch ($action) {
            case 'create':
                break;
            case 'update':
                $action = 'modify';
                break;
            case 'delete':
                break;
            default:
                parent::getInspectionMessage($action);

                return;
        }

        $log_params = [
            'mid'        => $this->getOID(),
            'menu_title' => $this->get('menu')
        ];
        $logger->noticeEx($action, 'menupage', $log_params);
    }

}

/**
 * 通知既読のテーブル
 *
 * @package grn.schedule
 */
class GRN_Schedule_ReadStatus extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    /**
     * プロパティ
     */
    var $col_user
        = [
            'type'    => 'relation',
            'to'      => 'CB_User',
            'notnull' => true,
            'lazy'    => true
        ];  // ユーザーリレーション
    var $col_event_id
        = [
            'type'    => 'char',
            'length'  => '64',
            'notnull' => true
        ];                     // イベントのID

    var $col_timestamp = ['type' => 'timestamp'];                                                 // 確認時刻

    var $idx_user_event = ['cols' => ['user', 'event_id']];

}

/**
 * スケジュールのセキュリティモデル
 *
 * @package grn.schedule
 */
class GRN_Schedule_SecurityModel extends GRN_Access_Base
{
    var $_app_id = 'schedule';

    function __construct($row)
    {
        parent::__construct($row);
    }

    var $col_user
        = [
            'type' => 'relation',
            'to'   => 'CB_User',
            'lazy' => true
        ];                             // ユーザーとのリレーション
    var $col_group
        = [
            'type' => 'relation',
            'to'   => 'CB_Group'
        ];                            // 組織とのリレーション

    var $col_role
        = [
            'type' => 'relation',
            'to'   => 'CB_Role',
            'lazy' => true
        ];                            // ロールとのリレーション

    var $col_facility
        = [
            'type' => 'relation',
            'to'   => 'GRN_Facility_Facility'
        ];             // 施設

    var $col_facilitygroup
        = [
            'type' => 'relation',
            'to'   => 'GRN_Facility_FacilityGroup'
        ]; // 施設グループ

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } elseif ($col_name == 'facility') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityData = $dao->referFacilityById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityData->getId(),
                    $scheduleFacilityData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } elseif ($col_name == 'facilitygroup') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityGroupData
                    = $dao->referFacilitygroupById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityGroupData->getId(),
                    $scheduleFacilityGroupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 施設
 *
 * @package grn.facility
 */
class GRN_Facility_Facility extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, GRN_SCHEDULE_MODULE_ID);
    }

    var $_app_id = 'schedule';

    var $col_name
        = [
            'type'    => 'char',
            'length'  => '100',
            'notnull' => true
        ];                   // 施設名
    var $col_foreign_key
        = [
            'type'    => 'char',
            'length'  => '100',
            'notnull' => 'TRUE'
        ];         // 施設コード
    var $col_memo
        = [
            'type'   => 'char',
            'length' => '65535',
            'lazy'   => true
        ];                    // メモ
    var $col_list_index = ['type' => 'list_index'];                                          // リストインデックス

    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    // reserve booking setting
    var $col_settings = ['type' => 'char', 'length' => 65535, 'lazy' => true];

    var $col_settings_mtime = ['type' => 'timestamp'];

    /* -------------- VCBSCH0010 START ----------------- */
    var $col_netmeeting_available = ['type' => 'int'];              // 連携可否
    var $col_netmeeting_guests_normal_limit = ['type' => 'int'];              // 通常ユーザー招待人数の上限
    /* -------------- VCBSCH0010 END   ----------------- */

    var $idx_foreign_key = ['cols' => 'foreign_key', 'unique' => true];
    var $idx_list_index = ['cols' => ['list_index']];

    var $idx_id_name_foreign_key = ['cols' => [null, 'name', 'foreign_key']];
    var $idx_id_name_foreign_key_list_index
        = [
            'cols' => [
                null,
                'name',
                'foreign_key',
                'list_index'
            ]
        ];

    /**
     * ログ
     *
     * @param string $action
     *
     * @return mixed
     */
    function getInspectionMessage($action)
    {
        return false;
    }

    /**
     *
     * @param string $action Action name.
     * @param object $logger Logger object.
     */
    function customLog($action, $logger)
    {
        switch ($action) {
            case 'create':
                break;
            case 'update':
                $action = 'modify';
                break;
            case 'delete':
                break;
            default:
                parent::getInspectionMessage($action);

                return;
        }

        $log_params = [
            'faid'          => $this->getOID(),
            'facility_name' => $this->get('name')
        ];
        $logger->noticeEx($action, 'facility', $log_params);
    }
}

/**
 * 施設グループ
 *
 * @package grn.facility
 */
class GRN_Facility_FacilityGroup extends GRN_InspectionBase
{
    function __construct($row)
    {
        parent::__construct($row, GRN_SCHEDULE_MODULE_ID);
    }

    var $_app_id = 'schedule';

    var $col_name
        = [
            'type'    => 'char',
            'length'  => '100',
            'notnull' => true
        ];       // グループ名
    var $col_list_index = ['type' => 'list_index'];                              // リストインデックス

    var $idx_name = ['cols' => ['name']];
    var $idx_list_index = ['cols' => ['list_index', null]];

    // 施設グループコード
    var $col_foreign_key
        = [
            'type'    => 'char',
            'length'  => CB_DATABASE_MAX_STRINDEX,
            'notnull' => true
        ];
    var $idx_foreign_key = ['cols' => 'foreign_key', 'unique' => true];

    // 親の施設グループ
    var $col_parent
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Facility_FacilityGroup'
        ];

    // 施設グループの説明
    var $col_memo = ['type' => "char", 'length' => 65535, 'lazy' => true];

    var $col_settings = ['type' => 'char', 'length' => 65535, 'lazy' => true];
    // reserved columns
    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];

    var $idx_parent_list_index = ['cols' => ['parent', 'list_index']];

    /**
     * ログ
     *
     * @param string $action
     *
     * @return mixed
     */
    function getInspectionMessage($action)
    {
        return false;
    }

    /**
     *
     * @param string $action Action name.
     * @param object $logger Logger object.
     */
    function customLog($action, $logger)
    {
        switch ($action) {
            case 'create':
                break;
            case 'update':
                $action = 'modify';
                break;
            case 'delete':
                break;
            default:
                parent::getInspectionMessage($action);

                return;
        }

        $log_params = [
            'fgid'          => $this->getOID(),
            'facilitygroup' => $this->get('name')
        ];
        $logger->noticeEx($action, 'facilitygroup', $log_params);
    }

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'parent') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityGroupData
                    = $dao->referFacilitygroupById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityGroupData->getId(),
                    $scheduleFacilityGroupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 施設と施設グループのリレーション
 *
 * @package grn.facility
 */
class GRN_Facility_FacilityGroupRelation extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_facility
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Facility_Facility',
            'notnull' => true
        ];     // 施設
    var $col_facility_list = ['type' => 'list_index'];
    var $col_group
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Facility_FacilityGroup',
            'notnull' => true
        ];     // 施設グループ
    var $col_group_list = ['type' => 'list_index'];

    var $idx_facilities = ['cols' => ['group', 'facility_list']];
    var $idx_groups = ['cols' => ['facility', 'group_list']];
    var $idx_facilitygroup
        = [
            'cols'   => ['facility', 'group'],
            'unique' => 'TRUE'
        ];
    var $idx_group_list_facility
        = [
            'cols' => [
                'group',
                'facility_list',
                'facility'
            ]
        ];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'facility') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityData = $dao->referFacilityById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityData->getId(),
                    $scheduleFacilityData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } elseif ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityGroupData
                    = $dao->referFacilitygroupById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityGroupData->getId(),
                    $scheduleFacilityGroupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 施設グループの管理者
 *
 * @package grn.facility
 */
class GRN_Facility_FacilityGroup_Privilege extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_facilitygroup
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Facility_FacilityGroup',
            'notnull' => true
        ];       // グループ名

    var $col_user = ['type' => 'relation', 'to' => 'CB_User', 'lazy' => true];
    var $col_group = ['type' => 'relation', 'to' => 'CB_Group'];
    var $col_static_role
        = [
            'type' => 'relation',
            'to'   => 'CB_Role',
            'lazy' => true
        ];
    var $col_dynamic_role
        = [
            'type'   => 'char',
            'length' => '100',
            'lazy'   => true
        ];

    var $idx_facilitygroup_user
        = [
            'cols'   => ['facilitygroup', 'user'],
            'unique' => true
        ];
    var $idx_facilitygroup_group
        = [
            'cols'   => ['facilitygroup', 'group'],
            'unique' => true
        ];
    var $idx_facilitygroup_static_role
        = [
            'cols'   => [
                'facilitygroup',
                'static_role'
            ],
            'unique' => true
        ];
    var $idx_facilitygroup_dynamic_role
        = [
            'cols'   => [
                'facilitygroup',
                'dynamic_role'
            ],
            'unique' => true
        ];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }


        if ($col_name == 'group') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('fw/FwFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $table_info = $this->getTableInfo();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FwFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $groupData = $dao->referGroupById($dataObj, $id);
                $result = $relationTableInfo->getRow($groupData->getId(),
                    $groupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } elseif ($col_name == 'facilitygroup') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityGroupData
                    = $dao->referFacilitygroupById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityGroupData->getId(),
                    $scheduleFacilityGroupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 施設(for lock)
 *
 * @package grn.facility
 */
class GRN_Facility_Facility_For_Lock extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';
    var $col_facility
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Facility_Facility',
            'unique'  => true,
            'notnull' => true
        ];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'facility') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityData = $dao->referFacilityById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityData->getId(),
                    $scheduleFacilityData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 施設予約カスタマイズ項目クラス
 *
 * @package grn.facility
 */
class GRN_Facility_Item extends GRN_ItemBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    /** メニュー項目 */
    var $col_item_menu_textarea = ['type' => 'char', 'length' => 65535];
    /** メニュー項目の初期値 */
    var $col_item_menu_text = ['type' => 'char', 'length' => 100];
    /** 一覧に項目を表示 */
    var $col_display_item_name = ['type' => 'int'];

    /** インデックス */
    var $idx_i = ['cols' => ['id'], 'unique' => true];
}

/**
 * 施設予約カスタマイズ項目とアドレスデータの関連付け基礎クラス
 *
 * @package grn.facility
 */
class GRN_Facility_ItemDataRelation extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    /** 施設予約カスタマイズ項目ID */
    var $col_item = ['type' => 'relation', 'to' => 'GRN_Facility_Item'];
    /** 予定の内容ID */
    var $col_event
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Event',
            'notnull' => 'TRUE'
        ];

    /** 文字列データ */
    var $col_string = ['type' => 'char', 'length' => 65535, 'lazy' => true];

    var $col_reserve_text1 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text2 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_text3 = ['type' => 'char', 'lazy' => true];
    var $col_reserve_int1 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int2 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_int3 = ['type' => 'int', 'lazy' => true];
    var $col_reserve_blob1 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob2 = ['type' => 'blob', 'lazy' => true];
    var $col_reserve_blob3 = ['type' => 'blob', 'lazy' => true];
}


/**
 * 最近選択した施設グループ
 *
 */
class GRN_Facility_FacilityGroupHistory extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';
    var $col_target
        = [
            'type' => 'relation',
            'to'   => 'GRN_Facility_FacilityGroup'
        ];
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_last_selected = ['type' => 'timestamp'];
    var $idx_user_target = ['cols' => ['user', 'target'], 'unique' => true];
    var $idx_user_last_target
        = [
            'cols'   => [
                'user',
                'last_selected',
                'target'
            ],
            'unique' => false
        ];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityGroupData
                    = $dao->referFacilitygroupById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityGroupData->getId(),
                    $scheduleFacilityGroupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * 最近選択した施設
 *
 */
class GRN_Facility_FacilityHistory extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';
    var $col_target = ['type' => 'relation', 'to' => 'GRN_Facility_Facility'];
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_last_selected = ['type' => 'timestamp'];
    var $idx_user_target = ['cols' => ['user', 'target'], 'unique' => true];
    var $idx_user_last_target
        = [
            'cols'   => [
                'user',
                'last_selected',
                'target'
            ],
            'unique' => false
        ];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityData = $dao->referFacilityById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityData->getId(),
                    $scheduleFacilityData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/**
 * よく使う施設グループ
 *
 */
class GRN_Facility_OftenusedFacilityGroups extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';
    var $col_target
        = [
            'type' => 'relation',
            'to'   => 'GRN_Facility_FacilityGroup'
        ];
    var $col_user = ['type' => 'relation', 'to' => 'CB_User'];
    var $col_order = ['type' => 'list_index'];

    var $idx_user_target = ['cols' => ['user', 'target'], 'unique' => true];
    var $idx_user_order_target
        = [
            'cols'   => ['user', 'order', 'target'],
            'unique' => false
        ];

    /**
     * @param string $col_name
     *
     * @return CB_Row|mixed
     */
    public function get($col_name)
    {
        $result = false;

        $table_info = $this->getTableInfo();
        $col_info = $table_info->getColumnInfo($col_name);
        if (is_null($col_info)) {
            return $result;
        }

        if ($col_name == 'target') {
            $isKeyExists = array_key_exists(CB_DATABASE_COLUMN_PREFIX
                                            . $col_name,
                $this->__row->_rawdata);
            $id = $isKeyExists
                ? $this->__row->_rawdata[CB_DATABASE_COLUMN_PREFIX . $col_name]
                : null;

            if ( ! is_null($id)) {
                require_once('schedule/FacilityFacade.csp');
                require_once('fw/i18n.csp');

                $i18n = CB_I18N::getInstance();
                $tableManager = $table_info->getTableManager();
                $relationTableName = $col_info['to'];
                $relationTableInfo
                    = $tableManager->getTableInfo($relationTableName);
                $relationTableLock = $relationTableInfo->_lock;

                $dao = new FacilityFacade();
                $dataObj = [];
                $dataObj['lock'] = $relationTableLock;
                $dataObj['language'] = $i18n->getCurrentLanguage();

                $scheduleFacilityGroupData
                    = $dao->referFacilitygroupById($dataObj, $id);
                $result
                    = $relationTableInfo->getRow($scheduleFacilityGroupData->getId(),
                    $scheduleFacilityGroupData->convertArray());
            } else {
                $result = parent::get($col_name);
            }
        } else {
            $result = parent::get($col_name);
        }

        return $result;
    }
}

/* -------------- VCBSCH0010 START ----------------- */

/**
 * 連携データの保存場所
 *
 * @package grn.netmeeting
 */
class GRN_Schedule_Netmeeting_Cooperation extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_event_id = ['type' => 'int', 'length' => '8'];           // イベントID
    var $col_facility_code
        = [
            'type'   => 'char',
            'length' => '100'
        ];         // 施設コード
    var $col_start_datetime = ['type' => 'timestamp'];                     // 開始日時
    var $col_end_datetime = ['type' => 'timestamp'];                     // 終了日時
    var $col_title = ['type' => 'char', 'length' => '255'];         // タイトル
    var $col_memo = ['type' => 'char', 'length' => '65535'];        // メモ
    var $col_password = ['type' => 'char', 'length' => '50'];          // パスワード
    var $col_event_members
        = [
            'type'   => 'char',
            'length' => '65535'
        ];       // 招待者
    var $col_outside_members
        = [
            'type'   => 'char',
            'length' => '65535'
        ];       // 外部ユーザー
    var $col_creator = ['type' => 'char', 'length' => '65535'];       // 登録者
    var $col_modifier = ['type' => 'char', 'length' => '65535'];       // 更新者
    var $col_reservation_id
        = [
            'type'   => 'char',
            'length' => '50'
        ];          // 予約ID
    var $col_cooperation_status = ['type' => 'int'];                           // 連携状況
    var $col_timestamp = ['type' => 'timestamp'];                     // タイムスタンプ
    var $col_timezone = ['type' => 'char', 'length' => '100'];         // タイムゾーン
    var $col_end_timezone
        = [
            'type'   => 'char',
            'length' => '100'
        ];         // タイムゾーン(終了)

    var $idx_event_id = ['cols' => ['event_id'], 'unique' => true];
}

/**
 * 招待者データの保存場所
 *
 * @package grn.netmeeting
 */
class GRN_Schedule_Netmeeting_Invitation extends CB_PersistentBase
{
    function __construct($row)
    {
        parent::__construct($row);
    }

    var $_app_id = 'schedule';

    var $col_coop_id
        = [
            'type'    => 'relation',
            'to'      => 'GRN_Schedule_Netmeeting_Cooperation',
            'notnull' => 'TRUE'
        ];   // 連携テーブルID

    var $col_user_id = ['type' => 'char', 'length' => '50'];          // ユーザーID
    var $col_user_name = ['type' => 'char', 'length' => '100'];         // 氏名
    var $col_user_email
        = [
            'type'   => 'char',
            'length' => '100'
        ];         // E-Mail
    var $col_user_lang = ['type' => 'char', 'length' => '10'];          // 言語
    var $col_user_timezone
        = [
            'type'   => 'char',
            'length' => '100'
        ];         // タイムゾーン
    var $col_user_type
        = [
            'type'   => 'char',
            'length' => '10'
        ];          // 招待者タイプ
    var $col_guest_id = ['type' => 'char', 'length' => '65535'];       // ゲストID
    var $col_invite_url
        = [
            'type'   => 'char',
            'length' => '65535'
        ];       // 招待URL

    var $idx_coop_id = ['cols' => ['coop_id'], 'unique' => false];
}

/* -------------- VCBSCH0010 END   ----------------- */

//GTM-1136

/**
 * Association of attachment
 *
 * @package grn.schedule
 */
class GRN_Schedule_FileRelation extends CB_PersistentBase
{
    var $_app_id = 'schedule';

    var $col_event
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Schedule_Event',
            'lazy' => true
        ];
    var $col_file
        = [
            'type' => 'relation',
            'to'   => 'GRN_Schedule_File',
            'lazy' => true
        ];

    function __construct(& $row)
    {
        parent::__construct($row);
    }
}
//End GTM-1136
