<?php

namespace grn\schedule;

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\TodoEventCreator;
use grn\grn\access\service\AppAccess;

class EventListView
{
    const MEMBERS_LIMIT = 20;

    private $_beginDate;

    private $_endDate;

    private $_numberOfDays;

    private $_userIDs;

    private $_facilityIDs;

    private $_organizationIDs;

    private $_systemLogic;

    private $_personalLogic;

    private $_eventFactory;

    private $_application;

    private $_attendanceStatusLogic;

    private $_isEnableAttendanceStatus;

    private $_viewUtil;

    private $_hiddenPrivate;

    private $_week;

    private $_login;

    private $_allowFacilitiesName;

    private $_nameOnRight;

    private $_calendars;

    private $_showHoliday;

    private $_uum;

    private $_dynamicRoles;

    private $_accessLogic;

    private $_bannerEvents;

    private $_scheduleEvents;

    private $_facilityLogic;

    private $_setHour;

    private $_endHour;

    public function __construct()
    {
        $this->_beginDate = '';
        $this->_numberOfDays = 1;
        $this->_userIDs = [];
        $this->_facilityIDs = [];
        $this->_scheduleEvents = [];
        $this->_bannerEvents = [];
        $this->_calendars = [];
        $this->_week = null;
        $this->_login = cb_get_login_user();

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
        $this->_dynamicRoles = $this->_uum->listGrantedRoles();

        require_once('schedule/system_logic.csp');
        $this->_systemLogic = \GRN_Schedule_SystemLogic::getInstance();
        $this->_hiddenPrivate = $this->_systemLogic->getHiddenPrivate();
        $this->_showHoliday = $this->_systemLogic->getShowHoliday();

        $this->_allowFacilitiesName
            = $this->_systemLogic->getAllowFacilitiesName() == '1' ? true
            : false;

        $this->_nameOnRight
            = $this->_systemLogic->getAllowFacilitiesNameOnRight() == '1' ? true
            : false;

        require_once('schedule/personal_logic.csp');
        $this->_personalLogic = \GRN_Schedule_PersonalLogic::getInstance();
        $this->_showEndTime
            = $this->_personalLogic->getShowEndTime($this->_login);

        require_once('schedule/facility_system_logic.csp');
        $this->_facilityLogic = \GRN_Facility_SystemLogic::getInstance();

        require_once('schedule/access_logic.csp');
        $this->_accessLogic = \GRN_Schedule_Access_logic::getInstance();

        require_once('schedule/eventfactory.csp');
        $this->_eventFactory = \GRN_Schedule_EventFactory::getInstance();

        require_once('schedule/application.csp');
        $this->_application = \GRN_Schedule_Application::getInstance();

        require_once('schedule/view_util.csp');
        $this->_viewUtil = \GRN_Schedule_View_Util::getInstance();

        $this->_attendanceStatusLogic = new AttendanceStatusLogic();
        $this->_isEnableAttendanceStatus
            = $this->_attendanceStatusLogic->isEnableAttendanceCheck();

        $this->_setHour = 0;
        $this->_endHour = 0;
        $this->_personalLogic->getViewHour($this->_login, $this->_setHour,
            $this->_endHour);
    }

    /**
     * @param mixed $beginDate
     */
    public function setBeginDate($beginDate)
    {
        $this->_beginDate = $beginDate;
    }

    /**
     * @param int $numberOfDays
     */
    public function setNumberOfDays($numberOfDays)
    {
        $this->_numberOfDays = $numberOfDays;
    }

    /**
     * @param array $facilityIDs
     */
    public function setFacilityIDs($facilityIDs)
    {
        $this->_facilityIDs = $facilityIDs;
    }

    /**
     * @param array $userIDs
     */
    public function setUserIDs($userIDs)
    {
        $this->_userIDs = $userIDs;
    }

    /**
     * @param array $organizationIDs
     */
    public function setOrganizationIDs($organizationIDs)
    {
        $this->_organizationIDs = $organizationIDs;
    }

    public function getViewHour()
    {
        return [
            'minTime' => $this->_setHour,
            'maxTime' => $this->_endHour
        ];
    }

    public function getCalendarWeekStart()
    {
        return $this->_personalLogic->getCalendarWeekStart($this->_login);
    }

    public function fetch()
    {
        $this->createWeekInfo();
        $this->createCalendarInfo();
        $this->addDayInfo();
        $this->fetchUserEvents();
        $this->fetchFacilityEvents();
        $this->fetchOrganizationEvents();
        $this->addCustomizedTitleEvent();
        $this->addReportRelation();
        $this->fetchTodos();
        $this->mergeCalendarEvents();

        return [
            'by_date' => $this->_scheduleEvents,
            'banner'  => $this->_bannerEvents,
        ];
    }

    public function createWeekInfo()
    {
        if ( ! is_null($this->_week)) {
            return $this->_week;
        }

        $timestamp = new \CB_TimeStampEx();
        $today = $timestamp->getDate();

        $date = new \CB_Date();
        if ( ! $date->parse($this->_beginDate)) {
            $date->year = $today->year;
            $date->month = $today->month;
            $date->day = $today->day;
        }

        $this->_week = [];
        $dateex = new \CB_DateEx($date);
        $get_settime = $dateex;
        $get_endtime = $dateex;

        for ($i = 0; $i < $this->_numberOfDays; ++$i) {
            $this->_week[] = [
                'format'      => $dateex->format(),
                'type'        => $this->_viewUtil->getDayType($dateex),
                'date'        => $dateex,
                'get_settime' => $get_settime,
                'get_endtime' => $get_endtime
            ];

            $dateex = clone $dateex;
            $dateex->moveDays(1);
            $get_settime = clone $get_settime;
            $get_settime->moveDays(1);
            $get_endtime = clone $get_endtime;
            $get_endtime->moveDays(1);
        }

        $this->_beginDate = $this->_week[0];
        $this->_endDate = $this->_week[$this->_numberOfDays - 1];

        // create timestamp used for query event from DB
        $datetime = $timestamp->getDateTime();
        $datetime->setDate($this->_beginDate['date']);
        $datetime->hour = 0;
        $datetime->minute = 0;
        $datetime->second = 0;
        $timestamp->setDateTime($datetime);

        $this->_beginDate['timestamp'] = $timestamp->unix_ts;
        $this->_endDate['timestamp'] = $timestamp->unix_ts + 86400
                                                             * $this->_numberOfDays;

        return $this->_week;
    }

    public function getDatesForView()
    {
        $this->createWeekInfo();

        $dates = [];

        foreach ($this->_week as $date) {
            $date_for_view = [];
            $date_for_view['value'] = $date['format'];
            $date_for_view['text'] = cb_date_format('DateShort_MDW',
                $date['date']);
            $date_for_view['text_full'] = cb_date_format('DateFull_YMDW',
                $date['date']);
            $date_for_view['type'] = $date['type'];

            $dates[] = $date_for_view;
        }

        return $dates;
    }

    private function createCalendarInfo()
    {
        require_once('grn/calendar.csp');
        $calendarService = \GRN_CalendarService::getInstance();
        $calendars = $calendarService->getDaysInfo(
            $this->_beginDate['date'], $this->_endDate['date'], $this->_login
        );

        foreach ($this->_week as $dateIndex => $weekDate) {
            if ($this->_viewUtil->isWorkday($weekDate['date'], $calendars,
                $this->_login)
            ) {
                $this->_week[$dateIndex]['type'] = 's_date_workday';
            } elseif ($this->_showHoliday) {
                if ($this->_viewUtil->isHoliday($weekDate['date'],
                    $calendars)
                ) {
                    $this->_week[$dateIndex]['type'] = 's_date_holiday';
                }
            }
        }

        $sharedCalendar = $calendarService->getDaysInfoFromSharedCalendar(
            $this->_beginDate['date'], $this->_endDate['date'], $this->_login
        );
        $calendars = array_merge_recursive($calendars, $sharedCalendar);

        if (array_search($this->_login->getOID(), $this->_userIDs) === false) {
            foreach (array_keys($calendars) as $date) {
                foreach (array_keys($calendars[$date]) as $calendarId) {
                    // 個人データの削除
                    if (($calendars[$date][$calendarId]['type']
                         == GRN_CALENDAR_TYPE_MEMORIALDAY)
                        || ($calendars[$date][$calendarId]['type']
                            == GRN_CALENDAR_TYPE_USER_MEMO)
                    ) {
                        unset($calendars[$date][$calendarId]);
                        continue;
                    }
                    if ( ! $this->_showHoliday) {
                        if ($calendars[$date][$calendarId]['type']
                            == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                        ) {
                            unset($calendars[$date][$calendarId]);
                        }
                    }
                }
            }
        } elseif ( ! $this->_showHoliday) {
            foreach (array_keys($calendars) as $date) {
                foreach (array_keys($calendars[$date]) as $calendarId) {
                    // 祝日以外は削除
                    if ($calendars[$date][$calendarId]['type']
                        == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                    ) {
                        unset($calendars[$date][$calendarId]);
                    }
                }
            }
        }

        $this->_calendars = $calendars;
    }

    private function addDayInfo()
    {
        if ( ! is_null($this->_week) && count($this->_scheduleEvents) == 0) {
            foreach (array_keys($this->_week) as $dateIndex) {
                $date_info = $this->_week[$dateIndex];
                $this->_scheduleEvents[$dateIndex]['date_type']
                    = $date_info['type'];
                $this->_scheduleEvents[$dateIndex]['date']
                    = $date_info['format'];
                $this->_scheduleEvents[$dateIndex]['events'] = [];
            }
        }
    }

    private function fetchUserEvents()
    {
        if ( ! (is_array($this->_userIDs) && count($this->_userIDs) > 0)) {
            return;
        }

        $schedule_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
                         + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;

        // store cache
        \CB_UserBaseSetting::loadAndCache($this->_userIDs);

        foreach ($this->_userIDs as $uid) {
            $events = $this->_eventFactory->getEventsForWeek(
                $uid, 'user', $this->_beginDate, $this->_endDate,
                $this->_login->getOID(),
                $schedule_type, $this->_hiddenPrivate, $this->_week, true,
                false, $this->_isEnableAttendanceStatus
            );

            foreach (array_keys($this->_week) as $dateIndex) {
                $date_info = $this->_week[$dateIndex];
                $day_event = [];
                $day_event['date_type'] = $date_info['type'];
                $day_event['date'] = $date_info['format'];
                $day_event['event'] = [];

                // 終日予定がある
                if (array_key_exists($date_info['format'], $events['allday'])) {
                    $allday_events = $events['allday'][$date_info['format']];
                    foreach (array_keys($allday_events) as $eventIndex) {
                        $event = $allday_events[$eventIndex];
                        $temp = [];
                        $temp['id'] = $event['id'];
                        $temp['type']
                            = $this->_viewUtil->getViewEventType($event['event_type'],
                            $event['share']);
                        //GTM-103
                        $temp['detail'] = $event['event_detail'];
                        $temp['menu'] = $event['event_menu'];
                        $temp['menu_color'] = $event['event_menu_color'];
                        $temp['facility_name'] = '';
                        //End GTM-103
                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['type'] = 'normal';
                            $temp['data'] = cb_msg('grn.schedule',
                                'event_hidden');
                            $temp['private'] = true;
                            $temp['detail'] = $temp['data'];
                            $temp['menu'] = '';
                            $temp['menu_color'] = '';
                            $temp['facility_name'] = '';
                        } elseif ($event['private']
                                  == GRN_EVENT_PRIVATE_PRIVATE
                        ) {
                            $temp['data']
                                = grn_schedule_create_allday_title($date_info['format'],
                                $event);
                            $temp['is_private'] = true;
                        } else {
                            $temp['data']
                                = grn_schedule_create_allday_title($date_info['format'],
                                $event);
                        }

                        $temp['start_date'] = $event['setdate']->format();
                        $temp['end_date'] = $event['enddate']->format();

                        if ( ! $this->_viewUtil->createAttendanceStatusForUserEvent(
                            $this->_isEnableAttendanceStatus, $temp, $event
                        )
                        ) {
                            continue;
                        }

                        $temp['uid'] = $uid;

                        $day_event['event'][] = $temp;
                        $this->_scheduleEvents[$dateIndex]['events']['allday'][]
                            = $temp;
                    }
                }

                // 通常予定がある
                if (array_key_exists($date_info['format'], $events['normal'])) {
                    $normal_events = $events['normal'][$date_info['format']];
                    foreach (array_keys($normal_events) as $eventIndex) {
                        $event = $normal_events[$eventIndex];
                        $temp = [];
                        $temp['id'] = $event['id'];
                        $temp['type']
                            = $this->_viewUtil->getViewEventType($event['event_type'],
                            $event['share']);
                        $temp['detail'] = $event['event_detail'];
                        $temp['menu'] = $event['event_menu'];
                        $temp['menu_color'] = $event['event_menu_color'];
                        $temp['facility_name'] = '';
                        if ($this->_allowFacilitiesName) {
                            $this->_application->addFacilityNameToEventTitle(
                                $event, $this->_eventFactory, $event['id'],
                                $this->_nameOnRight
                            );
                            if (array_key_exists('event_facility_name',
                                $event)
                            ) {
                                $temp['facility_name']
                                    = $event['event_facility_name'];
                            }
                        }

                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['type'] = 'normal';
                            $temp['data'] = cb_msg('grn.schedule',
                                'event_hidden');
                            $temp['private'] = true;
                            $temp['detail'] = $temp['data'];
                            $temp['menu'] = '';
                            $temp['facility_name'] = '';
                            $temp['menu_color'] = '';
                        } elseif ($event['private']
                                  == GRN_EVENT_PRIVATE_PRIVATE
                        ) {
                            $temp['data'] = $event['title'];
                            $temp['is_private'] = true;
                        } else {
                            $temp['data'] = $event['title'];
                        }

                        $temp['start_date'] = $event['setdatetime']->format();
                        if (($event['event_type']
                             & GRN_SCHEDULE_EVENT_TYPE_START)
                            != GRN_SCHEDULE_EVENT_TYPE_START
                        ) {
                            if ($event['enddatetime']) {
                                $temp['end_date']
                                    = $event['enddatetime']->format();
                            }
                            if ($this->_application->compareDate($event['enddatetime'],
                                    $date_info['date']) > 0
                            ) {
                                $temp['end_datetime']
                                    = $event['enddatetime']->getDate()
                                                           ->format();
                            }
                        }
                        $temp['conflict'] = array_key_exists('conflict', $event)
                            ? $event['conflict'] : false;
                        if (cb_date_compare($date_info['date'],
                                $event['setdatetime']->getDate()) === 0
                        ) {
                            $temp['showtime'] = cb_date_format("TimeFormat",
                                $event['setdatetime']);
                        } else {
                            $temp['showtime']
                                = cb_date_format("ShortDateFormat",
                                $event['setdatetime']);
                        }

                        // using for data JSON of private appointment
                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['id'] = '';
                            $temp['type'] = '';
                            $temp['conflict'] = '';
                            $temp['absent'] = '';
                        }

                        //GTM-1625
                        if ( ! $this->_viewUtil->createAttendanceStatusForUserEvent(
                            $this->_isEnableAttendanceStatus, $temp, $event
                        )
                        ) {
                            continue;
                        }
                        $temp['uid'] = $uid;
                        $day_event['event'][] = $temp;
                        $this->_scheduleEvents[$dateIndex]['events']['normal'][]
                            = $temp;

                        $this->_viewUtil->checkViewTime($date_info['date'],
                            $event['setdatetime'], $event['enddatetime'],
                            $this->_setHour, $this->_endHour);
                    }
                }
            }

            // バナーの処理
            foreach (array_keys($events['banner']) as $eventIndex) {
                $event = $events['banner'][$eventIndex];

                // データの挿入
                $temp = [];
                $temp['id'] = $event['id'];
                $temp['start_date'] = $event['setdate']->format();
                $temp['end_date'] = $event['enddate']->format();
                $temp['type']
                    = $this->_viewUtil->getViewEventType($event['event_type'],
                    $event['share']);
                $temp['menu'] = $event['event_menu'];
                $temp['menu_color'] = $event['event_menu_color'];
                $temp['detail'] = $event['event_detail'];

                $start_date_view = '';
                if ($this->_beginDate['date']->compare($event['setdate'])
                    >= 0
                ) {
                    $start_date_view = $this->_beginDate['format'];
                } else {
                    $start_date_view = $event['setdate']->format();
                }

                // GRN2-2718
                $temp['data']
                    = grn_schedule_create_banner_title($start_date_view,
                    $event);

                $temp['uid'] = $uid;

                // 改行
                $this->_bannerEvents[] = $temp;
            }
        }
    }

    private function fetchFacilityEvents()
    {
        if ( ! is_array($this->_facilityIDs)
             || count($this->_facilityIDs) == 0
        ) {
            return;
        }

        $titleType = $this->_facilityLogic->getFacilityTitle();
        $schedule_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL;

        foreach ($this->_facilityIDs as $facility_id) {
            $events = $this->_eventFactory->getEventsForWeek(
                $facility_id, 'facility', $this->_beginDate, $this->_endDate,
                $this->_login->getOID(),
                $schedule_type, $this->_hiddenPrivate, $this->_week, true,
                false, $this->_isEnableAttendanceStatus
            );

            foreach (array_keys($this->_week) as $dateIndex) {
                $date_info = $this->_week[$dateIndex];

                // 通常予定がある
                if (array_key_exists($date_info['format'], $events['normal'])) {
                    $normal_events = $events['normal'][$date_info['format']];
                    foreach (array_keys($normal_events) as $eventIndex) {
                        $event = $normal_events[$eventIndex];
                        $temp = [];
                        $temp['id'] = $event['id'];
                        $temp['type']
                            = $this->_viewUtil->getViewEventType($event['event_type'],
                            $event['share']);
                        //GTM-103
                        $temp['detail'] = $event['event_detail'];
                        $temp['menu'] = $event['event_menu'];
                        $temp['menu_color'] = $event['event_menu_color'];
                        $temp['facility_name'] = '';
                        //$temp['facility_name_after'] = $this->_nameOnRight;
                        //End GTM-103
                        if ($this->_allowFacilitiesName) {
                            $this->_application->addFacilityNameToEventTitle(
                                $event, $this->_eventFactory, $event['id'],
                                $this->_nameOnRight
                            );
                            if (array_key_exists('event_facility_name',
                                $event)
                            ) {
                                $temp['facility_name']
                                    = $event['event_facility_name'];
                            }
                        }

                        $temp['data'] = $this->_facilityLogic->getEventTitle(
                            $event['title'], $event['creator_name'],
                            $event['private'], $titleType
                        );
                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['type'] = 'normal';
                            $temp['private'] = true;
                            $temp['event_detail'] = $temp['data'];
                            $temp['event_menu'] = '';
                            $temp['event_facility_name'] = '';
                            $temp['event_menu_color'] = '';

                        } elseif ($event['private']
                                  == GRN_EVENT_PRIVATE_PRIVATE
                        ) {
                            $temp['is_private'] = true;
                        }
                        $this->_facilityLogic->getEventTitleByType($temp,
                            $titleType, $event['creator_name']);


                        $temp['start_date'] = $event['setdatetime']->format();
                        if (($event['event_type']
                             & GRN_SCHEDULE_EVENT_TYPE_START)
                            != GRN_SCHEDULE_EVENT_TYPE_START
                        ) {
                            if ($event['enddatetime']) {
                                $temp['end_date']
                                    = $event['enddatetime']->format();
                            }
                            if ($this->_application->compareDate($event['enddatetime'],
                                    $date_info['date']) > 0
                            ) {
                                $temp['end_datetime']
                                    = $event['enddatetime']->getDate()
                                                           ->format();
                            }
                        }
                        $temp['conflict'] = array_key_exists('conflict', $event)
                            ? $event['conflict'] : false;
                        if (cb_date_compare($date_info['date'],
                                $event['setdatetime']->getDate()) === 0
                        ) {
                            $temp['showtime'] = cb_date_format("TimeFormat",
                                $event['setdatetime']);
                        } else {
                            $temp['showtime']
                                = cb_date_format("ShortDateFormat",
                                $event['setdatetime']);
                        }

                        // using for data JSON of private appointment
                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['id'] = '';
                            $temp['type'] = '';
                            $temp['conflict'] = '';
                            $temp['absent'] = '';
                        }

                        $temp['fid'] = $facility_id;
                        $this->_scheduleEvents[$dateIndex]['events']['normal'][]
                            = $temp;

                        $this->_viewUtil->checkViewTime($date_info['date'],
                            $event['setdatetime'], $event['enddatetime'],
                            $this->_setHour, $this->_endHour);
                    }
                }
            }
        }
    }

    private function fetchOrganizationEvents()
    {
        if ( ! (is_array($this->_organizationIDs)
                && count($this->_organizationIDs) > 0)
        ) {
            return;
        }

        $schedule_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
                         + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;

        foreach ($this->_organizationIDs as $org_id) {
            $events = $this->_eventFactory->getEventsForWeek(
                $org_id, 'group', $this->_beginDate, $this->_endDate,
                $this->_login->getOID(),
                $schedule_type, $this->_hiddenPrivate, $this->_week, true,
                false, $this->_isEnableAttendanceStatus
            );

            foreach (array_keys($this->_week) as $dateIndex) {
                $date_info = $this->_week[$dateIndex];
                $day_event = [];
                $day_event['date_type'] = $date_info['type'];
                $day_event['date'] = $date_info['format'];
                $day_event['event'] = [];

                // 終日予定がある
                if (array_key_exists($date_info['format'], $events['allday'])) {
                    $allday_events = $events['allday'][$date_info['format']];
                    foreach (array_keys($allday_events) as $eventIndex) {
                        $event = $allday_events[$eventIndex];
                        $temp = [];
                        $temp['id'] = $event['id'];
                        $temp['type']
                            = $this->_viewUtil->getViewEventType($event['event_type'],
                            $event['share']);
                        $temp['detail'] = $event['event_detail'];
                        $temp['menu'] = $event['event_menu'];
                        $temp['menu_color'] = $event['event_menu_color'];
                        $temp['facility_name'] = '';

                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['type'] = 'normal';
                            $temp['data'] = cb_msg('grn.schedule',
                                'event_hidden');
                            $temp['private'] = true;
                            $temp['detail'] = $temp['data'];
                            $temp['menu'] = '';
                            $temp['menu_color'] = '';
                            $temp['facility_name'] = '';
                        } elseif ($event['private']
                                  == GRN_EVENT_PRIVATE_PRIVATE
                        ) {
                            $temp['data']
                                = grn_schedule_create_allday_title($date_info['format'],
                                $event);
                            $temp['is_private'] = true;
                        } else {
                            $temp['data']
                                = grn_schedule_create_allday_title($date_info['format'],
                                $event);
                        }

                        $temp['start_date'] = $event['setdate']->format();
                        $temp['end_date'] = $event['enddate']->format();

                        if ( ! $this->_viewUtil->createAttendanceStatusForUserEvent(
                            $this->_isEnableAttendanceStatus, $temp, $event)
                        ) {
                            continue;
                        }

                        $temp['gid'] = $org_id;

                        $day_event['event'][] = $temp;
                        $this->_scheduleEvents[$dateIndex]['events']['allday'][]
                            = $temp;
                    }
                }

                // 通常予定がある
                if (array_key_exists($date_info['format'], $events['normal'])) {
                    $normal_events = $events['normal'][$date_info['format']];
                    foreach (array_keys($normal_events) as $eventIndex) {
                        $event = $normal_events[$eventIndex];
                        $temp = [];
                        $temp['id'] = $event['id'];
                        $temp['type']
                            = $this->_viewUtil->getViewEventType($event['event_type'],
                            $event['share']);
                        $temp['detail'] = $event['event_detail'];
                        $temp['menu'] = $event['event_menu'];
                        $temp['menu_color'] = $event['event_menu_color'];
                        $temp['facility_name'] = '';

                        if ($this->_allowFacilitiesName) {
                            $this->_application->addFacilityNameToEventTitle(
                                $event, $this->_eventFactory, $event['id'],
                                $this->_nameOnRight
                            );
                            if (array_key_exists('event_facility_name',
                                $event)
                            ) {
                                $temp['facility_name']
                                    = $event['event_facility_name'];
                            }
                        }

                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['type'] = 'normal';
                            $temp['data'] = cb_msg('grn.schedule',
                                'event_hidden');
                            $temp['private'] = true;
                            $temp['detail'] = $temp['data'];
                            $temp['menu'] = '';
                            $temp['facility_name'] = '';
                            $temp['menu_color'] = '';
                        } elseif ($event['private']
                                  == GRN_EVENT_PRIVATE_PRIVATE
                        ) {
                            $temp['data'] = $event['title'];
                            $temp['is_private'] = true;
                        } else {
                            $temp['data'] = $event['title'];
                        }

                        $temp['start_date'] = $event['setdatetime']->format();
                        if (($event['event_type']
                             & GRN_SCHEDULE_EVENT_TYPE_START)
                            != GRN_SCHEDULE_EVENT_TYPE_START
                        ) {
                            if ($event['enddatetime']) {
                                $temp['end_date']
                                    = $event['enddatetime']->format();
                            }
                            if ($this->_application->compareDate($event['enddatetime'],
                                    $date_info['date']) > 0
                            ) {
                                $temp['end_datetime']
                                    = $event['enddatetime']->getDate()
                                                           ->format();
                            }
                        }
                        $temp['conflict'] = array_key_exists('conflict', $event)
                            ? $event['conflict'] : false;
                        if (cb_date_compare($date_info['date'],
                                $event['setdatetime']->getDate()) === 0
                        ) {
                            $temp['showtime'] = cb_date_format("TimeFormat",
                                $event['setdatetime']);
                        } else {
                            $temp['showtime']
                                = cb_date_format("ShortDateFormat",
                                $event['setdatetime']);
                        }

                        // using for data JSON of private appointment
                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['id'] = '';
                            $temp['type'] = '';
                            $temp['conflict'] = '';
                            $temp['absent'] = '';
                        }

                        //GTM-1625
                        if ( ! $this->_viewUtil->createAttendanceStatusForUserEvent(
                            $this->_isEnableAttendanceStatus, $temp, $event)
                        ) {
                            continue;
                        }
                        $temp['gid'] = $org_id;
                        $day_event['event'][] = $temp;
                        $this->_scheduleEvents[$dateIndex]['events']['normal'][]
                            = $temp;

                        $this->_viewUtil->checkViewTime($date_info['date'],
                            $event['setdatetime'], $event['enddatetime'],
                            $this->_setHour, $this->_endHour);
                    }
                }
            }

            // バナーの処理
            foreach (array_keys($events['banner']) as $eventIndex) {
                $event = $events['banner'][$eventIndex];

                // データの挿入
                $temp = [];
                $temp['id'] = $event['id'];
                $temp['start_date'] = $event['setdate']->format();
                $temp['end_date'] = $event['enddate']->format();
                $temp['type']
                    = $this->_viewUtil->getViewEventType($event['event_type'],
                    $event['share']);
                $temp['menu'] = $event['event_menu'];
                $temp['menu_color'] = $event['event_menu_color'];
                $temp['detail'] = $event['event_detail'];

                $start_date_view = '';
                if ($this->_beginDate['date']->compare($event['setdate'])
                    >= 0
                ) {
                    $start_date_view = $this->_beginDate['format'];
                } else {
                    $start_date_view = $event['setdate']->format();
                }

                // GRN2-2718
                $temp['data']
                    = grn_schedule_create_banner_title($start_date_view,
                    $event);

                $temp['gid'] = $org_id;

                // 改行
                $this->_bannerEvents[] = $temp;
            }
        }
    }

    private function addCustomizedTitleEvent()
    {
        foreach (array_keys($this->_scheduleEvents) as $eventListIndex) {
            $eventsList = $this->_scheduleEvents[$eventListIndex];
            foreach ($eventsList['events'] as $typeEvent => $events) {
                foreach (array_keys($events) as $eventIndex) {
                    $event = $events[$eventIndex];
                    if (array_key_exists('private', $event) === true
                        && $event['private'] === true
                    ) {
                        continue;
                    }
                    $strtmp = $this->_facilityLogic->getDataTitle($event['id']);
                    $this->_scheduleEvents[$eventListIndex]['events'][$typeEvent][$eventIndex]['data']
                        .= $strtmp;
                    $this->_scheduleEvents[$eventListIndex]['events'][$typeEvent][$eventIndex]['faci_items']
                        = $strtmp;
                }
            }
        }
    }

    private function addReportRelation()
    {
        require_once('report/resources.csp');
        if (AppAccess::isAppAvailable(GRN_REPORT_APPLICATION_ID)) {
            $event_id_list = [];
            foreach (array_keys($this->_scheduleEvents) as $eventListIndex) {
                $eventsList = $this->_scheduleEvents[$eventListIndex];
                foreach ($eventsList['events'] as $events) {
                    if (is_array($events)) {
                        foreach (array_keys($events) as $eventIndex) {
                            $event_id_list[] = $events[$eventIndex]['id'];
                        }
                    }
                }
            }

            foreach (array_keys($this->_bannerEvents) as $eventIndex) {
                $event_id_list[] = $this->_bannerEvents[$eventIndex]['id'];
            }

            //報告書に関連するイベントにフラグを立てる。(一覧画面で報告書アイコンを表示するため)
            require_once('report/report_schedule_logic.csp');
            $report_schedule_logic
                = \GRN_Report_Report_Schedule_Logic::getInstance();
            $report_relation_id_list
                = $report_schedule_logic->getRelatedReportEventIdsByEventIds(
                $event_id_list, $this->_login
            );

            //報告書と関連が存在するか調べる
            foreach (array_keys($this->_scheduleEvents) as $eventListIndex) {
                $eventsList = $this->_scheduleEvents[$eventListIndex];
                foreach ($eventsList['events'] as $typeEvent => $events) {
                    foreach (array_keys($events) as $eventIndex) {
                        $event = &$events[$eventIndex];
                        if (isset($report_relation_id_list[$event['id']])) {
                            $this->_scheduleEvents[$eventListIndex]['events'][$typeEvent][$eventIndex]['report']
                                = 1;
                        }
                    }
                }
            }

            foreach (array_keys($this->_bannerEvents) as $eventIndex) {
                if (isset($report_relation_id_list[$this->_bannerEvents[$eventIndex]['id']])) {
                    $this->_bannerEvents[$eventIndex]['report'] = 1;
                }
            }
        }
    }

    private function fetchTodos()
    {
        $input = [
            'uid'   => $this->_login->getOID(),
            'bdate' => $this->_beginDate['format']
        ];

        if (array_search($this->_login->getOID(), $this->_userIDs) === false) {
            return;
        }

        require_once('schedule/TodoEventCreator.csp');
        $todo_creator = TodoEventCreator::createWeekEvent($input);
        $shared_todos = $todo_creator->getMyUncompletedSharedTodo();

        $today = (new \CB_TimeStampEx())->getDate();
        if (cb_date_compare($this->_beginDate['get_settime'], $today) === 0) {
            $expired_todo_creator = TodoEventCreator::createDayEvent($input);
            $this->_scheduleEvents[0]['expired_personal_todos']
                = $expired_todo_creator->getExpiredPersonalTodo();
            $this->_scheduleEvents[0]['expired_shared_todos']
                = $expired_todo_creator->getExpiredSharedTodo();
        }

        foreach (array_keys($this->_week) as $dateIndex) {
            $date_info = $this->_week[$dateIndex];

            $this->_scheduleEvents[$dateIndex]['todos'] = array_values(
                $this->_viewUtil->getDayToDoListView($this->_login,
                    $date_info['get_settime'])
            );

            if (count($shared_todos) > 0) {
                $this->_scheduleEvents[$dateIndex]['shared_todos']
                    = $shared_todos[$dateIndex];
            }
        }
    }

    private function mergeCalendarEvents()
    {
        $calendars = $this->_calendars;

        if ( ! is_array($calendars)) {
            return;
        }

        foreach (array_keys($this->_week) as $dateIndex) {
            $date_info = $this->_week[$dateIndex];

            $this->_scheduleEvents[$dateIndex]['calendar'] = cb_at($calendars,
                $date_info['format'], null);
        }
    }
}
