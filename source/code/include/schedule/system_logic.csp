<?php

/**
 * スケジューラーの個人設定などを管理するロジック
 *
 * @author      A.Shima     2004/10/22
 * @package     grn.schedule
 */

require_once('fw/profile.csp');
require_once('fw/date.csp');
require_once('schedule/resources.csp');
require_once('schedule/error_code.csp');

/**
 * @package     grn.schedule
 */
class GRN_Schedule_SystemLogic extends CB_ModuleBase
{
    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct(GRN_SCHEDULE_MODULE_ID . '.system');
    }

    /**
     * @var $_instance GRN_Schedule_SystemLogic
     */
    private static $_instance = null;

    /**
     * @return GRN_Schedule_SystemLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * 予定メニューの取得
     *
     * @return  array           ユーザーの配列のメニュー
     */
    function getMenus()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_MENUS, $value);
        $menus = null;

        if ($ret && is_string($value)) {
            $menus = mb_split("\r\n", $value);
            $tmpmenus = [];
            foreach ($menus as $menu) {
                $tmpmenus[] = [$menu, "0"];
            }
            $menus = $tmpmenus;
        } else {
            $menus = $value;
        }
        if ( ! is_null($menus) && is_array($menus)) {
            // 空行の削除
            foreach ($menus as $key => $menu) {
                if (count($menu) == 0) {
                    unset($menus[$key]);
                }
            }
        }

        $ret_menus = [];
        if (is_array($menus) && count($menus) > 0) {
            foreach ($menus as $menu) {
                $menu = cb_trim_unicode_separator($menu);
                $ret_menus[] = $menu;
            }
        }

        return $ret_menus;
    }

    /**
     * @param   strMenu the string detect from persional or administrator setting
     *
     * @return  integer     -1 persional menu, else administrator menu, the text is null return empty,
     * 9999: not detected
     */
    function detectColorIndexFromText($strMenu)
    {
        $strMenu = trim(preg_replace("/\s+/", " ", $strMenu));
        if (strlen($strMenu) < 1) {
            return "";
        }

        require_once('schedule/personal_logic.csp');
        $personallogic = GRN_Schedule_PersonalLogic::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();

        $temp = $personallogic->getMenus($login);
        foreach ($temp as $menu) {
            if (strcasecmp($menu, $strMenu) == 0) {
                return -1;
            }
        }
        $temp = $this->getMenus();
        $prio_ar = [];
        foreach ($temp as $key => $value) {
            if ($value[1] == "0") {
                $prio_ar[] = $value;
                unset($temp[$key]);
            }
        }
        $result = array_merge($prio_ar, $temp);
        if (is_array($result)) {
            foreach ($result as $menu) {
                if (strcasecmp($menu[0], $strMenu) == 0) {
                    return $menu[1];
                }
            }
        }

        return 9999;
    }

    /**
     * メニューの設定
     *
     * @param   mixed $menus メニューの内容(stringかarrayの配列）
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function setMenus($menus, $order_post = false)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();
        $menus_serialize = [];
        if ($order_post == false) {
            $menus = explode("\n", $menus);
            foreach ($menus as $key => $value) {
                $trim_value = trim($value);

                if (strlen($trim_value) > 0) {
                    if (preg_match('/(.*)(;#)(\d+)$/', $trim_value, $matches)) {
                        $m1 = cb_trim($matches[1]);
                        if (mb_strlen($m1) > 0) {
                            $menus_serialize[] = [
                                mb_ereg_replace("(　|\s)+", " ", $m1),
                                $matches[3]
                            ];//menuName, menucolor
                        }
                    }
                }
            }
        } else {
            $menus_serialize = $menus;
        }
        // プロファイルの設定

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_MENUS,
            $menus_serialize);//$str_menus );
    }

    /**
     * 予定（予約）を設定する単位の取得
     *
     * @return  string   単位
     */
    function getScheduleUnit()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_UNIT, $value);
        $value = (int)$value;
        if ( ! $ret || ! $value) {
            $value = '30';
        }

        return $value;
    }

    /**
     * 予定（予約）を設定する単位の設定
     *
     * @param   string $unit 単位(分）
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setScheduleUnit($unit)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_UNIT, $unit);
    }

    /**
     * 非公開スケジュールを登録できるかどうかの設定の取得
     *
     * @return  mixed   登録できる場合は１登録できない場合は0、それ以外はFALSE
     */
    function getUsePrivate()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_USE_PRIVATE, $value);
        if ( ! $ret) {
            $value = '1';
        }

        return $value;
    }

    /**
     * 非公開スケジュールを登録できるかどうかの設定
     *
     * @param   string $flag 登録できる場合は１、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setUsePrivate($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_USE_PRIVATE,
            $flag);
    }

    /**
     * 非公開スケジュールを完全に隠すかどうかの設定の取得
     *
     * @return  mixed   隠す場合は１、隠さない場合は0、それ以外はFALSE
     */
    function getHiddenPrivate()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_HIDDEN_PRIVATE, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * 非公開スケジュールを登録できるかどうかの設定
     *
     * @param   string $flag 隠す場合は１、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setHiddenPrivate($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_HIDDEN_PRIVATE, $flag);
    }

    /**
     * 公開先予定の通知設定の取得
     *
     * @return  mixed   公開先ユーザーには通知をしない場合は１、通知をする場合は0、それ以外はFALSE
     */
    function getManagedNotify()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_MANAGED_NOTIFY, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * 公開先予定の通知設定の取得の設定
     *
     * @param   string $flag 公開先ユーザーには通知をしない場合は１、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setManagedNotify($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_MANAGED_NOTIFY, $flag);
    }

    /**
     * 組織スケジュールを表示するかどうかの設定の取得
     *
     * @return  mixed   表示する場合は１、表示しない場合は0、それ以外はFALSE
     */
    function getShowOrganize()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_SHOW_ORGANIZE, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * 組織スケジュールを表示するかどうかの設定
     *
     * @param   string $flag 表示する場合は１、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setShowOrganize($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_SHOW_ORGANIZE, $flag);
    }

    /**
     * 祝日を表示するかどうかの設定の取得
     *
     * @return  mixed   表示する場合は１、表示しない場合は0、それ以外はFALSE
     */
    function getShowHoliday()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_SHOW_HOLIDAY, $value);
        if ( ! $ret) {
            $value = '1';
        }

        return $value;
    }

    /**
     * 祝日を表示するかどうかの設定
     *
     * @param   string $flag 表示する場合は１、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setShowHoliday($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_SHOW_HOLIDAY,
            $flag);
    }

    /**
     *  （全施設）という選択肢を表示するかどうかの設定の取得
     *
     * @return  mixed   表示する場合は１、表示しない場合は0、それ以外はFALSE
     */
    function getAllowAllFacilities()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_ALLOW_ALL_FACILITIES,
            $value);
        if ( ! $ret) {
            $value = '1';
        }

        return $value;
    }

    /**
     * （全施設）という選択肢を表示するかどうかの設定
     *
     * @param   string $flag 表示する場合は１、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setAllowAllFacilities($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_ALLOW_ALL_FACILITIES, $flag);
    }

    /**
     * @return null|string
     */
    function getAllowFacilitiesName()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_ALLOW_FACILITIES_NAME,
            $value);
        if ( ! $ret) {
            $value = '0'; //default value
        }

        return $value;
    }

    /**
     * @param $flag
     *
     * @return bool
     */
    function setAllowFacilitiesName($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_ALLOW_FACILITIES_NAME, $flag);
    }

    function getAllowFacilitiesNameOnRight()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret
            = $profile->getAttribute(GRN_SCHEDULE_ALLOW_FACILITIES_NAME_ON_RIGHT,
            $value);
        if ( ! $ret) {
            $value = '1';
        }

        return $value;
    }

    /**
     * @param $flag
     *
     * @return bool
     */
    function setAllowFacilitiesNameOnRight($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_ALLOW_FACILITIES_NAME_ON_RIGHT, $flag);
    }

    /**
     * 繰り返し予定の登録期間の設定の取得
     *
     * @return  mixed   成功した場合は期間（ヶ月）、それ以外はFALSE
     */
    function getRepeatLimit()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_REPEAT_LIMIT, $value);
        if ( ! $ret) {
            $value = '12';
        }

        return $value;
    }

    /**
     * 繰り返し予定の登録期間の設定
     *
     * @param   string $limit 登録できる期間（ヶ月）
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    function setRepeatLimit($limit)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_REPEAT_LIMIT,
            $limit);
    }

    /**
     * activate drag drop schedule
     * GTM-415
     */
    function getActivateDragDrop()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_ACTIVATE_DRAGDROP, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    function setActivateDragDrop($flag)
    {
        $profile = $this->getSystemProfile();

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_ACTIVATE_DRAGDROP, $flag);
    }
    // GTM-415

    //GTM-1136
    function getAllowFileAttachment()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_ALLOW_FILE_ATTACHMENT,
            $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    function setAllowFileAttachment($flag)
    {
        $profile = $this->getSystemProfile();

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_ALLOW_FILE_ATTACHMENT, $flag);
    }
    //End GTM-1136

    //GTM-1621
    function getAllowAttendanceCheck()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_ALLOW_ATTENDANCE_CHECK,
            $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    function setAllowAttendanceCheck($flag)
    {
        $profile = $this->getSystemProfile();

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_ALLOW_ATTENDANCE_CHECK, $flag);
    }

    function getDefaultAttendanceCheck()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_DEFAULT_ATTENDANCE_CHECK,
            $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    function setDefaultAttendanceCheck($flag)
    {
        $profile = $this->getSystemProfile();

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_DEFAULT_ATTENDANCE_CHECK, $flag);
    }

    //End GTM-1621

    function getDefaultPrivateSet()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_DEFAULT_PRIVATE_SET,
            $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    function setDefaultPrivateSet($flag)
    {
        $profile = $this->getSystemProfile();

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_DEFAULT_PRIVATE_SET, $flag);
    }

    /**
     * @return bool
     */
    function getAllowSettingGroupRoleToWatchers()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        $ret
            = $profile->getAttribute(GRN_SCHEDULE_ALLOW_SETTING_GROUP_ROLE_TO_WATCHERS,
            $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * @param $flag
     *
     * @return bool
     */
    function setAllowSettingGroupRoleToWatchers($flag)
    {
        $profile = $this->getSystemProfile();

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_ALLOW_SETTING_GROUP_ROLE_TO_WATCHERS, $flag);
    }

    /**
     * スケジュールの一括削除
     *
     * @param   string $uid ユーザーID
     */
    function deleteUserEvents($uid)
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $membertable = $tm->getTableInfo(GRN_EVENTMEMBER);
        $rowset = new CB_RowSet($membertable);
        $rowset->addCondition($rowset->queryf("col_user = '@S'", $uid));
        while ( ! is_null($row = $rowset->iterate())) {
            $event = $row->get(GRN_SCHEDULE_EVENT);

            // メンバーにユーザー/組織がない場合に削除
            if ($this->_checkMembers($event->getOID(), $row->getOID())) {
                $event->delete();
            }
        }
        $rowset->destroy();
    }

    /**
     * @param $eid
     * @param $mid
     *
     * @return bool
     */
    function _checkMembers($eid, $mid)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $membertable = $tm->getTableInfo(GRN_EVENTMEMBER);
        $rowset = new CB_RowSet($membertable);
        $rowset->addCondition($rowset->queryf("col_event = '@S' AND _id <> '@S'",
            $eid, $mid));
        while ( ! is_null($row = $rowset->iterate())) {
            $member = $row->get('user');
            if (is_a($member, 'CB_User')) {
                $rowset->destroy();

                return false;
            }
            $member = $row->get('group');
            if (is_a($member, 'CB_Group')) {
                $rowset->destroy();

                return false;
            }
        }
        $rowset->destroy();

        return true;
    }

    /**
     * スケジュールの期間での一括削除
     *
     * @param   CB_Date $date      削除する日付
     * @param   int     $max_limit 最大削除データ
     *
     * @return  bool       FALSEの場合は完了、TRUEの場合は、残りがある場合
     */
    function deleteEvents($date, $max_limit = 0)
    {
        require_once('schedule/table.csp');

        //GTM-1136
        require_once('schedule/file.csp');
        $fm = GRN_Schedule_FileManager::getInstance();
        //End GTM-1136

        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');
        $reportScheduleRelationDao
            = new \grn\report\dao\ReportScheduleRelationDAO();

        $_counter = 0;

        // 繰り返しの削除
        $_repeattable = $tm->getTableInfo(GRN_EVENTREPEATCONDITION);
        $repeatrowset = new CB_RowSet($_repeattable);
        $repeatrowset->addCondition($repeatrowset->queryf("col_enddate <= '@S'",
            $date->format()));
        while ( ! is_null($row = $repeatrowset->iterate())) {
            if (($max_limit > 0) && ($_counter > $max_limit)) {
                $repeatrowset->destroy();

                return true;
            }

            $event = $row->get('event');
            $event->delete();

            $_counter++;
        }
        $repeatrowset->destroy();

        $_datetimetable = $tm->getTableInfo(GRN_EVENTDATETIME);
        $_datetable = $tm->getTableInfo(GRN_EVENTDATE);

        // 通常（終日）とバナーの削除
        $daterowset = new CB_RowSet($_datetable);
        $daterowset->addCondition($daterowset->queryf("col_enddate <= '@S'  AND col_event_type <> '@S'",
            $date->format(),
            (GRN_SCHEDULE_EVENT_TYPE_REPEAT + GRN_SCHEDULE_EVENT_TYPE_ALLDAY)));
        while ( ! is_null($row = $daterowset->iterate())) {
            if (($max_limit > 0) && ($_counter > $max_limit)) {
                $daterowset->destroy();

                return true;
            }

            $event = $row->get('event');
            //GTM-1136
            $fm->deleteFiles($event->getOID());
            //End GTM-1136
            $event->delete();
            $reportScheduleRelationDao->deleteReportRelationByScheduleId($event->getOID());

            $_counter++;
        }
        $daterowset->destroy();

        // 通常の削除
        $datetimerowset = new CB_RowSet($_datetimetable);
        $datetime = new CB_DateTime();
        $datetime->year = $date->year;
        $datetime->month = $date->month;
        $datetime->day = $date->day;
        $datetimeex = new CB_DateTimeEx($datetime);
        $datetimeex->moveDays(1);

        $timestamp = new CB_TimeStamp();
        $timestamp->unix_ts = time();
        $timestampex = new CB_TimeStampEx($timestamp);
        $timestampex->setDateTime($datetimeex);
        $datetimerowset->addCondition($datetimerowset->queryf("col_enddatetime <= '@S' AND col_event_type <> '@S' AND col_event_type <> '@S' AND col_event_type <> '@S'",
            $timestampex->unix_ts, (GRN_SCHEDULE_EVENT_TYPE_REPEAT),
            (GRN_SCHEDULE_EVENT_TYPE_REPEAT + GRN_SCHEDULE_EVENT_TYPE_START),
            (GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)));
        while ( ! is_null($row = $datetimerowset->iterate())) {
            if (($max_limit > 0) && ($_counter > $max_limit)) {
                $datetimerowset->destroy();

                return true;
            }
            $event = $row->get('event');
            //GTM-1136
            $fm->deleteFiles($event->getOID());
            //End GTM-1136
            $event->delete();
            $reportScheduleRelationDao->deleteReportRelationByScheduleId($event->getOID());
            $_counter++;
        }
        $datetimerowset->destroy();

        $_eventtable = $tm->getTableInfo(GRN_SCHEDULEEVENT);

        // 仮予定の削除
        $datetimerowset = new CB_RowSet($_datetimetable);
        $datetimerowset->addCondition($datetimerowset->queryf("col_enddatetime <= '@S' AND col_event_type = '@S'",
            $timestampex->unix_ts, (GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)));
        $datetimerowset->applyGroupFunctions([], ['event_id' => 'col_event']);
        while ( ! is_null($row = &$datetimerowset->iterate())) {
            if (($max_limit > 0) && ($_counter > $max_limit)) {
                $datetimerowset->destroy();

                return true;
            }

            $event_id = $row['event_id'];
            $temprowset = new CB_RowSet($_datetimetable);
            $temprowset->addCondition($temprowset->queryf("col_setdatetime > '@S' AND col_event = '@S'",
                $timestampex->unix_ts, $event_id));
            $temprowset->applyGroupFunctions(['count' => 'COUNT(*)']);
            $temprowset->limit(0, 1);
            $temprow = &$temprowset->iterate();
            // 後ろに日付がない場合は、全部削除
            if ($temprow['count'] == 0) {
                $_counter++;
                $event = $_eventtable->getRow($event_id);
                $event->delete();
            }
            $temprowset->destroy();
        }

        return false;

    }

    /**
     * @access private
     */
    function _getMenuPageTable()
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $table = $tm->getTableInfo(GRN_SCHEDULE_EVENTPAGE);

        return $table;
    }

    /**
     * メニュー連携の追加
     *
     * @param \CB_User $user 登録者
     * @param   string $menu メニュー
     * @param   string $page 内容
     *
     * @return void
     */
    function addMenuPage($user, $menu, $page)
    {
        $_table = $this->_getMenuPageTable();

        $row = $_table->newRow();

        $row->set('menu', $menu);
        $row->set('page', $page);
        $row->onCreate($user);
    }

    /**
     * メニュー連携の変更
     *
     * @param \CB_User $user    変更者
     * @param   string $menu_id メニューID
     * @param   string $menu    メニュー名
     * @param   string $page    内容
     *
     * @return  boolean         成功した場合はTRUE、それ以外はFALSE
     */
    function modifyMenuPage($user, $menu_id, $menu, $page)
    {
        $_table = $this->_getMenuPageTable();
        /** @var $row CB_Row */
        $row = $_table->getRow($menu_id);
        if ( ! $row) {
            return false;
        }

        $row->set('menu', $menu);
        $row->set('page', $page);
        $row->onUpdate($user);

        return true;
    }

    /**
     * 指定されたイベントメニューの取得
     *
     * @param   string $menu_id メニューのID
     *
     * @return  mixed       成功した場合は内容、それ以外はFALSE
     */
    function getMenuPage($menu_id)
    {
        $_table = $this->_getMenuPageTable();

        $row = $_table->getRow($menu_id);
        if ( ! $row) {
            return false;
        }

        $menupage = [
            'menu' => $row->get('menu'),
            'page' => $row->get('page')
        ];

        $creator = $row->get('creator');
        if ($creator) {
            $menupage['creator'] = $creator;
            $menupage['creator_name'] = $creator->get('display_name');
        } else {
            $menupage['creator_name'] = $row->get('creator_name');
        }
        $menupage['ctime'] = $row->get('ctime');

        $modifier = $row->get('modifier');
        if ($modifier) {
            $menupage['modifier'] = $modifier;
            $menupage['modifier_name'] = $modifier->get('display_name');
        } else {
            $menupage['modifier_name'] = $row->get('modifier_name');
        }
        $menupage['mtime'] = $row->get('mtime');

        return $menupage;
    }

    /**
     * 指定されたイベントメニューの削除
     *
     * @param   string $menu_id メニューID
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function deleteMenuPage($menu_id)
    {
        $_table = $this->_getMenuPageTable();

        $row = $_table->getRow($menu_id);
        if ( ! $row) {
            return false;
        }

        $row->onDelete();
        $row->delete();

        return true;
    }

    /**
     * 指定されたイベントメニューの取得
     *
     * @param   string $menu メニュー
     *
     * @return  mixed       成功した場合は内容、それ以外はFALSE
     */
    function getMenuPageByMenu($menu)
    {
        if ( ! $menu) {
            return false;
        }

        $table = $this->_getMenuPageTable();
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($rowset->queryf("col_menu = '@S'", $menu));

        $row = $rowset->iterate();
        if (is_null($row)) {
            return false;
        }

        return $row->get('page');
    }

    /**
     * メニュー連携のページの取得
     *
     * @return  array       メニューとページの連想配列
     */
    function getMenuPages()
    {
        $table = $this->_getMenuPageTable();
        $rowset = new CB_RowSet($table);
        $rowset->addOrderColumn('col_menu_list');
        $rowset->addOrderColumn('_id');
        $pages = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $page = [];
            $page['menu'] = $row->get('menu');
            $page['page'] = $row->get('page');

            $pages[$row->getOID()] = $page;
        }

        return $pages;
    }

    /**
     * 一覧用のリストの取得
     *
     * @param   int $offset 取得位置
     * @param   int $limit  取得数
     *
     * @return  array       メニューの連想配列
     */
    function getMenuPageList($offset = 0, $limit = 0)
    {
        $table = $this->_getMenuPageTable();
        $rowset = new CB_RowSet($table);
        if ($limit > 0) {
            $rowset->limit($offset, ($limit + 1));
        }
        $rowset->addOrderColumn('col_menu_list');
        $rowset->addOrderColumn('_id');
        $menus = [];
        $count = 0;
        while ( ! is_null($row = $rowset->iterate())) {
            $menus[$row->getOID()] = $row->get('menu');
        }

        return $menus;
    }

    /**
     * メニューの順番を変更する
     *
     * @param   array $menupage_ids 順番にIDが入った配列
     */
    function orderMenuPages($menupage_ids)
    {
        $index = 1;
        $_table = $this->_getMenuPageTable();

        foreach ($menupage_ids as $id) {
            $row = $_table->getRow($id);

            // ない場合はスキップ
            if ( ! $row) {
                continue;
            }

            $row->set('menu_list', $index);
            ++$index;
        }
    }

    /**
     * メニュー連携の一括削除
     */
    function removeAllMenuPages()
    {
        $_table = $this->_getMenuPageTable();
        $rowset = new CB_RowSet($_table);

        while ( ! is_null($row = $rowset->iterate())) {
            $row->delete();
        }
    }

    /**
     * スケジュールのCSVファイルへの書き出し
     *
     * @param \CB_CSVWriter $writer  書き出すファイル.
     * @param   mixed       $member  書き出すユーザー/組織/設備
     * @param   CB_Date     $setdate 書き出す期間（開始日）
     * @param   CB_Date     $enddate 書き出す期間（開始日）
     * @param   array       $options オプションで書き出す項目
     *
     * @return bool 成功の場合でTRUE、それ以外の場合でFALSE.
     */
    function exportEventsToCSV(
        $writer,
        $member,
        $setdate,
        $enddate,
        $options = null
    ) {
        require_once('schedule/table.csp');
        if ( ! $this->_exportAllDayEvents($writer, $member, $setdate, $enddate,
            $options)
        ) {
            return false;
        }

        if ( ! $this->_exportNormalEvents($writer, $member, $setdate, $enddate,
            $options)
        ) {
            return false;
        }

        return true;
    }

    /**
     * @access      private
     */
    function _exportAllDayEvents($writer, $member, $setdate, $enddate, $options)
    {
        $b_attendance_check = ($this->getAllowAttendanceCheck() == '1');

        $str_member = '';
        $member_name = '';
        if (is_a($member, 'CB_User')) {
            $str_member = 'col_user';
            $member_name = $member->get('foreign_key');
        } elseif (is_a($member, 'CB_Group')) {
            $str_member = 'col_group';
            $member_name = $member->get('foreign_key');
        } elseif (is_a($member, 'GRN_Facility_Facility')) {
            $str_member = 'col_facility';
            $member_name = $member->get('foreign_key');
        } else {
            return false;
        }

        $db = cb_get_app_db("schedule");

        $query = $db->format(
            "SELECT e.col_private, d.col_setdate, d.col_enddate, e.col_eventmenu, e.col_detail, e.col_memo, e.col_creator, e.col_creator_foreign_key "
            .
            "FROM tab_grn_schedule_eventmember AS m " .
            "LEFT JOIN tab_grn_schedule_eventdate AS d " .
            "ON m.col_event_type BETWEEN '32' AND '34' " .
            "AND m." . $str_member . " = '@S' " .
            "AND d.col_event = m.col_event " .
            "LEFT JOIN tab_grn_schedule_event AS e " .
            "ON m.col_event = e._id ",
            [$member->getOID()]
        );

        $attendance_check_condition = "";
        if ($str_member == "col_user" && $b_attendance_check) {
            $query .= "LEFT JOIN tab_grn_schedule_event_attendance_status AS s "
                      .
                      "ON s.col_event = m.col_event AND s.col_user = m.col_user ";
            $attendance_check_condition
                = "AND (s.col_status IS NULL OR s.col_status = '1') ";
        }

        $query .= $db->format(
            "WHERE ( ( d.col_setdate >= '@S' AND d.col_setdate <= '@S' ) " .
            "OR ( d.col_enddate >= '@S' AND d.col_enddate <= '@S' ) " .
            "OR ( d.col_setdate < '@S' AND d.col_enddate > '@S' ) ) ",
            [
                $setdate->format(),
                $enddate->format(),
                $setdate->format(),
                $enddate->format(),
                $setdate->format(),
                $enddate->format()
            ]
        );

        $query .= $attendance_check_condition;

        $query .= "ORDER BY d.col_setdate, d.col_enddate, d.col_event";

        if (is_array($options) && array_key_exists('creator', $options)
            && $options['creator']
        ) {
            $b_creator = true;
        } else {
            $b_creator = false;
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        $items = $facility_logic->listItems();

        $result = $db->query($query);

        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            if ($row['col_private'] == 1) {
                continue;
            }

            $event = [];

            // The format of date and time is fixed.
            // It makes no difference which language/format a user/system administrator selects.
            // This specification could be changed someday.
            $date = new CB_Date;
            $date->parse($row['col_setdate']);
            $event['setdate'] = sprintf('%04d/%02d/%02d', $date->year,
                $date->month, $date->day);
            $event['settime'] = '';

            $date = new CB_Date;
            $date->parse($row['col_enddate']);
            $event['enddate'] = sprintf('%04d/%02d/%02d', $date->year,
                $date->month, $date->day);
            $event['endtime'] = '';

            $event['menu'] = $row['col_eventmenu'];
            $event['detail'] = $row['col_detail'];
            $event['memo'] = $row['col_memo'];

            $event['member'] = $member_name;

            if ($b_creator) {
                $creator = $row['col_creator'];
                if ($creator) {
                    $event['creator'] = $row['col_creator_foreign_key'];
                } else {
                    $event['creator'] = '';
                }
            }

            foreach ($items as $item) {
                if ($item['use']) {
                    $event[$item['oid']] = '';
                }
            }

            $writer->writeLine($event);
        }

        $db->free_result($result);

        return true;
    }

    /**
     * @access      private
     */
    function _exportNormalEvents($writer, $member, $setdate, $enddate, $options)
    {
        $b_attendance_check = ($this->getAllowAttendanceCheck() == '1');

        $str_member = '';
        $str_member_query = '';
        $member_name = '';
        $member_id = $member->getOID();
        $db = cb_get_app_db("schedule");
        if (is_a($member, 'CB_User')) {
            $str_member = 'col_user';
            $member_name = $member->get('foreign_key');
            $str_member_query = cb_queryf($db, "col_user = '@S'", $member_id);
        } elseif (is_a($member, 'CB_Group')) {
            $str_member = 'col_group';
            $member_name = $member->get('foreign_key');
            $str_member_query = cb_queryf($db, "col_group = '@S'", $member_id);
        } elseif (is_a($member, 'GRN_Facility_Facility')) {
            $str_member = 'col_facility';
            $member_name = $member->get('foreign_key');
            $str_member_query = cb_queryf($db, "col_facility = '@S'",
                $member_id);
        } else {
            return false;
        }

        $datetime = new CB_DateTime();
        $datetime->year = intval($setdate->year);
        $datetime->month = intval($setdate->month);
        $datetime->day = intval($setdate->day);
        $datetime->hour = 0;
        $datetime->minute = 0;
        $datetime->second = 0;

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $ts1 = new CB_TimeStampEx($ts);
        $ts1->setDateTime($datetime);

        $datetime->year = intval($enddate->year);
        $datetime->month = intval($enddate->month);
        $datetime->day = intval($enddate->day);
        $ts2 = new CB_TimeStampEx($ts);
        $ts2->setDateTime($datetime);
        $ts2->add(new CB_DateTimeSpan(86400));

        //GRN2-3611
        // get date facility of temporary schedule
        $temporary_facility_dates = [];
        if ($str_member == 'col_facility') {
            $query = "SELECT DISTINCT d.col_event "
                     . "FROM tab_grn_schedule_eventmember AS m, tab_grn_schedule_eventdatetime AS d "
                     . "WHERE m.col_event = d.col_event "
                     . "AND m." . $str_member_query
                     . "AND m.col_event_type_simple = 1 "
                     . "AND ("
                     . cb_queryf($db,
                    " ( d.col_setdatetime < '@S' AND d.col_enddatetime > '@S' )",
                    $ts2->unix_ts, $ts1->unix_ts)
                     . " OR"
                     . cb_queryf($db,
                    " ( d.col_setdatetime = '@S' AND d.col_enddatetime = '@S' )",
                    $ts1->unix_ts, $ts1->unix_ts)
                     . " )";

            $result = $db->query($query);
            $eventIds = [];
            while ($row = $db->fetch_assoc($result)) {
                $eventIds[] = $row['col_event'];
            }
            $db->free_result($result);

            if (count($eventIds) === 0) {
                return false;
            }

            $query_tmp
                = 'SELECT DISTINCT e._id,temp_re.col_date
                              FROM tab_grn_schedule_event AS e 
                              LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event = e._id
                              INNER JOIN tab_grn_schedule_temporaryeventrelation AS temp_re ON  e._id=temp_re.col_event AND m._id=temp_re.col_member WHERE '
                  . cb_queryf($db, "e._id IN (@S) AND m.col_facility='@S'",
                    implode(',', $eventIds), $member_id);
            $ret = $db->query($query_tmp);
            while ($row = $db->fetch_assoc($ret)) {
                $temporary_facility_dates[$row['_id']][] = $row['col_date'];
            }
            $db->free_result($ret);
        }

        $query = $db->format(
            "SELECT e._id, e.col_private, d._id as id_datetime, d.col_setdatetime, d.col_enddatetime, e.col_event_type, e.col_eventmenu, e.col_detail, e.col_memo, e.col_creator, e.col_creator_foreign_key "
            .
            "FROM tab_grn_schedule_eventmember AS m " .
            "LEFT JOIN tab_grn_schedule_eventdatetime AS d " .
            "ON m.col_event_type_simple = '1' AND m." . $str_member
            . " = '@S' AND d.col_event = m.col_event " .
            "LEFT JOIN tab_grn_schedule_event AS e " .
            "ON m.col_event = e._id ",
            [$member->getOID()]
        );

        $attendance_check_condition = "";
        if ($str_member == "col_user" && $b_attendance_check) {
            $query .= "LEFT JOIN tab_grn_schedule_event_attendance_status AS s "
                      .
                      "ON s.col_event = m.col_event AND s.col_user = m.col_user ";
            $attendance_check_condition
                = "AND (s.col_status IS NULL OR s.col_status = '1') ";
        }


        $query .= $db->format(
            "WHERE ( ( d.col_setdatetime >= '@S' AND d.col_setdatetime < '@S' ) "
            .
            "OR ( d.col_setdatetime <> d.col_enddatetime AND d.col_enddatetime > '@S' AND d.col_enddatetime <= '@S' ) "
            .
            "OR ( d.col_setdatetime < '@S' AND d.col_enddatetime > '@S' ) ) ",
            [
                $ts1->unix_ts,
                $ts2->unix_ts,
                $ts1->unix_ts,
                $ts2->unix_ts,
                $ts1->unix_ts,
                $ts2->unix_ts
            ]
        );

        $query .= $attendance_check_condition;

        $query .= " ORDER BY d.col_setdatetime, d.col_enddatetime, d.col_event";

        if (is_array($options) && array_key_exists('creator', $options)
            && $options['creator']
        ) {
            $b_creator = true;
        } else {
            $b_creator = false;
        }

        require_once('schedule/facility_system_logic.csp');

        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        $items = $facility_logic->listItems();

        $result = $db->query($query);

        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $eid = $row['_id'];
            if ($row['col_private'] == 1) {
                continue;
            }

            //GRN2-3611
            // check temporary schedule using facility
            if ($str_member == 'col_facility'
                && count($temporary_facility_dates) > 0
                && ($row['col_event_type'] & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                   == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
                && array_key_exists($eid, $temporary_facility_dates)
                && array_key_exists('id_datetime', $row)
                && (array_search($row['id_datetime'],
                        $temporary_facility_dates[$eid]) === false)
            ) {
                continue;
            }
            //GRN2-3611

            $event = [];

            $ts = new CB_Timestamp();
            $ts->unix_ts = $row['col_setdatetime'];
            $timestamp = new CB_TimeStampEx($ts);

            // The format of date and time is fixed.
            // It makes no difference which language/format a user/system administrator selects.
            // This specification could be changed someday.
            $event['setdate'] = $timestamp->getDate();
            $event['setdate'] = sprintf('%04d/%02d/%02d',
                $event['setdate']->year, $event['setdate']->month,
                $event['setdate']->day);
            $event['settime'] = $timestamp->getTime();
            $event['settime'] = $event['settime']->format();

            $ts->unix_ts = $row['col_enddatetime'];
            $timestamp = new CB_TimeStampEx($ts);
            $event['enddate'] = $timestamp->getDate();
            $event['enddate'] = sprintf('%04d/%02d/%02d',
                $event['enddate']->year, $event['enddate']->month,
                $event['enddate']->day);
            if (($row['col_event_type'] & GRN_SCHEDULE_EVENT_TYPE_START)
                == GRN_SCHEDULE_EVENT_TYPE_START
            ) {
                $event['endtime'] = '';
            } else {
                $event['endtime'] = $timestamp->getTime();
                $event['endtime'] = $event['endtime']->format();
            }

            $event['menu'] = $row['col_eventmenu'];
            $event['detail'] = $row['col_detail'];
            $event['memo'] = $row['col_memo'];

            $event['member'] = $member_name;

            if ($b_creator) {
                $creator = $row['col_creator'];
                if ($creator) {
                    $event['creator'] = $row['col_creator_foreign_key'];
                } else {
                    $event['creator'] = '';
                }
            } else {
                $event['creator'] = '';
            }

            if ($str_member == 'col_facility') {
                $extended_items = $facility_logic->getData($row['_id']);

                foreach ($extended_items as $item) {
                    if ($item['use']) {
                        if (isset($item['value'])) {
                            $event[$item['oid']] = $item['value'];
                        } else {
                            $event[$item['oid']] = '';
                        }
                    }
                }
            } else {
                foreach ($items as $item) {
                    if ($item['use']) {
                        $event[$item['oid']] = '';
                    }
                }
            }

            $writer->writeLine($event);
        }

        $db->free_result($result);

        return true;
    }

    /**
     * get the number of events registered in DB
     *
     * @access   private
     *
     * @param    int $date
     *
     * @return   string   the number of event
     */
    function getEventsNumber($date = null)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('schedule');
        $_counter = 0;
        if (is_null($date)) {
            $query
                = 'SELECT COUNT(_id) AS count FROM tab_grn_schedule_event LIMIT 0, 1 ';
            $result = $db->query($query);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }
            $row = $db->fetch_assoc($result);
            $db->free_result($result);
            $_counter = $_counter + intval($row['count']);
        } else {
            $before_timestamp = cb_date_convert2timestamp($date);
            $before_date = $date;
            if (is_a($date, 'CB_DateTime')) {
                $ex = new CB_DateTimeEx($date);
                $objdate = $ex->getDate();
                $time = $ex->getTime();
                $before_date = $objdate->format();
            }


            // Get number of event from event repeat condition table
            $repeat_query
                = "SELECT COUNT(_id) AS count FROM tab_grn_schedule_repeatcondition WHERE (col_enddate < ";
            $repeat_query .= cb_queryf($db, "'@S' ) LIMIT 0, 1", $before_date);
            $repeat_result = $db->query($repeat_query);
            if ($repeat_result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $repeat_query
                ]);
            }

            $repeat_row = $db->fetch_assoc($repeat_result);
            $db->free_result($repeat_result);
            $_counter = $_counter + intval($repeat_row['count']);

            // Get number of event from event date table
            $date_query
                = "SELECT COUNT(_id) AS count FROM tab_grn_schedule_eventdate WHERE (col_enddate < ";
            $date_query .= cb_queryf($db,
                "'@S' AND col_event_type <> '@S') LIMIT 0, 1", $before_date,
                (GRN_SCHEDULE_EVENT_TYPE_REPEAT
                 + GRN_SCHEDULE_EVENT_TYPE_ALLDAY));
            $date_result = $db->query($date_query);
            if ($date_result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $date_query
                ]);
            }

            $date_row = $db->fetch_assoc($date_result);
            $db->free_result($date_result);
            $_counter = $_counter + intval($date_row['count']);

            // Get number of event from datetime table
            $datetime_query
                = "SELECT COUNT(_id) AS count FROM tab_grn_schedule_eventdatetime WHERE (col_enddatetime < ";
            $datetime_query .= cb_queryf($db,
                "'@S' AND col_event_type <> '@S' AND col_event_type <> '@S' AND col_event_type <> '@S') LIMIT 0, 1",
                $before_timestamp, (GRN_SCHEDULE_EVENT_TYPE_REPEAT),
                (GRN_SCHEDULE_EVENT_TYPE_REPEAT
                 + GRN_SCHEDULE_EVENT_TYPE_START),
                (GRN_SCHEDULE_EVENT_TYPE_TEMPORARY));
            $datetime_result = $db->query($datetime_query);
            if ($datetime_result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $datetime_query
                ]);
            }

            $datetime_row = $db->fetch_assoc($datetime_result);
            $db->free_result($datetime_result);
            $_counter = $_counter + intval($datetime_row['count']);

            // Get temporary from event datetime table
            $event_query
                = "SELECT col_event AS event_id FROM tab_grn_schedule_eventdatetime WHERE (col_enddatetime < ";
            $event_query .= cb_queryf($db,
                "'@S' AND col_event_type = '@S') GROUP BY col_event ",
                $before_timestamp, (GRN_SCHEDULE_EVENT_TYPE_TEMPORARY));
            $event_result = $db->query($event_query);
            if ($event_result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $event_query
                ]);
            }

            while ($event_row = $db->fetch_assoc($event_result)) {
                $event_id = $event_row['event_id'];

                // Get number of temporary event from datetime table 
                $temp_query
                    = "SELECT COUNT(_id) AS count FROM tab_grn_schedule_eventdatetime WHERE (col_setdatetime > ";
                $temp_query .= cb_queryf($db,
                    "'@S' AND col_event = '@S' ) LIMIT 0, 1 ",
                    $before_timestamp, $event_id);
                $temp_result = $db->query($temp_query);
                if ($temp_result === false) {
                    $db->throwError([
                        'query' => 'failed query on SELECT: ' . $temp_query
                    ]);
                }
                $temp_row = $db->fetch_assoc($temp_result);
                if ($temp_row['count'] == 0) {
                    $_counter++;
                }
                $db->free_result($temp_result);
            }

            $db->free_result($event_result);
        }

        return $_counter;

    }
}


