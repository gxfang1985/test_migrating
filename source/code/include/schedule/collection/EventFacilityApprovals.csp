<?php
declare(strict_types=1);

namespace grn\schedule\collection;

use grn\schedule\bean\FacilityApproval;

/**
 * Facility approval histories of a event
 */
class EventFacilityApprovals
{
    /**
     * @var FacilityApproval[]
     */
    private $approvals;

    /**
     * @param FacilityApproval[] $event_facility_approvals
     */
    public function __construct(array $event_facility_approvals)
    {
        $this->approvals = $event_facility_approvals;
    }

    /**
     * @param FacilityApproval $item
     */
    public function add(FacilityApproval $item)
    {
        $this->approvals[] = $item;
    }

    /**
     * @return string[] Key is a facility id
     */
    public function getFacilityIds(): array
    {
        $ids = [];
        foreach ($this->approvals as $approval) {
            $id = $approval->getFacility();
            if ($id) {
                $ids[$id] = $id;
            }
        }

        return array_unique($ids);
    }

    /**
     * @param string $facility_id
     *
     * @return FacilityApproval|null
     */
    public function getUsingOne(string $facility_id): ?FacilityApproval
    {
        foreach ($this->approvals as $approval) {
            if ($facility_id == $approval->getFacility()
                && $approval->getUsing() == FacilityApproval::USING
            ) {
                return $approval;
            }
        }

        return null;
    }

    /**
     * @param string $facility_id
     *
     * @return FacilityApproval|null
     */
    public function getLatestOne(string $facility_id): ?FacilityApproval
    {
        foreach ($this->approvals as $approval) {
            if ($facility_id == $approval->getFacility()) {
                return $approval;
            }
        }

        return null;
    }

    /**
     * @return string[]
     */
    public function getApproverIds(): array
    {
        $ids = [];
        foreach ($this->approvals as $approval) {
            if ($approval->getUser()) {
                $ids[] = $approval->getUser();
            }
        }

        return array_unique($ids);
    }
}
