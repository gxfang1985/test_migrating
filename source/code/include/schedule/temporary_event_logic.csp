<?php
/**
 * スケジューラーのバナー予定を管理するメインのロジック
 *
 * @author      A.Shima     2004/10/28
 * @package     grn.schedule
 */

require_once('schedule/event_base_logic.csp');

/**
 * @package     grn.schedule
 */
class GRN_Schedule_TemporaryEventLogic extends GRN_Schedule_EventBaseLogic
{

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct();
    }

    private static $_instance = null;

    /**
     * @return  GRN_Schedule_TemporaryEventLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    private $_temporaryrelationtable = null;

    /**
     * @access private
     */
    function _getTemporaryRelationTable()
    {
        if (is_null($this->_temporaryrelationtable)) {
            require_once('schedule/table.csp');
            $tm = $this->_getTableManager();
            $this->_temporaryrelationtable
                = $tm->getTableInfo(GRN_SCHEDULE_TEMPORARYEVENTRELATION);
        }

        return $this->_temporaryrelationtable;
    }

    /**
     * 日付の登録関数
     *
     * @access private
     *
     */
    function _entryEventDate($eventrow, $event)
    {
        $timestamp = new CB_TimeStampEx();
        // AND検索かどうかのチェック
        if (array_key_exists('setdatetime', $event->setdates[0])) {
            $datetimetable = $this->_getDateTimeTable();
            foreach ($event->setdates as $dates) {
                $daterow = $datetimetable->newRow();
                $timestamp->setDateTime($dates['setdatetime'],
                    $event->timezone);
                $daterow->set(GRN_SCHEDULE_SETDATETIME, clone $timestamp);
                $timestamp->setDateTime($dates['enddatetime'],
                    $event->timezone);
                $daterow->set(GRN_SCHEDULE_ENDDATETIME, clone $timestamp);

                // 施設がある場合はそれらの時間のチェック
                if (is_array($event->facilities)
                    && count($event->facilities) > 0
                ) {
                    $this->_lockFacilites($event->facilities);
                    if (($faid
                            = $this->_checkConfilictFacilites($eventrow->getOID(),
                            $dates['setdatetime'], $dates['enddatetime'],
                            $event->facilities)) != '0'
                    ) {
                        require_once('schedule/facility_system_logic.csp');
                        $facility_logic
                            = GRN_Facility_SystemLogic::getInstance();
                        $facility = $facility_logic->getFacility($faid);
                        cb_throw_error(E_GRN_FCLT_CONFLICT_DATETIME,
                            ['facility' => $facility->get('name')], null,
                            ['facility' => $facility->get('name')]);
                    }
                }

                if ( ! $this->_setEventDate($daterow, $eventrow, $event)) {
                    return false;
                }
            }
        } // OR検索の場合
        elseif (array_key_exists('facility', $event->setdates[0])) {
            $membertable = $this->_getMemberTable();
            $datetimetable = $this->_getDateTimeTable();
            $temporaryrelationtable = $this->_getTemporaryRelationTable();
            $event_type = $event->getEventType();
            $event_type_simple = 2;
            if ($event_type >= 1 && $event_type <= 31) {
                $event_type_simple = 1;
            }

            $index = 1;
            foreach (array_keys($event->setdates) as $key) {
                $facility = $event->setdates[$key]['facility'];

                // 施設ではない
                if ( ! $facility
                     || ! is_a($facility, 'GRN_Facility_Facility')
                ) {
                    continue;
                }

                // 施設の登録

                $memberrow = $membertable->newRow();
                $memberrow->set(GRN_SCHEDULE_EVENT, $eventrow);
                $memberrow->set(GRN_SCHEDULE_EVENT_TYPE, $event_type);
                $memberrow->set(GRN_SCHEDULE_FACILITY, $facility);
                $memberrow->set(GRN_SCHEDULE_MEMBER_LIST, $index);
                $memberrow->set(GRN_SCHEDULE_EVENT_TYPE_SIMPLE,
                    $event_type_simple);
                $index++;

                // 時間の登録
                foreach ($event->setdates[$key]['dates'] as $dates) {
                    $daterow = $datetimetable->newRow();
                    $timestamp->setDateTime($dates['setdatetime'],
                        $event->timezone);
                    $daterow->set(GRN_SCHEDULE_SETDATETIME, clone $timestamp);
                    $timestamp->setDateTime($dates['enddatetime'],
                        $event->timezone);
                    $daterow->set(GRN_SCHEDULE_ENDDATETIME, clone $timestamp);

                    // 施設がある場合はそれらの時間のチェック
                    $facilities[$facility->getOID()] = $facility;
                    $this->_lockFacilites($facilities);
                    $farray = ['1' => $facility];
                    if (($faid
                            = $this->_checkConfilictFacilites($eventrow->getOID(),
                            $dates['setdatetime'], $dates['enddatetime'],
                            $farray)) != '0'
                    ) {
                        require_once('schedule/facility_system_logic.csp');
                        $facility_logic
                            = GRN_Facility_SystemLogic::getInstance();
                        $facility = $facility_logic->getFacility($faid);
                        cb_throw_error(E_GRN_FCLT_CONFLICT_DATETIME,
                            ['facility' => $facility->get('name')], null,
                            ['facility' => $facility->get('name')]);
                    }

                    $this->_setEventDate($daterow, $eventrow, $event);

                    // リレーション
                    $relationrow = $temporaryrelationtable->newRow();
                    $relationrow->set('event', $eventrow);
                    $relationrow->set('date', $daterow);
                    $relationrow->set('member', $memberrow);
                }
            }
        }

        return true;
    }

    /**
     * 日付の設定(返り値は常にtrue)
     *
     * @param $row
     * @param $eventrow
     * @param $event
     *
     * @return bool
     */
    function _setEventDate($row, $eventrow, $event)
    {
        $row->set(GRN_SCHEDULE_EVENT, $eventrow);

        $event_type = $event->getEventType();

        if (is_null($event->timezone)) {
            $I18N = CB_I18N::getInstance();
            $event->timezone = $I18N->getCurrentTimezone();
        }
        $row->set(GRN_SCHEDULE_TIMEZONE, $event->timezone);
        $row->set(GRN_SCHEDULE_EVENT_TYPE, $event->getEventType());

        return true;
    }

    /**
     * @access private
     */
    function _modifyEventDate($eventrow, $event)
    {
        // 日付の変更はできない
        return true;
    }

    /**
     * @access private
     */
    function _modifyEventMember($eventrow, $event)
    {
        // メンバーの変更はできない
        return true;
    }

    /**
     * 仮予定の削除
     *
     * @param   CB_User $user                   削除した人
     * @param   string  $eid                    イベントID
     * @param   mixed   $date                   削除する日付のID
     * @param   array   $extension_log_messages 削除するときに追加するログメッセージ
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function deleteEvent(
        $user,
        $eid,
        $date = null,
        array $extension_log_messages = null
    ) {
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        if (is_string($date)) {
            $datetimetable = $this->_getDateTimeTable();
            $row = $datetimetable->getRow($date);
            if ( ! $row) {
                cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
            }

            // 元となった予定の変更
            if ( ! is_null($user) && is_a($user, 'CB_User')) {
                $eventrow->set('modifier', $user);
                $eventrow->set('modifier_foreign_key',
                    $user->get('foreign_key'));
                $eventrow->set('modifier_name', $user->get('display_name'));
                $ts = new CB_TimeStampEx();
                $eventrow->set('mtime', $ts);
            } elseif ( ! is_null($user) && is_string($user)) {
                $eventrow->set('modifier_name', $user);
                $ts = new CB_TimeStampEx();
                $eventrow->set('mtime', $ts);
            }

            // 削除する候補日時のメンバーを取得(削除される前にやる)
            $temporaryrelationtable = $this->_getTemporaryRelationTable();
            $rowset = new CB_RowSet($temporaryrelationtable);
            $rowset->addCondition($rowset->queryf("col_date = '@S'", $date));
            $temprel = $rowset->iterate();
            $rowset->destroy();

            // ログ
            $setdatetime
                = new CB_TimeStampEx($row->get(GRN_SCHEDULE_SETDATETIME));
            $setdatetime = $setdatetime->getDateTime();
            $enddatetime
                = new CB_TimeStampEx($row->get(GRN_SCHEDULE_ENDDATETIME));
            $enddatetime = $enddatetime->getDateTime();
            $log_date = sprintf('%d-%02d-%02d %02d:%02d-%02d:%02d',
                (int)$setdatetime->year,
                (int)$setdatetime->month,
                (int)$setdatetime->day,
                (int)$setdatetime->hour,
                (int)$setdatetime->minute,
                (int)$enddatetime->hour,
                (int)$enddatetime->minute
            );
            $eventrow->setExtensionLogMessage(['tentative_appointment' => $log_date]);
            $eventrow->onAction('delete');

            // 指定された日付のみを削除
            $row->delete();

            if ( ! is_null($temprel)) {
                // 候補日時が一つも無くなったメンバー(施設)を予定から外す
                $memberrow = $temprel->get('member');
                $rowset = new CB_RowSet($temporaryrelationtable);
                $rowset->addCondition($rowset->queryf("col_event = '@S' AND col_member = '@S'",
                    $eventrow->getOID(),
                    $memberrow->getOID()));
                $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
                $candidate = $rowset->iterate();
                $rowset->destroy();
                if ($candidate['count'] == 0) {
                    $memberrow->delete();
                }
            }
        } else {
            assert(is_string($date));

            return false;
        }

        // 最後の1つも消したらすべて消す
        $datetimetable = $this->_getDateTimeTable();
        $rowset = new CB_RowSet($datetimetable);
        $rowset->addCondition($rowset->queryf("col_event = '@S'",
            $eventrow->getOID()));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $row = $rowset->iterate();
        $rowset->destroy();
        if ($row['count'] == 0) {
            $eventrow->delete();
        }

        return true;
    }

    /**
     * イベントの取得
     *
     * @param   string  $eid       イベントID
     * @param   CB_Date $date      イベントの日付
     * @param   int     $lock_mode DBのロックモード
     * @param   int     $get_mode
     *
     * @return  mixed       成功した場合はイベント、それ以外はFALSE
     */
    function getEvent(
        $eid,
        $date = null,
        $lock_mode = CB_DATABASE_SHARED_LOCK,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_OBJECT
    ) {
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            $___ret = false;

            return $___ret;
        }
//            cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );

        // イベントタイプが同じかどうか
        $event_type = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY) == 0) {
            $___ret = false;

            return $___ret;
        }

        // 入れ物準備
        $event = new GRN_Schedule_TemporaryEvent();

        // データの中身の取得
        $this->_getEventData($eventrow, $event);

        // 時刻データの取得
        if ( ! $this->_getEventDate($eventrow, $event, $date)) {
            $___ret = false;

            return $___ret;
        }

        if ( ! $this->_getEventMember($event, $lock_mode, $get_mode)) {
            $___ret = false;

            return $___ret;
        }

        // OR 検索の場合は、施設をメンバーからはずす
        if ($event->isORSearch()) {
            $event->facilities = null;
        }

        // 通知先の取得
        if ( ! $this->_getEventNotifyAddress($event, $lock_mode, $get_mode)) {
            $___ret = false;

            return $___ret;
        }

        return $event;
    }

    /**
     * @access private
     */
    function _getEventDate($eventrow, $event, $date)
    {
        $temporaryrelationtable = $this->_getTemporaryRelationTable();
        $relationrowset = new CB_RowSet($temporaryrelationtable);
        $relationrowset->addCondition($relationrowset->queryf("col_event = '@S'",
            $event->id));
        $relationrowset->addOrderColumn('_id');
        $b_or_serach = false;
        // OR 検索の場合
        if ($relationrowset->count() > 0) {
            $old_id = 0;
            $old_row = null;
            $dates = null;
            $event->setdates = [];
            while ( ! is_null($row = $relationrowset->iterate())) {
                $datetimerow = $row->get('date');
                $memberrow = $row->get('member');

                // 前のものと違う
                if ($old_id != $memberrow->getOID()) {
                    if (is_array($dates) && count($dates) > 0) {
                        $event->setdates[] = [
                            'facility' => $old_row->get('facility'),
                            'dates'    => $dates
                        ];
                    }
                    $old_id = $memberrow->getOID();
                    $old_row = $memberrow;
                    $dates = [];
                }
                $timestamp1
                    = new CB_TimeStampEx($datetimerow->get(GRN_SCHEDULE_SETDATETIME));
                $timestamp2
                    = new CB_TimeStampEx($datetimerow->get(GRN_SCHEDULE_ENDDATETIME));
                $dates[$datetimerow->getOID()] = [
                    'setdatetime' => $timestamp1->getDateTime(),
                    'enddatetime' => $timestamp2->getDateTime()
                ];
                // Use for mobile API, get timezone of last row 
                $event->timezone = $datetimerow->get(GRN_SCHEDULE_TIMEZONE);
            }

            // 最後の分
            if (is_array($dates) && count($dates) > 0) {
                $event->setdates[] = [
                    'facility' => $old_row->get('facility'),
                    'dates'    => $dates
                ];
            }
            $b_or_serach = true;
        } // 通常の登録かAND検索の場合
        else {

            $datetimetable = $this->_getDateTimeTable();
            $rowset = new CB_RowSet($datetimetable);
            $rowset->addCondition($rowset->queryf("col_event = '@S'",
                $event->id));
            $event->setdates = [];

            while ( ! is_null($row = $rowset->iterate())) {
                $dates = [];
                $timestamp
                    = new CB_TimeStampEx($row->get(GRN_SCHEDULE_SETDATETIME));
                $dates['setdatetime'] = $timestamp->getDateTime();
                $timestamp
                    = new CB_TimeStampEx($row->get(GRN_SCHEDULE_ENDDATETIME));
                $dates['enddatetime'] = $timestamp->getDateTime();

                $event->setdates[$row->getOID()] = $dates;
                // Use for mobile API, get timezone of last row 
                $event->timezone = $row->get(GRN_SCHEDULE_TIMEZONE);
            }
        }

        if (count($event->setdates) == 0) {
            return false;
//            cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );
        }


        $temp_dates = null;
        if ($b_or_serach) {
            if (is_a($date, 'CB_Date')) {
                $datetime1 = new CB_DateTime();
                $datetime1->year = intval($date->year);
                $datetime1->month = intval($date->month);
                $datetime1->day = intval($date->day);
                $datetime1->hour = 0;
                $datetime1->minute = 0;
                $datetime1->second = 0;

                $datetime1 = new CB_DateTimeEx($datetime1);
                $datetime2 = new CB_DateTimeEx($datetime1);
                $datetime2->add(new CB_DateTimeSpan(86400));
                $flag = false;
                foreach ($event->setdates as $temp_facility) {
                    foreach ($temp_facility['dates'] as $dates) {
                        if (($datetime1->compare($dates['setdatetime']) <= 0)
                            && ($datetime2->compare($dates['setdatetime']) > 0)
                        ) {
                            $flag = true;
                            $event->setdatetime = $dates['setdatetime'];
                            $event->enddatetime = $dates['enddatetime'];
                            break;
                        }

                    }
                }

                if ( ! $flag) {
                    return false;
                }
                //                cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );
            } // IDの場合
            elseif (is_string($date)) {
                $flag = false;
                foreach ($event->setdates as $temp_facility) {
                    if (array_key_exists($date, $temp_facility['dates'])) {
                        $flag = true;
                        $event->setdatetime
                            = $temp_facility['dates'][$date]['setdatetime'];
                        $event->enddatetime
                            = $temp_facility['dates'][$date]['enddatetime'];
                        break;
                    }
                }

                if ( ! $flag) {
                    return false;
                }
            }
        } else {
            if (is_a($date, 'CB_Date')) {
                $datetime1 = new CB_DateTime();
                $datetime1->year = intval($date->year);
                $datetime1->month = intval($date->month);
                $datetime1->day = intval($date->day);
                $datetime1->hour = 0;
                $datetime1->minute = 0;
                $datetime1->second = 0;

                $datetime1 = new CB_DateTimeEx($datetime1);
                $datetime2 = new CB_DateTimeEx($datetime1);
                $datetime2->add(new CB_DateTimeSpan(86400));
                $flag = false;
                foreach ($event->setdates as $dates) {
                    if (($datetime1->compare($dates['setdatetime']) <= 0)
                        && ($datetime2->compare($dates['setdatetime']) > 0)
                    ) {
                        $flag = true;
                        $event->setdatetime = $dates['setdatetime'];
                        $event->enddatetime = $dates['enddatetime'];
                        break;
                    }

                }
                if ( ! $flag) {
                    return false;
                }
                //                cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );
            } // IDの場合
            elseif (is_string($date)) {
                if ( ! array_key_exists($date, $event->setdates)) {
                    return false;
                }

                $event->setdatetime = $event->setdates[$date]['setdatetime'];
                $event->enddatetime = $event->setdates[$date]['enddatetime'];
            }
        }

        return true;
    }

    /**
     * 仮予定の確定
     *
     * @param   object CB_User  $user       確定した人
     * @param   string $eid     イベントID
     * @param   string $date_id 確定させる日付ID
     *
     * @return  mixed       成功した場合はその日時、それ以外はFALSE
     */
    function determineEvent($user, $eid, $date_id)
    {
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // 確定したことを記述
        $mtime = new CB_TimeStampEx();
        $eventrow->set('mtime', $mtime);
        if ($user) {
            $eventrow->set('modifier', $user);
            $eventrow->set('modifier_name', $user->get('display_name'));
            $eventrow->set('modifier_foreign_key', $user->get('foreign_key'));
        } else {
            $eventrow->set('modifier', null);
            $eventrow->set('modifier_name', null);
            $eventrow->set('modifier_foreign_key', null);
        }
        $eventrow->onAction('fix');


        $did = null;
        $event_type = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
            != GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
        ) {
            cb_throw_error(E_GRN_SCHD_ALREADY_DETERMIN_EVENT);
        }
        if (is_string($date_id)) {
            $datetimetable = $this->_getDateTimeTable();
            // 指定されてるIDが存在しているかのチェック
            $row = $datetimetable->getRow($date_id);
            if ( ! $row) {
                return false;
//                cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );
            }

            $did = $row->getOID();

        } else {
            assert(is_string($date_id));

            return false;
        }

        // 確定させる日付がない
        if (is_null($did)) {
            return false;
        }
//            cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );

        $setdatetime = new CB_TimeStampEx($row->get('setdatetime'));
        $enddatetime = new CB_TimeStampEx($row->get('enddatetime'));
        $result_date = [
            'setdatetime' => $setdatetime->getDateTime(),
            'enddatetime' => $enddatetime->getDateTime()
        ];

        // イベントを確定
        $eventrow->set(GRN_SCHEDULE_EVENT_TYPE, GRN_SCHEDULE_EVENT_TYPE_NORMAL);
        $datetimetable = $this->_getDateTimeTable();
        $datetimerow = $datetimetable->getRow($did);
        $datetimerow->set(GRN_SCHEDULE_EVENT_TYPE,
            GRN_SCHEDULE_EVENT_TYPE_NORMAL);
        $membertable = $this->_getMemberTable();
        $membersrowset = new CB_RowSet($membertable);
        $membersrowset->addCondition($membersrowset->queryf("col_event = '@S'",
            $eventrow->getOID()));
        while ( ! is_null($row = $membersrowset->iterate())) {
            $row->set(GRN_SCHEDULE_EVENT_TYPE, GRN_SCHEDULE_EVENT_TYPE_NORMAL);
        }

        // 確定させる日付以外を取得
        $datetimetable = $this->_getDateTimeTable();
        $rowset = new CB_RowSet($datetimetable);
        $rowset->addCondition($rowset->queryf("col_event = '@S' AND _id <> '@S'",
            $eventrow->getOID(), $did));

        // 抽出した日付をすべて削除
        $rowset->deleteAllMatched();
        $rowset->destroy();

        // OR検索だった場合のレコードの削除
        $temporaryrelationtable = $this->_getTemporaryRelationTable();
        $relationrowset = new CB_RowSet($temporaryrelationtable);
        $relationrowset->addCondition($relationrowset->queryf("col_event = '@S' AND col_date = '@S'",
            $eventrow->getOID(), $did));
        $row = $relationrowset->iterate();
        // 確定された施設を取得
        if ( ! is_null($row)) {
            $member_row = $row->get('member');
            $member_row_id = $member_row->getOID();

            $membertable = $this->_getMemberTable();
            $membersrowset = new CB_RowSet($membertable);
            $membersrowset->addCondition($membersrowset->queryf("col_event = '@S'",
                $eventrow->getOID()));
            while ( ! is_null($row = $membersrowset->iterate())) {
                $facility = $row->get('facility');
                // 施設の場合だけ
                if ( ! $facility) {
                    continue;
                }

                // 確定された施設以外は削除
                if ($row->getOID() != $member_row_id) {
                    $row->delete();
                }
            }

        }
        $relationrowset->destroy();

        // OR検索の条件をすべて削除
        $relationrowset = new CB_RowSet($temporaryrelationtable);
        $relationrowset->addCondition($relationrowset->queryf("col_event = '@S'",
            $eventrow->getOID()));
        $relationrowset->deleteAllMatched();
        $relationrowset->destroy();

        return $result_date;
    }


    /**
     * 仮予定の指定した日付を取得する
     *
     * @param   string $event_id
     * @param   string $did
     *
     * @return  mixed
     */
    function getEventDate($event_id, $did)
    {
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($event_id);
        if ( ! $eventrow) {
            return false;
        }

        $datetimetable = $this->_getDateTimeTable();
        $row = $datetimetable->getRow($did);
        if ( ! $row) {
            return false;
        }

        $setdatetime = new CB_TimeStampEx($row->get('setdatetime'));
        $enddatetime = new CB_TimeStampEx($row->get('enddatetime'));


        $date = [
            'setdatetime' => $setdatetime->getDateTime(),
            'enddatetime' => $enddatetime->getDateTime()
        ];

        return $date;
    }

    /**
     * 指定された日付に予定があればその日付を返し、
     * 存在しないときは未来で一番近い予定の日付、
     * 未来の日付に存在しないときは過去で一番近い予定の日付を返す
     *
     * @param GRN_Schedule_TemporaryEvent $event
     * @param CB_Date                     $date
     *
     * @return CB_Date
     */
    public function getDisplayDate($event, $date)
    {
        assert('$event instanceof GRN_Schedule_TemporaryEvent && $date instanceof CB_Date');

        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        $result = new CB_Date();

        if ($event->isORSearch()) {
            // 日付を取り出す
            $date_list = [];
            foreach ($event->setdates as $facility_data) {
                foreach ($facility_data['dates'] as $dates) {
                    $work_date = new CB_Date();
                    $work_date->year = $dates['setdatetime']->year;
                    $work_date->month = $dates['setdatetime']->month;
                    $work_date->day = $dates['setdatetime']->day;

                    $date_list[$work_date->format()] = $work_date;
                }
            }
            foreach ($date_list as $target_date) {
                if ($app->compareDate($target_date, $date) >= 0) {
                    $result->year = $dates['setdatetime']->year;
                    $result->month = $dates['setdatetime']->month;
                    $result->day = $dates['setdatetime']->day;

                    return $result;
                }

                $result->year = $dates['setdatetime']->year;
                $result->month = $dates['setdatetime']->month;
                $result->day = $dates['setdatetime']->day;
            }
        } else {
            foreach ($event->setdates as $dates) {
                if ($app->compareDate($dates['setdatetime'], $date) >= 0) {
                    $result->year = $dates['setdatetime']->year;
                    $result->month = $dates['setdatetime']->month;
                    $result->day = $dates['setdatetime']->day;

                    return $result;
                }

                $result->year = $dates['setdatetime']->year;
                $result->month = $dates['setdatetime']->month;
                $result->day = $dates['setdatetime']->day;
            }
        }

        return $result;
    }

    /**
     * 施設がぶつかっているかどうかのチェック
     *
     * @param  int         $event_id
     * @param  CB_DateTime $setdatetime ログインユーザーのタイムゾーンにおける開始日時
     * @param  CB_DateTime $enddatetime ログインユーザーのタイムゾーンにおける終了日時
     * @param  array<GRN_Facility_Facility>  $facilities
     *
     * @return  string      成功した場合は0それ以外は、衝突している施設のID
     */
    public function checkConfilictFacilites(
        $event_id,
        $setdatetime,
        $enddatetime,
        & $facilities
    ) {
        // 日付の生成
        foreach (array_keys($facilities) as $key) {
            if ($this->_checkConflictMemberEvent($facilities[$key],
                $setdatetime, $enddatetime, $event_id)
            ) {
                return $facilities[$key]->getOID();
            }
        }

        return '0';
    }
}


