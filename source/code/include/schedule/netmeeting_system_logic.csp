<?php

/**
 * Netmeeting System Setting Logic
 *
 * @updated:
 *    2011/06/08 VCBSCH0010 Sync for V-CUBE
 */

require_once('fw/profile.csp');
require_once('schedule/netmeeting_resources.csp');

/**
 * @package     grn.netmeeting
 */
class GRN_Netmeeting_SystemLogic extends CB_ModuleBase
{
    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct(GRN_NETMEETING_MODULE_ID . '.system');
    }

    private static $_instance = null;

    /**
     * @return GRN_Netmeeting_SystemLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingAvailable()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_AVAILABLE, $value)) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }

        return $value;
    }

    /**
     * @return   boolean
     */
    public function isNetmeetingAvailable()
    {
        if (($result = $this->getNetmeetingAvailable()) === false) {
            return false;
        } else {
            if ( ! $result) {
                return false;
            }
        }

        return true;
    }

    /**
     * V-CUBE連携の有無
     * @param   string $flag 「利用するは」1、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingAvailable($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_NETMEETING_AVAILABLE,
            $flag);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingUrlDisplay()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_INVITE_URL_SCHEDULE_DISPLAY,
            $value)
        ) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }

        return $value;
    }

    /**
     * @return   boolean
     */
    public function isNetmeetingUrlDisplay()
    {
        if (($result = $this->getNetmeetingUrlDisplay()) === false) {
            return false;
        } else {
            if ( ! $result) {
                return false;
            }
        }

        return true;
    }

    /**
     * 招待URLの表示の有無
     *
     * @param   string $flag 「詳細画面に表示する」は1、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingUrlDisplay($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_INVITE_URL_SCHEDULE_DISPLAY, $flag);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingUrlMailSend()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_INVITE_URL_EMAIL_NOTIFICATION,
            $value)
        ) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }

        return $value;
    }

    /**
     * @return   boolean
     */
    public function isNetmeetingUrlMailSend()
    {
        if (($result = $this->getNetmeetingUrlMailSend()) === false) {
            return false;
        } else {
            if ( ! $result) {
                return false;
            }
        }

        return true;
    }

    /**
     * 招待URLの表示の有無
     *
     * @param   string $flag 「E-mail通知する」は1、それ以外は0
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingUrlMailSend($flag)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_INVITE_URL_EMAIL_NOTIFICATION, $flag);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingURL()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_NETMEETING_MEETING_SYSTEM_URL,
            $value)
        ) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }
        if (substr($value, -1) == '/') {
            $value = substr($value, 0, -1);
        }

        return $value;
    }

    /**
     * V-CUBEシステムURL
     * @param   string $url
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingURL($url)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_NETMEETING_MEETING_SYSTEM_URL, $url);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingDefaultTimezone()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_TIMEZONE_DEFAULT_SELECT,
            $value)
        ) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }

        return $value;
    }

    /**
     * タイムゾーン
     *
     * @param   string $timezone
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingDefaultTimezone($timezone)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_TIMEZONE_DEFAULT_SELECT, $timezone);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingDefaultLanguage()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_LANG_DEFAULT_SELECT,
            $value)
        ) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }

        return $value;
    }

    /**
     * 言語
     *
     * @param   string $timezone
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingDefaultLanguage($lang)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_LANG_DEFAULT_SELECT, $lang);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingOutsideMemberInputRows()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_OUTSIDE_MEMBER_INPUT_ROWS,
            $value)
        ) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }

        return $value;
    }

    /**
     * 外部招待者入力欄表示行数
     *
     * @param   string $timezone
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingOutsideMemberInputRows($input_rows)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_OUTSIDE_MEMBER_INPUT_ROWS, $input_rows);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingLicense()
    {
        $profile = $this->getSystemProfile();

        $value = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_LICENSE, $value)) {
            return false;
        }
        if ( ! isset($value) || strlen($value) == 0) {
            return false;
        }

        return $value;
    }

    /**
     * V-CUBEシステムライセンス
     * @param   string $license
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingLicense($license)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_NETMEETING_LICENSE,
            $license);
    }

    /**
     * @return   mixed   False or Login param(array)
     */
    public function getLoginItem()
    {
        $profile = $this->getSystemProfile();

        $id = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_NETMEETING_LOGIN_ID,
            $id)
        ) {
            return false;
        }
        if ( ! isset($id) || strlen($id) == 0) {
            return false;
        }

        $pw = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_NETMEETING_LOGIN_PASSWORD,
            $pw)
        ) {
            return false;
        }
        if ( ! isset($pw) || strlen($pw) == 0) {
            return false;
        }

        $vcube_version = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_NETMEETING_VCUBE_VERSION,
            $vcube_version)
        ) {
            return false;
        }
        if ( ! isset($vcube_version) || strlen($vcube_version) == 0) {
            return false;
        }

        $co = null;
        $profile->getAttribute(GRN_NETMEETING_COUNTRY_DEFAULT_SELECT, $co);
        if ( ! isset($co) || strlen($co) == 0) {
            $co = null;
        }

        // デフォルト取得
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        // ユーザーのロケール取得
        $la = $this->getNetmeetingUserLocale($user);

        // ユーザーのタイムゾーン取得
        $ti = $this->getNetmeetingUserTimezone($user);

        // タイムゾーンをGMTに変換
        $ti = $this->getNetmeetingTimezoneFromUtc($ti);

        //--- Add VCBSCH0030 ---s
        $li = null;
        $profile->getAttribute(GRN_NETMEETING_LICENSE, $li);
        if ($li == '1') {
            $li = GRN_NETMEETING_LICENSE_CODE;
        } else {
            $li = null;
        }
        //--- Add VCBSCH0030 ---e

        $login_item = [
            'id'                       => $id,
            'pw'                       => sha1($pw),
            'lang'                     => $la,
            'country'                  => $co,
            'timezone'                 => $ti,
            'enc'                      => 'sha1',
            'login_type'               => $li,        //--- Add VCBSCH0030
            'output_type'              => 'php',
            'netmeeting_vcube_version' => $vcube_version,
        ];
        if ($login_item['netmeeting_vcube_version']
            == GRN_NETMEETING_VCUBE_VERSION_5
        ) {
            $login_item['api_key'] = GRN_NETMEETING_NETMEETING_API_KEY_V5;
        }

        return $login_item;
    }

    /**
     * @return bool|string
     */
    public function getNetmeetingVersion()
    {
        $profile = $this->getSystemProfile();
        $vcube_version = null;
        if ( ! $profile->getAttribute(GRN_NETMEETING_NETMEETING_VCUBE_VERSION,
            $vcube_version)
        ) {
            return false;
        }
        if ( ! isset($vcube_version) || strlen($vcube_version) == 0) {
            return false;
        }

        return $vcube_version;
    }

    /**
     * ログインID
     *
     * @param   string $netmeeting_login_id
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingLoginId($netmeeting_login_id)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_NETMEETING_LOGIN_ID, $netmeeting_login_id);
    }

    /**
     * パスワード
     *
     * @param   string $netmeeting_login_id
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setNetmeetingLoginPassword($netmeeting_login_password)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_NETMEETING_LOGIN_PASSWORD,
            $netmeeting_login_password);
    }

    /**
     * @param $netmeeting_vcube_version
     *
     * @return bool
     */
    public function setNetmeetingVcubeVersion($netmeeting_vcube_version)
    {
        $profile = $this->getSystemProfile();
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_NETMEETING_VCUBE_VERSION, $netmeeting_vcube_version);
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingTimezoneList()
    {
        require(cb_basedir() . '/locale/netmeeting_timezone_list.csp');
        if (is_array($netmeeting_timezone_list) === false) {
            return false;
        }

        return $netmeeting_timezone_list;
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingLanguageList($locale)
    {
        if ( ! isset($locale) && strlen($locale) == 0) {
            return false;
        }

        require(cb_basedir() . '/locale/netmeeting_language_list.csp');
        if (is_array($netmeeting_language_list) === false) {
            return false;
        }
        if ( ! array_key_exists($locale, $netmeeting_language_list)) {
            return false;
        }

        return $netmeeting_language_list[$locale];
    }

    /**
     * @return   array
     */
    public function getNetmeetingGuestTypeList()
    {
        $value = [
            GRN_NETMEETING_GUEST_TYPE_NORMAL
        ];

        return $value;
    }

    /**
     * NETMEETING施設をDBより取得
     *
     * @return array key=facility_id、item=GRN_Facility_Facility
     */
    public function getNetmeetingAvailableFacilityData()
    {
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        require_once('schedule/table.csp');
        $table = $tm->getTableInfo(GRN_FACILITY_FACILITY);
        $rowset = new CB_RowSet($table);

        $rowset->addCondition('col_netmeeting_available=1');

        $facilities = [];
        while ( ! is_null($facility = $rowset->iterate())) {
            $facilities[$facility->getOID()] = $facility;
        }
        if (count($facilities) == 0) {
            $facilities = null;
        }

        return $facilities;
    }

    /**
     * 施設情報よりNETMEETING設定値を取得
     *
     * @param GRN_Facility_Facility $obj_facility
     *
     * @return NULL|array
     */
    public function getNetmeetingFacilitySetting($obj_facility)
    {
        $setting = null;
        if (is_a($obj_facility, 'GRN_Facility_Facility')) {
            $setting = [];
            $setting[GRN_FACILITY_NETMEETING_AVAILABLE]
                = @ $obj_facility->get(GRN_FACILITY_NETMEETING_AVAILABLE);
            $setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT]
                = @ $obj_facility->get(GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT);

            if ( ! isset($setting[GRN_FACILITY_NETMEETING_AVAILABLE])
                 || strlen($setting[GRN_FACILITY_NETMEETING_AVAILABLE]) == 0
            ) {
                $setting[GRN_FACILITY_NETMEETING_AVAILABLE] = 0;
            }
            if ( ! isset($setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT])
                 || strlen($setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT])
                    == 0
            ) {
                $setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT] = 0;
            }
        } else {
            $setting = [];
            $setting[GRN_FACILITY_NETMEETING_AVAILABLE] = 0;
            $setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT] = 0;
        }

        return $setting;
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingUserLocale($user)
    {
        $la = null;

        // デフォルト取得
        $I18N = CB_I18N::getInstance();
        $def_lang = $I18N->getDefaultLanguage();

        if ($user) {
            // ユーザーのロケール取得
            $la = CB_LocaleManager::getCurrentLanguage($user->getOID());
        }
        if ( ! isset($la) || strlen($la) == 0) {
            $la = $def_lang;
        }

        return $la;
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingUserTimezone($user)
    {
        require_once('fw/i18n.csp');
        require_once('fw/i18n/base.csp');
        $ti = null;

        // デフォルト取得
        $I18N = CB_I18N::getInstance();
        $def_tmzn = $I18N->getDefaultTimezone();

        if ($user) {
            // ユーザーのタイムゾーン取得
            $ti = CB_I18N::getUserTimezone($user);
        }
        if ( ! isset($ti) || strlen($ti) == 0) {
            $ti = $def_tmzn;
        }

        return $ti;
    }

    /**
     * @return   mixed   False or System value
     */
    public function getNetmeetingTimezoneFromUtc($utc)
    {
        require(cb_basedir() . '/locale/netmeeting_timezone_list.csp');
        if (is_array($netmeeting_timezone_list_utc) === false) {
            return '';
        }
        if ( ! array_key_exists($utc, $netmeeting_timezone_list_utc)) {
            return '';
        }

        return $netmeeting_timezone_list_utc[$utc];
    }
}

