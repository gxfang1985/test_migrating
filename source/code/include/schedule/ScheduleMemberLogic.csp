<?php

namespace grn\schedule;

use grn\grn\access\service\AppAccess;
use grn\grn\MemberLogic;

require_once('grn/application.csp');
require_once('grn/error_code.csp');
require_once('schedule/view_util.csp');
require_once('schedule/error_code.csp');
require_once('schedule/resources.csp');
require_once('schedule/table.csp');
require_once('schedule/event_base_logic.csp');
require_once('schedule/system_logic.csp');

class ScheduleMemberLogic
{
    const GRN_SCHEDULE_APPLICATION_ID = "schedule";
    const PLUG_IN_TYPE_ADD = "add";
    const PLUG_IN_TYPE_MODIFY = "modify";
    const PLUG_IN_TYPE_VIEW = "view";

    private static $instance = null;

    private static $access_plugin_add
        = [
            "name"   => self::GRN_SCHEDULE_APPLICATION_ID,
            "params" => ["action" => ["read", "add"]]
        ];
    private static $access_plugin_modify
        = [
            "name"   => self::GRN_SCHEDULE_APPLICATION_ID,
            "params" => ["action" => ["read", "modify"]]
        ];
    private static $access_plugin_view
        = [
            "name"   => self::GRN_SCHEDULE_APPLICATION_ID,
            "params" => ["action" => ["read"]]
        ];

    /**
     * Constructor
     */
    private function __construct()
    {

    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return ScheduleMemberLogic $instance
     */
    public static function getInstance()
    {
        if ( ! isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }

    /**
     * ユーザーのロール選択を取得
     *
     * @return int 0|1
     */
    public function isAllowedRole()
    {
        return MemberLogic::getInstance()->isAllowedRole();
    }

    /**
     * @return bool
     */
    public function isAllowSettingGroupRoleToWatchers()
    {
        $logic = \GRN_Schedule_SystemLogic::getInstance();

        return $logic->getAllowSettingGroupRoleToWatchers() ? true : false;
    }

    /**
     * @param \CB_User|NULL           $user
     * @param \GRN_Schedule_EventBase $event
     * @param string                  $get_mode
     *
     * @return bool
     */
    public function isEventAvailableForUser(
        $user,
        \GRN_Schedule_EventBase $event,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_OBJECT
    ) {
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }

        $target_user_id = $user->getOID();

        // check the event creator
        if (is_a($event->creator, 'CB_User')) {
            if ($target_user_id == $event->creator->getOID()) {
                return true;
            }
        } elseif ( ! is_null($event->creator)
                   && $target_user_id == $event->creator
        ) {
            return true;
        }

        // check the event member
        if ( ! is_null($event->users)) {
            foreach (array_keys($event->users) as $user_id) {
                if (($get_mode & GRN_SCHEDULE_GET_MEMBER_ID)
                    === GRN_SCHEDULE_GET_MEMBER_ID
                ) {
                    $member_id = $user_id;
                } else {
                    $member = $event->users[$user_id];
                    if (is_object($member)) {
                        $member_id = $member->getOID();
                    }
                }
                if ($target_user_id == $member_id) {
                    return true;
                }
            }
        }

        // check the event watcher
        if (is_array($event->notify_address)) {
            $target_user_group_ids = MemberLogic::getInstance()
                                                ->getUserGroupIds($target_user_id);
            $target_user_role_ids = MemberLogic::getInstance()
                                               ->getUserRoleIds($target_user_id);
            if (($get_mode & GRN_SCHEDULE_GET_MEMBER_ID)
                === GRN_SCHEDULE_GET_MEMBER_ID
            ) {
                foreach ($event->notify_address as $member) {
                    $member_id = $member[MemberLogic::MEMBER_ID];
                    $member_type = $member[MemberLogic::MEMBER_TYPE];
                    switch ($member_type) {
                        case MemberLogic::TYPE_USER :
                            if ($target_user_id == $member_id) {
                                return true;
                            }
                            break;
                        case MemberLogic::TYPE_ORGANIZATION :
                            if (in_array($member_id, $target_user_group_ids)) {
                                return true;
                            }
                            break;
                        case MemberLogic::TYPE_STATIC_ROLE :
                            if (in_array($member_id, $target_user_role_ids)) {
                                return true;
                            }
                            break;
                    }
                }
            } else {
                foreach ($event->notify_address as $member) {
                    $member_id = $member->getOID();
                    if (is_a($member, 'CB_User')
                        && $target_user_id == $member_id
                    ) {
                        return true;
                    }
                    if (is_a($member, 'CB_Group')
                        && in_array($member_id, $target_user_group_ids)
                    ) {
                        return true;
                    }
                    if (is_a($member, 'CB_Role')
                        && in_array($member_id, $target_user_role_ids)
                    ) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    /**
     *
     * @param boolean $include_deleted
     *
     * @return array
     */
    public function getLoginUserGroupIds($include_deleted = false)
    {
        $login_user = \cb_get_login_user();

        return MemberLogic::getInstance()
                          ->getUserGroupIds($login_user->getOID(),
                              $include_deleted);
    }

    /**
     *
     * @param boolean $include_deleted
     *
     * @return array
     */
    public function getLoginUserRoleIds($include_deleted = false)
    {
        $login_user = \cb_get_login_user();

        return MemberLogic::getInstance()->getUserRoleIds($login_user->getOID(),
            $include_deleted);
    }

    /**
     *
     * @param \CB_User|NULL $user
     * @param array         $event_ids
     *
     * @return array
     */
    public function getEventInfoFromNotifyAddress($user, array $event_ids)
    {
        if ( ! (is_array($event_ids) && count($event_ids) > 0)) {
            return [];
        }

        if ( ! is_a($user, 'CB_User')) {
            return [];
        }

        $target_user_id = $user->getOID();
        $target_user_group_ids = MemberLogic::getInstance()
                                            ->getUserGroupIds($target_user_id);
        $target_user_role_ids = MemberLogic::getInstance()
                                           ->getUserRoleIds($target_user_id);

        $app_locator = \GRN_ApplicationLocator::instance();
        $db
            = $app_locator->getConnection(self::GRN_SCHEDULE_APPLICATION_ID);

        // ユーザー削除フラグをチェック
        $check_event_ids = implode(',', $event_ids);
        if (count($target_user_group_ids) > 0
            && count($target_user_role_ids) > 0
        ) {
            $query
                = "SELECT COUNT(n._id) as count, n.col_event as event FROM tab_grn_schedule_notifyaddress AS n FORCE INDEX(idx_event_user,idx_event_group,idx_event_role)"
                  . " LEFT JOIN tab_cb_user AS u ON n.col_user = u._id"
                  . " WHERE n.col_event IN (" . $check_event_ids . ")"
                  . " AND ( n.col_user = '@S' OR n.col_group IN (@A) OR n.col_role IN(@A) )"
                  . " AND u.col_deleted IS NULL"
                  . " GROUP BY n.col_event";
            $query = cb_queryf($db, $query, $target_user_id,
                $target_user_group_ids, $target_user_role_ids);
        } elseif (count($target_user_group_ids) > 0) {
            $query
                = "SELECT COUNT(n._id) as count, n.col_event as event FROM tab_grn_schedule_notifyaddress AS n FORCE INDEX(idx_event_user,idx_event_group)"
                  . " LEFT JOIN tab_cb_user AS u ON n.col_user = u._id"
                  . " WHERE n.col_event IN (" . $check_event_ids . ")"
                  . " AND ( n.col_user = '@S' OR n.col_group IN(@A) )"
                  . " AND u.col_deleted IS NULL"
                  . " GROUP BY n.col_event";
            $query = cb_queryf($db, $query, $target_user_id,
                $target_user_group_ids);
        } elseif (count($target_user_role_ids) > 0) {
            $query
                = "SELECT COUNT(*) as count, n.col_event as event FROM tab_grn_schedule_notifyaddress AS n FORCE INDEX(idx_event_user,idx_event_role)"
                  . " LEFT JOIN tab_cb_user AS u ON n.col_user = u._id"
                  . " WHERE n.col_event IN (" . $check_event_ids . ")"
                  . " AND ( n.col_user = '@S' OR n.col_role IN(@A) )"
                  . " AND u.col_deleted IS NULL"
                  . " GROUP BY n.col_event";
            $query = cb_queryf($db, $query, $target_user_id,
                $target_user_role_ids);
        } else {
            $query
                = "SELECT COUNT(n._id) as count, n.col_event as event FROM tab_grn_schedule_notifyaddress AS n FORCE INDEX(idx_event_user)"
                  . " LEFT JOIN tab_cb_user AS u ON n.col_user = u._id"
                  . " WHERE n.col_event IN (" . $check_event_ids . ")"
                  . " AND n.col_user = '@S'"
                  . " AND u.col_deleted IS NULL"
                  . " GROUP BY n.col_event";
            $query = cb_queryf($db, $query, $target_user_id);
        }

        $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        $result = $db->query($query);

        $rows = [];
        while ($row = $db->fetch_assoc($result)) {
            $rows[$row['event']] = $row;
        }
        $db->free_result($result);

        return $rows;
    }

    /**
     * 公開先のデータをチェックする
     *
     * @param   \GRN_Schedule_EventBase $event イベントオブジェクト
     */
    public function checkAddPublicToUser($event)
    {
        /** @var \GRN_Schedule_EventBase $notify_address */
        $notify_address = $event->notify_address;

        $group_ids = [];
        $static_role_ids = [];
        if (is_array($notify_address)) {
            /** @var \CB_User|\CB_Group|\CB_Role $member */
            foreach ($notify_address as $member) {
                if (is_a($member, 'CB_Group')) {
                    $group_ids[$member->getOID()] = $member->getOID();
                }

                if (is_a($member, 'CB_Role')) {
                    $static_role_ids[$member->getOID()] = $member->getOID();
                }
            }
        }

        $group_count = count($group_ids);
        $static_role_count = count($static_role_ids);
        if ($static_role_count > 0) {
            if ( ! $this->isAllowedRole()) {
                cb_throw_error(E_GRN_USER_ROLE_CAN_NOT_USED);
            }
            if (isset($static_role_ids[GRN_UUM_ADMINISTRATION_ROLE])) {
                cb_throw_error(E_GRN_USER_ROLE_ADMINISTRATORS_DISABLED);
            }
        }

        if ($group_count > 0 || $static_role_count > 0) {
            if ( ! $this->isAllowSettingGroupRoleToWatchers()) {
                cb_throw_error(E_GRN_SCHD_DISABLE_GROUP_ROLE_REGISTER);
            }
        }
    }

    /**
     * 公開先のデータをチェックする
     *
     * @param   \GRN_Schedule_EventBase $new_event イベントオブジェクト
     * @param   \GRN_Schedule_EventBase $old_event イベントオブジェクト
     */
    public function checkModifyPublicToUser($new_event, $old_event)
    {
        /** @var \GRN_Schedule_EventBase $new_notify_address */
        $new_notify_address = $new_event->notify_address;
        /** @var \GRN_Schedule_EventBase $old_notify_address */
        $old_notify_address = $old_event->notify_address;

        $new_static_role_ids = [];
        if (is_array($new_notify_address)) {
            /** @var \CB_User|\CB_Group|\CB_Role $member */
            foreach ($new_notify_address as $member) {
                if (is_a($member, 'CB_Role')) {
                    /** @var \CB_Role $member */
                    $new_static_role_ids[$member->getOID()] = $member->getOID();
                }
            }
        }
        $old_static_role_ids = [];
        if (is_array($old_notify_address)) {
            /** @var \CB_User|\CB_Group|\CB_Role $member */
            foreach ($old_notify_address as $member) {
                if (is_a($member, 'CB_Role')) {
                    $old_static_role_ids[$member->getOID()] = $member->getOID();
                }
            }
        }

        $static_role_count = count($new_static_role_ids);
        if ($static_role_count > 0) {
            if ( ! $this->isAllowedRole()) {
                foreach ($new_static_role_ids as $static_role_id) {
                    if ( ! isset($old_static_role_ids[$static_role_id])) {
                        cb_throw_error(E_GRN_USER_ROLE_CAN_NOT_USED);
                    }
                }
            }
            if (isset($new_static_role_ids[GRN_UUM_ADMINISTRATION_ROLE])) {
                cb_throw_error(E_GRN_USER_ROLE_ADMINISTRATORS_DISABLED);
            }
        }
    }

    /**
     * ユーザー／組織／ロール／施設のオブジェクトから、画面表示用のデータを取得する
     *
     * @param object  $member
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getDisplayMember($member, $isMobile = false)
    {
        return MemberLogic::getInstance()->getDisplayMember($member,
            self::GRN_SCHEDULE_APPLICATION_ID, $isMobile);
    }

    /**
     * TypeとIDの配列から、画面表示用のデータを取得する
     *
     * @param array   $target_member_list [ [ "type"="user", "id"=>""], [ "type"="group", "id"=>""], ... ] )
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getDisplayMemberList(
        array $target_member_list,
        $isMobile = false
    ) {
        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_member_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, $isMobile);
    }

    /**
     *
     * @param array   $sUID
     * @param boolean $isMobile
     * @param boolean $is_include_deleted_users
     *
     * @return array
     */
    public function getAttendeesRenderFromParam(
        array $sUID,
        $isMobile = false,
        $is_include_deleted_users = true
    ) {
        $target_member_list = $this->getPickoutMemberTypeIdFromParam($sUID);

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_member_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, $isMobile,
                              false, $is_include_deleted_users);
    }

    /**
     *
     * @param object  $event
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getAttendeesRenderFromEvent($event, $isMobile = false)
    {
        return $this->getAttendeesRender($event->users, $event->groups);
    }

    /**
     * @param array|null $users
     * @param array|null $groups
     * @param bool       $isMobile
     *
     * @return array
     */
    public function getAttendeesRender($users, $groups, $isMobile = false)
    {
        $target_type_id_list = [];
        if (is_array($groups) && count($groups) > 0) {
            /** @var \CB_Group $member */
            foreach ($groups as $member) {
                if (is_a($member, 'CB_Group')) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID]
                        = $member->getOID();
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_ORGANIZATION;
                    $target_type_id_list[MemberLogic::PREFIX_ORGANIZATION
                                         . $member->getOID()]
                        = $type_id_array;
                } elseif (strlen($member) > 0) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID] = $member;
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_ORGANIZATION;
                    $target_type_id_list[MemberLogic::PREFIX_ORGANIZATION
                                         . $member]
                        = $type_id_array;
                }
            }
        }
        if (is_array($users) && count($users) > 0) {
            /** @var \CB_User $member */
            foreach ($users as $member) {
                if (is_a($member, 'CB_User')) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID]
                        = $member->getOID();
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_USER;
                    $target_type_id_list[MemberLogic::PREFIX_USER
                                         . $member->getOID()]
                        = $type_id_array;
                } elseif (strlen($member) > 0) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID]
                        = $member;
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_USER;
                    $target_type_id_list[MemberLogic::PREFIX_USER . $member]
                        = $type_id_array;
                }
            }
        }

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_type_id_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, $isMobile);
    }

    /**
     *
     * @param string  $user_id
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getNotifyAddressDefaultRender($user_id, $isMobile = false)
    {
        $target_type_id_list = ScheduleDefaultPublicLogic::getInstance()
                                                         ->getDefaultPublicByUserId($user_id,
                                                             null, false,
                                                             false);

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_type_id_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, $isMobile);
    }

    /**
     *
     * @param array   $notify_address
     * @param int     $get_mode
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getNotifyAddressRender(
        array $notify_address,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_OBJECT,
        $isMobile = false
    ) {
        $target_type_id_list = [];
        if (($get_mode & GRN_SCHEDULE_GET_MEMBER_ID)
            === GRN_SCHEDULE_GET_MEMBER_ID
        ) {
            foreach ($notify_address as $member) {
                if ( ! (is_array($member)
                        && isset($member[MemberLogic::MEMBER_ID])
                        && isset($member[MemberLogic::MEMBER_TYPE]))
                ) {
                    continue;
                }

                $member_id = $member[MemberLogic::MEMBER_ID];
                $member_type = $member[MemberLogic::MEMBER_TYPE];
                if ($member_type == MemberLogic::TYPE_USER) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID] = $member_id;
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_USER;
                    $target_type_id_list[MemberLogic::PREFIX_USER . $member_id]
                        = $type_id_array;
                } elseif ($member_type == MemberLogic::TYPE_ORGANIZATION) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID] = $member_id;
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_ORGANIZATION;
                    $target_type_id_list[MemberLogic::PREFIX_ORGANIZATION
                                         . $member_id]
                        = $type_id_array;
                } elseif ($member_type == MemberLogic::TYPE_STATIC_ROLE) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID] = $member_id;
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_STATIC_ROLE;
                    $target_type_id_list[MemberLogic::PREFIX_STATIC_ROLE
                                         . $member_id]
                        = $type_id_array;
                }
            }
        } else {
            foreach ($notify_address as $member) {
                if (is_a($member, 'CB_User')) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID]
                        = $member->getOID();
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_USER;
                    $target_type_id_list[MemberLogic::PREFIX_USER
                                         . $member->getOID()]
                        = $type_id_array;
                } elseif (is_a($member, 'CB_Group')) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID]
                        = $member->getOID();
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_ORGANIZATION;
                    $target_type_id_list[MemberLogic::PREFIX_ORGANIZATION
                                         . $member->getOID()]
                        = $type_id_array;
                } elseif (is_a($member, 'CB_Role')) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID]
                        = $member->getOID();
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_STATIC_ROLE;
                    $target_type_id_list[MemberLogic::PREFIX_STATIC_ROLE
                                         . $member->getOID()]
                        = $type_id_array;
                }
            }
        }

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_type_id_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, $isMobile);
    }

    /**
     *
     * @param array   $p_sUID
     * @param boolean $isMobile
     *
     * @return array
     */
    public function getNotifyAddressRenderFromParam(
        array $p_sUID,
        $isMobile = false
    ) {
        $target_type_id_list = $this->getPickoutMemberTypeIdFromParam($p_sUID);

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_type_id_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, $isMobile);
    }

    /**
     *
     * @param string      $user_id
     * @param string|null $plugin_type
     * @param boolean     $allowed_role_check
     * @param boolean     $show_group_role_check
     *
     * @return array
     */
    public function getDefaultPublicByUserId(
        $user_id,
        $plugin_type = null,
        $allowed_role_check = false,
        $show_group_role_check = false
    ) {
        $access_plugin = $this->getAccessPluginByType($plugin_type);

        return ScheduleDefaultPublicLogic::getInstance()
                                         ->getDefaultPublicByUserId($user_id,
                                             $access_plugin,
                                             $allowed_role_check,
                                             $show_group_role_check);
    }

    /**
     *
     * @param array $target_ids
     * @param bool  $is_filter
     *
     * @return array
     */
    public function getPickoutMemberTypeIdFromParam(
        array $target_ids,
        $is_filter = true
    ) {
        $target_type_id_list = MemberLogic::getInstance()
                                          ->getPickoutMemberTypeIdFromParam($target_ids);
        $user_ids_candidates = [];
        foreach ($target_type_id_list as $type_id_array) {
            $member_id = $type_id_array[MemberLogic::MEMBER_ID];
            $member_type = $type_id_array[MemberLogic::MEMBER_TYPE];
            if ($member_type == MemberLogic::TYPE_USER) {
                $user_ids_candidates[] = $member_id;
            }
        }
        if ($is_filter) {
            $user_ids_filtered
                = AppAccess::filterUserIdsInternalAccessByAppId($user_ids_candidates,
                self::GRN_SCHEDULE_APPLICATION_ID);
            $user_ids_diff = array_diff($user_ids_candidates,
                $user_ids_filtered);
            foreach ($user_ids_diff as $user_id) {
                unset($target_type_id_list[MemberLogic::PREFIX_USER
                                           . $user_id]);
            }
        }

        return $target_type_id_list;
    }

    /**
     *
     * @param array|null $target_member_list
     *
     * @return array
     */
    public function getObjectMembersByTypeIdArray($target_member_list)
    {
        return MemberLogic::getInstance()
                          ->getObjectMembersByTypeIdArray($target_member_list);
    }

    /**
     *
     * @param array       $member_object_list
     * @param string|null $plugin_type
     *
     * @return array
     */
    public function getUsersOfBelongToMembersWithObjects(
        array $member_object_list,
        $plugin_type = self::PLUG_IN_TYPE_VIEW
    ) {
        $access_plugin = $this->getAccessPluginByType($plugin_type);

        return MemberLogic::getInstance()
                          ->getUsersOfBelongToMembersWithObjects($member_object_list,
                              $access_plugin,
                              self::GRN_SCHEDULE_APPLICATION_ID);
    }

    /**
     *
     * @param string $plugin_type
     *
     * @return array|null
     */
    public function getAccessPluginByType($plugin_type = self::PLUG_IN_TYPE_VIEW
    ) {
        $access_plugin = null;
        switch ($plugin_type) {
            case self::PLUG_IN_TYPE_ADD :
                $access_plugin = self::$access_plugin_add;
                break;
            case self::PLUG_IN_TYPE_MODIFY :
                $access_plugin = self::$access_plugin_modify;
                break;
            case self::PLUG_IN_TYPE_VIEW :
                $access_plugin = self::$access_plugin_view;
                break;
        }

        return $access_plugin;
    }

    /**
     * @param \GRN_Schedule_EventBase $event
     *
     * @return array
     */
    public function getFacilitiesRenderFromEvent($event)
    {
        if ( ! (is_array($event->facilities)
                && count($event->facilities) > 0)
        ) {
            return [];
        }

        return $this->getFacilitiesRenderFromEventFacilities($event->facilities);
    }

    /**
     * @param array $facilities
     *
     * @return array
     */
    public function getFacilitiesRenderFromEventFacilities(array $facilities)
    {
        $target_type_id_list = [];
        if (is_array($facilities) && count($facilities) > 0) {
            /** @var \GRN_Facility_Facility $member */
            foreach ($facilities as $member) {
                if (is_a($member, 'GRN_Facility_Facility')) {
                    $type_id_array = [];
                    $type_id_array[MemberLogic::MEMBER_ID]
                        = $member->getOID();
                    $type_id_array[MemberLogic::MEMBER_TYPE]
                        = MemberLogic::TYPE_FACILITY;
                    $target_type_id_list[MemberLogic::PREFIX_FACILITY
                                         . $member->getOID()]
                        = $type_id_array;
                }
            }
        }

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_type_id_list,
                              self::GRN_SCHEDULE_APPLICATION_ID);
    }

    /**
     * @param array $facility_IDs
     * @param bool  $is_include_ancestors
     *
     * @return array
     */
    public function getFacilitiesRenderFromParam(
        array $facility_IDs,
        bool $is_include_ancestors = false
    ) {
        $target_type_id_list = [];
        foreach ($facility_IDs as $id) {
            $type_id_array = [];
            $type_id_array[MemberLogic::MEMBER_ID] = $id;
            $type_id_array[MemberLogic::MEMBER_TYPE]
                = MemberLogic::TYPE_FACILITY;
            $target_type_id_list[MemberLogic::PREFIX_FACILITY . $id]
                = $type_id_array;
        }

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_type_id_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, false,
                              $is_include_ancestors);
    }


    /**
     * @param array $facilities
     * @param bool  $is_include_ancestors
     *
     * @return array
     */
    public function getFacilitiesRender(
        array $facilities,
        $is_include_ancestors = false
    ) {
        $target_type_id_list = [];

        foreach ($facilities as $member) {
            if (is_array($member) && isset($member["_id"])) {
                $member_id = $member["_id"];
            } elseif (is_a($member, 'GRN_Facility_Facility')) {
                $member_id = $member->getOID();
            } elseif (strlen($member) > 0) {
                $member_id = $member;
            } else {
                continue;
            }
            $type_id_array = [];
            $type_id_array[MemberLogic::MEMBER_ID]
                = $member_id;
            $type_id_array[MemberLogic::MEMBER_TYPE]
                = MemberLogic::TYPE_FACILITY;
            $target_type_id_list[MemberLogic::PREFIX_FACILITY . $member_id]
                = $type_id_array;
        }

        return MemberLogic::getInstance()
                          ->getDisplayMemberList($target_type_id_list,
                              self::GRN_SCHEDULE_APPLICATION_ID, false,
                              $is_include_ancestors);
    }

    /**
     * @param array $members
     *
     * @return array
     */
    public function filterMembersForView(array $members)
    {
        return EventMemberListUtil::filterMembersForView(cb_get_login_user(),
            $members, ['read', 'add']);
    }

    /**
     * @param string $values
     *
     * @return array
     *
     * This function is used for MemberLogic.
     *
     */
    public function parseParamListValuesEachType($values)
    {
        $members = [];
        $facilities = [];

        if ( ! isset($values)) {
            return ['members' => $members, 'facilities' => $facilities];
        }

        $exploded_values = explode('-', $values);

        $map = [
            EventMemberParamUtil::PREFIX_USER         => EventMemberParamUtil::TYPE_USER,
            EventMemberParamUtil::PREFIX_ORGANIZATION => EventMemberParamUtil::TYPE_ORGANIZATION,
            EventMemberParamUtil::PREFIX_FACILITY     => EventMemberParamUtil::TYPE_FACILITY
        ];

        foreach ($exploded_values as $item) {
            $exploded_items = explode('.', $item);
            if (count($exploded_items) < 2) {
                continue;
            }

            $type = cb_at($map, $exploded_items[0]);
            $id = $exploded_items[1];

            if ($type === EventMemberParamUtil::TYPE_FACILITY) {
                $facilities[] = [
                    'id'   => $id,
                    'type' => $type,
                ];
            } else {
                $members[] = [
                    'id'   => $id,
                    'type' => $type,
                ];
            }
        }
        $members = $this->filterMembersForView($members);
        $members = $this->convertOrganizationType($members);
        $facilities = $this->filterMembersForView($facilities);

        return ['members' => $members, 'facilities' => $facilities];
    }

    /**
     * Convert organization type
     * from EventMemberParamUtil::TYPE_ORGANIZATION -- which indicates 'org',
     * to MemberLogic::TYPE_ORGANIZATION -- which indicates 'group'.
     *
     * @param array $members [ ['id' => '1', 'type' => 'org'], ['id' => '3', 'type' => 'user'], ...]
     *
     * @return array
     */
    private function convertOrganizationType(array $members)
    {
        return array_map(function ($member) {
            $type = $member['type'] === EventMemberParamUtil::TYPE_ORGANIZATION
                ?
                MemberLogic::TYPE_ORGANIZATION
                : $member['type'];

            return [
                'id'   => $member['id'],
                'type' => $type
            ];
        }, $members);
    }

    /**
     * @param string $facility
     *
     * @return string
     */
    public static function getFacilityKeyName($facility): string
    {
        if ($facility instanceof \GRN_Facility_Facility) {
            $facility_id = $facility->getOID();
        } elseif (strlen($facility) > 0) {
            $facility_id = $facility;
        } else {
            throw new \RuntimeException();
        }

        return MemberLogic::PREFIX_FACILITY . $facility_id;
    }

    /**
     * @param string $user_id
     *
     * @return string
     */
    public static function getUserKeyNameFromID($user_id): string
    {
        return MemberLogic::PREFIX_USER . $user_id;
    }


    /**
     * @param string $group_id
     *
     * @return string
     */
    private static function getGroupKeyNameFromID($group_id): string
    {
        return MemberLogic::PREFIX_ORGANIZATION . $group_id;
    }

    public function getMemberKeyName($member)
    {
        if (is_object($member)) {
            return self::getMemberKeyNameFromObject($member);
        } elseif (is_array($member)) {
            return self::getMemberKeyNameFromArray($member);
        }
        throw new \RuntimeException();
    }

    /**
     * @param array $member
     *
     * @return string
     */
    public static function getMemberKeyNameFromArray(array $member): string
    {
        $member_id = $member[MemberLogic::MEMBER_ID];
        $member_type = $member[MemberLogic::MEMBER_TYPE];
        if ($member_type == MemberLogic::TYPE_USER) {
            return MemberLogic::PREFIX_USER . $member_id;
        } elseif ($member_type == MemberLogic::TYPE_ORGANIZATION) {
            return MemberLogic::PREFIX_ORGANIZATION . $member_id;
        } elseif ($member_type == MemberLogic::TYPE_STATIC_ROLE) {
            return MemberLogic::PREFIX_STATIC_ROLE . $member_id;
        }
        throw new \RuntimeException();
    }

    /**
     * @param \CB_User|\CB_Role|\CB_Group $member
     *
     * @return string
     */
    public static function getMemberKeyNameFromObject($member): string
    {
        if ($member instanceof \CB_User) {
            return MemberLogic::PREFIX_USER . $member->getOID();
        } elseif ($member instanceof \CB_Group) {
            return MemberLogic::PREFIX_ORGANIZATION . $member->getOID();
        } elseif ($member instanceof \CB_Role) {
            return MemberLogic::PREFIX_STATIC_ROLE . $member->getOID();
        }
        throw new \RuntimeException();
    }

    /**
     * @param \CB_User|array|string $user
     *
     * @return string
     */
    public static function getUserKeyName($user)
    {
        if ($user instanceof \CB_User) {
            $user_id = $user->getOID();
        } elseif (is_array($user)) {
            $user_id = $user[MemberLogic::MEMBER_ID];
        } elseif (strlen($user) > 0) {
            $user_id = $user;
        } else {
            throw new \RuntimeException();
        }

        return self::getUserKeyNameFromID($user_id);
    }

    /**
     * @param \CB_Group|array|string $group
     *
     * @return string
     */
    public static function getGroupKeyName($group)
    {
        if ($group instanceof \CB_Group) {
            $group_id = $group->getOID();
        } elseif (is_array($group)) {
            $group_id = $group[MemberLogic::MEMBER_ID];
        } elseif (strlen($group) > 0) {
            $group_id = $group;
        } else {
            throw new \RuntimeException();
        }

        return self::getGroupKeyNameFromID($group_id);
    }

}
