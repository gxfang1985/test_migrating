<?php

require_once('fw/database.csp');
require_once('schedule/bean/GrnFacilityFacility.csp');

class GrnFacilityFacilityDAO
{
    /**
     * @param $inDataObj
     * @param $inFacilityKey
     *
     * @return bool|GrnFacilityFacility
     */
    public function selectByForeignKey($inDataObj, $inFacilityKey)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id";
        $query = $query . " WHERE f.col_foreign_key = '"
                 . $inDb->escape($inFacilityKey) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnFacility = new GrnFacilityFacility($rawdata);

        return $grnFacility;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnFacilityFacility
     */
    public function selectDefaultById($inDataObj, $inId)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", f.col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query . " FROM tab_grn_facility_facility f";
        $query = $query . " WHERE f._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnFacility = new GrnFacilityFacility($rawdata);

        return $grnFacility;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnFacilityFacility
     */
    public function selectLocalById($inDataObj, $inId)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id";
        $query = $query . " WHERE f._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnFacility = new GrnFacilityFacility($rawdata);

        return $grnFacility;
    }

    /**
     * @param $inDataObj
     * @param $inEventId
     *
     * @return GrnFacilityFacility[]|bool
     */
    public function selectByEventId($inDataObj, $inEventId)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id";
        $query = $query . ", tab_grn_schedule_eventmember em";
        $query = $query . " WHERE f._id = em.col_facility";
        $query = $query . " AND em.col_event = '" . $inDb->escape($inEventId)
                 . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if ($result === false) {
            return false;
        }

        $facilities = [];
        while ($row = $inDb->fetch_assoc($result)) {
            $facilities[$row['_id']] = new GrnFacilityFacility($row);
        }
        $inDb->free_result($result);

        return $facilities;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityList($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListWithNonLocal($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", f.col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query . " FROM tab_grn_facility_facility f";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     * @param $inFacilitygroupId
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByFacilitygroupId(
        $inDataObj,
        $inFacilitygroupId
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . ", tab_grn_facility_facilitygrouprelation fgr";
        $query = $query . " WHERE f._id = fgr.col_facility";
        $query = $query . " AND fgr.col_group= '"
                 . $inDb->escape($inFacilitygroupId) . "'";
        $query = $query . " ORDER BY fgr.col_facility_list, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByIsolatedFacilitygroup($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query
                 . " LEFT JOIN tab_grn_facility_facilitygrouprelation fgr ON f._id = fgr.col_facility ";
        $query = $query . " WHERE fgr.col_facility IS NULL";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityPartListByIsolatedFacilitygroup($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        //(selectカラムを制限している:Covering indexを使いたいため)
        $query
            = "SELECT f._id, f.col_foreign_key, IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query
                 . " LEFT JOIN tab_grn_facility_facilitygrouprelation fgr ON f._id = fgr.col_facility ";
        $query = $query . " WHERE fgr.col_facility IS NULL";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByIds($inDataObj, $inFacilityArray)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeFacilityArray = [];
        foreach ($inFacilityArray as $id) {
            $inEscapeFacilityArray[] = $inDb->escape($id);
        }
        $inFacilityIds = implode("','", $inEscapeFacilityArray);

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . " WHERE f._id IN ('${inFacilityIds}')";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * *** レスポンス改善の応急処置的メソッド ***
     * このメソッドを作った背景
     * 目指している処理は「システム内ではGrnFacilityFacilityオブジェクトをそのまま使う」ことなのだが現状は配列を使って動作している。
     * そのため、目指す処理に置き換わるまでの折衷案として、各所でGrnFacilityFacilityオブジェクトを配列にコンバートして配列として情報を渡す処理を用意している。
     * しかし、配列にコンバートする処理がレスポンスに影響する箇所が発生した。
     * 改善するため、GrnFacilityFacilityオブジェクトを間に用意せず、クエリ実行結果を直接配列に代入するメソッドを用意することになった。
     * 目指す処理が実現できた暁には、このメソッドは削除して @see GrnFacilityFacilityDAO::getFacilityListByIds メソッドを利用してください。
     *
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return array
     */
    public function getFacilityArrayListByIds($inDataObj, $inFacilityArray)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeFacilityArray = [];
        foreach ($inFacilityArray as $id) {
            if (isset($id[0]) && $id[0] === 'f') {
                $id = substr($id, 1);
            }
            $inEscapeFacilityArray[] = $inDb->escape($id);
        }
        $inFacilityIds = implode("','", $inEscapeFacilityArray);

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . " WHERE f._id IN ('${inFacilityIds}')";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = [];
            $grnFacility['_id'] = $rawdata['_id'];
            $grnFacility['col_creator'] = $rawdata['col_creator'];
            $grnFacility['col_creator_foreign_key']
                = $rawdata['col_creator_foreign_key'];
            $grnFacility['col_creator_name']
                = $rawdata['col_creator_name'];
            $grnFacility['col_ctime'] = $rawdata['col_ctime'];
            $grnFacility['col_list_index']
                = $rawdata['col_list_index'];
            $grnFacility['col_modifier'] = $rawdata['col_modifier'];
            $grnFacility['col_modifier_foreign_key']
                = $rawdata['col_modifier_foreign_key'];
            $grnFacility['col_modifier_name']
                = $rawdata['col_modifier_name'];
            $grnFacility['col_mtime'] = $rawdata['col_mtime'];
            $grnFacility['col_name'] = $rawdata['col_name'];
            $grnFacility['col_reserve_blob1']
                = $rawdata['col_reserve_blob1'];
            $grnFacility['col_reserve_blob2']
                = $rawdata['col_reserve_blob2'];
            $grnFacility['col_reserve_blob3']
                = $rawdata['col_reserve_blob3'];
            $grnFacility['col_reserve_int1']
                = $rawdata['col_reserve_int1'];
            $grnFacility['col_reserve_int2']
                = $rawdata['col_reserve_int2'];
            $grnFacility['col_reserve_int3']
                = $rawdata['col_reserve_int3'];
            $grnFacility['col_reserve_text1']
                = $rawdata['col_reserve_text1'];
            $grnFacility['col_reserve_text2']
                = $rawdata['col_reserve_text2'];
            $grnFacility['col_reserve_text3']
                = $rawdata['col_reserve_text3'];
            $grnFacility['col_foreign_key']
                = $rawdata['col_foreign_key'];
            $grnFacility['col_memo'] = $rawdata['col_memo'];
            $grnFacility['col_settings'] = $rawdata['col_settings'];
            //--- Add VCBSCH0010 ---s
            $grnFacility['col_netmeeting_available']
                = $rawdata['col_netmeeting_available'];
            $grnFacility['col_netmeeting_guests_normal_limit']
                = $rawdata['col_netmeeting_guests_normal_limit'];
            //--- Add VCBSCH0010 ---e

            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityPartListByIds($inDataObj, $inFacilityArray)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeFacilityArray = [];
        foreach ($inFacilityArray as $id) {
            $inEscapeFacilityArray[] = $inDb->escape($id);
        }
        $inFacilityIds = implode("','", $inEscapeFacilityArray);

        //(selectカラムを制限している:Covering indexを使いたいため)
        $query
            = "SELECT f._id, f.col_foreign_key, IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . " WHERE f._id IN ('${inFacilityIds}')";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * *** レスポンス改善の応急処置的メソッド ***
     * このメソッドを作った背景
     * 目指している処理は「システム内ではGrnFacilityFacilityオブジェクトをそのまま使う」ことなのだが現状は配列を使って動作している。
     * そのため、目指す処理に置き換わるまでの折衷案として、各所でGrnFacilityFacilityオブジェクトを配列にコンバートして配列として情報を渡す処理を用意している。
     * しかし、配列にコンバートする処理がレスポンスに影響する箇所が発生した。
     * 改善するため、GrnFacilityFacilityオブジェクトを間に用意せず、クエリ実行結果を直接配列に代入するメソッドを用意することになった。
     * 目指す処理が実現できた暁には、このメソッドは削除してgetFacilityPartListByIdsメソッドを利用してください。
     *
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return array
     */
    public function getFacilityPartArrayListByIds($inDataObj, $inFacilityArray)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeFacilityArray = [];
        foreach ($inFacilityArray as $id) {
            if ($id[0] === 'f') {
                $id = substr($id, 1);
            }
            $inEscapeFacilityArray[] = $inDb->escape($id);
        }
        $inFacilityIds = implode("','", $inEscapeFacilityArray);

        //(selectカラムを制限している:Covering indexを使いたいため)
        $query
            = "SELECT f._id, f.col_foreign_key, IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . " WHERE f._id IN ('${inFacilityIds}')";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = [];
            $grnFacility['_id'] = $rawdata['_id'];
            $grnFacility['col_foreign_key']
                = $rawdata['col_foreign_key'];
            $grnFacility['col_name'] = $rawdata['col_name'];
            $grnFacility['col_creator'] = "";
            $grnFacility['col_creator_foreign_key'] = "";
            $grnFacility['col_creator_name'] = "";
            $grnFacility['col_ctime'] = "";
            $grnFacility['col_list_index'] = "";
            $grnFacility['col_modifier'] = "";
            $grnFacility['col_modifier_foreign_key'] = "";
            $grnFacility['col_modifier_name'] = "";
            $grnFacility['col_mtime'] = "";
            $grnFacility['col_reserve_blob1'] = "";
            $grnFacility['col_reserve_blob2'] = "";
            $grnFacility['col_reserve_blob3'] = "";
            $grnFacility['col_reserve_int1'] = "";
            $grnFacility['col_reserve_int2'] = "";
            $grnFacility['col_reserve_int3'] = "";
            $grnFacility['col_reserve_text1'] = "";
            $grnFacility['col_reserve_text2'] = "";
            $grnFacility['col_reserve_text3'] = "";
            $grnFacility['col_memo'] = "";
            $grnFacility['col_settings'] = "";
            //--- Add VCBSCH0010 ---s
            $grnFacility['col_netmeeting_available']
                = $rawdata['col_netmeeting_available'];
            $grnFacility['col_netmeeting_guests_normal_limit']
                = $rawdata['col_netmeeting_guests_normal_limit'];
            //--- Add VCBSCH0010 ---e

            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityAndFacilitygroupIdListByIds(
        $inDataObj,
        $inFacilityArray
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeFacilityArray = [];
        foreach ($inFacilityArray as $id) {
            $inEscapeFacilityArray[] = $inDb->escape($id);
        }
        $inFacilityIds = implode("','", $inEscapeFacilityArray);

        $query
            = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query . ", rel.col_group AS facilitygroup_id";
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query
                 . " LEFT JOIN tab_grn_facility_facilitygrouprelation rel ON f._id = rel.col_facility";
        $query = $query . " WHERE f._id IN ('${inFacilityIds}')";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     * @param $inWordArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByNames_Memos($inDataObj, $inWordArray)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $inIsAnd = (array_key_exists('isAnd', $inDataObj))
            ? $inDataObj['isAnd'] : true;
        $inShowMemo = (array_key_exists('showMemo', $inDataObj))
            ? $inDataObj['showMemo'] : '1';

        foreach ($inWordArray as $word) {
            $inEscapeWordArray[] = cb_queryf($inDb, "(main.col_name LIKE '%@L%' OR 
                                                      (main.col_memo LIKE '%@L%' AND main.col_settings LIKE '%@L%')) 
                                                      OR( '1' = '@S'  AND  main.col_settings is NULL AND main.col_memo LIKE '%@L%' )"
                , $word, $word, 's:8:"showmemo";s:1:"1"', $inShowMemo, $word);
        }

        $inWords = ($inIsAnd) ? implode(" AND ", $inEscapeWordArray)
            : implode(" OR ", $inEscapeWordArray);

        $query = "SELECT *";
        $query = $query . " FROM (";
        $query = $query
                 . "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . ") main";
        $query = $query . " WHERE ${inWords}";
        $query = $query . " ORDER BY main.col_list_index, main._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    public function IncrementalSearchFacilityByNames($inDataObj, $keyword)
    {

        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        $inIsAnd = (array_key_exists('isAnd', $inDataObj))
            ? $inDataObj['isAnd'] : true;
        $inWordArray = cb_parse_search_text($keyword);
        foreach ($inWordArray as $word) {
            $inEscapeWordArray[] = cb_queryf($inDb,
                "(main.col_display_name LIKE '%@L%')", $word);
        }
        $inWords = ($inIsAnd) ? implode(" AND ", $inEscapeWordArray)
            : implode(" OR ", $inEscapeWordArray);

        $query = "SELECT *";
        $query = $query . " FROM (";
        $query = $query
                 . "SELECT f._id, IFNULL(fl.col_name, f.col_name) AS col_display_name, f.col_memo, f.col_list_index, f.col_mtime";
        $query = $query . ", f.col_settings";
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . ") main";
        $query = $query . " WHERE ${inWords}";
        $query = $query . " ORDER BY CASE ";
        "main.col_list_index, main._id";

        $orderCaseClause = "";
        $order_auto_grow = 0;

        $col_name_order = cb_queryf($inDb,
            " WHEN main.col_display_name LIKE '@L' THEN @S ", $keyword,
            $order_auto_grow++);
        $col_name_order .= cb_queryf($inDb,
            " WHEN main.col_display_name LIKE '@L%' THEN @S ", $keyword,
            $order_auto_grow++);
        $col_name_order .= cb_queryf($inDb,
            " WHEN main.col_display_name LIKE '%@L' THEN @S ", $keyword,
            $order_auto_grow++);
        $col_name_order .= cb_queryf($inDb,
            " WHEN main.col_display_name LIKE '%@L%' THEN @S ", $keyword,
            $order_auto_grow++);
        if (count($inWordArray) > 1) {
            foreach ($inWordArray as $text) {
                $col_name_order .= cb_queryf($inDb,
                    " WHEN main.col_display_name LIKE '@L%' THEN @S ", $text,
                    $order_auto_grow++);
            }
        }

        $orderCaseClause .= $col_name_order;

        $orderCaseClause .= " ELSE " . $order_auto_grow . " END";

        $query .= $orderCaseClause;

        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($raw_data = $inDb->fetch_assoc($result)) {
            $grnFacilityArray[] = $raw_data;
        }
        $inDb->free_result($result);

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     * @param $inWordArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByIsolatedFacilitygroup_Names_Memos(
        $inDataObj,
        $inWordArray
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeWordArray = [];
        foreach ($inWordArray as $word) {
            $inEscapeWordArray[] = cb_queryf($inDb,
                "(main.col_name LIKE '%@L%' OR main.col_memo LIKE '%@L%') ",
                $word, $word);
        }

        $inWords = implode(" AND ", $inEscapeWordArray);

        $query = "SELECT *";
        $query = $query . " FROM (";
        $query = $query
                 . "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query
                 . " LEFT JOIN tab_grn_facility_facilitygrouprelation fgr ON f._id = fgr.col_facility ";
        $query = $query . " WHERE fgr.col_facility IS NULL";
        $query = $query . " ORDER BY f.col_list_index, f._id";
        $query = $query . ") main";
        $query = $query . " WHERE ${inWords}";
        $query = $query . " ORDER BY main.col_list_index, main._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * @param $inDataObj
     * @param $inFacilitygroupId
     * @param $inWordArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByFacilitygroupId_Names_Memos(
        $inDataObj,
        $inFacilitygroupId,
        $inWordArray
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeWordArray = [];
        foreach ($inWordArray as $word) {
            $inEscapeWordArray[] = cb_queryf($inDb,
                "(main.col_name LIKE '%@L%' OR main.col_memo LIKE '%@L%') ",
                $word, $word);
        }

        $inWords = implode(" AND ", $inEscapeWordArray);

        $query = "SELECT *";
        $query = $query . " FROM (";
        $query = $query
                 . "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query = $query
                 . ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query = $query
                 . ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query = $query . ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query = $query
                 . ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query = $query
                 . ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query = $query
                 . ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query = $query
                 . ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";       //-- Add VCBSCH0010
        $query = $query . ", fgr.col_facility_list";
        $query = $query
                 . " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                 . $inDb->escape($inLanguage) . "') ON f._id = fl.parent_id)";
        $query = $query . ", tab_grn_facility_facilitygrouprelation fgr";
        $query = $query . " WHERE f._id = fgr.col_facility";
        $query = $query . " AND fgr.col_group= '"
                 . $inDb->escape($inFacilitygroupId) . "'";
        $query = $query . ") main";
        $query = $query . " WHERE ${inWords}";
        $query = $query . " ORDER BY main.col_facility_list, main._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilityArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacility = new GrnFacilityFacility($rawdata);
            $grnFacilityArray[] = $grnFacility;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilityArray;
    }

    /**
     * Archive the list of facility by the id base on the specified group ids.
     *
     * @param       $inDataObj
     * @param array $groupIds
     *
     * @return array Array of facility ids belong the specified group ids.
     */
    public function getFacilityIdListByGroupIdList($inDataObj, array $groupIds)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];

        $facilityIds = [];
        if (count($groupIds) == 0) {
            return $facilityIds;
        }
        $queryFormat
            = "SELECT col_facility FROM tab_grn_facility_facilitygrouprelation WHERE col_group IN (@A)";
        $query = cb_queryf($inDb, $queryFormat, $groupIds);
        $query = $inDb->select_format($query, 0, -1, CB_DATABASE_SHARED_LOCK);
        $result = $inDb->query($query);
        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(["query" => "query failed: " . $query]);
        }
        while ($rawData = $inDb->fetch_assoc($result)) {
            $facilityIds[] = $rawData["col_facility"];
        }
        $inDb->free_result($result);

        return $facilityIds;
    }

    /**
     * @param array $data_obj     data object information
     * @param array $foreign_keys list facility foreign key
     *
     * @return array $facilities facility list
     */
    public function getFacilitiesByForeignKeys(array $data_obj, array $foreign_keys)
    {
        /** @var CB_DatabaseConnection $db */
        $db = $data_obj['db'];
        $lock_mode = $data_obj['lock'] ?? null;
        $offset = $data_obj['offset'] ?? null;
        $limit = $data_obj['limit'] ?? null;
        $language = $data_obj['language'] ?? null;
        $condition = cb_queryf($db, "f.col_foreign_key IN (@A)", $foreign_keys);

        $query = "SELECT f._id, f.col_creator, f.col_creator_foreign_key, f.col_creator_name, f.col_ctime";
        $query .= ", f.col_foreign_key, f.col_list_index, f.col_modifier";
        $query .= ", f.col_modifier_foreign_key, f.col_modifier_name, f.col_mtime";
        $query .= ", IFNULL(fl.col_name, f.col_name) AS col_name";
        $query .= ", f.col_reserve_blob1, f.col_reserve_blob2, f.col_reserve_blob3";
        $query .= ", f.col_reserve_int1, f.col_reserve_int2, f.col_reserve_int3, f.col_reserve_text1";
        $query .= ", f.col_reserve_text2, f.col_reserve_text3, f.col_memo, f.col_settings, f.col_settings_mtime";
        $query .= ", f.col_netmeeting_available, f.col_netmeeting_guests_normal_limit ";
        $query .= ", rel.col_group AS facilitygroup_id";
        $query .= " FROM (tab_grn_facility_facility f LEFT JOIN (tab_grn_facility_facility_local fl INNER JOIN tab_cb_language_status l ON fl.language_id = l._id AND l.col_language = '"
                  . $db->escape($language) . "') ON f._id = fl.parent_id)";
        $query .= " LEFT JOIN tab_grn_facility_facilitygrouprelation rel ON f._id = rel.col_facility";
        $query .= " WHERE " . $condition;
        $query .= " ORDER BY f.col_list_index, f._id";
        if ( ! is_null($offset)) {
            $query = $db->select_format($query, $offset, $limit, $lock_mode);
        }
        $result = $db->query($query);
        $facilities = [];
        while ($data = $db->fetch_assoc($result)) {
            $facilities[$data['_id']] = $data;
        }
        $db->free_result($result);

        return $facilities;
    }
}

