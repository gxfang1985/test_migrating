<?php

namespace grn\schedule\dao;

require_once('fw/database.csp');

use grn\schedule\dao\DataAccessControlAbstract;
use grn\schedule\bean\AttendanceStatus;
use grn\schedule\bean\AttendanceStatusCondition;

class AttendanceStatusDAO extends DataAccessControlAbstract
{
    var $_db;

    function __construct()
    {
        $this->_db = $this->getDatabaseConnection();
    }

    private $_table = 'tab_grn_schedule_event_attendance_status';

    public function convertStatus($strStatus)
    {

        switch ($strStatus) {
            case AttendanceStatus::STATUS_ABSENT:
                $result = 0;
                break;
            case AttendanceStatus::STATUS_ATTENDANT:
                $result = 1;
                break;
            case AttendanceStatus::STATUS_UNCONFIRMED:
                $result = '';
                break;
            default:
                $result = '';
        }

        return $result;
    }

    /**
     * The function build sql-condition from condition object
     *
     * @param $inDataObj
     * @param $attendanceStatusConditionObj
     *
     * @return string
     */
    private function _objectToConditionQuery(
        AttendanceStatusCondition $attendanceStatusConditionObj
    ) {
        $inSortArray = $attendanceStatusConditionObj->getSortArray();
        $arrConditions = [];
        $inDb = $this->getDatabaseConnection();
        if ($attendanceStatusConditionObj->getUserId() > 0) {
            $arrConditions[] = cb_queryf(
                $inDb, "evm.col_user = '@S'",
                $attendanceStatusConditionObj->getUserId()
            );
        }

        $is_single_search = $attendanceStatusConditionObj->getEventId() > 0;
        $is_multiple_search
            = count($attendanceStatusConditionObj->getListEventIds())
              > 0;
        $do_search = $is_single_search || $is_multiple_search;
        if ($do_search) {
            $alias = "ats";
            if ($attendanceStatusConditionObj->getStatus() == ""
                || $attendanceStatusConditionObj->getStatus()
                   == AttendanceStatus::STATUS_UNCONFIRMED
            ) {
                $alias = "evm";
            }

            if ($is_single_search && $is_multiple_search) {
                // This case is bug
                throw new \RuntimeException();
            }
            if ($is_single_search) {
                $arrConditions[] = cb_queryf($inDb, "@S.col_event='@S'", $alias,
                    $attendanceStatusConditionObj->getEventId());
            }
            if ($is_multiple_search) {
                $arrConditions[] = cb_queryf($inDb, "@S.col_event IN(@A)",
                    $alias, $attendanceStatusConditionObj->getListEventIds());
            }
        }

        $arrConditions[] = "evm.col_facility IS NULL";
        $arrConditions[] = "evm.col_group IS NULL";
        $arrConditions[] = "u.col_deleted IS NULL";

        if ($attendanceStatusConditionObj->getStatus() != "") {
            switch ($attendanceStatusConditionObj->getStatus()) {
                case AttendanceStatus::STATUS_ABSENT:
                    $arrConditions[] = cb_queryf(
                        $inDb, "ats.col_status='@S'",
                        $this->convertStatus(AttendanceStatus::STATUS_ABSENT)
                    );
                    break;
                case AttendanceStatus::STATUS_ATTENDANT:

                    $arrConditions[] = cb_queryf(
                        $inDb, "ats.col_status='@S'",
                        $this->convertStatus(AttendanceStatus::STATUS_ATTENDANT)
                    );
                    break;
                case AttendanceStatus::STATUS_UNCONFIRMED:

                    $arrConditions[] = "ats.col_status IS NULL";
                    break;
            }
        }
        if ($attendanceStatusConditionObj->getIsCountFunction()
            && $attendanceStatusConditionObj->getAttendanceStatus() == "1"
        ) {
            $arrConditions[] = cb_queryf(
                $inDb,
                "ev." . AttendanceStatus::ATTENDANCE_CHECK_FIELD . "='@S'",
                $attendanceStatusConditionObj->getAttendanceStatus()
            );
        }
        $strCondition = " " . join(" AND ", $arrConditions);
        //BUILD ORDER BY
        $isFirstOrder = true;
        foreach ($inSortArray as $sortName => $isDesc) {
            $strCondition .= $isFirstOrder ? ' ORDER BY ' : ', ';
            $strCondition .= $this->_getSortColumnName($sortName, 'ats');
            $strCondition .= $isDesc ? ' DESC' : ' ASC';

            $isFirstOrder = false;
        }

        return $strCondition;
    }

    /**
     * @param      $sortName
     * @param null $columnAliasName
     *
     * @return string
     */
    private function _getSortColumnName($sortName, $columnAliasName = null)
    {
        $attendanceStatusCon = new AttendanceStatusCondition();
        switch ($sortName) {
            case $attendanceStatusCon::ATTENDANCE_STATUS_DAO_ORDER_BY_STATUS :
                return is_null($columnAliasName) ? 'ats.col_status'
                    : $columnAliasName . '.col_status';
                break;
            case $attendanceStatusCon::ATTENDANCE_CTIME_DAO_ORDER_BY_CTIME :
                return is_null($columnAliasName) ? 'ats.col_ctime'
                    : $columnAliasName . '.col_ctime';
                break;
            default :
                return is_null($columnAliasName) ? 'ats.col_ctime'
                    : $columnAliasName . '.col_ctime';
                break;
        }
    }

    /**
     * @param $attendanceStatusObj
     *
     * @return mixed
     */
    public function insert(AttendanceStatus $attendanceStatusObj)
    {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb,
            "INSERT INTO @S(col_ctime, col_event, col_status, col_user, col_message )",
            $this->_table
        );
        $query .= cb_queryf(
            $inDb, " VALUES ( '@S', '@S', '@S', '@S', '@S')",
            $attendanceStatusObj->getCreateTime(),
            $attendanceStatusObj->getEventId(),
            $attendanceStatusObj->getStatus(),
            $attendanceStatusObj->getUserId(),
            $attendanceStatusObj->getMessage()
        );
        $query .= cb_queryf(
            $inDb,
            " ON DUPLICATE KEY UPDATE col_ctime='@S', col_status='@S', col_message='@S'",
            $attendanceStatusObj->getCreateTime(),
            $attendanceStatusObj->getStatus(),
            $attendanceStatusObj->getMessage()
        );
        $query .= ";";
        if ($inDb->query($query) === false) {
            $inDb->throwServerError($query);
        }

        return $inDb->affected_rows();
    }

    /**
     * @param $attendanceStatusCondition
     *
     * @return mixed
     */
    public function deleteByCondition(
        AttendanceStatusCondition $attendanceStatusCondition
    ) {
        $inDb = $this->getDatabaseConnection();

        $query = "DELETE FROM " . $this->_table;
        $query .= cb_queryf($inDb, " WHERE col_event='@S'",
            $attendanceStatusCondition->getEventId());

        $usersId = [];
        if ($attendanceStatusCondition->getUserIds()) {
            $usersId = $attendanceStatusCondition->getUserIds();
        } elseif ($attendanceStatusCondition->getUserId()) {
            $usersId = [$attendanceStatusCondition->getUserId()];
        }
        if (count($usersId) > 0) {
            $query .= cb_queryf($inDb, " AND col_user IN(@A) ", $usersId);
        }

        if ($inDb->query($query) === false) {
            $inDb->throwServerError($query);
        }

        return $inDb->affected_rows();
    }


    /**
     * @param $attendanceStatusConditionObj
     *
     * @return bool|AttendanceStatus
     */
    public function getByUserIdAndEventId(
        AttendanceStatusCondition $attendanceStatusConditionObj
    ) {
        $attendanceStatusList
            = $this->getListByCondition($attendanceStatusConditionObj);
        if (is_array($attendanceStatusList)
            && count($attendanceStatusList) == 1
        ) {
            return $attendanceStatusList[0];
        }

        return null;
    }


    /**
     * @param attendanceStatusConditionObj
     *
     * @return AttendanceStatus[]
     */
    public function getListByCondition(
        AttendanceStatusCondition $attendanceStatusConditionObj
    ) {
        $inDb = $this->getDatabaseConnection();

        $query = "SELECT"
                 . " ats.col_ctime,"
                 . " evm.col_event,"
                 . " ats.col_status,"
                 . " evm.col_user,"
                 . " ats.col_message"
                 . " FROM  tab_grn_schedule_event AS ev"
                 . " INNER JOIN tab_grn_schedule_eventmember AS evm"
                 . " ON ev._id = evm.col_event"
                 . " LEFT JOIN tab_grn_schedule_event_attendance_status AS ats"
                 . " ON evm.col_user = ats.col_user"
                 . " AND evm.col_event = ats.col_event"
                 . " LEFT JOIN tab_cb_user AS u ON evm.col_user = u._id"
                 . " WHERE ev." . AttendanceStatus::ATTENDANCE_CHECK_FIELD
                 . "=1"
                 . " AND"
                 . $this->_objectToConditionQuery($attendanceStatusConditionObj);
        $result = $inDb->query($query);

        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $attendanceStatusArray = [];
        while ($rawData = $inDb->fetch_assoc($result)) {
            $attendanceStatusDTO = new AttendanceStatus($rawData);
            $attendanceStatusArray[] = $attendanceStatusDTO;
        }
        $inDb->free_result($result);

        return $attendanceStatusArray;
    }

    /**
     * @param $attendanceStatusConditionObj
     *Note: getStatus() == "" then get all (include, confirmed, unconfirmed)
     *
     * @return int
     */
    public function countByCondition(
        AttendanceStatusCondition $attendanceStatusConditionObj
    ) {

        $countResult = 0;

        $query
            = "SELECT COUNT(*) AS count FROM tab_grn_schedule_event AS ev"
              . " INNER JOIN tab_grn_schedule_eventmember AS evm ON ev._id = evm.col_event"
              . " LEFT JOIN tab_grn_schedule_event_attendance_status AS ats ON evm.col_user = ats.col_user AND evm.col_event = ats.col_event"
              . " LEFT JOIN tab_cb_user AS u ON evm.col_user = u._id";

        $query .= " WHERE"
                  . $this->_objectToConditionQuery($attendanceStatusConditionObj);

        $inDb = $this->getDatabaseConnection();
        $result = $inDb->query($query);
        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $rawData = $inDb->fetch_assoc($result);
        if (is_array($rawData)) {
            $countResult = cb_at($rawData, 'count', 0);
        }

        $inDb->free_result($result);

        return $countResult;
    }

    /**
     * @param AttendanceStatusCondition $attendanceStatusObj
     *
     * @return int|mixed
     */
    function getLastAccessTimeForCreator(
        AttendanceStatusCondition $attendanceStatusObj
    ) {
        $inDb = $this->getDatabaseConnection();
        $lastedRead = 0;
        $query
            = "SELECT col_timestamp FROM tab_grn_schedule_attendance_list_access_time";
        $query .= cb_queryf($inDb, " WHERE col_event='@S'",
            $attendanceStatusObj->getEventId());
        $result = $inDb->query($query);

        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }
        $rawData = $inDb->fetch_assoc($result);
        if (isset($rawData) && is_array($rawData)) {
            $lastedRead = cb_at($rawData, 'col_timestamp', 0);

        }

        return $lastedRead;
    }

    /**
     * @param AttendanceStatusCondition $attendanceStatusObj
     *
     * @return int|mixed
     */
    function getLastConfirmationTime(
        AttendanceStatusCondition $attendanceStatusObj
    ) {
        $inDb = $this->getDatabaseConnection();
        $query
            = "SELECT MAX(col_ctime) AS 'col_ctime' FROM tab_grn_schedule_event_attendance_status";
        $query .= cb_queryf(
            $inDb
            , " WHERE col_event='@S' and col_user <> '@S'"
            , $attendanceStatusObj->getEventId()
            , $attendanceStatusObj->getUserId()
        );
        $result = $inDb->query($query);

        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }
        $rawData = $inDb->fetch_assoc($result);

        $lastedConfirm = 0;
        if (isset($rawData) && is_array($rawData)) {
            $lastedConfirm = cb_at($rawData, 'col_ctime', 0);
        }
        $inDb->free_result($result);

        return $lastedConfirm;
    }

    /**
     * @param AttendanceStatusCondition $attendanceStatusObj
     *
     * @return bool|int
     */
    public function setLastAccessTimeForCreator(
        AttendanceStatusCondition $attendanceStatusObj
    ) {

        $inDb = $this->getDatabaseConnection();

        $query
            = "INSERT INTO tab_grn_schedule_attendance_list_access_time(col_event,col_timestamp)";
        $query .= cb_queryf($inDb, " VALUES('@S','@S')",
            $attendanceStatusObj->getEventId(), time());
        $query .= " ON DUPLICATE KEY UPDATE col_timestamp=VALUES(col_timestamp)";

        $result = $inDb->query($query);

        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }
        $insertCount = $inDb->affected_rows();

        return $insertCount;
    }

    /**
     * @param AttendanceStatusCondition $attendanceStatusObj
     *
     * @return int|mixed
     */
    function deleteLastAccessTimeOfEvent(
        AttendanceStatusCondition $attendanceStatusObj
    ) {
        $inDb = $this->getDatabaseConnection();
        $query = "DELETE FROM tab_grn_schedule_attendance_list_access_time";
        $query .= cb_queryf($inDb, " WHERE col_event='@S'",
            $attendanceStatusObj->getEventId());

        if ($inDb->query($query) === false) {
            $inDb->throwServerError($query);
        }

        return $inDb->affected_rows();
    }
}
