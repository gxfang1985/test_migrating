<?php

require_once('fw/database.csp');
require_once('schedule/bean/GrnFacilityFacilitygroup.csp');

/**
 * 施設グループ データアクセス クラス
 * MySQLに特化させている
 *
 * @package code.include.schedule.dao
 * @access  public
 * @author  Toshihisa Kobayashi
 * @create  2011/02/16
 **/
class GrnFacilityFacilitygroupDAO
{
    /**
     * 指定した施設グループコードを持つ施設グループオブジェクトを返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj          データアクセスに使用する付加情報等が格納される
     * @param     string $inFacilitygroupKey 施設グループコード
     *
     * @return    false|GrnFacilityFacilitygroup     取得出来た場合:GrnFacilityFacilitygroupオブジェクト  取得できなかった場合:FALSE
     */
    public function selectByForeignKey($inDataObj, $inFacilitygroupKey)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage) . "') ON fg._id = fgl.parent_id";
        $query .= " WHERE fg.col_foreign_key = '"
                  . $inDb->escape($inFacilitygroupKey) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);

        return $grnFacilitygroup;
    }

    /**
     * 指定した施設グループIDを持つ施設グループオブジェクトを返す。
     * 施設グループ名は標準名称を選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj データアクセスに使用する付加情報等が格納される
     * @param     string $inId      施設グループID
     *
     * @return    bool|GrnFacilityFacilitygroup     取得出来た場合:GrnFacilityFacilitygroupオブジェクト  取得できなかった場合:FALSE
     */
    public function selectDefaultById($inDataObj, $inId)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", fg.col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM tab_grn_facility_facilitygroup fg";
        $query .= " WHERE fg._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);

        return $grnFacilitygroup;
    }

    /**
     * 指定した施設グループIDを持つ施設グループオブジェクトを返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj データアクセスに使用する付加情報等が格納される
     * @param     string $inId      施設グループID
     *
     * @return    bool|GrnFacilityFacilitygroup     取得出来た場合:GrnFacilityFacilitygroupオブジェクト  取得できなかった場合:FALSE
     */
    public function selectLocalById($inDataObj, $inId)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage) . "') ON fg._id = fgl.parent_id";
        $query .= " WHERE fg._id = '" . $inDb->escape($inId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);

        return $grnFacilitygroup;
    }

    /**
     * 指定した施設IDを持つ施設グループオブジェクトを返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj    データアクセスに使用する付加情報等が格納される
     * @param     string $inFacilityId 施設ID
     *
     * @return    bool|GrnFacilityFacilitygroup     取得出来た場合:GrnFacilityFacilitygroupオブジェクト  取得できなかった場合:FALSE
     */
    public function selectLocalByFacilityId($inDataObj, $inFacilityId)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage) . "') ON fg._id = fgl.parent_id";
        $query .= ", tab_grn_facility_facilitygrouprelation fgr";
        $query .= ", tab_grn_facility_facility f";
        $query .= " WHERE fg._id = fgr.col_group";
        $query .= " AND fgr.col_facility = f._id";
        $query .= " AND f._id = '" . $inDb->escape($inFacilityId) . "'";
        $query = $inDb->select_format($query, 0, -1, $inLock);

        $result = $inDb->query($query);

        if (($result === false) || ($inDb->num_rows($result) != 1)) {
            if ($result) {
                $inDb->free_result($result);
            }

            return false;
        }

        $rawdata = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);

        return $grnFacilitygroup;
    }

    /**
     * 施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj データアクセスに使用する付加情報等が格納される
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupList($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 施設グループオブジェクトの配列を返す。
     * 施設グループ名は標準名称を選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj データアクセスに使用する付加情報等が格納される
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListWithNonLocal($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", fg.col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM tab_grn_facility_facilitygroup fg";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 指定した施設グループIDを親に持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj  データアクセスに使用する付加情報等が格納される
     * @param     string $inParentId 施設グループID
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByParentId($inDataObj, $inParentId)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= " WHERE fg.col_parent= '" . $inDb->escape($inParentId) . "'";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 指定した施設グループIDを親に持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は標準名称を選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj  データアクセスに使用する付加情報等が格納される
     * @param     string $inParentId 施設グループID
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByParentIdWithNonLocal(
        $inDataObj,
        $inParentId
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", fg.col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM tab_grn_facility_facilitygroup fg";
        $query .= " WHERE fg.col_parent= '" . $inDb->escape($inParentId) . "'";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 最上位レベルの施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj データアクセスに使用する付加情報等が格納される
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByIsNullParentId($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= " WHERE fg.col_parent IS NULL";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 最上位レベルの施設グループオブジェクトの配列を返す。
     * 施設グループ名は標準名称を選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj データアクセスに使用する付加情報等が格納される
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByIsNullParentIdWithNonLocal($inDataObj)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj)) ? $inDataObj['lock']
            : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", fg.col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM tab_grn_facility_facilitygroup fg";
        $query .= " WHERE fg.col_parent IS NULL";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 指定した施設グループIDを持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj            データアクセスに使用する付加情報等が格納される
     * @param     array $inFacilitygroupArray 施設グループIDを値に持つ配列
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByIds($inDataObj, $inFacilitygroupArray)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inFacilitygroupIds = implode(",",
            $this->_quoteIdentifierArray($inDb, $inFacilitygroupArray));

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= " WHERE fg._id IN ( ${inFacilitygroupIds} )";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 指定した文字列を名称に含む施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択及び検索をする。
     *
     * @access    public
     *
     * @param     array $inDataObj   データアクセスに使用する付加情報等が格納される
     * @param     array $inWordArray 検索文字列を含む配列
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByNames($inDataObj, $inWordArray)
    {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inEscapeWordArray = [];
        foreach ($inWordArray as $word) {
            $inEscapeWordArray[] = cb_queryf($inDb,
                "(main.col_name LIKE '%@L%') ", $word);
        }

        $inWords = implode(" AND ", $inEscapeWordArray);

        $query = "SELECT *";
        $query .= " FROM (";
        $query .= "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= ") main";
        $query .= " WHERE ${inWords}";
        $query .= " ORDER BY main.col_list_index, main._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 指定した施設IDを持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj       データアクセスに使用する付加情報等が格納される
     * @param     array $inFacilityArray 施設IDを値に持つ配列
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByFacilityIds(
        $inDataObj,
        $inFacilityArray
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inFacilityIds = implode(",",
            $this->_quoteIdentifierArray($inDb, $inFacilityArray));

        $query
            = "SELECT f._id AS facility_id, fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= ", tab_grn_facility_facilitygrouprelation fgr";
        $query .= ", tab_grn_facility_facility f";
        $query .= " WHERE fg._id = fgr.col_group";
        $query .= " AND fgr.col_facility = f._id";
        $query .= " AND f._id IN ( ${inFacilityIds} )";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * *** レスポンス改善の応急処置的メソッド ***
     * このメソッドを作った背景
     * 目指している処理は「システム内ではGrnFacilityFacilitygroupオブジェクトをそのまま使う」ことなのだが現状は配列を使って動作している。
     * そのため、目指す処理に置き換わるまでの折衷案として、各所でGrnFacilityFacilitygroupオブジェクトを配列にコンバートして配列として情報を渡す処理を用意している。
     * しかし、配列にコンバートする処理がレスポンスに影響する箇所が発生した。
     * 改善するため、GrnFacilityFacilitygroupオブジェクトを間に用意せず、クエリ実行結果を直接配列に代入するメソッドを用意することになった。
     * 目指す処理が実現できた暁には、このメソッドは削除して@see GrnFacilityFacilitygroupDAO::getFacilitygroupListByFacilityIdsメソッドを利用してください。
     *
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return array
     */
    public function getFacilitygroupArrayListByFacilityIds(
        $inDataObj,
        $inFacilityArray
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inFacilityIds = implode(",",
            $this->_quoteIdentifierArray($inDb, $inFacilityArray));

        $query
            = "SELECT f._id AS facility_id, fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= ", tab_grn_facility_facilitygrouprelation fgr";
        $query .= ", tab_grn_facility_facility f";
        $query .= " WHERE fg._id = fgr.col_group";
        $query .= " AND fgr.col_facility = f._id";
        $query .= " AND f._id IN ( ${inFacilityIds} )";
        $query .= " ORDER BY fg.col_list_index, fg._id";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = [];
            $grnFacilitygroup['_id'] = $rawdata['_id'];
            $grnFacilitygroup['col_creator']
                = $rawdata['col_creator'];
            $grnFacilitygroup['col_creator_foreign_key']
                = $rawdata['col_creator_foreign_key'];
            $grnFacilitygroup['col_creator_name']
                = $rawdata['col_creator_name'];
            $grnFacilitygroup['col_ctime']
                = $rawdata['col_ctime'];
            $grnFacilitygroup['col_list_index']
                = $rawdata['col_list_index'];
            $grnFacilitygroup['col_modifier']
                = $rawdata['col_modifier'];
            $grnFacilitygroup['col_modifier_foreign_key']
                = $rawdata['col_modifier_foreign_key'];
            $grnFacilitygroup['col_modifier_name']
                = $rawdata['col_modifier_name'];
            $grnFacilitygroup['col_mtime']
                = $rawdata['col_mtime'];
            $grnFacilitygroup['col_name']
                = $rawdata['col_name'];
            $grnFacilitygroup['col_reserve_blob1']
                = $rawdata['col_reserve_blob1'];
            $grnFacilitygroup['col_reserve_blob2']
                = $rawdata['col_reserve_blob2'];
            $grnFacilitygroup['col_reserve_blob3']
                = $rawdata['col_reserve_blob3'];
            $grnFacilitygroup['col_reserve_int1']
                = $rawdata['col_reserve_int1'];
            $grnFacilitygroup['col_reserve_int2']
                = $rawdata['col_reserve_int2'];
            $grnFacilitygroup['col_reserve_int3']
                = $rawdata['col_reserve_int3'];
            $grnFacilitygroup['col_reserve_text1']
                = $rawdata['col_reserve_text1'];
            $grnFacilitygroup['col_reserve_text2']
                = $rawdata['col_reserve_text2'];
            $grnFacilitygroup['col_reserve_text3']
                = $rawdata['col_reserve_text3'];
            $grnFacilitygroup['col_foreign_key']
                = $rawdata['col_foreign_key'];
            $grnFacilitygroup['col_memo']
                = $rawdata['col_memo'];
            $grnFacilitygroup['col_settings']
                = $rawdata['col_settings'];
            $grnFacilitygroup['col_parent']
                = $rawdata['col_parent'];
            $grnFacilitygroup['facility_id']
                = $rawdata['facility_id'];

            $grnFacilitygroupArray[] = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * 指定した条件を元に管理権限を持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj       データアクセスに使用する付加情報等が格納される
     * @param     object $inConditionBean GrnFacilityFacilitygroupPrivilegeConditionオブジェクト
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByPrivilegeCondition(
        $inDataObj,
        $inConditionBean
    ) {
        /** @var CB_DatabaseConnection $inDb */
        $inDb = $inDataObj['db'];
        $inLock = (array_key_exists('lock', $inDataObj))
            ? $inDataObj['lock'] : null;
        $inOffset = (array_key_exists('offset', $inDataObj))
            ? $inDataObj['offset'] : null;
        $inLimit = (array_key_exists('limit', $inDataObj))
            ? $inDataObj['limit'] : null;
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        $inUserId = $inConditionBean->getUserId();
        $inGroupIdArray = $inConditionBean->getGroupIdArray();
        $inStaticRoleIdArray = $inConditionBean->getStaticRoleIdArray();
        $inDynamicRoleIdArray = $inConditionBean->getDynamicRoleIdArray();

        $inGroupIds = implode(",",
            $this->_quoteIdentifierArray($inDb, $inGroupIdArray));
        $inStaticRoleIds = implode(",",
            $this->_quoteIdentifierArray($inDb, $inStaticRoleIdArray));
        $inDynamicRoleIds = implode(",",
            $this->_quoteIdentifierArray($inDb, $inDynamicRoleIdArray));

        $query
            = "SELECT fg._id, fg.col_creator, fg.col_creator_foreign_key, fg.col_creator_name, fg.col_ctime";
        $query .= ", fg.col_foreign_key, fg.col_list_index, fg.col_modifier";
        $query .= ", fg.col_modifier_foreign_key, fg.col_modifier_name, fg.col_mtime";
        $query .= ", IFNULL(fgl.col_name, fg.col_name) AS col_name";
        $query .= ", fg.col_reserve_blob1, fg.col_reserve_blob2, fg.col_reserve_blob3";
        $query .= ", fg.col_reserve_int1, fg.col_reserve_int2, fg.col_reserve_int3, fg.col_reserve_text1";
        $query .= ", fg.col_reserve_text2, fg.col_reserve_text3, fg.col_memo, fg.col_settings, fg.col_parent";
        $query .= " FROM (tab_grn_facility_facilitygroup fg LEFT JOIN (tab_grn_facility_facilitygroup_local fgl INNER JOIN tab_cb_language_status l ON fgl.language_id = l._id AND l.col_language = '"
                  . $inDb->escape($inLanguage)
                  . "') ON fg._id = fgl.parent_id)";
        $query .= ", tab_grn_facility_facilitygroup_privilege priv";
        $query .= " WHERE fg._id = priv.col_facilitygroup";
        $query .= " AND (";
        $query .= "       priv.col_user = ${inUserId}";

        if (strlen($inGroupIds) > 0) {
            $query .= "   OR priv.col_group IN (${inGroupIds})";
        }

        if (strlen($inStaticRoleIds) > 0) {
            $query .= "   OR priv.col_static_role IN (${inStaticRoleIds})";
        }

        if (strlen($inDynamicRoleIds) > 0) {
            $query .= "   OR priv.col_dynamic_role IN (${inDynamicRoleIds})";
        }

        $query .= " )";
        $query .= " ORDER BY fg.col_list_index, priv.col_facilitygroup";
        if ( ! is_null($inOffset)) {
            $query = $inDb->select_format($query, $inOffset, $inLimit, $inLock);
        }

        $result = $inDb->query($query);

        if ($result === false) {
            //Throw Query Error
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        $grnFacilitygroupArray = [];
        while ($rawdata = $inDb->fetch_assoc($result)) {
            $grnFacilitygroup = new GrnFacilityFacilitygroup($rawdata);
            $grnFacilitygroupArray[$grnFacilitygroup->getId()]
                = $grnFacilitygroup;
        }
        $inDb->free_result($result);
        $result = false;

        return $grnFacilitygroupArray;
    }

    /**
     * $inValueArrayの値毎にクォートを付けます。値に含まれる特殊文字はすべて適切にエスケープされます。
     * @access    private
     *
     * @param     object $inDb         CB_DatabaseConnectionオブジェクト
     * @param     array  $inValueArray 文字列を値として持つ配列
     *
     * @return    array     値エスケープしてクォートで挟んだ配列
     */
    private function _quoteIdentifierArray($inDb, $inValueArray)
    {
        $result = [];

        if (count($inValueArray) > 0) {
            foreach ($inValueArray as $value) {
                $result[] = "'" . $inDb->escape($value) . "'";
            }
        }

        return $result;
    }
}
