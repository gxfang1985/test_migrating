<?php

namespace grn\schedule\dao;

use grn\schedule\dao\DataAccessControlAbstract;
use grn\schedule\ScheduleDefaultPublicLogic;

require_once("fw/database.csp");

/**
 * ScheduleDefaultPublic Access Object Class
 */
class ScheduleDefaultPublicDAO extends DataAccessControlAbstract
{
    const ARG_USER = ScheduleDefaultPublicLogic::ARG_USER;
    const ARG_ORGANIZATION = ScheduleDefaultPublicLogic::ARG_ORGANIZATION;
    const ARG_STATIC_ROLE = ScheduleDefaultPublicLogic::ARG_STATIC_ROLE;
    const ARG_ORDER = ScheduleDefaultPublicLogic::ARG_ORDER;

    const COLUMN_TARGET = ScheduleDefaultPublicLogic::COLUMN_TARGET;
    const COLUMN_USER = ScheduleDefaultPublicLogic::COLUMN_USER;
    const COLUMN_GROUP = ScheduleDefaultPublicLogic::COLUMN_GROUP;
    const COLUMN_ROLE = ScheduleDefaultPublicLogic::COLUMN_ROLE;
    const COLUMN_ORDER = ScheduleDefaultPublicLogic::COLUMN_ORDER;

    const DEFAULT_ORDER = ScheduleDefaultPublicLogic::DEFAULT_ORDER;

    private static $instance = null;

    /**
     * Constructor
     */
    public function __construct()
    {

    }

    /**
     * Get Instance(Singleton pattern)
     *
     * @return ScheduleDefaultPublicDAO $instance
     */
    public static function getInstance()
    {
        if ( ! isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }

    /**
     *
     * @param string $user_id
     * @param array  $data_array
     *
     * @return string
     */
    public function insert($user_id, array $data_array)
    {
        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
INSERT INTO
 tab_grn_schedule_notifyaddress_default 
SET
 col_target="@S",
 @S="@S",
 col_order="@S" 
ON DUPLICATE KEY UPDATE col_order=values(col_order)
SQL;
        if ( ! isset($data_array[self::ARG_ORDER])
             || $data_array[self::ARG_ORDER] == ""
        ) {
            $data_array[self::ARG_ORDER] = self::DEFAULT_ORDER;
        }

        if (isset($data_array[self::ARG_USER])) {
            $query = $db_connection->format($query,
                [
                    $user_id,
                    self::COLUMN_USER,
                    $data_array[self::ARG_USER],
                    $data_array[self::ARG_ORDER]
                ]);
        } elseif (isset($data_array[self::ARG_ORGANIZATION])) {
            $query = $db_connection->format($query,
                [
                    $user_id,
                    self::COLUMN_GROUP,
                    $data_array[self::ARG_ORGANIZATION],
                    $data_array[self::ARG_ORDER]
                ]);
        } elseif (isset($data_array[self::ARG_STATIC_ROLE])) {
            $query = $db_connection->format($query,
                [
                    $user_id,
                    self::COLUMN_ROLE,
                    $data_array[self::ARG_STATIC_ROLE],
                    $data_array[self::ARG_ORDER]
                ]);
        } else {
            cb_throw_error();
        }

        $db_connection->query($query);

        return $db_connection->get_insert_id();
    }

    /**
     *
     * @param string $user_id
     * @param array  $data_array
     *
     * @return boolean
     */
    public function updateOrder($user_id, array $data_array)
    {
        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
UPDATE
 tab_grn_schedule_notifyaddress_default 
SET
 col_order="@S" 
WHERE
 col_target="@S"
 AND
 @S="@S"
SQL;
        if ( ! isset($data_array[self::ARG_ORDER])
             || $data_array[self::ARG_ORDER] == ""
        ) {
            $data_array[self::ARG_ORDER] = self::DEFAULT_ORDER;
        }

        if (isset($data_array[self::ARG_USER])) {
            $query = $db_connection->format($query,
                [
                    $data_array[self::ARG_ORDER],
                    $user_id,
                    self::COLUMN_USER,
                    $data_array[self::ARG_USER],
                ]);
        } elseif (isset($data_array[self::ARG_ORGANIZATION])) {
            $query = $db_connection->format($query,
                [
                    $data_array[self::ARG_ORDER],
                    $user_id,
                    self::COLUMN_GROUP,
                    $data_array[self::ARG_ORGANIZATION],
                ]);
        } elseif (isset($data_array[self::ARG_STATIC_ROLE])) {
            $query = $db_connection->format($query,
                [
                    $data_array[self::ARG_ORDER],
                    $user_id,
                    self::COLUMN_ROLE,
                    $data_array[self::ARG_STATIC_ROLE],
                ]);
        } else {
            cb_throw_error();
        }

        $db_connection->query($query);

        return true;
    }

    /**
     *
     * @param int $offset
     * @param int $limit
     * @param int $lock
     *
     * @return array
     */
    public function selectAll(
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
SELECT
 n._id,
 n.col_target,
 n.col_user,
 n.col_group,
 n.col_role,
 n.col_order 
FROM tab_grn_schedule_notifyaddress_default AS n 
LEFT JOIN tab_cb_user AS tu
 ON n.col_target = tu._id 
LEFT JOIN tab_cb_user AS u
 ON n.col_user = u._id 
WHERE
 tu.col_deleted IS NULL
 AND u.col_deleted IS NULL 
ORDER BY
 n.col_target,
 n.col_order,
 n._id
SQL;
        $query = $db_connection->select_format($query, $offset, $limit,
            $lock);
        $result = $db_connection->query($query);

        $rows = [];
        while ($row = $db_connection->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $db_connection->free_result($result);

        return $rows;
    }

    /**
     *
     * @param array $user_ids
     * @param int   $offset
     * @param int   $limit
     * @param int   $lock
     *
     * @return array
     */
    public function selectCountByUserIds(
        $user_ids = [],
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_NO_LOCK
    ) {
        $rows = [];
        if ( ! (is_array($user_ids) && count($user_ids) > 0)) {
            return $rows;
        }

        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
SELECT
 n.col_target,
 count(n._id) AS count 
FROM
 tab_grn_schedule_notifyaddress_default AS n 
LEFT JOIN tab_cb_user AS tu
 ON n.col_target = tu._id 
LEFT JOIN tab_cb_user AS u
 ON n.col_user = u._id 
WHERE
 n.col_target IN( @A )
 AND tu.col_deleted IS NULL
 AND u.col_deleted IS NULL 
GROUP BY
 n.col_target
SQL;

        $query = $db_connection->format($query, [$user_ids]);
        $query = $db_connection->select_format($query, $offset, $limit, $lock);
        $result = $db_connection->query($query);

        while ($row = $db_connection->fetch_assoc($result)) {
            $rows[$row[self::COLUMN_TARGET]] = $row["count"];
        }
        $db_connection->free_result($result);

        return $rows;
    }

    /**
     *
     * @param string $user_id
     * @param int    $offset
     * @param int    $limit
     * @param int    $lock
     *
     * @return array
     */
    public function selectByUserId(
        $user_id,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
SELECT
 n.col_user,
 n.col_group,
 n.col_role 
FROM
 tab_grn_schedule_notifyaddress_default AS n 
LEFT JOIN tab_cb_user AS tu
 ON n.col_target = tu._id 
LEFT JOIN tab_cb_user AS u
 ON n.col_user = u._id 
WHERE
 n.col_target = "@S"
 AND tu.col_deleted IS NULL
 AND u.col_deleted IS NULL 
ORDER BY
 n.col_order,
 n._id
SQL;
        $query = $db_connection->format($query, [$user_id]);
        $query = $db_connection->select_format($query, $offset, $limit,
            $lock);
        $result = $db_connection->query($query);

        $rows = [];
        while ($row = $db_connection->fetch_assoc($result)) {
            $rows[] = $row;
        }
        $db_connection->free_result($result);

        return $rows;
    }

    /**
     *
     * @param string $user_id
     *
     * @return boolean
     */
    public function deleteByUserId($user_id)
    {
        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
DELETE FROM
 tab_grn_schedule_notifyaddress_default 
WHERE
 col_target = "@S"
SQL;
        $query = $db_connection->format($query, [$user_id]);
        $db_connection->query($query);

        return true;
    }

    /**
     *
     * @param string $user_id
     * @param string $type
     *
     * @return boolean
     */
    public function deleteByUserIdAndType($user_id, $type)
    {
        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
DELETE FROM
 tab_grn_schedule_notifyaddress_default 
WHERE
 col_target = "@S"
 AND
 col_@S IS NOT NULL
SQL;
        $query = $db_connection->format($query, [$user_id, $type]);
        $db_connection->query($query);

        return true;
    }

    /**
     *
     * @param string $user_id
     * @param array  $data_array
     *
     * @return boolean
     */
    public function deleteByUserIdAndTypeId($user_id, array $data_array)
    {
        $db_connection = $this->getDatabaseConnection();
        $query
            = <<<SQL
DELETE FROM
 tab_grn_schedule_notifyaddress_default 
WHERE
 col_target = "@S"
 AND
 @S="@S";
SQL;
        if (isset($data_array[self::ARG_USER])) {
            $query = $db_connection->format($query,
                [$user_id, self::COLUMN_USER, $data_array[self::ARG_USER]]);
        } elseif (isset($data_array[self::ARG_ORGANIZATION])) {
            $query = $db_connection->format($query, [
                $user_id,
                self::COLUMN_GROUP,
                $data_array[self::ARG_ORGANIZATION]
            ]);
        } elseif (isset($data_array[self::ARG_STATIC_ROLE])) {
            $query = $db_connection->format($query, [
                $user_id,
                self::COLUMN_ROLE,
                $data_array[self::ARG_STATIC_ROLE]
            ]);
        } else {
            cb_throw_error();
        }

        $query = $db_connection->format($query, [$user_id]);
        $db_connection->query($query);

        return true;
    }
}
