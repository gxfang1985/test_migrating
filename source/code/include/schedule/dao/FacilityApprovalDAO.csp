<?php

namespace grn\schedule\dao;

require_once('fw/database.csp');

use grn\schedule\bean\FacilityApproval;
use grn\schedule\bean\FacilityApprovalApplyingInfo;
use grn\schedule\collection\EventFacilityApprovals;

class FacilityApprovalDAO extends DataAccessControlAbstract
{
    private $_db;

    function __construct()
    {
        $this->_db = $this->getDatabaseConnection();
    }

    CONST TABLE_FACILITY_APPROVAL = 'tab_grn_schedule_event_facility_approval';
    CONST TABLE_USING_PURPOSE = 'tab_grn_schedule_event_facility_approval_using_purpose';
    CONST TABLE_FACILITY_APPLYING = 'tab_grn_schedule_event_facility_approval_applying';
    CONST TABLE_SCHEDULE_EVENT = 'tab_grn_schedule_event';

    /**
     * The function build sql-condition from condition object
     *
     * @param $inDataObj
     * @param $facilityApprovalObj
     *
     * @return string
     */
    private function _objectToConditionQuery(
        FacilityApproval $facilityApprovalObj
    ) {
        $arrConditions = [];
        $inDb = $this->getDatabaseConnection();

        if ($facilityApprovalObj->getId() > 0) {
            $arrConditions[] = cb_queryf($inDb, "_id = '@S'",
                $facilityApprovalObj->getId());
        }

        if ($facilityApprovalObj->getFacility() > 0) {
            $arrConditions[] = cb_queryf(
                $inDb, "col_facility = '@S'",
                $facilityApprovalObj->getFacility()
            );
        }

        if ($facilityApprovalObj->getStatus() > 0) {
            $arrConditions[] = cb_queryf(
                $inDb, "col_status = '@S'", $facilityApprovalObj->getStatus()
            );
        }

        if ($facilityApprovalObj->getUsing() > 0) {
            $arrConditions[] = cb_queryf(
                $inDb, "col_using = '@S'", $facilityApprovalObj->getUsing()
            );
        }

        if ($facilityApprovalObj->getEventId() > 0) {
            $arrConditions[] = cb_queryf(
                $inDb, "col_event = '@S'", $facilityApprovalObj->getEventId()
            );
        }

        $strCondition = " " . join(" AND ", $arrConditions);

        return $strCondition;
    }

    /**
     * @param $facilityApprovalObj
     *
     * @return mixed
     */
    public function insert(FacilityApproval $facilityApprovalObj)
    {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb,
            "INSERT INTO @S(col_event, col_facility, col_facility_name, col_status, col_approval_time, col_comment, col_user, col_user_name, col_using, col_start_datetime, col_end_datetime )",
            self::TABLE_FACILITY_APPROVAL
        );
        $query .= cb_queryf(
            $inDb,
            " VALUES ( '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S', '@S');",
            $facilityApprovalObj->getEventId(),
            $facilityApprovalObj->getFacility(),
            $facilityApprovalObj->getFacilityName(),
            $facilityApprovalObj->getStatus(),
            $facilityApprovalObj->getApprovalTime(),
            $facilityApprovalObj->getComment(),
            $facilityApprovalObj->getUser(),
            $facilityApprovalObj->getUserName(),
            $facilityApprovalObj->getUsing(),
            $facilityApprovalObj->getStartDateTime(),
            $facilityApprovalObj->getEndDateTime()
        );

        $this->executeQuery($inDb, $query);

        return $inDb->affected_rows();
    }

    /***
     * The function remove facility of event when operation administrator reject
     *
     * @param FacilityApproval $facilityApproval
     *
     * @return bool|int
     */
    public function removeFacilityOfEvent($eventId, $facilityId)
    {
        $inDb = $this->getDatabaseConnection();
        $query = "DELETE FROM tab_grn_schedule_eventmember WHERE ";
        $query .= cb_queryf($inDb,
            " col_event='@S' AND col_facility='@S'", $eventId, $facilityId);

        $this->executeQuery($inDb, $query);

        return $inDb->affected_rows();
    }

    /*
     * This function update value col_using of facility to 0, this means this facility was removed from event
     *
     * @param int $eventId
     * @param array $facilityIds
     *
     * @return bool|int
     */
    public function invalidateFacilitiesOfEvent($eventId, $facilityIds)
    {
        $inDb = $this->getDatabaseConnection();

        $query = cb_queryf(
            $inDb,
            "UPDATE @S SET col_using = 0 WHERE col_facility IN (@A) AND col_event = '@S';",
            self::TABLE_FACILITY_APPROVAL, $facilityIds, $eventId
        );
        $this->executeQuery($inDb, $query);

        return $inDb->affected_rows();
    }

    /**
     * @param FacilityApproval $facilityApprovalObj
     *
     * @return FacilityApproval[]
     */
    public function getListByCondition(FacilityApproval $facilityApprovalObj)
    {
        $inDb = $this->getDatabaseConnection();

        $query = "SELECT _id,"
                 . " col_approval_time,"
                 . " col_event,"
                 . " col_facility,"
                 . " col_facility_name,"
                 . " col_status,"
                 . " col_user,"
                 . " col_user_name,"
                 . " col_comment,"
                 . " col_using,"
                 . " col_start_datetime,"
                 . " col_end_datetime"
                 . " FROM " . self::TABLE_FACILITY_APPROVAL;

        $condition = $this->_objectToConditionQuery($facilityApprovalObj);

        if (strlen($condition) > 0) {
            $query .= " WHERE" . $condition;
        }
        $query .= " ORDER BY _id DESC";
        $result = $this->executeQuery($inDb, $query);

        $facilityApprovalArray = [];
        while ($rawData = $inDb->fetch_assoc($result)) {
            $facilityApproval = new FacilityApproval($rawData);
            $facilityApprovalArray[] = $facilityApproval;
        }
        $inDb->free_result($result);

        return $facilityApprovalArray;
    }

    /**
     * @param int $eventId
     *
     * @return array
     */
    public function getListByEventId($eventId)
    {
        $facilityApproval = new FacilityApproval();
        $facilityApproval->setEvent($eventId);

        return $this->getListByCondition($facilityApproval);
    }

    /**
     * @param string[] $eventIds
     *
     * @return EventFacilityApprovals[]
     */
    public function getListByEventIds(array $eventIds): array
    {
        $inDb = $this->getDatabaseConnection();

        $query_format
            = <<<SQL
SELECT _id,
 col_approval_time,
 col_event,
 col_facility,
 col_facility_name,
 col_status,
 col_user,
 col_user_name,
 col_comment,
 col_using,
 col_start_datetime,
 col_end_datetime
FROM @S
WHERE col_event IN (@A)
ORDER BY _id DESC
SQL;

        $query = $inDb->format($query_format,
            [self::TABLE_FACILITY_APPROVAL, $eventIds]);

        $result = $this->executeQuery($inDb, $query);


        /** @var EventFacilityApprovals[] $facilityApprovalArray */
        $facilityApprovalArray = [];
        foreach ($eventIds as $eventId) {
            $facilityApprovalArray[$eventId] = new EventFacilityApprovals([]);
        }

        while ($rawData = $inDb->fetch_assoc($result)) {
            $facilityApproval = new FacilityApproval($rawData);
            $facilityApprovalArray[$rawData['col_event']]->add($facilityApproval);
        }
        $inDb->free_result($result);

        return $facilityApprovalArray;
    }

    public function getLastApprovalTime($eventId)
    {
        $inDb = $this->getDatabaseConnection();

        $query = "SELECT col_approval_time"
                 . " FROM @S"
                 . " WHERE col_event = '@S'"
                 . " ORDER BY _id DESC"
                 . " LIMIT 1";
        $query = cb_queryf($inDb, $query, self::TABLE_FACILITY_APPROVAL,
            $eventId);
        $result = $this->executeQuery($inDb, $query);

        $row = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        return $row['col_approval_time'];
    }

    public function hasApprovalHistory($eventId)
    {
        $inDb = $this->getDatabaseConnection();

        $query = "SELECT _id"
                 . " FROM @S"
                 . " WHERE col_event = '@S'"
                 . " ORDER BY _id DESC"
                 . " LIMIT 1";
        $query = cb_queryf($inDb, $query, self::TABLE_FACILITY_APPROVAL,
            $eventId);
        $result = $this->executeQuery($inDb, $query);

        $row = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        return $row['_id'] !== null ? true : false;
    }

    /**
     * @param $eventId
     * @param $facilityId
     *
     * @return FacilityApproval|null
     */
    public function getLastApproval($eventId, $facilityId)
    {
        $inDb = $this->getDatabaseConnection();

        $query = "SELECT _id,"
                 . " col_approval_time,"
                 . " col_event,"
                 . " col_facility,"
                 . " col_facility_name,"
                 . " col_status,"
                 . " col_user,"
                 . " col_user_name,"
                 . " col_comment,"
                 . " col_using,"
                 . " col_start_datetime,"
                 . " col_end_datetime"
                 . " FROM @S"
                 . " WHERE col_event = '@S'"
                 . " AND col_facility = '@S'"
                 . " ORDER BY _id DESC"
                 . " LIMIT 1";
        $query = cb_queryf($inDb, $query, self::TABLE_FACILITY_APPROVAL,
            $eventId, $facilityId);
        $result = $this->executeQuery($inDb, $query);

        $facilityApproval = null;
        while ($rawData = $inDb->fetch_assoc($result)) {
            $facilityApproval = new FacilityApproval($rawData);
        }
        $inDb->free_result($result);

        return $facilityApproval;
    }

    public function setUsingPurpose($eventId, $usingPurpose)
    {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb, "INSERT INTO @S(col_event, col_using_purpose)",
            self::TABLE_USING_PURPOSE
        );
        $query .= cb_queryf(
            $inDb, " VALUES ( '@S', '@S' )",
            $eventId,
            $usingPurpose
        );

        $query .= cb_queryf(
            $inDb, " ON DUPLICATE KEY UPDATE col_using_purpose='@S'",
            $usingPurpose
        );

        $this->executeQuery($inDb, $query);

        return $inDb->affected_rows();
    }

    /**
     * @param string[] $event_ids
     *
     * @return string[] Key is a event id
     */
    public function getUsingPurposesByEventIds(array $event_ids)
    {
        $inDb = $this->getDatabaseConnection();

        $query
            = "SELECT col_using_purpose, col_event FROM @S WHERE col_event IN (@A)";
        $query = cb_queryf($inDb, $query, self::TABLE_USING_PURPOSE,
            $event_ids);
        $result = $this->executeQuery($inDb, $query);

        $data = [];
        while ($row = $inDb->fetch_assoc($result)) {
            $data[$row['col_event']] = $row['col_using_purpose'];
        }

        $inDb->free_result($result);

        return $data;
    }

    /**
     * @param FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
     *
     * @return bool|int
     */
    public function setFacilityApplyingInfo(
        FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
    ) {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb,
            "INSERT INTO @S(col_event, col_facility, col_applying_time, col_applying_user, col_applying_user_name)",
            self::TABLE_FACILITY_APPLYING
        );
        $query .= cb_queryf(
            $inDb, " VALUES ( '@S', '@S', '@S', '@S', '@S' )",
            $facilityApprovalApplyingInfo->getEventId(),
            $facilityApprovalApplyingInfo->getFacility(),
            $facilityApprovalApplyingInfo->getApplyingTime(),
            $facilityApprovalApplyingInfo->getApplyingUser(),
            $facilityApprovalApplyingInfo->getApplyingUserName()
        );

        $query .= cb_queryf(
            $inDb,
            " ON DUPLICATE KEY UPDATE col_applying_time = '@S', col_applying_user = '@S', col_applying_user_name = '@S' ",
            $facilityApprovalApplyingInfo->getApplyingTime(),
            $facilityApprovalApplyingInfo->getApplyingUser(),
            $facilityApprovalApplyingInfo->getApplyingUserName()
        );

        $this->executeQuery($inDb, $query);

        return $inDb->affected_rows();
    }

    /**
     * @param FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
     *
     * @return bool|int
     */
    public function setFacilityApplyingInfoForDeletedCreator(
        FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
    ) {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb,
            "INSERT INTO @S(col_event, col_facility, col_applying_time, col_applying_user, col_applying_user_name)",
            self::TABLE_FACILITY_APPLYING
        );
        $query .= cb_queryf(
            $inDb, " VALUES ( '@S', '@S', '@S', NULL, '@S' )",
            $facilityApprovalApplyingInfo->getEventId(),
            $facilityApprovalApplyingInfo->getFacility(),
            $facilityApprovalApplyingInfo->getApplyingTime(),
            $facilityApprovalApplyingInfo->getApplyingUserName()
        );

        $query .= cb_queryf(
            $inDb,
            " ON DUPLICATE KEY UPDATE col_applying_time = '@S', col_applying_user = NULL, col_applying_user_name = '@S' ",
            $facilityApprovalApplyingInfo->getApplyingTime(),
            $facilityApprovalApplyingInfo->getApplyingUserName()
        );

        $this->executeQuery($inDb, $query);

        return $inDb->affected_rows();
    }

    /**
     * @param $eventId
     * @param $facilityId
     *
     * @return FacilityApprovalApplyingInfo|null
     */
    public function getFacilityApplyingInfo($eventId, $facilityId)
    {
        $inDb = $this->getDatabaseConnection();

        $query = "SELECT col_event,"
                 . " col_facility,"
                 . " col_applying_time,"
                 . " col_applying_user,"
                 . " col_applying_user_name"
                 . " FROM @S "
                 . " WHERE col_event = '@S'"
                 . " AND col_facility = '@S'";
        $query = cb_queryf($inDb, $query, self::TABLE_FACILITY_APPLYING,
            $eventId, $facilityId);
        $result = $this->executeQuery($inDb, $query);

        $facilityApprovalApplyingInfo = null;
        while ($rawData = $inDb->fetch_assoc($result)) {
            $facilityApprovalApplyingInfo
                = new FacilityApprovalApplyingInfo($rawData);
        }
        $inDb->free_result($result);

        return $facilityApprovalApplyingInfo;
    }

    /**
     * @param int   $eventId
     * @param array $facilityIds
     *
     * @return bool|int
     */
    public function deleteFacilitiesApplyingInfo($eventId, $facilityIds)
    {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb,
            "DELETE FROM @S WHERE col_facility IN (@A) AND col_event = '@S';",
            self::TABLE_FACILITY_APPLYING, $facilityIds, $eventId
        );

        $this->executeQuery($inDb, $query);

        return $inDb->affected_rows();
    }

    /**
     * @param int $eventId
     *
     * @return mixed
     */
    public function getIdOfDeletedCreator($eventId)
    {
        $inDb = $this->getDatabaseConnection();
        $query = cb_queryf(
            $inDb, "SELECT col_creator FROM @S WHERE _id = '@S';",
            self::TABLE_SCHEDULE_EVENT, $eventId
        );

        $result = $this->executeQuery($inDb, $query);

        $row = $inDb->fetch_assoc($result);
        $inDb->free_result($result);

        return $row['col_creator'];
    }

    private function executeQuery($inDb, $query)
    {
        $result = $inDb->query($query);

        if ($result === false) {
            $inDb->throwError(['query' => 'query failed: ' . $query]);
        }

        return $result;
    }
}
