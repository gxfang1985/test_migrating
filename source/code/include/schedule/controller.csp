<?php
//GTM-1136

/**
 * schedule controller
 *
 * @author  Anh-Nguyen        2013/12
 * @package grn.schedule
 */


require_once('grn/controller.csp');


class GRN_Schedule_ControllerUtil extends GRN_ControllerUtil
{
    function __construct($page = null)
    {
        parent::__construct($page);
    }

    function isCurrentPage()
    {
        return $this->_page == cb_get_pagename();
    }

    function getSystemConfig()
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $ret = $um->getSystemConfig();

        return $ret;
    }

    function getUserConfig($user)
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $ret = $um->getUserConfig($user);

        return $ret;
    }

    /**
     * get UI setting
     *
     * @param CB_User $user
     * @param bool    $input
     *
     * @return array|bool
     */
    function getConfigValues($user, $input = false)
    {
        require_once('grn/ui.csp');
        $um = GRN_UIConfigManager::getInstance();
        $uc = $um->getUserConfig($user);

        if ( ! $uc) {
            return false;
        }

        $config = [
            'subject_width'  => $uc->getSubjectWidth(),
            'truncate_width' => $uc->getTruncateWidth(),
            'name_width'     => $uc->getNameWidth(),
            'inline'         => $uc->getInlineSetting(),
        ];

        if ($input) {
            $config += $this->getInputConfigValues($user);
        }

        return $config;
    }

    function getListMax($user)
    {
        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();
        $uc = $manager->getUserConfig($user);
        $limit = $uc->getListMax();

        return $limit;
    }

    function getNaviStartPosition($param_name = 'sp', $force_session = false)
    {
        global $G_INPUT;

        if ($force_session) {
            $session = $this->getSession();
            if ($param_name == 'sp') {
                $start_position = $session->get('current_start_position');
            } else {
                $start_position = $session->get('current_start_position.'
                                                . $param_name);
            }

            if ($start_position == null) {
                $start_position = 0;
            }

            return $start_position;
        }

        // from parameter
        if (array_key_exists($param_name, $G_INPUT)) {
            return (int)$G_INPUT[$param_name];
        }

        // session flag
        if ( ! array_key_exists('sf', $G_INPUT) || ! $G_INPUT['sf']) {
            return 0;
        }

        $session = $this->getSession();
        if ($param_name == 'sp') {
            $start_position = $session->get('current_start_position');
        } else {
            $start_position = $session->get('current_start_position.'
                                            . $param_name);
        }

        if ($start_position == null) {
            $start_position = 0;
        }

        return $start_position;
    }

    function setNaviStartPosition($pos, $param_name = 'sp')
    {
        $session = $this->getSession();
        if ($param_name == 'sp') {
            $session->set('current_start_position', (int)$pos);
        } else {
            $session->set('current_start_position.' . $param_name, (int)$pos);
        }
    }

    /**
     * get start position
     *
     * @param string $param_name
     *
     * @return integer
     */
    function getListOffset($param_name = 'sp')
    {
        if ( ! $this->isCurrentPage()) {
            return $this->getNaviStartPosition($param_name, true);
        }

        $sp = $this->getNaviStartPosition($param_name);
        $this->setNaviStartPosition($sp);

        return $sp;
    }
}


