<?php

class GRN_Schedule_Portlet_Dropdown_Util
{

    /**
     * 施設グループ選択ツリーの中身を作る
     *
     */
    static function makeFacilityGroupsTreeMenu(
        $page_name,
        $selected_id,
        $extra_param = 0
    ) {
        $selected_id = substr($selected_id, 0, 1) == 'f' ? substr($selected_id,
            1) : '';
        if ($extra_param) {
            $selected_id = 'x' . $selected_id;
        }

        $uum = cb_lwc_uum();
        $login = $uum->getLoginUser();

        require_once('schedule/facility_tree.csp');
        $util = GRN_OrgTreeUtil::getInstance();
        require_once('schedule/facility_system_logic.csp');
        $fsl = GRN_Facility_SystemLogic::getInstance();
        require_once('schedule/facility_system_logic.csp');
        $facility_history_manager = GRN_Facility_HistoryManager::getInstance();
        // アクセス権
        $dynamic_roles = $uum->listGrantedRoles();
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        // ページごとのアクセス権を設定
        $access_list = [];
        $access_list_add = [
            'schedule/add',
            'schedule/repeat_add',
            'schedule/mobile/add/facility',
            'schedule/mobile/repeat_add/facility'
        ];
        $access_list_modify = [
            'schedule/modify',
            'schedule/repeat_modify',
            'schedule/mobile/modify/facility',
            'schedule/mobile/repeat_modify/facility'
        ];
        $lax_evaluate = false;
        if (array_search($page_name, $access_list_add) !== false) {
            $access_list[] = 'add';
        } elseif (array_search($page_name, $access_list_modify) !== false) {
            $access_list = ['read', 'add', 'modify'];
            $lax_evaluate = true;
        } else {
            $access_list[] = 'read';
        }

        if ($page_name == 'schedule/portlet/set_user_week/system_ftree'
            || $page_name == 'schedule/portlet/set_group_day/system_ftree'
            || $page_name == 'schedule/portlet/set_personal_day/system'
            || $page_name == 'schedule/portlet/set_personal_week/system'
            || $page_name == 'schedule/portlet/set_personal_month/system'
        ) {
            // ポートレットの設定画面で、運用管理者用画面とシステム設定用画面からの場合は
            // アクセス権を評価しない
            $tree = $util->getTree($page_name, 'GRN_FacilityTree');
        } else {
            $tree = $util->getTree($page_name, 'GRN_FacilityAccessTree',
                $access_list);
            $tree->setLaxEvaluate($lax_evaluate);
        }
        if ( ! $tree->check_init) {
            $tree->initialize();
        }

        // ツリーのどこかの施設グループが選択された場合
        // その施設グループが表示されるところまで、ツリーを展開する
        if ($selected_id && ! $extra_param) {
            $tree->setSelectedNode($selected_id);
        }
        $util->setTree($page_name, $tree);
        $org = $tree->getRoot();

        $mygroups = [];
        if (GRN_Schedule_Portlet_Dropdown_Util::isShowMyGroupOnFacilitySelection($page_name)) {
            $mygroups = $uum->getMyGroupsInfo($login->getOID(), 'facility');
            if (count($mygroups) > 0) {
                foreach ($mygroups as $mygroup) {
                    $mygroup_id = $mygroup['_id'];
                    $mygroup_name = $mygroup['col_name'];

                    $mygroup_options['xm' . $mygroup_id] = [
                        'oid'         => "m$mygroup_id",
                        'name'        => $mygroup_name . cb_msg('grn.grn',
                                'GRN_GRN-813') . cb_msg('grn.grn',
                                'GRN_GRN-814'),
                        'children'    => [],
                        'count'       => 0,
                        'extra_param' => '1'
                    ];
                }
                $mygroups = $mygroup_options;
            }
        }

        //よく使う施設グループを作成
        $oftenused_facility_groups
            = $facility_history_manager->getOftenusedFacilityGroups($login->getOID());
        if (count($oftenused_facility_groups)) {
            $tmp_facilitygroup
                = $fsl->getFacilityGroupsInfo($oftenused_facility_groups);
            $ret_facilitygroup = [];

            foreach ($oftenused_facility_groups as $fgid) {
                $fg = $tmp_facilitygroup[$fgid];
                $access = $acc_logic->evaluateAccessesById($login,
                    [$fg['_id'] => $fg], ['read'], $dynamic_roles,
                    'facilitygroup');
                if ($access) {
                    $key = $fg['_id'];
                    $ret_facilitygroup['x' . $key] = [
                        'oid'         => 'x' . $key,
                        'name'        => cb_plain_msg('grn.schedule',
                            'title_oftenused_facilitygroup',
                            ['name' => $fg['col_name']]),
                        'children'    => [],
                        'count'       => 0,
                        'extra_param' => '1'
                    ];
                }
            }
            $oftenused_facility_groups = $ret_facilitygroup;
            unset($tmp_facilitygroup);
        }

        // 最近選択した施設グループを作成
        $frequent_facility_groups
            = $facility_history_manager->getFacilityGroupHistory($login->getOID());
        if (count($frequent_facility_groups)) {
            $tmp_facilitygroup
                = $fsl->getFacilityGroupsInfo($frequent_facility_groups);
            $ret_facilitygroup = [];

            foreach ($frequent_facility_groups as $fgid) {
                $fg = $tmp_facilitygroup[$fgid];
                $access = $acc_logic->evaluateAccessesById($login,
                    [$fg['_id'] => $fg], ['read'], $dynamic_roles,
                    'facilitygroup');
                if ($access) {
                    $key = $fg['_id'];
                    if (array_key_exists('x' . $key,
                        $oftenused_facility_groups)
                    ) {
                        continue;
                    }
                    $ret_facilitygroup['x' . $key] = [
                        'oid'         => 'x' . $key,
                        'name'        => cb_plain_msg('grn.schedule',
                            'title_frequent_facilitygroup',
                            ['name' => $fg['col_name']]),
                        'children'    => [],
                        'count'       => 0,
                        'extra_param' => '2'
                    ];
                }
            }
            $frequent_facility_groups = $ret_facilitygroup;
            unset($tmp_facilitygroup);
        }

        // 最近選択した施設を作成
        $frequent_facilities = [];
        if (count($facility_history_manager->getFacilityHistory($login->getOID()))) {
            $frequent_facilities['xr'] = [
                'oid'         => 'xr',
                'name'        => cb_plain_msg('grn.schedule',
                    'title_frequent_facility'),
                'children'    => [],
                'count'       => 0,
                'extra_param' => '1'
            ];
        }

        // 全施設を作成
        $all_node = [
            'x' => [
                'oid'         => 'x',
                'name'        => cb_plain_msg('grn.schedule', 'facility_all'),
                'children'    => [],
                'count'       => 0,
                'extra_param' => '1'
            ]
        ];
        require_once('schedule/system_logic.csp');
        $ssl = GRN_Schedule_SystemLogic::getInstance();
        if ($ssl->getAllowAllFacilities()
            && ($page_name != "schedule/portlet/set_user_week/system_ftree"
                && $page_name != "schedule/portlet/set_user_week/personal_ftree"
                && $page_name != "schedule/portlet/set_group_day/system_ftree"
                && $page_name
                   != "schedule/portlet/set_group_day/personal_ftree")
        ) {
            return [
                'org'         => $mygroups + $oftenused_facility_groups
                                 + $frequent_facility_groups
                                 + $frequent_facilities + $all_node + $org,
                'selected_id' => $selected_id,
                'origin_org'  => $org
            ];
        }

        return [
            'org'         => $mygroups + $oftenused_facility_groups
                             + $frequent_facility_groups
                             + $frequent_facilities + $org,
            'selected_id' => $selected_id,
            'origin_org'  => $org
        ];
    }

    /**
     * Whether show My Group on facility selection or not
     *
     * @param string $page_name
     *
     * @return bool
     */
    private static function isShowMyGroupOnFacilitySelection($page_name)
    {
        $list_screen_support_my_group = [
            'schedule/add',
            'schedule/modify',
            'schedule/adjust_search',
            'schedule/repeat_add',
            'schedule/repeat_modify',
            'schedule/portlet/set_personal_day/personal',
            'schedule/portlet/set_personal_month/personal',
            'schedule/portlet/set_personal_week/personal',
            'schedule/ajax_select_user_org_facility_dialog',
            'schedule/mobile/add/facility',
            'schedule/mobile/modify/facility',
            'schedule/mobile/repeat_add/facility',
            'schedule/mobile/repeat_modify/facility',
            'personal/user/mygroup_add',
            'personal/user/mygroup_modify',
            'personal/user/command_mygroup_modify',
        ];

        if (array_search($page_name, $list_screen_support_my_group) !== false) {
            return true;
        }

        return false;
    }

    /**
     * 組織選択ドロップダウンメニューの中身を作る
     *
     */
    public static function makeGroupsDropDownMenu(
        $login,
        &$dynamic_roles,
        &$group_list
    ) {
        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();
        $config = $manager->getUserConfig($login);

        if ($config->getMyGroupPosition() == 'upper') {
            // Myグループを最初に表示
            GRN_Schedule_Portlet_Dropdown_Util::getMyGroupsInfo($login,
                $dynamic_roles, $group_list);
            // よく使う組織
            GRN_Schedule_Portlet_Dropdown_Util::getOftenusedGroupsInfo($login,
                $dynamic_roles, $group_list);
        } else {
            // よく使う組織
            GRN_Schedule_Portlet_Dropdown_Util::getOftenusedGroupsInfo($login,
                $dynamic_roles, $group_list);
            // Myグループを最初に表示
            GRN_Schedule_Portlet_Dropdown_Util::getMyGroupsInfo($login,
                $dynamic_roles, $group_list);
        }

        $primary_group_id
            = GRN_Schedule_Portlet_Dropdown_Util::getPrimaryGroupInfo($login,
            $dynamic_roles, $group_list);
        GRN_Schedule_Portlet_Dropdown_Util::getBelingingGroupsInfo($login,
            $dynamic_roles, $group_list, $primary_group_id);
        GRN_Schedule_Portlet_Dropdown_Util::getFrequentGroupsInfo($login,
            $dynamic_roles, $group_list);
        GRN_Schedule_Portlet_Dropdown_Util::getFrequentUsersInfo($login,
            $dynamic_roles, $group_list);
    }

    /**
     * 最近選択した組織の一覧を追加する
     *
     */
    public static function getFrequentGroupsInfo(
        $login,
        &$dynamic_roles,
        &$group_list
    ) {
        require_once('grn/uum_util.csp');
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        $frequent_groups = $uum->getFrequentGroupsInfo($login->getOID());
        $frequent_groups = $acc_logic->evaluateAccessesById($login,
            $frequent_groups, ['read'], $dynamic_roles, 'group');
        foreach (array_keys($frequent_groups) as $options_group_id) {
            $options_group_name
                = $frequent_groups[$options_group_id]['col_name'];

            $group_list[] = [
                'id'    => $options_group_id,
                'name'  => cb_plain_msg('grn.common', 'title_frequent_group',
                    ['name' => $options_group_name]),
                'extra' => '2'
            ];
        }
    }

    /**
     * よく使う組織の一覧を追加する
     *
     */
    public static function getOftenusedGroupsInfo(
        $login,
        &$dynamic_roles,
        &$group_list
    ) {
        require_once('grn/uum_util.csp');
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        $oftenused_groups = $uum->getOftenusedGroupsInfo($login->getOID());
        $oftenused_groups = $acc_logic->evaluateAccessesById($login,
            $oftenused_groups, ['read'], $dynamic_roles, 'group');
        foreach (array_keys($oftenused_groups) as $options_group_id) {
            $options_group_name
                = $oftenused_groups[$options_group_id]['col_name'];

            $group_list[] = [
                'id'    => $options_group_id,
                'name'  => cb_plain_msg('grn.common', 'title_oftenused_group',
                    ['name' => $options_group_name]),
                'extra' => '1'
            ];
        }
    }

    /**
     * 最近選択したユーザーの項目を追加する
     *
     */
    public static function getFrequentUsersInfo(
        $login,
        &$dynamic_roles,
        &$group_list
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $frequentusers = $uum->getFrequentUsersInfo($login->getOID(), 1);
        if (is_array($frequentusers) && count($frequentusers) > 0) {
            $group_list[] = [
                'id'   => 'r',
                'name' => cb_plain_msg('grn.common', 'title_group_caption', [
                    'caption' => cb_plain_msg('grn.common',
                        'title_frequent_users')
                ])
            ];
        }
    }

    /**
     * MyGroupの一覧を追加する
     *
     */
    public static function getMyGroupsInfo(
        $login,
        &$dynamic_roles,
        &$group_list
    ) {
        $uum = cb_lwc_uum();

        $groups = $uum->getMyGroupsInfo($login->getOID());
        if (is_array($groups)) {
            foreach ($groups as $key => $_group) {
                $group_list[] = [
                    'id'   => 'm' . $key,
                    'name' => cb_plain_msg('grn.common', 'title_my_group',
                        ['name' => $_group['col_name']])
                ];
            }
        }
    }

    /**
     * 優先する組織を追加する
     *
     */
    public static function getPrimaryGroupInfo(
        $login,
        &$dynamic_roles,
        &$group_list
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        $primary_group = $uum->getUserPrimaryGroupInfo($login->getOID(), true);
        if ($primary_group !== false) {
            $access = $acc_logic->evaluateAccessesById($login,
                [$primary_group['_id'] => $primary_group], ['read'],
                $dynamic_roles, 'group');
            if (count($access) > 0) {
                $group_list[] = [
                    'id'   => $primary_group["_id"],
                    'name' => cb_plain_msg('grn.common', 'title_primary_group',
                        ['name' => $primary_group['col_name']])
                ];

                return $primary_group["_id"];
            }
        }

        return '';
    }

    /**
     * 所属する組織の一覧を追加する
     *
     */
    public static function getBelingingGroupsInfo(
        $login,
        &$dynamic_roles,
        &$group_list,
        $primary_group_id
    ) {
        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わない
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $groups = $uum->getUserGroupsInfo($login->getOID(), true);
        if (is_array($groups) && count($groups) > 0) {
            foreach (array_keys($groups) as $key) {
                // 優先する組織と重複するものは登録しない
                if ($key == $primary_group_id) {
                    continue;
                }

                $group_list[] = [
                    'id'   => $key,
                    'name' => cb_plain_msg('grn.common',
                        'title_belonging_group',
                        ['name' => $groups[$key]['col_name']])
                ];
            }
        }
    }
}
