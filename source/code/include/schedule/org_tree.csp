<?php
/**
 *
 * @author      K.Yonekawa
 * @package     grn.schedule
 */

require_once('fw/module.csp');
require_once('schedule/access_logic.csp');

/**
 *
 * @author      K.Yonekawa
 * @package     grn.schedule
 */
class GRN_Schedule_PortletOrgTree extends GRN_OrgTree
{
    function __construct()
    {
        parent::__construct();
    }

    /**
     * 子組織数を取得する。
     *
     * @param  int $oid 親組織ID
     *
     * @return int num of child organization
     */
    function _getChildCount($oid)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();
        $dynamic_roles = $uum->listGrantedRoles();

        $acc_logic = GRN_Schedule_Access_logic::getInstance();
        $groups = $uum->getChildGroupsInfo($oid);

        return count($acc_logic->evaluateAccessesById($user, $groups, ['read'],
            $dynamic_roles, 'group'));
    }

    /**
     * ツリーの子ノードを構築する。
     *
     * @param int  $parent_oid 親ノードID
     * @param bool $expanded
     * @param bool $force
     *
     * @return array|bool 構築した子ノード
     */
    function buildChild($parent_oid, $expanded = false, $force = true)
    {
        return $this->_buildChild($parent_oid, $expanded, $force);
    }

    /**
     * 子組織を取得する。
     *
     * @param   int $oid 親組織ID
     *
     * @return  array 子組織
     */
    function _getChildren($oid)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();
        $dynamic_roles = $uum->listGrantedRoles();

        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        $groups = $uum->getChildGroupsInfo($oid);

        return $acc_logic->evaluateAccessesById($user, $groups, ['read'],
            $dynamic_roles, 'group');
    }
}


