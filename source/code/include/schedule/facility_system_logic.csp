<?php
/**
 *
 * @author      A.Shima     2005/01/11
 * @package     grn.schedule
 */
require_once('schedule/resources.csp');
require_once('schedule/error_code.csp');
require_once('schedule/FacilityFacade.csp');
require_once('grn/application.csp');
require_once('fw/i18n.csp');

class GRN_Facility_SystemLogic extends CB_ModuleBase
{
    /** 組み込み項目コード */
    private $_facility_title_code
        = [
            'title_purpose' => 'title_purpose',
            'title_name'    => 'title_name'
        ];

    private $_facility_group_hierarchy = [];

    private $_cache_facilitygrouprelation = null;

    private $_facility_setting_logic = null;

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct(GRN_FACILITY_MODULE_ID . '.system');
        $this->_facility_group_hierarchy = [];
        $this->_facility_setting_logic
            = new \grn\schedule\FacilitySettingLogic($this);
    }

    /** @var $_instance GRN_Facility_SystemLogic */
    private static $_instance = null;

    /**
     * @return GRN_Facility_SystemLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @return \grn\schedule\FacilitySettingLogic|null
     */
    public function getFacilitySettingLogic()
    {
        return $this->_facility_setting_logic;
    }

    /**
     * @access private
     */
    function _getFacilityTable()
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $table_info = $tm->getTableInfo(GRN_FACILITY_FACILITY);

        return $table_info;
    }

    /**
     * @access private
     */
    function _getFacilityGroupTable()
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $table_info = $tm->getTableInfo(GRN_FACILITY_FACILITYGROUP);

        return $table_info;
    }

    /**
     * @access private
     */
    function _getFacilityGroupRelationTable()
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $table_info = $tm->getTableInfo(GRN_FACILITY_FACILITYGROUPRELATION);

        return $table_info;
    }

    /**
     * @access private
     */
    function _getFacilityLockTable()
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $table_info = $tm->getTableInfo(GRN_FACILITY_FACILITY_FOR_LOCK);

        return $table_info;
    }

    /**
     * @access private
     */
    function _getFacilityItemTable()
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $table_info = $tm->getTableInfo(GRN_FACILITY_ITEM);

        return $table_info;
    }

    /**
     * @access private
     */
    function _getFacilityItemDataRelationTable()
    {
        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $table_info = $tm->getTableInfo(GRN_FACILITY_ITEMDATARELATION);

        return $table_info;
    }

    /**
     * @access private
     * @var CB_DatabaseConnection|null
     */
    private $_db = null;

    /**
     * @access private
     */
    private $_items = [];

    /**
     * カスタマイズ項目存在フラグ
     *
     * @access private
     */
    private $_items_exist = true;

    /**
     * @access private
     */
    private $_datas = [];

    /**
     * @access private
     * @return CB_DatabaseConnection
     */
    function _getDBConnection()
    {
        // 初期化されいなければ初期化
        if (is_null($this->_db)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_db = $app_locator->getConnection('schedule');
        }

        return $this->_db;
    }

    /**
     * 施設の追加
     *
     * @param   \CB_User $user            登録者
     * @param   string   $name            施設名
     * @param   string   $foreign_key     施設コード
     * @param   string   $memo            メモ
     * @param   mixed    $group           施設グループ
     * @param   array    $netmeeting_data V-CUBE連携情報  //--- add VCBSCH0010
     *
     * @return  string      施設ID
     */
    public function addFacilityDefaultOnly(
        $user,
        $name,
        $foreign_key,
        $memo,
        $group,
        $netmeeting_data = null
    ) {
        if (is_null($name) || strlen($name) == 0) {
            cb_throw_error(E_GRN_FCLT_MISSING_FACILITY_NAME);
        }

        if (is_null($foreign_key) || strlen($foreign_key) == 0) {
            cb_throw_error(E_GRN_FCLT_MISSING_FOREIGN_KEY);
        }

        $facility = $this->getFacilityByForeignKey($foreign_key);
        if ($facility !== false) {
            cb_throw_error(E_GRN_FCLT_ALREADY_ENTRY_FACILITY, null,
                ['code' => $foreign_key]);
        }

        $table = $this->_getFacilityTable();
        /**  @var $facility GRN_Facility_Facility */
        $facility = $table->newRow();
        $facility->set('name', $name);
        $facility->set('foreign_key', $foreign_key);
        $facility->set('memo', $memo);

        // システムがV-CUBE連携を利用する場合のみV-CUBEの情報を更新する
        require_once('schedule/netmeeting_system_logic.csp');
        $netmeeting_system_logic = GRN_Netmeeting_SystemLogic::getInstance();
        if ($netmeeting_system_logic->isNetmeetingAvailable()) {
            if (is_array($netmeeting_data))      // 配列にセットされていない場合は、更新しない（CSV取込からきた場合の考慮)
            {
                if (array_key_exists('available', $netmeeting_data)) {
                    $facility->set('netmeeting_available',
                        $netmeeting_data['available']);
                }
                if (array_key_exists('guests_normal_limit', $netmeeting_data)) {
                    $facility->set('netmeeting_guests_normal_limit',
                        (int)$netmeeting_data['guests_normal_limit']);
                }
            }
        }

        if (is_a($group, 'GRN_Facility_FacilityGroup')) {
            $relationtable = $this->_getFacilityGroupRelationTable();
            /** @var $relation CB_Row */
            $relation = $relationtable->newRow();
            $relation->set('facility', $facility);
            $relation->set('group', $group);

            // set modification timestamp
            $this->setLastModifyTime($user, $group);
        }

        $this->_facility_setting_logic->setFacilitySettingByParentGroup($facility->getOID(),
            $group);

        $facility->onCreate($user);

        unset($table);
        $table = $this->_getFacilityLockTable();
        $facility_lock = $table->newRow();
        $facility_lock->set('facility', $facility);

        return $facility->getOID();
    }

    /**
     * 施設の追加
     *
     * @param   \CB_User $inUser            登録者
     * @param   string   $inLocaleNameArray 施設名
     * @param   string   $inForeignKey      施設コード
     * @param   string   $inMemo            メモ
     * @param   mixed    $inFacilitygroupId 施設グループ
     * @param   array    $netmeeting_data   V-CUBE連携情報
     *
     * @return  string      施設ID
     */
    public function addFacility(
        $inUser,
        $inLocaleNameArray,
        $inForeignKey,
        $inMemo,
        $inFacilitygroupId,
        $netmeeting_data = null
    ) {
        //--------------  default facility add -------------
        $group = $this->getFacilityGroup($inFacilitygroupId);

        $facilityId = $this->addFacilityDefaultOnly($inUser,
            $inLocaleNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE], $inForeignKey,
            $inMemo, $group, $netmeeting_data);


        //--------------  facility locale name add -------------
        require_once('schedule/bean/GrnFacilityFacilityLocal.csp');
        $i18n = CB_I18N::getInstance();
        $availableLocaleArray = $i18n->getAvailableLanguages();
        $dao = new FacilityFacade();

        foreach ($availableLocaleArray as $localeKey) {
            if ((array_key_exists($localeKey, $inLocaleNameArray))
                && strlen(cb_trim($inLocaleNameArray[$localeKey])) > 0
            ) {
                $localeName = cb_trim($inLocaleNameArray[$localeKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'facility_locale_add';
                $facilityLocal = new GrnFacilityFacilityLocal();
                $facilityLocal->setParentId($facilityId);
                $facilityLocal->setLanguageCode($localeKey);
                $facilityLocal->setName($localeName);

                $dao->insertFacilityLocal($dataObj, $facilityLocal);
            }
        }

        return $facilityId;
    }

    /**
     * 施設の変更
     *
     * @param   \CB_User $user            変更者
     * @param   string   $fid             施設ID
     * @param   string   $name            施設名
     * @param   string   $foreign_key     施設コード
     * @param   string   $memo            メモ
     * @param   array    $netmeeting_data V-CUBE連携情報
     *
     * @return  boolean
     */
    public function modifyFacilityDefaultOnly(
        $user,
        $fid,
        $name,
        $foreign_key,
        $memo,
        $netmeeting_data = null
    ) {
        $isUseLocal = false;
        $facility = $this->getFacility($fid, $isUseLocal);
        if ($facility === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }

        // 既に登録されているコードが利用されているか
        $temp_facility = $this->getFacilityByForeignKey($foreign_key);
        if ($temp_facility !== false) {
            if ($temp_facility->getOID() != $fid) {
                cb_throw_error(E_GRN_FCLT_ALREADY_ENTRY_FACILITY, null,
                    ['code' => $foreign_key]);
            }
        }

        if (is_null($name) || strlen($name) == 0) {
            cb_throw_error(E_GRN_FCLT_MISSING_FACILITY_NAME);
        }

        if (is_null($foreign_key) || strlen($foreign_key) == 0) {
            cb_throw_error(E_GRN_FCLT_MISSING_FOREIGN_KEY);
        }

        $facility->set('name', $name);
        $facility->set('foreign_key', $foreign_key);
        $facility->set('memo', $memo);

        // システムがV-CUBE連携を利用する場合のみV-CUBEの情報を更新する
        require_once('schedule/netmeeting_system_logic.csp');
        $netmeeting_system_logic = GRN_Netmeeting_SystemLogic::getInstance();
        if ($netmeeting_system_logic->isNetmeetingAvailable()) {
            if (is_array($netmeeting_data))      // 配列にセットされていない場合は、更新しない（CSV取込からきた場合の考慮)
            {
                if (array_key_exists('available', $netmeeting_data)) {
                    $facility->set('netmeeting_available',
                        $netmeeting_data['available']);
                }
                if (array_key_exists('guests_normal_limit', $netmeeting_data)) {
                    $facility->set('netmeeting_guests_normal_limit',
                        (int)$netmeeting_data['guests_normal_limit']);
                }
            }
        }

        $facility->onUpdate($user);

        return true;
    }

    /**
     * 施設の変更
     *
     * @param   \CB_User $inUser            変更者
     * @param   string   $inFacilityId      施設ID
     * @param   string   $inLocaleNameArray 施設名
     * @param   string   $inForeignKey      施設コード
     * @param   string   $inMemo            メモ
     * @param   array    $netmeeting_data   V-CUBE連携情報
     *
     * @return  boolean
     */
    public function modifyFacility(
        $inUser,
        $inFacilityId,
        $inLocaleNameArray,
        $inForeignKey,
        $inMemo,
        $netmeeting_data = null
    ) {
        $this->modifyFacilityDefaultOnly($inUser, $inFacilityId,
            $inLocaleNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE], $inForeignKey,
            $inMemo, $netmeeting_data);
        //--------------  facility locale name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLocaleArray = $i18n->getAvailableLanguages();
        $dao = new FacilityFacade();

        require_once('schedule/bean/GrnFacilityFacilityLocal.csp');
        foreach ($availableLocaleArray as $localeKey) {
            if ((array_key_exists($localeKey, $inLocaleNameArray))
                && strlen(cb_trim($inLocaleNameArray[$localeKey])) > 0
            ) {
                $localeName = cb_trim($inLocaleNameArray[$localeKey]);

                $dataObj = [];
                $facilityLocal = new GrnFacilityFacilityLocal();
                $facilityLocal->setParentId($inFacilityId);
                $facilityLocal->setLanguageCode($localeKey);
                $facilityLocal->setName($localeName);

                $dao->updateFacilityLocal($dataObj, $facilityLocal);
            } else {
                $dataObj = [];
                $facilityLocal = new GrnFacilityFacilityLocal();
                $facilityLocal->setParentId($inFacilityId);
                $facilityLocal->setLanguageCode($localeKey);

                $dao->deleteFacilityLocal($dataObj, $facilityLocal);
            }
        }

        return true;
    }

    /**
     * 施設の移動
     *
     * @param   CB_User $user               変更者
     * @param   string  $facilityId         施設ID
     * @param   string  $dstFacilitygroupId 施設グループID
     *
     * @return bool
     */
    function moveFacility($user, $facilityId, $dstFacilitygroupId = null)
    {
        $isUseLocal = false;
        $facility = $this->getFacility($facilityId, $isUseLocal);

        if ($facility === false) {
            return false;
        }

        $dstGroup = $this->getFacilityGroup($dstFacilitygroupId);
        $srcGroup = $this->getFacilityAffiliationGroup($facilityId);
        $srcFacilitygroupId = ($srcGroup) ? $srcGroup->getOID() : null;

        // 前と同じ場合はなにもしない
        if ($srcFacilitygroupId == $dstFacilitygroupId) {
            return true;
        }

        //以前のグループを削除
        if ($srcGroup !== false) {
            $relationtable = $this->_getFacilityGroupRelationTable();
            $rowset = new CB_RowSet($relationtable);
            $rowset->addCondition($rowset->queryf("col_facility = '@S'",
                $facilityId));
            $relation = $rowset->iterate();
            if ($relation) {
                $relation->delete();
            }
        }

        //新しいグループを登録
        if ($dstGroup !== false) {
            $relationtable = $this->_getFacilityGroupRelationTable();
            $relation = $relationtable->newRow();
            $relation->set('facility', $facility);
            $relation->set('group', $dstGroup);
        }

        // set modification timestamp
        $this->setLastModifyTime($user, $facility);
        $this->setLastModifyTime($user,
            ($srcGroup === false) ? null : $srcGroup);
        $this->setLastModifyTime($user,
            ($dstGroup === false) ? null : $dstGroup);

        if ($this->_facility_setting_logic->isApplyParentGroupSettings($facility->get('settings'))) {
            $this->_facility_setting_logic->setFacilitySettingByParentGroup($facilityId,
                $dstGroup);
        }

        require_once('schedule/inspection.csp');
        $inspection = GRN_Schedule_Inspection::getInstance();

        if ($inspection->isEnabled()) {
            $inspection->record('move', 'facility',
                [
                    'faid'     => $facilityId,
                    'dst_fgid' => $dstFacilitygroupId,
                    'src_fgid' => $srcFacilitygroupId,
                    'name'     => $facility->get('name')
                ]);
        }

        return true;
    }

    /**
     * 施設の削除
     *
     * @param   string $fid 施設ID
     */
    function removeFacility($fid)
    {

        $facility = $this->getFacility($fid);
        if ($facility === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }

        $facility->onDelete();
        $facility->delete();
    }

    /**
     * 施設の取得（オブジェクトバージョン）
     *
     * @param   string $fid 施設ID
     * @param bool     $isUseLocal
     *
     * @return  GRN_Facility_Facility|bool 失敗した場合はFASLE
     */
    public function getFacility($fid, $isUseLocal = true)
    {
        if (empty($fid)) {
            return false;
        }

        $facilityTable = $this->_getFacilityTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilityTable->_lock;
        if ($isUseLocal) {
            $dataObj['language'] = $i18n->getCurrentLanguage();
        }

        $facility = $dao->referFacilityById($dataObj, $fid);

        return ($facility === false)
            ? false
            : $facilityTable->getRow($facility->getId(),
                $facility->convertArray());
    }

    /**
     * 施設の取得
     *
     * @param   string $foreign_key 施設コード
     *
     * @return  GRN_Facility_Facility|bool 失敗した場合はFASLE
     */
    public function getFacilityByForeignKey($foreign_key)
    {
        if (empty($foreign_key)) {
            return false;
        }

        $facilityTable = $this->_getFacilityTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilityTable->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $facility = $dao->referFacilityByForeignKey($dataObj, $foreign_key);

        return ($facility === false)
            ? false
            : $facilityTable->getRow($facility->getId(),
                $facility->convertArray());
    }

    /**
     * 施設の取得(配列バージョン)
     *
     * @param   string $faid
     * @param bool     $isUseLocal
     *
     * @return array|bool
     */
    public function getFacilityInfo($faid, $isUseLocal = true)
    {
        if (empty($faid)) {
            return false;
        }

        $facilityTable = $this->_getFacilityTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilityTable->_lock;
        if ($isUseLocal) {
            $dataObj['language'] = $i18n->getCurrentLanguage();
        }
        $facility = $dao->referFacilityById($dataObj, $faid);

        return ($facility === false) ? false : $facility->convertArray();
    }

    /**
     * @param $eid
     *
     * @return array
     */
    public function getFacilitiesNameByEvent($eid)
    {
        if (empty($eid)) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = CB_DATABASE_NO_LOCK;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $facilitiesData = $dao->referFacilitiesByEventId($dataObj, $eid);
        if ($facilitiesData === false) {
            return [];
        } else {
            $result = [];
            foreach ($facilitiesData as $facility) {
                $result[$facility->getId()] = $facility->getName();
            }

            return $result;
        }
    }

    /**
     * 施設グループの削除
     *
     * @param   string $group_id 施設グループID
     */
    function removeFacilityGroup($group_id)
    {
        $facilitygroup = $this->getFacilityGroup($group_id);
        if ($facilitygroup === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
        }

        $db = $this->_getDBConnection();

        //自分の下にあるツリー全ての施設グループを取得する
        $fgroup_ids = [];
        $tmp_fgroup_ids = [$group_id];
        while (count($tmp_fgroup_ids) > 0) {
            $query
                = 'SELECT _id FROM tab_grn_facility_facilitygroup WHERE col_parent IN ('
                  . implode(',', $tmp_fgroup_ids) . ');';
            $result = $db->query($query);
            $tmp_fgroup_ids = [];
            while ($row = $db->fetch_assoc($result)) {
                $tmp_fgroup_ids[] = $row['_id'];
                $fgroup_ids[$row['_id']] = $row['_id'];
            }
            $db->free_result($result);
        }

        $facility_ids
            = $this->getFacilityIdListByGroupIdList(array_merge($fgroup_ids,
            [$group_id => $group_id]));
        $this->_facility_setting_logic->updateFacilitiesSettingsOnGroupDelete($facility_ids);

        if (count($fgroup_ids) > 0) {
            $query
                = 'DELETE FROM tab_grn_facility_facilitygrouprelation WHERE col_group IN ('
                  . implode(',', $fgroup_ids) . ');';
            $result = $db->query($query);
            if ($result === false) {
                $db->throw_error([
                    'query' => 'failed query on DELETE: ' . $query
                ]);
            }

            $query = 'DELETE FROM tab_grn_facility_facilitygroup WHERE _id IN ('
                     . implode(',', $fgroup_ids) . ');';
            $result = $db->query($query);
            if ($result === false) {
                $db->throw_error([
                    'query' => 'failed query on DELETE: ' . $query
                ]);
            }
        }

        $facilitygroup->onDelete();
        $facilitygroup->delete();
    }

    /**
     * 施設グループの取得（オブジェクトバージョン）
     *
     * @param   string $group_id 施設グループID
     * @param bool     $isUseLocal
     *
     * @return \GRN_Facility_FacilityGroup|bool
     */
    public function getFacilityGroup($group_id, $isUseLocal = true)
    {
        if (empty($group_id)) {
            return false;
        }

        $facilitygroupTable = $this->_getFacilityGroupTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        if ($isUseLocal) {
            $dataObj['language'] = $i18n->getCurrentLanguage();
        }

        $facilitygroup = $dao->referFacilitygroupById($dataObj, $group_id);

        return ($facilitygroup === false)
            ? false
            : $facilitygroupTable->getRow($facilitygroup->getId(),
                $facilitygroup->convertArray());
    }

    /**
     * 施設グループの取得(配列バージョン)
     *
     * @param   string $group_id 施設グループID
     * @param bool     $isUseLocal
     *
     * @return  array|bool
     */
    public function getFacilityGroupInfo($group_id, $isUseLocal = true)
    {
        if (empty($group_id)) {
            return false;
        }

        $facilitygroupTable = $this->_getFacilityGroupTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        if ($isUseLocal) {
            $dataObj['language'] = $i18n->getCurrentLanguage();
        }

        $facilitygroup = $dao->referFacilitygroupById($dataObj, $group_id);

        return ($facilitygroup === false) ? false
            : $facilitygroup->convertArray();
    }

    /**
     * 施設グループの取得 (foreignKey)
     *
     * @param   string $foreign_key 施設グループコード
     *
     * @return  GRN_Facility_FacilityGroup|bool 失敗した場合はFALSE
     */
    public function getFacilityGroupByForeignKey($foreign_key)
    {
        if (empty($foreign_key)) {
            return false;
        }

        $facilitygroupTable = $this->_getFacilityGroupTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $facilitygroup = $dao->referFacilitygroupByForeignKey($dataObj,
            $foreign_key);

        return ($facilitygroup === false)
            ? false
            : $facilitygroupTable->getRow($facilitygroup->getId(),
                $facilitygroup->convertArray());
    }

    /**
     * 施設グループの取得(オブジェクトバージョン)
     *
     * @param   int $offset
     * @param   int $limit
     * @param int   $lock
     *
     * @return  GRN_Facility_FacilityGroup[]
     */
    public function getFacilityGroups(
        $offset = 0,
        $limit = 0,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $facilitygroupTable = $this->_getFacilityGroupTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        if ($limit > 0) {
            $dataObj['offset'] = $offset;
            $dataObj['limit'] = $limit;
        }

        $facilitygroupList = $dao->getFacilitygroupList($dataObj);

        $resultFacilitygroupArray = [];
        foreach ($facilitygroupList as $facilitygroup) {
            $facilitygroupId = $facilitygroup->getId();
            $row
                = $facilitygroupTable->getRow($facilitygroupId,
                $facilitygroup->convertArray());
            $resultFacilitygroupArray[$facilitygroupId] = $row;
        }

        return $resultFacilitygroupArray;
    }

    /**
     * 施設グループの取得(配列バージョン)
     *
     * @param   int $offset
     * @param   int $limit
     * @param int   $lock
     *
     * @return      array
     */
    public function getFacilityGroupsArrayList(
        $offset = 0,
        $limit = 0,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        if ($limit > 0) {
            $dataObj['offset'] = $offset;
            $dataObj['limit'] = $limit;
        }

        $facilitygroupList = $dao->getFacilitygroupList($dataObj);

        $resultFacilitygroupArray = [];
        foreach ($facilitygroupList as $facilitygroup) {
            $facilitygroupId = $facilitygroup->getId();
            $resultFacilitygroupArray[$facilitygroupId]
                = $facilitygroup->convertArray();
        }

        return $resultFacilitygroupArray;
    }

    /**
     * 施設グループの取得
     *
     * @param $group_ids
     *
     * @return array
     */
    public function getFacilityGroupsInfo($group_ids = null)
    {
        $facilitygroupTable = $this->_getFacilityGroupTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        if (is_null($group_ids)) {
            $facilitygroupList = $dao->getFacilitygroupList($dataObj);
        } else {
            if (count($group_ids) == 0) {
                $facilitygroupList = [];
            } else {
                $facilitygroupList = $dao->getFacilitygroupListByIds($dataObj,
                    $group_ids);
            }
        }

        $resultFacilitygroupArray = [];
        foreach ($facilitygroupList as $facilitygroup) {
            $facilitygroupId = $facilitygroup->getId();
            $resultFacilitygroupArray[$facilitygroupId]
                = $facilitygroup->convertArray();
        }

        return $resultFacilitygroupArray;
    }

    /**
     * 施設グループの順番の変更
     *
     * @param $fgids
     *
     * @return  boolean
     */
    function orderFacilityGroup($fgids)
    {
        if ( ! is_array($fgids) || count($fgids) == 0) {
            return false;
        }

        if ($this->_isSameParentFacilityGroup_FacilityGroup($fgids) === false) {
            cb_throw_error(); //順番変更する施設グループに親施設グループが違うものが混ざっている
        }

        $db = $this->_getDBConnection();
        $index = 0;
        foreach ($fgids as $id) {
            $query = cb_queryf($db,
                "UPDATE tab_grn_facility_facilitygroup SET col_list_index = '@S' WHERE _id = '@S';",
                $index, $id);
            $result = $db->query($query);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on UPDATE: ' . $query
                ]);
            }
            $index++;
        }

        return true;
    }

    /**
     * 全ての施設グループの親が同じかどうか確認する
     *
     * @param array $group_ids 施設グループID
     *
     * @return bool if succeeded TRUE otherwise FALSE
     */
    private function _isSameParentFacilityGroup_FacilityGroup($group_ids)
    {
        $facilitygroupList = $this->getFacilityGroupsInfo($group_ids);

        $parent_id = null;
        foreach ($facilitygroupList as $facilitygroup) {
            if ($parent_id === null) {
                $parent_id = $facilitygroup['col_parent'];
            }

            if ($parent_id !== $facilitygroup['col_parent']) {
                return false;
            }
        }

        return true;
    }

    /**
     * 施設グループ内の施設を取得(オブジェクトバージョン)
     *
     * @param   string $group_id
     * @param int      $offset
     * @param int      $limit
     * @param int      $lock
     *
     * @return  GRN_Facility_Facility[]
     */
    public function getGroupFacilities(
        $group_id = null,
        $offset = 0,
        $limit = 0,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $facilityTable = $this->_getFacilityTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        if ($limit > 0) {
            $dataObj['offset'] = $offset;
            $dataObj['limit'] = $limit;
        }

        if (empty($group_id)) {
            $facilityList = $dao->getFacilityList($dataObj);
        } else {
            $facilityList = $dao->getFacilityListByFacilitygroupId($dataObj,
                $group_id);
        }

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $row
                = $facilityTable->getRow($facilityId,
                $facility->convertArray());
            $resultFacilityArray[$facilityId] = $row;
        }

        return $resultFacilityArray;
    }

    /**
     * 施設グループ内の施設を取得(配列バージョン)
     *
     * @param   string $group_id
     * @param int      $lock
     *
     * @return  array
     */
    public function getGroupFacilityArrayList(
        $group_id = null,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $resultFacilityArray = [];

        if (empty($group_id)) // 全施設
        {
            $resultFacilityArray
                = $this->getOrderedFacilityInfoList();         //getGroupFacilityArrayListと全施設の取得並び順が違う。仕様なのか？
        } else {
            $i18n = CB_I18N::getInstance();
            $dao = new FacilityFacade();
            $dataObj = [];
            $dataObj['lock'] = $lock;
            $dataObj['language'] = $i18n->getCurrentLanguage();

            $facilityList = $dao->getFacilityListByFacilitygroupId($dataObj,
                $group_id);

            foreach ($facilityList as $facility) {
                $facilityId = $facility->getId();
                $resultFacilityArray[$facilityId] = $facility->convertArray();
            }
        }

        return $resultFacilityArray;
    }

    /**
     * 施設グループ内の施設を取得(配列バージョン)
     * getGroupFacilityArrayListとの違いは全施設の取得処理のみ
     *
     * @param   string $group_id
     * @param int      $offset
     * @param          $limit
     * @param int      $lock
     *
     * @return  array
     */
    public function getGroupFacilitiesInfo(
        $group_id = null,
        $offset = 0,
        $limit = -1,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        if ($limit > 0) {
            $dataObj['offset'] = $offset;
            $dataObj['limit'] = $limit;
        }

        if (empty($group_id)) {
            $facilityList = $dao->getFacilityList($dataObj);
        } else {
            $facilityList = $dao->getFacilityListByFacilitygroupId($dataObj,
                $group_id);
        }

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $resultFacilityArray[$facilityId] = $facility->convertArray();
        }

        return $resultFacilityArray;
    }

    /**
     * 施設の情報を取得する(オブジェクトバージョン)
     *
     * @param array       $faids
     * @param string|null $locale
     * @param int         $lock_mode
     *
     * @return CB_Row[]
     */
    public function getFacilityListByIds(
        array $faids,
        $locale = null,
        $lock_mode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if (count($faids) == 0) {
            return [];
        }

        $facilityTable = $this->_getFacilityTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock_mode;
        $dataObj['language'] = $locale ?? $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;

        $facilityList = $dao->getFacilityListByIds($dataObj, $faids);

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $row
                = $facilityTable->getRow($facilityId,
                $facility->convertArray());
            $resultFacilityArray[$facilityId] = $row;
        }

        return $resultFacilityArray;
    }

    /**
     * 複数の施設の情報を取得する（配列バージョン）
     *
     * @param   array $faids
     * @param         $lockmode
     * @param   array $options
     *
     * @return  array
     */
    public function getFacilitiesInfo(
        $faids,
        $lockmode = CB_DATABASE_DEFAULT_LOCK,
        $options = []
    ) {
        if (count($faids) == 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;


        $facilityArrayList = $dao->getFacilityArrayListByIds($dataObj, $faids);

        $resultFacilityArray = [];
        foreach ($facilityArrayList as $facilityArray) {
            $facilityId = $facilityArray['_id'];
            $resultFacilityArray[$facilityId] = $facilityArray;
        }

        if (isset($options['order_by_ids'])) {
            $resultFacilityArrayOrder = [];
            foreach ($faids as $value) {
                if (isset($resultFacilityArray[$value])) {
                    $resultFacilityArrayOrder[$value]
                        = $resultFacilityArray[$value];
                }
            }
            $resultFacilityArray = $resultFacilityArrayOrder;
        }

        return $resultFacilityArray;
    }

    /**
     * Get Facility by foreign keys
     *
     * @param   array   $foreign_keys list facility foreign key
     * @param   integer $lock_mode    DB lock mode
     *
     * @return  array facility list
     */
    public function getFacilitiesByForeignKeys(array $foreign_keys, int $lock_mode = CB_DATABASE_DEFAULT_LOCK)
    {
        if ( ! is_array($foreign_keys) || ! $foreign_keys) {
            return [];
        }
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $data_obj = [];
        $data_obj['lock'] = $lock_mode;
        $data_obj['language'] = $i18n->getCurrentLanguage();
        $data_obj['offset'] = 0;
        $data_obj['limit'] = -1;
        $facilities = $dao->getFacilitiesByForeignKeys($data_obj, $foreign_keys);

        return $facilities;
    }

    /**
     * @param array $facility facility data from database
     *
     * @return  GRN_Facility_Facility facility object
     */
    public function toGrnFacility($facility)
    {
        $facility_id = $facility['_id'];
        $facilityTable = $this->_getFacilityTable();

        return $facilityTable->getRow($facility_id, $facility);
    }

    /**
     * 複数の施設の情報を取得する(部分情報のみ:Covering indexを使いたいため)（配列バージョン）
     *
     * @param   string $faids
     * @param          $lockmode
     *
     * @return  array
     */
    private function _getFacilityPartInfoListByIds(
        $faids,
        $lockmode = CB_DATABASE_DEFAULT_LOCK
    ) {
        if (count($faids) == 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;
        $dataObj['isPart'] = true;


        $facilityArrayList = $dao->getFacilityArrayListByIds($dataObj, $faids);

        $resultFacilityArray = [];
        foreach ($facilityArrayList as $facilityArray) {
            $facilityId = $facilityArray['_id'];
            $resultFacilityArray[$facilityId] = $facilityArray;
        }

        return $resultFacilityArray;
    }

    /**
     * @param $facility_ids
     * @param $lockmode
     *
     * @return array
     */
    public function getFacilityAndFacilitygroupIdListPartInfoByIds(
        $facility_ids,
        $lockmode = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['offset'] = 0;
        $dataObj['limit'] = -1;

        $facilityList = $dao->getFacilityAndFacilitygroupIdListByIds($dataObj,
            $facility_ids);

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();

            $facilityView = [];
            $facilityView['_id'] = $facilityId;
            $facilityView['col_name'] = $facility->getName();
            $facilityView['col_foreign_key'] = $facility->getForeignKey();
            $facilityView['col_mtime'] = $facility->getMtime();
            $facilityView['col_list_index'] = $facility->getListIndex();
            $facilityView['col_group'] = $facility->getFacilitygroupId();
            // GRN35-317
            $facilityView['col_memo'] = $facility->getMemo();
            // GRN35-317

            $resultFacilityArray[$facilityId] = $facilityView;
        }

        return $resultFacilityArray;
    }

    /**
     * 施設の数を取得する関数
     *
     * @return  int
     */
    function getFacilityTotalCount()
    {
        $db = $this->_getDBConnection();

        $query = 'SELECT COUNT(*) FROM tab_grn_facility_facility';
        $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $row = $db->fetch_assoc($result);

        // 結果の開放
        $db->free_result($result);

        return $row['COUNT(*)'];
    }

    /**
     * 施設グループの施設の数を取得する関数
     *
     * @param   string $fagid 施設グループのID
     *
     * @return  int
     */
    function getFacilitiesCount($fagid)
    {
        $db = $this->_getDBConnection();

        if ($fagid == -1)// グループに未所属の施設の数を返す
        {
            $query
                = 'SELECT COUNT(f._id) AS c FROM tab_grn_facility_facility AS f WHERE f._id NOT IN '
                  . '(SELECT r.col_facility FROM tab_grn_facility_facilitygrouprelation as r);';

            $result = $db->query($query);
            $row = $db->fetch_assoc($result);
            $retval = $row['c'];

            $db->free_result($result);

            return $retval;
        }

        $table = $this->_getFacilityGroupRelationTable();
        $rowset = new CB_RowSet($table);
        $fagid = $db->escape($fagid);

        $rowset->addCondition($rowset->queryf("col_group = '@S'", $fagid));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);

        $row = $rowset->iterate();
        $rowset->destroy();

        return $row['count'];
    }

    /**
     * 施設グループの数を取得する関数
     *
     * @return  int
     */
    function getFacilityGroupTotalCount()
    {
        $db = $this->_getDBConnection();

        $query = 'SELECT COUNT(*) FROM tab_grn_facility_facilitygroup';
        $query = $db->select_format($query);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $row = $db->fetch_assoc($result);

        // 結果の開放
        $db->free_result($result);

        return $row['COUNT(*)'];
    }

    /**
     * 施設の施設グループの取得
     *
     * @param   string $fid
     *
     * @return  GRN_Facility_FacilityGroup|bool
     */
    public function getFacilityAffiliationGroup($fid)
    {
        $facilitygroupTable = $this->_getFacilitygroupTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $facilitygroup = $dao->referFacilitygroupByFacilityId($dataObj, $fid);

        return ($facilitygroup === false)
            ? false
            : $facilitygroupTable->getRow($facilitygroup->getId(),
                $facilitygroup->convertArray());
    }

    /**
     * 施設の施設グループの取得(複数)
     *
     * @param   array $fids
     *
     * @return  GRN_Facility_FacilityGroup[] $resultFacilitygroupArray    keyが施設IDなので注意
     */
    public function getFacilityAffiliationGroupList($fids)
    {
        $facilitygroupTable = $this->_getFacilitygroupTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $facilitygroupArrayList
            = $dao->getFacilitygroupArrayListByFacilityIds($dataObj, $fids);

        $resultFacilitygroupArray = [];
        foreach ($facilitygroupArrayList as $facilitygroup) {
            $facilityId = $facilitygroup['facility_id'];
            $resultFacilitygroupArray[$facilityId]
                = $facilitygroupTable->getRow($facilitygroup['_id'],
                $facilitygroup);
        }

        return $resultFacilitygroupArray;
    }

    /**
     * 施設の順番変更
     */
    function orderGroupFacilities($user, $fids, $group_id = null)
    {
        if ( ! is_array($fids) || count($fids) == 0) {
            return false;
        }

        $index = 0;
        // 全施設か、施設グループに未所属の施設の場合
        if (is_null($group_id) || mb_strlen($group_id) == 0
            || $group_id == '0'
        ) {
            $ftable = $this->_getFacilityTable();
            foreach ($fids as $fid) {
                $row = $ftable->getRow($fid);
                if ( ! $row) {
                    continue;
                }

                $row->set('list_index', $index);
                $row->updateNow();

                // set modification timestamp
                $this->setLastModifyTime($user, $row);

                $index++;
            }
        } else {
            // グループがあるかどうかのチェック
            $group = $this->getFacilityGroup($group_id);
            if ($group === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
            }

            // set modification timestamp for facility group
            $this->setLastModifyTime($user, $group);

            $facilities = $this->getGroupFacilities($group_id);
            $ftable = $this->_getFacilityTable();
            $rtable = $this->_getFacilityGroupRelationTable();

            foreach ($fids as $fid) {
                // グループ内に存在している
                if (array_key_exists($fid, $facilities)) {
                    // set modification timestamp for facilities
                    if ($frow = $ftable->getRow($fid)) {
                        $this->setLastModifyTime($user, $frow);
                    }

                    $rowset = new CB_RowSet($rtable);
                    $rowset->addCondition($rowset->queryf("col_group = '@S' AND col_facility = '@S'",
                        $group_id, $fid));
                    $row = $rowset->iterate();
                    $row->set('facility_list', $index);
                    $row->updateNow();

                    $index++;
                }
            }
        }

        return true;
    }

    /**
     * 施設のCSVの書き出し
     *
     * @param CB_CSVWriter $writer
     */
    function exportFacilitiesToCSV($writer)
    {
        $table = $this->_getFacilityTable();

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $table->_lock;

        $facilityList = $dao->getFacilityList($dataObj);

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $resultFacilityArray[$facilityId] = $facility->convertArray();

            $line = [];

            $line[] = $facility->getName();
            $line[] = $facility->getForeignKey();
            $group = $this->getFacilityAffiliationGroup($facilityId);
            if ($group === false) {
                $line[] = '';
            } else {
                $line[] = $group->get('foreign_key');
            }
            $line[] = $facility->getMemo();

            $writer->writeLine($line);
        }
    }

    /**
     * @param $inCharset
     * @param $inIsExportHeader
     * @param $inExportLanguageCodeArray
     *
     * @return string
     */
    function createFacilityNameCSV(
        $inCharset,
        $inIsExportHeader,
        $inExportLanguageCodeArray = null
    ) {
        /// テンポラリのファイルを作成
        $tempdir = cb_tmpdir();
        $tempFilename = tempnam($tempdir, 'sc_');
        require_once('fw/csv.csp');
        $csv = new CB_CSVWriter($inCharset, $tempFilename);

        // 項目名の書き出し
        if ($inIsExportHeader) {
            $header = [];
            $header[] = cb_msg('grn.schedule.system', 'facility_csv_code');
            $header[] = cb_msg('grn.schedule.system',
                'facility_csv_language_code');
            $header[] = cb_msg('grn.schedule.system', 'facility_csv_name');

            $csv->writeLine($header);
        }

        // 内容の書き出し
        require_once('schedule/inspection.csp');
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['isLog'] = true;
        $dataObj['messageType'] = 'facility_local_export';

        $facilityLocalList = $dao->getFacilityLocalListByLanguageCodes($dataObj,
            $inExportLanguageCodeArray);

        foreach ($facilityLocalList as $facilityLocal) {
            $line = [];
            $line[0] = $facilityLocal->getParentCode();
            $line[1] = $facilityLocal->getLanguageCode();
            $line[2] = $facilityLocal->getName();
            $csv->writeLine($line);
        }

        $csv->close();

        return $tempFilename;
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string $inFilePath      //CSV FilePath
     * @param  string $inCharset       //read charset
     * @param  int    $inSkipLineCount //read charset
     *
     * @return boolean  success:TRUE
     */
    public function importFacilityNameWithCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0
    ) {
        if ( ! $inCharset) {
            global $G_config_common;
            $inCharset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // 先頭行をスキップ
        for ($i = 0; $i < $inSkipLineCount; ++$i) {
            $csv->readLine();
        }

        require_once('schedule/bean/GrnFacilityFacilityLocal.csp');
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['messageTypeAdd'] = 'facility_local_add_import';
        $dataObj['messageTypeModify'] = 'facility_local_modify_import';
        $dataObj['messageTypeDelete'] = 'facility_local_delete_import';

        $i18n = CB_I18N::getInstance();
        $facilityTable = $this->_getFacilityTable();
        $facilityDataObj = [];
        $facilityDataObj['lock'] = $facilityTable->_lock;
        $facilityDataObj['language'] = $i18n->getCurrentLanguage();
        $availableLanguageArray = $i18n->getAvailableLanguages();
        $csv_columns = [
            'facility_code',       // 施設コード
            'language_code',       // 言語コード
            'facility_name',       // 施設名
        ];
        $csv_columns_num = count($csv_columns);

        while (($line = $csv->readLine()) !== false) {
            //カテゴリコードからカテゴリIDを求める
            if (is_null($line[0]) || (strlen($line[0]) <= 0)) {
                continue;
            }
            $facility = $dao->referFacilityByForeignKey($facilityDataObj,
                $line[0]);
            if ($facility === false) {
                continue;
            }

            if (count($line) != $csv_columns_num) {
                cb_throw_error(E_GRN_SCHD_CSV_INVALID_COLUMNS);
            }
            if ( ! in_array($line[1], $availableLanguageArray)) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }
            //インポートデータの取り込み
            $facilityLocal = new GrnFacilityFacilityLocal();
            $facilityLocal->setParentId($facility->getId());
            $facilityLocal->setLanguageCode($line[1]);
            $facilityLocal->setName(cb_trim($line[2]));

            if (is_null($facilityLocal->getName())
                || (strlen($facilityLocal->getName()) <= 0)
            ) {
                $dao->deleteFacilityLocal($dataObj, $facilityLocal);
            } else {
                $dao->updateFacilityLocal($dataObj, $facilityLocal);
            }
        }

        $csv->close();

        return true;
    }

    /**
     * 施設の予約の期間の取得
     *
     * @return string
     */
    function getFacilityAdvance()
    {
        return $this->_facility_setting_logic->getFacilityAdvance();
    }

    /**
     * 施設の予約の最大時間の取得
     *
     * @return string
     */
    function getFacilityMaxTime()
    {
        return $this->_facility_setting_logic->getFacilityMaxTime();
    }

    /**
     * 施設のタイトルの取得
     *
     * @return string
     */
    function getFacilityTitle()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_TITLE, $value);
        if ( ! $ret) {
            $value = 'purpose';
        }

        return $value;
    }

    /**
     * 組み込み項目を項目単位で取得
     *
     * @return array
     */
    function getFacilityTitleEach()
    {
        $showtitle = $this->getFacilityTitle();
        $title_purpose = 1;
        $title_name = 0;

        if ($showtitle == 'none') {
            $title_purpose = 0;
            $title_name = 0;
        } elseif ($showtitle == 'name') {
            $title_purpose = 0;
            $title_name = 1;
        } elseif ($showtitle == 'both') {
            $title_purpose = 1;
            $title_name = 1;
        }

        return [$title_purpose, $title_name];
    }

    /**
     * 組み込み項目（施設のタイトル）取得
     *
     * @param string $biid 組み込み項目ID
     *
     * @return array $item_for_view
     */
    function getFacilityTitleItem($biid)
    {
        // 組み込み項目コードを取得する
        $facility_title_code = $this->getFacilityTitleCode();

        list($title_purpose, $title_name) = $this->getFacilityTitleEach();

        $item_for_view = [
            'id'                => '',
            'type'              => 'string',
            'use'               => 1,
            'display_item_name' => 0
        ];

        if ($biid == 'title_purpose') {
            $item_for_view['id'] = $facility_title_code['title_purpose'];
            $item_for_view['display_name'] = cb_msg('grn.schedule',
                'title_purpose');
            $item_for_view['display'] = $title_purpose;
        } elseif ($biid == 'title_name') {
            $item_for_view['id'] = $facility_title_code['title_name'];
            $item_for_view['display_name'] = cb_msg('grn.schedule',
                'title_name');
            $item_for_view['display'] = $title_name;
        } else {
            cb_throw_error(E_GRN_FCLT_BUILTIN_ITEM_NOT_FOUND);
        }

        return $item_for_view;
    }

    /**
     * 施設のタイトルの設定
     *
     * @param $title
     *
     * @return  boolean   成功した場合はTRUE、それ以外はFALSE
     */
    private function _setFacilityTitle($title)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_FACILITY_TITLE,
            $title);
    }

    /**
     * 組み込み項目を項目単位で設定
     *
     * @param string $title_purpose
     * @param string $title_name
     *
     * @return boolean
     */
    function setFacilityTitleEach($title_purpose, $title_name)
    {
        if ($title_purpose == 0 && $title_name == 0) {
            $showtitle = 'none';
        } elseif ($title_purpose == 0 && $title_name == 1) {
            $showtitle = 'name';
        } elseif ($title_purpose == 1 && $title_name == 0) {
            $showtitle = 'purpose';
        } elseif ($title_purpose == 1 && $title_name == 1) {
            $showtitle = 'both';
        } else {
            return false;
        }

        $this->_setFacilityTitle($showtitle);

        // 監査
        require_once('schedule/inspection.csp');
        $inspection = GRN_Schedule_Inspection::getInstance();

        if ($inspection->isEnabled()) {
            $inspection->record('config', 'facility_item',
                [
                    'biid'    => 'title_purpose',
                    'display' => $title_purpose
                ]
            );
            $inspection->record('config', 'facility_item',
                [
                    'biid'    => 'title_name',
                    'display' => $title_name
                ]
            );
        }

        return true;
    }

    /**
     * 繰り返しの登録の可否
     *
     * @return string
     */
    function getFacilityRepeat()
    {
        return $this->_facility_setting_logic->getFacilityRepeat();
    }

    /**
     * Get flag inherit from parent
     *
     * @return string
     */
    function getFacilityInheritParent()
    {
        return $this->_facility_setting_logic->getFacilityInheritParent();
    }

    function getSettingsOfFacilities($facilityIds, $listSettingName)
    {
        $ret = [];

        if ( ! is_array($facilityIds) || count($facilityIds) <= 0) {
            return $ret;
        }

        foreach ($listSettingName as $settingName) {
            switch ($settingName) {
                case 'regulary':
                    $globalRegulary = $this->getFacilityRepeat();
                    break;
                case 'approval':
                    $globalApproval = $this->getFacilityApproval();
                    break;
            }
        }

        $facilitySettings = $this->getFacilitySetting($facilityIds);
        $facilityGroups
            = $this->getFacilityAffiliationGroupList($facilityIds);

        foreach ($facilityIds as $facilityId) {
            // 施設の設定を確認
            $setting = $facilitySettings[$facilityId];
            $unserializeSettings = [];
            if (strlen($setting) > 0) {
                $unserializeSettings = cb_unserialize($setting,
                    ['allowed_classes' => false]);
            }
            if (is_array($unserializeSettings)
                && count($unserializeSettings) > 0
            ) {
                $applyFromParent = array_key_exists('apply_from_parent',
                    $unserializeSettings)
                    ? $unserializeSettings['apply_from_parent'] : '0';
                if ( ! $applyFromParent) {
                    foreach ($listSettingName as $settingName) {
                        $ret[$facilityId][$settingName]
                            = array_key_exists($settingName,
                            $unserializeSettings)
                            ? $unserializeSettings[$settingName] : '0';
                    }
                    continue;
                }
            }

            // 施設グループの設定を確認
            $facilityGroup = array_key_exists($facilityId, $facilityGroups)
                ? $facilityGroups[$facilityId] : false;
            while ($facilityGroup) {
                $setting = $facilityGroup->get('settings');
                $unserializeSettings = [];
                if (strlen($setting) > 0) {
                    $unserializeSettings = cb_unserialize($setting,
                        ['allowed_classes' => false]);
                }
                if (is_array($unserializeSettings)
                    && count($unserializeSettings) > 0
                ) {
                    $applyFromParent = array_key_exists('apply_from_parent',
                        $unserializeSettings)
                        ? $unserializeSettings['apply_from_parent'] : '0';
                    if ( ! $applyFromParent) {
                        foreach ($listSettingName as $settingName) {
                            $ret[$facilityId][$settingName]
                                = array_key_exists($settingName,
                                $unserializeSettings)
                                ? $unserializeSettings[$settingName] : '0';
                        }
                        continue 2;
                    }
                }
                $facilityGroup = $facilityGroup->get('parent');
            }

            foreach ($listSettingName as $settingName) {
                $globalSetting = '0';
                switch ($settingName) {
                    case 'regulary':
                        $globalSetting = $globalRegulary;
                        break;
                    case 'approval':
                        $globalSetting = $globalApproval;
                        break;
                }

                if ( ! $globalSetting) {
                    $ret[$facilityId][$settingName] = 0;
                    continue;
                }
                $ret[$facilityId][$settingName] = 1;
            }
        }

        return $ret;
    }

    /**
     * Get approval setting of facilities by facility list.
     *
     * Note: By fixing GRB-16937 and GRB-16940, the setting of 'approval' can be gotten ignoring parent group setting.
     *
     * Defining the return value.
     * array[$faciltyId] array
     *          ['approval'] string approval setting value ('0' or '1')
     *
     * @param array $faclities
     *
     * @return array $ret
     */
    public function getApprovalSettingsOfFacilitiesByList(array $faclities)
    {
        $ret = [];
        $globalSetting = $this->getFacilityApproval();

        foreach ($faclities as $id => $faclity) {
            $setting = $faclity['col_settings'];
            if (empty($setting)) {
                // when facility reservation settings was initialized
                $ret[$id] = ['approval' => $globalSetting];
                continue;
            }

            $unserializeSettings = cb_unserialize($setting,
                ['allowed_classes' => false]);

            if ( ! is_array($unserializeSettings)
                 || ! array_key_exists('approval', $unserializeSettings)
            ) {
                // initial state when Garoon has been upgraded
                $ret[$id] = ['approval' => $globalSetting];
                continue;
            }

            $ret[$id] = ['approval' => $unserializeSettings['approval']];
        }

        return $ret;
    }


    /**
     * Get approval setting of facilities by facility ids.
     *
     * @see getApprovalSettingsOfFacilitiesByList
     *
     * @param array $facilityIds
     *
     * @return array $ret
     */
    public function getApprovalSettingsOfFacilities(array $facilityIds)
    {
        $facilities = $this->getFacilitiesInfo($facilityIds);

        return $this->getApprovalSettingsOfFacilitiesByList($facilities);
    }

    /**
     * 施設予約で予定を変更できるユーザー
     *
     * @return string
     */
    function getFacilityModifyUser()
    {
        return $this->_facility_setting_logic->getFacilityModifyUser();
    }

    /**
     * 施設でメモを表示するかの可否
     *
     * @return string
     */
    function getFacilityShowMemo()
    {
        return $this->_facility_setting_logic->getFacilityShowMemo();
    }

    /**
     * 施設の予約可能な最大時間をチェックする
     *
     * @param GRN_Facility_Facility[] $obj_facilities
     * @param CB_DateTime             $datetime    チェックする日時
     * @param CB_DateTime             $setdatetime 基準日時
     *
     * @return  boolean        よい場合はTRUE、超えている場合はエラーがスローされる
     */
    function checkFacilityMaxTime(
        $obj_facilities,
        $datetime,
        $setdatetime = null
    ) {
        if ( ! is_array($obj_facilities) && count($obj_facilities) === 0) {
            return true;
        }
        $over_max_time = false;
        foreach (array_keys($obj_facilities) as $key) {
            if (is_null($setdatetime)) {
                $ts = new CB_TimeStamp();
                $ts->unix_ts = time();
                $tsex = new CB_TimeStampEx($ts);
                $setdatetime = $tsex->getDateTime();
            }
            /** @var GRN_Facility_Facility $object */
            $object = $obj_facilities[$key];
            $faid = $object->getOID();
            $f_settings = $this->getFacilitySetting([$faid]);
            if (is_array($f_settings) && array_key_exists($faid, $f_settings)
                && strlen($f_settings[$faid]) > 0
            ) {
                $unserialize_settings = cb_unserialize($f_settings[$faid],
                    ['allowed_classes' => false]);
                if (is_array($unserialize_settings)
                    && count($unserialize_settings) > 0
                ) {
                    $max_time = array_key_exists('maxtime',
                        $unserialize_settings)
                        ? intval($unserialize_settings['maxtime']) : 0;
                }
            } else {
                // get facility setting in group
                $g_settings = $this->getGroupFacilitySetting($faid);
                if (array_key_exists($faid, $g_settings)
                    && strlen($g_settings[$faid]) > 0
                ) {
                    $unserialize_settings = cb_unserialize($g_settings[$faid],
                        ['allowed_classes' => false]);
                    if (is_array($unserialize_settings)
                        && count($unserialize_settings) > 0
                    ) {
                        $max_time = array_key_exists('maxtime',
                            $unserialize_settings)
                            ? intval($unserialize_settings['maxtime']) : 0;
                    }
                } else {
                    $max_time = intval($this->getFacilityMaxTime());
                }
            }
            if ($max_time == 0) {
                continue;
            }

            $datetimeEx = new CB_DateTimeEx($setdatetime);
            $datetimeEx->moveMinutes($max_time);

            if ($datetimeEx->compare($datetime) < 0) {
                $over_max_time = true;
                $facilities_over_max_time[] = $object->get('name') . ': '
                                              . $max_time
                                              . cb_msg('grn.schedule',
                        'minutes');
            }
        }
        if ($over_max_time) {
            $facilities_string = implode("; ", $facilities_over_max_time);
            cb_throw_error(E_GRN_FCLT_FACILITY_MAX_TIME, null,
                ['facilities_string' => $facilities_string]);
        }

        return true;
    }

    /**
     * 施設の予約期限をチェックする
     *
     * @param \GRN_Facility_Facility[] $obj_facilities
     * @param \CB_DateTime             $date    チェックする日付
     * @param \CB_DateTime             $setdate 基準日
     *
     * @return  boolean     よい場合はTRUE、超えている場合はエラーがスローされる
     */
    function checkFacilityLimit($obj_facilities, $date, $setdate = null)
    {
        if ( ! is_array($obj_facilities) && count($obj_facilities) === 0) {
            return true;
        }
        $over_limit_time = false;
        foreach (array_keys($obj_facilities) as $key) {
            if (is_null($setdate)) {
                $ts = new CB_TimeStamp();
                $ts->unix_ts = time();
                $tsex = new CB_TimeStampEx($ts);
                $setdate = $tsex->getDate();
            }
            $object = $obj_facilities[$key];
            $faid = $object->getOID();
            $f_settings = $this->getFacilitySetting([$faid]);
            if (is_array($f_settings) && array_key_exists($faid, $f_settings)
                && strlen($f_settings[$faid]) > 0
            ) {
                $unserialize_settings = cb_unserialize($f_settings[$faid],
                    ['allowed_classes' => false]);
                if (is_array($unserialize_settings)
                    && count($unserialize_settings) > 0
                ) {
                    $limit = array_key_exists('advance', $unserialize_settings)
                        ? intval($unserialize_settings['advance']) : 0;
                }
            } else {
                // get facility setting in group
                $g_settings = $this->getGroupFacilitySetting($faid);
                if (array_key_exists($faid, $g_settings)
                    && strlen($g_settings[$faid]) > 0
                ) {
                    $unserialize_settings = cb_unserialize($g_settings[$faid],
                        ['allowed_classes' => false]);
                    if (is_array($unserialize_settings)
                        && count($unserialize_settings) > 0
                    ) {
                        $limit = array_key_exists('advance',
                            $unserialize_settings)
                            ? intval($unserialize_settings['advance']) : 0;
                    }
                } else {
                    $limit = intval($this->getFacilityAdvance());
                }
            }
            if ($limit == 0) {
                continue;
            }

            $dateex = new CB_DateEx($setdate);
            $dateex->moveMonths($limit);

            if ($dateex->compare($date) < 0) {
                $over_limit_time = true;
                $facilities_over_limit_time[] = $object->get('name') . ': '
                                                . cb_date_format('DateFull_YMDW',
                        $dateex);
            }
        }

        if ($over_limit_time) {
            $facilities_string = implode("; ", $facilities_over_limit_time);
            cb_throw_error(E_GRN_FCLT_FACILITY_LIMIT, null,
                ['limit' => $facilities_string]);
        }

        return true;
    }

    /**
     * @param \GRN_Facility_Facility[] $obj_facilities
     *
     * @return bool
     */
    function checkFacilityRepeat($obj_facilities)
    {
        if ( ! is_array($obj_facilities) && count($obj_facilities) === 0) {
            return true;
        }
        $no_repeat = false;
        foreach (array_keys($obj_facilities) as $key) {
            $object = $obj_facilities[$key];
            $faid = $object->getOID();
            $f_settings = $this->getFacilitySetting([$faid]);
            if (is_array($f_settings) && array_key_exists($faid, $f_settings)
                && strlen($f_settings[$faid]) > 0
            ) {
                $unserialize_settings = cb_unserialize($f_settings[$faid],
                    ['allowed_classes' => false]);
                if (is_array($unserialize_settings)
                    && count($unserialize_settings) > 0
                ) {
                    $facility_repeat = array_key_exists('regulary',
                        $unserialize_settings)
                        ? $unserialize_settings['regulary'] : '0';
                }
            } else {
                // get facility setting in group
                $g_settings = $this->getGroupFacilitySetting($faid);
                if (array_key_exists($faid, $g_settings)
                    && strlen($g_settings[$faid]) > 0
                ) {
                    $unserialize_settings = cb_unserialize($g_settings[$faid],
                        ['allowed_classes' => false]);
                    if (is_array($unserialize_settings)
                        && count($unserialize_settings) > 0
                    ) {
                        $facility_repeat = array_key_exists('regulary',
                            $unserialize_settings)
                            ? $unserialize_settings['regulary'] : '0';
                    }
                } else {
                    $facility_repeat = $this->getFacilityRepeat();
                }
            }

            if ( ! $facility_repeat) {
                $no_repeat = true;
                $facilities_no_repeat[] = $object->get('name');
            }
        }

        if ($no_repeat) {
            $facilities_string = implode("; ", $facilities_no_repeat);
            cb_throw_error(E_GRN_FCLT_FACILITY_REPEAT, null,
                ['facility' => $facilities_string]);
        }

        return true;
    }

    /**
     * 施設の場合の予約のタイトル
     *
     * @param   string $title
     * @param   string $creator_name
     * @param   int    $private
     * @param   string $type 固定（purpose, name, both, none)
     *
     * @return  string
     */
    function getEventTitle($title, $creator_name, $private, $type = 'purpose')
    {
        $str_title = '';
        if ($private == GRN_EVENT_PRIVATE_HIDDEN) {
            $str_title = cb_msg('grn.schedule', 'facility_title_private',
                [
                    'creator' => htmlspecialchars($creator_name),
                    'private' => cb_msg('grn.schedule', 'event_hidden')
                ]);
        } elseif ($type == 'purpose') {
            $str_title = cb_msg('grn.schedule', 'facility_title_purpose',
                ['title' => $title]);
        } elseif ($type == 'name') {
            $str_title = cb_msg('grn.schedule', 'facility_title_name',
                ['creator' => htmlspecialchars($creator_name)]);
        } elseif ($type == 'both') {
            $str_title = cb_msg('grn.schedule', 'facility_title_purpose',
                ['title' => $title]);
            $str_title .= cb_msg('grn.schedule', 'facility_title_name',
                ['creator' => htmlspecialchars($creator_name)]);
        }

        return html_entity_decode($str_title);
    }

    //GRN2-8218
    function getEventTitleByType(&$tmp_event, $type = 'purpose', $create_name)
    {
        switch ($type) {
            case 'purpose':
                break;
            case 'name':
                $tmp_event['event_menu'] = '';
                $tmp_event['event_menu_color'] = '';
                $tmp_event['event_facility_name'] = '';
                break;
            case 'both':
                $tmp_event['creator_name'] = cb_msg('grn.schedule',
                    'facility_title_name',
                    ['creator' => $create_name]);//htmlspecialchars()
                break;
            default:
                $tmp_event['event_detail'] = '';
                $tmp_event['event_menu'] = '';
                $tmp_event['event_menu_color'] = '';
                $tmp_event['event_facility_name'] = '';
        }
    }

    /**
     * 全施設を検索する
     *
     * @param   string $keyword
     * @param int      $lockmode
     * @param          $isAnd
     *
     * @return  array
     */
    public function searchFacilitiesInfo(
        $keyword,
        $lockmode = CB_DATABASE_NO_LOCK,
        $isAnd = true
    ) {
        // 空文字チェック
        require_once('fw/string_util.csp');
        if (strlen(cb_trim($keyword)) <= 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['isAnd'] = $isAnd;
        $dataObj['showMemo'] = $this->getFacilityShowMemo();
        $words = cb_parse_search_text($keyword);     // キーワードを分割

        $facilityList = $dao->getFacilityListByNames_Memos($dataObj, $words);

        $facilityInfoList = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $facilityInfoList[$facilityId] = $facility->convertArray();
        }

        //ソート順どおりに並び替え
        $resultFacilityList = [];
        $orderedFacilityIdList = $this->getOrderedAllFacilitiesID();
        foreach ($orderedFacilityIdList as $facilityId) {
            if (array_key_exists($facilityId, $facilityInfoList)) {
                $resultFacilityList[$facilityId]
                    = $facilityInfoList[$facilityId];
            }
        }

        return $resultFacilityList;
    }

    public function scheduleIncrementalSearchFacilitiesInfo(
        $keyword,
        $lockmode = CB_DATABASE_NO_LOCK,
        $topN
    ) {
        require_once('fw/string_util.csp');
        if (strlen(cb_trim($keyword)) < 1) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['isAnd'] = false;
        $dataObj['showMemo'] = $this->getFacilityShowMemo();

        $facilityList = $dao->IncrementalSearchFacilityByNames($dataObj,
            $keyword);

        return $facilityList;
    }

    /**
     * 施設グループに属さない施設を検索する
     *
     * @param   string $keyword
     * @param   int    $lockmode
     *
     * @return  array
     */
    public function searchFacilitiesInfoByIsolatedFacilitygroup(
        $keyword,
        $lockmode = CB_DATABASE_NO_LOCK
    ) {
        // 空文字チェック
        require_once('fw/string_util.csp');
        if (strlen(cb_trim($keyword)) <= 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $words = cb_parse_search_text($keyword);     // キーワードを分割

        $facilityList
            = $dao->getFacilityListByIsolatedFacilitygroup_Names_Memos($dataObj,
            $words);

        $resultFacilityList = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $resultFacilityList[$facilityId] = $facility->convertArray();
        }

        return $resultFacilityList;
    }

    /**
     * 施設グループ内の施設を検索する
     *
     * @param   int    $group_id
     * @param   string $keyword
     * @param   int    $lockmode
     *
     * @return  array
     */
    public function searchFacilitiesInfoByFacilitygroupId(
        $keyword,
        $group_id,
        $lockmode = CB_DATABASE_NO_LOCK
    ) {
        // 空文字チェック
        require_once('fw/string_util.csp');
        if (strlen(cb_trim($keyword)) <= 0) {
            return [];
        }

        if (empty($group_id)) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $words = cb_parse_search_text($keyword);     // キーワードを分割

        $facilityList
            = $dao->getFacilityListByFacilitygroupId_Names_Memos($dataObj,
            $group_id, $words);

        $resultFacilityList = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $resultFacilityList[$facilityId] = $facility->convertArray();
        }

        return $resultFacilityList;
    }

    /**
     * 施設グループを検索する
     *
     * @param   string $keyword
     * @param   int    $lockmode
     *
     * @return  array
     */
    public function searchFacilityGroupsInfo(
        $keyword,
        $lockmode = CB_DATABASE_NO_LOCK
    ) {
        // 空文字チェック
        require_once('fw/string_util.csp');
        if (strlen(cb_trim($keyword)) <= 0) {
            return [];
        }

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lockmode;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $words = cb_parse_search_text($keyword);     // キーワードを分割

        $facilitygroupList = $dao->getFacilitygroupListByNames($dataObj,
            $words);

        //オブジェクトを配列化
        $facilitygroupInfoList = [];
        foreach ($facilitygroupList as $facilitygroup) {
            $facilitygroupId = $facilitygroup->getId();
            $facilitygroupInfoList[$facilitygroupId]
                = $facilitygroup->convertArray();
        }

        //ソート順どおりに並び替え
        $resultFacilitygroupList = [];
        $orderedFacilitygroupIdList = $this->_getOrderedAllFacilityGroupsID();
        foreach ($orderedFacilitygroupIdList as $facilitygroupId) {
            if (array_key_exists($facilitygroupId, $facilitygroupInfoList)) {
                $resultFacilitygroupList[$facilitygroupId]
                    = $facilitygroupInfoList[$facilitygroupId];
            }
        }

        return $resultFacilitygroupList;
    }

    /**
     * カスタマイズ項目をCB_Rowオブジェクトから、配列もしくは、文字列にして返す
     *
     * @param CB_Row $item
     * @param string $typedef
     *
     * @return mixed (array|string) $retval
     */
    function getExtendedItem($item, $typedef = null)
    {
        switch ($typedef) {
            case 'order':
                $retval = $item->get('display_name');
                break;
            default:
                $retval = [
                    'oid'                => $item->getOID(),
                    'display_name'       => $item->get('display_name'),
                    'id'                 => $item->get('id'),
                    'type'               => $item->get('type'),
                    'item_menu_textarea' => $item->get('item_menu_textarea'),
                    'item_menu_text'     => $item->get('item_menu_text'),
                    'use'                => $item->get('use'),
                    'display'            => $item->get('display'),
                    'display_item_name'  => $item->get('display_item_name'),
                    'show'               => $item->get('show')
                ];
                break;
        }

        return $retval;
    }

    /**
     * カスタマイズ項目のリストを取得
     *
     * @param array $condition
     *
     * @return array $items_for_view
     */
    function listItems($condition = null)
    {
        $items_for_view = [];

        // カスタマイズ項目が存在しない場合は、余計なクエリ発行しない
        if ( ! $this->_items_exist) {
            return $items_for_view;
        }

        if (empty($this->_items)) {
            $rowset = new CB_RowSet($this->_getFacilityItemTable());
            if ( ! is_null($condition)) {
                $rowset->addCondition($condition);
            }
            $rowset->addOrderColumn('col_list_index');
            $rowset->setLock(CB_DATABASE_NO_LOCK);

            while ( ! is_null($row = $rowset->iterate())) {
                $this->_items[$row->getOID()] = $row;
            }
            // 1件も無い場合は、カスタマイズ項目存在フラグをfalseにする
            if (empty($this->_items)) {
                $this->_items_exist = false;
            }
        }

        foreach (array_keys($this->_items) as $item_id) {
            $item = $this->_items[$item_id];
            $item_id = $item->getOID();
            $items_for_view[$item_id] = $this->getExtendedItem($item);
        }

        return $items_for_view;
    }

    /**
     * カスタマイズ項目のメニュータイプを配列にして返す
     *
     * @return array $items_for_view
     */
    function listItemsView()
    {
        $items = $this->listItems();

        // メニュータイプを配列にする
        $items_for_view = [];
        foreach ($items as $item_id => $item) {
            if ($item['type'] == GRN_SCHEDULE_ITEM_MENU) {
                $menus = [];
                if (is_string($item['item_menu_textarea'])) {
                    $menus = mb_split("\r\n", $item['item_menu_textarea']);
                }
                // 空行の削除
                foreach ($menus as $key => $menu) {
                    if (mb_strlen($menu) == 0) {
                        unset($menus[$key]);
                    }
                }
                $item['item_menu_textarea'] = $menus;
            }
            $items_for_view[$item_id] = $item;
        }

        return $items_for_view;
    }

    /**
     * カスタマイズ項目のリストを取
     *
     * @param string $typedef
     */
    function listExtendedItems($typedef = null)
    {
        $items = $this->listItems();

        // 順番変更機能用に整形する
        $items_for_view = [];
        foreach ($items as $item_id => $item) {
            $items_for_view[$item_id] = $item['display_name'];
        }

        return $items_for_view;
    }

    /**
     * カスタマイズ項目を追加する
     *
     * @param array $properties
     *
     * @return CB_row $row
     */
    function addItem($properties)
    {
        assert('is_array( $properties ) && 0 < count( $properties )');
        assert('array_key_exists( \'display_name\', $properties )');
        assert('! is_null( $properties[\'display_name\'] ) && 0 < strlen( $properties[\'display_name\'] )');
        assert('array_key_exists( \'id\', $properties )');
        assert('! is_null( $properties[\'id\'] ) && 0 < strlen( $properties[\'id\'] )');
        assert('array_key_exists( \'type\', $properties )');
        assert('! is_null( $properties[\'type\'] ) && 0 < strlen( $properties[\'type\'] )');

        $db = $this->_getDBConnection();

        //識別子の重複チェック
        $facility_title_code = $this->getFacilityTitleCode();
        if (array_key_exists($properties['id'], $facility_title_code)) {
            cb_throw_error(E_GRN_DUPLICATE_USER_COLUMN_ID, null,
                ['id' => $properties['id']]);
        }

        // すでに登録されている項目コードとの重複チェック
        $condition = cb_queryf($db, 'col_id = \'@S\'', $properties['id']);
        $items = $this->listItems($condition);
        if (count($items) > 0) {
            cb_throw_error(E_GRN_DUPLICATE_USER_COLUMN_ID, null,
                ['id' => $properties['id']]);
        }

        $table = $this->_getFacilityItemTable();
        $row = $table->newRow();
        foreach ($properties as $key => $value) {
            $row->set($key, $value);
        }
        $row->registerNow();

        require_once('schedule/inspection.csp');
        $inspection = GRN_Schedule_Inspection::getInstance();

        if ($inspection->isEnabled()) {
            if (is_null($properties['use'])) {
                $properties['use'] = '0';
            }
            if (is_null($properties['display'])) {
                $properties['display'] = '0';
            }
            if (is_null($properties['display_item_name'])) {
                $properties['display_item_name'] = '0';
            }
            $inspection->record('create', 'facility_item',
                [
                    'eiid'              => $row->getOid(),
                    'display_name'      => $properties['display_name'],
                    'id'                => $properties['id'],
                    'type'              => $properties['type'],
                    'use'               => $properties['use'],
                    'display'           => $properties['display'],
                    'display_item_name' => $properties['display_item_name']
                ]
            );
        }

        return $row;
    }

    /**
     * カスタマイズ項目のプロパティを設定する
     *
     * @param int   $item_id
     * @param array $properties
     *
     * @return boolean
     */
    function setItemProperties($item_id, $properties)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');
        assert('is_array( $properties ) && 0 < count( $properties )');

        if (array_key_exists($item_id, $this->_items)) {
            $row = $this->_items[$item_id];
        } else {
            $table_info = $this->_getFacilityItemTable();
            if (false === ($row = $table_info->getRow($item_id))) {
                cb_throw_error(E_GRN_FCLT_EXTENDED_ITEM_NOT_FOUND);
            }
        }

        if (array_key_exists('id', $properties)) {
            if ($properties['id'] != $row->get('id')) {
                // 組み込み項目
                $facility_title_code = $this->getFacilityTitleCode();
                if (array_key_exists($properties['id'], $facility_title_code)) {
                    return false;
                }

                $columns = $this->_listColumns();
                if (false !== array_search($properties['id'], $columns)) {
                    return false;
                }

                $item = $this->_getItemById($properties['id']);
                if (is_object($item) && is_a($item, 'GRN_ItemBase')) {
                    return false;
                }
            }
        }

        $informations = [];
        foreach ($properties as $key => $value) {
            if ($row->set($key, $value)) {
                $informations[$key] = $row->get($key);
            }
        }
        $row->updateNow();

        return true;
    }

    /**
     * カスタマイズ項目を削除する
     *
     * @param int $item_id
     *
     * @return boolean
     */
    function removeItem($item_id)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        $db = $this->_getDBConnection();

        $table_info = $this->_getFacilityItemTable();

        if (false === ($row = $table_info->getRow($item_id))) {
            return false;
        }
        $row->delete();

        require_once('schedule/inspection.csp');
        $inspection = GRN_Schedule_Inspection::getInstance();

        if ($inspection->isEnabled()) {
            $inspection->record('delete', 'facility_item',
                ['eiid' => $item_id]
            );
        }

        return true;

    }

    /**
     * カラム一覧を取得する
     *
     * @access private
     */
    private function _listColumns()
    {
        $columns = [
            'display_name',
            'type',
            'user'
        ];
        $columns[] = 'creator';
        $columns[] = 'creator_name';
        $columns[] = 'ctime';
        $columns[] = 'modifier';
        $columns[] = 'modifier_name';
        $columns[] = 'mtime';

        return $columns;
    }

    /**
     * IDを元に、CB_Rowオブジェクトを取得する
     *
     * @param int $id
     *
     * @return mixed (CB_Row|boolean)
     */
    private function _getItemById($id)
    {
        assert('! is_null( $id ) && 0 < strlen( $id )');

        $columns = $this->_listColumns();
        if (array_key_exists($id, $columns)) {
            $ret = true;

            return $ret;
        }

        $table_info = $this->_getFacilityItemTable();
        $rowset = new CB_RowSet($table_info);
        $rowset->addCondition($rowset->queryf("col_id = '@S'", $id));
        if (false === ($row = $rowset->iterate())) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * カスタマイズ項目を取得する
     *
     * @param int $item_id
     *
     * @return mixed (CB_Row|boolean)
     */
    function getItem($item_id)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        if (array_key_exists($item_id, $this->_items)) {
            return $this->_items[$item_id];
        }

        $table_info = $this->_getFacilityItemTable();
        if (false === ($row = $table_info->getRow($item_id))) {
            $ret = false;

            return $ret;
        }
        $this->_items[$item_id] = $row;

        return $row;
    }

    /**
     * 組み込み項目コードを返す
     *
     * @return array $this->_facility_title_code
     */
    function getFacilityTitleCode()
    {
        return $this->_facility_title_code;
    }

    /**
     * カスタマイズ項目データを登録する
     *
     * @param array $properties
     *
     * @return CB_Row $row
     */
    private function _addData($properties = null)
    {
        $table = $this->_getFacilityItemDataRelationTable();
        $row = $table->newRow();
        foreach ($properties as $key => $value) {
            $row->set($key, $value);
        }
        $row->updateNow();

        return $row;
    }

    /**
     * カスタマイズ項目データ登録処理
     *
     * @param int $eid イベントID
     *
     * @return boolean
     */
    function registerData($eid)
    {
        assert('! is_null( $eid ) && 0 < strlen( $eid )');

        if (empty($eid)) {
            return false;
        }

        global $G_INPUT;

        // カスタマイズ項目取得
        $extended_items = $this->listItems();
        // スケジュールイベントの CB_TableInfo を取得
        $event_table = cb_class2table(GRN_SCHEDULEEVENT);
        $event_row = $event_table->getRow($eid);

        // 施設予約カスタマイズ項目の CB_TableInfo を取得
        $item_table = $this->_getFacilityItemTable();

        // すでに登録されているデータを取得
        $rowset = new CB_RowSet($this->_getFacilityItemDataRelationTable());
        $rowset->addCondition($rowset->queryf("col_event = '@S'", $eid));
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $datas = [];
        while ( ! is_null($row = $rowset->iterate())) {
            // カスタマイズ項目IDをキーにする
            $item = $row->get('item');
            $item_id = $item->getOID();
            $datas[$item_id] = $row;
        }

        // カスタマイズ項目データ
        $properties = [];
        $properties['event'] = $event_row;

        // GET/POSTされたパラメータを取得する
        foreach ($extended_items as $item) {
            // 使用していないデータを登録しない
            if ( ! $item['use']) {
                continue;
            }

            if (array_key_exists($item['oid'], $datas)) {
                // UPDATE
                $row = $datas[$item['oid']];
                $row->set('string', @ $G_INPUT[$item['oid']]);
                $row->updateNow();
            } else {
                // INSERT
                $properties['item'] = $item_table->getRow($item['oid']);
                $properties['string'] = @ $G_INPUT[$item['oid']];
                $row = $this->_addData($properties);
            }
        }

        return true;
    }

    /**
     * カスタマイズ項目CSVデータ登録処理
     *
     * @param int   $eid イベントID
     * @param array $items
     *
     * @return boolean
     */
    function registerCsvData($eid, $items)
    {
        assert('! is_null( $eid ) && 0 < strlen( $eid )');

        if (empty($eid)) {
            return false;
        }

        // スケジュールイベントの CB_TableInfo を取得
        $event_table = cb_class2table(GRN_SCHEDULEEVENT);
        $event_row = $event_table->getRow($eid);

        // 施設予約カスタマイズ項目の CB_TableInfo を取得
        $item_table = $this->_getFacilityItemTable();

        // カスタマイズ項目データ
        $properties = [];
        $properties['event'] = $event_row;

        // CSVファイルで渡された値を登録する
        foreach ($items as $item) {
            // 使用していないデータを登録しない
            if ( ! $item['use']) {
                continue;
            }

            // INSERT
            $properties['item'] = $item_table->getRow($item['oid']);
            $properties['string'] = $item['value'];
            $row = $this->_addData($properties);
        }

        return true;
    }

    /**
     * カスタマイズ項目データ登録処理(登録データをパラメータで受け取る)
     *
     * @param int    $eid       イベントID
     * @param string $item_data カスタマイズ項目データリスト
     *                          oid => valueのマップ
     *
     * @return boolean
     */
    function registerDataFromParameter($eid, $item_data)
    {
        assert('! is_null( $eid ) && 0 < strlen( $eid )');

        if (empty($eid)) {
            return false;
        }

        // カスタマイズ項目取得
        $extended_items = $this->listItems();
        // スケジュールイベントの CB_TableInfo を取得
        $event_table = cb_class2table(GRN_SCHEDULEEVENT);
        $event_row = $event_table->getRow($eid);

        // 施設予約カスタマイズ項目の CB_TableInfo を取得
        $item_table = $this->_getFacilityItemTable();

        // すでに登録されているデータを取得
        $rowset = new CB_RowSet($this->_getFacilityItemDataRelationTable());
        $rowset->addCondition($rowset->queryf("col_event = '@S'", $eid));
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        $datas = [];
        while ( ! is_null($row = $rowset->iterate())) {
            // カスタマイズ項目IDをキーにする
            $item = $row->get('item');
            $item_id = $item->getOID();
            $datas[$item_id] = $row;
        }

        // カスタマイズ項目データ
        $properties = [];
        $properties['event'] = $event_row;

        // GET/POSTされたパラメータを取得する
        foreach ($extended_items as $item) {
            // 使用していないデータを登録しない
            if ( ! $item['use']) {
                continue;
            }

            $string = '';
            if (array_key_exists($item['oid'], $item_data)) {
                $string = $item_data[$item['oid']];
            }

            if (array_key_exists($item['oid'], $datas)) {
                // UPDATE
                $row = $datas[$item['oid']];
                $row->set('string', $string);
                $row->updateNow();
            } else {
                // INSERT
                $properties['item'] = $item_table->getRow($item['oid']);
                $properties['string'] = $string;
                $row = $this->_addData($properties);
            }
        }

        return true;
    }

    /**
     * カスタマイズ項目データ削除
     *
     * @param int $eid イベントID
     */
    function removeData($eid)
    {
        assert('! is_null( $eid ) && 0 < strlen( $eid )');

        $rowset = new CB_RowSet($this->_getFacilityItemDataRelationTable());
        $rowset->addCondition($rowset->queryf("col_event = '@S'", $eid));
        $rowset->deleteAllMatched();
    }

    /**
     * 施設の存在しない予定のカスタマイズ項目データ削除
     * 施設を削除した際に、施設無しの予定ができる場合がある。
     * 施設無しの予定にカスタマイズ項目データは不要なので、それをゴミデータとして削除する。
     */
    function removeGarbageData()
    {
        $event_ids = [];

        $db = $this->_getDBConnection();
        // カスタマイズ項目データの中で、施設を持たない予定のIDを取得するSQL
        $query
            = "SELECT DISTINCT fi.col_event FROM tab_grn_facility_itemdatarelation AS fi "
              .
              "inner join (select col_event,count(col_facility) as facility_count "
              .
              "from tab_grn_schedule_eventmember group by col_event) AS em on (fi.col_event = em.col_event) "
              .
              "where em.facility_count = 0";

        $query = $db->select_format($query);
        $result = $db->query($query);

        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $event_ids[] = $row['col_event'];
        }

        $db->free_result($result);

        // 該当データがあれば削除する
        if ( ! empty($event_ids)) {
            $str_event_ids = "";
            foreach ($event_ids as $event_id) {
                $str_event_ids .= cb_queryf($db, "'@S',", $event_id);
            }
            $str_event_ids = substr($str_event_ids, 0,
                strlen($str_event_ids) - 1);

            $query
                = "DELETE FROM tab_grn_facility_itemdatarelation WHERE col_event IN ("
                  . $str_event_ids . ")";

            $result = $db->query($query);
            if ($result === false) {
                $db->throwError(['query' => 'query failed: ' . $query]);
            }
        }

        unset($db);
    }

    /**
     * カスタマイズ項目データ取得
     *
     * @param int $eid イベントID
     *
     * @return array $items_for_view
     */
    function getData($eid)
    {
        assert('! is_null( $eid ) && 0 < strlen( $eid )');

        $items_for_view = $this->listItemsView();
        if (empty($items_for_view)) {
            return $items_for_view;
        }

        if ( ! isset($this->_datas[$eid])) {
            $rowset = new CB_RowSet($this->_getFacilityItemDataRelationTable());
            $rowset->addCondition($rowset->queryf("col_event = '@S'", $eid));
            $rowset->setLock(CB_DATABASE_NO_LOCK);

            $datas = [];
            while ( ! is_null($row = $rowset->iterate())) {
                // カスタマイズ項目IDをキーにする
                $item = $row->get('item');
                $item_id = $item->getOID();
                $datas[$item_id] = $row->get('string');
            }
            $this->_datas[$eid] = $datas;
        } else {
            $datas = $this->_datas[$eid];
        }

        $items_for_view = $this->makeItemForView($items_for_view, $datas);

        return $items_for_view;
    }

    /**
     * @param array $items_for_view
     * @param array $datas
     *
     * @return array
     */
    private function makeItemForView(array $items_for_view, array $datas): array
    {
        foreach (array_keys($items_for_view) as $key) {
            $item = &$items_for_view[$key];
            if (array_key_exists($item['oid'], $datas)) {
                if ($item['type'] == GRN_SCHEDULE_ITEM_MENU) {
                    $item['item_menu_text'] = $datas[$item['oid']];
                }
                $item['value'] = $datas[$item['oid']];
            }
        }

        return $items_for_view;
    }

    /**
     * @param GRN_Schedule_EventBase[] $events
     *
     * @return array
     */
    public function getListData(array $events): array
    {
        $event_ids = [];
        foreach ($events as $event) {
            $event_ids[] = $event->id;
        }

        $rowset = new CB_RowSet($this->_getFacilityItemDataRelationTable());
        $rowset->addCondition($rowset->queryf("col_event IN (@A)", $event_ids));
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $data_of_events = [];
        foreach ($event_ids as $id) {
            $data_of_events[$id] = [];
        }

        while ( ! is_null($row = $rowset->iterate())) {
            $event_id = $row->getId('event');
            $item_id = $row->getId('item');
            $data_of_events[$event_id][$item_id] = $row->get('string');
        }

        $items = [];
        $items_for_view = $this->listItemsView();
        foreach ($data_of_events as $event_id => $data) {
            $items[$event_id] = $this->makeItemForView($items_for_view, $data);
        }

        return $items;
    }

    /**
     * カスタマイズ項目の一覧表示用データ取得
     *
     * @param int $eid イベントID
     *
     * @return string $ret
     */
    function getDataTitle($eid)
    {
        $ret = '';
        $ret_array = [];

        $items_for_view = $this->getData($eid);

        foreach ($items_for_view as $item) {
            $ret_value = '';

            // 使用項目で、値があり、値を表示する設定の場合は表示
            if ($item['use'] && ! empty($item['value']) && $item['display']) {
                // 一覧に項目を表示がチェックされている場合
                if ($item['display_item_name']) {
                    $ret_value .= $item['display_name'] . ':';
                }
                $ret_value .= $item['value'];
            }

            if ( ! empty($ret_value)) {
                $ret_array[] = $ret_value;
            }
        }

        // '/' で繋げる
        $ret = implode('/', $ret_array);

        // 値があれば()で囲う
        if ( ! empty($ret)) {
            $ret = '(' . $ret . ')';
        }

        return htmlspecialchars($ret);
    }


    /**
     * 施設グループの追加
     *
     * @param   \CB_User $user            登録者
     * @param   string   $name            施設グループ名
     * @param   string   $code            施設グループコード
     * @param   string   $memo            メモ
     * @param   string   $parent_group_id 親施設グループ ID
     *
     * @return  string      施設グループID
     */
    public function addFacilityGroupDefaultOnly(
        $user,
        $name,
        $code,
        $memo,
        $parent_group_id
    ) {
        if (is_null($name) || strlen($name) == 0) {
            cb_throw_error(E_GRN_FCLT_MISSING_FACILITYGROUP_NAME);
        }

        $facilitygroup = $this->getFacilityGroupByForeignKey($code);
        if ($facilitygroup !== false) {
            cb_throw_error(E_GRN_FCLT_ALREADY_ENTRY_FACILITYGROUP, null,
                ['code' => $code]);
        }

        if (is_null($parent_group_id) || strlen($parent_group_id) == 0) {
            $parent_facilitygroup = null;
        } else {
            $parent_facilitygroup = $this->getFacilityGroup($parent_group_id);
            if ($parent_facilitygroup === false) {
                // 親施設グループID が渡されたが、そのID の施設グループが存在しない
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
            }

            // set modification timestamp
            $this->setLastModifyTime($user, $parent_facilitygroup);

            $ancestors
                = $this->getAncestors([$parent_facilitygroup->getOID() => 1]);
            $ancestors = $ancestors[$parent_facilitygroup->getOID()];
            if (count($ancestors) >= 3) {
                cb_throw_error(E_GRN_FCLT_MAX_FACILITYGROUP_TREE);
            }
        }

        $table = $this->_getFacilityGroupTable();

        $facilitygroup = $table->newRow();
        $facilitygroup->set('name', $name);
        $facilitygroup->set('foreign_key', $code);
        $facilitygroup->set('parent', $parent_facilitygroup);
        $facilitygroup->set('memo', $memo);

        $this->_facility_setting_logic->setFacilityGroupSettingByParentGroup(
            $facilitygroup->getOID(), $parent_facilitygroup
        );

        $facilitygroup->onCreate($user);

        return $facilitygroup->getOID();
    }

    /**
     * 施設グループの追加
     *
     * @param   \CB_User $inUser            登録者
     * @param   string   $inLocaleNameArray 施設グループ名
     * @param   string   $inForeignKey      施設グループコード
     * @param   string   $inMemo            メモ
     * @param   string   $inParentGroupId   親施設グループ ID
     *
     * @return  string      施設グループID
     */
    public function addFacilityGroup(
        $inUser,
        $inLocaleNameArray,
        $inForeignKey,
        $inMemo,
        $inParentGroupId
    ) {
        //--------------  default facility add -------------
        $facilitygroupId = $this->addFacilityGroupDefaultOnly($inUser,
            $inLocaleNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE], $inForeignKey,
            $inMemo, $inParentGroupId);


        //--------------  facility locale name add -------------
        $i18n = CB_I18N::getInstance();
        $availableLocaleArray = $i18n->getAvailableLanguages();
        $dao = new FacilityFacade();

        require_once('schedule/bean/GrnFacilityFacilitygroupLocal.csp');
        foreach ($availableLocaleArray as $localeKey) {
            if ((array_key_exists($localeKey, $inLocaleNameArray))
                && (strlen(cb_trim($inLocaleNameArray[$localeKey])) > 0)
            ) {
                $localeName = cb_trim($inLocaleNameArray[$localeKey]);

                $dataObj = [];
                $dataObj['messageTypeAdd'] = 'facilitygroup_locale_add';
                $facilitygroupLocal
                    = new GrnFacilityFacilitygroupLocal();
                $facilitygroupLocal->setParentId($facilitygroupId);
                $facilitygroupLocal->setLanguageCode($localeKey);
                $facilitygroupLocal->setName($localeName);

                $dao->insertFacilitygroupLocal($dataObj, $facilitygroupLocal);
            }
        }

        return $facilitygroupId;
    }

    /**
     * 施設グループの変更
     *
     * @param   \CB_User $user            登録者
     * @param   string   $facilitygroupId 施設グループID
     * @param   string   $name            施設グループ名
     * @param   string   $code            施設グループコード
     * @param   string   $memo            メモ
     *
     * @return  boolean
     */
    public function modifyFacilityGroupDefaultOnly(
        $user,
        $facilitygroupId,
        $name,
        $code,
        $memo
    ) {
        $isUseLocal = false;
        $facilitygroup = $this->getFacilityGroup($facilitygroupId, $isUseLocal);
        if ($facilitygroup === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
        }

        // 既存の施設グループと、コードが重複していないか？
        $check_fgroup = $this->getFacilityGroupByForeignKey($code);
        if ($check_fgroup !== false) {
            if ($check_fgroup->getOID() != $facilitygroupId) {
                cb_throw_error(E_GRN_FCLT_ALREADY_ENTRY_FACILITYGROUP, null,
                    ['code' => $code]);
            }
        }

        if (is_null($name) || strlen($name) == 0) {
            cb_throw_error(E_GRN_FCLT_MISSING_FACILITYGROUP_NAME);
        }

        $facilitygroup->set('name', $name);
        $facilitygroup->set('memo', $memo);
        $facilitygroup->set('foreign_key', $code);

        $facilitygroup->onUpdate($user);

        $facilitygroup->updateNow();

        return true;
    }

    /**
     * 施設グループの変更
     *
     * @param  \CB_User $inUser            登録者
     * @param   string  $inFacilitygroupId 施設グループID
     * @param   string  $inLocaleNameArray 施設グループ名
     * @param   string  $inForeignKey      施設グループコード
     * @param   string  $inMemo            メモ
     *
     * @return  boolean
     */
    public function modifyFacilityGroup(
        $inUser,
        $inFacilitygroupId,
        $inLocaleNameArray,
        $inForeignKey,
        $inMemo
    ) {
        //--------------  default facilitygroup modify -------------
        $this->modifyFacilityGroupDefaultOnly($inUser, $inFacilitygroupId,
            $inLocaleNameArray[CB_I18N_DEFUALT_LANGUAGE_CODE], $inForeignKey,
            $inMemo);


        //--------------  facilitygroup locale name modify -------------
        $i18n = CB_I18N::getInstance();
        $availableLocaleArray = $i18n->getAvailableLanguages();
        $dao = new FacilityFacade();

        require_once('schedule/bean/GrnFacilityFacilitygroupLocal.csp');
        foreach ($availableLocaleArray as $localeKey) {
            if ((array_key_exists($localeKey, $inLocaleNameArray))
                && (strlen(cb_trim($inLocaleNameArray[$localeKey])) > 0)
            ) {
                $localeName = cb_trim($inLocaleNameArray[$localeKey]);

                $dataObj = [];
                $facilitygroupLocal = new GrnFacilityFacilitygroupLocal();
                $facilitygroupLocal->setParentId($inFacilitygroupId);
                $facilitygroupLocal->setLanguageCode($localeKey);
                $facilitygroupLocal->setName($localeName);

                $dao->updateFacilitygroupLocal($dataObj, $facilitygroupLocal);
            } else {
                $dataObj = [];
                $facilitygroupLocal = new GrnFacilityFacilitygroupLocal();
                $facilitygroupLocal->setParentId($inFacilitygroupId);
                $facilitygroupLocal->setLanguageCode($localeKey);

                $dao->deleteFacilitygroupLocal($dataObj, $facilitygroupLocal);
            }
        }

        return true;
    }

    /**
     * 施設グループを移動できるかどうか調べる
     *
     */
    private function _canMoveTo($fgid, $to_fgid)
    {
        if (is_null($to_fgid) || strlen($to_fgid) == 0) {
            return true;
        }

        $to_fgid_array = [$to_fgid => $to_fgid];
        $ancestors = $this->getAncestors($to_fgid_array);
        $ancestors[] = $to_fgid;

        return (array_search($fgid, $ancestors) === false) ? true : false;
    }

    /**
     * 施設グループの移動
     *
     * @param   \CB_User $user                     変更者
     * @param   string   $facilitygroupId          施設グループID
     * @param   string   $dstParentFacilitygroupId 移動先の施設グループID
     *
     * @return bool
     */
    function moveFacilityGroup(
        $user,
        $facilitygroupId,
        $dstParentFacilitygroupId
    ) {
        $isUseLocal = false;
        $facilitygroup = $this->getFacilityGroup($facilitygroupId, $isUseLocal);

        if ($facilitygroup === false) {
            return false;
        }

        $dstParentFacilitygroup
            = $this->getFacilityGroup($dstParentFacilitygroupId);

        if ($dstParentFacilitygroup === false) {
            $dstParentFacilitygroup = null;
            $dstParentFacilitygroupId = null;
        }

        $srcParentFacilitygroup = $facilitygroup->get('parent');
        $srcParentFacilitygroupId = ( ! $srcParentFacilitygroup) ? null
            : $srcParentFacilitygroup->getOID();

        // 前と同じ場合はなにもしない
        if ($srcParentFacilitygroupId == $dstParentFacilitygroupId) {
            return true;
        }

        if (is_null($dstParentFacilitygroupId)) {
            $ancestors = [];
            $parentFacilitygroup = null;
        } else {
            $ancestors = $this->getAncestors([$dstParentFacilitygroupId => 1]);
            $ancestors = $ancestors[$dstParentFacilitygroupId];
        }

        $descendant = $this->countTreeChildrenLength($facilitygroupId);
        if (count($ancestors) + $descendant > 3) {
            cb_throw_error(E_GRN_FCLT_MAX_FACILITYGROUP_TREE);
        }

        $facilitygroup->set('parent', $dstParentFacilitygroup);
        $facilitygroup->onUpdate($user);
        $facilitygroup->updateNow();

        // set modification timestamp
        $this->setLastModifyTime($user, $srcParentFacilitygroup);
        $this->setLastModifyTime($user, $dstParentFacilitygroup);

        if ($this->_facility_setting_logic->isApplyParentGroupSettings($facilitygroup->get('settings'))) {
            $this->_facility_setting_logic->setFacilityGroupSettingByParentGroup($facilitygroupId,
                $dstParentFacilitygroup);
        }

        require_once('schedule/inspection.csp');
        $inspection = GRN_Schedule_Inspection::getInstance();

        if ($inspection->isEnabled()) {
            $inspection->record('move', 'facilitygroup',
                [
                    'fgid'     => $facilitygroupId,
                    'dst_fgid' => $dstParentFacilitygroupId,
                    'src_fgid' => $srcParentFacilitygroupId,
                    'name'     => $facilitygroup->get('name')
                ]);
        }

        return true;
    }

    /**
     * 子施設グループの情報を取得する(Beanオブジェクト)
     *
     * @param string $group_id
     *
     * @return array
     */
    function getFacilityGroupChildrenBean($group_id = 0)
    {
        if (empty($group_id)) {
            $group_id = 0;
        }

        $facilitygroupTable = $this->_getFacilityGroupTable();

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $facilitygroupList = $dao->getFacilitygroupListByParentId($dataObj,
            $group_id);

        $resultFacilitygroupArray = [];
        foreach ($facilitygroupList as $facilitygroup) {
            $facilitygroupId = $facilitygroup->getId();
            $resultFacilitygroupArray[$facilitygroupId] = $facilitygroup;
        }

        return $resultFacilitygroupArray;
    }

    /**
     * 子施設グループの情報を取得する(永続化オブジェクト)
     *
     * @param string $group_id
     *
     * @return array
     */
    function getFacilityGroupChildren($group_id = 0)
    {
        $facilitygroupList = $this->getFacilityGroupChildrenBean($group_id);

        $resultFacilitygroupArray = [];
        $facilitygroupTable = $this->_getFacilityGroupTable();
        foreach ($facilitygroupList as $facilitygroup) {
            $facilitygroupId = $facilitygroup->getId();
            $resultFacilitygroupArray[$facilitygroupId]
                = $facilitygroupTable->getRow($facilitygroup->getId(),
                $facilitygroup->convertArray());
        }

        return $resultFacilitygroupArray;
    }

    /**
     * 子施設グループの情報を取得する（配列）
     *
     * @param string $group_id
     *
     * @return array
     */
    function getFacilityGroupChildrenInfo($group_id = 0)
    {
        $facilitygroupList = $this->getFacilityGroupChildrenBean($group_id);

        $resultFacilitygroupArray = [];
        foreach ($facilitygroupList as $facilitygroup) {
            $facilitygroupId = $facilitygroup->getId();
            $resultFacilitygroupArray[$facilitygroupId]
                = $facilitygroup->convertArray();
        }

        return $resultFacilitygroupArray;
    }

    /**
     * @param   object  CB_CSVWriter    $writer
     * @param   string $facilitygroupId
     */
    private function _exportFacilitiyGroupsToCSV($writer, $facilitygroupId)
    {
        $facilitygroup = $this->getFacilityGroup($facilitygroupId);

        if ($facilitygroup) {
            $line = [];
            $parentFacilitygroup = $facilitygroup->get('parent');
            $foreignKey = $facilitygroup->get('foreign_key');

            if (is_null($parentFacilitygroup)) {
                $line[] = '';
            } else {
                $line[] = $parentFacilitygroup->get('foreign_key');
            }

            $line[] = $foreignKey;
            $line[] = $facilitygroup->get('name');
            $line[] = $facilitygroup->get('memo');
            $line[] = $foreignKey; // 新施設グループコード用

            $writer->writeLine($line);
        }
    }

    /**
     * 施設グループのCSVの書き出し
     *
     * @param   object CB_CSVWriter     $writer
     * @param   string $facilitygroupId
     */
    function exportFacilityGroupsToCSV($writer, $facilitygroupId = "0")
    {
        $this->_exportFacilitiyGroupsToCSV($writer, $facilitygroupId);
        $children = $this->getFacilityGroupChildren($facilitygroupId);

        foreach (array_keys($children) as $fid) {
            $this->exportFacilityGroupsToCSV($writer, $fid);
        }
    }

    /**
     * @param $inCharset
     * @param $inIsExportHeader
     * @param $inExportLanguageCodeArray
     *
     * @return string
     */
    function createFacilitygroupNameCSV(
        $inCharset,
        $inIsExportHeader,
        $inExportLanguageCodeArray = null
    ) {
        /// テンポラリのファイルを作成
        $tempdir = cb_tmpdir();
        $tempFilename = tempnam($tempdir, 'sc_');
        require_once('fw/csv.csp');
        $csv = new CB_CSVWriter($inCharset, $tempFilename);

        // 項目名の書き出し
        if ($inIsExportHeader) {
            $header = [];
            $header[] = cb_msg('grn.schedule.system', 'facilitygroup_csv_code');
            $header[] = cb_msg('grn.schedule.system',
                'facilitygroup_csv_language_code');
            $header[] = cb_msg('grn.schedule.system', 'facilitygroup_csv_name');

            $csv->writeLine($header);
        }

        // 内容の書き出し
        require_once('schedule/inspection.csp');
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['isLog'] = true;
        $dataObj['messageType'] = 'facilitygroup_local_export';

        $facilitygroupLocalList
            = $dao->getFacilitygroupLocalListByLanguageCodes($dataObj,
            $inExportLanguageCodeArray);

        foreach ($facilitygroupLocalList as $facilitygroupLocal) {
            $line = [];
            $line[0] = $facilitygroupLocal->getParentCode();
            $line[1] = $facilitygroupLocal->getLanguageCode();
            $line[2] = $facilitygroupLocal->getName();
            $csv->writeLine($line);
        }

        $csv->close();

        return $tempFilename;
    }

    /**
     * CSV read lines
     *
     * @access  public
     *
     * @param  string   inFilePath      //CSV FilePath
     * @param  string   inCharset       //read charset
     * @param  int      inSkipLineCount //read charset
     *
     * @return boolean  success:TRUE
     */
    public function importFacilitygroupNameWithCSV(
        $inFilePath,
        $inCharset,
        $inSkipLineCount = 0
    ) {
        if ( ! $inCharset) {
            global $G_config_common;
            $inCharset = $G_config_common->get('I18N',
                'default_external_encoding');
        }

        require_once('fw/csv.csp');
        $csv = new CB_CSVReader($inCharset, $inFilePath);

        // 先頭行をスキップ
        for ($i = 0; $i < $inSkipLineCount; ++$i) {
            $csv->readLine();
        }

        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['messageTypeAdd'] = 'facilitygroup_local_add_import';
        $dataObj['messageTypeModify'] = 'facilitygroup_local_modify_import';
        $dataObj['messageTypeDelete'] = 'facilitygroup_local_delete_import';

        $i18n = CB_I18N::getInstance();
        $facilityTable = $this->_getFacilityTable();
        $facilityDataObj = [];
        $facilityDataObj['lock'] = $facilityTable->_lock;
        $facilityDataObj['language'] = $i18n->getCurrentLanguage();
        $availableLanguageArray = $i18n->getAvailableLanguages();

        $csv_columns = [
            'facility_group_code',       // 施設グループコード
            'language_code',             // 言語コード
            'facility_group_name',       // 施設グループ名
        ];
        $csv_columns_num = count($csv_columns);

        require_once('schedule/bean/GrnFacilityFacilitygroupLocal.csp');
        while (($line = $csv->readLine()) !== false) {
            //カテゴリコードからカテゴリIDを求める
            if (is_null($line[0]) || (strlen($line[0]) <= 0)) {
                continue;
            }
            $facility = $dao->referFacilitygroupByForeignKey($facilityDataObj,
                $line[0]);
            if ($facility === false) {
                continue;
            }

            if (count($line) != $csv_columns_num) {
                cb_throw_error(E_GRN_SCHD_CSV_INVALID_COLUMNS);
            }
            if ( ! in_array($line[1], $availableLanguageArray)) {
                cb_throw_error(E_COMMON_CSV_LANGUAGE_CODE_INVALID);
            }
            //インポートデータの取り込み
            $facilitygroupLocal = new GrnFacilityFacilitygroupLocal();
            $facilitygroupLocal->setParentId($facility->getId());
            $facilitygroupLocal->setLanguageCode($line[1]);
            $facilitygroupLocal->setName(cb_trim($line[2]));

            if (is_null($facilitygroupLocal->getName())
                || (strlen($facilitygroupLocal->getName()) <= 0)
            ) {
                $dao->deleteFacilitygroupLocal($dataObj, $facilitygroupLocal);
            } else {
                $dao->updateFacilitygroupLocal($dataObj, $facilitygroupLocal);
            }
        }

        $csv->close();

        return true;
    }

    /**
     * 施設グループに所属していない施設を返す(オブジェクトバージョン)
     *
     * @param int $offset
     * @param int $limit
     * @param int $lock
     *
     * @return GRN_Facility_Facility[]
     */
    public function getIsolatedFacilities(
        $offset = 0,
        $limit = 0,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $facilityTable = $this->_getFacilityTable();
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        if ($limit > 0) {
            $dataObj['offset'] = $offset;
            $dataObj['limit'] = $limit;
        }

        $facilityList = $dao->getFacilityListByIsolatedFacilitygroup($dataObj);

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $row
                = $facilityTable->getRow($facilityId,
                $facility->convertArray());
            $resultFacilityArray[$facilityId] = $row;
        }

        return $resultFacilityArray;
    }

    /**
     * 施設グループに所属していない施設を返す(配列バージョン)
     *
     */
    public function getIsolatedFacilitiesArray(
        $offset = 0,
        $limit = 0,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        if ($limit > 0) {
            $dataObj['offset'] = $offset;
            $dataObj['limit'] = $limit;
        }

        $facilityList = $dao->getFacilityListByIsolatedFacilitygroup($dataObj);

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $resultFacilityArray[$facilityId] = $facility->convertArray();
        }

        return $resultFacilityArray;
    }

    /**
     * 施設グループに所属していない施設を返す(部分情報のみ:Covering indexを使いたいため)(配列バージョン)
     *
     */
    private function _getIsolatedFacilityPartInfoList(
        $offset = 0,
        $limit = 0,
        $lock = CB_DATABASE_DEFAULT_LOCK
    ) {
        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();
        $dataObj['isPart'] = true;
        if ($limit > 0) {
            $dataObj['offset'] = $offset;
            $dataObj['limit'] = $limit;
        }

        $facilityList = $dao->getFacilityListByIsolatedFacilitygroup($dataObj);

        $resultFacilityArray = [];
        foreach ($facilityList as $facility) {
            $facilityId = $facility->getId();
            $resultFacilityArray[$facilityId] = $facility->convertArray();
        }

        return $resultFacilityArray;
    }

    /**
     * get the tree children _id of current group
     *
     * @param $fagid
     *
     * @return array
     */
    function getTreeChildren($fagid)
    {
        assert('! is_null( $fagid )');
        $db = $this->_getDBConnection();
        $tmpl_query
            = "SELECT _id FROM tab_grn_facility_facilitygroup WHERE col_parent IN ";

        $child_ids = [];
        $counter = 0;
        $tmp_fagids = [$fagid];
        for (
            $counter = 1; $counter < GRN_SCHD_MAX_FACILITY_GROUP_TREE;
            $counter++
        ) {
            $tmp_query = [];
            foreach ($tmp_fagids as $id) {
                $tmp_query[] = cb_queryf($db, "'@S'", $id);
            }
            $tmp_query = implode(",", $tmp_query);
            $query = $tmpl_query . '(' . $tmp_query . ')';
            $result = $db->query($query);

            $tmp_fagids = [];
            while ($row = $db->fetch_assoc($result)) {
                $tmp_fagids[] = $row['_id'];
                $child_ids[$row['_id']] = $row['_id'];
            }
            $db->free_result($result);
            if (count($tmp_fagids) == 0) {
                break;
            }
        }

        return $child_ids;
    }

    /**
     * 施設グループの親の数を数える(自分自身を含む)
     *
     * @param array $fagids 施設グループ ID (キーの値のみを使う)
     *
     * @return array
     */
    function countAncestors($fagids)
    {
        $tree =& $this->makeFacilityGroupTree($fagids);
        $retval = [];
        foreach (array_keys($fagids) as $key) {
            $tmp_fagid = $key;
            for (
                $counter = 1; $counter < GRN_SCHD_MAX_FACILITY_GROUP_TREE;
                $counter++
            ) {
                if (is_null($tree[$tmp_fagid])) {
                    break;
                }
                $tmp_fagid = $tree[$tmp_fagid];
            }
            $retval[$key] = $counter;
        }

        return $retval;
    }

    /**
     * 施設グループのツリー情報のバッファを作る
     *
     * @param array $group_ids 施設グループ ID
     *
     * @return array
     */
    function &makeFacilityGroupTree($group_ids)
    {
        $db = $this->_getDBConnection();
        $tree =& $this->_facility_group_hierarchy;

        $rest = [];
        foreach (array_keys($group_ids) as $key) {
            if ( ! array_key_exists($key, $tree)) {
                $rest[$key] = 1; // 値は使わない
            }
        }

        if (count($rest) == 0) {
            return $this->_facility_group_hierarchy;
        }
        $counter = 0;
        for (
            $counter = 0;
            $counter < GRN_SCHD_MAX_FACILITY_GROUP_TREE && count($rest) > 0;
            $counter++
        ) {
            $query_array = [];
            foreach (array_keys($rest) as $key) {
                $query_array[] = cb_queryf($db, "'@S'", $key);
            }
            $query
                = "SELECT _id, col_parent FROM tab_grn_facility_facilitygroup WHERE _id IN ("
                  . implode(',', $query_array) . ')';

            $result = $db->query($query);

            //$rest = array();
            while ($row = $db->fetch_assoc($result)) {
                $tree[$row['_id']] = $row['col_parent'];
                unset($rest[$row['_id']]);
                if ( ! (is_null($row['col_parent'])
                        || array_key_exists($row['col_parent'], $tree))
                ) {
                    $rest[$row['col_parent']] = 1; // 値は使わない
                }
            }
            $db->free_result($result);

        }

        return $this->_facility_group_hierarchy;
    }

    /**
     * 施設グループの親のリストを返す
     *
     * @param array $group_ids 施設グループ ID
     *
     * @return array
     */
    function getAncestors($group_ids)
    {
        foreach (array_keys($group_ids) as $id) {
            if ( ! is_null($id) && $id <= 0) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
            }
        }
        $retval = [];
        $tree =& $this->makeFacilityGroupTree($group_ids);
        foreach (array_keys($group_ids) as $key) {
            $parents = [$key];
            $tmp_id = $key;
            for (
                $counter = 0; $counter < GRN_SCHD_MAX_FACILITY_GROUP_TREE - 1;
                $counter++
            ) {
                if ( ! isset($tree[$tmp_id])) {
                    break;
                }
                $parents[] = $tree[$tmp_id];
                $tmp_id = $tree[$tmp_id];
            }
            $retval[$key] = $parents;
        }

        return $retval;
    }

    /**
     * 子施設グループをたどっていって、最大の階層の深さを調べる
     * 自分自身を含む
     *
     * @param $fagid
     *
     * @return int
     */
    function countTreeChildrenLength($fagid)
    {
        assert('! is_null( $fagid )');
        $db = $this->_getDBConnection();
        $tmpl_query
            = "SELECT _id FROM tab_grn_facility_facilitygroup WHERE col_parent IN ";

        $counter = 0;
        $tmp_fagids = [$fagid];
        for (
            $counter = 1; $counter < GRN_SCHD_MAX_FACILITY_GROUP_TREE;
            $counter++
        ) {
            $tmp_query = [];
            foreach ($tmp_fagids as $id) {
                $tmp_query[] = cb_queryf($db, "'@S'", $id);
            }
            $tmp_query = implode(",", $tmp_query);
            $query = $tmpl_query . '(' . $tmp_query . ')';
            $result = $db->query($query);

            $tmp_fagids = [];
            while ($row = $db->fetch_assoc($result)) {
                $tmp_fagids[] = $row['_id'];
            }
            $db->free_result($result);

            if (count($tmp_fagids) == 0) {
                break;
            }
        }

        return $counter;
    }

    /**
     * 施設グループが移動できるかどうか調べる
     *
     *
     */
    function isMovable($fagid, $user = null)
    {
        $db = $this->_getDBConnection();

        require_once('schedule/facility_privilege.csp');
        $priv = GRN_Facility_Privilege_Logic::getInstance();

        $facilitygroup = $this->getFacilityGroupInfo($fagid);
        $parentFacilitygroupId = $facilitygroup['col_parent'];

        if (empty($parentFacilitygroupId) === false && is_null($user)) {
            // 最上位でない施設グループは、システム管理者なら必ずトップへ移動できるので、
            // これ以上評価しない。
            return true;
        }

        $ancestors = $this->getAncestors([$fagid => $fagid]);
        $ancestors = $ancestors[$fagid];

        $children_length = $this->countTreeChildrenLength($fagid);
        $max_counter = GRN_SCHD_MAX_FACILITY_GROUP_TREE - $children_length;

        $parents = [];
        $is_movable = false;
        for ($i = 0; $i < $max_counter; $i++) {
            if (count($parents) == 0) {
                $query
                    = "SELECT _id FROM tab_grn_facility_facilitygroup WHERE col_parent IS NULL";
            } else {
                $tmp_query = [];
                foreach ($parents as $parent_id) {
                    $tmp_query[] = cb_queryf($db, "'@S'", $parent_id);
                }
                $query
                    = "SELECT _id FROM tab_grn_facility_facilitygroup WHERE col_parent IN ("
                      . implode(',', $tmp_query) . ")";
            }

            $result = $db->query($query);
            $parents = [];
            while ($row = $db->fetch_assoc($result)) {
                if ($row['_id'] == $fagid) {
                    continue;
                }
                if ($row['_id'] != $parentFacilitygroupId) {
                    if (is_null($user)
                        || ($priv->hasPrivilegeOfFacilityGroupByID($user,
                                $row['_id'])
                            && $priv->hasPrivilegeOfFacilityGroupByID($user,
                                $fagid))
                    ) {
                        $is_movable = true;
                        $db->free_result($result);
                        break 2;
                    }
                }

                $parents[] = $row['_id'];
            }

            $db->free_result($result);
        }

        return $is_movable;
    }

    /**
     * 全施設を順番どおりに取得する
     *
     * 取得したい施設グループのIDを $privilege_groups に array( (id) => (id), ... ) という形式で渡す
     * 省略した場合は、施設グループに未所属の施設も含めて全施設が返される。
     *
     * @param int   $offset
     * @param int   $limit
     * @param array $privilege_groups
     *
     * @return array
     */
    public function getOrderedFacilityInfoList(
        $offset = 0,
        $limit = 0,
        $privilege_groups = null
    ) {
        $ordered_facilities = $this->getOrderedAllFacilitiesID($offset,
            $limit, $privilege_groups);
        $count_ordered_facilities = count($ordered_facilities);

        $resultFacilityList = [];

        if ($count_ordered_facilities > 0) {
            if ($limit == 0) {
                $orderedFacilityIdList = $ordered_facilities;
            } else {
                if ($offset < $count_ordered_facilities) {
                    $orderedFacilityIdList = array_slice($ordered_facilities,
                        $offset, $limit);
                } else {
                    return [];
                }
            }

            $facilityList = $this->getFacilitiesInfo($orderedFacilityIdList);

            $tmp = [];
            foreach ($facilityList as $facility) {
                $facilityId = $facility['_id'];
                $tmp[$facilityId] = $facility;
            }

            //並び替え
            foreach ($orderedFacilityIdList as $fid) {
                $resultFacilityList[$fid] = &$tmp[$fid];
            }

            return $resultFacilityList;
        } else {
            if ( ! is_null($privilege_groups)) {
                return $this->getIsolatedFacilitiesArray($offset, $limit);
            } else {
                return [];
            }
        }
    }

    /**
     * 全施設を順番どおりに取得する(部分情報のみ)
     *
     * 取得したい施設グループのIDを $privilege_groups に array( (id) => (id), ... ) という形式で渡す
     * 省略した場合は、施設グループに未所属の施設も含めて全施設が返される。
     *
     * @param int   $offset
     * @param int   $limit
     * @param array $privilege_groups
     *
     * @return array
     */
    public function getOrderedFacilityPartInfoList(
        $offset = 0,
        $limit = 0,
        $privilege_groups = null
    ) {
        $ordered_facilities = $this->getOrderedAllFacilitiesID($offset,
            $limit, $privilege_groups);
        $count_ordered_facilities = count($ordered_facilities);

        $resultFacilityList = [];

        if ($count_ordered_facilities > 0) {
            if ($limit == 0) {
                $orderedFacilityIdList = $ordered_facilities;
            } else {
                if ($offset < $count_ordered_facilities) {
                    $orderedFacilityIdList = array_slice($ordered_facilities,
                        $offset, $limit);
                } else {
                    return [];
                }
            }

            $facilityList
                = $this->_getFacilityPartInfoListByIds($orderedFacilityIdList);

            $tmp = [];
            foreach ($facilityList as $facility) {
                $facilityId = $facility['_id'];
                $tmp[$facilityId] = $facility;
            }

            //並び替え
            foreach ($orderedFacilityIdList as $fid) {
                $resultFacilityList[$fid] = &$tmp[$fid];
            }

            return $resultFacilityList;
        } else {
            if ( ! is_null($privilege_groups)) {
                return $this->getIsolatedFacilitiesArray($offset, $limit);
            } else {
                return [];
            }
        }
    }

    /**
     * 施設を順番どおりに取得する
     *
     */
    public function getOrderedAllFacilitiesID(
        $offset = 0,
        $limit = 0,
        $inPrivilegeGroupArray = null
    ) {
        //施設グループを順番どおりに取得する
        $orderedFacilityGroupsIDArray
            = $this->_getOrderedAllFacilityGroupsID($offset, $limit,
            $inPrivilegeGroupArray);

        //施設グループに所属する施設を取得する
        $relation_orderby_cache
            = GRN_Facility_FacilityGroupRelationOrderBy::getInstance();
        $tmpFacilityIdFacilitygroupIdArray
            = $relation_orderby_cache->getCache();

        //施設グループIDをキーにして施設をグルーピングする（2次元配列）
        $facilitygroupIdFacilityIdArray = [];
        foreach ($tmpFacilityIdFacilitygroupIdArray as $facility) {
            if ( ! array_key_exists($facility['col_group'],
                $facilitygroupIdFacilityIdArray)
            ) {
                $facilitygroupIdFacilityIdArray[$facility['col_group']] = [];
            }
            $facilitygroupIdFacilityIdArray[$facility['col_group']][]
                = $facility;
        }

        //施設グループの順番に合わせて、施設を並ばせる
        $resultIdArray = [];
        foreach ($orderedFacilityGroupsIDArray as $facilityGroupId) {
            if (array_key_exists($facilityGroupId,
                $facilitygroupIdFacilityIdArray)
            ) {
                $facilityArray
                    = $facilitygroupIdFacilityIdArray[$facilityGroupId];
                foreach ($facilityArray as $facility) {
                    $resultIdArray[] = $facility['col_facility'];
                }
            }
        }

        //施設グループに所属していない施設を末尾に加える
        if (is_null($inPrivilegeGroupArray)) {
            $isolated_facilities = $this->_getIsolatedFacilityPartInfoList();
            foreach (array_keys($isolated_facilities) as $facilityId) {
                $resultIdArray[] = "$facilityId";    //文字型にキャスト
            }
        }

        return $resultIdArray;
    }


    /**
     * 施設グループを順番どおりに取得する
     *
     *
     */
    private function _getOrderedAllFacilityGroupsID(
        $offset = 0,
        $limit = 0,
        $inPrivilegeGroupArray = null
    ) {
        $db = $this->_getDBConnection();
        $facilityGroupArray = [];
        $tmpPrivilegeRootGroupArray = [];

        //covering indexを使用するようにクエリを書いているため、クエリを変更する場合はcovering indexになるようにすること
        $result
            = $db->query('SELECT _id, col_parent FROM tab_grn_facility_facilitygroup ORDER BY col_parent, col_list_index;');
        while ($row = $db->fetch_assoc($result)) {
            $parentId = $row['col_parent'];

            if ( ! array_key_exists($parentId, $facilityGroupArray)) {
                $facilityGroupArray[$parentId] = [];
            }

            if ( ! is_null($inPrivilegeGroupArray)) {
                if (array_key_exists($row['_id'], $inPrivilegeGroupArray)) {
                    $tmpPrivilegeRootGroupArray[] = $row;
                }
            }

            $facilityGroupArray[$parentId][] = $row;
        }
        $db->free_result($result);

        if ( ! is_null($inPrivilegeGroupArray)) {
            unset($facilityGroupArray['']);
            $facilityGroupArray[''] = $tmpPrivilegeRootGroupArray;
        }

        $resultIdArray = [];
        $this->_getOrderedAllFacilityGroupsIDReflexive('', $facilityGroupArray,
            $resultIdArray);

        return $resultIdArray;
    }

    /**
     * 施設グループの階層が入った配列から、順番どおりに取り出して並べる
     *
     * @param       $inParentGroupId         親施設グループID
     * @param array $inFacilityGroupArray    施設グループの階層関係
     * @param array $outFacilityGroupIdArray 並べ替えられた施設グループ（結果）
     */
    private function _getOrderedAllFacilityGroupsIDReflexive(
        $inParentGroupId,
        &$inFacilityGroupArray,
        &$outFacilityGroupIdArray
    ) {
        if (array_key_exists($inParentGroupId, $inFacilityGroupArray)) {
            foreach (
                $inFacilityGroupArray[$inParentGroupId] as $childFacilityGroup
            ) {
                $outFacilityGroupIdArray[] = $childFacilityGroup['_id'];
                $this->_getOrderedAllFacilityGroupsIDReflexive($childFacilityGroup['_id'],
                    $inFacilityGroupArray, $outFacilityGroupIdArray);
            }
        }
    }

    /**
     * 使われていない施設グループコードを取得する
     *
     *
     */
    function getNewFacilityGroupCode($name)
    {
        $ret = $this->getFacilityGroupByForeignKey($name . '_code');
        if ($ret === false) {
            return $name . '_code';
        }

        $index = 2;
        while (($ret = $this->getFacilityGroupByForeignKey($name
                                                           . "_{$index}_code"))
               && $index < 2147483647) {
            $index += 1;
        }

        if ($ret === false) {
            return $name . "_{$index}_code";
        } else {
            cb_throw_error(); // TODO 同じ名前の施設グループを 2147483647 個以上作った場合に起こる
        }
    }

    /**
     * 施設が所属する施設グループの調査をまとめてやる
     *
     * @param array $facilities array( 'facility_id', 'facility_id', ... );
     *
     * @return array
     */
    function getFacilityGroupRelation($facilities)
    {
        if (count($facilities) == 0) {
            return [];
        }

        $relation_orderby_cache
            = GRN_Facility_FacilityGroupRelationOrderBy::getInstance();

        // すでに遅いクエリが実行されていればそれを使う。
        if ($relation_orderby_cache->isCached()) {
            $tmp_cache = $relation_orderby_cache->getCache();
            $retval = [];
            foreach ($tmp_cache as $row) {
                if (array_search($row['col_facility'], $facilities) !== false) {
                    $retval[$row['col_facility']] = $row['col_group'];
                }
            }
            unset($tmp_cache, $row);
        } else {
            $db = $this->_getDBConnection();

            $in_query = [];
            foreach ($facilities as $facility) {
                $in_query[] = cb_queryf($db, "'@S'", $facility);
            }
            $query
                = 'SELECT col_facility, col_group FROM tab_grn_facility_facilitygrouprelation WHERE col_facility IN ('
                  . implode(',', $in_query) . ');';

            $result = $db->query($query);
            $retval = [];
            while ($row = $db->fetch_assoc($result)) {
                $retval[$row['col_facility']] = $row['col_group'];
            }
            $db->free_result($result);
        }

        foreach ($facilities as $facility) {
            if ( ! array_key_exists($facility, $retval)) {
                $retval[$facility] = null;
            }
        }

        return $retval;
    }

    /**
     * 各施設の所属する施設グループの親を、階層を辿ってルートまでのリストにして返す
     *
     */
    function getAllAncestors($facilities)
    {
        $facility_id_list = [];
        foreach ($facilities as $f) {
            $facility_id_list[] = $f['_id'];
        }

        $fg_map = $this->getFacilityGroupRelation($facility_id_list);

        $groups = [];
        foreach ($fg_map as $f) {
            if ( ! is_null($f)) {
                $groups[$f] = $f;
            }
        }

        $ancestors = $this->getAncestors($groups);
        $all_facilities = [];
        foreach ($ancestors as $ancestor) {
            foreach ($ancestor as $i) {
                $all_facilities[$i] = $i;
            }
        }

        $all_facilities_info = $this->getFacilityGroupsInfo($all_facilities);

        $retval = [];
        foreach ($facilities as $key => $f) {
            $group_id = $fg_map[$f['_id']];
            $retval[$key] = [];
            if (is_null($group_id)) {
                continue;
            }

            foreach (array_reverse($ancestors[$group_id]) as $i) {
                $retval[$key][] = $all_facilities_info[$i];
            }
        }

        return $retval;
    }

    /**
     * @param $facility_ids
     * @param $showmemo
     *
     * @return array
     */
    public function getFacilitySetting($facility_ids, $showmemo = false)
    {
        $retval = [];

        if ( ! is_array($facility_ids) || count($facility_ids) <= 0) {
            return $retval;
        }

        $facilityList = $this->getFacilitiesInfo($facility_ids);

        if ($showmemo) {
            foreach ($facilityList as $facility) {
                $f_info = [];
                $f_info['settings'] = $facility['col_settings'];
                $f_info['memo'] = $facility['col_memo'];

                $retval[$facility['_id']] = $f_info;
            }
        } else {
            foreach ($facilityList as $facility) {
                $retval[$facility['_id']] = $facility['col_settings'];
            }
        }

        return $retval;
    }

    /**
     * @param $faid
     *
     * @return array
     */
    public function getGroupFacilitySetting($faid)
    {
        $facilitygroupRow = $this->getFacilityAffiliationGroup($faid);

        $retval = [];

        if ($facilitygroupRow !== false) {
            $retval[$facilitygroupRow->getOID()]
                = $facilitygroupRow->get('settings');
        }

        return $retval;
    }

    /**
     * @param $fgid
     *
     * @return mixed
     */
    public function getGroupFacilitySettingByFacilityGroupId($fgid)
    {
        $facilitygroup = $this->getFacilityGroupInfo($fgid);

        return $facilitygroup['col_settings'];
    }

    /**
     * 最終変更時間、最終変更者更新
     *
     * @param          $user
     * @param   object $obj 変更対象
     *
     * @return  boolean
     */
    function setLastModifyTime($user, $obj)
    {
        if (is_null($user) || ! is_object($user)) {
            return false;
        }
        if (is_null($obj) || ! is_object($obj)) {
            return false;
        }
        $obj->onUpdate($user);

        return true;
    }

    /**
     * @param $f_settings
     * @param $faid
     *
     * @return string
     */
    function getModifyUserByPriority($f_settings, $faid)
    {
        if (is_array($f_settings) && array_key_exists($faid, $f_settings)
            && strlen($f_settings[$faid]) > 0
        ) {
            $unserialize_settings = cb_unserialize($f_settings[$faid],
                ['allowed_classes' => false]);
            if (is_array($unserialize_settings)
                && count($unserialize_settings) > 0
            ) {
                $modify_user = array_key_exists('modifyuser',
                    $unserialize_settings) ? $unserialize_settings['modifyuser']
                    : 'grantuser';
            }
        } else {
            // get facility setting in group
            $g_settings = $this->getGroupFacilitySetting($faid);
            if (array_key_exists($faid, $g_settings)
                && strlen($g_settings[$faid]) > 0
            ) {
                $unserialize_settings = cb_unserialize($g_settings[$faid],
                    ['allowed_classes' => false]);
                if (is_array($unserialize_settings)
                    && count($unserialize_settings) > 0
                ) {
                    $modify_user = array_key_exists('modifyuser',
                        $unserialize_settings)
                        ? $unserialize_settings['modifyuser'] : 'grantuser';
                }
            } else {
                $modify_user = $this->getFacilityModifyUser();
            }
        }

        return $modify_user;
    }

    /**
     * @param $f_settings
     * @param $faid
     *
     * @return string
     */
    function getShowMemoByPriority($f_settings, $faid)
    {
        $facility_memo = '';
        if (is_array($f_settings) && array_key_exists($faid, $f_settings)
            && strlen($f_settings[$faid]['settings']) > 0
        ) {
            $unserialize_settings
                = cb_unserialize($f_settings[$faid]['settings'],
                ['allowed_classes' => false]);
            if (is_array($unserialize_settings)
                && count($unserialize_settings) > 0
            ) {
                $showmemo = array_key_exists('showmemo',
                    $unserialize_settings) ? $unserialize_settings['showmemo']
                    : '0';
                $facility_memo = $showmemo ? $f_settings[$faid]['memo'] : '';
            }
        } else {
            // get facility setting in group
            $g_settings = $this->getGroupFacilitySetting($faid);
            if (array_key_exists($faid, $g_settings)
                && strlen($g_settings[$faid]) > 0
            ) {
                $unserialize_settings = cb_unserialize($g_settings[$faid],
                    ['allowed_classes' => false]);
                if (is_array($unserialize_settings)
                    && count($unserialize_settings) > 0
                ) {
                    $showmemo = array_key_exists('showmemo',
                        $unserialize_settings)
                        ? $unserialize_settings['showmemo'] : '0';
                    $facility_memo = $showmemo ? $f_settings[$faid]['memo']
                        : '';
                }
            } else {
                $showmemo = $this->getFacilityShowMemo();
                $facility_memo = $showmemo ? $f_settings[$faid]['memo'] : '';
            }
        }

        return $facility_memo;
    }

    /**
     * @param $inFacilityId
     *
     * @return array
     */
    public function createFacilityMultiLanguageValuesArray($inFacilityId)
    {
        $resultArray = [];

        $dao = new FacilityFacade();

        $dataObj = [];
        $facility
            = $dao->referFacilityById($dataObj,
            $inFacilityId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $facility->getName();

        $dataObj = [];
        $facilityLocalList = $dao->getFacilityLocalListByFacilityId($dataObj,
            $inFacilityId);
        foreach ($facilityLocalList as $facilityLocal) {
            $resultArray[$facilityLocal->getLanguageCode()]
                = $facilityLocal->getName();
        }

        return $resultArray;
    }

    /**
     * @param $inFacilitygroupId
     *
     * @return array
     */
    public function createFacilitygroupMultiLanguageValuesArray(
        $inFacilitygroupId
    ) {
        $resultArray = [];

        $dao = new FacilityFacade();

        $dataObj = [];
        $facilitygroup
            = $dao->referFacilitygroupById($dataObj,
            $inFacilitygroupId);
        $resultArray[CB_I18N_DEFUALT_LANGUAGE_CODE] = $facilitygroup->getName();

        $dataObj = [];
        $facilitygroupLocalList
            = $dao->getFacilitygroupLocalListByFacilitygroupId($dataObj,
            $inFacilitygroupId);
        foreach ($facilitygroupLocalList as $facilitygroupLocal) {
            $resultArray[$facilitygroupLocal->getLanguageCode()]
                = $facilitygroupLocal->getName();
        }

        return $resultArray;
    }

    /**
     * @param array $groupIds Array of facility group ids
     *
     * @return array Array of facilities which belong to the specified facility groups
     */
    public function getFacilityIdListByGroupIdList(array $groupIds)
    {
        $facilityFacade = new FacilityFacade();
        $inDataObj = [];

        return $facilityFacade->getFacilityIdListByGroupIdList($inDataObj,
            $groupIds);
    }

    /**
     * 施設の承認
     *
     * @return string
     */
    public function getFacilityApproval()
    {
        return $this->_facility_setting_logic->getFacilityApproval();
    }
}


class GRN_Schedule_QueryCache
{
    private $_cache = null;

    /**
     * @return bool
     */
    function isCached()
    {
        if (is_nulL($this->_cache)) {
            return false;
        }

        return true;
    }

    /**
     * @return array
     */
    function getCache()
    {
        if (is_nulL($this->_cache)) {
            $this->_cache = $this->_getCache();
        }

        return $this->_cache;
    }

    /**
     * @return array
     */
    function _getCache()
    {
        return [];
    }
}


class GRN_Facility_FacilityGroupRelationOrderBy extends GRN_Schedule_QueryCache
{
    /** @var  $_instance GRN_Facility_FacilityGroupRelationOrderBy */
    private static $_instance = null;

    /**
     * @return GRN_Facility_FacilityGroupRelationOrderBy
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @return array
     */
    function _getCache()
    {
        $_cache = [];

        $fsl = GRN_Facility_SystemLogic::getInstance();
        $db = $fsl->_getDBConnection();

        $result
            = $db->query("SELECT _id, col_group, col_facility_list, col_facility FROM tab_grn_facility_facilitygrouprelation force index(idx_group_list_facility) ORDER BY col_group, col_facility_list;");
        while ($row = $db->fetch_assoc($result)) {
            $_cache[$row['_id']] = $row;
        }

        return $_cache;
    }

}

require_once('grn/history.csp');


class GRN_Facility_HistoryManager extends GRN_Uum_AbstractHistoryManager
{
    /**
     * @access private
     */
    private $_db = null;
    /** @var $_instance  GRN_Facility_HistoryManager */
    private static $_instance = null;

    /**
     * @return GRN_Facility_HistoryManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    function _getDBConnection()
    {
        // 初期化されいなければ初期化
        if (is_null($this->_db)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_db = $app_locator->getConnection('schedule');
        }

        return $this->_db;
    }

    /**
     * @return string
     */
    function _getTablePrefix()
    {
        return 'facility';
    }

    /**
     * Get the oftenusedly selected facility groups of the user.
     *
     * @param string $user_id user's ID
     *
     * @return array array consisted of facility groups' IDs.
     */
    function getOftenusedFacilityGroups($user_id)
    {
        return $this->_getOftenusedTargets('facilitygroup', $user_id);
    }

    /**
     * Set the oftenusedly selected facility groups of the user.
     *
     * @param string $user_id user's ID
     * @param array array consisted of facility groups' IDs. The IDs should be stored as the values of this array not the keys.
     */
    function setOftenusedFacilityGroups($user_id, $facilitygroup_ids)
    {
        $this->_setOftenusedTargets('facilitygroup', $user_id,
            $facilitygroup_ids);
    }

    /**
     * @param $user_id
     * @param $limit
     *
     * @return array
     */
    function getFacilityGroupHistory($user_id, $limit = -1)
    {
        return $this->_getHistoryTargets('facilitygroup', $user_id, $limit);
    }

    /**
     * @param $user_id
     * @param $limit
     *
     * @return array
     */
    function getFacilityHistory($user_id, $limit = -1)
    {
        return $this->_getHistoryTargets('facility', $user_id, $limit);
    }

    /**
     * @param $user_id
     */
    function clearFacilityGroupHistory($user_id = null)
    {
        $this->_clearHistoryTarget('facilitygroup', $user_id);
    }

    /**
     * @param $user_id
     */
    function clearFacilityHistory($user_id = null)
    {
        $this->_clearHistoryTarget('facility', $user_id);
    }

    /**
     * @param $user_id
     * @param $facilitygroup_ids
     */
    function selectFacilityGroups($user_id, $facilitygroup_ids)
    {
        $this->_selectTargets('facilitygroup', $user_id, $facilitygroup_ids);
    }

    /**
     * @param $user_id
     * @param $facility_ids
     */
    function selectFacilities($user_id, $facility_ids)
    {
        $this->_selectTargets('facility', $user_id, $facility_ids);
    }

    /**
     * @param $user_id
     * @param $target_name
     */
    function _getMaxHistory($user_id, $target_name)
    {
        assert('in_array( $target_name, array( \'facility\', \'facilitygroup\' ) )');

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getUser($user_id);

        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();
        $config = $manager->getUserConfig($user);

        switch ($target_name) {
            case 'facility':
                return $config->getMaxHistoryFacility();
                break;
            case 'facilitygroup':
                return $config->getMaxHistoryFacilityGroup();
        }
    }

    /**
     * @param $login
     * @param $event
     */
    function updateHistory($login, $event)
    {
        $facility_ids = [];
        if (is_array($event->facilities)) {
            foreach ($event->facilities as $facility) {
                $facility_ids[] = $facility->getOID();
            }
        }
        $fsl = GRN_Facility_SystemLogic::getInstance();
        $fg_ids = $fsl->getFacilityGroupRelation($facility_ids);

        $this->selectFacilities($login->getOID(), $facility_ids);
        $this->selectFacilityGroups($login->getOID(), $fg_ids);
    }
}

