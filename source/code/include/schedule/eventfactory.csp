<?php
/**
 *
 * @author      A.Shima
 * @package     grn.schedule
 */

require_once('schedule/resources.csp');
require_once('grn/application.csp');
require_once('schedule/utility.csp');

use grn\schedule\bean\AttendanceStatus;
use grn\schedule\ScheduleMemberLogic;

/**
 * @package     grn.schedule
 */
class GRN_Schedule_EventFactory
{
    const MEMBER_TYPE_USER = "user";
    const MEMBER_TYPE_GROUP = "group";
    const MEMBER_TYPE_FACILITY = "facility";

    private $_user_normal_event_cache = [];
    private $_user_daily_event_cache = [];

    /**
     * Use {@link GRN_ScheduleEventFactory::getInstance}
     * to obtaint the singleton instance.
     *
     * @access private
     */
    function __construct()
    {
    }

    /**
     *
     * @var GRN_Schedule_EventFactory
     */
    private static $_instance = null;

    /**
     * @return GRN_Schedule_EventFactory
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    private $_db = null;

    /**
     * @access private
     */
    function _getDBConnection()
    {
        // 初期化されいなければ初期化
        if (is_null($this->_db)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_db = $app_locator->getConnection('schedule');
        }

        return $this->_db;
    }

    /**
     * @access private
     */
    private $_eventtable = null;

    function _getEventTable()
    {
        if (is_null($this->_eventtable)) {
            require_once('schedule/table.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('schedule');

            $this->_eventtable = $tm->getTableInfo(GRN_SCHEDULEEVENT);
        }

        return $this->_eventtable;
    }


    /**
     * 予定の詳細の取得
     *
     * @param   string  $eid       イベントID
     * @param   CB_Date $date      日付
     * @param   int     $lock_mode DBのロックモード
     * @param   int     $get_mode
     *
     * @return  mixed       成功した場合は予定の詳細オブジェクト、それ以外はFALSE
     */
    function getEvent(
        $eid,
        $date = null,
        $lock_mode = CB_DATABASE_SHARED_LOCK,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_OBJECT
    ) {
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            $___ret = false;

            return $___ret;
        }

        $event_type = $eventrow->get(GRN_SCHEDULE_EVENT_TYPE);

        $logic = null;
        // 通常
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
            == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            require_once('schedule/normal_event_logic.csp');
            $logic = GRN_Schedule_NormalEventLogic::getInstance();
        } // 繰り返し
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
                == GRN_SCHEDULE_EVENT_TYPE_REPEAT
        ) {
            require_once('schedule/repeat_event_logic.csp');
            $logic = GRN_Schedule_RepeatEventLogic::getInstance();
        } // 仮予定
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
        ) {
            require_once('schedule/temporary_event_logic.csp');
            $logic = GRN_Schedule_TemporaryEventLogic::getInstance();
        } // バナー
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                == GRN_SCHEDULE_EVENT_TYPE_BANNER
        ) {
            require_once('schedule/banner_event_logic.csp');
            $logic = GRN_Schedule_BannerEventLogic::getInstance();
        } // それ以外の予定は実装されていない
        else {
            {
                $___ret = false;

                return $___ret;
            }
        }

        $event = $logic->getEvent($eid, $date, $lock_mode, $get_mode);

        return $event;
    }

    /**
     * 指定された参加者がほかの予定と時刻がぶつかっているかをチェックする
     *
     * @param       CB_User     $user          ログインユーザー
     * @param       array       $members       チェックするメンバー
     * @param       CB_DateTime $setdatetime   開始日時
     * @param       CB_DateTime $enddatetime   開始日時
     * @param       string      $event_id      イベントID
     * @param       int         $event_type    イベントの種類
     * @param       boolean     $hiddenprivate 非公開を隠すかどうか
     *
     * @return      array   チェックした結果。
     */
    function conflictMembersEvent(
        $user,
        $members,
        $setdatetime,
        $enddatetime,
        $event_id,
        $event_type,
        $hiddenprivate
    ) {
        $logic = null;
        // 通常
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
            == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            require_once('schedule/normal_event_logic.csp');
            $logic = GRN_Schedule_NormalEventLogic::getInstance();
        } // 繰り返し
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
                == GRN_SCHEDULE_EVENT_TYPE_REPEAT
        ) {
            require_once('schedule/repeat_event_logic.csp');
            $logic = GRN_Schedule_RepeatEventLogic::getInstance();
        } // 仮予定
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
        ) {
            require_once('schedule/temporary_event_logic.csp');
            $logic = GRN_Schedule_TemporaryEventLogic::getInstance();
        } // バナー
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                == GRN_SCHEDULE_EVENT_TYPE_BANNER
        ) {
            require_once('schedule/banner_event_logic.csp');
            $logic = GRN_Schedule_BannerEventLogic::getInstance();
        } // それ以外の予定は実装されていない
        else {
            return false;
        }

        return $logic->conflictMembersEvent($user, $members, $setdatetime,
            $enddatetime, $event_id, $hiddenprivate);
    }

    /**
     * 指定したイベントのイベントタイプを取得
     *
     * @param   string $eid
     *
     * @return  mixed   イベントがあった場合はその予定のタイプそれ以外はFALSE
     */
    function getEventType($eid)
    {
        $eventtable = $this->_getEventTable();
        $row = $eventtable->getRow($eid);
        if ( ! $row) {
            return false;
        }

        return $row->get(GRN_SCHEDULE_EVENT_TYPE);
    }

    /**
     * ユーザー/グループ/施設毎の予定のキャッシュ
     *
     * @param   array   $member_id_list           取得するユーザー/組織/施設のID
     * @param   string  $member_type              $member_idの種類
     * @param   mixed   $setdate                  開始日（CB_Data）または、開始日時（CB_DataTime）
     * @param   mixed   $enddate                  終了日（CB_Data）（この日を含める）または、終了日時（CB_DataTime）
     * @param   boolean $timezone_view            タイムゾーンを考慮するかどうか
     * @param   boolean $dailyevent               終日予定を含めるかどうか
     * @param   boolean $isEnableAttendanceStatus 出欠確認機能をチェックするかどうか
     * @param   string  $cache_suffix             アプリ毎のキャッシュに分ける場合に使用(e.g.電話メモポートレット)
     */
    public function loadAndCacheUserEventRelation(
        $member_id_list,
        $member_type,
        $setdate,
        $enddate,
        $timezone_view = false,
        $dailyevent = true,
        $isEnableAttendanceStatus = false,
        $cache_suffix = null
    ) {
        $db = $this->_getDBConnection();
        $_attendanceCheckForUser = false;
        $str_member = '';
        switch ($member_type) {
            case 'user':
                $str_member = "col_user IN (@A)";
                $_attendanceCheckForUser = true;
                break;
            case 'group':
                $str_member = "col_group IN (@A)";
                break;
            case 'facility':
                $str_member = "col_facility IN (@A)";
                break;
            default:
                return false;
        }

        // GRN2-2718
        // process date to get schedule
        if ($timezone_view) {
            $setdate_original = new CB_TimestampEx();
            $setdate_original->unix_ts = intval($setdate['timestamp']);
            $setdate_original_ex = $setdate_original->getDateTime();
            $setdate_timestamp = $setdate['timestamp'] - 86400;

            $enddate_original = new CB_TimestampEx();
            $enddate_original->unix_ts = intval($enddate['timestamp']);
            $enddate_original_ex = $enddate_original->getDateTime();
            $enddate_timestamp = $enddate['timestamp'] + 86400;
        } else {
            $setdate_timestamp = $setdate['timestamp'];
            $enddate_timestamp = $enddate['timestamp'];
        }

        $query = cb_queryf($db,
            "SELECT"
            . " d.col_event AS event"
            . " FROM"
            . " tab_grn_schedule_eventmember AS m,"
            . " tab_grn_schedule_eventdatetime AS d force index(idx_eventtime)"
            . " WHERE"
            . " m.col_event = d.col_event"
            . " AND m.{$str_member}"
            . " AND m.col_event_type_simple = 1"
            . " AND"
            . " ("
            . " ( d.col_setdatetime < '@S' AND d.col_enddatetime > '@S' )"
            . " OR"
            . " ( d.col_setdatetime = '@S' AND d.col_enddatetime = '@S' )"
            . " )", $member_id_list, $enddate_timestamp, $setdate_timestamp,
            $setdate_timestamp, $setdate_timestamp);

        $result = $db->query($query);
        $eventIds = [];
        while ($row = $db->fetch_assoc($result)) {
            $eventIds[$row['event']] = 1;
        }
        $db->free_result($result);

        $eventIds = array_keys($eventIds);
        $member_type_to_cache = $member_type;
        if ($cache_suffix) {
            $member_type_to_cache = $member_type_to_cache . "_" . $cache_suffix;
        }
        foreach ($member_id_list as $mid) {
            $this->_user_normal_event_cache[$member_type_to_cache . '_' . $mid]
                = [];
        }

        if (count($eventIds) > 0) {
            $query_select_conditions = '';
            $query_from_conditions = '';
            if ($_attendanceCheckForUser && $isEnableAttendanceStatus) {
                $query_select_conditions = ", e."
                                           . AttendanceStatus::ATTENDANCE_CHECK_FIELD
                                           . ", ats.col_status AS "
                                           . AttendanceStatus::ATTENDANCE_CHECK_STATUS;
                $query_from_conditions
                    = " LEFT JOIN tab_grn_schedule_event_attendance_status AS ats ON m.col_event = ats.col_event AND m.col_user=ats.col_user";
            }
            $query = cb_queryf($db,
                " SELECT"
                . " DISTINCT m.col_{$member_type} AS member,m.col_status, m.col_single, d.col_timezone, d.col_end_timezone, d.col_enddatetime, d.col_setdatetime, e._id,"
                . " e.col_creator_name, e.col_creator, e.col_detail, e.col_event_type, e.col_eventmenu,e.col_reserve_int2, e.col_private"
                . $query_select_conditions
                . " FROM"
                . " tab_grn_schedule_event AS e"
                . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event = e._id"
                . " LEFT JOIN tab_grn_schedule_eventdatetime AS d ON d.col_event = m.col_event"
                . $query_from_conditions
                . " WHERE"
                . " e._id IN (@A)"
                . " AND col_setdatetime <= '@S' AND col_enddatetime >= '@S'"
                . " AND m.col_{$member_type} IN (@A)"
                . " ORDER BY "
                . " d.col_setdatetime, d.col_enddatetime, e._id ASC", $eventIds,
                $enddate_timestamp, $setdate_timestamp, $member_id_list);

            $result = $db->query($query);
            while ($row = $db->fetch_assoc($result)) {
                $event = $this->row2event($row);
                $this->_user_normal_event_cache[$member_type_to_cache . '_'
                                                . $row['member']][]
                    = $event;
            }
            $db->free_result($result);
        }

        //daily events
        if ($dailyevent) {
            // process setdate move -1 day for search
            $setdate_original = new CB_Date();
            $setdate_original->parse($setdate['format']);
            $setdate_original_ex = new CB_DateEx($setdate_original);
            $setdate_tmp = new CB_DateEx($setdate_original);
            $setdate_tmp->moveDays(-1);
            $setdate_format = $setdate_tmp->format();
            // process setdate move +1 day for search
            $enddate_original = new CB_Date();
            $enddate_original->parse($enddate['format']);
            $enddate_original_ex = new CB_DateEx($enddate_original);
            $enddate_tmp = new CB_DateEx($enddate_original);
            $enddate_tmp->moveDays(1);
            $enddate_format = $enddate_tmp->format();

            $query_select_conditions = '';
            $query_from_conditions = '';
            if ($isEnableAttendanceStatus) {
                $query_select_conditions = ",e."
                                           . AttendanceStatus::ATTENDANCE_CHECK_FIELD
                                           . ", ats.col_status AS "
                                           . AttendanceStatus::ATTENDANCE_CHECK_STATUS;
                $query_from_conditions
                    = " LEFT JOIN tab_grn_schedule_event_attendance_status AS ats ON m.col_event = ats.col_event AND m.col_user=ats.col_user";
            }
            $query = cb_queryf($db,
                "SELECT "
                . "m.col_{$member_type} AS member, m.col_status , m.col_single ,d.col_timezone,d.col_end_timezone, d.col_enddate , d.col_setdate,d.col_timezone , e._id , "
                . "e.col_detail , e.col_event_type , e.col_eventmenu, e.col_reserve_int2 ,e.col_creator_name , e.col_creator, e.col_private"
                . $query_select_conditions
                . " FROM "
                . "("
                . " tab_grn_schedule_eventmember AS m "
                . " LEFT JOIN tab_grn_schedule_eventdate AS d "
                . "ON m.col_event_type BETWEEN '32' AND '64' "
                . " AND m." . $str_member
                . " AND d.col_event = m.col_event"
                . ")"
                . " LEFT JOIN tab_grn_schedule_event AS e ON m.col_event = e._id"
                . $query_from_conditions
                . " WHERE "
                . "( d.col_setdate <= '@S' AND d.col_enddate >= '@S')"
                . " ORDER BY "
                . " d.col_setdate, d.col_enddate, d.col_event", $member_id_list,
                $enddate_format, $setdate_format);

            $result = $db->query($query);
            foreach ($member_id_list as $mid) {
                $this->_user_daily_event_cache[$member_type . '_' . $mid] = [];
            }

            while ($row = $db->fetch_assoc($result)) {
                $event = $this->row2event($row);
                $eventIds[] = $row['_id'];
                $this->_user_daily_event_cache[$member_type . '_'
                                               . $row['member']][]
                    = $event;
            }
            $db->free_result($result);
        }
        //shared check
        if (count($eventIds) > 0) {
            $query = cb_queryf($db,
                'SELECT '
                . 'm._id,u.col_display_name '
                . 'FROM '
                . 'tab_grn_schedule_eventmember AS m '
                . 'LEFT JOIN tab_cb_user AS u ON m.col_user = u._id '
                . 'WHERE '
                . ' u.col_deleted IS NOT NULL '
                . 'AND col_event IN (@A)', $eventIds);

            $result = $db->query($query);
            $deleted_members = [];
            while ($row = $db->fetch_assoc($result)) {
                $deleted_members[] = $row['_id'];
            }
            $db->free_result($result);

            $deleted_condition = '';
            if (count($deleted_members) > 0) {
                $deleted_condition = cb_queryf($db, ' AND _id NOT IN (@A)',
                    $deleted_members);
            }
            $query = cb_queryf($db,
                'SELECT COUNT(*), col_event FROM tab_grn_schedule_eventmember WHERE col_event IN (@A)'
                . $deleted_condition . ' GROUP BY col_event', $eventIds);
            $result = $db->query($query);
            while ($row = $db->fetch_assoc($result)) {
                $event_id = $row['col_event'];

                if (intval($row['COUNT(*)']) > 1) {
                    $retval[$event_id] = true;
                    $this->_shared_list[$event_id] = $event_id;
                } else {
                    $retval[$event_id] = false;
                    $this->_single_list[$event_id] = $event_id;
                }
            }
            $db->free_result($result);
        }
    }

    private function row2event($row)
    {
        static $_datetime_cache = [];
        static $_event_cache = [];
        static $_timestampex = null;
        static $_datetimeex = null;

        unset($row['member']);
        $cacheKey = serialize($row);
        if (isset($_event_cache[$cacheKey])) {
            return $_event_cache[$cacheKey];
        }

        $event = [];
        $event['id'] = $row['_id'];
        $event['title']
            = grn_schedule_get_event_title($row['col_eventmenu'],
            $row['col_detail']);
        $event['event_menu'] = htmlspecialchars($row['col_eventmenu']);
        $event['event_menu_color'] = $row['col_reserve_int2'];

        //GTM-1625
        grn_schedule_createAttendanceStatusAttribute($row, $event);
        //end GTM-1625
        $event['event_detail'] = htmlspecialchars($row['col_detail']);

        $event['timezone'] = $row['col_timezone'];
        $event['end_timezone'] = $row['col_end_timezone'];

        //GRN2-3166
        if (array_key_exists('id_datetime', $row)) {
            $event['id_datetime'] = $row['id_datetime'];
        }
        //GRN2-3166
        if (array_key_exists("col_setdatetime", $row)) {
            if (is_null($_timestampex)) {
                $_timestampex = new CB_TimeStampEx();
            }

            $timestamp = clone $_timestampex;
            $timestamp->unix_ts
                = intval($row['col_setdatetime']);
            $datetime
                = $timestamp->getDateTime();
            $_datetime_cache[$row['col_setdatetime']] = $datetime;
            $event['setdatetime'] = $datetime;
            $event['setdatetime_timestamp'] = $row['col_setdatetime'];
            // get original date for star
            $event['star_date'] = $this->_getDateFormat($event['setdatetime']);
        } elseif (array_key_exists("col_setdate", $row)) {
            $setdatetime = new CB_DateTime();
            $setdatetime->parse($row['col_setdate'] . " 00:00:00");
            $setdatetime_ts = new CB_TimeStampEx(null, $event['timezone']);
            $setdatetime_ts->setDateTime($setdatetime);
            $setdatetime_ts->setTimezone(CB_I18N::getInstance()
                                                ->getCurrentTimezone());
            $datetime = $setdatetime_ts->getDateTime();

            $event['setdate'] = $datetime;
        }

        if (array_key_exists("col_enddatetime", $row)) {
            if (is_null($_timestampex)) {
                $_timestampex = new CB_TimeStampEx();
            }

            if (isset($_datetime_cache[$row['col_enddatetime']])) {
                $datetime = clone $_datetime_cache[$row['col_enddatetime']];
            } else {
                $timestamp = clone $_timestampex;
                $timestamp->unix_ts
                    = intval($row['col_enddatetime']);
                $datetime
                    = $timestamp->getDateTime();
                $_datetime_cache[$row['col_enddatetime']] = $datetime;
            }
            $event['enddatetime_timestamp'] = $row['col_enddatetime'];
            $event['enddatetime'] = $datetime;
        } elseif (array_key_exists("col_enddate", $row)) {
            $enddatetime = new CB_DateTime();
            $enddatetime->parse($row['col_enddate'] . " 23:59:00");
            $setdatetime_ts = new CB_TimeStampEx(null, $event['end_timezone']);
            $setdatetime_ts->setDateTime($enddatetime);
            $setdatetime_ts->setTimezone(CB_I18N::getInstance()
                                                ->getCurrentTimezone());
            $datetime = $setdatetime_ts->getDateTime();
            $event['enddate'] = $datetime;
        }

        $event['single'] = cb_at($row, 'col_single');
        $event['creator'] = $row['col_creator'];
        $event['creator_name'] = $row['col_creator_name'];
        $event['private'] = $row['col_private'];
        $event['event_type'] = $row['col_event_type'];
        $event['status'] = cb_at($row, 'col_status');

        //GTM-1627
        $event['attendance_status'] = array_key_exists('attendance_status',
            $row) ? $row['attendance_status'] : null;
        $event['attendees_num'] = array_key_exists('attendees_num', $row)
            ? $row['attendees_num'] : 0;
        $event['reply_num'] = array_key_exists('reply_num', $row)
            ? $row['reply_num'] : 0;
        //GTM-1627 end

        $_event_cache[$cacheKey] = $event;

        return $event;
    }


    /**
     * 時間の入っているイベントの一覧の取得
     *
     * @param   mixed   $member_id               ユーザー（組織/設備）
     * @param   string  $member_type
     * @param   mixed   $setdate                 取得期間（開始日）
     * @param   mixed   $enddate                 取得期間（終了日）
     * @param   string  $login_id                ログインユーザーのID
     * @param   boolean $hidden                  非公開のデータを取得するかどうか
     * @param   boolean $timezone_view           タイムゾーンを考慮するかどうか
     * @param   boolean $isEnableAttendanceCheck Attendance check function setting
     * @param   string  $cache_suffix            アプリ毎のキャッシュに分ける場合に使用(e.g.電話メモポートレット)
     *
     * @return  mixed       成功した場合は予定の配列、それ以外はFALSE
     */
    function getNormalEvents(
        $member_id,
        $member_type,
        $setdate,
        $enddate,
        $login_id,
        $hidden = false,
        $timezone_view = false,
        $isEnableAttendanceCheck = false,
        $cache_suffix = null
    ) {
        // リストの作成
        if (is_null($this->_hidden_list)) {
            $this->_hidden_list = [];
            $this->_private_list = [];
        }

        $b_facility = false;
        $str_member = '';
        $_attendanceCheckForUser = false;
        $db = $this->_getDBConnection();
        switch ($member_type) {
            case 'user':
                $str_member = cb_queryf($db, "col_user = '@S'",
                    $member_id);
                $_attendanceCheckForUser = true;
                break;
            case 'group':
                $str_member = cb_queryf($db, "col_group = '@S'", $member_id);
                break;
            case 'facility':
                $str_member = cb_queryf($db, "col_facility = '@S'", $member_id);
                // 施設の完全非公開はできない
                $hidden = false;
                $b_facility = true;
                break;
            default:
                return false;
        }

        // GRN2-2718
        // process date to get schedule
        if ($timezone_view) {
            $setdate_original = new CB_TimestampEx();
            $setdate_original->unix_ts = intval($setdate);
            $setdate_original_ex = $setdate_original->getDateTime();
            $setdate = $setdate - 86400;

            $enddate_original = new CB_TimestampEx();
            $enddate_original->unix_ts = intval($enddate);
            $enddate_original_ex = $enddate_original->getDateTime();
            $enddate = $enddate + 86400;
        }
        // GRN2-2718
        $temporary_facility_dates = [];
        $tmpevents = [];
        $member_type_to_cache = $member_type;
        if ($cache_suffix) {
            $member_type_to_cache = $member_type_to_cache . "_" . $cache_suffix;
        }
        if (array_key_exists($member_type_to_cache . '_' . $member_id,
            $this->_user_normal_event_cache)
        ) {
            $tmpevents = $this->_user_normal_event_cache[$member_type_to_cache
                                                         . '_' . $member_id];
        } else {
            $query = "SELECT"
                     . " DISTINCT d.col_event"
                     . " FROM"
                     . " tab_grn_schedule_eventmember AS m,"
                     . " tab_grn_schedule_eventdatetime AS d"
                     . " WHERE"
                     . " m.col_event = d.col_event"
                     . " AND m." . $str_member
                     . " AND m.col_event_type_simple = 1"
                     . " AND"
                     . " ("
                     . cb_queryf($db,
                    " ( d.col_setdatetime < '@S' AND d.col_enddatetime > '@S' )",
                    $enddate, $setdate)
                     . " OR"
                     . cb_queryf($db,
                    " ( d.col_setdatetime = '@S' AND d.col_enddatetime = '@S' )",
                    $setdate, $setdate)
                     . " )";

            $result = $db->query($query);
            $eventIds = [];
            while ($row = $db->fetch_assoc($result)) {
                $eventIds[] = $row['col_event'];
            }
            $db->free_result($result);

            if (count($eventIds) === 0) {
                return [];
            }
            //GRN2-3611
            // get date facility of temporary schedule
            if ($member_type == 'facility') {
                $query_tmp
                    = 'SELECT DISTINCT e._id,temp_re.col_date
                              FROM tab_grn_schedule_event AS e 
                              LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event = e._id
                              INNER JOIN tab_grn_schedule_temporaryeventrelation AS temp_re ON  e._id=temp_re.col_event AND m._id=temp_re.col_member WHERE '
                      . cb_queryf($db, "e._id IN (@S) AND m.col_facility='@S'",
                        implode(',', $eventIds), $member_id);
                $ret = $db->query($query_tmp);
                while ($row = $db->fetch_assoc($ret)) {
                    $temporary_facility_dates[$row['_id']][] = $row['col_date'];
                }
                $db->free_result($ret);
            }
            // end get date facility of temporary schedule
            //GRN2-3611
            $query = " SELECT"
                     . " DISTINCT m.col_status, m.col_single, d._id as id_datetime, d.col_timezone, d.col_end_timezone, d.col_enddatetime, d.col_setdatetime, e._id,"
                     . " e.col_creator_name, e.col_creator, e.col_detail, e.col_event_type, e.col_eventmenu, e.col_reserve_int2, e.col_private";
            if ($_attendanceCheckForUser && $isEnableAttendanceCheck) {
                $query .= ",e." . AttendanceStatus::ATTENDANCE_CHECK_FIELD
                          . ", ats.col_status AS "
                          . AttendanceStatus::ATTENDANCE_CHECK_STATUS;
            }

            $query .= " FROM"
                      . " tab_grn_schedule_event AS e"
                      . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event = e._id AND m."
                      . $str_member
                      . " LEFT JOIN tab_grn_schedule_eventdatetime AS d ON d.col_event = m.col_event";
            if ($_attendanceCheckForUser && $isEnableAttendanceCheck) {
                $query .= " LEFT JOIN tab_grn_schedule_event_attendance_status ats ON m.col_event = ats.col_event AND m.col_user = ats.col_user";
            }

            $query .= " WHERE"
                      . cb_queryf($db, " e._id IN (@S)",
                    implode(',', $eventIds))
                      . cb_queryf($db,
                    " AND col_setdatetime <= '@S' AND col_enddatetime >= '@S'",
                    $enddate, $setdate)
                      . " ORDER BY "
                      . " d.col_setdatetime, d.col_enddatetime, e._id ASC";

            $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

            $result = $db->query($query);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            while ($row = $db->fetch_assoc($result)) {
                $event = $this->row2event($row);
                $tmpevents[] = $event;
            }
            $db->free_result($result);
        }

        $events = [];
        $shared_ids = [];
        $hidden_ids = [];
        $creators = [];

        $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
        foreach ($tmpevents as $event) {
            $eid = $event['id'];
            if (($event['setdatetime_timestamp'] < $setdate
                 && $event['enddatetime_timestamp'] == $setdate)
                || $event['enddatetime_timestamp'] < $setdate
                || $event['setdatetime_timestamp'] > $enddate
            ) {
                continue;
            }
            //GRN2-3611
            // check temporary schedule using facility
            if ($member_type == 'facility'
                && count($temporary_facility_dates) > 0
                && ($event['event_type'] & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                   == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
            ) {
                if (array_key_exists($eid, $temporary_facility_dates)) {
                    if (array_key_exists('id_datetime', $event) == true
                        && array_search($event['id_datetime'],
                            $temporary_facility_dates[$eid]) === false
                    ) {
                        continue;
                    }
                }
            }
            //GRN2-3611

            // GRN2-2718
            if ($timezone_view) {
                if ($this->_compareDate($setdate_original_ex,
                        $event['enddatetime']) > 0
                    || $this->_compareDate($enddate_original_ex,
                        $event['setdatetime']) <= 0
                ) {
                    $setdate_tmp
                        = grn_schedule_convert_datetime_tz1_to_tz2($event['setdatetime'],
                        $current_tz, $timezone_view);
                    $enddate_tmp
                        = grn_schedule_convert_datetime_tz1_to_tz2($event['enddatetime'],
                        $current_tz, $timezone_view);
                    if ($setdate_original_ex->compare($enddate_tmp) > 0
                        || $enddate_original_ex->compare($setdate_tmp) <= 0
                    ) {
                        continue;
                    } else // get for convert timezone
                    {

                        $event['setdatetime'] = $setdate_tmp;
                        $event['enddatetime'] = $enddate_tmp;
                        $event['for_only_view_tz'] = 1;
                    }
                }
            }
            // GRN2-2718

            if ($event['single'] == 1) {
                $event['share'] = false;
            } else {
                $shared_ids[$eid] = $eid;
                $event['share'] = true;
            }

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            // uumを使って、cretorが削除ユーザーかどうかのチェック。
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }

            if ( ! is_null($event['creator'])) {
                $creators[$event['creator']] = $event['creator'];
            }

            if ($event['private'] != 0) {
                // 登録者の場合
                if ($event['creator'] == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } // 自分の予定の場合
                elseif ($member_type == 'user' && $member_id == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } else {
                    $hidden_ids[$eid] = $eid;
                }
            } else {
                $event['private'] = GRN_EVENT_PRIVATE_NONE;
            }

            $event_type = intval($event['event_type']);
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
                == GRN_SCHEDULE_EVENT_TYPE_REPEAT
            ) {
                $event['repeat'] = true;
            } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                      == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
            ) {
                $event['temporary'] = true;
            }

            //GRN2-2286
            if (is_null($event['status'])) {
                $event['absent'] = 0;
            } else {
                $event['absent'] = 1;
            }
            //GRN2-2286
            $events[] = $event;
        }

        // 非公開イベントのチェック
        if (count($hidden_ids) > 0) {
            $retval = $this->_isHidden($hidden_ids, $login_id);

            foreach (array_keys($events) as $key) {
                $event_id = $events[$key]['id'];

                if (array_key_exists($event_id, $retval)) {
                    if ($retval[$event_id] == GRN_EVENT_PRIVATE_HIDDEN) {
                        // 完全に隠す場合
                        if ($hidden) {
                            unset($events[$key]);
                        } else {
                            $events[$key]['private'] = GRN_EVENT_PRIVATE_HIDDEN;
                        }
                    } else {
                        $events[$key]['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    }
                }

            }
        }

        // 共有のチェック
        if (count($shared_ids) > 0) {
            $retval = $this->_isShered($shared_ids);

            foreach (array_keys($events) as $key) {
                $event_id = $events[$key]['id'];

                if (array_key_exists($event_id, $retval)) {
                    if ($retval[$event_id] !== true) {
                        $events[$key]['share'] = false;
                    }
                }

            }
        }

        // 施設の場合の一括の名前の取得
        if ($b_facility) {
            $retval = $this->_getUsersName($creators);
            foreach (array_keys($events) as $key) {
                $creator_id = $events[$key]['creator'];

                // DBにあるものはDBを優先する
                if (array_key_exists($creator_id, $retval)) {
                    $events[$key]['creator_name'] = $retval[$creator_id];
                }
            }
        }

        // OR仮予定の場合の重複の削除
        $events = $this->_removeTemporaryConflict($events);

        return $events;
    }

    /**
     * 時間の入っているイベントの一覧の取得(終了日時が0時00分の場合、1分過去の日時で表示する)
     *
     * @param   int     $member_id               ID(組織/設備)
     * @param   string  $member_type             $member_idの種類
     * @param   int     $setdate                 取得期間（開始日）
     * @param   int     $enddate                 取得期間（終了日）
     * @param   string  $login_id                ログインユーザーのID
     * @param   boolean $hidden                  非公開のデータを取得するかどうか
     * @param   boolean $timezone_view           タイムゾーンを考慮するかどうか
     * @param   boolean $isEnableAttendanceCheck Attendance check function setting
     * @param   string  $cache_suffix            アプリ毎のキャッシュに分ける場合に使用(e.g.電話メモポートレット)
     *
     * @return  array|false  成功した場合は予定の配列、それ以外はFALSE
     */
    public function getNormalEventsAndConvertToDisplay(
        $member_id,
        $member_type,
        $setdate,
        $enddate,
        $login_id,
        $hidden = false,
        $timezone_view = false,
        $isEnableAttendanceCheck = false,
        $cache_suffix = null
    ) {
        $events = $this->getNormalEvents($member_id, $member_type, $setdate,
            $enddate, $login_id, $hidden, $timezone_view,
            $isEnableAttendanceCheck, $cache_suffix);

        return $this->_convertToDisplayNormalEvents($events);
    }

    /**
     * @access private
     */
    function _removeTemporaryConflict($events)
    {
        $temp_list = [];
        foreach (array_keys($events) as $key) {
            $event_id = $events[$key]['id'];
            $event_type = $events[$key]['event_type'];
            if ($event_type != GRN_SCHEDULE_EVENT_TYPE_TEMPORARY) {
                continue;
            }

            if (array_key_exists($event_id, $temp_list)) {
                $event = $events[$key];
                foreach (array_keys($temp_list[$event_id]) as $temp_key) {
                    $temp = $temp_list[$event_id][$temp_key];
                    // 開始日時と終了日時がまったく一緒だったら削除
                    if ($event['setdatetime']->compare($temp['setdatetime'])
                        === 0
                        && $event['enddatetime']->compare($temp['enddatetime'])
                           === 0
                    ) {
                        unset($events[$key]);
                    }
                }
                // 重複でなかったら次の重複チェック候補に入れる
                if (array_key_exists($key, $events)) {
                    $temp_list[$event_id][] = $event;
                }
            } else {
                $temp_list[$event_id] = [];
                $temp_list[$event_id][] = $events[$key];
            }
        }
        unset($temp_list);

        return $events;
    }

    /**
     * @access private
     */
    private $_creators = null;

    /**
     * @access private
     */
    function _getUsersName($creators)
    {
        static $_uum = null;

        if (is_null($_uum)) {
            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            $this->_creators = [];
        }

        $retval = [];
        $user_ids = [];

        // 既に取得しているものはこちらで処理
        foreach (array_keys($creators) as $key) {
            if (array_key_exists($key, $this->_creators)) {
                $retval[$key] = $this->_creators[$key];
            } elseif ( ! is_null($key)) {
                $user_ids[$key] = $key;
            }
        }

        // 新規分を取得
        if (count($user_ids) > 0) {
            $usersinfo = $_uum->getUsersInfo($user_ids);
            foreach ($usersinfo as $key => $value) {
                $user = $_uum->getUser($key);
                $retval[$key]
                    = $_uum->getOnlyOneNameByUserObject($user);
                $this->_creators[$key] = $retval[$key];
            }
        }

        return $retval;
    }

    /**
     * 終日+バナー予定の一覧の取得
     *
     * @param   string  $member_id               ユーザー（組織/設備）のID
     * @param   string  $member_type
     * @param   CB_Date $setdate                 取得期間（開始日）
     * @param   CB_Date $enddate                 取得期間（終了日）
     * @param   string  $login_id                ログインユーザーのID
     * @param   boolean $timezone_view
     * @param   boolean $isEnableAttendanceCheck Attendance check function setting
     *
     * @return  mixed       成功した場合は予定の配列、それ以外はFALSE
     */
    function getDailyEvents(
        $member_id,
        $member_type,
        $setdate,
        $enddate,
        $login_id,
        $timezone_view = false,
        $isEnableAttendanceCheck = false
    ) {
        // リストの作成
        if (is_null($this->_hidden_list)) {
            $this->_hidden_list = [];
            $this->_private_list = [];
        }

        $b_facility = false;
        $str_member = '';
        $db = $this->_getDBConnection();
        //GTM-1625
        //Only support normal event
        $leftJoinAttendanceQuery = "";
        $selectAttendanceStatus = "";
        switch ($member_type) {
            case 'user':
                $str_member = cb_queryf($db, "col_user = '@S'", $member_id);
                if ($isEnableAttendanceCheck) {
                    $selectAttendanceStatus = " ,e."
                                              . AttendanceStatus::ATTENDANCE_CHECK_FIELD
                                              . ", ats.col_status AS "
                                              . AttendanceStatus::ATTENDANCE_CHECK_STATUS;
                    $leftJoinAttendanceQuery
                        = " LEFT JOIN tab_grn_schedule_event_attendance_status AS ats ON m.col_event=ats.col_event AND m.col_user=ats.col_user";
                }
                break;
            case 'group':
                $str_member = cb_queryf($db, "col_group = '@S'", $member_id);
                break;
            case 'facility':
                return [];
            default:
                return false;
        }

        // process setdate move -1 day for search
        $setdate_original = new CB_Date();
        $setdate_original->parse($setdate);
        $setdate_original_ex = new CB_DateEx($setdate_original);
        $setdate_tmp = new CB_DateEx($setdate_original);
        $setdate_tmp->moveDays(-1);
        $setdate = $setdate_tmp->format();
        // process setdate move +1 day for search
        $enddate_original = new CB_Date();
        $enddate_original->parse($enddate);
        $enddate_original_ex = new CB_DateEx($enddate_original);
        $enddate_tmp = new CB_DateEx($enddate_original);
        $enddate_tmp->moveDays(1);
        $enddate = $enddate_tmp->format();

        // member_type が user の場合は、col_userでジョインして削除フラグチェックを行う必要があるが、後で呼ばれる
        // isShered() の中でチェックを行っているので、ここではチェックしない。
        // creator の削除フラグチェックはチューニングのため、後でuumを使って行っている。
        //GRN-2286 : add select col_status in grn_schedule_eventmember
        $tmpevents = [];
        if (array_key_exists($member_type . '_' . $member_id,
            $this->_user_daily_event_cache)
        ) {
            $tmpevents = $this->_user_daily_event_cache[$member_type . '_'
                                                        . $member_id];
        } else {
            $query
                = "SELECT m.col_status , m.col_single ,d.col_timezone,d.col_end_timezone, d.col_enddate , d.col_setdate,d.col_timezone , e._id , e.col_detail , e.col_event_type , e.col_eventmenu, e.col_reserve_int2 ,e.col_creator_name , e.col_creator, e.col_private";
            $query .= $selectAttendanceStatus;
            $query .= " FROM (tab_grn_schedule_eventmember AS m  LEFT JOIN tab_grn_schedule_eventdate AS d ON m.col_event_type BETWEEN '32' AND '64' AND m.";
            $query .= $str_member;
            $query .= " AND d.col_event = m.col_event) LEFT JOIN tab_grn_schedule_event AS e ON m.col_event = e._id";
            $query .= $leftJoinAttendanceQuery;
            $query .= " WHERE ( d.col_setdate <= ";
            $query .= cb_queryf($db, "'@S'", $enddate);
            $query .= " AND d.col_enddate >= ";
            $query .= cb_queryf($db, "'@S'", $setdate);
            $query .= " ) ORDER BY d.col_setdate, d.col_enddate, d.col_event";
            $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

            $result = $db->query($query);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }
            while ($row = $db->fetch_assoc($result)) {
                $event = $this->row2event($row);
                $tmpevents[] = $event;
            }
            $db->free_result($result);
        }

        $events = [];
        $shared_ids = [];
        $hidden_ids = [];

        foreach ($tmpevents as $event) {
            $eid = $event['id'];
            if ($event['single'] == 1) {
                $event['share'] = false;
            } else {
                $shared_ids[$eid] = $eid;
                $event['share'] = true;
            }

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            // uumを使って、cretorが削除ユーザーかどうかのチェック。
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }

            // check date schedule
            $setdate_tmp = new CB_Date();
            $setdate_tmp->day = $event['setdate']->day;
            $setdate_tmp->month = $event['setdate']->month;
            $setdate_tmp->year = $event['setdate']->year;

            $enddate_tmp = new CB_Date();
            $enddate_tmp->day = $event['enddate']->day;
            $enddate_tmp->month = $event['enddate']->month;
            $enddate_tmp->year = $event['enddate']->year;
            // GRN2-2718
            if ($setdate_original_ex->compare($enddate_tmp) > 0
                || $enddate_original_ex->compare($setdate_tmp) < 0
            ) {
                if ($timezone_view) {
                    $setdate_tmp
                        = grn_schedule_convert_datetime_tz1_to_tz2($event['setdate'],
                        $event['timezone'], $timezone_view);
                    $enddate_tmp
                        = grn_schedule_convert_datetime_tz1_to_tz2($event['enddate'],
                        $event['timezone'], $timezone_view);
                    if ($setdate_original_ex->compare($enddate_tmp) > 0
                        || $enddate_original_ex->compare($setdate_tmp) < 0
                    ) {
                        continue;
                    } else // get for convert timezone
                    {
                        $event['setdate'] = $setdate_tmp;
                        $event['enddate'] = $enddate_tmp;
                        $event['for_only_view_tz'] = 1;
                    }
                } else {
                    continue;
                }
            }
            // GRN2-2284

            if ($event['private'] != 0) {
                // 登録者の場合
                if ($event['creator'] == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } // 自分の予定の場合
                elseif ($member_type == 'user' && $member_id == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } else {
                    $hidden_ids[$eid] = $eid;
                }
            } else {
                $event['private'] = GRN_EVENT_PRIVATE_NONE;
            }

            $event_type = intval($event['event_type']);
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
                == GRN_SCHEDULE_EVENT_TYPE_REPEAT
            ) {
                $event['repeat'] = true;
                $event['banner'] = false;
            } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                      == GRN_SCHEDULE_EVENT_TYPE_BANNER
            ) {
                $event['banner'] = true;
                $event['repeat'] = false;
            } else {
                $event['banner'] = false;
                $event['repeat'] = false;
            }

            $event['allday'] = true;

            //GRN2-2286
            if (is_null($event['status'])) {
                $event['absent'] = 0;
            } else {
                $event['absent'] = 1;
            }
            //GRN2-2286

            $events[] = $event;
        }

        // 非公開イベントのチェック
        if (count($hidden_ids) > 0) {
            $retval = $this->_isHidden($hidden_ids, $login_id);

            foreach (array_keys($events) as $key) {
                $event_id = $events[$key]['id'];

                if (array_key_exists($event_id, $retval)) {
                    if ($retval[$event_id] == GRN_EVENT_PRIVATE_HIDDEN) {
                        unset($events[$key]);
                    } else {
                        $events[$key]['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    }
                }

            }
        }

        // 共有のチェック
        if (count($shared_ids) > 0) {
            $retval = $this->_isShered($shared_ids);

            foreach (array_keys($events) as $key) {
                $event_id = $events[$key]['id'];

                if (array_key_exists($event_id, $retval)) {
                    if ($retval[$event_id] !== true) {
                        $events[$key]['share'] = false;
                    }
                }

            }
        }

        return $events;
    }

    /**
     * @access private
     */
    private $_shared_list = null;
    /**
     * @access private
     */
    private $_single_list = null;

    /**
     * @access private
     */
    private $_hidden_list = null;
    /**
     * @access private
     */
    private $_private_list = null;

    /**
     * 予定が共有かどうかをチェック
     *
     * @access private
     */
    function _isShered($eids)
    {
        if (is_null($this->_shared_list)) {
            $this->_shared_list = [];
        }
        if (is_null($this->_single_list)) {
            $this->_single_list = [];
        }

        $retval = [];
        $others = [];
        $db = $this->_getDBConnection();
        foreach ($eids as $key) {
            if (array_key_exists($key, $this->_shared_list)) {
                $retval[$key] = true;
            } elseif (array_key_exists($key, $this->_single_list)) {
                $retval[$key] = false;
            } else {
                $others[$key] = cb_queryf($db, "'@S'", $key);
            }
        }

        // 評価していないものがある場合
        if (count($others) > 0) {
            $others_query = implode(',', $others);

            // 先に削除フラグが立っているメンバーを知っておく
            $query
                = 'SELECT m._id,u.col_display_name FROM tab_grn_schedule_eventmember AS m '
                  .
                  'LEFT JOIN tab_cb_user AS u ON m.col_user = u._id ' .
                  'WHERE u.col_deleted IS NOT NULL AND col_event IN ('
                  . $others_query . ')';

            $result = $db->query($query);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            $deleted_members = [];
            while ($row = $db->fetch_assoc($result)) {
                $member_id = $db->escape($row['_id']);
                $deleted_members[] = "'" . $member_id . "'";
            }

            $deleted_condition = '';
            if (count($deleted_members) > 0) {
                $deleted_members_str = implode(',', $deleted_members);
                $deleted_condition = 'AND _id NOT IN ( '
                                     . $deleted_members_str . ' )';
            }

            // メンバーが2人（つ）あるかどうかでチェック
            $query
                = 'SELECT COUNT(*), col_event FROM tab_grn_schedule_eventmember WHERE col_event IN ('
                  . $others_query . ') ' . $deleted_condition
                  . ' GROUP BY col_event';
            $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

            $result = $db->query($query);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            $is_share = false;
            while ($row = $db->fetch_assoc($result)) {
                $event_id = $row['col_event'];

                if (intval($row['COUNT(*)']) > 1) {
                    $retval[$event_id] = true;
                    $this->_shared_list[$event_id] = $event_id;
                } else {
                    $retval[$event_id] = false;
                    $this->_single_list[$event_id] = $event_id;
                }
            }

            // 結果の開放
            $db->free_result($result);
        }

        return $retval;
    }

    /**
     * 非公開のパターンをチェック
     *
     * @access private
     */
    function _isHidden($eids, $login_id)
    {
        // リストの作成
        if (is_null($this->_hidden_list)) {
            $this->_hidden_list = [];
            $this->_private_list = [];
        }

        $retval = [];
        $check_list = [];
        $db = $this->_getDBConnection();
        foreach (array_keys($eids) as $key) {
            if (array_key_exists($key, $this->_private_list)) {
                $retval[$key] = GRN_EVENT_PRIVATE_PRIVATE;
                continue;
            }
            if (array_key_exists($key, $this->_private_list)) {
                $retval[$key] = GRN_EVENT_PRIVATE_HIDDEN;
                continue;
            }
            $check_list[$key] = cb_queryf($db, "'@S'", $key);
        }

        // 参加者として自分がいるかどうか
        if (count($check_list) > 0) {
            $query = implode(',', $check_list);
            $query
                = "SELECT COUNT(*), col_event from tab_grn_schedule_eventmember force index(idx_event_user) INNER JOIN tab_cb_user AS u ON tab_grn_schedule_eventmember.col_user = u._id AND u.col_deleted IS NULL WHERE ( col_event IN ("
                  . $query . ") ) AND col_user = ";
            $query .= cb_queryf($db, "'@S'", $login_id);
            $query .= " GROUP BY col_event";
            $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

            $result = $db->query($query);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            while ($row = $db->fetch_assoc($result)) {
                $event_id = $row['col_event'];
                if (intval($row['COUNT(*)']) !== 0) {
                    $this->_private_list[$event_id] = $event_id;
                    $retval[$event_id] = GRN_EVENT_PRIVATE_PRIVATE;
                    unset($check_list[$event_id]);
                }
            }
            // 結果の開放
            $db->free_result($result);
        }
        // 公開先のチェック
        if (count($check_list) > 0) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            /* @var \GRN_Uum $uum */
            $user = $uum->getUser($login_id);

            $notify_address_event_info = ScheduleMemberLogic::getInstance()
                                                            ->getEventInfoFromNotifyAddress($user,
                                                                $check_list);
            foreach (array_keys($check_list) as $check_event_id) {
                if (isset($notify_address_event_info[$check_event_id])
                    && $notify_address_event_info[$check_event_id]['count'] > 0
                ) {
                    $this->_private_list[$check_event_id] = $check_event_id;
                    $retval[$check_event_id]
                        = GRN_EVENT_PRIVATE_PRIVATE;
                    unset($check_list[$check_event_id]);
                } else {
                    $this->_hidden_list[$check_event_id] = $check_event_id;
                    $retval[$check_event_id]
                        = GRN_EVENT_PRIVATE_HIDDEN;
                    unset($check_list[$check_event_id]);
                }
            }
        }

        return $retval;
    }

    /**
     * 指定した期間の予定を取得する
     *
     * @param   string  $member_id               取得するユーザー/組織/施設のID
     * @param   string  $member_type             $member_idの種類
     * @param   mixed   $setdate                 開始日（CB_Data）または、開始日時（CB_DataTime）
     * @param   mixed   $enddate                 終了日（CB_Data）（この日を含める）または、終了日時（CB_DataTime）
     * @param   string  $login_id                ログインユーザーのID
     * @param   int     $type                    取得する予定の種類（GRN_SCHEDULE_EVENT_TYPE_NORMAL,GRN_SCHEDULE_EVENT_TYPE_BANNER,GRN_SCHEDULE_EVENT_TYPE_ALLDAYの組み合わせ）
     * @param   boolean $hidden                  非公開のデータを取得するかどうか
     * @param   boolean $b_checkconflict         予定の衝突のチェック
     * @param   boolean $timezone_view           タイムゾーンを考慮するか
     * @param   boolean $isEnableAttendanceCheck Attendance check function setting
     *
     * @return  array       予定の連想配列
     */
    function getEvents(
        $member_id,
        $member_type,
        $setdate,
        $enddate,
        $login_id,
        $type,
        $hidden = false,
        $b_checkconflict = true,
        $timezone_view = false,
        $isEnableAttendanceCheck = false
    ) {
        $events = [];

        if (($type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
            == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            $events['normal'] = $this->getNormalEvents(
                $member_id, $member_type, $setdate['timestamp'],
                $enddate['timestamp'], $login_id, $hidden,
                $timezone_view, $isEnableAttendanceCheck
            );
        }

        if (($type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
            == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
        ) {
            $events['daily'] = $this->getDailyEvents(
                $member_id, $member_type, $setdate['format'],
                $enddate['format'], $login_id, $timezone_view,
                $isEnableAttendanceCheck
            );
        }

        return $events;
    }

    /**
     * 1週間単位で予定を取得する
     *
     * @param   string  $member_id               取得するユーザー/組織/施設のID
     * @param   string  $member_type             $member_idの種類
     * @param   mixed   $setdate                 開始日（CB_Data）または、開始日時（CB_DataTime）
     * @param   mixed   $enddate                 終了日（CB_Data）（この日を含める）または、終了日時（CB_DataTime）
     * @param   string  $login_id                ログインユーザーのID
     * @param   int     $type                    取得する予定の種類（GRN_SCHEDULE_EVENT_TYPE_NORMAL,GRN_SCHEDULE_EVENT_TYPE_BANNER,GRN_SCHEDULE_EVENT_TYPE_ALLDAYの組み合わせ）
     * @param   boolean $hidden                  非公開のデータを取得するかどうか
     * @param   array   $dates                   取得する期間の日付のデータの配列
     * @param   boolean $b_checkconflict         予定の衝突のチェック
     * @param   boolean $timezone_view           タイムゾーンを考慮するかどうか
     * @param   boolean $isEnableAttendanceCheck Attendance check function setting
     *
     * @return  array       予定の連想配列
     */
    function getEventsForWeek(
        $member_id,
        $member_type,
        $setdate,
        $enddate,
        $login_id,
        $type,
        $hidden = false,
        $dates = null,
        $b_checkconflict = false,
        $timezone_view = false,
        $isEnableAttendanceCheck = false
    ) {
        // 日付がない場合は日付を作成
        if ( ! is_array($dates) || count($dates) == 0) {
            $dates = [];

            $dateex = new CB_DateEx($setdate);
            while ($dateex->compare($enddate) <= 0) {
                $tmp_date = clone $dateex;
                $dates[] = [
                    'date'   => $tmp_date,
                    'format' => $tmp_date->format()
                ];
                $dateex->moveDays(1);
            }
        }

        $events = $this->getEvents(
            $member_id, $member_type, $setdate, $enddate, $login_id, $type,
            $hidden, false, $timezone_view,
            $isEnableAttendanceCheck
        );

        $retval_allday = [];
        $retval_normal = [];

        foreach (array_keys($dates) as $key) {
            if (($type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
                == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
            ) {
                $retval_allday[$dates[$key]['format']]
                    = $this->_getDayEvents_AllDay($dates[$key]['date'],
                    $events['daily']);
            }

            if (($type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
                == GRN_SCHEDULE_EVENT_TYPE_NORMAL
            ) {
                $retval_normal[$dates[$key]['format']]
                    = $this->_getDayEvents_Normal($dates[$key]['date'],
                    $events['normal'], $b_checkconflict);
            }
        }

        $retval_banner = [];
        if (($type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
            == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
        ) {
            foreach (array_keys($events['daily']) as $key) {
                $event = &$events['daily'][$key];
                if (array_key_exists('banner', $event) && $event['banner']) {
                    $retval_banner[] = $event;
                }
            }
        }

        $retval = [];
        $current_tz = CB_I18N::getInstance()->getCurrentTimezone();

        if ($timezone_view && $timezone_view != $current_tz) {
            $retval['allday'] = $this->_convertToDisplayTimezone($member_id,
                $dates, $timezone_view, $retval_allday, 'allday');
            $retval['normal'] = $this->_convertToDisplayTimezone($member_id,
                $dates, $timezone_view, $retval_normal, 'normal');
            $retval['banner'] = $this->_convertToDisplayTimezone($member_id,
                $dates, $timezone_view, $retval_banner, 'banner');
        } else {
            $retval['allday'] = $this->_convertToDisplay($retval_allday,
                'allday');
            $retval['normal'] = $this->_convertToDisplay($retval_normal,
                'normal');
            $retval['banner'] = $this->_convertToDisplay($retval_banner,
                'banner');
        }

        return $retval;
    }

    // GRN35-113
    /*
     * change endtime 0:00 to 23:59
     */
    function _convertToDisplay($events, $type = '')
    {
        // for banner
        if ($type == 'banner') {
            foreach ($events as $sh_event) {
                $event = $sh_event;
                $event_enddate = &$event['enddate'];

                if ($event_enddate->hour == 0 && $event_enddate->minute == 0) {
                    $event_enddate->moveDays(-1);
                    $event_enddate->hour = 23;
                    $event_enddate->minute = 59;
                    $event_enddate->second = 0;
                }
            }
        } else {
            foreach ($events as $sh_date => $sh_events) {

                foreach ($sh_events as $sh_event) {
                    $event = $sh_event;
                    $allday = @$sh_event['allday'];
                    if ($allday) {
                        $event_enddate = &$event['enddate'];
                    } else {
                        $event_enddate = &$event['enddatetime'];
                    }

                    if (($event_enddate->hour == 0
                         && $event_enddate->minute == 0)
                        && $event['enddatetime']->compare($event['setdatetime'])
                           != 0
                    ) {
                        $event_enddate->moveDays(-1);
                        $event_enddate->hour = 23;
                        $event_enddate->minute = 59;
                        $event_enddate->second = 0;
                    }
                }
            }
        }

        return $events;
    }

    /**
     * 終了日時が0時00分の場合、1分過去の日時にセットする
     *
     * @param array $events // 予定データ
     *
     * @return array
     */
    private function _convertToDisplayNormalEvents(array $events)
    {
        foreach ($events as $event) {
            $event_enddate = &$event['enddatetime'];

            if (($event_enddate->hour == 0 && $event_enddate->minute == 0)
                && $event['enddatetime']->compare($event['setdatetime']) != 0
            ) {
                $event_enddate->moveDays(-1);
                $event_enddate->hour = 23;
                $event_enddate->minute = 59;
                $event_enddate->second = 0;
            }
        }

        return $events;
    }
    // GRN35-113
    /*
     * change to display timezone
     */
    function _convertToDisplayTimezone(
        $member_id,
        $dates,
        $timezone_view,
        $events,
        $type = ''
    ) {

        if ( ! $timezone_view) {
            return $events;
        }
        // get dates ranges
        $first_date_range = $dates[0]['date'];
        $last_date_range = $dates[count($dates) - 1]['date'];

        // convert
        $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
        $converted_event = [];
        $ret = [];
        // for banner
        if ($type == 'banner') {
            foreach ($events as $sh_event) {
                // append old event
                if ( ! @$sh_event['for_only_view_tz']) {
                    if ($this->_compareDate($first_date_range,
                            $sh_event['enddate']) <= 0
                        && $this->_compareDate($last_date_range,
                            $sh_event['setdate']) >= 0
                    ) {
                        $sh_event['only_view_tz']
                            = 1; // source schedule for convert timezone
                        $ret[] = $sh_event;
                    }
                }

                // check convert
                $key = sprintf('%s_%s_%s_$s', $member_id, $sh_event['id'],
                    $this->_getDateFormat($sh_event['setdate']),
                    $this->_getDateFormat($sh_event['enddate']));
                if (array_search($key, $converted_event) !== false) {
                    continue;
                }
                $converted_event[] = $key;

                // convert timezone
                $tz_event = $sh_event;
                $tz_event['only_view_tz'] = 2; // schedule has convert timezone
                $tz_event_setdate = $tz_event['setdate'];
                $tz_event_enddate = $tz_event['enddate'];
                if (@$sh_event['for_only_view_tz']) {
                    $tz_event_setdate_convert = $tz_event_setdate;
                    $tz_event_enddate_convert = $tz_event_enddate;
                } else {
                    $tz_event_setdate_convert
                        = grn_schedule_convert_datetime_tz1_to_tz2($tz_event_setdate,
                        $current_tz, $timezone_view);
                    $tz_event_enddate_convert
                        = grn_schedule_convert_datetime_tz1_to_tz2($tz_event_enddate,
                        $current_tz, $timezone_view);
                }
                $tz_event['setdate'] = $tz_event_setdate_convert;
                $tz_event['enddate'] = $tz_event_enddate_convert;
                $ret[] = $tz_event;
            }
        } // for normal and allday
        else {
            foreach ($events as $sh_date => $sh_events) {
                foreach ($sh_events as $sh_event) {
                    // for special sh for timezone
                    if ( ! ((array_key_exists('for_only_view_tz', $sh_event)
                        ? $sh_event['for_only_view_tz'] : null))
                    ) {
                        // append old event
                        $sh_event['only_view_tz']
                            = 1; // source schedule for convert timezone
                        $ret[$sh_date][] = $sh_event;
                    }

                    $allday = (array_key_exists('allday', $sh_event)
                        ? $sh_event['allday'] : null);
                    // check convert
                    if ($allday) {
                        $key = sprintf('%s_%s_%s_$s', $member_id,
                            $sh_event['id'],
                            $this->_getDateFormat($sh_event['setdate']),
                            $this->_getDateFormat($sh_event['enddate']));
                    } else {
                        // temporary schedule
                        if (($sh_event['event_type']
                             & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                            == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
                        ) {
                            $key = sprintf('%s_%s_%s_$s', $member_id,
                                $sh_event['id'],
                                $sh_event['setdatetime']->format(),
                                $sh_event['enddatetime']->format());
                        } else {
                            $key = sprintf('%s_%s_%s_$s', $member_id,
                                $sh_event['id'],
                                $this->_getDateFormat($sh_event['setdatetime']),
                                $this->_getDateFormat($sh_event['enddatetime']));
                        }
                    }
                    if (array_search($key, $converted_event) !== false) {
                        continue;
                    }
                    $converted_event[] = $key;

                    // convert timezone
                    $tz_event = $sh_event;
                    $tz_event['only_view_tz']
                        = 2; // schedule has convert timezone
                    if ($allday) {
                        $tz_event_setdate = $tz_event['setdate'];
                        $tz_event_enddate = $tz_event['enddate'];
                        $enddatetime_event = &$sh_event['enddate'];
                        $setdatetime_event = $sh_event['setdate'];
                    } else {
                        $tz_event_setdate = $tz_event['setdatetime'];
                        $tz_event_enddate = $tz_event['enddatetime'];
                        $enddatetime_event = &$sh_event['enddatetime'];
                        $setdatetime_event = $sh_event['setdatetime'];
                    }

                    if (array_key_exists('for_only_view_tz', $sh_event)) {
                        $tz_event_setdate_convert = $tz_event_setdate;
                        $tz_event_enddate_convert = $tz_event_enddate;
                    } else {
                        $tz_event_setdate_convert
                            = grn_schedule_convert_datetime_tz1_to_tz2($tz_event_setdate,
                            $current_tz, $timezone_view);
                        $tz_event_enddate_convert
                            = grn_schedule_convert_datetime_tz1_to_tz2($tz_event_enddate,
                            $current_tz, $timezone_view);
                    }
                    // GRN35-113
                    if ($tz_event_enddate_convert->hour == 0
                        && $tz_event_enddate_convert->minute == 0
                        && $tz_event_enddate_convert->compare($tz_event_setdate_convert)
                           != 0
                    ) {
                        $tz_event_enddate_convert->moveDays(-1);
                        $tz_event_enddate_convert->hour = 23;
                        $tz_event_enddate_convert->minute = 59;
                        $tz_event_enddate_convert->second = 0;
                    }

                    if ($enddatetime_event->hour == 0
                        && $enddatetime_event->minute == 0
                        && $enddatetime_event->compare($setdatetime_event) != 0
                    ) {
                        $enddatetime_event->moveDays(-1);
                        $enddatetime_event->hour = 23;
                        $enddatetime_event->minute = 59;
                        $enddatetime_event->second = 0;
                    }
                    // GRN35-113
                    // set new time
                    if ($allday) {
                        $tz_event['setdate'] = $tz_event_setdate_convert;
                        $tz_event['enddate'] = $tz_event_enddate_convert;
                    } else {
                        $tz_event['setdatetime'] = $tz_event_setdate_convert;
                        $tz_event['enddatetime'] = $tz_event_enddate_convert;
                    }

                    // create more sh for view with timezone
                    $tz_date_view = ($this->_compareDate($first_date_range,
                            $tz_event_setdate_convert) >= 0)
                        ? clone $first_date_range
                        : clone $tz_event_setdate_convert;;
                    while ($this->_compareDate($tz_date_view,
                            $tz_event_enddate_convert) <= 0) {
                        if ($this->_compareDate($last_date_range, $tz_date_view)
                            < 0
                        ) {
                            break;
                        }
                        $ret[$this->_getDateFormat($tz_date_view)][]
                            = $tz_event;
                        $tz_date_view->moveDays(1);
                    }
                }
            }
        }

        return $ret;
    }

    function _getDateFormat($date)
    {
        return sprintf('%04d-%02d-%02d', $date->year, $date->month, $date->day);
    }

    /**
     * 終日予定からデータを各日ごとに分解する
     *
     * @access private
     */
    function _getDayEvents_AllDay(& $date, & $events)
    {
        $dayevents = [];
        // 日付の比較
        foreach (array_keys($events) as $key) {
            $event = &$events[$key];

            if ($event['banner']) {
                continue;
            }

            if ($date->compare($event['enddate']) == 0) {
                $dayevents[] = $event;
                // 終わりの場合はリストから消す
                unset($events[$key]);
            } elseif ($date->compare($event['setdate']) >= 0) {
                $dayevents[] = $event;
            }
        }

        return $dayevents;
    }

    /**
     * 日付の比較
     *
     * @access private
     */
    function _compareDate($date1, $date2)
    {
        $ydiff = $date1->year - $date2->year;
        if ($ydiff !== 0) {
            return $ydiff;
        }

        $mdiff = $date1->month - $date2->month;
        if ($mdiff !== 0) {
            return $mdiff;
        }

        $ddiff = $date1->day - $date2->day;
        if ($ddiff !== 0) {
            return $ddiff;
        }

        return 0;
    }

    /**
     * 指定された日付の予定に分割する
     *
     * @access private
     */
    function _getDayEvents_Normal(& $date, & $events, $b_checkconflict)
    {
        $dayevents = [];
        // 日付の比較
        foreach (array_keys($events) as $key) {
            $event = &$events[$key];
            if ($event[AttendanceStatus::ATTENDANCE_CHECK_USING]
                && $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                   == AttendanceStatus::STATUS_ABSENT
            ) {
                continue;
            }
            if ($event['enddatetime']->compare($event['setdatetime']) != 0
                && $event['enddatetime']->hour == 0
                && $event['enddatetime']->minute == 0
                && $this->_compareDate($event['enddatetime'], $date) == 0
            ) {
                unset($events[$key]);
            } elseif ($this->_compareDate($event['enddatetime'], $date) <= 0) {
                if ($b_checkconflict) {
                    if ($this->_isConflict($dayevents, $event['setdatetime'])) {
                        $event['conflict'] = true;
                    } else {
                        $event['conflict'] = false;
                    }
                }
                $dayevents[] = $event;
                unset($events[$key]);
            } elseif ($this->_compareDate($event['setdatetime'], $date) <= 0) {
                if ($b_checkconflict) {
                    if ($this->_isConflict($dayevents, $event['setdatetime'])) {
                        $event['conflict'] = true;
                    } else {
                        $event['conflict'] = false;
                    }
                }
                $dayevents[] = $event;
            }
        }

        return $dayevents;
    }

    /**
     * 衝突マーク
     *
     * @access private
     */
    function _isConflict(& $events, $datetime)
    {
        foreach (array_keys($events) as $key) {
            $item = &$events[$key];
            $setdatetime = $item['setdatetime'];
            $enddatetime = $item['enddatetime'];

            // 開始時間が同じ場合は衝突
            if ($setdatetime->compare($datetime) == 0) {
                if ( ! array_key_exists('conflict', $item)
                     || $item['conflict'] == false
                ) {
                    // 1回目がチェックできないので入れ替え
                    $item['conflict'] = true;
                }

                return true;
            } elseif ($enddatetime->compare($datetime) > 0) {
                if ( ! array_key_exists('conflict', $item)
                     || $item['conflict'] == false
                ) {
                    // 1回目がチェックできないので入れ替え
                    $item['conflict'] = true;
                }

                return true;
            }

        }

        return false;
    }

    function getFacilitiesNameByEvent($eid)
    {
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        return $facility_logic->getFacilitiesNameByEvent($eid);
    }

    /**
     *
     * @param mixed $memberObject CB_User, CB_Group or GRN_Facility_Facility is given.
     *
     * @return string
     */
    public function convertMemberToType($memberObject)
    {
        if ($memberObject instanceof CB_User) {
            return self::MEMBER_TYPE_USER;
        } elseif ($memberObject instanceof CB_Group) {
            return self::MEMBER_TYPE_GROUP;
        } elseif ($memberObject instanceof GRN_Facility_Facility) {
            return self::MEMBER_TYPE_FACILITY;
        }
        assert(false);
    }

    /**
     * @param int   $schedule_type
     * @param int   $app_id    kintone_app_id
     * @param array $record_id kintone_app_record_ids
     * @param null  $setdate
     * @param null  $enddate
     * @param null  $member_id
     * @param null  $member_type
     * @param bool  $hidden
     * @param bool  $isEnableAttendanceCheck
     *
     * @return array
     */
    public function getEventsWithRelateKintone(
        $schedule_type,
        $app_id,
        $record_id = [],
        $setdate = null,
        $enddate = null,
        $member_id = null,
        $member_type = null,
        $hidden = false,
        $isEnableAttendanceCheck = false
    ) {
        $events = [];

        if (($schedule_type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
            == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            $events['normal'] = $this->getNormalEventsWithRelateKintone(
                $app_id, $record_id, $setdate['timestamp'],
                $enddate['timestamp'], $member_id, $member_type, $hidden,
                $isEnableAttendanceCheck
            );
        }

        if (($schedule_type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
            == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
        ) {
            $events['daily'] = $this->getDailyEventsWithRelateKintone(
                $app_id, $record_id, $setdate['format'], $enddate['format'],
                $member_id, $member_type, $hidden,
                $isEnableAttendanceCheck
            );
        }


        return $events;
    }

    /**
     * @param       $app_id
     * @param array $record_id
     * @param       $setdate
     * @param       $enddate
     * @param       $member_id
     * @param       $member_type
     * @param bool  $hidden
     * @param bool  $is_enable_attendance_check
     *
     * @return array
     */
    public function getNormalEventsWithRelateKintone(
        $app_id,
        $record_id = [],
        $setdate = null,
        $enddate = null,
        $member_id = null,
        $member_type = null,
        $hidden = false,
        $is_enable_attendance_check = false
    ) {
        // リストの作成
        if (is_null($this->_hidden_list)) {
            $this->_hidden_list = [];
            $this->_private_list = [];
        }

        $db = $this->_getDBConnection();

        $tmpevents = [];

        $query = "SELECT"
                 . " DISTINCT m.col_status, m.col_single, d._id as id_datetime, d.col_timezone, d.col_end_timezone, d.col_enddatetime, d.col_setdatetime, e._id,"
                 . " e.col_creator_name, e.col_creator, e.col_detail, e.col_event_type, e.col_eventmenu, e.col_reserve_int2, e.col_private"
                 . " FROM"
                 . " tab_grn_schedule_event AS e"
                 . " LEFT JOIN tab_grn_schedule_eventdatetime AS d ON d.col_event = e._id"
                 . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event = d.col_event"
                 . " LEFT JOIN tab_grn_schedule_app_relations AS r ON r.col_event = d.col_event"
                 . " WHERE";

        $attendance_check_for_user = false;
        if ( ! is_null($member_id)) {
            $attendance_check_for_user = true;
            $query = $query . cb_queryf($db,
                    " m.col_user = '@S'", $member_id);
        }

        if ( ! is_null($setdate) && is_null($enddate)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . " ("
                     . cb_queryf($db, " d.col_enddatetime > '@S'", $setdate)
                     . " OR"
                     . cb_queryf($db, " d.col_setdatetime = '@S'", $setdate)
                     . " )";
        }

        if ( ! is_null($enddate) && is_null($setdate)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . " ("
                     . cb_queryf($db, " d.col_setdatetime < '@S'", $enddate)
                     . " OR"
                     . cb_queryf($db, " d.col_enddatetime = '@S'", $enddate)
                     . " )";
        }

        if ( ! is_null($enddate) && ! is_null($setdate)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . " ("
                     . cb_queryf($db,
                    " ( d.col_setdatetime < '@S' AND d.col_enddatetime > '@S' )",
                    $enddate, $setdate)
                     . " OR"
                     . cb_queryf($db,
                    " ( d.col_setdatetime = '@S' AND d.col_enddatetime = '@S' )",
                    $setdate, $setdate)
                     . " )";
        }

        if (is_numeric($app_id)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . cb_queryf($db, " r.col_app_id = '@S'", $app_id);

            if (count($record_id) > 0) {
                $query = preg_match("/WHERE$/", $query) ? $query
                    : $query . " AND";
                $query = $query . cb_queryf($db, " r.col_record_id IN (@A)",
                        $record_id);
            }
        }

        $query = $query
                 . " ORDER BY d.col_setdatetime, d.col_enddatetime, e._id ASC";

        $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

        $result = $db->query($query);

        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $event = $this->row2event($row);
            $tmpevents[] = $event;
        }
        $db->free_result($result);

        $events = [];
        $shared_ids = [];
        $hidden_ids = [];
        $creators = [];

        foreach ($tmpevents as $event) {
            $eid = $event['id'];

            if ( ! is_null($setdate)
                 && $event['enddatetime_timestamp'] < $setdate
            ) {
                continue;
            }
            if ( ! is_null($enddate)
                 && $event['setdatetime_timestamp'] > $enddate
            ) {
                continue;
            }

            if ($event['single'] == 1) {
                $event['share'] = false;
            } else {
                $shared_ids[$eid] = $eid;
                $event['share'] = true;
            }

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            $login = $_uum->getLoginUser();
            $login_id = $login->getOID();

            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }

            if ( ! is_null($event['creator'])) {
                $creators[$event['creator']] = $event['creator'];
            }

            if ($event['private'] != 0) {
                // login_usr's schedule
                if ($event['creator'] == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } // login_user search self schedule
                elseif ($member_id == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } else {
                    $hidden_ids[$eid] = $eid;
                }
            } else {
                $event['private'] = GRN_EVENT_PRIVATE_NONE;
            }

            $event_type = intval($event['event_type']);
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
                == GRN_SCHEDULE_EVENT_TYPE_REPEAT
            ) {
                $event['repeat'] = true;
            } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                      == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
            ) {
                $event['temporary'] = true;
            }

            $events[] = $event;
        }

        if (count($hidden_ids) > 0) {
            $retval = $this->_isHidden($hidden_ids, $login_id);

            foreach (array_keys($events) as $key) {
                $event_id = $events[$key]['id'];

                if (array_key_exists($event_id, $retval)) {
                    if ($retval[$event_id] == GRN_EVENT_PRIVATE_HIDDEN) {
                        // 完全に隠す場合
                        if ($hidden) {
                            unset($events[$key]);
                        } else {
                            $events[$key]['private'] = GRN_EVENT_PRIVATE_HIDDEN;
                        }
                    } else {
                        $events[$key]['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    }
                }
            }
        }

        $events = $this->_removeTemporaryConflict($events);

        if ($attendance_check_for_user && $is_enable_attendance_check) {
            $this->setAttendanceInfo($events, $member_id);
        }

        return $events;
    }

    /**
     * @param       $app_id
     * @param array $record_id
     * @param       $setdate
     * @param       $enddate
     * @param       $member_id
     * @param       $member_type
     * @param bool  $hidden
     * @param bool  $is_enable_attendance_check
     *
     * @return array
     */
    public function getDailyEventsWithRelateKintone(
        $app_id,
        $record_id = [],
        $setdate = null,
        $enddate = null,
        $member_id = null,
        $member_type = null,
        $hidden = false,
        $is_enable_attendance_check = false
    ) {
        // リストの作成
        if (is_null($this->_hidden_list)) {
            $this->_hidden_list = [];
            $this->_private_list = [];
        }

        // process setdate move -1 day for search
        if ( ! is_null($setdate)) {
            $setdate_original = new CB_Date();
            $setdate_original->parse($setdate);
            $setdate_original_ex = new CB_DateEx($setdate_original);
            $setdate_tmp = new CB_DateEx($setdate_original);
            $setdate_tmp->moveDays(-1);
            $setdate = $setdate_tmp->format();
        }
        // process setdate move +1 day for search
        if ( ! is_null($enddate)) {
            $enddate_original = new CB_Date();
            $enddate_original->parse($enddate);
            $enddate_original_ex = new CB_DateEx($enddate_original);
            $enddate_tmp = new CB_DateEx($enddate_original);
            $enddate_tmp->moveDays(1);
            $enddate = $enddate_tmp->format();
        }

        $db = $this->_getDBConnection();

        $tmpevents = [];

        $query = "SELECT"
                 . " DISTINCT m.col_status, m.col_single, d.col_timezone, d.col_end_timezone, d.col_enddate, d.col_setdate, d.col_timezone, "
                 . " e._id, e.col_detail, e.col_event_type, e.col_eventmenu, e.col_reserve_int2, e.col_creator_name, e.col_creator, e.col_private"
                 . " FROM"
                 . " tab_grn_schedule_event AS e"
                 . " LEFT JOIN tab_grn_schedule_eventdate AS d ON  d.col_event = e._id "
                 . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event_type BETWEEN '32' AND '64' AND m.col_event = d.col_event "
                 . " LEFT JOIN tab_grn_schedule_app_relations AS r ON r.col_event = d.col_event"
                 . " WHERE";

        $attendance_check_for_user = false;
        if ( ! is_null($member_id)) {
            $attendance_check_for_user = true;
            $query = $query . cb_queryf($db,
                    " m.col_user = '@S'", $member_id);
        }

        if ( ! is_null($setdate) && is_null($enddate)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . cb_queryf($db, " d.col_setdate >= '@S'",
                    $setdate);
        }

        if ( ! is_null($enddate) && is_null($setdate)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . cb_queryf($db, " d.col_enddate <= '@S'",
                    $enddate);
        }

        if ( ! is_null($enddate) && ! is_null($setdate)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . cb_queryf($db,
                    " ( d.col_setdate <= '@S' AND d.col_enddate >= '@S' )",
                    $enddate, $setdate);
        }

        if (is_numeric($app_id)) {
            $query = preg_match("/WHERE$/", $query) ? $query : $query . " AND";
            $query = $query . cb_queryf($db, " r.col_app_id = '@S'", $app_id);

            if (count($record_id) > 0) {
                $query = preg_match("/WHERE$/", $query) ? $query
                    : $query . " AND";
                $query = $query . cb_queryf($db, " r.col_record_id IN (@A)",
                        $record_id);
            }
        }

        $query = $query . " ORDER BY d.col_setdate, d.col_enddate, e._id ASC";

        $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        while ($row = $db->fetch_assoc($result)) {
            $event = $this->row2event($row);
            $tmpevents[] = $event;
        }
        $db->free_result($result);

        $events = [];
        $shared_ids = [];
        $hidden_ids = [];

        foreach ($tmpevents as $event) {
            $eid = $event['id'];
            if ($event['single'] == 1) {
                $event['share'] = false;
            } else {
                $shared_ids[$eid] = $eid;
                $event['share'] = true;
            }

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            $login = $_uum->getLoginUser();
            $login_id = $login->getOID();

            // uumを使って、cretorが削除ユーザーかどうかのチェック。
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }

            // check date schedule
            $setdate_tmp = new CB_Date();
            $setdate_tmp->day = $event['setdate']->day;
            $setdate_tmp->month = $event['setdate']->month;
            $setdate_tmp->year = $event['setdate']->year;

            $enddate_tmp = new CB_Date();
            $enddate_tmp->day = $event['enddate']->day;
            $enddate_tmp->month = $event['enddate']->month;
            $enddate_tmp->year = $event['enddate']->year;

            if ( ! is_null($setdate)
                 && $setdate_original_ex->compare($enddate_tmp) > 0
            ) {
                continue;
            }
            if ( ! is_null($enddate)
                 && $enddate_original_ex->compare($setdate_tmp) < 0
            ) {
                continue;
            }

            if ($event['private'] != 0) {
                // 登録者の場合
                if ($event['creator'] == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } // 自分の予定の場合
                elseif ($member_type == 'user' && $member_id == $login_id) {
                    $event['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    $this->_private_list[$eid] = $eid;
                } else {
                    $hidden_ids[$eid] = $eid;
                }
            } else {
                $event['private'] = GRN_EVENT_PRIVATE_NONE;
            }

            $event_type = intval($event['event_type']);
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
                == GRN_SCHEDULE_EVENT_TYPE_REPEAT
            ) {
                $event['repeat'] = true;
                $event['banner'] = false;
            } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                      == GRN_SCHEDULE_EVENT_TYPE_BANNER
            ) {
                $event['banner'] = true;
                $event['repeat'] = false;
            } else {
                $event['banner'] = false;
                $event['repeat'] = false;
            }

            $event['allday'] = true;

            $events[] = $event;
        }

        // 非公開イベントのチェック
        if (count($hidden_ids) > 0) {
            $retval = $this->_isHidden($hidden_ids, $login_id);

            foreach (array_keys($events) as $key) {
                $event_id = $events[$key]['id'];

                if (array_key_exists($event_id, $retval)) {
                    if ($retval[$event_id] == GRN_EVENT_PRIVATE_HIDDEN) {
                        // 完全に隠す場合
                        if ($hidden) {
                            unset($events[$key]);
                        } else {
                            $events[$key]['private'] = GRN_EVENT_PRIVATE_HIDDEN;
                        }
                    } else {
                        $events[$key]['private'] = GRN_EVENT_PRIVATE_PRIVATE;
                    }
                }
            }
        }

        if ($attendance_check_for_user && $is_enable_attendance_check) {
            $this->setAttendanceInfo($events, $member_id);
        }

        return $events;
    }

    /**
     * @param     $login_id
     * @param     $enddate
     * @param     $type
     * @param     $status
     * @param     $limit
     * @param int $offset
     *
     * @return array
     */
    function getEventsAttendance(
        $login_id,
        $enddate,
        $type,
        $status,
        $limit = -1,
        $offset = 0
    ) {
        $events = [];

        if ($type == GRN_SCHEDULE_ATTENDANCE_LIST_SCENE_TYPE_ATTENDEES) {
            $eventsTmpNormal
                = $this->getNormalAttendanceEventsAttendees($login_id,
                $enddate['timestamp'], $status, $limit, $offset);
            $eventsTmpDaily
                = $this->getDailyAttendanceEventsAttendees($login_id,
                $enddate['format'], $status, $limit, $offset);
            $events = array_merge_recursive((array)$eventsTmpNormal,
                (array)$eventsTmpDaily);
        } elseif ($type == GRN_SCHEDULE_ATTENDANCE_LIST_SCENE_TYPE_REGISTRANT) {
            $eventsTmpNormal
                = $this->getNormalAttendanceEventsRegistrant($login_id,
                $enddate['timestamp'], $status, $limit, $offset);
            $eventsTmpDaily
                = $this->getDailyAttendanceEventsRegistrant($login_id,
                $enddate['format'], $status, $limit, $offset);
            $events = array_merge_recursive((array)$eventsTmpNormal,
                (array)$eventsTmpDaily);
        }

        return $events;
    }


    function getNormalAttendanceEventsAttendees(
        $login_id,
        $enddate,
        $status,
        $limit = -1,
        $offset = 0
    ) {

        $db = $this->_getDBConnection();

        $tmpevents = [];
        $query = "SELECT"
                 . " DISTINCT m.col_status, m.col_single,"
                 . " d._id as id_datetime, d.col_timezone, d.col_end_timezone, d.col_enddatetime, d.col_setdatetime,"
                 . " e._id, e.col_creator_name, e.col_creator, e.col_detail, e.col_event_type, e.col_eventmenu, e.col_reserve_int2, e.col_reserve_int3, e.col_private,"
                 . " s.col_status as attendance_status"
                 . " FROM"
                 . " tab_grn_schedule_eventdatetime AS d"
                 . " LEFT JOIN tab_grn_schedule_event AS e ON d.col_event = e._id"
                 . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event = d.col_event"
                 . " LEFT JOIN tab_grn_schedule_event_attendance_status AS s ON s.col_event = d.col_event AND s.col_user = m.col_user"
                 . " WHERE"
                 . " e.col_reserve_int3 = '1'";

        $query = $query . cb_queryf($db, " AND m.col_user = '@S'", $login_id);

        $query = $query . cb_queryf($db, " AND d.col_enddatetime >= '@S'",
                $enddate);

        switch ($status) {
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ALL:
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_NOT_REPLY:
                $query = $query . " AND s.col_status IS NULL";
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ATTEND:
                $query = $query . " AND s.col_status = '1'";
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ABSENT:
                $query = $query . " AND s.col_status = '0'";
                break;
            default:
                break;
        }


        $query = $query
                 . " ORDER BY d.col_setdatetime, d.col_enddatetime, e._id ASC";

        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $event = $this->row2event($row);
            $tmpevents[] = $event;
        }
        $db->free_result($result);

        $events = [];

        foreach ($tmpevents as $event) {

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }
            $events[] = $event;
        }

        return $events;
    }

    function getNormalAttendanceEventsRegistrant(
        $login_id,
        $enddate,
        $status,
        $limit = -1,
        $offset = 0
    ) {
        $db = $this->_getDBConnection();

        $tmpevents = [];
        $query = "SELECT"
                 . " MIN(d._id) as id_datetime,"
                 . " d.col_timezone, d.col_end_timezone, d.col_enddatetime, d.col_setdatetime,"
                 . " e._id, e.col_creator_name, e.col_creator, e.col_detail, e.col_event_type, e.col_eventmenu, e.col_reserve_int2, e.col_reserve_int3, e.col_private,"
                 . " COUNT(m.col_user) AS attendees_num, COUNT(s.col_status) AS reply_num"
                 . " FROM"
                 . " tab_grn_schedule_eventdatetime AS d"
                 . " LEFT JOIN tab_grn_schedule_event AS e ON d.col_event = e._id"
                 . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event = d.col_event"
                 . " LEFT JOIN tab_grn_schedule_event_attendance_status AS s ON s.col_event = d.col_event AND s.col_user = m.col_user"
                 . " LEFT JOIN tab_cb_user AS u ON u._id = m.col_user"
                 . " WHERE"
                 . " e.col_reserve_int3 = '1'"
                 . " AND u.col_deleted IS NULL";

        $query = $query . cb_queryf($db, " AND e.col_creator = '@S'",
                $login_id);
        $query = $query . cb_queryf($db, " AND d.col_enddatetime >= '@S'",
                $enddate);
        $query = $query
                 . " GROUP BY e._id, d.col_timezone, d.col_end_timezone, d.col_enddatetime, d.col_setdatetime";

        switch ($status) {
            case GRN_SCHEDULE_ATTENDANCE_LIST_REGISTRANT_SHOW_ALL:
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_REGISTRANT_SHOW_ALL_NOT_REPLY:
                $query = $query . " HAVING attendees_num <> reply_num";
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_REGISTRANT_SHOW_ALL_REPLY:
                $query = $query . " HAVING attendees_num = reply_num";
                break;
            default:
                break;
        }

        $query = $query
                 . " ORDER BY d.col_setdatetime, d.col_enddatetime, e._id ASC";

        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $event = $this->row2event($row);
            $tmpevents[] = $event;
        }
        $db->free_result($result);

        $events = [];

        foreach ($tmpevents as $event) {

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }

            $events[] = $event;
        }

        return $events;
    }

    public function getDailyAttendanceEventsAttendees(
        $login_id,
        $enddate,
        $status
    ) {
        $db = $this->_getDBConnection();

        $tmpevents = [];

        $query = "SELECT"
                 . " DISTINCT m.col_status, m.col_single,"
                 . " d.col_timezone, d.col_end_timezone, d.col_enddate, d.col_setdate,"
                 . " e._id, e.col_detail, e.col_event_type, e.col_eventmenu, e.col_reserve_int2, e.col_creator_name, e.col_creator, e.col_private, e.col_reserve_int3,"
                 . " s.col_status as attendance_status"
                 . " FROM"
                 . " tab_grn_schedule_eventdate AS d"
                 . " LEFT JOIN tab_grn_schedule_event AS e ON d.col_event = e._id"
                 . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event_type BETWEEN '32' AND '64' AND m.col_event = d.col_event"
                 . " LEFT JOIN tab_grn_schedule_event_attendance_status AS s ON s.col_event = d.col_event AND s.col_user = m.col_user"
                 . " WHERE"
                 . " e.col_reserve_int3 = '1'";
        $query = $query . cb_queryf($db, " AND m.col_user = '@S'", $login_id);

        $query = $query . cb_queryf($db, " AND d.col_enddate >= '@S'",
                $enddate);

        switch ($status) {
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ALL:
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_NOT_REPLY:
                $query = $query . " AND s.col_status IS NULL";
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ATTEND:
                $query = $query . " AND s.col_status = '1'";
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ABSENT:
                $query = $query . " AND s.col_status = '0'";
                break;
            default:
                break;
        }

        $query = $query . " ORDER BY d.col_setdate, d.col_enddate, e._id ASC";

        $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        while ($row = $db->fetch_assoc($result)) {
            $event = $this->row2event($row);
            $tmpevents[] = $event;
        }
        $db->free_result($result);

        $events = [];

        foreach ($tmpevents as $event) {

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }

            $event['allday'] = true;

            $events[] = $event;
        }

        return $events;
    }


    public function getDailyAttendanceEventsRegistrant(
        $login_id,
        $enddate,
        $status,
        $limit,
        $offset
    ) {
        $db = $this->_getDBConnection();

        $tmpevents = [];
        $query = "SELECT"
                 . " d.col_timezone, d.col_end_timezone, d.col_enddate, d.col_setdate,"
                 . " e._id, e.col_detail, e.col_event_type, e.col_eventmenu, e.col_reserve_int2, e.col_creator_name, e.col_creator, e.col_private, e.col_reserve_int3,"
                 . " COUNT(m.col_user) AS attendees_num, COUNT(s.col_status) AS reply_num"
                 . " FROM"
                 . " tab_grn_schedule_eventdate AS d"
                 . " LEFT JOIN tab_grn_schedule_event AS e ON d.col_event = e._id"
                 . " LEFT JOIN tab_grn_schedule_eventmember AS m ON m.col_event_type BETWEEN '32' AND '64' AND m.col_event = d.col_event"
                 . " LEFT JOIN tab_grn_schedule_event_attendance_status AS s ON s.col_event = d.col_event AND s.col_user = m.col_user"
                 . " LEFT JOIN tab_cb_user AS u ON u._id = m.col_user"
                 . " WHERE"
                 . " e.col_reserve_int3 = '1'"
                 . " AND u.col_deleted IS NULL";

        $query = $query . cb_queryf($db, " AND e.col_creator = '@S'",
                $login_id);
        $query = $query . cb_queryf($db, " AND d.col_enddate >= '@S'",
                $enddate);

        $query = $query
                 . " GROUP BY e._id, d.col_timezone, d.col_end_timezone, d.col_enddate, d.col_setdate";

        switch ($status) {
            case GRN_SCHEDULE_ATTENDANCE_LIST_REGISTRANT_SHOW_ALL:
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_REGISTRANT_SHOW_ALL_NOT_REPLY:
                $query = $query . " HAVING attendees_num <> reply_num";
                break;
            case GRN_SCHEDULE_ATTENDANCE_LIST_REGISTRANT_SHOW_ALL_REPLY:
                $query = $query . " HAVING attendees_num = reply_num";
                break;
            default:
                break;
        }

        $query = $query . " ORDER BY d.col_setdate, d.col_enddate, e._id ASC";

        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        while ($row = $db->fetch_assoc($result)) {
            $event = $this->row2event($row);
            $tmpevents[] = $event;
        }
        $db->free_result($result);

        $events = [];

        foreach ($tmpevents as $event) {
            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }

            $event['allday'] = true;

            $events[] = $event;
        }

        return $events;
    }

    /**
     * @param array $events
     * @param       $userId
     */
    public function setAttendanceInfo(array &$events, $userId)
    {
        if (empty($events)) {
            return;
        }

        $eventIds = [];
        foreach ($events as $event) {
            $eventIds[] = $event['id'];
        }

        $db = $this->_getDBConnection();
        $query = cb_queryf(
            $db,
            "SELECT event._id," .
            " event." . AttendanceStatus::ATTENDANCE_CHECK_FIELD . "," .
            " status.col_status AS " . AttendanceStatus::ATTENDANCE_CHECK_STATUS
            .
            " FROM tab_grn_schedule_event AS event" .
            " LEFT JOIN tab_grn_schedule_event_attendance_status AS status" .
            " ON status.col_event = event._id AND status.col_user = '@S'" .
            " WHERE event._id IN(@A)",
            $userId, $eventIds
        );
        $result = $db->query($query);

        $infos = [];
        while ($row = $db->fetch_assoc($result)) {
            $infos[$row['_id']] = $row;
        }
        $db->free_result($result);

        require_once('schedule/utility.csp');
        foreach ($events as &$event) {
            $info = cb_at($infos, $event['id']);
            if ( ! $info) {
                cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
            }
            grn_schedule_createAttendanceStatusAttribute($info, $event);
        }
    }

    /**
     * @param array $facility_ids
     * @param null  $enddate
     * @param int   $status
     * @param       $limit
     * @param int   $offset
     *
     * @return array
     */
    function getEventForApprovalList(
        $facility_ids = [],
        $enddate = null,
        $status = 0,
        $limit = -1,
        $offset = 0
    ) {
        $events = [];

        $db = $this->_getDBConnection();

        $tmpevents = [];

        if (is_null($enddate)) {
            $tsex = new CB_TimeStampEx();
            $enddate = $tsex->unix_ts;
        }

        $query = "SELECT DISTINCT"
                 . " m.col_facility as facility, m.col_member_list,"
                 . " d._id as id_datetime, d.col_timezone, d.col_end_timezone, d.col_enddatetime, d.col_setdatetime,"
                 . " e._id, e.col_creator_name, e.col_creator, e.col_event_type, e.col_private,"
                 . " u.col_using_purpose,"
                 . " a.col_facility_name, a.col_status as approval_status, a.col_using as approval_using, a._id as approval_id,"
                 . " ap.col_applying_user, ap.col_applying_user_name, ap.col_applying_time"
                 . " FROM"
                 . " tab_grn_schedule_eventmember AS m"
                 . " LEFT JOIN tab_grn_schedule_event_facility_approval AS a ON a.col_event = m.col_event AND a.col_facility = m.col_facility"
                 . " LEFT JOIN tab_grn_schedule_event AS e ON e._id = m.col_event"
                 . " LEFT JOIN tab_grn_schedule_eventdatetime AS d ON d.col_event = m.col_event"
                 . " LEFT JOIN tab_grn_schedule_event_facility_approval_using_purpose AS u ON u.col_event = m.col_event"
                 . " LEFT JOIN tab_grn_schedule_event_facility_approval_applying AS ap ON ap.col_event = m.col_event AND ap.col_facility = m.col_facility"
                 . " WHERE"
                 . " e.col_event_type = '1'"
                 . cb_queryf($db, " AND d.col_enddatetime >= '@S'", $enddate)
                 . cb_queryf($db, " AND m.col_facility IN (@A)", $facility_ids)
                 . " AND ( a._id = ( SELECT MAX(_id) FROM tab_grn_schedule_event_facility_approval WHERE m.col_event=col_event AND m.col_facility=col_facility) OR a._id IS NULL)";

        switch ($status) {
            case GRN_FACILITY_APPROVAL_LIST_SHOW_ALL:
                break;
            case GRN_FACILITY_APPROVAL_LIST_SHOW_NOT_PROCESSED:
                $query .= " AND ( a.col_using IS NULL OR a.col_using = '0' )";
                break;
            case GRN_FACILITY_APPROVAL_LIST_SHOW_APPROVE:
                $query .= " AND a.col_status = '1' AND a.col_using = '1'";
                break;
            default:
                break;
        }

        $query = $query
                 . " ORDER BY d.col_setdatetime, d.col_enddatetime, e._id, m.col_member_list  ASC";
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $event = [];
            $event['id'] = $row['_id'];
            $event['timezone'] = $row['col_timezone'];
            $event['end_timezone'] = $row['col_end_timezone'];
            $event['id_datetime'] = $row['id_datetime'];
            $event['creator'] = $row['col_creator'];
            $event['creator_name'] = $row['col_creator_name'];
            $event['private'] = $row['col_private'];
            $event['event_type'] = $row['col_event_type'];
            $event['using_purpose'] = $row['col_using_purpose'];
            $event['facility_name'] = $row['col_facility_name'];
            $event['facility'] = $row['facility'];
            $event['approval_status'] = $row['approval_status'];
            $event['approval_using'] = $row['approval_using'];
            $event['applying_user'] = $row['col_applying_user'];
            $event['applying_user_name'] = $row['col_applying_user_name'];

            $timestampex = new CB_TimeStampEx();
            $timestamp = clone $timestampex;
            $timestamp->unix_ts = intval($row['col_setdatetime']);
            $datetime = $timestamp->getDateTime();
            $event['setdatetime'] = $datetime;
            $event['setdatetime_timestamp'] = $row['col_setdatetime'];

            $timestampex = new CB_TimeStampEx();
            $timestamp = clone $timestampex;
            $timestamp->unix_ts = intval($row['col_enddatetime']);
            $datetime = $timestamp->getDateTime();
            $event['enddatetime_timestamp'] = $row['col_enddatetime'];
            $event['enddatetime'] = $datetime;

            if ( ! is_null($row['col_applying_time'])) {
                $timestampex = new CB_TimeStampEx();
                $timestamp = clone $timestampex;
                $timestamp->unix_ts = intval($row['col_applying_time']);
                $datetime = $timestamp->getDateTime();
            } else {
                $datetime = null;
            }
            $event['applying_time_timestamp'] = $row['col_applying_time'];
            $event['applying_time'] = $datetime;

            switch ($status) {
                case GRN_FACILITY_APPROVAL_LIST_SHOW_ALL:
                    //because at all result has three type  "not processed"、"approve"。 so do judgment again.
                    if ($row['approval_status'] == 1
                        && $row['approval_using'] == 1
                    ) {
                        $event['result_approval_status'] = 1;
                    } else {
                        $event['result_approval_status'] = -1;
                    }
                    break;
                case GRN_FACILITY_APPROVAL_LIST_SHOW_NOT_PROCESSED:
                    $event['result_approval_status'] = -1;
                    break;
                case GRN_FACILITY_APPROVAL_LIST_SHOW_APPROVE:
                    $event['result_approval_status'] = 1;
                    break;
                default :
                    break;
            }

            $tmpevents[] = $event;
        }
        $db->free_result($result);

        foreach ($tmpevents as $event) {

            global $G_container_base;
            $_uum = $G_container_base->getInstance('uum');
            if ( ! $_uum->getUser($event['creator'])) {
                $event['creator'] = null;
            }
            $events[] = $event;
        }

        return $events;
    }
}
