<?php

/**
 * Inspection for Netmeeting.
 *
 * @package grn.schedule
 *
 * @updated :
 *    2011/06/08 VCBSCH0010 Sync for V-CUBE
 */

class GRN_Netmeeting_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @return GRN_Netmeeting_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    private $_logger = null;

    private $_uum = null;

    function __construct()
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();

        parent::__construct('grn.schedule');

        $this->_logger = $logger_manager->getLogger($this->getModuleId());

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
    }

    public function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    public function isInfoEnabled()
    {
        return $this->_logger->isInfoEnabled();
    }

    /**
     * write an inspection log
     *
     * @param   string $action action name
     * @param   string $target target name
     * @param   array  $params log list array
     */
    public function writeInspectionLogNotice($action, $target, $params = [])
    {
        $this->_logger->noticeEx($action, $target, $params);
    }

    /**
     * write an inspection log
     *
     * @param   string $action action name
     * @param   string $target target name
     * @param   array  $params log list array
     */
    public function writeInspectionLogInfo($action, $target, $params = [])
    {
        $this->_logger->infoEx($action, $target, $params);
    }

    /**
     * write an warning log
     *
     * @param   string $target target name
     * @param   array  $params log list array
     */
    public function writeInspectionLogWarning($target, $params = [])
    {
        $this->_logger->warningEx($target, $params);
    }

    /**
     * write logs
     *
     * @param   int    $log_level priority log
     * @param   string $message   log message
     */
    public function writeInspectionLog(
        $log_level,
        $action = '',
        $prefix = '',
        $params
    ) {
        $message = '';
        if (is_string($params)) {
            $message = $params;
        } else {
            $message = $this->_logger->_createMessage($action, $prefix,
                $params);
        }
        switch ($log_level) {
            case CB_LOGGER_ERROR:
                $this->_logger->error($message);
                break;
            case CB_LOGGER_WARNING:
                $this->_logger->warning($message);
                break;
            default:
                break;
        }
    }
}


