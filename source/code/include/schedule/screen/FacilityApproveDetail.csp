<?php

namespace grn\schedule\screen;

use grn\grn\GrnGenericScreenBase;
use grn\schedule\screen\FacilityApproveDetailUtil;


class FacilityApproveDetail extends GrnGenericScreenBase
{
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty();
        $input = $this->getInput();
        $facilityApproveDetailUtil = new FacilityApproveDetailUtil();
        $facilityApproveDetailUtil->prepareForView($smarty, $input);

        $refererKey = cb_at($input, $facilityApproveDetailUtil::ARG_REFERER,
            null);
        $pageTitle = $facilityApproveDetailUtil->getTitle();
        $sessionManager = \CB_SessionManager::getInstance();
        $session = $sessionManager->getSession("schedule.referer");
        $breadCrumb = [];

        if ($refererKey && $referer = $session->get($refererKey)) {
            if (is_array($referer)) {
                $breadCrumb
                    = [
                    $referer,
                    [
                        $facilityApproveDetailUtil::ARG_PAGE     => $facilityApproveDetailUtil::ARG_APPROVAL_LIST_PATH,
                        $facilityApproveDetailUtil::ARG_NAME     => grn_get_page_display_name(
                            $facilityApproveDetailUtil::ARG_APPROVAL_LIST_PATH
                        ),
                        $facilityApproveDetailUtil::ARG_EVENT_ID => cb_at(
                            $input, $facilityApproveDetailUtil::ARG_EVENT_ID
                        ),
                        $facilityApproveDetailUtil::ARG_B_DATE   => cb_at(
                            $input, $facilityApproveDetailUtil::ARG_B_DATE
                        ),
                        $facilityApproveDetailUtil::ARG_REFERER  => $refererKey
                    ],
                    [
                        $facilityApproveDetailUtil::ARG_PAGE => $facilityApproveDetailUtil::ARG_EMPTY,
                        $facilityApproveDetailUtil::ARG_NAME => $pageTitle
                    ]
                ];

                $session->set($facilityApproveDetailUtil::ARG_CSRF_TICKET,
                    $referer);
            }
        } else {
            $app_locator = \GRN_Schedule_Application::getInstance();
            $breadCrumb
                = [
                [
                    $facilityApproveDetailUtil::ARG_PAGE => $facilityApproveDetailUtil::ARG_SCH_INDEX_PATH,
                    $facilityApproveDetailUtil::ARG_NAME => $app_locator->getDefaultName()
                ],
                [
                    $facilityApproveDetailUtil::ARG_PAGE     => $facilityApproveDetailUtil::ARG_APPROVAL_LIST_PATH,
                    $facilityApproveDetailUtil::ARG_NAME     => grn_get_page_display_name($facilityApproveDetailUtil::ARG_APPROVAL_LIST_PATH),
                    $facilityApproveDetailUtil::ARG_EVENT_ID => cb_at(
                        $input, $facilityApproveDetailUtil::ARG_EVENT_ID
                    ),
                    $facilityApproveDetailUtil::ARG_B_DATE   => cb_at($input,
                        $facilityApproveDetailUtil::ARG_B_DATE),
                    $facilityApproveDetailUtil::ARG_REFERER  => $refererKey
                ],
                [
                    $facilityApproveDetailUtil::ARG_PAGE => $facilityApproveDetailUtil::ARG_EMPTY,
                    $facilityApproveDetailUtil::ARG_NAME => $pageTitle
                ]
            ];
        }

        $smarty->assign($facilityApproveDetailUtil::ARG_SITE_POSITION,
            $breadCrumb);
        $exceptionMessage = $smarty->get_template_vars("exceptionMessage");

        if (isset($exceptionMessage)) {
            return $smarty->fetch('schedule/operation/facility_approve_delete_info.tpl');
        }

        return $smarty->fetch($facilityApproveDetailUtil::ARG_PATH . ".tpl");
    }

    /**
     * This is method support for operator administrator post approval a facility screen.
     *
     * @param mixed $input For suspend signature mismatch inheritance
     *
     * @return array|void
     */
    public function post($input = null)
    {
        $input = $this->getInput();
        $facilityApproveDetailUtil = new FacilityApproveDetailUtil();
        $facilityApproveDetailUtil->processForPost($input);
        $eventId = cb_at($input, $facilityApproveDetailUtil::ARG_EVENT_ID);
        $facilityId = cb_at($input,
            $facilityApproveDetailUtil::ARG_FACILITY_ID);
        $refererKey = cb_at($input, $facilityApproveDetailUtil::ARG_REFERER);
        cb_redirect(
            $facilityApproveDetailUtil::ARG_PATH,
            [
                $facilityApproveDetailUtil::ARG_FACILITY_ID => $facilityId,
                $facilityApproveDetailUtil::ARG_EVENT_ID    => $eventId,
                $facilityApproveDetailUtil::ARG_REFERER     => $refererKey
            ]
        );
    }

}
