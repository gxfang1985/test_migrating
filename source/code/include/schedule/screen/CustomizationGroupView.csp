<?php

namespace grn\schedule\screen;

use grn\grn\GrnGenericScreenBase;
use grn\grn\customization\bean\CustomizationGroup;
use grn\grn\customization\logic\CustomizationGroupLogic;
use grn\grn\customization\logic\InspectionUtil;
use grn\grn\customization\service\CustomizationGroupService;
use grn\grn\customization\service\ResourceService;
use grn\grn\customization\screen\CustomizationGroupTemplates;
use grn\grn\customization\service\CustomizationTargetService;


class CustomizationGroupView extends GrnGenericScreenBase
{
    private $groupId;
    private $customizationGroupService;
    private $resourceService;
    private $customizationTargetService;

    public function __construct($input)
    {
        $this->groupId = cb_at($input, "id");
        $this->customizationGroupService
            = new CustomizationGroupService('schedule');
        $this->resourceService = new ResourceService('schedule');
        $this->customizationTargetService
            = new CustomizationTargetService('schedule');

        parent::__construct($input);
    }

    public function fetch()
    {
        $login = cb_get_login_user();
        if ( ! $login) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $page_title = grn_get_current_page_display_name();
        $t->assign('page_title', $page_title);

        $t->assign('site_position', $this->getSitePosition());

        $resources
            = $this->resourceService->getJsCssResources(CustomizationGroupLogic::CUSTOMIZATION_TARGET_PREFIX
                                                        . $this->groupId);
        $t->assign('resource_js', $resources['js']);
        $t->assign('resource_css', $resources['css']);

        $customization_group
            = $this->customizationGroupService->getGroup($this->groupId);
        $t->assign("customization_group", $customization_group);

        $customization_targets
            = $this->customizationTargetService->getCustomizationTarget($this->groupId);
        $t->assign("customization_targets", $customization_targets);
        $t->assign("require_target", true);

        $t->assign("link_modify_page",
            "schedule/system/customization_group_modify");
        $t->assign("delete_info", $this->getDeleteInfo($customization_group));

        return $t->fetch(CustomizationGroupTemplates::TEMPLATE_NAME_GROUP_VIEW);
    }

    /**
     * @param CustomizationGroup $customization_group
     *
     * @return array
     */
    private function getDeleteInfo(CustomizationGroup $customization_group)
    {
        return [
            'title'      => grn_get_page_display_name('schedule/system/customization_group_delete'),
            'page'       => CustomizationGroupTemplates::TEMPLATE_NAME_GROUP_DELETE,
            'no_confirm' => false,
            'data'       => [
                "id"           => $customization_group->getId(),
                "name"         => $customization_group->getName(),
                "command_page" => $this->getCommandPage()
            ],
            'handler'    => 'lnk_delete'
        ];
    }

    /**
     * @param $input
     */
    public function post($input)
    {
        $id = cb_at($input, "id");
        $cmd = cb_at($input, "cmd");

        switch ($cmd) {
            case "delete":
                $group = $this->customizationGroupService->getGroup($id);
                $target
                    = CustomizationGroupLogic::CUSTOMIZATION_TARGET_PREFIX
                      . $id;
                $resources
                    = $this->resourceService->getResourcesByTarget($target);
                $file_names
                    = $this->resourceService->getFileNamesFromResources($resources);
                $applicable_targets
                    = $this->customizationTargetService->getCustomizationTarget($id);

                $this->customizationGroupService->removeGroup($id);

                $this->inspectionRecordForPost($group->getId(),
                    $group->getName(), $group->isActive(),
                    $applicable_targets->getCustomizationTargetList(),
                    $resources, $file_names);
                break;
        }

        cb_redirect($this->getRedirectPage(), []);
    }

    /**
     * @param string                            $id
     * @param string                            $name
     * @param  int                              $apply_status
     * @param array                             $targets
     * @param \grn\grn\customization\Resource[] $resources
     * @param array                             $file_names
     */
    private function inspectionRecordForPost(
        $id,
        $name,
        $apply_status,
        array $targets,
        array $resources,
        array $file_names
    ) {
        require_once('schedule/inspection.csp');
        $inspection = \GRN_Schedule_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_args = array_merge(
                [
                    'id'           => $id,
                    'name'         => $name,
                    'apply_status' => InspectionUtil::getApplyStatusLogValue($apply_status)
                ],
                InspectionUtil::getTargetLogParams($targets),
                InspectionUtil::getResourcesLogParams($resources, $file_names)
            );
            $inspection->record('delete', 'customization_group', $message_args);
        }
    }

    /**
     * @return string
     */
    private function getCommandPage()
    {
        return 'schedule/system/command_customization_group_view';
    }

    /**
     * @return string
     */
    private function getRedirectPage()
    {
        return "schedule/system/customization_group_list";
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                "page" => "schedule/system/customization_group_list",
                "name" => grn_get_page_display_name("schedule/system/customization_group_list")
            ],
            ["page" => "", "name" => grn_get_current_page_display_name()]
        ];
    }
}
