<?php

namespace grn\schedule\screen;

use grn\grn\customization\bean\ResourceForm;
use grn\grn\customization\logic\CustomizationGroupLogic;
use grn\grn\customization\logic\InspectionUtil;
use grn\grn\customization\screen\CustomizationGroupTemplates;
use grn\grn\customization\screen\ResourceScreen;
use grn\grn\customization\service\CustomizationGroupService;
use grn\grn\customization\service\ResourceService;
use grn\grn\customization\service\CustomizationTargetService;


class CustomizationGroupModify extends ResourceScreen
{
    private $groupId;

    private $customizationGroupService;
    private $resourceService;
    private $customizationTargetService;

    public function __construct($input)
    {
        $this->groupId = cb_at($input, "id");

        $this->customizationGroupService
            = new CustomizationGroupService('schedule');
        $this->resourceService = new ResourceService('schedule');
        $this->customizationTargetService
            = new CustomizationTargetService('schedule');

        parent::__construct($input);
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $resources
            = $this->resourceService->getJsCssResources($this->getTarget());
        $this->assignResources($t, $resources['js'], $resources['css']);

        $customization_group
            = $this->customizationGroupService->getGroup($this->groupId);
        $t->assign("customization_group", $customization_group);

        $customization_targets
            = $this->customizationTargetService->getCustomizationTarget($this->groupId);
        $customization_targets_value
            = $this->customizationTargetService->getCustomizationTargetValue($this->groupId);
        $t->assign("customization_targets",
            $customization_targets->getCustomizationTargetList());
        $t->assign("customization_targets_value", $customization_targets_value);
        $t->assign("selected_tid",
            $customization_targets->getCustomizationTargetSelected());
        $t->assign("users_info",
            $customization_targets->getCustomizationUserSelectedInfo());
        $t->assign("require_target", true);
        $t->assign("app_id", 'schedule');

        $this->assignApplyStatus($t, $customization_group->isActive());

        $this->assignStaticPart($t);

        include('grn/_upload_prepend.csp');

        return $t->fetch(CustomizationGroupTemplates::TEMPLATE_NAME_GROUP_MODIFY);
    }

    /**
     * @param $input
     */
    protected function modifyGroup($input)
    {
        $name = cb_at($input, "name");
        $apply_status = cb_at($input, "apply_status");
        $apply_status = ($apply_status == '1') ? 1 : 0;

        $customization_group
            = $this->customizationGroupService->getGroup($this->groupId);
        $customization_group->setName($name);
        $customization_group->setIsActive($apply_status);

        /* @var \CB_User $login_user */
        $login_user = cb_get_login_user();
        $customization_group->setModifier($login_user->getOID());
        $customization_group->setModifierForeignKey($login_user->get("foreign_key"));
        $customization_group->setModifierName($login_user->get("display_name"));
        $this->customizationGroupService->modifyGroup($customization_group);
    }

    /**
     * @param $input
     *
     * @return array
     */
    protected function modifyTargets($input)
    {
        $dynamic_role = cb_at($input,
            CustomizationTargetService::POST_KEY_DYNAMIC_ROLE, null);
        $static_role = cb_at($input,
            CustomizationTargetService::POST_KEY_STATIC_ROLE, null);
        $group = cb_at($input,
            CustomizationTargetService::POST_KEY_GROUP, null);
        $user = cb_at($input, CustomizationTargetService::POST_KEY_USER,
            null);

        $targets
            = $this->customizationTargetService->formatCustomizationTargetValue($dynamic_role,
            $static_role, $group, $user);
        $customization_targets
            = $this->customizationTargetService->getCustomizationTarget($this->groupId);
        $customization_targets->setCustomizationTargetList($targets);
        $this->customizationTargetService->updateCustomizationTarget($this->groupId,
            $customization_targets);

        return $customization_targets->getCustomizationTargetList();
    }

    /**W
     *
     * @param $input
     */
    public function post($input)
    {
        $this->modifyGroup($input);
        $targets = $this->modifyTargets($input);

        $form = new ResourceForm($input);
        $new_resources
            = $this->resourceService->updateResources($this->getTarget(),
            $form);
        $file_names
            = $this->resourceService->getFileNamesFromResources($new_resources);

        $apply_status = null;
        if (count($new_resources) > 0) {
            $apply_status = cb_at($input, 'apply_status');
            $apply_status = ($apply_status == '1') ? 1 : 0;
        }

        $this->customizationGroupService->modifyApplyStatus($this->groupId,
            $apply_status);

        $this->inspectionRecordForPost($apply_status, $targets, $new_resources,
            $file_names);

        cb_redirect($this->getRedirectPage(), $this->getRedirectParams());
    }

    /**
     * @return string
     */
    public function getCommandPage()
    {
        return 'schedule/system/command_customization_group_modify';
    }

    /**
     * @return array
     */
    public function getCommandParams()
    {
        return ['id' => $this->groupId];
    }

    /**
     * @return string
     */
    public function getRedirectPage()
    {
        return 'schedule/system/customization_group_view';
    }

    /**
     * @return array
     */
    public function getRedirectParams()
    {
        return ['id' => $this->groupId];
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        $page_title = grn_get_current_page_display_name();

        return [
            [
                "page" => "schedule/system/customization_group_list",
                "name" => grn_get_page_display_name("schedule/system/customization_group_list")
            ],
            [
                "page" => "schedule/system/customization_group_view",
                "name" => grn_get_page_display_name("schedule/system/customization_group_view")
                ,
                "id"   => $this->groupId
            ],
            ["page" => "", "name" => $page_title]
        ];
    }

    /**
     * @param int                               $apply_status
     * @param array                             $targets
     * @param \grn\grn\customization\Resource[] $resources
     * @param array                             $file_names
     */
    private function inspectionRecordForPost(
        $apply_status,
        array $targets,
        array $resources,
        array $file_names
    ) {
        require_once('schedule/inspection.csp');
        $inspection = \GRN_Schedule_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_args = array_merge(
                [
                    'id'           => $this->groupId,
                    'name'         => $this->getInput()['name'],
                    'apply_status' => InspectionUtil::getApplyStatusLogValue($apply_status)
                ],
                InspectionUtil::getTargetLogParams($targets),
                InspectionUtil::getResourcesLogParams($resources, $file_names)
            );
            $inspection->record('modify', 'customization_group', $message_args);
        }
    }

    /**
     * @return string
     */
    private function getTarget()
    {
        return CustomizationGroupLogic::CUSTOMIZATION_TARGET_PREFIX
               . $this->groupId;
    }
}
