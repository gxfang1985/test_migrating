<?php

namespace grn\schedule\screen\mobile;

class FacilityList extends MobileScheduleScreenBase
{
    const LIMIT_NUMBER_FACILITY_SELECTION = 100;
    private $_list_offset = 0;
    private $_total = 0;

    public function fetchFacilityListForAjax()
    {
        $input = $this->getInput();

        $fagid = cb_at($input, 'gid');
        $page_name = cb_at($input, 'page_name');

        $facilities_info
            = $this->_accessible_facility_getGroupFacilityArrayList($fagid);

        return $this->_evaluate_facilities_list($facilities_info, $page_name);
    }

    /**
     * @param string|int $fagid
     *
     * @return array
     */
    protected function _accessible_facility_getGroupFacilityArrayList($fagid)
    {
        if (mb_substr($fagid, 0, 1) == 'm') // get facilities of My group
        {
            global $G_container_base;
            /** @var \GRN_UUM $uum */
            $uum = $G_container_base->getInstance('uum');
            $facility_ids = $uum->getMyGroupFacilitiesId(mb_substr($fagid, 1));

            return $this->getFacilityInfo($facility_ids);
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        switch ($fagid) {
            case 'r':
                require_once('schedule/facility_system_logic.csp');
                $facility_history = \GRN_Facility_HistoryManager::getInstance();
                $facility_history_list
                    = $facility_history->getFacilityHistory($this->getLoginUserId());

                return $this->getFacilityInfo($facility_history_list);
                break;
            case '-3':
                return $facility_logic->getGroupFacilityArrayList();
                break;
            case '-2':
                return $facility_logic->getGroupFacilityArrayList(-1);
                break;
            default:
                return $facility_logic->getGroupFacilityArrayList($fagid);
        }
    }

    /**
     * @param array $facility_ids
     *
     * @return array
     */
    private function getFacilityInfo($facility_ids)
    {
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        $facilities_info = $facility_logic->getFacilitiesInfo($facility_ids,
            CB_DATABASE_NO_LOCK);
        $facilities = [];
        foreach ($facility_ids as $facility_id) {
            if (array_key_exists($facility_id, $facilities_info)) {
                $facilities[$facility_id] = $facilities_info[$facility_id];
            }
        }

        return $facilities;
    }

    public function facilitySearch()
    {
        $input = $this->getInput();

        $keyword = cb_at($input, 'keyword');
        $page_name = cb_at($input, 'page_name');

        require_once('schedule/facility_system_logic.csp');
        $fsl = \GRN_Facility_SystemLogic::getInstance();
        $facilities_info = $fsl->searchFacilitiesInfo($keyword);

        return $this->_evaluate_facilities_list($facilities_info, $page_name);
    }

    protected function _evaluate_facilities_list($facilities_info, $page_name)
    {
        $login = cb_get_login_user();
        $dynamic_roles = $this->getListGrantedRoles();

        require_once('schedule/facility_system_logic.csp');
        $fsl = \GRN_Facility_SystemLogic::getInstance();

        require_once('schedule/access_logic.csp');
        $acc = \GRN_Schedule_Access_Logic::getInstance();

        require_once('schedule/facility_privilege.csp');
        $facility_privilege = \GRN_Facility_Privilege_Logic::getInstance();
        $priv_facilities
            = $facility_privilege->getFacilitiesWithAuthority($login);

        // ページごとのアクセス権を設定
        $access_list = [];
        $lax_evaluate = false;
        if (array_search($page_name,
                ['schedule/mobile/add', 'schedule/mobile/repeat_add']) !== false
        ) {
            $access_list[] = 'add';
        } elseif (array_search($page_name,
                ['schedule/mobile/modify', 'schedule/mobile/repeat_modify'])
                  !== false
        ) {
            $access_list = ['read', 'add', 'modify'];
            $lax_evaluate = true;
        } else {
            $access_list[] = 'read';
        }

        //--- add VCBSCH0010 ---s
        // V-CUBEシステムが利用可能かを取得する。
        require_once('schedule/netmeeting_system_logic.csp');
        $netmeeting_system_logic = \GRN_Netmeeting_SystemLogic::getInstance();
        $netmeeting_system_available
            = $netmeeting_system_logic->getNetmeetingAvailable();
        //--- add VCBSCH0010 ---e

        $checkRepeatAndApproval
            = $fsl->getSettingsOfFacilities(array_keys($facilities_info),
            ['approval', 'regulary']);
        if ($page_name == 'schedule/mobile/repeat_add'
            || $page_name == 'schedule/mobile/repeat_modify'
        ) {
            // 繰り返し予定の登録、変更画面では、施設を含む予定の繰り返し予定が許可されていない場合、
            // 運用管理権限がある施設のみ表示する
            foreach (array_keys($facilities_info) as $faid) {
                if (( ! $checkRepeatAndApproval[$faid]['regulary'])
                    && ! array_key_exists($faid, $priv_facilities)
                ) {
                    unset($facilities_info[$faid]);
                    //--- add VCBSCH0010 ---s
                } // V-CUBEシステムが利用可能で施設がV-CUBE連携対象の場合、対象施設を表示しない。
                elseif (($netmeeting_system_available == 1)
                        && ($facilities_info[$faid]['col_netmeeting_available']
                            == 1)
                ) {
                    unset($facilities_info[$faid]);
                    //--- add VCBSCH0010 ---e
                } // GTM-1681
                elseif ($checkRepeatAndApproval[$faid]['approval']) {
                    unset($facilities_info[$faid]);
                }
                //end GTM-1681
            }
        }

        // アクセス権の評価
        $evaluated = $acc->evaluateAccessesById($login, $facilities_info,
            $access_list, $dynamic_roles, 'facility', false, $lax_evaluate);

        foreach (array_keys($evaluated) as $eid) {
            $evaluated[$eid]['checkrepeat']
                = ($checkRepeatAndApproval[$eid]['regulary']
                   || array_key_exists($eid, $priv_facilities)) ? 1 : 0;
            // GTM-1681
            $evaluated[$eid]['approval']
                = $checkRepeatAndApproval[$eid]['approval'];
            // end GTM-1681
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        $facility_list = [];
        $f_list = [];

        $input = $this->getInput();
        $sp = cb_at($input, 'sp', null);

        $j = 0;
        if ( ! is_null(($sp))) {
            $limit = self::LIMIT_NUMBER_FACILITY_SELECTION;

            $j = $sp + $limit;
            if ($j > count($evaluated)) {
                $j = count($evaluated);
            }
            $evaluated = array_values($evaluated);

            for ($i = $sp; $i < $j; $i++) {
                $f_list[] = $evaluated[$i];
            }
        } else {
            $f_list = $evaluated;
        }
        $this->setTotal(count($evaluated));
        unset($evaluated);

        foreach ($f_list as $item) {
            $facility_list[] = [
                'id'          => $item['_id'],
                'name'        => $item['col_name'],
                'displayName' => $item['col_name'],
                'code'        => $item['col_foreign_key'],
                'forignKey'   => $item['col_foreign_key'],
                'type'        => 'facility',
                'checkrepeat' => $item['checkrepeat'],
                'approval'    => $item['approval'],
            ];
        }
        $this->setOffset($j);

        return $facility_list;
    }

    public function getFacilitySubGroup()
    {
        $input = $this->getInput();
        $page_name = cb_at($input, 'page');
        $oid = cb_at($input, 'oid');

        require_once('grn/org_tree.csp');
        $util = \GRN_OrgTreeUtil::getInstance();
        $tree = $util->getTree($page_name, 'GRN_FacilityAccessTree');
        if ( ! $tree->containNode($oid)) {
            require_once("schedule/facility_tree.csp");
            grn_schedule_rebuild_facility_group_tree_system($page_name,
                "GRN_FacilityAccessTree", $oid);
        }

        $children = [];
        if ($tree && is_numeric($oid)) {
            $tree->expandToAndDisplayChild($oid);
            $children = @$tree->_nodes[$oid]['children'];
            if ( ! $children || count($children) == 0) {
                $children = [];

            }
            $util->setTree($page_name, $tree);
        }

        return $children;
    }

    /**
     * Set offset for ajax get facility list
     *
     * @param int $offset
     */
    protected function setOffset($offset)
    {
        $this->_list_offset = $offset;
    }

    /**
     * Get offset for ajax get facility list
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->_list_offset;
    }

    /**
     * set total facility of group for ajax get facility list
     *
     * @param int $value
     */
    protected function setTotal($value)
    {
        $this->_total = $value;
    }

    /**
     * Get total facility of group for ajax get facility list
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->_total;
    }
}
