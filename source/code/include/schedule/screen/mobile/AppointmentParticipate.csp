<?php
/**
 * Leave from the appointment controller
 *
 * @author: tuyen-truong(Cybozu Vietnam)
 * @date  : 2014/03/03
 */

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;

class AppointmentParticipate extends MobileScheduleScreenBase
{
    public function __construct($input)
    {
        parent::__construct($input);
    }

    /**
     * Get begin date. Override
     *
     * @return \CB_Date Object or null value.
     */
    public function getBdate()
    {
        $date = new \CB_Date();
        if ( ! $date->parse(cb_at($this->getInput(), self::ARG_BEGIN_DATE))) {
            $date = null;
        }

        return $date;
    }

    /**
     * Get event id from the $input param. Override
     */
    public function getEvent()
    {
        return cb_at($this->getInput(), self::ARG_EVENT);
    }

    /**
     * Get user id. Override
     */
    public function getUid()
    {
        return cb_at($this->getInput(), self::ARG_USER_ID);
    }

    /**
     * Get group id. Override
     */
    public function getGid()
    {
        return cb_at($this->getInput(), self::ARG_GROUP_ID);
    }

    /**
     *
     */
    public function getRefererKey()
    {
        return cb_at($this->getInput(), self::ARG_REFERER_KEY);
    }

    /**
     * Deleting confirmation screen.
     */
    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $user_id = $this->getUid();
        $group_id = $this->getGid();
        $event_id = $this->getEvent();

        $date = $this->getBdate();
        $str_date = $date ? $date->format() : null;

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        require_once('schedule/view_util.csp');
        $util = \GRN_Schedule_View_Util::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $login = $uum->getLoginUser();
        $login_id = $login->getOID();

        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'modify'], $dynamic_role);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
        }

        // check participate
        $is_participate = false;
        if (is_array($event->users)
            && array_key_exists($login_id, $event->users)
        ) {
            $is_participate = true;
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = &$event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者しか変更を許していない場合
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        // Login user is not a member
                        if (( ! $is_participate || is_null($event->users))
                            && ((is_a($event->creator, 'CB_User')
                                 && $login_id !== $event->creator->getOID())
                                || is_string($event->creator))
                            && ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }

        $participation = false;
        if (is_array($event->users) && count($event->users) > 0) {
            foreach (array_keys($event->users) as $key) {
                $_user = &$event->users[$key];
                if ($_user->getOID() == $login_id) {
                    $participation = $login_id;
                    break;
                }
            }
        }

        // 既に参加している
        if ($participation !== false) {
            cb_throw_error(E_GRN_SCHD_ALREADY_PARTICIPATE);
        }

        $apply = @ $G_INPUT['apply'];

        /* -------------- VCBSCH0010 START ----------------- */
        require_once('schedule/netmeeting_event_logic.csp');
        $vcb_event_logic = \GRN_Netmeeting_EventLogic::getInstance();

        // NETMEETING連携あり
        if ($vcb_event_logic->isNetmeetingAvailable($event)) {
            // 選択されている施設がある場合
            $vcb_facility = $vcb_event_logic->getNetmeetingFacilityById($event);
            if (isset($vcb_facility)) {
                // 連携データ取得
                $coop_data
                    = $vcb_event_logic->getNetmeetingCoopDataByEventId($event_id);

                // 連携データあり
                if (isset($coop_data)) {
                    // 連携が正常終了している場合
                    if ($coop_data->cooperation_status
                        == GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
                    ) {
                        // 時間のチェック
                        $event_status
                            = $vcb_event_logic->getEventStatus($event->setdatetime,
                            $event->enddatetime);

                        if ($event_status
                            !== GRN_NETMEETING_MEETING_STATUS_END
                        ) {
                            $t->assign('netmeeting', true);
                        }
                    }
                }
            }
        }
        /* -------------- VCBSCH0010 END   ----------------- */

        $t->assign(
            'schedule_event', [
                'event_id' => $event->id,
                //予定のID
                'type'     => $util->getViewEventType($event->getEventType(),
                    $event->isShared()),
                //予定の種類
                'date'     => $date->format(),
                //予定の日付
                'str_date' => cb_date_format('DateFull_YMDW', $date),
                //予定の日付
                'data'     => html_entity_decode($event->getTitle()),
                //予定のタイトル
            ]
        );


        $t->assign('user_id', $user_id);
        $t->assign('group_id', $group_id);
        $t->assign('bdate', $date);

        $referer_key = $this->getRefererKey();
        $t->assign('referer_key', $referer_key);
        // breadcrumb作成
        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), "schedule/mobile/view", [
                self::ARG_EVENT       => $event_id,
                self::ARG_BEGIN_DATE  => $str_date,
                self::ARG_REFERER_KEY => $referer_key
            ]);
        $this->assignBreadcrumbCurrentPage($t, $this->getTitle());

        return $t->fetch('schedule/mobile/participate.tpl');
    }

    public function post($input)
    {
        $event_id = $this->getEvent();
        $user_id = $this->getUid();
        $group_id = $this->getGid();
        $apply = cb_at($this->getInput(), 'apply');
        $date = $this->getBdate();
        $str_date = $date ? $date->format() : null;

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $login_id = $login->getOID();

        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'modify'], $dynamic_role);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
        }

        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            // 繰り返しの変更条件が入っていないのでNG
            if ( ! $apply) {
                cb_throw_error(E_GRN_SCHD_NOT_REPEAT_MODIFY_TYPE);
            }
            if ($apply != 'all') {
                if (is_null($date)) {
                    cb_throw_error(E_GRN_SCHD_NOT_SPECIFIED_DATE);
                }
            }
        }

        // check participate
        $is_participate = false;
        if (is_array($event->users)
            && array_key_exists($login_id, $event->users)
        ) {
            $is_participate = true;
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = &$event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者しか変更を許していない場合
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        // Login user is not a member
                        if (( ! $is_participate || is_null($event->users))
                            && ((is_a($event->creator, 'CB_User')
                                 && $login_id !== $event->creator->getOID())
                                || is_string($event->creator))
                            && ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }

        $tsex = new \CB_TimeStampEx();
        $notify_date = $tsex->getDate();
        // イベントに参加する
        $b_found = false;
        $login_id = $login->getOID();
        if (is_array($event->users)) {
            foreach (array_keys($event->users) as $index) {
                $user = &$event->users[$index];
                // 既に自分がいる
                if ($user->getOID() == $login_id) {
                    $b_found = true;
                    break;
                }
            }
        }

        if ( ! $b_found) {
            if (is_array($event->users)) {
                $event->users[] = &$login;
            } else {
                $event->users = [];
                $event->users[] = &$login;
            }
            $event->modifier = &$login;
            if (is_a($event, 'GRN_Schedule_RepeatEvent')
                && ($apply == 'after')
            ) {
                $event->setdate = $date;
            }

            /* -------------- VCBSCH0010 START ----------------- */
            require_once('schedule/netmeeting_event_logic.csp');
            $vcb_event_logic = \GRN_Netmeeting_EventLogic::getInstance();

            // NETMEETING連携あり
            if ($vcb_event_logic->isNetmeetingAvailable($event)) {
                // 招待者追加
                $vcb_event_logic->cmmandNetmeetingInviteAdd($event, $login);
            }
            /* -------------- VCBSCH0010 END   ----------------- */

            $event_id = $app->modifyEventWithoutDateTime($event, $date, $apply);

            if (is_a($event, 'GRN_Schedule_RepeatEvent')
                && ($apply == 'this')
            ) {
                $bdate = $date;
            } else {
                $bdate = &$event->getFirstDate($notify_date);
            }

            // GRN2-4583
            $event->id = $event_id;

            if ($bdate !== false && $notify_date->compare($bdate) <= 0) {
                // ----- GRN2-4506 -----
                // 通知のタイムゾーン対応のために、setdatetimeなどを変換する。
                require_once('fw/i18n.csp');
                if ($event instanceof \GRN_Schedule_RepeatEvent) {
                    if ($event->setdatetime instanceof \CB_DatetimeEx) {
                        // 通常予定の繰り返しは、そのまま変換する
                        $settimestamp = new \CB_TimeStampEx(null,
                            $event->timezone);
                        $settimestamp->setDateTime($event->setdatetime,
                            \CB_I18N::getInstance()->getCurrentTimezone());
                        $event->setdatetime = $settimestamp->getDateTime();
                        if (isset($event->enddatetime)) {
                            $endtimestamp = new \CB_TimeStampEx(null,
                                $event->timezone);
                            $endtimestamp->setDateTime($event->enddatetime,
                                \CB_I18N::getInstance()->getCurrentTimezone());
                            $event->enddatetime = $endtimestamp->getDateTime();
                        } else {
                            $event->enddatetime = $event->setdatetime;
                        }
                    } elseif ($event->setdatetime instanceof \CB_Date) {
                        // 終日予定の場合、イベントとユーザーのタイムゾーンの時差を見る。
                        // その時差によって、終日予定が1日早くなっているかどうか確認する。
                        $dateTimeZoneEvent
                            = new \DateTimeZone($event->timezone);
                        $dateTimeZoneUser
                            = new \DateTimeZone(\CB_I18N::getInstance()
                                                        ->getCurrentTimezone());
                        $dateTimeEvent = new \DateTime("now",
                            $dateTimeZoneEvent);
                        $dateTimeUser = new \DateTime("now",
                            $dateTimeZoneUser);
                        $timeOffset
                            = $dateTimeZoneEvent->getOffset($dateTimeUser);
                        if ($timeOffset <= 0) {
                            // イベントのタイムゾーンがユーザーのタイムゾーンと同じか、遅い場合。
                            // 開始日はイベントのタイムゾーンと同じなので、そのまま。終了日を同日にしておく。
                            $event->enddatetime = $event->setdatetime;
                        } else {
                            // イベントのタイムゾーンがユーザーのタイムゾーンより早い場合。
                            // イベントのタイムゾーンの開始日は1日後となるので、変更する。
                            // enddatetimeはsetdatetimeの1日後になっているため、それを利用する。
                            $event->setdatetime = $event->enddatetime;
                        }
                    }
                } elseif ($event instanceof \GRN_Schedule_NormalEvent) {
                    // 通常予定（終日以外）も、イベントのタイムゾーンに変更する
                    if ($event->setdatetime instanceof \CB_DateTimeEx) {
                        require_once('fw/i18n.csp');
                        $settimestamp = new \CB_TimeStampEx(null,
                            $event->timezone);
                        $settimestamp->setDateTime($event->setdatetime,
                            \CB_I18N::getInstance()->getCurrentTimezone());
                        $event->setdatetime = $settimestamp->getDateTime();
                        if (isset($event->enddatetime)) {
                            $endtimestamp = new \CB_TimeStampEx(null,
                                $event->timezone);
                            $endtimestamp->setDateTime($event->enddatetime,
                                \CB_I18N::getInstance()->getCurrentTimezone());
                            $event->enddatetime = $endtimestamp->getDateTime();
                        } else {
                            $event->enddatetime = $event->setdatetime;
                        }
                    }
                }
                // ----- GRN2-4506 -----

                if (is_array($event->users) && count($event->users) > 0) {
                    $title = $this->getNotifyTitle($event);
                    $app->setNotify($event->users, $login, $event, $bdate,
                        $title, '', GRN_SCHEDULE_NOTIFY_MODIFY, $tsex);
                    $app->forwardMail($event,
                        [GRN_SCHEDULE_NOTIFY_MODIFY => $event->users], $login);
                    $app->sendPushNotification(
                        $event, [GRN_SCHEDULE_NOTIFY_MODIFY => $event->users],
                        $login, true, $bdate, null);
                }

                // 通知先の指定がある場合
                if ($event->private && is_array($event->notify_address)
                    && count($event->notify_address) > 0
                ) {
                    $title = $this->getNotifyTitle($event);
                    $app->sendNotificationsToPublic($login, $event, $bdate, '',
                        $tsex, $title, false, true, GRN_SCHEDULE_NOTIFY_MODIFY);
                }
            }
        }

        cb_redirect('schedule/mobile/view', [
            'event'       => $event_id,
            'bdate'       => $date->format(),
            'referer_key' => $this->getRefererKey()
        ]);
    }

    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    public function getNotifyTitle($event)
    {
        require_once('schedule/notification.csp');
        $util = \GRN_Schedule_Notify_Logic::getInstance();

        return $util->getNotifyTitle(html_entity_decode($event->getTitle()));
    }
}
