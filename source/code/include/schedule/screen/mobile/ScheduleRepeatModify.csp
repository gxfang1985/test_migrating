<?php

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;
use grn\grn\JSONResponse;
use grn\schedule\ScheduleMemberLogic;

class ScheduleRepeatModify extends MobileScheduleScreenBase
{
    public function fetch()
    {
        $input = $this->getInput();
        $parameter = $this->getPostParams();
        $this->checkArgFromInput($parameter, $input);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $login = $this->getLoginUser();
        $login_id = $this->getLoginUserId();

        // get menu
        $menu = $this->getMenus();
        $t->assign('menus', $menu);

        $user_id = $this->getUserId();

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $event_id = $this->getEvent();
        $date = $this->getBeginDate();

        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_roles = $this->getListGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'modify'], $dynamic_roles);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = $event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者と共有メンバーしか変更を許していない場合
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && (
                                 (is_array($event->users)
                                  && ! array_key_exists($login_id,
                                         $event->users))
                                 || is_null($event->users)
                             )
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id !== $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }

        $allow_all_facilities = $this->getAllowAllFacilities();
        $t->assign('allow_all_facilities', $allow_all_facilities);
        $t->assign('use_private', $this->getUsePrivate());
        $t->assign('minute_interval', $this->getScheduleUnit());
        $t->assign('show_organize', $this->getShowOrganize());

        $t->assign('show_group_role', ScheduleMemberLogic::getInstance()
                                                         ->isAllowSettingGroupRoleToWatchers());

        $isAllowedRole = ScheduleMemberLogic::getInstance()->isAllowedRole();
        $t->assign('isAllowedRole', $isAllowedRole);

        $schedule_event = [
            'event_id' => $event_id,
            'title'    => $event->detail,
            'memo'     => $event->memo,
            'timezone' => $event->timezone
        ];
        if ($event->menu !== false && $event->menu !== ''
            && ! is_null($event->menu)
        ) {
            if ($event->menucolor !== false && $event->menucolor !== ''
                && ! is_null($event->menucolor)
            ) {
                $schedule_event['selectmenu'] = $event->menu . ';#'
                                                . $event->menucolor;
            } else {
                $schedule_event['selectmenu'] = $event->menu;
            }
        }

        // 公開/非公開
        if ($event->private) {
            if (is_array($event->notify_address)
                && count($event->notify_address) > 0
            ) {
                $schedule_event['private_setting']
                    = GRN_PRIVATE_SETTING_MANAGED;
                $schedule_event['notify_address']
                    = ScheduleMemberLogic::getInstance()
                                         ->getNotifyAddressRender($event->notify_address,
                                             GRN_SCHEDULE_GET_MEMBER_OBJECT,
                                             true);
            } else {
                $schedule_event['private_setting']
                    = GRN_PRIVATE_SETTING_PRIVATE;
            }
        } else {
            $schedule_event['private_setting'] = GRN_PRIVATE_SETTING_PUBLIC;
        }

        // 時間の設定
        $schedule_event['start_date'] = $event->setdate;
        $schedule_event['end_date'] = $event->enddate;

        if (is_a($event->settime, 'CB_Time')) {
            $schedule_event['start_time'] = $event->settime;
        }
        if (is_a($event->endtime, 'CB_Time')) {
            $schedule_event['end_time'] = $event->endtime;
        }

        $schedule_event['type'] = $event->repeat_type;
        if ($event->repeat_type != 'month' && $event->repeat_type != 'day'
            && $event->repeat_type != 'weekday'
        ) {
            $schedule_event['wday'] = $event->wday;
        } else {
            $schedule_event['wday'] = cb_get_day_of_week($date->year,
                $date->month, $date->day);
        }

        if ($event->repeat_type == 'month') {
            $schedule_event['day'] = $event->day;
        } else {
            $schedule_event['day'] = $date->day;
        }

        $schedule_event['this_date'] = $date;
        $schedule_event['after_date'] = cb_date_format('DateFull_YMDW', $date);

        // 参加者
        require_once('schedule/view_util.csp');
        $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                      ->getAttendeesRenderFromEvent($event,
                                                          true);

        // 設備
        $facilities = [];
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            foreach (array_keys($event->facilities) as $key) {
                $member = &$event->facilities[$key];
                if ( ! $member) {
                    continue;
                }

                $facilities = array_merge($facilities,
                    $this->getInformationOfFacilityForMobileView([$key], null,
                        true));
            }
        }
        $schedule_event['facilities'] = $facilities;

        $t->assign('this_date', $schedule_event['this_date']->format());
        $start_date = new \CB_DateEx($schedule_event['start_date']);
        $t->assign('start_date', $start_date->format());
        $end_date = new \CB_DateEx($schedule_event['end_date']);
        $t->assign('end_date', $end_date->format());

        require_once("grn/JSONResponse.csp");
        $json = \grn\grn\JSONResponse::create();

        $selected_users_sUID = isset($schedule_event['users'])
            ? $schedule_event['users'] : [];
        $selected_users_sUID
            = $json->encode(['list' => array_values($selected_users_sUID)]);
        $t->assign('selected_users_sUID', $selected_users_sUID);

        $selected_users_p_sUID = isset($schedule_event['notify_address'])
            ? $schedule_event['notify_address'] : [];
        $selected_users_p_sUID
            = $json->encode(['list' => array_values($selected_users_p_sUID)]);
        $t->assign('selected_users_p_sUID', $selected_users_p_sUID);

        $selected_facility
            = $json->encode(['list' => $schedule_event['facilities']]);
        $t->assign('selected_facility', $selected_facility);

        $t->assign('schedule_event', $schedule_event);

        $t->assign('user_id', $user_id);
        $t->assign('group_id', $this->getGroupId());
        $t->assign('bdate', $date->format());

        $t->assign('week_option', $this->getWeekOption());
        $t->assign('weekday_option', $this->getWeekDayOption());
        $t->assign('monthday_option', $this->getMonthDayOption());
        $t->assign('repeat_caption', $this->getRepeatCaption($schedule_event));

        // page title
        $page_title = grn_get_current_page_display_name();

        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $t->assign('referer_key', $referer_key);

        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), 'schedule/mobile/view', [
                self::ARG_EVENT       => $event_id,
                self::ARG_BEGIN_DATE  => $date->format(),
                self::ARG_REFERER_KEY => $referer_key
            ]);
        $this->assignBreadcrumbCurrentPage($t, $page_title);

        $t->assign('page_title', $page_title);

        $page_name = cb_get_pagename();
        $t->assign('page_name', $page_name);

        $page_name .= '/facility';
        $extra_node = true;
        $fgroup_id = 'f';
        $tree_data = $this->getFacilityGroupsTreeMenu($page_name, $fgroup_id,
            $extra_node);
        $t->assign('fgroup_list', $tree_data['org']);

        $facility_tree_for_view = [
            'tree_name' => 'facility_categories_tree',
            'root'      => $tree_data['origin_org'],
            'async_url' => 'schedule/mobile/ajax/get_facility_sub_group',
            'oid_key'   => 'oid',
            'page_name' => $page_name,
            'no_root'   => true
        ];
        $t->assign('facility_categories_tree', $facility_tree_for_view);

        $t->assign('add_plugin', [
            'name'   => 'schedule',
            'params' => [
                'action'       => ['read', 'add', 'modify'],
                'lax_evaluate' => true,
                'session_name' => cb_get_pagename()
            ]
        ]);
        $t->assign("view_plugin", [
            "name"   => "schedule",
            "params" => [
                "action"       => ["read"],
                "session_name" => cb_get_pagename() . "/view"
            ]
        ]);
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));

        return $t->fetch('schedule/mobile/repeat_modify.tpl');
    }

    public function getTitle()
    {
        return grn_get_page_display_name('schedule/mobile/repeat_modify');
    }

    public function getRemoveFooter()
    {
        return true;
    }
}
