<?php

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;
use grn\grn\JSONResponse;
use grn\schedule\AttendanceStatusLogic;
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\ScheduleMemberLogic;

class ScheduleAdd extends MobileScheduleScreenBase
{
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/multi_select_utility.csp');
        $input = grn_deploy_selected_users('selected_users_sUID', 'sUID',
            $input);
        $input = grn_deploy_selected_users('selected_users_p_sUID', 'p_sUID',
            $input);
        $input = grn_deploy_selected_users('sITEM', 'sITEM', $input);

        $parameter = $this->getPostParams();
        $this->checkArgFromInput($parameter, $input);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $login = $this->getLoginUser();
        $login_id = $this->getLoginUserId();

        // get menu
        $menu = $this->getMenus();
        $t->assign('menus', $menu);

        $this->setMemberSchedule();

        $user_id = $this->getUserId();
        $dynamic_roles = $this->getListGrantedRoles();

        $this->checkAccessSchedule();
        $this->evaluateAccessesListById();

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();

        $allow_all_facilities = $this->getAllowAllFacilities();
        $t->assign('allow_all_facilities', $allow_all_facilities);

        $isAllowedRole = ScheduleMemberLogic::getInstance()->isAllowedRole();
        $t->assign('isAllowedRole', $isAllowedRole);

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        $t->assign('use_private', $this->getUsePrivate());
        $t->assign('minute_interval', $this->getScheduleUnit());
        $t->assign('show_organize', $this->getShowOrganize());
        $t->assign('show_group_role', ScheduleMemberLogic::getInstance()
                                                         ->isAllowSettingGroupRoleToWatchers());
        //GTM-1622
        $attendanceStatusLogic = new AttendanceStatusLogic();
        $t->assign('use_attendance_check',
            $attendanceStatusLogic->isEnableAttendanceCheck());

        // attached files
        $allow_file_attachment = $this->getAllowFileAttachment();
        $t->assign('allow_file_attachment', $allow_file_attachment);
        if ($allow_file_attachment) {
            $tmp_key = cb_at($input, 'tmp_key');
            if ( ! $tmp_key) {
                //generate upload ticket
                include('grn/_upload_prepend.csp');
                $tmp_key = grn_get_temporary_key();
            }
            $t->assign('tmp_key', $tmp_key);
        }

        // 必要なパラメータの設定
        $schedule_event = [];
        //GTM-103
        $schedule_event['selectmenu'] = '';
        $schedule_event['event_menu_color'] = '';
        //End GTM-103
        $schedule_event['title'] = '';
        $schedule_event['memo'] = '';
        $schedule_event['start_date'] = $this->getBeginDate();
        $schedule_event['end_date'] = $this->getBeginDate();
        $schedule_event['start_time'] = null;
        $schedule_event['end_time'] = null;
        require_once('fw/i18n.csp');
        $current_timezone = \CB_I18N::getInstance()
                                    ->getCurrentTimezone();
        $schedule_event['timezone'] = $current_timezone;
        $schedule_event['end_timezone'] = $current_timezone;
        // GTM-1622
        $schedule_event['attendance_check']
            = $attendanceStatusLogic->defaultAttendanceCheck();

        require_once('grn/controller.csp');
        $member = $this->getMember();
        if (is_a($member, 'CB_User')) {
            $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                          ->getDisplayMember($member,
                                                              true);
            if ($login_id != $member->getOID()) {
                $_login_display_member = ScheduleMemberLogic::getInstance()
                                                            ->getDisplayMember($login,
                                                                true);
                $schedule_event['users'] = array_merge($schedule_event['users'],
                    $_login_display_member);
            }
        } elseif (is_a($member, 'CB_Group')) {
            $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                          ->getDisplayMember($member,
                                                              true);
            $_login_display_member = ScheduleMemberLogic::getInstance()
                                                        ->getDisplayMember($login,
                                                            true);
            $schedule_event['users'] = array_merge($schedule_event['users'],
                $_login_display_member);
        } elseif (is_a($member, 'GRN_Facility_Facility')) {
            $checkApprovalFacilities
                = $facility_logic->getSettingsOfFacilities([$member->getOID()],
                ['approval', 'regulary']);
            $schedule_event['facilities']
                = $this->getInformationOfFacilityForMobileView([$member->getOID()],
                $checkApprovalFacilities);
        }

        $schedule_event['private_setting'] = $this->getDefaultPrivateSet();

        if ($this->getTab()) {
            $schedule_event['timezone'] = $this->getTimezone()
                ? $this->getTimezone() : $schedule_event['timezone'];
            $schedule_event['end_timezone'] = $this->getEndTimezone()
                ? $this->getEndTimezone() : $schedule_event['timezone'];
            $schedule_event['selectmenu'] = $this->getSelectMenu($menu,
                $this->getMenu());
            //GTM-103
            $schedule_event['event_menu_color'] = $this->getEventMenuColor();
            //End GTM-103
            $schedule_event['title'] = $this->getScheduleTitle();
            $schedule_event['memo'] = $this->getMemo();

            if ( ! is_null($this->getPrivate())) {
                switch ($this->getPrivate()) {
                    case 1:
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_PRIVATE;
                        break;
                    case 2:
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_MANAGED;
                        $p_sUID = array_key_exists('p_sUID', $input)
                            ? $input['p_sUID'] : null;
                        if (is_array($p_sUID) && count($p_sUID)) {
                            $schedule_event['notify_address']
                                = ScheduleMemberLogic::getInstance()
                                                     ->getNotifyAddressRenderFromParam($p_sUID,
                                                         true);
                        }
                        break;
                    default:
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_PUBLIC;
                }
            }

            require_once('schedule/view_util.csp');
            $util = \GRN_Schedule_View_Util::getInstance();

            if ($this->getTab() == 'repeat_add') {
                $start_hour = $this->getStartHour();
                $start_minute = $this->getStartMinute();
                $end_hour = $this->getEndHour();
                $end_minute = $this->getEndMinute();

                // 時間だけ
                $schedule_event['start_time']
                    = $util->createDateTimeFromParameters(null, null, null,
                    $start_hour, $start_minute);
                $schedule_event['end_time']
                    = $util->createDateTimeFromParameters(null, null, null,
                    $end_hour, $end_minute);
            } elseif ($this->getTab() == 'banner_add') {
                $start_year = $this->getStartYear();
                $start_month = $this->getStartMonth();
                $start_day = $this->getStartDay();
                $end_year = $this->getEndYear();
                $end_month = $this->getEndMonth();
                $end_day = $this->getEndDay();

                // 日付だけ
                $schedule_event['start_date']
                    = $util->createDateTimeFromParameters($start_year,
                    $start_month, $start_day);
                $schedule_event['end_date']
                    = $util->createDateTimeFromParameters($end_year, $end_month,
                    $end_day);

                //switch tab from banner add
                if ($allow_file_attachment) {
                    $session_key = cb_at($input, self::ARG_SESSION_KEY);

                    $schedule_event['attached_files']
                        = $this->getAttachedFile($session_key);
                }
            } elseif ($this->getTab() == 'add') {
                $start_hour = $this->getStartHour();
                $start_minute = $this->getStartMinute();
                $end_hour = $this->getEndHour();
                $end_minute = $this->getEndMinute();

                $schedule_event['start_time']
                    = $util->createDateTimeFromParameters(null, null, null,
                    $start_hour, $start_minute);
                $schedule_event['end_time']
                    = $util->createDateTimeFromParameters(null, null, null,
                    $end_hour, $end_minute);
            }
            // 参加者
            $sUID = array_key_exists('sUID', $input)
                ? $input['sUID'] : [];
            $schedule_event["users"] = ScheduleMemberLogic::getInstance()
                                                          ->getAttendeesRenderFromParam($sUID,
                                                              true, false);

            // 施設
            $s_faid = $this->getSItem();
            if (is_array($s_faid) && count($s_faid) > 0) {
                if ($this->getTab() == 'normal') {
                    $access = 1;
                    $tmp_array = [];
                    foreach ($s_faid as $faid) {
                        if (is_numeric($faid)) {
                            $tmp_array[$faid] = $faid;
                        }
                    }
                    $access = $acc_logic->getFacilityGroupAccessList($login,
                        $tmp_array, ['read', 'add'], $dynamic_roles);
                    $access += $acc_logic->getEvaluateAccessesListById($login,
                        $tmp_array, 'facility', ['read', 'add'],
                        $dynamic_roles);
                    if (is_array($access) && count($access) > 0) {
                        foreach ($access as $access_item) {
                            if ($access_item['add'] == GRN_SCHD_ACCESS_DENY) {
                                $access = false;
                                break;
                            }
                        }
                        if ( ! $access) {
                            cb_throw_error(E_GRN_SCHD_ACCESSDENY_ENTRY);
                        }
                    }
                }
                $facilities = [];
                require_once('schedule/facility_privilege.csp');
                $facilitiesSetting
                    = $facility_logic->getSettingsOfFacilities($s_faid,
                    ['approval', 'regulary']);
                foreach ($s_faid as $faid) {
                    if (is_numeric($faid)) {
                        $facilities = array_merge($facilities,
                            $this->getInformationOfFacilityForMobileView([$faid],
                                $facilitiesSetting));
                    }
                }
                $schedule_event['facilities'] = $facilities;
            }

        } elseif (($event_id = $this->getEvent())) {
            require_once('schedule/application.csp');
            $app = \GRN_Schedule_Application::getInstance();
            // 再利用登録の場合
            $new_entry = $this->getNew();
            $event = $app->getEvent($login, $event_id,
                $this->getBeginDate());
            // イベントがある場合は、そのイベントを利用して初期値を設定する
            if ($event && ! $new_entry) {
                $schedule_event['timezone'] = $event->timezone;
                $schedule_event['end_timezone'] = isset($event->end_timezone)
                    ? $event->end_timezone : $event->timezone;

                $display_start_datetime = $event->setdatetime;
                if ($event->setdatetime instanceof \CB_DateTime) {
                    $display_start_datetime
                        = \CB_I18N::translateDatetimeTimezone($event->setdatetime,
                        $current_timezone, $schedule_event['timezone']);
                }
                $display_end_datetime = $event->enddatetime;
                if ($event->enddatetime instanceof \CB_DateTime) {
                    $display_end_datetime
                        = \CB_I18N::translateDatetimeTimezone($event->enddatetime,
                        $current_timezone, $schedule_event['end_timezone']);
                }
                if ($event->menu !== false && $event->menu !== ''
                    && ! is_null($event->menu)
                ) {
                    if ($event->menucolor !== false && $event->menucolor !== ''
                        && ! is_null($event->menucolor)
                    ) {
                        $schedule_event['selectmenu'] = $event->menu . ';#'
                                                        . $event->menucolor;
                    } else {
                        $schedule_event['selectmenu'] = $event->menu;
                    }
                }
                //GTM-103
                $schedule_event['event_menu_color'] = $event->menucolor;
                //End GTM-103
                $schedule_event['title'] = $event->detail;
                $schedule_event['start_date'] = $display_start_datetime;
                if ( ! $event->enddatetime) {
                    $schedule_event['end_date'] = $schedule_event['start_date'];
                } else {
                    $schedule_event['end_date'] = $display_end_datetime;
                }
                if (is_a($event->setdatetime, 'CB_DateTime')) {
                    $schedule_event['start_time']
                        = new \CB_TimeEx($display_start_datetime);
                }

                if (is_a($event->enddatetime, 'CB_DateTime')) {
                    $schedule_event['end_time']
                        = new \CB_TimeEx($display_end_datetime);
                }
                $schedule_event['memo'] = $event->memo;
                if ($event->private) {
                    // 通知先が指定されているか
                    if (is_array($event->notify_address)
                        && count($event->notify_address) > 0
                    ) {
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_MANAGED;
                        $schedule_event['notify_address']
                            = ScheduleMemberLogic::getInstance()
                                                 ->getNotifyAddressRender($event->notify_address,
                                                     GRN_SCHEDULE_GET_MEMBER_OBJECT,
                                                     true);
                    } else {
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_PRIVATE;
                    }
                } else {
                    $schedule_event['private_setting']
                        = GRN_PRIVATE_SETTING_PUBLIC;
                }

                // GTM-1622
                $schedule_event['attendance_check'] = $event->attendanceCheck;

                // 参加者
                $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                              ->getAttendeesRenderFromEvent($event,
                                                                  true);

                $facilities = [];
                if ($event->facilities) {
                    $facilities = [];
                    require_once('schedule/facility_privilege.csp');
                    $facilitiesSetting
                        = $facility_logic->getSettingsOfFacilities(array_keys($event->facilities),
                        ['approval', 'regulary']);
                    foreach (array_keys($event->facilities) as $key) {
                        if (is_numeric($key)) {
                            $facilities = array_merge($facilities,
                                $this->getInformationOfFacilityForMobileView([$key],
                                    $facilitiesSetting));
                        }
                    }
                }
                // GTM-1681
                foreach ($facilities as $facility) {
                    if ($facility['approval']) {
                        $facilityApprovalLogic = new FacilityApprovalLogic();
                        $schedule_event['usingPurposeValue']
                            = $facilityApprovalLogic->getFacilityUsingPurpose($event_id);
                        $schedule_event['usingApprovalFacility'] = true;
                        break;
                    }
                }
                // end GTM-1681
                $schedule_event['facilities'] = $facilities;

                //reuse event
                if ($allow_file_attachment) {
                    require_once('schedule/file.csp');
                    $fm = \GRN_Schedule_FileManager::getInstance();
                    $files = $fm->getFiles($event_id);

                    //get files
                    $tmp_key = grn_get_temporary_key();
                    $session_key
                        = 'schedule-mobile-change-page-' . $tmp_key;
                    $schedule_event['attached_files']
                        = grn_init_attached_file($session_key, $files,
                        false, 'schedule');
                }
            } // メンバーだけ利用
            elseif ($event && $new_entry) {
                $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                              ->getAttendeesRenderFromEvent($event,
                                                                  true);

                $facilities = [];
                if ($event->facilities) {
                    $facilities = [];
                    require_once('schedule/facility_privilege.csp');
                    $facilitiesSetting
                        = $facility_logic->getSettingsOfFacilities(array_keys($event->facilities),
                        ['approval', 'regulary']);
                    foreach (array_keys($event->facilities) as $key) {
                        if (is_numeric($key)) {
                            $facilities = array_merge($facilities,
                                $this->getInformationOfFacilityForMobileView([$key],
                                    $facilitiesSetting));
                        }
                    }
                }
                $schedule_event['facilities'] = $facilities;
            }
        } elseif ($this->getSetHour()) {
            $start_hour = $this->getSetHour();
            $start_minute = null;
            $end_hour = $this->getEndHour();
            $end_hour24 = false;
            if ($end_hour > 23) {
                $end_hour24 = abs(23 - (int)$end_hour);
                $end_hour = 23;
            }
            $end_minute = null;

            require_once('schedule/view_util.csp');
            $util = \GRN_Schedule_View_Util::getInstance();

            // 時間だけ
            $schedule_event['start_time']
                = $util->createDateTimeFromParameters(null, null, null,
                $start_hour, $start_minute);
            $schedule_event['end_time']
                = $util->createDateTimeFromParameters(null, null, null,
                $end_hour, $end_minute);

            if ( ! $schedule_event['end_time']) {
                $schedule_event['end_time']
                    = clone $schedule_event['start_time'];
                $schedule_event['end_time']->hour += 1;
                // 翌日以降の場合は日付をずらす
                if ($schedule_event['end_time']->hour >= 24) {
                    $schedule_event['end_date']
                        = clone $schedule_event['start_date'];
                    cb_date_move_days($schedule_event['end_date'], 1);
                    $schedule_event['end_time']->hour = 0;
                }
            } elseif ($end_hour24) {
                $schedule_event['end_time']->hour += $end_hour24;
                // 翌日以降の場合は日付をずらす
                if ($schedule_event['end_time']->hour >= 24) {
                    $schedule_event['end_date'] = $schedule_event['start_date'];
                    cb_date_move_days($schedule_event['end_date'], 1);
                    $schedule_event['end_time']->hour -= 24;
                }
            }
        } else {
            $notify_address_candidate = ScheduleMemberLogic::getInstance()
                                                           ->getDefaultPublicByUserId($login_id,
                                                               ScheduleMemberLogic::PLUG_IN_TYPE_VIEW,
                                                               true, true);
            if (count($notify_address_candidate) > 0) {
                $schedule_event['notify_address']
                    = ScheduleMemberLogic::getInstance()
                                         ->getDisplayMemberList($notify_address_candidate,
                                             true);
            }
        }

        $start_date = new \CB_DateEx($schedule_event['start_date']);
        $t->assign('start_date', $start_date->format());
        $end_date = new \CB_DateEx($schedule_event['end_date']);
        $t->assign('end_date', $end_date->format());

        require_once("grn/JSONResponse.csp");
        $json = \grn\grn\JSONResponse::create();

        $selected_users_sUID = isset($schedule_event['users'])
            ? $schedule_event['users'] : [];
        $selected_users_sUID
            = $json->encode(['list' => array_values($selected_users_sUID)]);
        $t->assign('selected_users_sUID', $selected_users_sUID);

        $selected_users_p_sUID = isset($schedule_event['notify_address'])
            ? $schedule_event['notify_address'] : [];
        $selected_users_p_sUID
            = $json->encode(['list' => array_values($selected_users_p_sUID)]);
        $t->assign('selected_users_p_sUID', $selected_users_p_sUID);

        $selected_facility
            = $json->encode(['list' => $schedule_event['facilities']]);
        $t->assign('selected_facility', $selected_facility);

        $t->assign('schedule_event', $schedule_event);

        $t->assign('user_id', $user_id);
        $t->assign('group_id', $this->getGroupId());
        $t->assign('bdate', $this->getBeginDate()->format());

        // page title
        $page_title = grn_get_current_page_display_name();
        // site position
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $t->assign('referer_key', $referer_key);
        $referer_exists = false;
        if ($referer_key) {
            require_once('fw/session_manager.csp');
            $session_manager = \CB_SessionManager::getInstance();
            $session = $session_manager->getSession('schedule.referer');
            $referer = $session->get($referer_key);
            if (is_array($referer)) {
                $params = [
                    self::ARG_NAVIGATION_SP => cb_at($referer,
                        self::ARG_NAVIGATION_SP),
                    self::ARG_GROUP_ID      => cb_at($referer,
                        self::ARG_GROUP_ID),
                    self::ARG_SEARCH_TEXT   => cb_at($referer,
                        self::ARG_SEARCH_TEXT),
                    self::ARG_KW_USERS_ID   => cb_at($referer,
                        self::ARG_KW_USERS_ID),
                    self::ARG_KW_FIDS_ID    => cb_at($referer,
                        self::ARG_KW_FIDS_ID),
                    self::ARG_BEGIN_DATE    => cb_at($referer,
                        self::ARG_BEGIN_DATE),
                    self::ARG_USER_ID       => cb_at($referer,
                        self::ARG_USER_ID)
                ];
                if (array_key_exists(self::ARG_EVENT, $referer)) {
                    $params[self::ARG_EVENT] = $referer[self::ARG_EVENT];
                }
                $this->assignBreadcrumbUpperPage($t, $referer['name'],
                    $referer['page'], $params);
                $this->assignBreadcrumbCurrentPage($t, $page_title);
                $referer_exists = true;

                if (array_key_exists('back_link', $referer)) {
                    $t->assign('is_reuse', true);
                    $t->assign('back_link', $referer['back_link']);
                }
            }
        }

        if ($referer_exists === false) {
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.schedule', 'GRN_SCH-982'),
                'schedule/mobile/personal_week');
            $this->assignBreadcrumbCurrentPage($t, $page_title);
        }
        $t->assign('page_title', $page_title);

        $before_delete = [
            'title'         => grn_get_page_display_name('schedule/mobile/repeat_add'),
            'page'          => 'schedule/unrepeat_add.tpl',
            'handler'       => 'tab-repeat-schedule',
            'handlerlink'   => 'link-repeat-schedule',
            'before_delete' => 'check_facility'
        ];
        $t->assign('before_delete', $before_delete);

        $page_name = cb_get_pagename();
        $t->assign('page_name', $page_name);

        $page_name .= '/facility';
        $extra_node = true;
        $fgroup_id = 'f';
        $tree_data = $this->getFacilityGroupsTreeMenu($page_name, $fgroup_id,
            $extra_node);
        $t->assign('fgroup_list', $tree_data['org']);

        $facility_tree_for_view = [
            'tree_name' => 'facility_categories_tree',
            'root'      => $tree_data['origin_org'],
            'async_url' => 'schedule/mobile/ajax/get_facility_sub_group',
            'oid_key'   => 'oid',
            'page_name' => $page_name,
            'no_root'   => true
        ];
        $t->assign('facility_categories_tree', $facility_tree_for_view);

        $t->assign('add_plugin', [
            'name'   => 'schedule',
            'params' => [
                'action'       => ['read', 'add'],
                'session_name' => cb_get_pagename()
            ]
        ]);
        $t->assign("view_plugin", [
            "name"   => "schedule",
            "params" => [
                "action"       => ["read"],
                "session_name" => cb_get_pagename() . "/view"
            ]
        ]);
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));

        return $t->fetch('schedule/mobile/add.tpl');
    }

    public function post($input)
    {
        $login = cb_get_login_user();

        //GTM-143
        //if(array_key_exists('hfExcept',$input))
        //{
        //    $flag = $input['hfExcept'];
        //}
        //End GTM-143

        require_once('grn/uum_util.csp');
        $uum_util = \GRN_UumUtil::getInstance();
        $input_keys = array_keys($input);
        foreach ($input_keys as $input_key) {
            if (preg_match('#^selected_users_.*$#', $input_key)) {
                $input_value = $input[$input_key];
                if (is_array($input_value)) {
                    $input_value = $input_value[0];
                }
                $input_values = explode(':', $input_value);
                if ($input_value && is_array($input_values)) {
                    $uum_util->selectUsers($login, $input_values);
                }
            } elseif (preg_match('#^selected_groups_.*$#', $input_key)) {
                $input_value = $input[$input_key];
                if (is_array($input_value)) {
                    $input_value = $input_value[0];
                }
                $input_values = explode(':', $input_value);
                if ($input_value && is_array($input_values)) {
                    $uum_util->selectGroups($login, $input_values);
                }
            }
        }

        require_once('grn/multi_select_utility.csp');
        $input = grn_deploy_selected_users('selected_users_sUID', 'sUID',
            $input);
        $input = grn_deploy_selected_users('selected_users_p_sUID', 'p_sUID',
            $input);
        $input = grn_deploy_selected_users('sITEM', 'sITEM', $input);

        // get menu
        if (array_key_exists('menu', $input)) {
            $menu = $this->getMenus();
            $input['menu'] = $this->getSelectMenu($menu, $input['menu']);
        }

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        require_once('schedule/view_util.csp');
        $util = \GRN_Schedule_View_Util::getInstance();

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        require_once('fw/date.csp');
        $event = $util->createEvent($input);

        // GTM-1681
        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            $event->setUsingPurpose(cb_at($input, 'using_purpose'));
        }
        // end GTM-1681

        // GTM-1622
        // In case of OFF Attendance check function
        $attendanceStatusLogic = new AttendanceStatusLogic();
        if ( ! $attendanceStatusLogic->isEnableAttendanceCheck()) {
            $event->attendanceCheck = null;
        }

        /**
         * 最近選択した施設を更新
         */
        require_once('schedule/facility_system_logic.csp');
        $f_his = \GRN_Facility_HistoryManager::getInstance();
        $f_his->updateHistory($login, $event);

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $this->getListGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add'], $dynamic_role, false);
        if ($access['add'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_ENTRY);
        }

        // データのチェック
        $app->checkEventData($event);

        // 公開先のチェック
        ScheduleMemberLogic::getInstance()->checkAddPublicToUser($event);

        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            if (is_a($event->setdatetime, 'CB_DateTime')
                && is_a($event->enddatetime, 'CB_Date')
            ) {
                $event->enddatetime = null;
            }
        } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            if ( ! $app->checkRepeatLimit($event->enddate, $event->setdate)) {
                cb_throw_error(E_GRN_SCHD_REPEAT_LIMIT,
                    ['limit' => $app->getRepeatLimitDate($event->setdate)]);
            }
        }

        // 施設の予約期間,最大時間をチェック(運用管理者は無制限)
        require_once('schedule/facility_privilege.csp');
        $facility_privilege = \GRN_Facility_Privilege_Logic::getInstance();
        if ($obj_facilities
            = $facility_privilege->getFacilitiesWithoutAuthority($login,
            $event->facilities)
        ) {
            if (is_a($event, 'GRN_Schedule_NormalEvent')) {
                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $event->enddatetime, $event->setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $event->enddatetime);
            } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                $facility_logic->checkFacilityRepeat($obj_facilities);

                // Create today's CB_DateTime for facility max time check
                $ts = new \CB_TimeStamp();
                $ts->unix_ts = time();
                $tsex = new \CB_TimeStampEx($ts);

                $setdatetime = &$tsex->getDateTime();
                $setdatetime->setTime($event->settime);

                $enddatetime = &$tsex->getDateTime();
                $enddatetime->setTime($event->endtime);

                if ($enddatetime->compare($setdatetime) < 0) {
                    $enddatetime->moveDays(1);
                }

                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $enddatetime, $setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $event->enddate);
            } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
                foreach ($event->setdates as $temp_date) {
                    $facility_logic->checkFacilityMaxTime($obj_facilities,
                        $event->enddatetime, $event->setdatetime);
                    $facility_logic->checkFacilityLimit($obj_facilities,
                        $temp_date['enddatetime']);
                }
            }
        }

        if ($event instanceof \GRN_Schedule_RepeatEvent) {
            $facilityApprovalLogic = new FacilityApprovalLogic();
            $facilityApprovalLogic->validateEventFacilitiesForAdd($event);
        }

        // 登録情報
        $event->creator = $login;
        //GTM-143
        if (array_key_exists('hfExcept', $input)) {
            $timestamp = new \CB_TimeStampEx();
            require_once('schedule/repeat_event_logic.csp');
            $logic = \GRN_Schedule_RepeatEventLogic::getInstance();
            $excepts = [];
            if (strlen($input['hfExcept']) > 0) {
                $excepts = explode(";", substr($input['hfExcept'], 1));
            }
            $exceptDate = [];
            foreach ($excepts as $except) {
                //CB_Date $date
                $timestamp->unix_ts = intval($except);
                $date = $timestamp->getDate();
                $exceptDate[] = $date;
            }
            $event->except = $exceptDate;
        }
        $app->facilityConflictHandler = function ($ob_conflict, &$continue) {
            global $flag;
            if ($flag == "") {
                $continue = false;
                if (count($ob_conflict) > 0) {
                    $json = JSONResponse::create();
                    $json->response($ob_conflict);
                }
                exit;
            } else {
                $continue = true;
            }
        };//if conflict and flag is true, execute method builder event conflict of facilities
        //END GTM-143
        $eid = $app->entryEvent($event);
        if (isset($event->except)) {
            require_once('schedule/event_base_logic.csp');
            $event_base_logic = new \GRN_Schedule_EventBaseLogic();
            $event_table = $event_base_logic->_getEventTable();
            $event_row_ex = $event_table->getRow($eid);
            if ($event_row_ex && isset($logic)) {
                foreach ($event->except as $date_ex) {
                    $logic->SetExceptDate($event_row_ex, $date_ex,
                        $event->timezone);
                }
            }
        }
        //GTM-1136
        if ($this->getAllowFileAttachment()) {
            if (cb_at($input, 'allow_file_attachment')) {
                //get files
                $tmp_key = grn_get_temporary_key();
                $session_key = 'schedule-mobile-change-page-' . $tmp_key;
                $files = grn_get_attached_files($session_key, 'schedule',
                    cb_at($input, 'attached_file'));

                $upload_files = [];
                if (cb_at($input, 'attached_file')) {
                    require_once('grn/upload.csp');
                    $upload_files
                        = \GRN_UploadFile::getUploadedFiles(cb_at($input,
                        self::ARG_UPLOAD_TICKET),
                        cb_at($input, self::ARG_FILE_INPUT), true);
                }

                foreach ($upload_files as $fid => $file) {
                    $files[$fid] = $file;
                }

                //add files
                require_once('schedule/event_base_logic.csp');
                $event_base_logic = new \GRN_Schedule_EventBaseLogic();
                $event_table = $event_base_logic->_getEventTable();
                $event_row = $event_table->getRow($eid);
                if ( ! $event_row) {
                    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
                }

                require_once('schedule/file.csp');
                $fm = \GRN_Schedule_FileManager::getInstance();
                foreach (array_keys($files) as $key) {
                    $fm->addFile($login, $event_row, $files[$key]);
                }
            }
        }
        //End GTM-1136

        // 施設があれば、カスタマイズ項目を登録する
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            // カスタマイズ項目登録
            $facility_logic->registerData($eid);
            // GTM-1676, fixed GRB-17049
            if ($event instanceof \GRN_Schedule_NormalEvent) {
                $facilityApprovalLogic = new FacilityApprovalLogic();
                $facilityIds
                    = $facilityApprovalLogic->objectArrayToIdArray($event->facilities);
                $facilityApprovalLogic->setFacilitiesApplyingInfo($event,
                    $facilityIds);
            }
            // end
        }

        // 今日を求める
        $tsex = new \CB_TimeStampEx();
        $today = $tsex->getDate();

        $bdate = &$event->getFirstDate($today);

        $b_notify = true;
        if ($today->compare($bdate) > 0) {
            $b_notify = false;
        }

        // 通知のタイトルの作成
        if ($b_notify) {
            // tuning GRB-15157
            // param for load and cache setting
            $param_loadAndCache = ['user', 'locale'];

            require_once('grn/application.csp');
            $app_locator = \GRN_ApplicationLocator::instance();

            // 登録の通知
            if ($event->users && count($event->users) > 0) {
                $app_locator->loadAndCacheUsersSetting($event->users,
                    $param_loadAndCache);
                $title = $this->getNotifyTitle($event);
                $app->setNotify($event->users, $login, $event, $bdate, $title,
                    '', GRN_SCHEDULE_NOTIFY_ENTRY, $tsex);
                $app->forwardMail($event,
                    [GRN_SCHEDULE_NOTIFY_ENTRY => $event->users], $login);
                $app->sendPushNotification(
                    $event, [GRN_SCHEDULE_NOTIFY_ENTRY => $event->users],
                    $login, true, $bdate, null);
            }

            // GTM-1676
            if (is_array($event->facilities) && count($event->facilities) > 0) {
                $app->sendFacilityApprovalRequestNotify($event->facilities,
                    $event, $login, $tsex);
                // GTM-1675
                $app->forwardFacilityRelyMail($event, $login);
                // end GTM-1675
                $app->sendPushNotificationOfFacilityRequest($event, [], $login);
            }
            // end GTM-1676

            // 通知先の指定がある場合
            if ($event->private && is_array($event->notify_address)
                && count($event->notify_address) > 0
            ) {
                $title = $this->getNotifyTitle($event);
                $app->sendNotificationsToPublic($login, $event, $bdate, '',
                    $tsex, $title, true, true, GRN_SCHEDULE_NOTIFY_ENTRY);
            }
        }

        // リダイレクト先の情報の設定
        $user_id = array_key_exists('uid', $input) ? $input['uid']
            : $login->getOID();
        if ( ! $user_id) {
            $user_id = $login->getOID();
        }

        $b_contain = false;
        $facility_ids = null;
        $member_ids = null;
        if (($fid = mb_substr($user_id, 0, 1)) === 'f') {
            $facility_ids = array_key_exists('sITEM', $input) ? $input['sITEM']
                : false;
            if (is_array($facility_ids) && count($facility_ids) > 0) {
                foreach ($facility_ids as $key) {
                    if ($key === $fid) {
                        $b_contain = true;
                        break;
                    }
                }
            }
        } else {
            $member_ids = array_key_exists('sUID', $input) ? $input['sUID']
                : false;
            if (is_array($member_ids) && count($member_ids) > 0) {
                foreach ($member_ids as $key) {
                    if ($key === $user_id) {
                        $b_contain = true;
                        break;
                    }
                }
            }
        }

        // 登録した内容にいない場合
        if ( ! $b_contain) {
            $user_id = null;

            if (is_null($member_ids)) {
                $member_ids = array_key_exists('sUID', $input) ? $input['sUID']
                    : false;
            }

            if (is_array($member_ids) && count($member_ids) > 0) {
                $user_id = reset($member_ids);
            }

            if (is_null($user_id)) {
                if (is_null($facility_ids)) {
                    $facility_ids = array_key_exists('sITEM', $input)
                        ? $input['sITEM'] : false;
                }

                if (is_array($facility_ids) && count($facility_ids) > 0) {
                    $user_id = 'f' . reset($facility_ids);
                }
            }
        }

        $referer_key = cb_at($input, self::ARG_REFERER_KEY);

        return [
            "result"   => "ok",
            "redirect" => cb_format_url(
                "schedule/mobile/view",
                [
                    'event'       => $eid,
                    'bdate'       => $bdate->format(),
                    'uid'         => $user_id,
                    'referer_key' => $referer_key
                ]
            )
        ];
    }

    public function getTitle()
    {
        return grn_get_page_display_name('schedule/mobile/add');
    }

    public function getRemoveFooter()
    {
        return true;
    }
}
