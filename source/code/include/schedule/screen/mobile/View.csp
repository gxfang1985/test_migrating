<?php

namespace grn\schedule\screen\mobile;

use grn\kintone\bean\GrnKintoneAppRelationSetting;
use grn\schedule\scheduleKintoneAppRelationLogic;
use grn\kintone\AppRelationSettingLogic;
use grn\grn\Validate;
use grn\schedule\bean\AttendanceStatusCondition;
use grn\schedule\bean\AttendanceStatus;
use grn\schedule\AttendanceStatusLogic;
use grn\schedule\FacilityApprovalViewUtil;
use grn\schedule\ScheduleMemberLogic;

class View extends MobileScheduleScreenBase
{
    public function __construct($input, $construct = true)
    {
        parent::__construct($input);
        if ($construct) {
            $event = $this->getEventForView();
            $access = $this->getAccess();

            $event_id = $event->id;
            $bdate = cb_at($input, self::ARG_BEGIN_DATE);
            $user_id = cb_at($input, self::ARG_USER_ID);
            $group_id = cb_at($input, self::ARG_GROUP_ID);
            $referer_key = cb_at($input, self::ARG_REFERER_KEY);

            $login = cb_get_login_user();
            $login_id = $login->getOID();

            require_once('schedule/application.csp');
            $app = \GRN_Schedule_Application::getInstance();
            $date = new \CB_Date();
            if ( ! $date->parse($bdate)) {
                $tsex = new \CB_TimeStampEx();
                $date = $tsex->getDate();
            }
            //footer bar
            //functions
            $edit_page = '';
            $reuse_page = '';
            if (is_a($event, 'GRN_Schedule_BannerEvent')) {
                $reuse_page = 'schedule/mobile/banner_add';
                $edit_page = 'schedule/mobile/banner_modify';
                // 日付が違う場合は、元の日付に戻す
                require_once('schedule/banner_event_logic.csp');
                $banner_logic = \GRN_Schedule_BannerEventLogic::getInstance();
                if ( ! $banner_logic->isInDateSpan($event, $date)) {
                    $banner_setdatetime
                        = $banner_logic->getStartDateTimeInUserTimezone($event);
                    $date->year = $banner_setdatetime->year;
                    $date->month = $banner_setdatetime->month;
                    $date->day = $banner_setdatetime->day;
                }
            } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                $reuse_page = 'schedule/mobile/repeat_add';
                $edit_page = 'schedule/mobile/repeat_modify';
                require_once('schedule/repeat_event_logic.csp');
                $repeat_logic = \GRN_Schedule_RepeatEventLogic::getInstance();
                $event_date = $repeat_logic->getRepeatFirstDate($event,
                    $date);

                if (is_a($event_date['setdatetime'], 'CB_Date')
                    || is_a($event_date['setdatetime'], 'CB_DateTime')
                ) {
                    $date->year = $event_date['setdatetime']->year;
                    $date->month = $event_date['setdatetime']->month;
                    $date->day = $event_date['setdatetime']->day;
                }
            } elseif (is_a($event, 'GRN_Schedule_NormalEvent')) {
                $reuse_page = 'schedule/mobile/add';
                $edit_page = 'schedule/mobile/modify';
                if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_START)
                    == GRN_SCHEDULE_EVENT_TYPE_START
                ) {
                    // 日付が違う場合は、元の日付に戻す
                    if ($app->compareDate($event->setdatetime, $date) !== 0) {
                        $date->year = $event->setdatetime->year;
                        $date->month = $event->setdatetime->month;
                        $date->day = $event->setdatetime->day;
                    }
                } else {
                    if (($app->compareDate($date, $event->setdatetime) < 0)
                        || ($app->compareDate($date, $event->enddatetime) > 0)
                    ) {
                        $date->year = $event->setdatetime->year;
                        $date->month = $event->setdatetime->month;
                        $date->day = $event->setdatetime->day;
                    }
                }
            } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
                require_once('schedule/temporary_event_logic.csp');
                $temporary_event_logic
                    = \GRN_Schedule_TemporaryEventLogic::getInstance();
                $date = $temporary_event_logic->getDisplayDate($event, $date);
            }
            $params = [
                'event'       => $event_id,
                'bdate'       => $date->format(),
                'uid'         => $user_id,
                'gid'         => $group_id,
                'referer_key' => $referer_key
            ];

            $edit_params = [
                'page'   => $edit_page,
                'params' => $params
            ];
            $comment_params = [
                'page'   => 'schedule/mobile/comment_add',
                'params' => $params
            ];
            //function rights
            if ($access['modify']
                && ! is_a($event, 'GRN_Schedule_TemporaryEvent')
            ) {
                if ($access['follow']) {
                    $funcs = [
                        'edit'    => $edit_params,
                        'comment' => $comment_params
                    ];
                } else {
                    $funcs = ['edit' => $edit_params];
                }
            } else {
                if ($access['follow']) {
                    $funcs = ['comment' => $comment_params];
                } else {
                    $funcs = [];
                }
            }

            $this->setMobileFooterBar($funcs);

            //operation menu
            $reuse_menu_params = [
                'page'   => $reuse_page,
                'name'   => cb_msg('grn.schedule', 'GRN_SCH-967'),
                'params' => $params
            ];
            $delete_menu_params = [
                'page'   => 'schedule/mobile/delete',
                'name'   => cb_msg('grn.schedule', 'GRN_SCH-968'),
                'params' => $params
            ];
            $participate_menu_params = [
                'page'   => 'schedule/mobile/participate',
                'name'   => cb_msg('grn.schedule', 'GRN_SCH-969'),
                'params' => $params
            ];
            $leave_menu_params = [
                'page'   => 'schedule/mobile/leave',
                'name'   => cb_msg('grn.schedule', 'GRN_SCH-970'),
                'params' => $params
            ];
            $params['event_date'] = $date->format();
            $params['gid'] = 'virtual';
            $planner_menu_params = [
                'page'   => 'schedule/mobile/group_day',
                'name'   => cb_msg('grn.schedule', 'GRN_SCH-971'),
                'params' => $params
            ];
            //operation menu right
            $operation_menu = [];
            if ($access['add']) {
                if ( ! is_a($event, 'GRN_Schedule_TemporaryEvent')) {
                    $operation_menu[] = $reuse_menu_params;
                }
            }
            if ($access['delete']) {
                $operation_menu[] = $delete_menu_params;
            }

            //GTM-1630
            $change_status_menu_params = [
                'page'   => 'schedule/mobile/status_change',
                'name'   => cb_msg('grn.schedule.mobile', 'GRN_SCH_MOBILE-33'),
                'params' => $params
            ];
            if ($this->isAttendanceCheckView($event)
                && $this->isAttendee($login_id, $event)
            ) {
                $operation_menu[] = $change_status_menu_params;
            }

            //participation
            $is_participate = false;
            if (is_array($event->users)
                && array_key_exists($login_id, $event->users)
            ) {
                $is_participate = true;
            }

            require_once('schedule/view_util.csp');
            $util = \GRN_Schedule_View_Util::getInstance();
            $event_type = $util->getViewEventType($event->getEventType(),
                $event->isShared());

            if ($access['modify'] && $event_type != 'share_temporary'
                && $event_type != 'temporary'
            ) {
                if ($is_participate) {
                    if ((count($event->users) + count($event->groups)) > 1
                        || count($event->facilities) > 0
                    ) {
                        $operation_menu[] = $leave_menu_params;
                    }
                } else {
                    $operation_menu[] = $participate_menu_params;
                }
            }
            $operation_menu[] = $planner_menu_params;
            $this->setMobileOperateMenu($operation_menu);
        }
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $input = $this->getInput();
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $referer_bdate = cb_at($input, self::ARG_REFERER_BDATE);

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        require_once('schedule/view_util.csp');
        $util = \GRN_Schedule_View_Util::getInstance();
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        require_once('schedule/system_logic.csp');
        $systemlogic = \GRN_Schedule_SystemLogic::getInstance();

        $login = cb_get_login_user();
        $login_id = $login->getOID();

        $event = $this->getEventForView();
        $event_id = $event->id;

        //set date
        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $tsex = new \CB_TimeStampEx();
            $date = $tsex->getDate();
        }

        //GTM-1630
        $attendanceDetails = [];
        $attendanceStatusLogic = $this->getAttendanceStatusLogic();

        $isAttendanceCheckView = $this->isAttendanceCheckView($event);
        $t->assign("is_attendance_check_view", $isAttendanceCheckView);

        $isAttendee = $this->isAttendee($login_id, $event);
        $t->assign("is_attendee", $isAttendee);

        if ($isAttendanceCheckView) {
            $attendanceStatus = $this->getAttendanceStatus($login_id, $event);
            $t->assign("attendance_status", $attendanceStatus);
        }

        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_START)
                == GRN_SCHEDULE_EVENT_TYPE_START
            ) {
                if ($app->compareDate($event->setdatetime, $date) !== 0) {
                    $date->year = $event->setdatetime->year;
                    $date->month = $event->setdatetime->month;
                    $date->day = $event->setdatetime->day;
                }
            } else {
                if (($app->compareDate($date, $event->setdatetime) < 0)
                    || ($app->compareDate($date, $event->enddatetime) > 0)
                ) {
                    $date->year = $event->setdatetime->year;
                    $date->month = $event->setdatetime->month;
                    $date->day = $event->setdatetime->day;
                }
            }
        } elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
            require_once('schedule/banner_event_logic.csp');
            $banner_logic = \GRN_Schedule_BannerEventLogic::getInstance();
            if ( ! $banner_logic->isInDateSpan($event, $date)) {
                $banner_setdatetime
                    = $banner_logic->getStartDateTimeInUserTimezone($event);
                $date->year = $banner_setdatetime->year;
                $date->month = $banner_setdatetime->month;
                $date->day = $banner_setdatetime->day;
            }
        } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            require_once('schedule/repeat_event_logic.csp');
            $repeat_logic = \GRN_Schedule_RepeatEventLogic::getInstance();
            $event_date = $repeat_logic->getRepeatFirstDate($event, $date);

            if (is_a($event_date['setdatetime'], 'CB_Date')
                || is_a($event_date['setdatetime'], 'CB_DateTime')
            ) {
                $date->year = $event_date['setdatetime']->year;
                $date->month = $event_date['setdatetime']->month;
                $date->day = $event_date['setdatetime']->day;

                $event->setdatetime = &$event_date['setdatetime'];
                $event->enddatetime = &$event_date['enddatetime'];
            } else {
                cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
            }
        } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')
                  && is_a($date, 'CB_Date')
        ) {
            require_once('schedule/temporary_event_logic.csp');
            $temporary_event_logic
                = \GRN_Schedule_TemporaryEventLogic::getInstance();
            $date = $temporary_event_logic->getDisplayDate($event, $date);
        }

        //check access right
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $dynamic_roles = $uum->listGrantedRoles();
        $access = $this->getAccess();
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        $temp = ['user_id' => $user_id, 'event_id' => $event_id];
        $temp['allday'] = ($event->getEventType()
                           & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) ? true : false;

        //start_date, end_date, repeat_data, temporary_type, temporary, allday
        $is_same_day = false;
        if (is_a($event, 'GRN_Schedule_BannerEvent')) {
            $tmp_start_date = new \CB_Date();
            $tmp_start_date->parse($event->setdate->format());
            $tmp_start_datetime
                = \CB_DateTimeEx::createByDateAndTime($tmp_start_date,
                \GRN_Schedule_View_Util::getAlldayStartTime());
            $temp['start_date']
                = \CB_I18N::translateDatetimeTimezone($tmp_start_datetime,
                $event->timezone,
                \CB_I18N::getInstance()->getCurrentTimezone());
            $tmp_end_date = new \CB_Date();
            $tmp_end_date->parse($event->enddate->format());
            $tmp_end_datetime
                = \CB_DateTimeEx::createByDateAndTime($tmp_end_date,
                \GRN_Schedule_View_Util::getAlldayEndTime());
            $temp['end_date']
                = \CB_I18N::translateDatetimeTimezone($tmp_end_datetime,
                $event->timezone,
                \CB_I18N::getInstance()->getCurrentTimezone());

            if ($app->compareDate($temp['start_date'], $temp['end_date'])
                === 0
            ) {
                $is_same_day = true;
            }
        } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            $temp['repeat_data'] = $util->getRepeatData($event->repeat_type,
                $event->wday, $event->day);
            $start_time = $event->settime;
            if (is_null($start_time)) {
                $start_time = \GRN_Schedule_View_Util::getAlldayStartTime();
            }
            $end_time = $event->endtime;
            if (is_null($end_time)) {
                $end_time = \GRN_Schedule_View_Util::getAlldayEndTime();
            }

            $start_datetime
                = \CB_DateTimeEx::createByDateAndTime($event->setdate,
                $start_time);
            $end_datetime
                = \CB_DateTimeEx::createByDateAndTime($event->enddate,
                $end_time);
            $current_timezone = \CB_I18N::getInstance()->getCurrentTimezone();
            $start_datetime
                = \CB_I18N::translateDatetimeTimezone($start_datetime,
                $event->timezone, $current_timezone);
            $end_datetime
                = \CB_I18N::translateDatetimeTimezone($end_datetime,
                $event->timezone, $current_timezone);
            $temp['start_date'] = $start_datetime->getDate()->format();
            $temp['end_date'] = $end_datetime->getDate()->format();

            // Get times of the displayed day
            if ($str_end_day) {
                $end_day = new \CB_Date();
                $end_day->parse($str_end_day);
                $start_datetime = \CB_DateTimeEx::createByDateAndTime($end_day,
                    $start_time);
                $end_datetime = \CB_DateTimeEx::createByDateAndTime($end_day,
                    $end_time);
            } else {
                $start_datetime = \CB_DateTimeEx::createByDateAndTime($date,
                    $start_time);
                $end_datetime = \CB_DateTimeEx::createByDateAndTime($date,
                    $end_time);
            }

            $start_datetime
                = \CB_I18N::translateDatetimeTimezone($start_datetime,
                $event->timezone, $current_timezone);
            $end_datetime = \CB_I18N::translateDatetimeTimezone($end_datetime,
                $event->timezone, $current_timezone);

            if ($end_datetime->compare($start_datetime) < 0) {
                $end_datetime->moveDays(1);
            }

            if ($app->compareDate($start_datetime, $end_datetime) === 0) {
                $is_same_day = true;
            }
            $temp['start_time'] = $start_datetime->format();
            $temp['end_time'] = $end_datetime->format();
            if (is_null($event->endtime) && ! is_null($event->settime)) {
                $temp['end_time'] = "";
            }
        } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            $temporary = [];
            if ($event->isORSearch()) {
                //check access right of each candidate facilities
                $candidate_id_list = [];
                foreach ($event->setdates as $facility_data) {
                    $candidate_list[$facility_data['facility']->getOID()]
                        = $facility_data['facility'];
                }

                $authorities = ['read', 'add', 'modify', 'delete'];
                $acc_lists = $acc_logic->getFacilityGroupAccessList($login,
                    $candidate_list, $authorities, $dynamic_roles);
                $tmp_acc_lists = $acc_logic->getEvaluateAccessesListById($login,
                    $candidate_list,
                    'facility',
                    $authorities,
                    $dynamic_roles);
                if (is_array($tmp_acc_lists)) {
                    $acc_lists += $tmp_acc_lists;
                }

                //check participation
                $is_participate = false;
                if (is_array($event->users)
                    && array_key_exists($login_id, $event->users)
                ) {
                    $is_participate = true;
                }

                foreach ($event->setdates as $facility_data) {
                    $facility_dates = [];
                    foreach ($facility_data['dates'] as $tp_id => $temp_date) {
                        $string_datetime = "DateTimeLong_YMDW_HM";
                        if ($app->compareDate($temp_date['setdatetime'],
                                $temp_date['enddatetime']) === 0
                        ) {
                            $string_datetime = "TimeShort_HM";
                        }
                        $facility_dates[] = [
                            'temporary_id'    => $tp_id,
                            'setdatetime'     => $temp_date['setdatetime'],
                            'enddatetime'     => $temp_date['enddatetime'],
                            'string_datetime' => $string_datetime
                        ];
                    }

                    //
                    $determine = true;
                    $candidate_access
                        = $acc_lists[$facility_data['facility']->getOID()];
                    if ( ! $is_participate
                         && $candidate_access['add'] == GRN_SCHD_ACCESS_DENY
                         && $candidate_access['modify'] == GRN_SCHD_ACCESS_DENY
                         && $candidate_access['delete'] == GRN_SCHD_ACCESS_DENY
                    ) {
                        $determine = false;
                    }

                    $temporary[] = [
                        'facility_name' => $facility_data['facility']->get('name'),
                        'dates'         => $facility_dates,
                        'determine'     => $determine
                    ];
                }
                $temp['temporary_type'] = 'or';
            } else {
                foreach ($event->setdates as $tp_id => $temp_date) {
                    $string_datetime = "DateTimeLong_YMDW_HM";
                    if ($app->compareDate($temp_date['setdatetime'],
                            $temp_date['enddatetime']) === 0
                    ) {
                        $string_datetime = "TimeShort_HM";
                    }
                    $temporary[] = [
                        'temporary_id'    => $tp_id,
                        'setdatetime'     => $temp_date['setdatetime'],
                        'enddatetime'     => $temp_date['enddatetime'],
                        'string_datetime' => $string_datetime
                    ];
                }
                $temp['temporary_type'] = 'normal';
            }
            $temp['temporary'] = $temporary;
        } else {
            $temp['start_date'] = $event->setdatetime->format();
            if ($event->enddatetime) {
                $temp['end_date'] = $event->enddatetime->format();
            }

            if ($temp['allday']) {
                $tmp_start_date = new \CB_Date();
                $tmp_start_date->parse($temp['start_date']);
                $tmp_start_datetime
                    = \CB_DateTimeEx::createByDateAndTime($tmp_start_date,
                    \GRN_Schedule_View_Util::getAlldayStartTime());
                $temp['start_date']
                    = \CB_I18N::translateDatetimeTimezone($tmp_start_datetime,
                    $event->timezone,
                    \CB_I18N::getInstance()->getCurrentTimezone());
                if ($event->enddatetime) {
                    $tmp_end_date = new \CB_Date();
                    $tmp_end_date->parse($temp['end_date']);
                    $tmp_end_datetime
                        = \CB_DateTimeEx::createByDateAndTime($tmp_end_date,
                        \GRN_Schedule_View_Util::getAlldayEndTime());
                    $temp['end_date']
                        = \CB_I18N::translateDatetimeTimezone($tmp_end_datetime,
                        $event->timezone,
                        \CB_I18N::getInstance()->getCurrentTimezone());
                }

                if ($event->enddatetime
                    && $app->compareDate($temp['start_date'], $temp['end_date'])
                       === 0
                ) {
                    $is_same_day = true;
                }
            } else {
                if ($event->enddatetime
                    && $app->compareDate($event->setdatetime,
                        $event->enddatetime) === 0
                ) {
                    $is_same_day = true;
                }
            }
        }

        //last repeat event
        //add message warning for the last repeat event
        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            if ($event->isLastRepeatEvent()) {
                $temp['last_repeat_event'] = true;
            }
        }

        //address
        if ( ! is_null($event->company_name)
             ||
             ! is_null($event->zip_code)
             ||
             ! is_null($event->physical_address)
             ||
             ! is_null($event->map)
             ||
             ! is_null($event->route)
             ||
             ! is_null($event->company_telephone_number)
             ||
             ! is_null($event->facsimile_number)
             ||
             ! is_null($event->company_url)
        ) {
            $address = [];
            $address['company_name'] = $event->company_name;
            $address['zip_code'] = $event->zip_code;
            $address['physical_address'] = $event->physical_address;
            $address['route'] = $event->route;
            $address['route_time'] = $event->route_time;
            $address['route_fare'] = $event->route_fare;
            $address['company_telephone_number']
                = $event->company_telephone_number;
            $address['facsimile_number'] = $event->facsimile_number;
            $address['URL'] = $event->company_url;

            $temp['address'] = $address;
        }

        //creator
        $uids = [];
        $timestamp = new \CB_TimeStampEx($event->ctime);
        $datetime = $timestamp->getDateTime();
        $temp['ctime'] = $datetime->format();
        if (is_a($event->creator, 'CB_User')) {
            $uids[] = $event->creator->getOID();
            $temp['creator_uid'] = $event->creator->getOID();
            $temp['creator_name'] = $event->creator->get('display_name');
        } else {
            $temp['creator_uid'] = null;
            $temp['creator_name'] = $event->creator;
        }

        //modifier
        if ($event->mtime) {
            $timestamp = new \CB_TimeStampEx($event->mtime);
            $datetime = $timestamp->getDateTime();
            $temp['mtime'] = $datetime->format();
            if (is_a($event->modifier, 'CB_User')) {
                $uids[] = $event->modifier->getOID();
                $temp['modify_uid'] = $event->modifier->getOID();
                $temp['modify_name'] = $event->modifier->get('display_name');
            } else {
                $temp['modify_uid'] = null;
                $temp['modify_name'] = $event->modifier;
            }
        } else {
            $temp['mtime'] = $datetime->format();
            if (is_a($event->creator, 'CB_User')) {
                $uids[] = $event->creator->getOID();
                $temp['modify_uid'] = $event->creator->getOID();
                $temp['modify_name'] = $event->creator->get('display_name');
            } else {
                $temp['modify_uid'] = null;
                $temp['modify_name'] = $event->creator;
            }
        }

        //attendees
        $event_members = ['users' => [], 'groups' => []];
        if (is_array($event->groups)) {
            foreach ($event->groups as $object_id => $object_obj) {
                $event_members['groups'][$object_id] = $object_id;
            }
        }

        if (is_array($event->users)) {
            foreach ($event->users as $object_id => $object_obj) {
                $event_members['users'][$object_id] = $object_id;
            }
        }

        //GTM-1630
        if ($isAttendanceCheckView) {
            $groups_name = $this->getAttendanceGroupList($uum,
                $event_members);
            $attendanceDetails['groups_name'] = $groups_name;

            $this->createAttendanceDetailsCount($event_id, $attendanceDetails);
        } else {
            $attendees_count = 0;
            if (is_array($event->groups)) {
                $attendees_count += count($event->groups);
            }
            if (is_array($event->users)) {
                $attendees_count += count($event->users);
            }
            $attendees_name = [];
            $attendees_limit = 3;
            $counter = 0;
            $groups_id = [];
            foreach ($event_members['groups'] as $group_id) {
                if ($counter == $attendees_limit) {
                    break;
                }
                $groups_id[] = $group_id;
                $counter++;
            }
            $groups_info = $uum->getGroupInfoList($groups_id);
            $groups_info = $this->reorderArray($groups_id, $groups_info);
            foreach (array_keys($groups_info) as $group_id) {
                $attendees_name[] = $groups_info[$group_id]['col_name'];
            }

            foreach ($event_members['users'] as $uid) {
                if ($counter == $attendees_limit) {
                    break;
                }
                $attendees_name[] = [
                    'id'   => $uid,
                    'name' => \GRN_ControllerUtil::getUserNameText($login_id,
                        $uid)
                ];
                $counter++;
            }
        }

        //attention
        $attention = [];
        if ((is_a($event, 'GRN_Schedule_NormalEvent')
             && is_a($event->setdatetime, 'CB_DateTime'))
            || (is_a($event, 'GRN_Schedule_RepeatEvent')
                && is_a($event->setdatetime, 'CB_DateTime'))
        ) {
            if (count($event_members['groups']) > 0) {
                $event_members['groups']
                    = $acc_logic->evaluateAccessesById($login,
                    $event_members['groups'], ['read'], $dynamic_roles,
                    'group');
            }

            if (count($event_members['users']) > 0) {
                $event_members['users']
                    = $acc_logic->evaluateAccessesById($login,
                    $event_members['users'], ['read'], $dynamic_roles, 'user');
            }

            if (is_a($event, 'GRN_Schedule_NormalEvent')) {
                $setdatetime = $event->setdatetime;
                $enddatetime = $event->enddatetime;
                if (is_null($enddatetime)) {
                    $enddatetime = $event->setdatetime;
                }

                if ($app->compareDate($date, $setdatetime) !== 0) {
                    $setdatetime->year = $date->year;
                    $setdatetime->month = $date->month;
                    $setdatetime->day = $date->day;
                    $setdatetime->hour = 0;
                    $setdatetime->minute = 0;
                    $setdatetime->second = 0;
                }

                if ($app->compareDate($date, $enddatetime) !== 0) {
                    $workdate = clone $date;
                    cb_date_move_days($workdate, 1);
                    $enddatetime->year = $workdate->year;
                    $enddatetime->month = $workdate->month;
                    $enddatetime->day = $workdate->day;
                    $enddatetime->hour = 0;
                    $enddatetime->minute = 0;
                    $enddatetime->second = 0;
                }
            } else {
                $setdatetime = $event->setdatetime;
                $enddatetime = $event->enddatetime;
            }

            //is hidden private or not
            $hiddenprivate = $systemlogic->getHiddenPrivate();

            //check attention
            $attention = $app->conflictMembersEvent($login,
                $event_members, $setdatetime, $enddatetime, $event_id,
                $event->getEventType(), $hiddenprivate);
            $temp['attention'] = $attention;
        }

        //GTM-1630
        if ($isAttendanceCheckView) {
            $isConflict = array_key_exists($login_id, $attention)
                          && $attention[$login_id];
            $t->assign('conflict', $isConflict);

            $attends_name = $this->getAttendanceUserList($event, $event_members,
                $login_id);
            $this->createAttentionForUserList($attention, $attends_name);
            $attendanceDetails['attends_name'] = $attends_name;
        } else {
            $this->createAttentionForUserList($attention, $attendees_name);
            $temp['attendees_name'] = $attendees_name;
            $temp['attendees_count'] = $attendees_count;
        }

        //facilities
        $facilities_count = 0;
        $facilities_id = [];
        $facilities_name = [];
        $facilities_limit = 3;
        $counter = 0;
        if (is_array($event->facilities)) {
            $facilities_count = count($event->facilities);
            foreach ($event->facilities as $object_id => $object_obj) {
                if ($counter == $facilities_limit) {
                    break;
                }
                $facilities_id[$object_id] = $object_id;
                $counter++;
            }
        }
        $facilities_info = $facility_logic->getFacilitiesInfo($facilities_id,
            CB_DATABASE_NO_LOCK);
        foreach (array_keys($facilities_info) as $facility_id) {
            $facilities_name[$facility_id]
                = $facilities_info[$facility_id]['col_name'];
        }
        $temp['facilities_name'] = $facilities_name;
        $temp['facilities_count'] = $facilities_count;

        //GTM-1684
        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            $params = [
                'history',
                'usingPurpose',
                'currentStatus'
            ];
            $facilityApprovalViewUtil = new FacilityApprovalViewUtil();
            $facilityApprovalData
                = $facilityApprovalViewUtil->fetch($params,
                $event, $uids);
            $t->assign('facilityApprovalData', $facilityApprovalData);
        }

        //private users
        $private_users_limit = 3;
        $private_users_count = 0;
        $private_users_name = [];
        $counter = 0;
        if ($event->private && is_array($event->notify_address)
            && count($event->notify_address) > 0
        ) {
            $private_users_count = count($event->notify_address);
            $temp['private_users'] = ScheduleMemberLogic::getInstance()
                                                        ->getNotifyAddressRender($event->notify_address,
                                                            GRN_SCHEDULE_GET_MEMBER_OBJECT,
                                                            true);
            foreach ($temp['private_users'] as $member_info) {
                if ($counter == $private_users_limit) {
                    break;
                }
                if ($member_info['type'] == 'user'
                    && isset($member_info['primaryGroupName'])
                ) {
                    $private_users_name[] = $member_info['displayName'] . '; '
                                            . $member_info['primaryGroupName'];
                } else {
                    $private_users_name[] = $member_info['displayName'];
                }
                $counter++;
            }
        }
        $temp['private_users_name'] = $private_users_name;
        $temp['private_users_count'] = $private_users_count;

        //follow
        $offset = $this->getSp();
        $limit = $offset + self::MORE_VIEW_COUNT - 1;
        $follows = $app->getEventFollows($login, $event_id, 0, $limit);
        $follow_list = [];
        foreach ($follows as $fid => $follow) {
            $tsex = new \CB_TimeStampEx($follow['ctime']);
            $datetime = $tsex->getDateTime();
            if ($follow['creator_id'] == $login->getOID()) {
                $deletable = true;
            } else {
                $deletable = false;
            }
            $follow_list[] = [
                'follow_id'    => $fid,
                'creator_uid'  => $follow['creator_id'],
                'creator_name' => $follow['creator_name'],
                'ctime'        => $datetime->format(),
                'data'         => $follow['data'],
                'deletable'    => $deletable,
            ];
            $uids[] = $follow['creator_id'];
        }

        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($uids,
            $login);
        $users_info = $this->getUsersInfoType($users_info);
        $t->assign('users_info', $users_info);

        foreach ($follow_list as $follow_id => $follow_info) {
            $follow_list[$follow_id]['creator_type']
                = $users_info[$follow_info['creator_uid']]['valid'];
        }

        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            $app->countEventFollows($event_id));

        $t->assign('follow_list', $follow_list);
        $t->assign('offset', $this->getNewOffset());
        $t->assign('more_view_args', [
            self::ARG_EVENT       => $event_id,
            self::ARG_BEGIN_DATE  => $bdate,
            self::ARG_USER_ID     => $user_id,
            self::ARG_GROUP_ID    => $group_id,
            self::ARG_REFERER_KEY => $referer_key
        ]);

        //title, memo
        $temp['title'] = html_entity_decode($event->getTitle());
        if ($event->private == GRN_EVENT_PRIVATE_HIDDEN) {
            $temp['title'] .= cb_msg('grn.schedule', 'event_private');
        } elseif ($event->private == GRN_EVENT_PRIVATE_PRIVATE) {
            $temp['is_private'] = true;
        }
        $temp['type'] = $util->getViewEventType($event->getEventType(),
            $event->isShared());
        $temp['memo'] = $event->memo;

        $temp['event_detail'] = $event->detail;
        $temp['event_menu'] = $event->menu;
        $temp['event_menu_color'] = $event->menucolor;

        //attachment file
        require_once('grn/controller.csp');
        $utility = new \GRN_ControllerUtil();
        $allow_attach_files = false;
        if ($systemlogic->getAllowFileAttachment() == '1') {
            require_once('schedule/file.csp');
            $fm = \GRN_Schedule_FileManager::getInstance();
            $files = $fm->getFiles($event_id);

            $files_for_view = [];
            foreach (array_keys($files) as $fid) {
                $file =& $files[$fid];
                $files_for_view[$fid] = $utility->getFileLinkView($file);
            }

            $temp['attach_files'] = $files_for_view;
            if (count($files_for_view) > 0) {
                $allow_attach_files = true;
            }
        }
        $t->assign('allow_attach_files', $allow_attach_files);

        //access right
        $temp['access'] = $access;

        $t->assign('attendance_details', $attendanceDetails);
        $t->assign('schedule_event', $temp);
        $t->assign('is_same_day', $is_same_day);
        $t->assign('event_id', $event_id);
        $t->assign('user_id', $user_id);
        $t->assign('group_id', $group_id);
        if ($date) {
            $t->assign('bdate', $date->format());
        }

        //star
        require_once('star/logic.csp');
        $star_logic = \GRN_Star_StarLogic::getInstance();
        $t->assign('use_star', $star_logic->isActive());
        if ($star_logic->isActive()) {
            $tplvar =& $t->get_template_vars('event');
            $bdate = $t->get_template_vars('bdate');
            $unique_id = ($tplvar['type'] == 'share_repeat'
                          || $tplvar['type'] == 'repeat')
                ? "rp_{$event_id}_{$bdate}" : $event_id;
            $t->assign('star_infos',
                $star_logic->getStatusByIDs($login, GRN_SCHEDULE_MODULE_ID,
                    [$unique_id]));
        }

        //notification
        $app->readEvent($login, $event_id);

        $notify_id = cb_at($input, 'nid');
        $notify_history_id = cb_at($input, 'nhid');
        if (is_null($notify_id) && is_null($notify_history_id)) {
            $referer_exists = false;
            if ($referer_key) {
                require_once('fw/session_manager.csp');
                $session_manager = \CB_SessionManager::getInstance();
                $session
                    = $session_manager->getSession('schedule.referer');
                $referer = $session->get($referer_key);
                if (is_array($referer)) {
                    //update referer
                    $date = new \CB_Date();
                    if ($date->parse($referer_bdate)) {
                        $referer['bdate'] = $referer_bdate;
                        $session->set($referer_key, $referer);
                    }
                    $referer['back_link'] = $_SERVER['REQUEST_URI'];
                    $session->set($referer_key, $referer);
                    $sp = 0;
                    $gid = '';
                    $search_text = '';
                    $uids = '';
                    $fids = '';
                    $bdate_back_link = '';
                    if (is_array($referer)) {
                        $gid = cb_at($referer, 'gid');
                        $sp = cb_at($referer, 'sp');
                        $search_text = cb_at($referer, 'search_text');
                        $uids = cb_at($referer,
                            self::ARG_KW_USERS_ID);
                        $fids = cb_at($referer,
                            self::ARG_KW_FIDS_ID);
                        $bdate_back_link = cb_at($referer,
                            self::ARG_BEGIN_DATE);
                    }
                    //for back page
                    $params = [
                        self::ARG_BEGIN_DATE    => $bdate_back_link,
                        self::ARG_USER_ID       => cb_at($referer,
                            self::ARG_USER_ID),
                        self::ARG_GROUP_ID      => $gid,
                        self::ARG_NAVIGATION_SP => $sp,
                        self::ARG_SEARCH_TEXT   => $search_text,
                        self::ARG_KW_USERS_ID   => $uids,
                        self::ARG_KW_FIDS_ID    => $fids
                    ];
                    if (array_key_exists(self::ARG_EVENT, $referer)) {
                        $params[self::ARG_EVENT] = $referer[self::ARG_EVENT];
                    }
                    $this->assignBreadcrumbUpperPage($t, $referer['name'],
                        $referer['page'], $params);
                    $referer_exists = true;
                }
            }

            if ($referer_exists === false) {
                $this->assignBreadcrumbUpperPage($t,
                    cb_msg('grn.schedule', 'GRN_SCH-982'),
                    'schedule/mobile/personal_week');
            }
        } else {
            $this->assignBreadcrumbUpperPage($t, '', '', [], true);
        }

        $t->assign('referer_key', $referer_key);

        //kintone relation
        if (defined('ON_FOREST')) {
            $relation_setting_logic = new AppRelationSettingLogic();
            $relation_settings
                = $relation_setting_logic->getAllRelationSettings("schedule/add");
            $own_related_kintoneapp = [];
            foreach ($relation_settings as $r_key => $r_value) {
                if (cb_at($r_value, AppRelationSettingLogic::ALL_MENU)) {
                    $own_related_kintoneapp[$r_key]
                        = $r_value[AppRelationSettingLogic::KINTONE_APP];
                } elseif ( ! Validate::isNull($event->menu)
                           && array_key_exists(AppRelationSettingLogic::MENUS,
                        $r_value)
                           && in_array($event->menu,
                        $r_value[AppRelationSettingLogic::MENUS])
                ) {
                    $own_related_kintoneapp[$r_key]
                        = $r_value[AppRelationSettingLogic::KINTONE_APP];
                }
            }

            $schedule_kintone_logic = new scheduleKintoneAppRelationLogic();
            $schedule_kintone_records
                = $schedule_kintone_logic->getRelatedAppRecords($event_id,
                $own_related_kintoneapp);
            $schedule_kintone_records_for_view = [];
            foreach ($own_related_kintoneapp as $o_key => $o_value) {
                $schedule_kintone_records_for_view[$o_key]["item_id"] = $o_key;
                $schedule_kintone_records_for_view[$o_key]["item_name"]
                    = $relation_settings[$o_key][AppRelationSettingLogic::ITEM_NAME];
                if (cb_at($schedule_kintone_records, $o_key)) {
                    $schedule_kintone_records_for_view[$o_key]["app_id"]
                        = $schedule_kintone_records[$o_key][GrnKintoneAppRelationSetting::VALUE_KEY_APP_ID];
                    $schedule_kintone_records_for_view[$o_key]["record_id"]
                        = $schedule_kintone_records[$o_key]["record_id"];
                    $schedule_kintone_records_for_view[$o_key]["field_code"]
                        = $schedule_kintone_records[$o_key][GrnKintoneAppRelationSetting::VALUE_KEY_APP_FIELD_CODE];
                }
            }

            $t->assign("kintone_records", $schedule_kintone_records_for_view);
            $t->assign("kintone_error_resource",
                ["access_error" => cb_msg('grn.schedule', 'GRN_SCH-943')]);
        }

        require_once('kintone/Logic.csp');
        require_once('fw/slash_util.csp');
        $kintone_available = false;


        if (\GRN_Kintone_Logic::isAvailable()
            && \CB_SlashUtil::isGaiaLicenseapiRequest()
        ) {
            $kintone_available = true;
        }
        $t->assign("kintone_available", $kintone_available);

        //breadcrumb
        $this->assignBreadcrumbCurrentPage($t,
            cb_msg('grn.mobile', 'detail_title'));

        return $t->fetch('schedule/mobile/view.tpl');
    }

    public function fetchCommentForAjax()
    {
        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $login = cb_get_login_user();

        $input = $this->getInput();
        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);

        $t->assign('event_id', $event_id);
        $t->assign('bdate', $bdate);
        $t->assign('user_id', $user_id);
        $t->assign('group_id', $group_id);
        $t->assign('referer_key', $referer_key);

        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $date = null;
        }

        //check event
        if ( ! $event_id) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add', 'modify', 'delete'], $dynamic_role);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        $offset = cb_at($input, self::ARG_NAVIGATION_SP);
        $limit = $offset + self::MORE_VIEW_COUNT - 1;
        $follows = $app->getEventFollows($login, $event_id, 0, $limit);
        $uids = [];
        $follow_list = [];
        foreach ($follows as $fid => $follow) {
            $tsex = new \CB_TimeStampEx($follow['ctime']);
            $datetime = $tsex->getDateTime();
            $follow_list[] = [
                'follow_id'    => $fid,
                'creator_uid'  => $follow['creator_id'],
                'creator_name' => $follow['creator_name'],
                'ctime'        => $datetime->format(),
                'data'         => $follow['data'],
            ];
            $uids[] = $follow['creator_id'];
        }

        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($uids,
            $login);
        $users_info = $this->getUsersInfoType($users_info);
        $t->assign('users_info', $users_info);

        foreach ($follow_list as $follow_id => $follow_info) {
            if ($follow_info['creator_uid'] == "") {
                $follow_list[$follow_id]['creator_type'] = "unlogin_user";
            } else {
                $follow_list[$follow_id]['creator_type']
                    = $users_info[$follow_info['creator_uid']]['valid'];
            }
            if ($follow_info['creator_uid'] == $login->getOID()) {
                $follow_list[$follow_id]['deletable'] = true;
            } else {
                $follow_list[$follow_id]['deletable'] = false;
            }
        }

        $t->assign('follow_list', $follow_list);
        $t->assign('more_view_args', [
            self::ARG_EVENT       => $event_id,
            self::ARG_BEGIN_DATE  => $bdate,
            self::ARG_USER_ID     => $user_id,
            self::ARG_GROUP_ID    => $group_id,
            self::ARG_REFERER_KEY => $referer_key
        ]);

        $this->setNewOffset($offset, self::MORE_VIEW_COUNT,
            $app->countEventFollows($event_id));

        return $t->fetch('schedule/mobile/comment_list.tpl');
    }

    public function getTitle()
    {
        $event = $this->getEventForView();

        return empty($event->detail) ? cb_msg('grn.schedule', 'view')
            : $event->detail;
    }

    //GTM-1630
    public function post($input)
    {
        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $comment_data = cb_at($input, self::ARG_COMMENT_DATA);
        $attendance_status = cb_at($input, self::ARG_ATTENDANCE_STATUS);
        $attendance_status = $attendance_status
            ? AttendanceStatus::STATUS_ABSENT
            : AttendanceStatus::STATUS_ATTENDANT;

        $login = cb_get_login_user();
        $login_id = $login->getOID();

        $event = $this->getEventForView();

        $attendanceStatusLogic = $this->getAttendanceStatusLogic();
        $isEnableAttendanceCheck
            = $attendanceStatusLogic->isEnableAttendanceCheck();
        if ( ! $isEnableAttendanceCheck) {
            cb_throw_error(E_GRN_SCHD_SYSTEM_ATTENDANCE_CHECK_OFF);
        }

        $isAttendanceCheckEvent = $event->isAttendanceCheckEvent();
        if ( ! $isAttendanceCheckEvent) {
            cb_throw_error(E_GRN_SCHD_NOT_ATTENDANCE_CHECK);
        }

        $attendanceStatusObj
            = $attendanceStatusLogic->getAttendanceStatusByUserIdAndEventId($login_id,
            $event_id);
        if (is_null($attendanceStatusObj)) {
            cb_throw_error(E_GRN_SCHD_NOT_ATTENDEE);
        }

        $attendanceStatusObj->setCreateTime(time());
        $attendanceStatusObj->setUserId($login_id);
        $attendanceStatusObj->setStatus($attendance_status);
        $attendanceStatusObj->setMessage($comment_data);
        if ($attendanceStatusObj->getEventId() == '') {
            $attendanceStatusObj->setEventId($event_id);
            $attendanceStatusLogic->addAttendanceStatus($attendanceStatusObj);
        } else {
            $attendanceStatusLogic->editAttendanceStatus($attendanceStatusObj);
        }

        cb_redirect('schedule/mobile/view', [
            'event'       => $event_id,
            'bdate'       => $bdate,
            'uid'         => $user_id,
            'gid'         => $group_id,
            'referer_key' => $referer_key
        ]);
    }

    private function getAttendanceStatus($login_id, $event)
    {
        $attendanceStatusValue = '';
        $attendanceStatusText = cb_msg('grn.schedule.mobile',
            'GRN_SCH_MOBILE-29');
        $unconfirmedAttendanceStatus = false;

        $attendanceStatusLogic = $this->getAttendanceStatusLogic();
        $attendanceStatusObj
            = $attendanceStatusLogic->getAttendanceStatusByUserIdAndEventId($login_id,
            $event);

        if (is_null($attendanceStatusObj)) {
            return []; // not attendee
        }

        $attendanceStatusValue = $attendanceStatusObj->getStatus();
        if ($attendanceStatusValue == '') {
            $unconfirmedAttendanceStatus = true;
        } elseif ($attendanceStatusValue == 1) {
            $attendanceStatusText = cb_msg('grn.schedule.mobile',
                'GRN_SCH_MOBILE-30');
        } elseif ($attendanceStatusValue == 0) {
            $attendanceStatusText = cb_msg('grn.schedule.mobile',
                'GRN_SCH_MOBILE-31');
        }

        $attendanceStatus = [
            "value"       => $attendanceStatusValue,
            "text"        => $attendanceStatusText,
            "unconfirmed" => $unconfirmedAttendanceStatus
        ];

        return $attendanceStatus;
    }

    private function getAttendanceUserList($event, $event_members, $login_id)
    {
        $attends_name = [];
        $attend_limit = 3;
        $counter = 0;

        $attendanceStatusLogic = $this->getAttendanceStatusLogic();
        $attendanceStatusList
            = $attendanceStatusLogic->getAttendanceStatusListByEventAndStatus($event,
            AttendanceStatus::STATUS_ATTENDANT);
        $attendanceUserIdList
            = $this->convertAttendanceStatusListToUserIdList($attendanceStatusList);

        foreach ($event_members['users'] as $uid) {
            if ($counter == $attend_limit) {
                break;
            }
            if (cb_at($attendanceUserIdList, $uid)) {
                $attends_name[] = [
                    'id'   => $uid,
                    'name' => \GRN_ControllerUtil::getUserNameText($login_id,
                        $uid)
                ];
                $counter++;
            }
        }

        return $attends_name;
    }

    private function getAttendanceGroupList($uum, $event_members)
    {
        $groups_name = [];

        $groups_id = array_keys($event_members['groups']);

        $groups_info = $uum->getGroupInfoList($groups_id);
        $groups_info = $this->reorderArray($groups_id, $groups_info);

        foreach (array_keys($groups_info) as $group_id) {
            $groups_name[] = $groups_info[$group_id]['col_name'];
        }

        return $groups_name;
    }

    private function createAttentionForUserList($attention, &$user_list)
    {
        foreach ($user_list as $user_key => $user) {
            if ( ! is_array($user)) {
                continue;
            }

            foreach ($attention as $attention_key => $attention_value) {
                if ($user['id'] == $attention_key && $attention_value) {
                    $user_list[$user_key]['attention'] = true;
                }
            }
        }
    }

    private function createAttendanceDetailsCount(
        $event_id,
        &$attendanceDetails
    ) {
        $attendanceStatusLogic = $this->getAttendanceStatusLogic();

        $attendanceStatusConditionObj = new AttendanceStatusCondition();
        $attendanceStatusConditionObj->setEventId($event_id);

        $attendanceStatusConditionObj->setStatus(AttendanceStatus::STATUS_UNCONFIRMED);
        $unconfirmedCount
            = $attendanceStatusLogic->countAttendanceStatusByCondition($attendanceStatusConditionObj);

        $attendanceStatusConditionObj->setStatus(AttendanceStatus::STATUS_ABSENT);
        $absentCount
            = $attendanceStatusLogic->countAttendanceStatusByCondition($attendanceStatusConditionObj);

        $attendanceStatusConditionObj->setStatus(AttendanceStatus::STATUS_ATTENDANT);
        $attendCount
            = $attendanceStatusLogic->countAttendanceStatusByCondition($attendanceStatusConditionObj);

        $attendanceDetails['unconfirmed_count'] = $unconfirmedCount;
        $attendanceDetails['attend_count'] = $attendCount;
        $attendanceDetails['absent_count'] = $absentCount;
        $attendanceDetails['user_count'] = $unconfirmedCount
                                           + $attendCount + $absentCount;
    }
}
