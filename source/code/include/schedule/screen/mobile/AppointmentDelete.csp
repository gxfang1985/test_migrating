<?php
/**
 * Delete appointment controller
 *
 * @author: tuyen-truong(Cybozu Vietnam)
 * @date  : 2014/03/03
 */

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;

class AppointmentDelete extends MobileScheduleScreenBase
{
    public function __construct($input)
    {
        parent::__construct($input);
    }

    /**
     * Get begin date. Override
     *
     * @return \CB_Date Object or null value.
     */
    public function getBdate()
    {
        $date = new \CB_Date();
        if ( ! $date->parse(cb_at($this->getInput(), self::ARG_BEGIN_DATE))) {
            $date = null;
        }

        return $date;
    }

    /**
     * Get event id from the $input param. Override
     */
    public function getEvent()
    {
        return cb_at($this->getInput(), self::ARG_EVENT);
    }

    /**
     * Get user id. Override
     */
    public function getUid()
    {
        return cb_at($this->getInput(), self::ARG_USER_ID);
    }

    /**
     * Get group id. Override
     */
    public function getGid()
    {
        return cb_at($this->getInput(), self::ARG_GROUP_ID);
    }

    /**
     * Deleting confirmation screen.
     */
    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        $login = $this->getLoginUser();
        $login_id = $login->getOID();
        $event = $app->getEvent($login, $this->getEvent(),
            $this->getBdate());
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        //アクセス権のチェック
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $dynamic_role = $uum->listGrantedRoles();
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'delete'], $dynamic_role);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        if ($access['delete'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_DELETE);
        }
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = &$event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                            && $event->isORSearch())
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者と共有メンバーしか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                            && $event->isORSearch())
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && (
                                 (is_array($event->users)
                                  && ! array_key_exists($login_id,
                                         $event->users))
                                 || is_null($event->users)
                             )
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id !== $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }

        $participation = '0';
        if ($event->users && count($event->users) > 0) {
            foreach (array_keys($event->users) as $key) {
                $_user = &$event->users[$key];
                if ($_user->getOID() == $login_id) {
                    $participation = $login_id;
                    break;
                }
            }
        }

        $apply = cb_at($this->getInput(), 'apply');
        $member_all = 0;
        $member_own = 0;
        $member_type = cb_at($this->getInput(), 'member');
        if ($member_type === '0') {
            $member_all = 1;
        } elseif ($member_type === '1') {
            $member_own = 1;
        }

        require_once('schedule/view_util.csp');
        $util = \GRN_Schedule_View_Util::getInstance();

        $date = $this->getBdate();
        $schedule_event = [
            'user_id'     => $participation,
            //ユーザーID
            'event_id'    => $event->id,
            //予定のID
            'type'        => $util->getViewEventType($event->getEventType(),
                $event->isShared()),
            //予定の種類
            'date'        => $date ? $date->format() : null,
            //予定の日付
            'str_date'    => $date ? cb_date_format('DateFull_YMDW', $date)
                : null,
            //予定の日付
            'data'        => html_entity_decode($event->getTitle()),
            //予定のタイトル
            'apply_this'  => $apply == 'this' ? 1 : 0,
            'apply_after' => $apply == 'after' ? 1 : 0,
            'apply_all'   => $apply == 'all' ? 1 : 0,
            'member_all'  => $member_all,
            'member_own'  => $member_own,
        ];

        if (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            $temporary = [];
            if ($event->isORSearch()) {
                $schedule_event['temporary_type'] = 'or';
                foreach ($event->setdates as $facility_data) {
                    $facility_temp = [];
                    foreach ($facility_data['dates'] as $tp_id => $temp_date) {
                        $str_date = cb_msg('grn.schedule',
                            'event_date_YMDW_HM_HM',
                            [
                                'setdate' => cb_date_format('DateFull_YMDW',
                                    $temp_date['setdatetime']),
                                'settime' => '',
                                'endtime' => ''
                            ]);
                        $str_date = trim(str_replace('～', '', $str_date));

                        $str_date_sub = cb_msg('grn.schedule',
                            'event_date_YMDW_HM_HM',
                            [
                                'setdate' => '',
                                'settime' => cb_date_format('TimeLong_HM',
                                    $temp_date['setdatetime']),
                                'endtime' => cb_date_format('TimeLong_HM',
                                    $temp_date['enddatetime'])
                            ]);
                        $str_date_sub = trim($str_date_sub);

                        $facility_temp[] = [
                            'temporary_id' => $tp_id,
                            'str_date'     => $str_date,
                            'str_date_sub' => $str_date_sub
                        ];
                    }
                    $temporary[] = [
                        'facility_name' => $facility_data['facility']->get('name'),
                        'dates'         => $facility_temp
                    ];
                }
            } else {
                foreach ($event->setdates as $tp_id => $temp_date) {
                    $str_date = cb_msg('grn.schedule', 'event_date_YMDW_HM_HM',
                        [
                            'setdate' => cb_date_format('DateFull_YMDW',
                                $temp_date['setdatetime']),
                            'settime' => '',
                            'endtime' => ''
                        ]);
                    $str_date = trim(str_replace('～', '', $str_date));

                    $str_date_sub = cb_msg('grn.schedule',
                        'event_date_YMDW_HM_HM',
                        [
                            'setdate' => '',
                            'settime' => cb_date_format('TimeLong_HM',
                                $temp_date['setdatetime']),
                            'endtime' => cb_date_format('TimeLong_HM',
                                $temp_date['enddatetime'])
                        ]);
                    $str_date_sub = trim($str_date_sub);

                    $temporary[] = [
                        'temporary_id' => $tp_id,
                        'str_date'     => $str_date,
                        'str_date_sub' => $str_date_sub
                    ];
                }
                $schedule_event['temporary_type'] = 'normal';
            }

            $schedule_event['temporary'] = $temporary;
        }

        /* -------------- VCBSCH0010 START ----------------- */
        require_once('schedule/netmeeting_event_logic.csp');
        $vcb_event_logic = \GRN_Netmeeting_EventLogic::getInstance();

        // NETMEETING連携あり
        if ($vcb_event_logic->isNetmeetingAvailable($event)) {
            // 選択されている施設がある場合
            $vcb_facility = $vcb_event_logic->getNetmeetingFacilityById($event);
            if (isset($vcb_facility)) {
                // 連携データ取得
                $coop_data
                    = $vcb_event_logic->getNetmeetingCoopDataByEventId($event_id);

                // 連携データあり
                if (isset($coop_data)) {
                    // 予約データがある場合
                    if (isset($coop_data->reservation_id)
                        && strlen($coop_data->reservation_id) > 0
                    ) {
                        // 時間のチェック
                        $event_status
                            = $vcb_event_logic->getEventStatus($event->setdatetime,
                            $event->enddatetime);

                        if ($event_status
                            !== GRN_NETMEETING_MEETING_STATUS_END
                        ) {
                            $schedule_event['netmeeting'] = true;
                        }
                        if ($event_status
                            === GRN_NETMEETING_MEETING_STATUS_NOW
                        ) {
                            $schedule_event['netmeeting_msg'] = true;
                        }
                    }
                }
            }
        }
        /* -------------- VCBSCH0010 END   ----------------- */

        $t->assign('schedule_event', $schedule_event);

        $t->assign('user_id', $this->getUid());
        $t->assign('group_id', $this->getGid());

        $referer_key = cb_at($this->getInput(), self::ARG_REFERER_KEY);

        // breadcrumb作成
        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), "schedule/mobile/view", [
                self::ARG_EVENT       => $this->getEvent(),
                self::ARG_BEGIN_DATE  => $schedule_event['date'],
                self::ARG_REFERER_KEY => $referer_key
            ]);
        $this->assignBreadcrumbCurrentPage($t, $this->getTitle());
        $t->assign(self::ARG_REFERER_KEY, $referer_key);

        return $t->fetch('schedule/mobile/delete.tpl');
    }

    public function post($input)
    {
        $event_id = $this->getEvent();
        $user_id = $this->getUid();
        $group_id = $this->getGid();
        $str_date = cb_at($input, 'bdate');
        $apply = cb_at($input, 'apply');
        $member = cb_at($input, 'member');
        $did = cb_at($input, 'did');

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $login = $uum->getLoginUser();
        $login_id = $login->getOID();

        $date = $this->getBdate();
        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'delete'], $dynamic_role);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        if ($access['delete'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_DELETE);
        }

        $temporary_dates = null;
        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            // 繰り返しの変更条件が入っていないのでNG
            if ( ! $apply) {
                cb_throw_error(E_GRN_SCHD_NOT_REPEAT_DELET_TYPE);
            }
            if ($apply != 'all') {
                if (is_null($date)) {
                    cb_throw_error(E_GRN_SCHD_NOT_SPECIFIED_DATE);
                }
            }
        } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            if ( ! $did) {
                cb_throw_error(E_GRN_SCHD_NOT_TEMPORARY_DELET_DATE);
            }
            $temporary_dates = $app->getEventDate($event->id, $did);
            if ( ! $temporary_dates) {
                cb_throw_error(E_GRN_SCHD_NOT_FOUND_TEMPORARY_DATE);
            }
            $date = $temporary_dates['setdatetime'];
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = &$event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                            && $event->isORSearch())
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者と共有メンバーしか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                            && $event->isORSearch())
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && (
                                 (is_array($event->users)
                                  && ! array_key_exists($login_id,
                                         $event->users))
                                 || is_null($event->users)
                             )
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id !== $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }

        $b_notify = true;
        $tsex = new \CB_TimeStampEx();
        $notify_date = $tsex->getDate();
        // 参加イベントから抜ける
        if ($member) {
            $bFind = false;
            foreach (array_keys($event->users) as $index) {
                $user = &$event->users[$index];
                if ($user->getOID() == $login_id) {
                    unset($event->users[$index]);
                    $event->modifier = &$login;
                    if (is_a($event, 'GRN_Schedule_RepeatEvent')
                        && ($apply == 'after')
                    ) {
                        $event->setdate = $date;
                    }

                    $event_id = $app->modifyEventWithoutDateTime($event, $date,
                        $apply);

                    if (is_a($event, 'GRN_Schedule_RepeatEvent')
                        && ($apply == 'this')
                    ) {
                        $bdate = $date;
                    } else {
                        $bdate = &$event->getFirstDate($notify_date);
                    }

                    $title = '';
                    //GRN2-596
                    $b_notify = true;
                    if (is_null($bdate) || $bdate === false) {
                        $bdate = $notify_date;
                        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                            if ($notify_date->compare($event->enddate) > 0) {
                                $b_notify = false;
                            }
                        }
                    } else {
                        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                            if ($notify_date->compare($bdate) > 0
                                && $notify_date->compare($event->enddate) > 0
                            ) {
                                $b_notify = false;
                            }
                        } else {
                            if ($notify_date->compare($bdate) > 0) {
                                $b_notify = false;
                            }
                        }
                    }

                    // GRB-16976 Remove attendance status when delete from my schedule
                    if ($event instanceof \GRN_Schedule_NormalEvent) {
                        $attendanceStatusLogic
                            = $this->getAttendanceStatusLogic();
                        $attendanceStatusLogic->deleteAttendanceStatusByEventIdAndUserId($event->id,
                            $login_id);
                    }

                    /* -------------- VCBSCH0010 START ----------------- */
                    require_once('schedule/netmeeting_event_logic.csp');
                    $vcb_event_logic
                        = \GRN_Netmeeting_EventLogic::getInstance();

                    // NETMEETING連携あり
                    if ($vcb_event_logic->isNetmeetingAvailable($event)) {
                        // 選択されている施設がある場合
                        if ($vcb_event_logic->getNetmeetingFacilityById($event)) {
                            // 招待者削除
                            $vcb_event_logic->cmmandNetmeetingInviteDelete($event->id,
                                $login_id);
                        }
                    }
                    /* -------------- VCBSCH0010 END   ----------------- */

                    // GRN2-4583
                    $event->id = $event_id;

                    // ----- GRN2-4506 -----
                    // 通知のタイムゾーン対応のために、setdatetimeなどを変換する。
                    if ($event instanceof \GRN_Schedule_RepeatEvent) {
                        require_once('fw/i18n.csp');
                        if ($event->setdatetime instanceof \CB_DatetimeEx) {
                            // 通常予定の繰り返しは、そのまま変換する
                            $settimestamp = new \CB_TimeStampEx(null,
                                $event->timezone);
                            $settimestamp->setDateTime($event->setdatetime,
                                \CB_I18N::getInstance()->getCurrentTimezone());
                            $event->setdatetime = $settimestamp->getDateTime();
                            if (isset($event->enddatetime)) {
                                $endtimestamp = new \CB_TimeStampEx(null,
                                    $event->timezone);
                                $endtimestamp->setDateTime($event->enddatetime,
                                    \CB_I18N::getInstance()
                                            ->getCurrentTimezone());
                                $event->enddatetime
                                    = $endtimestamp->getDateTime();
                            } else {
                                $event->enddateitme = $event->setdatetime;
                            }
                        } elseif ($event->setdatetime instanceof \CB_Date) {
                            // 終日予定の場合、イベントとユーザーのタイムゾーンの時差を見る。
                            // その時差によって、終日予定が1日早くなっているかどうか確認する。
                            $dateTimeZoneEvent
                                = new \DateTimeZone($event->timezone);
                            $dateTimeZoneUser
                                = new \DateTimeZone(\CB_I18N::getInstance()
                                                            ->getCurrentTimezone());
                            $dateTimeEvent = new \DateTime("now",
                                $dateTimeZoneEvent);
                            $dateTimeUser = new \DateTime("now",
                                $dateTimeZoneUser);
                            $timeOffset
                                = $dateTimeZoneEvent->getOffset($dateTimeUser);
                            if ($timeOffset <= 0) {
                                // イベントのタイムゾーンがユーザーのタイムゾーンと同じか、遅い場合。
                                // 開始日はイベントのタイムゾーンと同じなので、そのまま。終了日を同日にしておく。
                                $event->enddatetime = $event->setdatetime;
                            } else {
                                // イベントのタイムゾーンがユーザーのタイムゾーンより早い場合。
                                // イベントのタイムゾーンの開始日は1日後となるので、変更する。
                                // enddatetimeはsetdatetimeの1日後になっているため、それを利用する。
                                $event->setdatetime = $event->enddatetime;
                            }
                        }
                    } elseif ($event instanceof \GRN_Schedule_NormalEvent) {
                        // 通常予定（終日以外）も、イベントのタイムゾーンに変更する
                        if ($event->setdatetime instanceof \CB_DateTimeEx) {
                            require_once('fw/i18n.csp');
                            $settimestamp = new \CB_TimeStampEx(null,
                                $event->timezone);
                            $settimestamp->setDateTime($event->setdatetime,
                                \CB_I18N::getInstance()->getCurrentTimezone());
                            $event->setdatetime = $settimestamp->getDateTime();
                            if (isset($event->enddatetime)) {
                                $endtimestamp = new \CB_TimeStampEx(null,
                                    $event->timezone);
                                $endtimestamp->setDateTime($event->enddatetime,
                                    \CB_I18N::getInstance()
                                            ->getCurrentTimezone());
                                $event->enddatetime
                                    = $endtimestamp->getDateTime();
                            } else {
                                $event->enddatetime = $event->setdatetime;
                            }
                        }
                    }
                    // ----- GRN2-4506 -----

                    if ($b_notify && is_array($event->users)
                        && count($event->users) > 0
                    ) {
                        $title = $this->getNotifyTitle($event);
                        $app->setNotify($event->users, $login, $event, $bdate,
                            $title, '', GRN_SCHEDULE_NOTIFY_MODIFY, $tsex);
                        $app->forwardMail($event,
                            [GRN_SCHEDULE_NOTIFY_MODIFY => $event->users],
                            $login);
                        $app->sendPushNotification(
                            $event,
                            [GRN_SCHEDULE_NOTIFY_MODIFY => $event->users],
                            $login, true, $bdate, null);
                    }

                    // 通知先の指定がある場合
                    if ($b_notify && $event->private
                        && is_array($event->notify_address)
                        && count($event->notify_address) > 0
                    ) {
                        $title = $this->getNotifyTitle($event);
                        $app->sendNotificationsToPublic($login, $event, $bdate,
                            '', $tsex, $title, false, true,
                            GRN_SCHEDULE_NOTIFY_MODIFY);
                    }

                    break;
                }
            }

        } // イベントの削除
        else {
            /* -------------- VCBSCH0010 START ----------------- */
            require_once('schedule/netmeeting_event_logic.csp');
            $vcb_event_logic = \GRN_Netmeeting_EventLogic::getInstance();

            // NETMEETING連携あり
            if ($vcb_event_logic->isNetmeetingAvailable($event)) {
                // 選択されている施設がある場合
                if ($vcb_event_logic->getNetmeetingFacilityById($event)) {
                    // 予約削除
                    $vcb_event_logic->cmmandNetmeetingReservationDelete($event->id);
                }
            }
            /* -------------- VCBSCH0010 END   ----------------- */

            $title = '';
            //GRN2-596
            $b_notify = true;
            if (is_null($date)) {
                $date = $notify_date;
                if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                    if ($notify_date->compare($event->enddate) > 0) {
                        $b_notify = false;
                    }
                }
            } else {
                if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                    if ($notify_date->compare($date) > 0
                        && $notify_date->compare($event->enddate) > 0
                    ) {
                        $b_notify = false;
                    }
                } else {
                    if ($notify_date->compare($date) > 0) {
                        $b_notify = false;
                    }
                }
            }

            // ----- GRN2-4506 -----
            // 通知のタイムゾーン対応のために、setdatetimeなどを変換する。
            if ($event instanceof \GRN_Schedule_RepeatEvent) {
                require_once('fw/i18n.csp');
                if ($event->setdatetime instanceof \CB_DatetimeEx) {
                    // 通常予定の繰り返しは、そのまま変換する
                    $settimestamp = new \CB_TimeStampEx(null, $event->timezone);
                    $settimestamp->setDateTime($event->setdatetime,
                        \CB_I18N::getInstance()->getCurrentTimezone());
                    $event->setdatetime = $settimestamp->getDateTime();
                    if (isset($event->enddatetime)) {
                        $endtimestamp = new \CB_TimeStampEx(null,
                            $event->timezone);
                        $endtimestamp->setDateTime($event->enddatetime,
                            \CB_I18N::getInstance()->getCurrentTimezone());
                        $event->enddatetime = $endtimestamp->getDateTime();
                    } else {
                        $event->enddateitme = $event->setdatetime;
                    }
                } elseif ($event->setdatetime instanceof \CB_Date) {
                    // 終日予定の場合、イベントとユーザーのタイムゾーンの時差を見る。
                    // その時差によって、終日予定が1日早くなっているかどうか確認する。
                    $dateTimeZoneEvent = new \DateTimeZone($event->timezone);
                    $dateTimeZoneUser
                        = new \DateTimeZone(\CB_I18N::getInstance()
                                                    ->getCurrentTimezone());
                    $dateTimeEvent = new \DateTime("now",
                        $dateTimeZoneEvent);
                    $dateTimeUser = new \DateTime("now",
                        $dateTimeZoneUser);
                    $timeOffset
                        = $dateTimeZoneEvent->getOffset($dateTimeUser);
                    if ($timeOffset <= 0) {
                        // イベントのタイムゾーンがユーザーのタイムゾーンと同じか、遅い場合。
                        // 開始日はイベントのタイムゾーンと同じなので、そのまま。終了日を同日にしておく。
                        $event->enddatetime = $event->setdatetime;
                    } else {
                        // イベントのタイムゾーンがユーザーのタイムゾーンより早い場合。
                        // イベントのタイムゾーンの開始日は1日後となるので、変更する。
                        // enddatetimeはsetdatetimeの1日後になっているため、それを利用する。
                        $event->setdatetime = $event->enddatetime;
                    }
                }
            } elseif ($event instanceof \GRN_Schedule_NormalEvent
                      || $event instanceof \GRN_Schedule_TemporaryEvent
            ) {
                // 通常予定（終日以外）も、イベントのタイムゾーンに変更する
                if ($event->setdatetime instanceof \CB_DateTimeEx) {
                    require_once('fw/i18n.csp');
                    $settimestamp = new \CB_TimeStampEx(null, $event->timezone);
                    $settimestamp->setDateTime($event->setdatetime,
                        \CB_I18N::getInstance()->getCurrentTimezone());
                    $event->setdatetime = $settimestamp->getDateTime();
                    if (isset($event->enddatetime)) {
                        $endtimestamp = new \CB_TimeStampEx(null,
                            $event->timezone);
                        $endtimestamp->setDateTime($event->enddatetime,
                            \CB_I18N::getInstance()->getCurrentTimezone());
                        $event->enddatetime = $endtimestamp->getDateTime();
                    } else {
                        $event->enddatetime = $event->setdatetime;
                    }
                }
            }
            // ----- GRN2-4506 -----

            $event_type = $event->getEventType();
            // 削除前に通知（別に消えないから後でもいいけど）
            if ($b_notify && is_array($event->users)
                && count($event->users) > 0
            ) {
                $title = $this->getNotifyTitle($event);
                $app->setNotify($event->users, $login, $event, $date, $title,
                    '', GRN_SCHEDULE_NOTIFY_DELETE, $tsex);
                $app->forwardMail($event,
                    [GRN_SCHEDULE_NOTIFY_DELETE => $event->users], $login,
                    $did);
                $app->sendPushNotification(
                    $event, [GRN_SCHEDULE_NOTIFY_DELETE => $event->users],
                    $login, true, $date, $did);
            }

            // 通知先の指定がある場合
            if ($b_notify && $event->private && is_array($event->notify_address)
                && count($event->notify_address) > 0
            ) {
                //「公開先ユーザーには通知をしない」がチェックされていない場合、公開先に通知をする
                require_once('schedule/system_logic.csp');
                $logic = \GRN_Schedule_SystemLogic::getInstance();
                if ($logic->getManagedNotify() != '1') {
                    $event_users = [];
                    if (is_array($event->users)) {
                        foreach (array_keys($event->users) as $key2) {
                            $event_user = &$event->users[$key2];
                            $event_users[$event_user->getOID()]
                                = $event_user->getOID();
                        }
                    }

                    // 通知先が指定されている場合
                    $notify_list = [];
                    foreach (array_keys($event->notify_address) as $key) {
                        $user = &$event->notify_address[$key];

                        // 重複を除く
                        if (array_key_exists($user->getOID(), $event_users)) {
                            continue;
                        }

                        $notify_list[] = &$user;
                    }

                    // 重複以外
                    if (count($notify_list) > 0) {
                        $title = $this->getNotifyTitle($event);
                        $app->setNotify(
                            $notify_list, $login, $event, $date, $title, '',
                            GRN_SCHEDULE_NOTIFY_DELETE, $tsex
                        );
                        $app->forwardMail($event,
                            [GRN_SCHEDULE_NOTIFY_DELETE => $notify_list],
                            $login, $did);
                        $app->sendPushNotification(
                            $event,
                            [GRN_SCHEDULE_NOTIFY_DELETE => $notify_list],
                            $login, true, $date, $did);
                    }
                }
            }

            if (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
                $date = $did;
            }

            // 削除
            $app->deleteEvent($login, $event_id, $event_type, $date, $apply);
        }
    }

    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    public function getNotifyTitle($event)
    {
        require_once('schedule/notification.csp');
        $util = \GRN_Schedule_Notify_Logic::getInstance();

        return $util->getNotifyTitle(html_entity_decode($event->getTitle()));
    }
}
