<?php

namespace grn\schedule\screen\mobile;

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\bean\AttendanceStatus;

require_once('schedule/error_code.csp');


class AttendanceStatusChange extends MobileScheduleScreenBase
{
    const ARG_MESSAGE = 'message_data';
    const ARG_STATUS = 'member';
    const ARG_ABSENT_INT_VALUE = '0';

    private $_loginUser;

    public function getLoginUser()
    {
        return $this->_loginUser;
    }

    protected function setLoginUser($value)
    {
        $this->_loginUser = $value;
    }

    public function __construct($input)
    {
        parent::__construct($input);
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $this->setPropertiesFromInput();
        $event = $this->getEventObjectFromInput();
        $this->validateAttendeeCheckFunction();
        $this->validateIsMemberOfEvent();
        $conflict = $this->getIsConflictEvent();

        $loginUserId = $this->getLoginUser()->getOID();
        $eventId = $this->getEvent();
        $userId = $this->getUserId();
        $beginDate = cb_at($this->getInput(), self::ARG_BEGIN_DATE);
        $groupId = $this->getGroupId();
        $refererKey = $this->getRefererKey();

        $params = [
            'event'       => $eventId,
            'bdate'       => $beginDate,
            'uid'         => $userId,
            'gid'         => $groupId,
            'referer_key' => $refererKey
        ];

        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), 'schedule/mobile/view',
            $params);
        $this->assignBreadcrumbCurrentPage($t,
            cb_msg('grn.schedule.mobile', 'GRN_SCH_MOBILE-33'));

        $attendanceStatusLogic = new AttendanceStatusLogic();
        $attendanceStatus
            = $attendanceStatusLogic->getAttendanceStatusByUserIdAndEventId($loginUserId,
            $event);
        if ($attendanceStatus->getStatus() === self::ARG_ABSENT_INT_VALUE) {
            $status = AttendanceStatus::STATUS_ABSENT;
        } else {
            $status = AttendanceStatus::STATUS_ATTENDANT;
        }

        $t->assign('event_id', $eventId);
        $t->assign('user_id', $userId);
        $t->assign('group_id', $groupId);
        $t->assign('bdate', $beginDate);
        $t->assign('referer_key', $refererKey);
        $t->assign('conflict', $conflict);
        $t->assign('status', $status);

        $t->assign('event_title', html_entity_decode($event->getTitle()));
        $t->assign('message_data', $attendanceStatus->getMessage());

        $t->assign('absent', AttendanceStatus::STATUS_ABSENT);
        $t->assign('attendant', AttendanceStatus::STATUS_ATTENDANT);

        return $t->fetch('schedule/mobile/status_change.tpl');
    }

    public function post($input)
    {
        $this->setPropertiesFromInput();
        $event = $this->getEventObjectFromInput();
        $this->validateAttendeeCheckFunction();
        $this->validateIsMemberOfEvent();

        $attendanceStatus = new AttendanceStatus();
        $attendanceStatus->setEvent($event);
        $attendanceStatus->setCreateTime(time());
        $attendanceStatus->setUserId($this->getLoginUser()->getOID());
        $attendanceStatus->setMessage(cb_at($input, self::ARG_MESSAGE));
        $attendanceStatus->setStatus(cb_at($input, self::ARG_STATUS));

        $attendanceStatusLogic = new AttendanceStatusLogic();
        $attendanceStatusLogic->addAttendanceStatus($attendanceStatus);
    }

    public function getTitle()
    {
        $event = $this->getEventForView();

        return $event->detail . ' - ' . cb_msg('grn.schedule.mobile',
                'GRN_SCH_MOBILE-33');
    }

    private function setPropertiesFromInput()
    {
        $input = $this->getInput();
        $params = [
            self::ARG_EVENT,
            self::ARG_USER_ID,
            self::ARG_GROUP_ID,
            self::ARG_BEGIN_DATE
        ];
        $this->checkArgFromInput($params, $input);
        $this->setRefererKey(cb_at($input, self::ARG_REFERER_KEY));
    }

    private function getEventObjectFromInput()
    {
        if ( ! $this->getEvent()) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $this->setLoginUser(cb_get_login_user());

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($this->getLoginUser(), $this->getEvent(),
            $this->getBeginDate());
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        $this->setEventObject($event);

        return $event;
    }

    private function validateAttendeeCheckFunction()
    {
        //if disable using attendance check
        $attendanceStatusLogic = new AttendanceStatusLogic();
        if ( ! $attendanceStatusLogic->isEnableAttendanceCheck()) {
            cb_throw_error(E_GRN_SCHD_SYSTEM_ATTENDANCE_CHECK_OFF);
        }

        //if appointment is not an attendance check appointment
        if ( ! $this->getEventObject()->isAttendanceCheckEvent()) {
            cb_throw_error(E_GRN_SCHD_NOT_ATTENDANCE_CHECK);
        }
    }

    private function validateIsMemberOfEvent()
    {
        require_once('schedule/event_base_logic.csp');
        $eventBaseLogic = new \GRN_Schedule_EventBaseLogic();
        $eventMembers = $eventBaseLogic->getEventMembers($this->getEvent());
        $loginUserId = $this->getLoginUser()->getOID();

        if ( ! in_array($loginUserId, $eventMembers['users'])) {
            cb_throw_error(E_GRN_SCHD_NOT_ATTENDEE);
        }
    }

    private function getIsConflictEvent()
    {
        require_once('schedule/system_logic.csp');
        $systemLogic = \GRN_Schedule_SystemLogic::getInstance();
        $hiddenPrivate = $systemLogic->getHiddenPrivate();

        $event = $this->getEventObject();
        $date = $this->getBeginDate();
        $loginUser = $this->getLoginUser();
        $loginUserId = $loginUser->getOID();

        $setDateTime = $event->setdatetime;
        $endDateTime = $event->enddatetime;

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        if (is_null($endDateTime)) {
            $endDateTime = $event->setdatetime;
        }

        if (($app->compareDate($date, $setDateTime) < 0)
            || ($app->compareDate($date, $endDateTime) > 0)
        ) {
            $date->year = $setDateTime->year;
            $date->month = $setDateTime->month;
            $date->day = $setDateTime->day;
        }

        if ($app->compareDate($date, $setDateTime) !== 0) {
            $setDateTime->year = $date->year;
            $setDateTime->month = $date->month;
            $setDateTime->day = $date->day;
            $setDateTime->hour = 0;
            $setDateTime->minute = 0;
            $setDateTime->second = 0;
        }

        if ($app->compareDate($date, $endDateTime) !== 0) {
            $workDate = clone $date;
            cb_date_move_days($workDate, 1);

            $endDateTime->year = $workDate->year;
            $endDateTime->month = $workDate->month;
            $endDateTime->day = $workDate->day;
            $endDateTime->hour = 0;
            $endDateTime->minute = 0;
            $endDateTime->second = 0;
        }

        $usersToCheckConflict
            = ['users' => [intval($loginUserId) => $loginUserId]];
        $conflictUsers = $app->conflictMembersEvent($loginUser,
            $usersToCheckConflict, $setDateTime, $endDateTime,
            $this->getEvent(), $event->getEventType(), $hiddenPrivate);

        if (is_array($conflictUsers)
            && array_key_exists($loginUserId, $conflictUsers)
            && $conflictUsers[$loginUserId]
        ) {
            return true;
        }

        return false;
    }
}
