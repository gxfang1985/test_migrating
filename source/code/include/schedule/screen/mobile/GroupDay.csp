<?php

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;
use grn\grn\mobile\MobileDisplayUserList;
use grn\schedule\AttendanceStatusLogic;
use grn\grn\access\service\AppAccess;

class GroupDay extends MobileScheduleScreenBase
{
    var $_privateHiddenTitle = null;
    var $_view_Util = null;

    function __construct($input)
    {
        $func = [
            'add' => [],
        ];
        $this->setMobileApplicationId(GRN_SCHEDULE_APPLICATION_ID);
        $this->setMobileFooterBar($func);

        $operation_menu = [['name' => cb_msg('grn.schedule', 'GRN_SCH-983')]];
        $this->setMobileOperateMenu($operation_menu);

        parent::__construct($input);
        $this->checkArgFromInput(
            [
                self::ARG_GROUP_ID,
                self::ARG_BEGIN_DATE,
                self::ARG_EVENT,
                self::ARG_EVENT_DATE,
                self::ARG_SEARCH_TEXT,
                self::ARG_NAVIGATION_SP
            ], $input
        );

    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $date = $this->getBeginDate();
        $members_id = "";
        $group_id = $this->getGroupId();
        $event_id = $this->getEvent();
        $search_text = $this->getSearchText();
        $selected_group_type = $this->getArrayValue(self::ARG_KEYWORD_PARENT,
            $this->getInput());
        if ( ! in_array($selected_group_type, [null, 1, 2])) {
            $selected_group_type = null;
        }
        $sp = $this->getSp();
        if ($sp < 0) {
            $sp = 0;
        }
        if ($event_id < 1) {
            $event_id = null;
        }
        $current_timezone = \CB_I18N::getInstance()->getCurrentTimezone();
        //GTM-1631 Get attendance status setting;
        $attendanceStatusLogic = new AttendanceStatusLogic();
        $isEnableAttendanceStatus
            = $attendanceStatusLogic->isEnableAttendanceCheck();

        $app = \GRN_Schedule_Application::getInstance();
        $t->assign(self::ARG_KW_SH_APP_ID, $app->getApplicationId());
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        require_once('schedule/TodoEventCreator.csp');
        $todo_creator
            = \grn\schedule\TodoEventCreator::createDayEvent($this->getInput());
        $shared_todos = $todo_creator->getMyUncompletedSharedTodo();

        require_once('schedule/eventfactory.csp');
        $factory = \GRN_Schedule_EventFactory::getInstance();

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        $event_date = new \CB_Date();
        if ($event_id) {
            $event_date = $this->getEventDate();
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $login = $this->getLoginUser();
        $login_id = $this->getLoginUserId();
        $login_timezone = \CB_I18N::getUserTimezone($login);

        $t->assign(self::ARG_KW_LOGIN_ID, $login_id);
        $group = null;

        // Access right
        $dynamic_roles = $uum->listGrantedRoles();
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_logic::getInstance();

        // facility group
        if (mb_substr($group_id, 0, 1) == self::ARG_KW_F) {
            if ($group_id == self::ARG_KW_F) {
                $group = self::ARG_KW_F;
            } elseif ($group_id == self::ARG_KW_FR) {
                $group = 'frequentfacility';
            } elseif ($group_id === "fu") {
                $group = 'unassigned_facility';
            } else {
                $group = $facility_logic->getFacilityGroup(mb_substr($group_id,
                    1));
                if ($group !== false) {
                    $group = [
                        self::ARG_KW_TYPE => 'facilitygroup',
                        self::ARG_KW_ID   => $group->getOID()
                    ];
                }
            }
        } // My group
        elseif (mb_substr($group_id, 0, 1) == self::ARG_KW_M) {
            $group = $uum->getMyGroup(mb_substr($group_id, 1));
            if ($group && is_a($group, 'GRN_MyGroup')) {
                $group = [
                    self::ARG_KW_TYPE => self::ARG_KW_MY_GROUP,
                    self::ARG_KW_ID   => $group->getOID(),
                    self::ARG_KW_NAME => $group->get(self::ARG_KW_NAME)
                ];
            }
        } // Recent user
        elseif ($group_id == self::ARG_KW_R) {
            $group = 'frequent';
        } elseif ($group_id == 'virtual' && is_string($event_id)
                  && mb_strlen($event_id) > 0
        ) { //attended of a event
            $group = 'virtual';
        } // 横移動の場合は、最初に表示するグループ
        elseif ($group_id == 'virtual') {
            $group = 'noselect';
        } elseif ($group_id == 'login') {
            $group = 'login';
        } //In case search command
        elseif ($group_id == self::ARG_KW_SEARCH || is_string($search_text)) {
            $group = self::ARG_KW_SEARCH;
            $group_id = self::ARG_KW_SEARCH;
        } // selected a group
        elseif ($group_id > 0) {
            $group = $uum->getGroup($group_id);
            if ($group && is_a($group, 'CB_Group')) {
                $access = $acc_logic->evaluateAccess($login, $group,
                    [self::ARG_KW_READ], $dynamic_roles);
                if ( ! $access) {
                    cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
                }

                $group = [
                    self::ARG_KW_TYPE => self::ARG_KW_GROUP,
                    self::ARG_KW_ID   => $group->getOID(),
                    self::ARG_KW_NAME => $group->get(self::ARG_KW_NAME)
                ];

                //set frequencyly of intelegen 頻度情報を設定
                require_once('grn/uum_util.csp');
                $uum_util = \GRN_UumUtil::getInstance();
                $uum_util->selectGroups($login, [$group[self::ARG_KW_ID]]);
            }
        } elseif (mb_substr($group_id, 0, 1) == '-'
                  && preg_match('/^\-?[0-9]+$/', $group_id)
        ) //-2;-1
        {
            $group = "unassigned";
        } else { //If none is specified , I will display the Priority organization .
            $primary_group = $uum->getUserPrimaryGroupInfo($login_id, true);
            $group
                = 'noselect'; //No Priority organization : default value
            if ($primary_group !== false) {
                $access = $acc_logic->evaluateAccessesById(
                    $login, [$primary_group['_id'] => $primary_group],
                    [self::ARG_KW_READ],
                    $dynamic_roles, self::ARG_KW_GROUP
                );
                if ($access) {
                    $options_group_id = $primary_group['_id'];
                    $options_group_name = cb_plain_msg(
                        'grn.common', 'title_primary_group',
                        [self::ARG_KW_NAME => $primary_group['col_name']]
                    );
                    $group = [
                        self::ARG_KW_TYPE => self::ARG_KW_GROUP,
                        self::ARG_KW_ID   => $options_group_id,
                        self::ARG_KW_NAME => $options_group_name
                    ];
                    $group_id = $options_group_id;
                }
            }
        }

        //specified group not exists
        if ($this->getGroupId() && ! $group) {
            cb_throw_error(E_GRN_SCHD_NOT_FOUND_GROUP);
        }
        require_once('schedule/personal_logic.csp');
        $personal_logic = \GRN_Schedule_PersonalLogic::getInstance();

        $system_setting_hidden_private = $system_logic->getHiddenPrivate();
        $system_setting_show_group = $system_logic->getShowOrganize();
        $system_setting_show_holiday = $system_logic->getShowHoliday();

        $set_hour = 0;
        $end_hour = 0;
        $personal_logic->getViewHour($login, $set_hour, $end_hour);

        $users_id = [];
        $groups_id = [];

        $group_list = [];
        require_once('../_view_util.csp');
        $view_util = \GRN_Schedule_Dropdown_Util::getInstance();
        if ( ! preg_match('#^f.*#', $group_id)) {
            if ((is_string($event_id) && $event_id == self::ARG_KW_SELECTED)
                || $group == self::ARG_KW_SELECTED
            ) {
                // 複数ユーザー選択も参加者の予定と同じ（選択ユーザー）
                $group_list[] = [
                    self::ARG_KW_ID   => self::ARG_KW_SELECTED,
                    self::ARG_KW_NAME => cb_msg('grn.schedule',
                        'virtual_member')
                ];
            } // メンバーの予定の参照
            elseif (is_string($event_id) && mb_strlen($event_id) > 0) {
                $group_list[] = [
                    self::ARG_KW_ID   => 'virtual',
                    self::ARG_KW_NAME => cb_msg('grn.schedule',
                        'virtual_member')
                ];
            }

            if (is_string($group) && $group == self::ARG_KW_SEARCH) {
                $group_list[] = [
                    self::ARG_KW_ID   => self::ARG_KW_SEARCH,
                    self::ARG_KW_NAME => cb_msg('grn.schedule', 'search_member')
                ];
            }

            $view_util::makeGroupsDropDownMenu($login, $dynamic_roles,
                $group_id, $group, $group_list);

            // Login User
            $group_list[] = [
                self::ARG_KW_ID   => 'login',
                self::ARG_KW_NAME => cb_msg('grn.schedule', 'login_user')
            ];
            if (is_string($group) && $group == "unassigned"
                && preg_match('/^\-?[0-9]+$/', $group_id)
            ) {
                $group_list[] = [
                    self::ARG_KW_ID   => $group_id,
                    self::ARG_KW_NAME => cb_msg('grn.grn', 'GRN_GRN-1136')
                ];

            }
            if (is_string($group) && $group == 'noselect') {
                $group_id = 'login';
                $group = 'login';
            }
        }
        //  Set of characters to be displayed in the menu in the initial state
        $default_group_name = "";
        if (substr($group_id, 0, 1) != self::ARG_KW_F) {
            foreach ($group_list as $value) {
                if ($group_id == $value[self::ARG_KW_ID]) {
                    $default_group_name = $value[self::ARG_KW_NAME];
                    if ($selected_group_type) {
                        break;
                    }
                }
            }
        } else {
            if ($group_id == self::ARG_KW_FR) {
                $default_group_name = cb_msg('grn.schedule',
                    'title_frequent_facility');
            } elseif ($group_id === "fu") {
                $default_group_name = cb_msg('grn.grn', 'GRN_GRN-1137');
            } else {
                $fgroup = $facility_logic->getFacilityGroup(substr($group_id,
                    1));
                if ($fgroup === false) {
                    if ($system_logic->getAllowAllFacilities()) {
                        $default_group_name = cb_plain_msg('grn.schedule',
                            'facility_all');
                    } else {
                        $default_group_name = cb_plain_msg('grn.schedule',
                            'select_group');
                    }
                } else {
                    if ($selected_group_type
                        == 1
                    ) // 1 Facility group to use well
                    {
                        $default_group_name = cb_plain_msg(
                            'grn.schedule', 'title_oftenused_facilitygroup',
                            [self::ARG_KW_NAME => $fgroup->get(self::ARG_KW_NAME)]
                        );
                    } elseif ($selected_group_type
                              == 2
                    ) // 2   :Facility selected group recently
                    {
                        $default_group_name = cb_plain_msg(
                            'grn.schedule', 'title_frequent_facilitygroup',
                            [self::ARG_KW_NAME => $fgroup->get(self::ARG_KW_NAME)]
                        );
                    } else // Facility a particular group
                    {
                        $default_group_name = cb_plain_msg(
                            'grn.schedule', 'title_facilitygroup',
                            [self::ARG_KW_NAME => $fgroup->get(self::ARG_KW_NAME)]
                        );
                    }
                }
            }
        }

        //select menu
        $t->assign('default_group_name', $default_group_name);
        $t->assign(self::ARG_KW_GROUP,
            $group_list); //Note: this is recent group/ user
        $t->assign('group_id', $group_id ? $group_id : '0');

        if ($group_id && ! preg_match('#^f.*#', $group_id)) {
            $t->assign('group_id_focus', $group_id);
        }
        $event_groups = null;
        $members = null;
        $facilities = null;

        if (is_array($group)
            && $group[self::ARG_KW_TYPE] == self::ARG_KW_GROUP
        ) {
            //Get User
            $members = $uum->getGroupUsersInfo(
                $group[self::ARG_KW_ID], 0, -1, null, null,
                GRN_SCHEDULE_APPLICATION_ID
            );
        }
        // My group
        if (is_array($group)
            && $group[self::ARG_KW_TYPE] == self::ARG_KW_MY_GROUP
        ) {
            $members = $uum->getMyGroupUsersInfo(
                $group[self::ARG_KW_ID], null, 0, -1, null, null,
                GRN_SCHEDULE_APPLICATION_ID
            );
            $facility_ids
                = $uum->getMyGroupFacilitiesId($group[self::ARG_KW_ID]);
            $facilities = $facility_logic->getFacilitiesInfo($facility_ids,
                CB_DATABASE_DEFAULT_LOCK, ['order_by_ids' => true]);
        }
        //User who frequently used
        if (is_string($group) && $group == 'frequent') {
            require_once('grn/uum_util.csp');
            $members = $uum->getFrequentUsersInfo($login_id, -1, null,
                GRN_SCHEDULE_APPLICATION_ID);
        } elseif (is_string($group) && $group == "unassigned"
                  && preg_match('/^\-?[0-9]+$/', $group_id)
        ) {
            $uids_no_group = $uum->getNoGroupIdUsers(); //-n; unassigned
            if (isset($uids_no_group)) {
                $uids_app_allow
                    = AppAccess::filterUserIdsInternalAccessByAppId($uids_no_group,
                    GRN_SCHEDULE_APPLICATION_ID);
                $count_loop = count($uids_app_allow);

                for ($i = 0; $i < $count_loop; $i++) {
                    $members[$uids_app_allow[$i]] = [
                        '_id'              => $uids_app_allow[$i],
                        'col_display_name' => '',
                        'col_foreign_key'  => ''
                    ];
                }
            }
        }
        if (is_array($group) && $group[self::ARG_KW_TYPE] == 'facilitygroup') {
            $facilities
                = $facility_logic->getGroupFacilitiesInfo($group[self::ARG_KW_ID]);
        } // whole facility
        elseif (is_string($group) && $group == self::ARG_KW_F) {
            if ($system_logic->getAllowAllFacilities()) {
                $facilities = $facility_logic->getOrderedFacilityPartInfoList();
            } else {
                $facilities = [];
            }
        } elseif (is_string($group) && $group === "unassigned_facility") {
            $facilities = $facility_logic->getGroupFacilityArrayList(-1);
        } elseif (is_string($group)
                  && $group == self::ARG_KW_SEARCH
        ) { // Search schedule
            $users_id_selected = [];
            $facility_id_selected = [];
            if (array_key_exists(self::ARG_KW_USERS_ID, $this->getInput())) {
                $strUserId = cb_trim($this->getInput()[self::ARG_KW_USERS_ID]);

                if (strlen($strUserId) > 0) {
                    $users_id_selected = explode(' ', $strUserId);
                }
            }
            if (array_key_exists(self::ARG_KW_FIDS_ID, $this->getInput())) {
                $strFacilityId
                    = cb_trim($this->getInput()[self::ARG_KW_FIDS_ID]);

                if (strlen($strFacilityId) > 0) {
                    $facility_id_selected = explode(' ', $strFacilityId);
                }
            }
            if (mb_strlen(cb_trim($search_text)) > 0
                || count($users_id_selected) > 0
                || count($facility_id_selected) > 0
            ) {
                //User search
                require_once('grn/uum_util_search.csp');
                $uum_util = \GRN_UumUtil_Search::getInstance();
                //support is check privilege
                $members = $uum_util->scheduleSearchUsersInfo($search_text,
                    false);
                //merge user from selected

                $countSelected = count($users_id_selected);
                if ($countSelected > 0) {
                    $uids_selected = [];
                    $uids_selected_allow = [];
                    for ($i = 0; $i < $countSelected; $i++) {
                        $tmp_id = $users_id_selected[$i];
                        if (preg_match('/^[1-9][0-9]{0,19}$/', $tmp_id)
                            && is_numeric($tmp_id)
                            && $tmp_id > 0
                            && intval($tmp_id)
                        ) {
                            $uids_selected[] = $tmp_id;
                        }
                    }
                    if (count($uids_selected) > 0) {
                        $uids_selected_allow
                            = AppAccess::filterUserIdsInternalAccessByAppId(
                            $uids_selected, GRN_SCHEDULE_APPLICATION_ID
                        );

                    }
                    $members_tmp = [];
                    foreach ($uids_selected_allow as $uida) {
                        if (array_key_exists($uida, $members)) {
                            $tmp = $members[$uida];
                            unset($members[$uida]);
                        } else {
                            $tmp = [
                                '_id'              => $uida,
                                'col_display_name' => '',
                                'col_foreign_key'  => ''
                            ];
                        }
                        $members_tmp[$uida] = $tmp;
                    }
                    $members = $members_tmp + $members;
                }

                $isAnd = false;
                $facilities
                    = $facility_logic->searchFacilitiesInfo($search_text,
                    CB_DATABASE_NO_LOCK, $isAnd);
                $countSelected = count($facility_id_selected);
                if ($countSelected > 0) {
                    $fids_selected = [];
                    $fids_selected_allow = [];
                    for ($i = 0; $i < $countSelected; $i++) {
                        $tmp_id = $facility_id_selected[$i];
                        if (preg_match('/^[1-9][0-9]{0,19}$/', $tmp_id)
                            && is_numeric($tmp_id)
                            && $tmp_id > 0
                            && intval($tmp_id)
                        ) {
                            $fids_selected[] = $tmp_id;
                        }
                    }
                    if (count($fids_selected) > 0) {
                        $facility_result
                            = $facility_logic->getFacilityListByIds($fids_selected,
                            null, false);
                        foreach ($fids_selected as $fid) {
                            if (array_key_exists($fid, $facility_result)
                                && array_key_exists($fid, $facilities)
                            ) {
                                $facility = $facility_result[$fid];
                                unset($facilities[$fid]);
                            } elseif (array_key_exists($fid,
                                $facility_result)
                            ) {
                                $facility = $facility_result[$fid];
                            }
                            if ($facility) {
                                $fids_selected_allow[$fid] = [
                                    '_id'      => $facility->getOID(),
                                    'col_name' => $facility->get(self::ARG_KW_NAME),
                                    'col_memo' => $facility->get('memo')
                                ];
                            }
                        }
                    }
                    if (count($fids_selected_allow) > 0) {
                        $facilities = $fids_selected_allow + $facilities;
                    }
                }
            } else {
                $members = [];
                $facilities = [];
            }
        } elseif (is_string($group) && $group == 'virtual') {

            $event = $app->getEvent($login, $event_id, $event_date);

            // アクセス権のチェック
            if ($event) {
                $access = $acc_logic->getEventAccess($login, $event,
                    [self::ARG_KW_READ], $dynamic_roles);
                if ($access[self::ARG_KW_READ] == GRN_SCHD_ACCESS_DENY) {
                    cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
                }
            }

            if ($event) {
                if (is_array($event->groups)) {
                    $event_groups = [];
                    foreach (array_keys($event->groups) as $key) {
                        $_temp = &$event->groups[$key];
                        $event_groups[$_temp->getOID()] = $_temp->getOID();
                    }
                }
                if (is_array($event->users)) {
                    $uid_list = array_keys($event->users);
                    $uid_list
                        = AppAccess::filterUserIdsInternalAccessByAppId($uid_list,
                        GRN_SCHEDULE_APPLICATION_ID);
                    $uid_list = array_values($uid_list);

                    $members = [];
                    foreach (array_keys($event->users) as $key) {
                        if (array_search($key, $uid_list) !== false) {
                            $_temp = &$event->users[$key];
                            $members[$_temp->getOID()] = $_temp->getOID();
                        }
                    }
                }
                if (is_array($event->facilities)) {
                    $facilities = [];
                    foreach (array_keys($event->facilities) as $key) {
                        $_temp = &$event->facilities[$key];
                        $facilities[$_temp->getOID()] = [
                            '_id'      => $_temp->getOID(),
                            'col_name' => $_temp->get(self::ARG_KW_NAME),
                            'col_memo' => $_temp->get('memo')
                        ];
                    }
                }
                // ORの仮予定だったら候補施設も全て表示する
                if (is_a($event, 'GRN_Schedule_TemporaryEvent')
                    && $event->isORSearch()
                ) {
                    foreach (array_keys($event->setdates) as $key) {
                        if (array_key_exists('facility', $event->setdates[$key])
                            === false
                        ) {
                            continue;
                        }
                        $_temp = &$event->setdates[$key]['facility'];
                        $facilities[$_temp->getOID()] = [
                            '_id'      => $_temp->getOID(),
                            'col_name' => $_temp->get(self::ARG_KW_NAME),
                            'col_memo' => $_temp->get('memo')
                        ];
                    }
                }
            } else {
                $event_id = null;
            }
        } elseif (is_string($group) && $group == 'login') {
            $members = [];
            $members[$login_id] = $login;
        } elseif (is_string($group) && $group == 'frequentfacility') // 最近選択した施設
        {
            require_once('schedule/facility_system_logic.csp');
            $facility_history = \GRN_Facility_HistoryManager::getInstance();
            $facility_history_list
                = $facility_history->getFacilityHistory($login_id);
            $facilities_info
                = $facility_logic->getFacilitiesInfo($facility_history_list,
                CB_DATABASE_NO_LOCK);
            $facilities = [];
            foreach ($facility_history_list as $facility_id) {
                if (array_key_exists($facility_id, $facilities_info)) {
                    $facilities[$facility_id] = $facilities_info[$facility_id];
                }
            }
        }
        require_once('schedule/view_util.csp');
        $util = \GRN_Schedule_View_Util::getInstance();

        $tsex = new \CB_TimeStampEx();
        $dateex = new \CB_DateEx($date);
        $datetime = $tsex->getDateTime();
        $datetime->setDate($dateex);
        $datetime->hour = 0;
        $datetime->minute = 0;
        $datetime->second = 0;
        $tsex->setDateTime($datetime);
        $timestamp = $tsex->unix_ts;
        $date_info = [
            self::ARG_KW_FORMAT => $dateex->format(),
            'timestamp'         => $timestamp,
            self::ARG_KW_TYPE   => $util->getDayType($dateex),
            self::ARG_KW_DATE   => $dateex
        ];
        $date_info_e = [
            self::ARG_KW_FORMAT => $date_info[self::ARG_KW_FORMAT],
            'timestamp'         => $timestamp + 86400
        ];
        $date_str_key = $date_info[self::ARG_KW_FORMAT];
        $week = [$date_info];

        require_once('grn/calendar.csp');
        $calendar_service = \GRN_CalendarService::getInstance();
        $calendars = $calendar_service->getDaysInfo(
            $dateex, $dateex, $login, null, false
        ); //FALSE: not using extension calendar

        if ($util->isWorkday($date_info[self::ARG_KW_DATE], $calendars,
            $login)
        ) {
            $date_info[self::ARG_KW_TYPE] = 's_date_workday';
        } elseif ($system_setting_show_holiday) {
            if ($util->isHoliday($date_info[self::ARG_KW_DATE], $calendars)) {
                $date_info[self::ARG_KW_TYPE] = 's_date_holiday';
            }
        }

        if ( ! $system_setting_show_holiday) {
            foreach (array_keys($calendars) as $key1) {
                foreach (array_keys($calendars[$key1]) as $key2) {
                    if ($calendars[$key1][$key2][self::ARG_KW_TYPE]
                        == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                    ) {
                        unset($calendars[$key1][$key2]);
                    }
                }
            }
        }
        $limit = self::ARG_VIEW_COUNT;

        $skip_counter = 0;
        $view_counter = 0;
        $total_member_count = 0;
        //Count the number of users
        if (is_array($members)) {
            $total_member_count += count($members);
        }
        if (is_array($event_groups)) {
            $total_member_count += count($event_groups);
        }
        if (is_array($facilities)) {
            $total_member_count += count($facilities);
        }

        $users_event = [];
        $b_calendar = false;
        $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
                   + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;
        if (is_array($members)) {
            $uum->loadAndCache(array_keys($members));
        }
        //Check yourself for the time being there are
        if ($util->isSelfContainedInMember($members, $login_id, $group)) {
            unset($members[$login_id]);
            $b_login = true;
            $skip_counter++;
            if ($skip_counter > $sp) {
                $view_counter++;
                //all, banner, normal
                $events = $factory->getEventsForWeek(
                    $login_id, 'user', $date_info, $date_info_e, $login_id,
                    $sc_type, $system_setting_hidden_private,
                    $week, true, false, $isEnableAttendanceStatus
                );
                $day_event = [];

                $ts = new \CB_TimeStampEx();
                $ts->setDateTime($date_info[self::ARG_KW_DATE]);
                $unread_event = $this->getUnreadEvent($login, $ts);
                $unread_events_id = [];
                if (isset($unread_events_id)) {
                    foreach ($unread_event as $value) {
                        $unread_events_id[$value['unique_id']]
                            = $value['org_data']['bdate'];
                    }
                    unset($unread_event);
                }
                //all day event
                $date_str_key
                    = $date_info[self::ARG_KW_FORMAT]; //value is 2014-2-28
                foreach (
                    $events[self::ARG_KW_ALLDAY][$date_str_key] as $event_allday
                ) {
                    $event = &$event_allday;
                    $temp = [];
                    $this->convertAttributeAllDay($temp, $event, null);
                    if (array_key_exists($event[self::ARG_KW_ID],
                        $unread_events_id)
                    ) {
                        $temp['unread'] = true;
                    }
                    //GTM-1631,
                    //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                    $day_event[] = $temp;
                }
                //normal event
                foreach ($events['normal'][$date_str_key] as $event_normal) {
                    $event = &$event_normal;
                    $temp = [];
                    $this->convertAttributes($temp, $event, $date_info);

                    $app->addFacilityNameToEventTitle($event, $factory,
                        $event[self::ARG_KW_ID], null, true);

                    if (array_key_exists(self::ARG_KW_EVENT_F_NAME, $event)) {
                        $temp[self::ARG_KW_EVENT_F_NAME]
                            = $event[self::ARG_KW_EVENT_F_NAME];
                    }

                    if (array_key_exists($event[self::ARG_KW_ID],
                        $unread_events_id)
                    ) {
                        $temp['unread'] = true;
                    }
                    //GTM-1631,
                    //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                    $day_event[] = $temp;
                }

                $day_todos = $util->getDayToDoListView($login,
                    $date_info[self::ARG_KW_DATE]);

                //Indentation of schedule
                $schedule_event = [
                    self::ARG_KW_DATE_TYPE => $date_info[self::ARG_KW_TYPE],
                    self::ARG_KW_DATE      => $date_info[self::ARG_KW_FORMAT],
                    'event'                => $day_event,
                    'todos'                => $day_todos,
                    'shared_todos'         => $todo_creator->getTodoByIndex($shared_todos,
                        0)
                ];

                if (array_key_exists($date_info[self::ARG_KW_FORMAT],
                    $calendars)
                ) {
                    $schedule_event['calendar']
                        = $calendars[$date_info[self::ARG_KW_FORMAT]];
                }
                $b_calendar = true;

                // バナーの取得処理
                $banner_events = [];
                foreach ($events['banner'] as $event_banner) {
                    $event = &$event_banner;
                    $temp = [];
                    if (array_key_exists($event[self::ARG_KW_ID],
                        $unread_events_id)
                    ) {
                        $temp['unread'] = true;
                    }
                    $this->convertAttributes($temp, $event);
                    $banner_events[] = $temp;
                }

                $users_event[] = [
                    self::ARG_KW_USER_ID        => $login_id,
                    self::ARG_KW_SCHEDULE_EVENT => $schedule_event,
                    'banner_event'              => $banner_events,
                    'access'                    => [
                        self::ARG_KW_READ => '1',
                        self::ARG_KW_ADD  => '1'
                    ],
                    'timezone'                  => $login_timezone
                ];

                $users_id[] = $login_id;
            }
        }

        if ( ! $b_calendar) {
            foreach ($calendars as $key1 => $value1) {
                foreach ($value1 as $key2 => $value2) {
                    // 個人データの削除
                    if (($value2[self::ARG_KW_TYPE]
                         == GRN_CALENDAR_TYPE_MEMORIALDAY)
                        || ($value2['tself::ARG_KW_TYPEype']
                            == GRN_CALENDAR_TYPE_USER_MEMO)
                    ) {
                        unset($calendars[$key1][$key2]);
                    }
                }
            }
        }

        //if you want see organization schedule(setting: Membership schedules	Show)
        if ($system_logic->getShowOrganize() == 1 && is_array($group)
            && $group[self::ARG_KW_TYPE] == self::ARG_KW_GROUP
        ) {
            ++$total_member_count;

            $skip_counter++;
            if ($skip_counter > $sp) {
                $view_counter++;

                $events = $factory->getEventsForWeek(
                    $group[self::ARG_KW_ID],
                    self::ARG_KW_GROUP,
                    $date_info,
                    $date_info_e,
                    $login_id,
                    $sc_type,
                    $system_setting_hidden_private,
                    $week,
                    true
                );
                $day_event = [];
                foreach (
                    array_keys($events[self::ARG_KW_ALLDAY][$date_info[self::ARG_KW_FORMAT]])
                    as $key
                ) {
                    $event
                        = &$events[self::ARG_KW_ALLDAY][$date_info[self::ARG_KW_FORMAT]][$key];
                    $temp = [];
                    $this->convertAttributeAllDay($temp, $event);

                    $day_event[] = $temp;
                }
                foreach (
                    array_keys($events['normal'][$date_info[self::ARG_KW_FORMAT]])
                    as $key
                ) {
                    $event
                        = &$events['normal'][$date_info[self::ARG_KW_FORMAT]][$key];
                    $temp = [];
                    $this->convertAttributes($temp, $event, $date_info);

                    $app->addFacilityNameToEventTitle($event, $factory,
                        $event[self::ARG_KW_ID], null, true);
                    if (array_key_exists(self::ARG_KW_EVENT_F_NAME, $event)) {
                        $temp[self::ARG_KW_EVENT_F_NAME]
                            = $event[self::ARG_KW_EVENT_F_NAME];
                    }
                    $day_event[] = $temp;
                }
                $schedule_event = [
                    self::ARG_KW_DATE_TYPE => $date_info[self::ARG_KW_TYPE],
                    self::ARG_KW_DATE      => $date_info[self::ARG_KW_FORMAT],
                    'event'                => $day_event
                ];
                if ( ! $b_calendar) {
                    if (array_key_exists($date_info[self::ARG_KW_FORMAT],
                        $calendars)
                    ) {
                        $schedule_event['calendar']
                            = $calendars[$date_info[self::ARG_KW_FORMAT]];
                    }
                    $b_calendar = true;
                }

                $banner_events = [];
                foreach (array_keys($events['banner']) as $key) {
                    $event = &$events['banner'][$key];
                    $temp = [];
                    $this->convertAttributes($temp, $event);
                    $banner_events[] = $temp;
                }

                $user_groups = $uum->getUserGroupsInfo($login_id, true);
                $user_roles = $uum->getUserRolesInfo($login_id, true);
                $access = $acc_logic->getEvaluateAccessesListById(
                    $login,
                    [$group[self::ARG_KW_ID] => $group[self::ARG_KW_ID]],
                    self::ARG_KW_GROUP,
                    [self::ARG_KW_READ, self::ARG_KW_ADD], $dynamic_roles,
                    $user_groups, $user_roles
                );
                $users_event[] = [
                    self::ARG_KW_USER_ID        => 'g'
                                                   . $group[self::ARG_KW_ID],
                    self::ARG_KW_SCHEDULE_EVENT => $schedule_event,
                    'banner_event'              => $banner_events,
                    'access'                    => $access[$group[self::ARG_KW_ID]],
                    'timezone'                  => $current_timezone
                ];
                $groups_id[] = $group[self::ARG_KW_ID];
            }
        }

        //users selected,
        if (is_array($event_groups) && count($event_groups) > 0) {
            // メンバーのアクセス権の取得
            $acc_lists = $acc_logic->getEvaluateAccessesListById(
                $login, $event_groups, self::ARG_KW_GROUP,
                [self::ARG_KW_READ, self::ARG_KW_ADD], $dynamic_roles
            );

            foreach (array_keys($event_groups) as $uid) {
                if ($acc_lists[$uid][self::ARG_KW_READ]
                    == GRN_SCHD_ACCESS_DENY
                ) {
                    $total_member_count--;
                    continue;
                }

                $skip_counter++;
                if ($skip_counter <= $sp) {
                    continue;
                }

                $view_counter++;
                if ($view_counter > $limit) {
                    continue;
                }

                $day_event = [];
                $events = $factory->getEventsForWeek(
                    $uid, self::ARG_KW_GROUP, $date_info, $date_info_e,
                    $login_id, $sc_type,
                    $system_setting_hidden_private, $week, true, false,
                    $isEnableAttendanceStatus
                );
                foreach (
                    array_keys($events[self::ARG_KW_ALLDAY][$date_info[self::ARG_KW_FORMAT]])
                    as $key
                ) {
                    $event
                        = &$events[self::ARG_KW_ALLDAY][$date_info[self::ARG_KW_FORMAT]][$key];
                    $temp = [];

                    $this->convertAttributeAllDay($temp, $event);
                    //GTM-1631,
                    //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                    $day_event[] = $temp;
                }

                foreach (
                    array_keys($events['normal'][$date_info[self::ARG_KW_FORMAT]])
                    as $key
                ) {
                    $event
                        = &$events['normal'][$date_info[self::ARG_KW_FORMAT]][$key];
                    $temp = [];
                    $this->convertAttributes($temp, $event, $date_info);

                    $app->addFacilityNameToEventTitle($event, $factory,
                        $event[self::ARG_KW_ID], null, true);
                    if (array_key_exists(self::ARG_KW_EVENT_F_NAME, $event)) {
                        $temp[self::ARG_KW_EVENT_F_NAME]
                            = $event[self::ARG_KW_EVENT_F_NAME];
                    }
                    //GTM-1631,
                    //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                    $day_event[] = $temp;
                }
                // スケジュールの入れ込み
                $schedule_event = [
                    self::ARG_KW_DATE_TYPE => $date_info[self::ARG_KW_TYPE],
                    self::ARG_KW_DATE      => $date_info[self::ARG_KW_FORMAT],
                    'event'                => $day_event
                ];
                if ( ! $b_calendar) {
                    if (array_key_exists($date_info[self::ARG_KW_FORMAT],
                        $calendars)
                    ) {
                        $schedule_event['calendar']
                            = $calendars[$date_info[self::ARG_KW_FORMAT]];
                    }
                    $b_calendar = true;
                }

                // バナーの取得処理
                $banner_events = [];
                foreach (array_keys($events['banner']) as $key) {
                    $event = &$events['banner'][$key];
                    $temp = [];
                    $this->convertAttributes($temp, $event);
                    $banner_events[] = $temp;
                }

                $access = [self::ARG_KW_READ => 1, self::ARG_KW_ADD => '1'];
                if ($acc_lists[$uid][self::ARG_KW_ADD]
                    == GRN_SCHD_ACCESS_DENY
                ) {
                    $access[self::ARG_KW_ADD] = '0';
                }

                $users_event[] = [
                    self::ARG_KW_USER_ID        => 'g' . $uid,
                    self::ARG_KW_SCHEDULE_EVENT => $schedule_event,
                    'banner_event'              => $banner_events,
                    'access'                    => $access,
                    'timezone'                  => $current_timezone
                ];
                $groups_id[] = $uid;
            }
        }


        if (is_array($members) && count($members) > 0) {
            // メンバーのアクセス権の取得
            $acc_lists = $acc_logic->getEvaluateAccessesListById(
                $login, $members, 'user', [self::ARG_KW_READ, self::ARG_KW_ADD],
                $dynamic_roles
            );
            $members_list = [];

            foreach (array_keys($members) as $uid) {
                if ($acc_lists[$uid][self::ARG_KW_READ]
                    == GRN_SCHD_ACCESS_DENY
                ) {
                    $total_member_count--;
                    continue;
                }

                $skip_counter++;
                if ($skip_counter <= $sp) {
                    continue;
                }

                $view_counter++;
                if ($view_counter > $limit) {
                    continue;
                }

                $members_list[] = $uid;
            }

            $factory->loadAndCacheUserEventRelation($members_list, 'user',
                $date_info, $date_info_e, true, true,
                $isEnableAttendanceStatus);
            $users = $util->getViewUsers($members_list);
            foreach ($members_list as $uid) {
                if ( ! array_key_exists($uid, $users)) {
                    continue;
                }

                $user_tz = \CB_I18N::getUserTimezone($users[$uid]);

                $day_event = [];
                $events = $factory->getEventsForWeek(
                    $uid, 'user', $date_info, $date_info_e, $login_id, $sc_type,
                    $system_setting_hidden_private, $week,
                    true, $user_tz, $isEnableAttendanceStatus
                );
                if (array_key_exists($date_str_key,
                    $events[self::ARG_KW_ALLDAY])
                ) {
                    foreach (
                        $events[self::ARG_KW_ALLDAY][$date_str_key] as $key =>
                        $event_allday
                    ) {
                        $event = &$event_allday;
                        $temp = [];
                        $this->convertAttributeAllDay($temp, $event);

                        if (@$event['only_view_tz'] == 2) {
                            continue;
                        }
                        //GTM-1631,
                        //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                            $temp, $event)
                        ) {
                            continue;
                        }
                        $day_event[] = $temp;
                    }
                }

                if (array_key_exists($date_str_key, $events['normal'])) {
                    foreach (
                        $events['normal'][$date_str_key] as $key =>
                        $event_normal
                    ) {
                        $event
                            = &$events['normal'][$date_info[self::ARG_KW_FORMAT]][$key];
                        $temp = [];
                        $this->convertAttributes($temp, $event, $date_info);

                        $app->addFacilityNameToEventTitle($event, $factory,
                            $event[self::ARG_KW_ID], null, true);
                        if (array_key_exists(self::ARG_KW_EVENT_F_NAME,
                            $event)
                        ) {
                            $temp[self::ARG_KW_EVENT_F_NAME]
                                = $event[self::ARG_KW_EVENT_F_NAME];
                        }
                        if (@$event['only_view_tz'] == 2) {
                            continue;
                        }
                        //GTM-1631,
                        //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                            $temp, $event)
                        ) {
                            continue;
                        }
                        $day_event[] = $temp;
                    }
                }
                // スケジュールの入れ込み
                $schedule_event = [
                    self::ARG_KW_DATE_TYPE => $date_info[self::ARG_KW_TYPE],
                    self::ARG_KW_DATE      => $date_info[self::ARG_KW_FORMAT],
                    'event'                => $day_event
                ];
                if ( ! $b_calendar) {
                    if (array_key_exists($date_info[self::ARG_KW_FORMAT],
                        $calendars)
                    ) {
                        $schedule_event['calendar']
                            = $calendars[$date_info[self::ARG_KW_FORMAT]];
                    }
                    $b_calendar = true;
                }

                // Acquisition process of banner
                $banner_events = [];
                foreach ($events['banner'] as $key => $event_banner) {
                    $event = &$event_banner;
                    if ( ! array_key_exists($event[self::ARG_KW_ID],
                        $banner_events)
                    ) //remove duplicate,
                    {
                        $temp = [];
                        $this->convertAttributes($temp, $event);
                        $banner_events[$event[self::ARG_KW_ID]] = $temp;
                    }
                }

                $access = [self::ARG_KW_READ => 1, self::ARG_KW_ADD => '1'];
                if ($acc_lists[$uid][self::ARG_KW_ADD]
                    == GRN_SCHD_ACCESS_DENY
                ) {
                    $access[self::ARG_KW_ADD] = '0';
                }

                $users_event[] = [
                    self::ARG_KW_USER_ID        => $uid,
                    self::ARG_KW_SCHEDULE_EVENT => $schedule_event,
                    'banner_event'              => $banner_events,
                    'access'                    => $access,
                    'timezone'                  => \CB_I18N::getUserTimezone($users[$uid])
                ];
                $users_id[] = $uid;
            }
        }

        //if there is a facility
        if (is_array($facilities) && count($facilities) > 0) {

            $target_facilities = $facilities;
            $acc_lists = $acc_logic->getEvaluateAccessesListById(
                $login, $target_facilities, 'facility',
                [self::ARG_KW_READ, self::ARG_KW_ADD], $dynamic_roles
            );

            $target_facilities = $facilities;
            $tmp_acc_lists = $acc_logic->getFacilityGroupAccessList(
                $login, $target_facilities,
                [self::ARG_KW_READ, self::ARG_KW_ADD], $dynamic_roles
            );

            foreach (array_keys($acc_lists) as $key) {
                foreach ([self::ARG_KW_ADD, self::ARG_KW_READ] as $auth_name) {
                    if (array_key_exists($key, $tmp_acc_lists)
                        && array_key_exists($auth_name, $tmp_acc_lists[$key])
                        && $tmp_acc_lists[$key][$auth_name]
                           == GRN_SCHD_ACCESS_DENY
                    ) {
                        $acc_lists[$key][$auth_name] = GRN_SCHD_ACCESS_DENY;
                    }
                }
            }
            //for footer add all
            foreach ($acc_lists as $key => $item) {
                if (array_key_exists(self::ARG_KW_ADD, $item)
                    && $item[self::ARG_KW_ADD] == 1
                ) {
                    $facilities_id[] = $key;
                }
            }
            foreach (array_keys($facilities) as $faid) {
                if ($acc_lists[$faid][self::ARG_KW_READ]
                    == GRN_SCHD_ACCESS_DENY
                ) {
                    $total_member_count--;
                    continue;
                }

                $skip_counter++;
                if ($skip_counter <= $sp) {
                    continue;
                }

                $view_counter++;
                if ($view_counter > $limit) {
                    continue;
                }

                $day_event = [];
                $events = $factory->getEventsForWeek(
                    $faid, 'facility', $date_info, $date_info_e, $login_id,
                    GRN_SCHEDULE_EVENT_TYPE_NORMAL,
                    $system_setting_hidden_private, $week
                );
                foreach ($events['normal'][$date_str_key] as $event_normal) {
                    $event = &$event_normal;
                    $temp = [];
                    $this->convertAttributes($temp, $event, $date_info);

                    $app->addFacilityNameToEventTitle(
                        $event, $factory, $event[self::ARG_KW_ID], null, true
                    ); //true: mobile view
                    if (array_key_exists(self::ARG_KW_EVENT_F_NAME, $event)) {
                        $temp[self::ARG_KW_EVENT_F_NAME]
                            = $event[self::ARG_KW_EVENT_F_NAME];
                    }
                    $day_event[] = $temp;
                }
                // スケジュールの入れ込み
                $schedule_event = [
                    self::ARG_KW_DATE_TYPE => $date_info[self::ARG_KW_TYPE],
                    self::ARG_KW_DATE      => $date_info[self::ARG_KW_FORMAT],
                    'event'                => $day_event
                ];
                if ( ! $b_calendar) {
                    if (array_key_exists($date_info[self::ARG_KW_FORMAT],
                        $calendars)
                    ) {
                        $schedule_event['calendar']
                            = $calendars[$date_info[self::ARG_KW_FORMAT]];
                    }
                    $b_calendar = true;
                }

                $access = [self::ARG_KW_READ => 1, self::ARG_KW_ADD => '1'];
                if ($acc_lists[$faid][self::ARG_KW_ADD]
                    == GRN_SCHD_ACCESS_DENY
                ) {
                    $access[self::ARG_KW_ADD] = '0';
                }

                $users_event[] = [
                    self::ARG_KW_USER_ID        => self::ARG_KW_F . $faid,
                    'facility_id'               => $faid,
                    'facility_title'            => $facilities[$faid]['col_name'],
                    self::ARG_KW_SCHEDULE_EVENT => $schedule_event,
                    'banner_event'              => [],
                    'access'                    => $access,
                    'timezone'                  => $current_timezone
                ];
            }
        }
        $t->assign(self::ARG_KW_DATE_TYPE, $date_info[self::ARG_KW_TYPE]);
        $t->assign(
            'schedule',
            [
                'users'  => $users_event,
                'access' => [self::ARG_KW_READ => '1', self::ARG_KW_ADD => '1']
            ]
        );

        $t->assign(
            'schedule_params', [
                'set_hour'            => $set_hour,
                'end_hour'            => $end_hour,
                'satr_date'           => $date_info[self::ARG_KW_FORMAT],
                self::ARG_KW_END_DATE => $date_info[self::ARG_KW_FORMAT]
            ]
        );
        $t->assign('bdate', $date->format());

        //The use of management
        require_once('schedule/facility_privilege.csp');
        $privilege_logic = \GRN_Facility_Privilege_Logic::getInstance();
        $t->assign('management', $privilege_logic->hasPrivilege($login));

        //Calculation of the date for the navigation
        $prev_date = new \CB_DateEx($date_info[self::ARG_KW_DATE]);
        $prev_date->moveDays(-1);
        $next_date = new \CB_DateEx($date_info[self::ARG_KW_DATE]);
        $next_date->moveDays(1);

        $t->assign('today', $date->format());
        $t->assign('bdate_prevday', $prev_date->format());
        $t->assign('bdate_nextday', $next_date->format());
        $t->assign('search_text', $search_text);
        $t->assign(
            'access_plugin', [
                self::ARG_KW_NAME => 'schedule',
                'params'          => ['action' => [self::ARG_KW_READ]]
            ]
        );

        if ($system_setting_show_group) {
            $t->assign('include_org', '1');
        } else {
            $t->assign('include_org', '0');
        }

        // N件ナビのための準備
        require_once('grn/controller.csp');
        $utility = new \GRN_ControllerUtil();

        // 一覧開始位置取得
        $navi_start_position = $utility->getNaviStartPosition();

        // User icon setting
        $imageIcon = \GRN_ControllerUtil::getUserIconFormat($login);
        $t->assign('imageIcon', $imageIcon);

        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
            $login);
        // for user image icon
        if ($imageIcon) {
            $users_info = \GRN_ControllerUtil::addPhotoUrlForUsersInfo(
                $users_info, \GRN_ControllerUtil::ICON_SIZE_SMALL
            );
            $t->assign('iconSize', \GRN_ControllerUtil::ICON_SIZE_SMALL);
        }

        $t->assign('users_info', $users_info);
        $groups_info = $uum->getGroupInfoList($groups_id);
        $t->assign('groups_info', $groups_info);

        // 一覧開始位置を保存（必ず呼び出す）
        $utility->setNaviStartPosition($navi_start_position);


        // n件ナビゲーション情報を取得する
        $navi_for_view = $utility->makeNaviInformation($navi_start_position,
            $limit, $total_member_count);

        $navi_for_view['navi']['params'] = [
            'bdate'                  => $date->format(),
            'gid'                    => $group_id,
            //'search_text' => $search_text,
            self::ARG_KEYWORD_PARENT => $selected_group_type,
            self::ARG_KW_USERS_ID    => $strUserId,
            'fids'                   => $strFacilityId
        ];
        if (is_string($event_id) && mb_strlen($event_id)) {
            $navi_for_view['navi']['params']['event'] = $event_id;
            $navi_for_view['navi']['params']['event_date']
                = $event_date->format();
        }
        // ナビゲーション
        $t->assign('view_set', $navi_for_view);

        require('../_select_date_schedule.csp');

        // page title
        $page_title = cb_msg('grn.schedule', 'GRN_SCH-660');

        $t->assign('page_title', $page_title);
        // site position
        $t->assign(
            'site_position', [
                ['page' => '', self::ARG_KW_NAME => $page_title]
            ]
        );

        $referer = [];
        $referer_params = [
            self::ARG_GROUP_ID,
            self::ARG_BEGIN_DATE,
            self::ARG_EVENT,
            self::ARG_EVENT_DATE,
            self::ARG_SEARCH_TEXT,
            self::ARG_NAVIGATION_SP
        ];
        foreach ($referer_params as $key) {
            if (array_key_exists($key, $this->getInput())) {
                $referer[$key] = $this->getInput()[$key];
            }
        }
        if ($group_id == "search" && $view_counter === 0) {
            $referer[self::ARG_GROUP_ID] = '';
            $referer[self::ARG_SEARCH_TEXT] = '';
        }
        $referer['page'] = 'schedule/mobile/group_day';
        $referer[self::ARG_KW_NAME] = $page_title;
        require_once('fw/session_manager.csp');
        $session_manager = \CB_SessionManager::getInstance();
        $session = $session_manager->getSession('schedule.referer');
        $session_values = $session->getValues();
        $unset_keys = [];
        foreach ($session_values as $key => $value) {
            if (isset($value['page']) && $value['page'] == $referer['page']) {
                $unset_keys[] = $key;
            }
        }
        foreach ($unset_keys as $key) {
            $session->unset_by($key);
        }

        $referer_key = md5(uniqid(rand(), true));
        $session->set($referer_key, $referer);
        $t->assign(self::ARG_KW_REF, $referer_key);

        //- Hide to display the navigation calendar
        $session_navi_calendar
            = $session_manager->getSession('grn.schedule.navi_calendar');
        $navi_cal_display_flag
            = $session_navi_calendar->get('navi_cal_display_flag');
        if ($navi_cal_display_flag == null || $navi_cal_display_flag == false) {
            $navi_cal_display_flag = false;
        } else {
            $navi_cal_display_flag = true;
        }
        $t->assign('navi_cal_display_flag', $navi_cal_display_flag);

        $t->assign('selected_group_type', $selected_group_type);

        // For tree
        $page_path = str_replace("/mobile", "", cb_get_pagename());
        $tree_data = \GRN_Schedule_Dropdown_Util::makeFacilityGroupsTreeMenu(
            $page_path, $group_id, $selected_group_type
        );
        //GRN-1135: Filter the item of recent, ignore the item not recent type
        $facility_history_mobile = [];
        $facility_tree = [];
        foreach ($tree_data['org'] as $key => $value) {
            if (preg_match('#^x.*#', $key)) {
                $facility_history_mobile[] = [
                    self::ARG_KW_ID   => $value['oid'],
                    self::ARG_KW_NAME => $value[self::ARG_KW_NAME]
                ];
            } else {
                $facility_tree[] = $value;
            }
        }

        // end tree view
        //end
        if ($group_id === self::ARG_KW_F || preg_match('#^f.*#', $group_id)) {

            if ($group_id === self::ARG_KW_F) {
                $t->assign('group_id_focus',
                    'x'); //  $t->assign('group_id', 'x');
                if ( ! array_key_exists('x',
                    $tree_data['org'])
                ) { //in the case setting not allow use all facility
                    $facility_history_mobile[] = [
                        self::ARG_KW_ID   => 'x',
                        self::ARG_KW_NAME => $default_group_name
                    ];
                }
            } else {
                $groups_id = "x" . substr($group_id, 1);
                $t->assign('group_id_focus', $groups_id);
                if ( ! array_key_exists($groups_id, $tree_data['org'])) {
                    $facility_history_mobile[] = [
                        self::ARG_KW_ID   => $groups_id,
                        self::ARG_KW_NAME => $default_group_name
                    ];
                }
            }

            $t->assign(self::ARG_KW_GROUP, $facility_history_mobile);
            $tree_for_view = [
                'tree_name' => 'facility_categories_tree',
                'root'      => $tree_data['org'],
                'async_url' => 'schedule/mobile/ajax/get_facility_sub_group',
                'oid_key'   => 'oid',
                'page_name' => $page_path,
                'no_root'   => true
            ];
        } else {
            // org tree view
            require_once('grn/org_tree.csp');
            $page_name = cb_get_pagename() . ".u";
            $util = \GRN_OrgTreeUtil::getInstance();
            $tree = $util->getTree($page_name, null, null, true);
            $s_oid = $tree->getSelectedNode();
            $tree->setSelectedNode($s_oid);
            $util->setTree($page_name, $tree);
            //o$group_list
            $tree_for_view = [
                'tree_name' => 'user_categories_tree',
                'root'      => $tree->getRoot(),
                'async_url' => 'grn/ajax_get_sub_group_for_mobile',
                'oid_key'   => 'oid',
                'page_name' => $page_path,
                'no_root'   => true
            ];

            $t->assign('page_user', true);
        }
        $t->assign('upper_page', $page_title);
        $t->assign('user_categories_tree', $tree_for_view);
        $t->assign('short_date_format',
            \CB_LocaleManager::getCurrentShortDateFormat($login_id));
        $t->assign('page_name', cb_get_pagename());


        //For footer add event icon, note: add all members (user, facility)

        if (isset($facilities_id) && count($facilities_id) > 0) {
            $facilities_id = implode(":", $facilities_id);
        }
        if (isset($members)) {
            if (isset($b_login) && $b_login == true) {
                $members = [$login_id => $login_id] + $members;
            }
            $members_id = implode(":", array_keys($members));
        }

        $t->assign('selected_users_sUID', $members_id);
        $t->assign('sITEM', $facilities_id);
        //end
        $member_tz = $personal_logic->getDisplayMemberTimezone($login);
        $t->assign('member_tz', $member_tz);
        $t->assign('show_todos',
            $personal_logic->getShowToDos($login, 'group_day'));
        //$show_absent_schedule = $personal_logic->getShowHideAbsentSchedule( $login, 'group_day' );
        //$t->assign( 'show_absent_schedule', $show_absent_schedule );
        $t->assign('place_holder',
            cb_msg('grn.schedule', 'user_facility_place_holder'));
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));

        return $t->fetch('schedule/mobile/group_day.tpl');
    }

    public function getTitle()
    {
        return grn_get_current_page_display_name();
    }

    public function getRemoveFooter()
    {
        return true;
    }
}
