<?php

namespace grn\schedule\screen\mobile;

require_once('schedule/error_code.csp');

class ScheduleCommentAdd extends MobileScheduleScreenBase
{
    public function __construct($input)
    {
        parent::__construct($input);
    }

    public function fetch()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $input = $this->getInput();
        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);

        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $date = null;
        }

        if ( ! $event_id) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $login = cb_get_login_user();

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add', 'modify', 'delete'], $dynamic_role);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        if ($access['add'] == GRN_SCHD_ACCESS_DENY
            && $access['modify'] == GRN_SCHD_ACCESS_DENY
            && $access['delete'] == GRN_SCHD_ACCESS_DENY
        ) {
            cb_throw_error(E_GRN_SCHD_DENYENTRY_EVENTFOLLOW);
        }

        $params = [
            'event'       => $event_id,
            'bdate'       => $bdate,
            'uid'         => $user_id,
            'gid'         => $group_id,
            'referer_key' => $referer_key
        ];
        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), 'schedule/mobile/view',
            $params);
        $this->assignBreadcrumbCurrentPage($t,
            cb_msg('grn.mobile', 'comment_add'));

        $t->assign('hide_upload_file', true); //don't display upload file
        $t->assign('event_id', $event_id);
        $t->assign('user_id', $user_id);
        $t->assign('group_id', $group_id);
        $t->assign('bdate', $bdate);
        $t->assign('referer_key', $referer_key);

        //GRB-15777
        require_once('schedule/view_util.csp');
        $util = \GRN_Schedule_View_Util::getInstance();
        $type = $util->getViewEventType($event->getEventType(),
            $event->isShared());
        $t->assign('event_type', $type);

        return $t->fetch('schedule/mobile/comment_add.tpl');
    }

    public function post($input)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);

        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $date = null;
        }

        if ( ! $event_id) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $login = cb_get_login_user();

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add', 'modify', 'delete'], $dynamic_role);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        if ($access['add'] == GRN_SCHD_ACCESS_DENY
            && $access['modify'] == GRN_SCHD_ACCESS_DENY
            && $access['delete'] == GRN_SCHD_ACCESS_DENY
        ) {
            cb_throw_error(E_GRN_SCHD_DENYENTRY_EVENTFOLLOW);
        }

        $follow = $input['comment_data'];
        if (is_null($follow) || mb_strlen(cb_trim($follow)) == 0) {
            cb_throw_error(E_GRN_SCHD_NOTINPUT_EVENTFOLLOW);
        }

        $event_id = $app->writeFollow($login, $follow, $event_id, $date);
        $event->id = $event_id;

        // GRN2-4506
        if ($event instanceof \GRN_Schedule_RepeatEvent) {
            require_once('fw/i18n.csp');
            if ($event->setdatetime instanceof \CB_DatetimeEx) {
                $settimestamp = new \CB_TimeStampEx(null, $event->timezone);
                $settimestamp->setDateTime($event->setdatetime,
                    \CB_I18N::getInstance()->getCurrentTimezone());
                $event->setdatetime = $settimestamp->getDateTime();
                if (isset($event->enddatetime)) {
                    $endtimestamp = new \CB_TimeStampEx(null, $event->timezone);
                    $endtimestamp->setDateTime($event->enddatetime,
                        \CB_I18N::getInstance()->getCurrentTimezone());
                    $event->enddatetime = $endtimestamp->getDateTime();
                } else {
                    $event->enddateitme = $event->setdatetime;
                }
            } elseif ($event->setdatetime instanceof \CB_Date) {
                $dateTimeZoneEvent = new \DateTimeZone($event->timezone);
                $dateTimeZoneUser = new \DateTimeZone(\CB_I18N::getInstance()
                                                              ->getCurrentTimezone());
                $dateTimeEvent = new \DateTime("now", $dateTimeZoneEvent);
                $dateTimeUser = new \DateTime("now", $dateTimeZoneUser);
                $timeOffset
                    = $dateTimeZoneEvent->getOffset($dateTimeUser);
                if ($timeOffset <= 0) {
                    $event->enddatetime = $event->setdatetime;
                } else {
                    $event->setdatetime = $event->enddatetime;
                }
            }
        } elseif ($event instanceof \GRN_Schedule_NormalEvent) {
            if ($event->setdatetime instanceof \CB_DateTimeEx) {
                require_once('fw/i18n.csp');
                $settimestamp = new \CB_TimeStampEx(null, $event->timezone);
                $settimestamp->setDateTime($event->setdatetime,
                    \CB_I18N::getInstance()->getCurrentTimezone());
                $event->setdatetime = $settimestamp->getDateTime();
                if (isset($event->enddatetime)) {
                    $endtimestamp = new \CB_TimeStampEx(null, $event->timezone);
                    $endtimestamp->setDateTime($event->enddatetime,
                        \CB_I18N::getInstance()->getCurrentTimezone());
                    $event->enddatetime = $endtimestamp->getDateTime();
                } else {
                    $event->enddatetime = $event->setdatetime;
                }
            }
        }
        // End GRN2-4506

        // notify
        $tsex = new \CB_TimeStampEx();
        $notify_date = $tsex->getDate();

        if ($notify_date->compare($date) <= 0) {
            if ($event->users && count($event->users) > 0) {
                $title = $this->_schedule_command_view_getNotifyTitle($event);
                $app->setNotify($event->users, $login, $event, $date, $title,
                    $follow, GRN_SCHEDULE_NOTIFY_FOLLOWENTRY, $tsex);
            }
            if ($event->private && is_array($event->notify_address)
                && count($event->notify_address) > 0
            ) {
                $title = $this->_schedule_command_view_getNotifyTitle($event);
                $app->sendNotificationsToPublic($login, $event, $date, $follow,
                    $tsex, $title, false, false,
                    GRN_SCHEDULE_NOTIFY_FOLLOWENTRY);
            }
        }

        return $event_id;
    }

    public function _schedule_command_view_getNotifyTitle($event)
    {
        require_once('schedule/notification.csp');
        $util = \GRN_Schedule_Notify_Logic::getInstance();

        return $util->getNotifyTitle(html_entity_decode($event->getTitle()));
    }

    public function getTitle()
    {
        $event = $this->getEventForView();

        return $event->detail . ' - ' . cb_msg('grn.mobile', 'comment_add');
    }
}
