<?php

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;
use grn\schedule\ScheduleMemberLogic;

class ScheduleBannerAdd extends MobileScheduleScreenBase
{
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/multi_select_utility.csp');
        $input = grn_deploy_selected_users('selected_users_sUID', 'sUID',
            $input);

        $parameter = $this->getPostParams();
        $this->checkArgFromInput($parameter, $input);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $login = $this->getLoginUser();

        // get menu
        $menu = $this->getMenus();
        $t->assign('menus', $menu);

        $this->setMemberSchedule();
        $this->checkAccessScheduleBanner();

        $t->assign('show_organize', $this->getShowOrganize());

        // attached files
        $allow_file_attachment = $this->getAllowFileAttachment();
        $t->assign('allow_file_attachment', $allow_file_attachment);
        if ($allow_file_attachment) {
            $tmp_key = cb_at($input, 'tmp_key');
            if ( ! $tmp_key) {
                //generate upload ticket
                include('grn/_upload_prepend.csp');
                $tmp_key = grn_get_temporary_key();
            }
            $t->assign('tmp_key', $tmp_key);
        }

        // 必要なパラメータの設定
        $schedule_event = [];
        //GTM-103
        $schedule_event['selectmenu'] = '';
        $schedule_event['event_menu_color'] = '';
        //End GTM-103
        $schedule_event['start_date'] = $this->getBeginDate();
        $schedule_event['end_date'] = $this->getBeginDate();
        $schedule_event['start_time'] = null;
        $schedule_event['end_time'] = null;
        require_once('fw/i18n.csp');
        $current_timezone = \CB_I18N::getInstance()
                                    ->getCurrentTimezone();
        $schedule_event['timezone'] = $current_timezone;
        $schedule_event['end_timezone'] = $current_timezone;

        require_once('grn/controller.csp');
        $member = $this->getMember();
        if (is_a($member, 'CB_User')) {
            $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                          ->getDisplayMember($member,
                                                              true);
        } elseif (is_a($member, 'CB_Group')) {
            $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                          ->getDisplayMember($member,
                                                              true);
        }

        if ($this->getTab()) {
            $schedule_event['timezone'] = $this->getTimezone()
                ? $this->getTimezone() : $schedule_event['timezone'];
            $schedule_event['end_timezone'] = $this->getEndTimezone()
                ? $this->getEndTimezone() : $schedule_event['timezone'];
            $schedule_event['selectmenu'] = $this->getSelectMenu($menu,
                $this->getMenu());
            //GTM-103
            $schedule_event['event_menu_color'] = $this->getEventMenuColor();
            //End GTM-103
            $schedule_event['title'] = $this->getScheduleTitle();
            $schedule_event['memo'] = $this->getMemo();

            require_once('schedule/view_util.csp');
            $util = \GRN_Schedule_View_Util::getInstance();

            if ($this->getTab() == 'add') {
                $start_year = $this->getStartYear();
                $start_month = $this->getStartMonth();
                $start_day = $this->getStartDay();
                $end_year = $this->getEndYear();
                $end_month = $this->getEndMonth();
                $end_day = $this->getEndDay();

                // 日付だけ
                $schedule_event['start_date']
                    = $util->createDateTimeFromParameters($start_year,
                    $start_month, $start_day);
                $schedule_event['end_date']
                    = $util->createDateTimeFromParameters($end_year, $end_month,
                    $end_day);

                //switch tab from add
                if ($allow_file_attachment) {
                    $session_key = cb_at($input, self::ARG_SESSION_KEY);

                    $schedule_event['attached_files']
                        = $this->getAttachedFile($session_key);
                }
            }

            // 参加者
            $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                          ->getAttendeesRenderFromParam($this->getSUID(),
                                                              true, false);
        } elseif (($event_id = $this->getEvent())) {
            require_once('schedule/application.csp');
            $app = \GRN_Schedule_Application::getInstance();
            // 再利用登録の場合
            $new_entry = $this->getNew();
            $event = $app->getEvent($login, $event_id,
                $this->getBeginDate());
            // イベントがある場合は、そのイベントを利用して初期値を設定する
            if ($event && ! $new_entry) {
                $schedule_event['timezone'] = $event->timezone;
                $schedule_event['end_timezone'] = isset($event->end_timezone)
                    ? $event->end_timezone : $event->timezone;

                if ($event->menu !== false && $event->menu !== ''
                    && ! is_null($event->menu)
                ) {
                    if ($event->menucolor !== false && $event->menucolor !== ''
                        && ! is_null($event->menucolor)
                    ) {
                        $schedule_event['selectmenu'] = $event->menu . ';#'
                                                        . $event->menucolor;
                    } else {
                        $schedule_event['selectmenu'] = $event->menu;
                    }
                }
                $schedule_event['menucolor'] = $event->menucolor;
                $schedule_event['title'] = $event->detail;
                $schedule_event['start_date'] = $event->setdate;
                $schedule_event['end_date'] = $event->enddate;
                $schedule_event['memo'] = $event->memo;

                // 参加者
                $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                              ->getAttendeesRenderFromEvent($event,
                                                                  true);
                //reuse event
                if ($allow_file_attachment) {
                    require_once('schedule/file.csp');
                    $fm = \GRN_Schedule_FileManager::getInstance();
                    $files = $fm->getFiles($event_id);

                    //get files
                    $tmp_key = grn_get_temporary_key();
                    $session_key
                        = 'schedule-mobile-change-page-' . $tmp_key;
                    $schedule_event['attached_files']
                        = grn_init_attached_file($session_key, $files,
                        false, 'schedule');
                }

            } // メンバーだけ利用
            elseif ($event && $new_entry) {
                $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                              ->getAttendeesRenderFromEvent($event,
                                                                  true);
            }
        } else {
            $notify_address_candidate = ScheduleMemberLogic::getInstance()
                                                           ->getDefaultPublicByUserId($login->getOID(),
                                                               ScheduleMemberLogic::PLUG_IN_TYPE_VIEW,
                                                               true, true);
            if (count($notify_address_candidate) > 0) {
                $schedule_event['notify_address']
                    = ScheduleMemberLogic::getInstance()
                                         ->getDisplayMemberList($notify_address_candidate,
                                             true);
            }
        }

        $start_date = new \CB_DateEx($schedule_event['start_date']);
        $t->assign('start_date', $start_date->format());
        $end_date = new \CB_DateEx($schedule_event['end_date']);
        $t->assign('end_date', $end_date->format());

        require_once("grn/JSONResponse.csp");
        $json = \grn\grn\JSONResponse::create();

        $selected_users_sUID = isset($schedule_event['users'])
            ? $schedule_event['users'] : [];
        $selected_users_sUID
            = $json->encode(['list' => array_values($selected_users_sUID)]);
        $t->assign('selected_users_sUID', $selected_users_sUID);

        $t->assign('schedule_event', $schedule_event);

        // page title
        $page_title = grn_get_current_page_display_name();
        // site position
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $t->assign('referer_key', $referer_key);
        $referer_exists = false;
        if ($referer_key) {
            require_once('fw/session_manager.csp');
            $session_manager = \CB_SessionManager::getInstance();
            $session = $session_manager->getSession('schedule.referer');
            $referer = $session->get($referer_key);
            if (is_array($referer)) {
                $params = [
                    self::ARG_NAVIGATION_SP => cb_at($referer,
                        self::ARG_NAVIGATION_SP),
                    self::ARG_GROUP_ID      => cb_at($referer,
                        self::ARG_GROUP_ID),
                    self::ARG_SEARCH_TEXT   => cb_at($referer,
                        self::ARG_SEARCH_TEXT),
                    self::ARG_KW_USERS_ID   => cb_at($referer,
                        self::ARG_KW_USERS_ID),
                    self::ARG_KW_FIDS_ID    => cb_at($referer,
                        self::ARG_KW_FIDS_ID),
                    self::ARG_BEGIN_DATE    => cb_at($referer,
                        self::ARG_BEGIN_DATE),
                    self::ARG_USER_ID       => cb_at($referer,
                        self::ARG_USER_ID)
                ];
                if (array_key_exists(self::ARG_EVENT, $referer)) {
                    $params[self::ARG_EVENT] = $referer[self::ARG_EVENT];
                }
                $this->assignBreadcrumbUpperPage($t, $referer['name'],
                    $referer['page'], $params);
                $this->assignBreadcrumbCurrentPage($t, $page_title);
                $referer_exists = true;

                if (array_key_exists('back_link', $referer)) {
                    $t->assign('is_reuse', true);
                    $t->assign('back_link', $referer['back_link']);
                }
            }
        }

        if ($referer_exists === false) {
            // page title
            $page_title = grn_get_current_page_display_name();
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.schedule', 'GRN_SCH-982'),
                'schedule/mobile/personal_week');
            $this->assignBreadcrumbCurrentPage($t, $page_title);
        }
        $t->assign('page_title', $page_title);

        $t->assign('add_plugin', [
            'name'   => 'schedule',
            'params' => [
                'action'       => ['read', 'add'],
                'session_name' => cb_get_pagename()
            ]
        ]);
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));
        $page_name = cb_get_pagename();
        $t->assign('page_name', $page_name);

        return $t->fetch('schedule/mobile/banner_add.tpl');
    }

    public function getTitle()
    {
        return grn_get_page_display_name('schedule/mobile/banner_add');
    }

    public function getRemoveFooter()
    {
        return true;
    }
}
