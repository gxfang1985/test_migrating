<?php

namespace grn\schedule\screen\mobile;

use grn\schedule\FacilityApprovalLogic;
use grn\schedule\FacilityApprovalViewUtil;

class ScheduleFacilityList extends MobileScheduleScreenBase
{
    const REQUEST_PAGE = 'schedule/mobile/ajax/facility_list';
    private $_is_from_ajax;

    public function __construct($input)
    {
        parent::__construct($input);

        $this->setMobileFooterBar();
    }

    public function fetch()
    {
        //Get login info
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $login_id = $login->getOID();
        //Get event ID
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_EVENT], $input);
        $event_id = $this->getEvent();
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);

        if ( ! $event_id) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $date = null;
        }

        //Get event.
        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($login, $event_id, $date, CB_DATABASE_NO_LOCK,
            false, GRN_SCHEDULE_GET_MEMBER_ID);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        //Check View right of appointment
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_roles = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccessByID($login, $event,
            ['read'], $dynamic_roles);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        //Get Facility list
        $members = [];
        if (is_array($event->facilities)) {
            foreach ($event->facilities as $object_id) {
                $members[$object_id] = $object_id;
            }
        }

        $display_info = $this->getDisplayInfo($members, 'facility');

        //GTM-1684
        require_once('schedule/view_util.csp');
        $scheduleUtil = \GRN_Schedule_View_Util::getInstance();
        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            $this->_getFacilityApprovalDataForView($event, $display_info,
                $scheduleUtil);
        }

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $t->assign('count', count($members));
        $t->assign('request_page', self::REQUEST_PAGE);
        $t->assign('fac_info_list', $display_info);

        if ($this->_is_from_ajax) {
            return $t->fetch('schedule/mobile/_facility_info_list.tpl');
        } else {
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.mobile', 'detail_title'), "schedule/mobile/view", [
                    self::ARG_EVENT       => $event_id,
                    self::ARG_BEGIN_DATE  => $bdate,
                    self::ARG_USER_ID     => $user_id,
                    self::ARG_GROUP_ID    => $group_id,
                    self::ARG_REFERER_KEY => $referer_key
                ]);
            $this->assignBreadcrumbCurrentPage($t,
                cb_msg('grn.schedule', 'GRN_SCH-45'));
            $t->assign('offset', $this->getNewOffset());
            $t->assign('more_view_args', [self::ARG_EVENT => $event_id]);

            return $t->fetch('schedule/mobile/facility_index.tpl');
        }
    }

    //GTM-1684
    private function _getFacilityApprovalDataForView(
        \GRN_Schedule_NormalEvent $event,
        &$facilityInfoForView
    ) {
        $facilityApprovalLogic = new FacilityApprovalLogic();
        $currentStatusOfFacilities
            = $facilityApprovalLogic->getCurrentStatusOfFacilities($event);

        if (count($currentStatusOfFacilities) == 0) {
            return;
        }

        $facilityApprovalViewUtil = new FacilityApprovalViewUtil();
        foreach ($facilityInfoForView as $index => $facility) {
            if ( ! array_key_exists($facility['_id'],
                $currentStatusOfFacilities)
            ) {
                continue;
            }
            $facilityInfoForView[$index]['facilityApprovalStatus']
                = $facilityApprovalViewUtil->toCurrentStatusString($currentStatusOfFacilities[$facility['_id']]);
        }
    }

    public function getIsFromAjax()
    {
        return $this->_is_from_ajax;
    }

    public function setIsFromAjax($value)
    {
        $this->_is_from_ajax = $value;
    }

    public function getTitle()
    {
        $event = $this->getEventForView();

        return $event->detail . ' - ' . cb_msg('grn.schedule', 'GRN_SCH-45');
    }
}
