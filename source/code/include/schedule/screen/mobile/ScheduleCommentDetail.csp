<?php

namespace grn\schedule\screen\mobile;

class ScheduleCommentDetail extends MobileScheduleScreenBase
{
    public function __construct($input)
    {
        parent::__construct($input);

        $params = [
            self::ARG_EVENT       => cb_at($input, self::ARG_EVENT),
            self::ARG_BEGIN_DATE  => cb_at($input, self::ARG_BEGIN_DATE),
            self::ARG_FOLLOW_ID   => cb_at($input, self::ARG_FOLLOW_ID),
            self::ARG_USER_ID     => cb_at($input, self::ARG_USER_ID),
            self::ARG_GROUP_ID    => cb_at($input, self::ARG_GROUP_ID),
            self::ARG_REFERER_KEY => cb_at($input, self::ARG_REFERER_KEY)
        ];

        $this->getEventForView();
        if ($this->checkDeletableComment()) {
            $this->setMobileFooterBar([
                'trash' => [
                    'page'   => 'schedule/mobile/comment_delete',
                    'params' => $params
                ]
            ]);
        } else {
            $this->setMobileFooterBar();
        }
    }

    public function fetch()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $input = $this->getInput();
        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $follow_id = cb_at($input, self::ARG_FOLLOW_ID);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);

        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $date = null;
        }

        if ( ! $event_id) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $login = cb_get_login_user();

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add', 'modify', 'delete'], $dynamic_role);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        $follow = $app->getEventFollow($login, $event_id, $follow_id);

        if ($event_id != $follow['event_id']) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        require_once('grn/controller.csp');
        $user_info
            = \GRN_ControllerUtil::getUserInfoToShowUserName([$follow['creator_id']],
            $login);
        $user_info = $this->getUsersInfoType($user_info);
        $follow['creator_type'] = $user_info[$follow['creator_id']]['valid'];

        $params = [
            'event'       => $event_id,
            'bdate'       => $bdate,
            'uid'         => $user_id,
            'gid'         => $group_id,
            'referer_key' => $referer_key
        ];
        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), 'schedule/mobile/view',
            $params);
        $this->assignBreadcrumbCurrentPage($t,
            cb_msg('grn.mobile', 'comment_detail_title'));

        $t->assign('follow', $follow);
        $t->assign('user_info', $user_info);

        $t->assign('event_id', $event_id);
        $t->assign('user_id', $user_id);
        $t->assign('group_id', $group_id);
        $t->assign('bdate', $bdate);
        $t->assign('referer_key', $referer_key);

        return $t->fetch('schedule/mobile/comment_detail.tpl');
    }

    public function getTitle()
    {
        $event = $this->getEventForView();

        return $event->detail . ' - ' . cb_msg('grn.mobile',
                'comment_detail_title');
    }
}
