<?php

namespace grn\schedule\screen\mobile;

require_once('schedule/error_code.csp');

class ScheduleCommentDelete extends MobileScheduleScreenBase
{
    public function fetch()
    {
        if ( ! $this->checkDeletableComment()) {
            cb_throw_error(E_GRN_SCHD_DENYDELETE_EVENTFOLLOW);
        }

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $input = $this->getInput();
        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $follow_id = cb_at($input, self::ARG_FOLLOW_ID);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);

        $t->assign('event_id', $event_id);
        $t->assign('bdate', $bdate);
        $t->assign('follow_id', $follow_id);
        $t->assign('user_id', $user_id);
        $t->assign('group_id', $group_id);
        $t->assign('referer_key', $referer_key);

        $params = [
            self::ARG_EVENT       => $event_id,
            self::ARG_BEGIN_DATE  => $bdate,
            self::ARG_USER_ID     => $user_id,
            self::ARG_GROUP_ID    => $group_id,
            self::ARG_REFERER_KEY => $referer_key
        ];
        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), "schedule/mobile/view",
            $params);
        $this->assignBreadcrumbCurrentPage($t,
            cb_msg('grn.mobile', 'comment_delete'));

        return $t->fetch('schedule/mobile/comment_delete.tpl');
    }

    public function post($input)
    {
        if ( ! $this->checkDeletableComment()) {
            cb_throw_error(E_GRN_SCHD_DENYDELETE_EVENTFOLLOW);
        }

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        $login = cb_get_login_user();

        $event_id = cb_at($input, self::ARG_EVENT);
        $follow_id = cb_at($input, self::ARG_FOLLOW_ID);

        $app->deleteFollow($login, $event_id, $follow_id);

        //notification
        $event = $this->getEventForView();
        $tsex = new \CB_TimeStampEx();
        $notify_date = $tsex->getDate();
        $date = $event->getFirstDate($notify_date);

        if ($notify_date->compare($date) <= 0) {
            if (is_array($event->users) && count($event->users) > 0) {
                $title
                    = $this->_schedule_command_delete_follow_getNotifyTitle($event);
                $app->setNotify($event->users, $login, $event, $date, $title,
                    '', GRN_SCHEDULE_NOTIFY_FOLLOWDELETE, $tsex);
            }
            if ($event->private && is_array($event->notify_address)
                && count($event->notify_address) > 0
            ) {
                $title
                    = $this->_schedule_command_delete_follow_getNotifyTitle($event);
                $app->sendNotificationsToPublic($login, $event, $date, '',
                    $tsex, $title, false, false,
                    GRN_SCHEDULE_NOTIFY_FOLLOWDELETE);
            }
        }
    }

    private function _schedule_command_delete_follow_getNotifyTitle($event)
    {
        require_once('schedule/notification.csp');
        $util = \GRN_Schedule_Notify_Logic::getInstance();

        return $util->getNotifyTitle(html_entity_decode($event->getTitle()));
    }

    public function getTitle()
    {
        $event = $this->getEventForView();

        return $event->detail . ' - ' . cb_msg('grn.mobile', 'comment_delete');
    }
}
