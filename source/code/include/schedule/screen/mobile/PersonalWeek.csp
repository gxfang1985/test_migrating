<?php

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;
use grn\schedule\AttendanceStatusLogic;
use grn\grn\access\service\AppAccess;

class PersonalWeek extends MobileScheduleScreenBase
{

    function __construct($input)
    {
        //Func on footer
        $func = ['add' => []];
        $this->setMobileApplicationId(GRN_SCHEDULE_APPLICATION_ID);
        $this->setMobileFooterBar($func);
        parent::__construct($input);
        $this->checkArgFromInput([
            self::ARG_BEGIN_DATE,
            self::ARG_SEARCH_TEXT,
            self::ARG_USER_ID,
            self::ARG_GROUP_ID,
            self::ARG_EVENT
        ],
            $input);
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();
        $member_id = $this->getUserId();
        $group_id = $this->getGroupId();
        //$str_date = $this->getBeginDate();
        $event_id = $this->getEvent();
        $search_text = $this->getSearchText();

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $t->assign('app_name', $app->getName());

        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        //GTM-1269 Get attendance status setting;
        $attendanceStatusLogic = new AttendanceStatusLogic();
        $isEnableAttendanceStatus
            = $attendanceStatusLogic->isEnableAttendanceCheck();

        // 今日を求める
        $ts = new \CB_TimeStamp();
        $ts->unix_ts = time();
        $tsex = new \CB_TimeStampEx($ts);
        $today = $tsex->getDate();

        //$date = new \CB_Date();
        $date = $this->getBeginDate();
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        //require_once('grn/uum_util.csp');
        //$uum_util = \GRN_UumUtil::getInstance();
        $login = $uum->getLoginUser();
        $login_id = $login->getOID();

        require_once('schedule/personal_logic.csp');
        $personal_logic = \GRN_Schedule_PersonalLogic::getInstance();


        // $unit = $system_logic->getScheduleUnit();
        // $show_end_time = $personal_logic->getShowEndTime($login);
        $start_w_day = $personal_logic->getCalendarWeekStart($login);
        $hidden_private = $system_logic->getHiddenPrivate();
        $show_group = $system_logic->getShowOrganize();
        $show_holiday = $system_logic->getShowHoliday();

        $group = null;
        if ( ! $group_id) {
            $group = $uum->getUserPrimaryGroup($login_id);
            if ($group !== false) {
                $group_id = $group->getOID();
            }
        } elseif (mb_substr($group_id, 0, 1) == self::ARG_KW_F) {
            if ($group_id == self::ARG_KW_F) {
                $group = self::ARG_KW_F;
            } else {
                $group = $facility_logic->getFacilityGroup(mb_substr($group_id,
                    1));
                if ($group === false) {
                    $group_id = null;
                }
            }
        } elseif (mb_substr($group_id, 0, 1) == self::ARG_KW_M) {
            $group = $uum->getMyGroup(mb_substr($group_id, 1));
            if ( ! $group) {
                $group_id = null;
            }
        } elseif ($group_id == self::ARG_KW_R) {
            $group = 'frequent';
        } elseif ($group_id == 'virtual') {
        } elseif ($group_id == self::ARG_KW_SEARCH) {
        } elseif ($group_id == self::ARG_KW_SELECTED) {
        } else {
            $group = $uum->getGroup($group_id);
            if ( ! $group) {
                $group_id = null;
            }
        }

        $dynamic_roles = $uum->listGrantedRoles();
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_logic::getInstance();

        if (is_a($group, 'CB_Group')) {
            $access = $acc_logic->evaluateAccess($login, $group,
                [self::ARG_KW_READ], $dynamic_roles);

            if ( ! $access) {
                $group = null;
                $group_id = null;
            }
        }

        if (mb_substr($member_id, 0, 1) == 'i') {
            $member_id = self::ARG_KW_F . mb_substr($member_id, 1);
        }

        $frequent_users = null;
        $member = null;
        if ( ! $member_id && is_string($group) && $group == self::ARG_KW_F) {
            if ($system_logic->getAllowAllFacilities()) {
                $facilities = $facility_logic->getOrderedFacilityPartInfoList();
                $facilities = $acc_logic->evaluateAccessesById($login,
                    $facilities, [self::ARG_KW_READ], $dynamic_roles,
                    'facility');
                if (is_array($facilities) && count($facilities)) {
                    $first_facility = reset($facilities);
                    $member
                        = $facility_logic->getFacility($first_facility['_id']);
                    $member_id = self::ARG_KW_F . $member->getOID();
                } else {
                    $member_id = $login_id;
                    $member = $login;
                }
            } else {
                $member_id = $login_id;
                $member = $login;
            }
        } elseif ( ! $member_id && is_a($group, 'GRN_Facility_FacilityGroup')) {
            // 施設と施設グループで、厳しいほうのアクセス権にする
            $facilities = null;
            $tmp_fgroups = [$group->getOID() => $group];

            $fgroups = $acc_logic->evaluateAccessesById($login, $tmp_fgroups,
                [self::ARG_KW_READ], $dynamic_roles, 'facilitygroup');
            if (count($fgroups)) {
                $facilities
                    = $facility_logic->getGroupFacilities($group->getOID());
                $facilities = $acc_logic->evaluateAccessesById($login,
                    $facilities, [self::ARG_KW_READ], $dynamic_roles,
                    'facility');
                if (count($facilities)) {
                    $member = reset($facilities);
                    $member_id = self::ARG_KW_F . $member->getOID();
                } else {
                    $member_id = $login_id;
                    $member = $login;
                }
            } else {
                $member_id = $login_id;
                $member = $login;
            }
        } elseif ( ! $member_id && is_a($group, 'CB_Group')) {
            $format = 'col_user = ' . $login_id;
            $users = $uum->getGroupUsers($group->getOID(), 0, -1,
                'tab_cb_user.col_position', $format,
                GRN_SCHEDULE_APPLICATION_ID);
            // 自分が組織にいるかどうかチェック
            if ( ! is_array($users) || count($users) == 0) {
                // 組織スケジュールが表示できる場合は組織
                if ($show_group) {
                    $member = $group;
                    $member_id = 'g' . $group->getOID();
                } else {
                    $users = $uum->getGroupUsers($group->getOID(), 0, -1, null,
                        null, GRN_SCHEDULE_APPLICATION_ID);
                    $users = $acc_logic->evaluateAccesses($login, $users,
                        [self::ARG_KW_READ], $dynamic_roles, 'user');
                    // 自分がいない場合はリストの最初のユーザーを持ってくる
                    if (count($users) > 0) {
                        $member = reset($users);
                        $member_id = $member->getOID();
                    } // 組織スケジュールを表示する場合
                    else {
                        $member_id = $login_id;
                        $member = $login;
                    }
                }
            } else {
                $member_id = $login_id;
                $member = $login;
            }
        } elseif ( ! $member_id && is_a($group, 'GRN_MyGroup')) {
            $format = 'col_user = ' . $login_id;
            $users = $uum->getMyGroupUsers($group->getOID(), 0, -1,
                'col_list_index, _id', $format, null,
                GRN_SCHEDULE_APPLICATION_ID);
            // 自分が組織にいるかどうかチェック
            if (count($users) == 0) {
                // 自分がいない場合はリストの最初のユーザーを持ってくる
                $users = $uum->getMyGroupUsers($group->getOID(), 0, -1, null,
                    null, null, GRN_SCHEDULE_APPLICATION_ID);
                $users = $acc_logic->evaluateAccesses($login, $users,
                    [self::ARG_KW_READ], $dynamic_roles, 'user');
                if (count($users) > 0) {
                    $member = reset($users);
                    $member_id = $member->getOID();
                } // アクセス権でユーザーがいなくなった場合
                else {
                    $member_id = $login_id;
                    $member = $login;
                }
            } else {
                $member_id = $login_id;
                $member = $login;
            }
        } elseif ( ! $member_id && is_string($group) && $group == 'frequent') {
            require_once('grn/uum_util.csp');
            $frequent_users = $uum->getFrequentUsersInfo($login_id, -1, null,
                GRN_SCHEDULE_APPLICATION_ID);
            $frequent_users = $acc_logic->evaluateAccessesById($login,
                $frequent_users, [self::ARG_KW_READ], $dynamic_roles, 'user');
            $b_found = false;
            // よく利用するユーザーに自分がいるか
            foreach (array_keys($frequent_users) as $key) {
                if ($key == $login_id) {
                    $b_found = true;
                    break;
                }
            }

            // ログインユーザーがいる場合
            if ($b_found || 0 == count($frequent_users)) {
                $member_id = $login_id;
                $member = $login;
            } else {
                $member_info = reset($frequent_users);
                $member = $uum->getUser($member_info['_id']);
                $member_id = $member_info['_id'];
            }
        } elseif ( ! $member_id) {
            $member_id = $login_id;
            $member = $login;
        } // 施設
        elseif (mb_substr($member_id, 0, 1) == self::ARG_KW_F) {
            $member = &$facility_logic->getFacility(mb_substr($member_id, 1));
            if ($member === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
            }
        } // 組織
        elseif (mb_substr($member_id, 0, 1) == 'g') {
            $member = $uum->getGroup(mb_substr($member_id, 1));
            if ( ! $member) {
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);
            }
        } elseif (mb_substr($member_id, 0, 1) == 'u') {
            $member = $uum->getUser(mb_substr($member_id, 1));
            if ( ! $member) {
                cb_throw_error(E_GRN_USER_NOT_FOUND);
            }

            $member_id = $member->getOID();
        } // 人
        else {
            $member = $uum->getUser($member_id);
            if ( ! $member) {
                cb_throw_error(E_GRN_USER_NOT_FOUND);
            }
        }

// 組み合わせが悪い場合は、ユーザーを優先する
        if (is_a($member, 'CB_User') && is_a($group, 'CB_Group')) {
            $format = 'col_user = ' . $member->getOID();
            $users = $uum->getGroupUsers($group->getOID(), 0, -1,
                'tab_cb_user.col_position', $format,
                GRN_SCHEDULE_APPLICATION_ID);
            if ( ! $users) {
                $group = null;
                $group_id = null;
            }
        } elseif (is_a($member, 'CB_User') && is_a($group, 'GRN_MyGroup')) {
            $format = 'col_user = ' . $member->getOID();
            $users = $uum->getMyGroupUsers($group->getOID(), 0, -1,
                'col_list_index, _id', $format, null,
                GRN_SCHEDULE_APPLICATION_ID);
            if ( ! $users) {
                $group = null;
                $group_id = null;
            }
        } elseif (is_a($group, 'CB_Group') && is_a($member, 'CB_Group')) {
            if ($group->getOID() != $member->getOID()) {
                $group = null;
                $group_id = null;
            }
        } elseif (is_string($group) && $group == 'frequent'
                  && is_a($member, 'CB_User')
        ) {
            if (is_null($frequent_users)) {
                require_once('grn/uum_util.csp');
                $frequent_users = $uum->getFrequentUsersInfo($login_id, -1,
                    null, GRN_SCHEDULE_APPLICATION_ID);
                $frequent_users = $acc_logic->evaluateAccessesById($login,
                    $frequent_users, [self::ARG_KW_READ], $dynamic_roles,
                    'user');
            }
            $b_found = false;
            // よく利用するユーザーに自分がいるか
            foreach (array_keys($frequent_users) as $key) {
                if ($key == $member_id) {
                    $b_found = true;
                    break;
                }
            }
            if ( ! $b_found) {
                $group = null;
                $group_id = null;
            }
        } elseif (is_a($group, 'GRN_Facility_FacilityGroup')
                  && is_a($member, 'GRN_Facility_Facility')
        ) {
            $facilities = $facility_logic->getGroupFacilities($group->getOID());
            if ( ! array_key_exists($member->getOID(), $facilities)) {
                $group = null;
                $group_id = null;
            }
        } // グループIDとユーザーIDの組み合わせがぜんぜんだめ
        elseif ((is_a($member, 'CB_User') || is_a($member, 'CB_Group'))
                && (is_a($group, 'GRN_Facility_FacilityGroup')
                    || $group == self::ARG_KW_F)
        ) {
            $group = null;
            $group_id = null;
        } elseif (is_a($member, 'GRN_Facility_Facility')
                  && ( ! is_a($group, 'GRN_Facility_FacilityGroup')
                       && ($group != self::ARG_KW_F))
        ) {
            $group = null;
            $group_id = null;
        }

// 表示するものにアクセス権があるかどうかのチェック
        if (is_object($member)
            && ( ! is_a($member, 'CB_User')
                 || ($member->getOID() != $login_id))
        ) {
            if (is_a($member, 'GRN_Facility_Facility')) {
                // 施設のアクセス権はグループをたどって評価する
                $tmp_array = [$member->getOID() => $member];
                $access = $acc_logic->evaluateAccessesById($login,
                    $tmp_array, [self::ARG_KW_READ], $dynamic_roles,
                    'facility');
            } else {
                $access = $acc_logic->evaluateAccess($login, $member,
                    [self::ARG_KW_READ], $dynamic_roles);
            }

            if ( ! $access) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
            }
        }

        $display_login = false;
        if (is_a($member, "CB_User") && $member_id === $login_id) {
            $display_login = true;
        }

        $set_hour = 0;
        $end_hour = 0;
        $personal_logic->getViewHour($login, $set_hour, $end_hour);

// ユーザーリストに表示するユーザー名の取得
        require_once('schedule/view_util.csp');

        $util = \GRN_Schedule_View_Util::getInstance();
        require_once('schedule/TodoEventCreator.csp');
        $todo_creator
            = \grn\schedule\TodoEventCreator::createWeekEvent($this->getInput());

// 日付の準備
        $week = [];
        $dateex = new \CB_DateEx($date);
        $get_settime = $dateex;
        $get_endtime = $dateex;

        for ($i = 0; $i < 7; ++$i) {
            $week[] = [
                self::ARG_KW_FORMAT => $dateex->format(),
                self::ARG_KW_TYPE   => $util->getDayType($dateex),
                self::ARG_KW_DATE   => $dateex,
                'get_settime'       => $get_settime,
                'get_endtime'       => $get_endtime
            ];
            $dateex = clone $dateex;
            $dateex->moveDays(1);
            $get_settime = clone $get_settime;
            $get_settime->moveDays(1);
            $get_endtime = clone $get_endtime;
            $get_endtime->moveDays(1);
        }

        require_once('grn/calendar.csp');
        $calendar_service = \GRN_CalendarService::getInstance();
        $calendars
            = $calendar_service->getDaysInfo($week[0][self::ARG_KW_DATE],
            $week[6][self::ARG_KW_DATE], $login, null, false);

        foreach ($week as $key => $week_date) {
            if ($util->isWorkday($week_date[self::ARG_KW_DATE], $calendars,
                $login)
            ) {
                $week[$key][self::ARG_KW_TYPE] = 's_date_workday';
            } elseif ($show_holiday) {
                if ($util->isHoliday($week_date[self::ARG_KW_DATE],
                    $calendars)
                ) {
                    $week[$key][self::ARG_KW_TYPE] = 's_date_holiday';
                }
            }
        }

        //$shared_calendar = $calendar_service->getDaysInfoFromSharedCalendar($week[0][self::ARG_KW_DATE], $week[6][self::ARG_KW_DATE], $login);
        // $calendars = array_merge_recursive($calendars, $shared_calendar);//Not using share calendar

// カレンダーから余計なデータを削除
        if ( ! is_a($member, 'CB_User') || $member->getOID() != $login_id) {
            foreach (array_keys($calendars) as $key1) {
                foreach (array_keys($calendars[$key1]) as $key2) {
                    // 個人データの削除
                    if (($calendars[$key1][$key2][self::ARG_KW_TYPE]
                         == GRN_CALENDAR_TYPE_MEMORIALDAY)
                        || ($calendars[$key1][$key2][self::ARG_KW_TYPE]
                            == GRN_CALENDAR_TYPE_USER_MEMO)
                    ) {
                        unset($calendars[$key1][$key2]);
                        continue;
                    }
                    if ( ! $show_holiday) {
                        if ($calendars[$key1][$key2][self::ARG_KW_TYPE]
                            == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                        ) {
                            unset($calendars[$key1][$key2]);
                        }
                    }
                }
            }
        } elseif ( ! $show_holiday) {
            foreach (array_keys($calendars) as $key1) {
                foreach (array_keys($calendars[$key1]) as $key2) {
                    // 祝日以外は削除
                    if ($calendars[$key1][$key2][self::ARG_KW_TYPE]
                        == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                    ) {
                        unset($calendars[$key1][$key2]);
                    }
                }
            }
        }

        if (is_a($member, 'GRN_Facility_Facility')) {
            //$title_type = $facility_logic->getFacilityTitle();
            $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL;
        } else {
            $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
                       + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;
        }
        $schedule_event = [];
        $banner_events = [];
        $counter = 0;
        $work_date = new \CB_DateEx($today); //do not use
        if (is_object($member)) {
            $unread_events_id = [];
            if ($member_id == $login_id) {
                $unread_event = [];
                $ts = new \CB_TimeStampEx();
                $tsE = new \CB_TimeStampEx();
                $ts->setDateTime($week[0]['get_settime']);
                $tsE->setDateTime($week[6]['get_endtime']);
                //$tsE->add(86400);
                $unread_event = $this->getUnreadEvent($login, $ts, $tsE);
                if (isset($unread_event)) {
                    foreach ($unread_event as $key => $value) {
                        $unread_events_id[$value['unique_id']]
                            = $value['org_data']['bdate'];
                    }
                }
                unset($unread_event);
            }
            $events = $app->getEventsForWeek($member, $week[0]['get_settime'],
                $week[6]['get_endtime'], $login, $sc_type, $hidden_private,
                $week, true, $isEnableAttendanceStatus);
            foreach (array_keys($week) as $date_key) {
                $date_info = &$week[$date_key];
                $counter++;
                $day_event = [];

                $day_event[self::ARG_KW_DATE_TYPE]
                    = $date_info[self::ARG_KW_TYPE];
                $day_event[self::ARG_KW_DATE] = $date_info[self::ARG_KW_FORMAT];
                if (array_key_exists($day_event[self::ARG_KW_DATE],
                    $calendars)
                ) {
                    $day_event['calendar']
                        = $calendars[$day_event[self::ARG_KW_DATE]];
                }
                $day_event['event'] = [];

                if (array_key_exists($date_info[self::ARG_KW_FORMAT],
                    $events[self::ARG_KW_ALLDAY])
                ) {
                    foreach (
                        $events[self::ARG_KW_ALLDAY][$date_info[self::ARG_KW_FORMAT]]
                        as $event_allday
                    ) {
                        $event = &$event_allday;
                        $temp = [];

                        $this->convertAttributeAllDay($temp, $event);
                        //$temp[self::ARG_KW_TYPE] = 'normal';

                        if (array_key_exists($event[self::ARG_KW_ID],
                            $unread_events_id)
                        ) {
                            $temp['unread'] = true;
                        }
                        //GTM-1631,
                        //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                            $temp, $event)
                        ) {
                            continue;
                        }
                        $day_event['event'][] = $temp;
                    }
                }
                if (array_key_exists($date_info[self::ARG_KW_FORMAT],
                    $events['normal'])
                ) {
                    require_once('schedule/eventfactory.csp');
                    $factory = \GRN_Schedule_EventFactory::getInstance();
                    foreach (
                        $events['normal'][$date_info[self::ARG_KW_FORMAT]] as
                        $event_normal
                    ) {
                        $event = &$event_normal;

                        $temp = [];

                        $this->convertAttributes($temp, $event, $date_info);
                        $app->addFacilityNameToEventTitle($event, $factory,
                            $event[self::ARG_KW_ID], null, true);
                        if (array_key_exists(self::ARG_KW_EVENT_F_NAME,
                            $event)
                        ) {
                            $temp[self::ARG_KW_EVENT_F_NAME]
                                = $event[self::ARG_KW_EVENT_F_NAME];
                        }

                        if (array_key_exists($event[self::ARG_KW_ID],
                            $unread_events_id)
                        ) {
                            $temp['unread'] = true;
                        }
                        //GTM-1631,
                        //Using attendance check function and the end user confirmed absent, this event not show in schedule list.
                        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                            $temp, $event)
                        ) {
                            continue;
                        }

                        $day_event['event'][] = $temp;
                    }
                }

                // Get ToDos
                $day_event['todos'] = [];
                if ($display_login) {
                    $day_event['todos'] = $util->getDayToDoListView($login,
                        $date_info['get_settime']);
                }

                // スケジュールの入れ込み
                $schedule_event[] = $day_event;

                // Banner
                $day_banner_event = [];
                foreach ($events['banner'] as $banner_event) {
                    if ($app->compareDate($date_info[self::ARG_KW_DATE],
                            $banner_event['setdate']) >= 0
                        && $app->compareDate($date_info[self::ARG_KW_DATE],
                            $banner_event['enddate']) <= 0
                    ) {
                        if (array_key_exists($banner_event[self::ARG_KW_ID],
                            $unread_events_id)
                        ) {
                            $banner_event['unread'] = true;
                        }
                        $temp = [];
                        $this->convertAttributes($temp, $banner_event,
                            $date_info);
                        $day_banner_event[] = $temp; //$banner_event;
                    }
                }
                $banner_events[] = $day_banner_event;
            }
            $todo_creator->inputSharedTodoInEvents($schedule_event);

            $access = null;
            if (is_a($member, 'CB_User') && $login_id == $member_id) {
                $access = [self::ARG_KW_READ => '1', self::ARG_KW_ADD => '1'];
            } else {
                // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わない
                $user_groups = $uum->getUserGroupsInfo($login_id, true);
                $user_roles = $uum->getUserRolesInfo($login_id, true);
                // 施設だったら施設グループと合わせて評価して、厳しいほうにする
                if (is_a($member, 'GRN_Facility_Facility')) {
                    $affiliation_group
                        = $facility_logic->getFacilityAffiliationGroup($member->getOID());
                    if ( ! $affiliation_group) {
                        // 施設グループに所属していない
                        $access = $acc_logic->getEvaluateAccessList($login,
                            $member,
                            [self::ARG_KW_READ, self::ARG_KW_ADD],
                            'read_add',
                            $dynamic_roles,
                            $user_groups,
                            $user_roles);

                    } else {
                        $affiliation_groups
                            = [$affiliation_group->getOID() => $affiliation_group];

                        $accesses
                            = $acc_logic->getEvaluateAccessesListById($login,
                            $affiliation_groups,
                            'facilitygroup',
                            [self::ARG_KW_READ, self::ARG_KW_ADD],
                            $dynamic_roles);

                        $access_group = $accesses[$affiliation_group->getOID()];

                        $access = $acc_logic->getEvaluateAccessList($login,
                            $member,
                            [self::ARG_KW_READ, self::ARG_KW_ADD],
                            'read_add',
                            $dynamic_roles,
                            $user_groups,
                            $user_roles);
                        foreach ([self::ARG_KW_READ, self::ARG_KW_ADD] as $auth) {
                            if ($access_group[$auth] == GRN_SCHD_ACCESS_DENY) {
                                $access[$auth] = GRN_SCHD_ACCESS_DENY;
                            }
                        }
                    }
                } else {
                    $access = $acc_logic->getEvaluateAccessList($login,
                        $member,
                        [self::ARG_KW_READ, self::ARG_KW_ADD],
                        'read_add',
                        $dynamic_roles,
                        $user_groups,
                        $user_roles);
                }
            }


            $users_event = [
                self::ARG_KW_USER_ID        => $member_id,
                'group_id'                  => $group_id,
                self::ARG_KW_SCHEDULE_EVENT => $schedule_event,
                'banner_event'              => $banner_events,
                'access'                    => $access,
                'user_type'                 => is_a($member,
                    'GRN_Facility_Facility') ? 'facility' : '',
            ];
            /*/add facility time info for each event
            foreach ($users_event[self::ARG_KW_SCHEDULE_EVENT] as $key => $event_normal) {
                $events = & $users_event[self::ARG_KW_SCHEDULE_EVENT][$key]; // &$event_normal;
                foreach ($events['event'] as $key1 => $event_i) {
                    $event = & $events['event'][$key1];
                    if (array_key_exists(self::ARG_KW_PRIVATE, $event) === TRUE && $event[self::ARG_KW_PRIVATE] === TRUE)
                        continue;
                    $str_tmp = $facility_logic->getDataTitle($event[self::ARG_KW_ID]);
                    //$event[self::ARG_KW_DATA] .= $str_tmp;
                    $event['faci_items'] = $str_tmp;
                }
            }
do not using this setting*/
            /*add new for header of user/facility */
            // User icon setting
            if (mb_substr($member_id, 0, 1) == self::ARG_KW_F) {
                $users_event['facility_title']
                    = $member->get(self::ARG_KW_NAME);
            }
            if (mb_substr($member_id, 0, 1) == 'g') {

            } else {
                $imageIcon = \GRN_ControllerUtil::getUserIconFormat($login);
                $t->assign('imageIcon', $imageIcon);

                $users_info
                    = \GRN_ControllerUtil::getUserInfoToShowUserName([$member_id],
                    $login);
                // for user image icon
                if ($imageIcon) {
                    $users_info
                        = \GRN_ControllerUtil::addPhotoUrlForUsersInfo($users_info,
                        \GRN_ControllerUtil::ICON_SIZE_SMALL);
                    $t->assign('iconSize',
                        \GRN_ControllerUtil::ICON_SIZE_SMALL);
                }
                $t->assign('users_info', $users_info);
            }
            $t->assign(self::ARG_KW_USER_ID, $member_id);
            $t->assign('login_id', $login_id);
            $t->assign('schedule', $users_event);

        }

        $do_not_have_using_privilege = 0;
        if (is_numeric($member_id)) {
            if ( ! AppAccess::isAppAvailableInternalAccess(GRN_SCHEDULE_APPLICATION_ID,
                $member_id)
            ) {
                $do_not_have_using_privilege = 1;
            }
        }
        $t->assign('do_not_have_using_privilege', $do_not_have_using_privilege);
        $t->assign('schedule_params', [
            'set_hour'            => $set_hour,
            'end_hour'            => $end_hour,
            'start_date'          => $week[0][self::ARG_KW_FORMAT],
            self::ARG_KW_END_DATE => $week[6][self::ARG_KW_FORMAT]
        ]);

        $t->assign('short_date_format',
            \CB_LocaleManager::getCurrentShortDateFormat($login_id));

// 運用管理
        require_once('schedule/facility_privilege.csp');
        $privilege_logic = \GRN_Facility_Privilege_Logic::getInstance();
        $t->assign('management', $privilege_logic->hasPrivilege($login));


        $prev_week = $util->getPrevWeekDate($week[0][self::ARG_KW_DATE],
            $start_w_day);
        $next_week = $util->getNextWeekDate($week[0][self::ARG_KW_DATE],
            $start_w_day);

        $t->assign('week_start', $week[0][self::ARG_KW_DATE]);
        $t->assign('week_end', $week[6][self::ARG_KW_DATE]);
        $t->assign('today', $today->format());

        $t->assign('bdate_prevweek', $prev_week->format());
        $t->assign('bdate_nextweek', $next_week->format());

        $t->assign(self::ARG_KW_USER_ID, $member_id);
        $t->assign('group_id', $group_id);
        $t->assign('event_id', $event_id);
        $t->assign('search_text',
            $search_text); //Assign for group day view in the case click to changed from personal week to group day

        $t->assign('place_holder',
            cb_msg('grn.schedule', 'user_facility_place_holder'));
        $t->assign('bdate', $week[0][self::ARG_KW_FORMAT]);
        $t->assign('access_plugin', [
            self::ARG_KW_NAME => 'schedule',
            'params'          => ['action' => [self::ARG_KW_READ]]
        ]);

        require('../_select_date_schedule.csp');

// page title
        $page_title = cb_msg('grn.schedule', 'GRN_SCH-982');
        $t->assign('page_title', $page_title);

        $referer = [];
        $referer_params = [
            self::ARG_BEGIN_DATE,
            self::ARG_SEARCH_TEXT,
            self::ARG_USER_ID,
            self::ARG_GROUP_ID,
            self::ARG_EVENT
        ];
        foreach ($referer_params as $key) {
            if (array_key_exists($key, $this->getInput())) {
                $referer[$key] = $this->getInput()[$key];
            }
        }
        $referer['page'] = 'schedule/mobile/personal_week';
        $referer[self::ARG_KW_NAME] = $page_title;
        require_once('fw/session_manager.csp');
        $session_manager = \CB_SessionManager::getInstance();
        $session = $session_manager->getSession('schedule.referer');
        $session_values = $session->getValues();
        $unset_keys = [];
        foreach ($session_values as $key => $value) {
            if (isset($value['page']) && $value['page'] == $referer['page']) {
                $unset_keys[] = $key;
            }
        }
        foreach ($unset_keys as $key) {
            $session->unset_by($key);
        }
        $referer_key = md5(uniqid(rand(), true));
        $session->set($referer_key, $referer);
        $t->assign(self::ARG_KW_REF, $referer_key);

// ナビカレンダーを表示する・隠す設定
        $session_navi_calendar
            = $session_manager->getSession('grn.schedule.navi_calendar');
        $navi_cal_display_flag
            = $session_navi_calendar->get('navi_cal_display_flag');
        if ($navi_cal_display_flag == null || $navi_cal_display_flag == false) {
            $navi_cal_display_flag = false;
        } else {
            $navi_cal_display_flag = true;
        }
        $t->assign('navi_cal_display_flag', $navi_cal_display_flag);
//GRN2-2286
        $show_absent_schedule
            = $personal_logic->getShowHideAbsentSchedule($login,
            'personal_week');
        $t->assign('show_absent_schedule', $show_absent_schedule);
//GRN2-2286
        $t->assign('show_todos',
            $personal_logic->getShowToDos($login, 'personal_week'));
// Smarty実行
        $t->display(cb_get_pagename() . '.tpl');

    }

    public function getTitle()
    {
        return cb_msg('grn.schedule', 'GRN_SCH-982');
    }
}
