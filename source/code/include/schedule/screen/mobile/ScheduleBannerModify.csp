<?php

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;
use grn\grn\JSONResponse;
use grn\schedule\ScheduleMemberLogic;

class ScheduleBannerModify extends MobileScheduleScreenBase
{
    public function fetch()
    {
        $input = $this->getInput();
        $parameter = $this->getPostParams();
        $this->checkArgFromInput($parameter, $input);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $login = $this->getLoginUser();
        $login_id = $this->getLoginUserId();

        // get menu
        $menu = $this->getMenus();
        $t->assign('menus', $menu);

        $user_id = $this->getUserId();
        $event_id = $this->getEvent();
        $bdate = $this->getBeginDate();

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        $event = $app->getEvent($login, $event_id, $bdate);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_roles = $this->getListGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'modify'], $dynamic_roles);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
        }

        $t->assign('show_organize', $this->getShowOrganize());

        $schedule_event = [
            'event_id'     => $event_id,
            'type'         => 'normal',
            'title'        => $event->detail,
            'memo'         => $event->memo,
            'timezone'     => $event->timezone,
            'end_timezone' => $event->end_timezone
        ];
        if ($event->menu !== false && $event->menu !== ''
            && ! is_null($event->menu)
        ) {
            if ($event->menucolor !== false && $event->menucolor !== ''
                && ! is_null($event->menucolor)
            ) {
                $schedule_event['selectmenu'] = $event->menu . ';#'
                                                . $event->menucolor;
            } else {
                $schedule_event['selectmenu'] = $event->menu;
            }
        }

        // 時間の設定
        $schedule_event['start_date'] = $event->setdate;
        $schedule_event['end_date'] = $event->enddate;

        // 参加者
        require_once('schedule/view_util.csp');
        $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                      ->getAttendeesRenderFromEvent($event);

        //GTM-1136
        $allow_file_attachment = $this->getAllowFileAttachment();
        $t->assign('allow_file_attachment', $allow_file_attachment);
        if ($allow_file_attachment) {
            $allow_file_attachment = true;

            //generate upload ticket
            include('grn/_upload_prepend.csp');

            require_once('schedule/file.csp');
            $fm = \GRN_Schedule_FileManager::getInstance();
            $files = $fm->getFiles($event_id);

            $tmp_key = grn_get_temporary_key();
            $t->assign('tmp_key', $tmp_key);

            $schedule_event['attached_files']
                = grn_init_attached_file(cb_get_pagename() . $tmp_key, $files,
                true, 'schedule');
        } else {
            $allow_file_attachment = false;
        }
        $t->assign('allow_file_attachment', $allow_file_attachment);
//End GTM-1136

        $start_date = new \CB_DateEx($schedule_event['start_date']);
        $t->assign('start_date', $start_date->format());
        $end_date = new \CB_DateEx($schedule_event['end_date']);
        $t->assign('end_date', $end_date->format());

        require_once("grn/JSONResponse.csp");
        $json = \grn\grn\JSONResponse::create();

        $selected_users_sUID = isset($schedule_event['users'])
            ? $schedule_event['users'] : [];
        $selected_users_sUID
            = $json->encode(['list' => array_values($selected_users_sUID)]);
        $t->assign('selected_users_sUID', $selected_users_sUID);

        $t->assign('schedule_event', $schedule_event);

        $t->assign('user_id', $user_id);
        $t->assign('group_id', $this->getGroupId());
        $t->assign('bdate', $bdate->format());

        // page title
        $page_title = grn_get_current_page_display_name();

        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $t->assign('referer_key', $referer_key);

        $this->assignBreadcrumbUpperPage($t,
            cb_msg('grn.mobile', 'detail_title'), 'schedule/mobile/view', [
                self::ARG_EVENT       => $event_id,
                self::ARG_BEGIN_DATE  => $bdate->format(),
                self::ARG_REFERER_KEY => $referer_key
            ]);
        $this->assignBreadcrumbCurrentPage($t, $page_title);

        $t->assign('page_title', $page_title);

        $page_name = cb_get_pagename();
        $t->assign('page_name', $page_name);

        $t->assign('add_plugin', [
            'name'   => 'schedule',
            'params' => [
                'action'       => ['read', 'add', 'modify'],
                'lax_evaluate' => true,
                'session_name' => cb_get_pagename()
            ]
        ]);
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));

        return $t->fetch('schedule/mobile/banner_modify.tpl');
    }

    public function getTitle()
    {
        return grn_get_page_display_name('schedule/mobile/banner_modify');
    }

    public function getRemoveFooter()
    {
        return true;
    }
}
