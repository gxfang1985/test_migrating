<?php

namespace grn\schedule\screen\mobile;

use grn\grn\Validate;
use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\schedule\ScheduleMemberLogic;

class ScheduleRepeatAdd extends MobileScheduleScreenBase
{
    public function fetch()
    {
        $input = $this->getInput();

        require_once('grn/multi_select_utility.csp');
        $input = grn_deploy_selected_users('selected_users_sUID', 'sUID',
            $input);
        $input = grn_deploy_selected_users('selected_users_p_sUID', 'p_sUID',
            $input);
        $input = grn_deploy_selected_users('sITEM', 'sITEM', $input);

        $parameter = $this->getPostParams();
        $this->checkArgFromInput($parameter, $input);

        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $login = $this->getLoginUser();

        // get menu
        $menu = $this->getMenus();
        $t->assign('menus', $menu);

        $this->setMemberSchedule();

        $user_id = $this->getUserId();

        $this->checkAccessSchedule();

        require_once('schedule/netmeeting_system_logic.csp');
        $netmeeting_system_logic = \GRN_Netmeeting_SystemLogic::getInstance();
        $netmeeting_system_available
            = $netmeeting_system_logic->getNetmeetingAvailable();

        $allow_all_facilities = $this->getAllowAllFacilities();
        $t->assign('allow_all_facilities', $allow_all_facilities);

        $isAllowedRole = ScheduleMemberLogic::getInstance()->isAllowedRole();
        $t->assign('isAllowedRole', $isAllowedRole);

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        $t->assign('use_private', $this->getUsePrivate());
        $t->assign('minute_interval', $this->getScheduleUnit());
        $t->assign('show_organize', $this->getShowOrganize());
        $t->assign('show_group_role', ScheduleMemberLogic::getInstance()
                                                         ->isAllowSettingGroupRoleToWatchers());
        $repeat_limit = $this->getRepeatLimit();
        $repeat_limit = $repeat_limit < 12
            ?
            cb_msg('grn.schedule', 'repeatlimit_month',
                ['limit' => $repeat_limit])
            :
            cb_msg('grn.schedule', 'repeatlimit_year', ['limit' => 1]);
        $t->assign('repeat_limit', $repeat_limit);

        // 必要なパラメータの設定
        $schedule_event = [];
        //GTM-103
        $schedule_event['selectmenu'] = '';
        $schedule_event['event_menu_color'] = '';
        //End GTM-103
        $schedule_event['title'] = '';
        $schedule_event['memo'] = '';
        $schedule_event['start_date'] = $this->getBeginDate();

        require_once('fw/date.csp');
        $limit_date = new \CB_DateEx($this->getBeginDate());
        $limit_date->moveMonths(1);
        $limit_date->moveDays(-1);
        $schedule_event['end_date'] = &$limit_date;

        $schedule_event['start_time'] = null;
        $schedule_event['end_time'] = null;

        $date = $this->getBeginDate();
        $schedule_event['wday'] = cb_get_day_of_week($date->year,
            $date->month, $date->day);
        $schedule_event['day'] = $date->day;
        $schedule_event['private_setting'] = $this->getDefaultPrivateSet();

        require_once('fw/i18n.csp');
        $current_timezone = \CB_I18N::getInstance()
                                    ->getCurrentTimezone();
        $schedule_event['timezone'] = $current_timezone;
        $schedule_event['end_timezone'] = $current_timezone;

        require_once('grn/controller.csp');
        $member = $this->getMember();
        if (is_a($member, 'CB_User')) {
            $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                          ->getDisplayMember($member,
                                                              true);
        } elseif (is_a($member, 'CB_Group')) {
            $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                          ->getDisplayMember($member,
                                                              true);
        } elseif (is_a($member, 'GRN_Facility_Facility')) {
            require_once('schedule/facility_privilege.csp');
            $priv = \GRN_Facility_Privilege_Logic::getInstance();
            $facilitiesSetting
                = $facility_logic->getSettingsOfFacilities([$member->getOID()],
                ['approval', 'regulary']);
            // GTM-1681
            if (($facilitiesSetting[$member->getOID()]['regulary']
                 || $priv->hasPrivilegeOfFacility($login,
                        $facility_logic->getFacility($member->getOID())))
                && ! $facilitiesSetting[$member->getOID()]['approval']
            ) {
                $schedule_event['facilities']
                    = $this->getInformationOfFacilityForMobileView([$member->getOID()],
                    $facilitiesSetting);
            } else {
                $schedule_event['facilities'] = [];
            }
        }

        if ($this->getTab()) {
            $schedule_event['timezone'] = $this->getTimezone()
                ? $this->getTimezone() : $schedule_event['timezone'];
            $schedule_event['end_timezone'] = $this->getEndTimezone()
                ? $this->getEndTimezone() : $schedule_event['timezone'];
            $schedule_event['selectmenu'] = $this->getSelectMenu($menu,
                $this->getMenu());
            //GTM-103
            $schedule_event['event_menu_color'] = $this->getEventMenuColor();
            //End GTM-103
            $schedule_event['title'] = $this->getScheduleTitle();
            $schedule_event['memo'] = $this->getMemo();

            if ( ! is_null($this->getPrivate())) {
                switch ($this->getPrivate()) {
                    case 1:
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_PRIVATE;
                        break;
                    case 2:
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_MANAGED;
                        $p_sUID = array_key_exists('p_sUID', $input)
                            ? $input['p_sUID'] : null;
                        if (is_array($p_sUID) && count($p_sUID)) {
                            $schedule_event['notify_address']
                                = ScheduleMemberLogic::getInstance()
                                                     ->getNotifyAddressRenderFromParam($p_sUID,
                                                         true);
                        }
                        break;
                    default:
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_PUBLIC;
                }
            }

            require_once('schedule/view_util.csp');
            $util = \GRN_Schedule_View_Util::getInstance();

            if ($this->getTab() == 'add') {
                $start_hour = $this->getStartHour();
                $start_minute = $this->getStartMinute();
                $end_hour = $this->getEndHour();
                $end_minute = $this->getEndMinute();

                // 時間だけ
                $schedule_event['start_time']
                    = $util->createDateTimeFromParameters(null, null, null,
                    $start_hour, $start_minute);
                $schedule_event['end_time']
                    = $util->createDateTimeFromParameters(null, null, null,
                    $end_hour, $end_minute);
            }
            // 参加者
            $sUID = array_key_exists('sUID', $input)
                ? $input['sUID'] : [];
            $schedule_event["users"] = ScheduleMemberLogic::getInstance()
                                                          ->getAttendeesRenderFromParam($sUID,
                                                              true, false);

            // 施設
            $s_faid = $this->getSItem();
            if (is_array($s_faid) && count($s_faid) > 0) {
                $facilities = [];
                require_once('schedule/facility_privilege.csp');
                $priv = \GRN_Facility_Privilege_Logic::getInstance();
                $facilitiesSetting
                    = $facility_logic->getSettingsOfFacilities($s_faid,
                    ['approval', 'regulary']);
                foreach ($s_faid as $faid) {
                    if (is_numeric($faid)) {
                        $facility_tmp = $facility_logic->getFacility($faid);
                        if ( ! $facilitiesSetting[$faid]['regulary']
                             && ! $priv->hasPrivilegeOfFacility($login,
                                $facility_tmp)
                        ) {
                            continue;
                        }
                        if (($netmeeting_system_available == 1)
                            && ($facility_tmp->get('netmeeting_available') == 1)
                        ) {
                            continue;
                        }
                        // GTM-1681
                        if ($facilitiesSetting[$faid]['approval']) {
                            continue;
                        }
                        // end GTM-1681
                        $facilities = array_merge($facilities,
                            $this->getInformationOfFacilityForMobileView([$faid],
                                $facilitiesSetting));
                    }
                }
                $schedule_event['facilities'] = $facilities;
            }

        } elseif (($event_id = $this->getEvent())) {
            require_once('schedule/application.csp');
            $app = \GRN_Schedule_Application::getInstance();
            // 再利用登録の場合
            $new_entry = $this->getNew();
            $event = $app->getEvent($login, $event_id,
                $this->getBeginDate());
            // イベントがある場合は、そのイベントを利用して初期値を設定する
            if ($event && ! $new_entry) {
                $schedule_event['timezone'] = $event->timezone;
                $schedule_event['end_timezone'] = isset($event->end_timezone)
                    ? $event->end_timezone : $event->timezone;

                if ($event->menu !== false && $event->menu !== ''
                    && ! is_null($event->menu)
                ) {
                    if ($event->menucolor !== false && $event->menucolor !== ''
                        && ! is_null($event->menucolor)
                    ) {
                        $schedule_event['selectmenu'] = $event->menu . ';#'
                                                        . $event->menucolor;
                    } else {
                        $schedule_event['selectmenu'] = $event->menu;
                    }
                }
                $schedule_event['menucolor'] = $event->menucolor;
                $schedule_event['title'] = $event->detail;
                $schedule_event['start_date'] = $event->setdate;
                $schedule_event['end_date'] = $event->enddate;
                $schedule_event['start_time'] = $event->settime;
                $schedule_event['end_time'] = $event->endtime;
                $schedule_event['memo'] = $event->memo;
                $schedule_event['type'] = $event->repeat_type;
                $schedule_event['wday'] = $event->wday;
                $schedule_event['day'] = $event->day;

                if ($event->private) {
                    // 通知先が指定されているか
                    if (is_array($event->notify_address)
                        && count($event->notify_address) > 0
                    ) {
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_MANAGED;
                        $schedule_event['notify_address']
                            = ScheduleMemberLogic::getInstance()
                                                 ->getNotifyAddressRender($event->notify_address,
                                                     GRN_SCHEDULE_GET_MEMBER_OBJECT,
                                                     true);
                    } else {
                        $schedule_event['private_setting']
                            = GRN_PRIVATE_SETTING_PRIVATE;
                    }
                } else {
                    $schedule_event['private_setting']
                        = GRN_PRIVATE_SETTING_PUBLIC;
                }

                // 参加者
                $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                              ->getAttendeesRenderFromEvent($event,
                                                                  true);

                $facilities = [];
                if ($event->facilities) {
                    $facilitiesSetting
                        = $facility_logic->getSettingsOfFacilities(array_keys($event->facilities),
                        ['approval', 'regulary']);
                    require_once('schedule/facility_privilege.csp');
                    $priv = \GRN_Facility_Privilege_Logic::getInstance();

                    foreach (array_keys($event->facilities) as $key) {
                        // 繰り返し予定ができないものは消す。
                        if ( ! ($facilitiesSetting[$key]['regulary']
                                || $priv->hasPrivilegeOfFacility($login,
                                $facility_logic->getFacility($key)))
                        ) {
                            continue;
                        } elseif ($netmeeting_system_available == 1) {
                            $facility = $facility_logic->getFacility($key);
                            if ($facility->get('netmeeting_available') == 1) {
                                continue;
                            }
                        }

                        // GTM-1681
                        if ($facilitiesSetting[$key]['approval']) {
                            continue;
                        }
                        // end GTM-1681

                        if (is_numeric($key)) {
                            $facilities = array_merge($facilities,
                                $this->getInformationOfFacilityForMobileView([$key],
                                    $facilitiesSetting));
                        }
                    }
                }
                $schedule_event['facilities'] = $facilities;


            } // メンバーだけ利用
            elseif ($event && $new_entry) {
                $schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                                              ->getAttendeesRenderFromEvent($event,
                                                                  true);

                $facilities = [];
                if ($event->facilities) {
                    foreach (array_keys($event->facilities) as $key) {
                        $member = &$event->facilities[$key];
                        if ( ! $member) {
                            continue;
                        }

                        $facilities[$member->getOID()] = $member->get('name');
                    }

                    require_once('schedule/facility_privilege.csp');
                    $priv = \GRN_Facility_Privilege_Logic::getInstance();
                    $facilitiesSetting
                        = $facility_logic->getSettingsOfFacilities(array_keys($event->facilities),
                        ['approval', 'regulary']);

                    foreach (array_keys($facilities) as $key) {
                        // 繰り返し予定ができないものは消す。
                        if ( ! ($facilitiesSetting[$key]['regulary']
                                || $priv->hasPrivilegeOfFacility($login,
                                $facility_logic->getFacility($key)))
                        ) {
                            unset($facilities[$key]);
                        }

                        if (array_key_exists($key, $facilitiesSetting)
                            && $facilitiesSetting[$key]['approval']
                        ) {
                            unset($facilities[$key]);
                        }
                    }

                }
                $schedule_event['facilities'] = $facilities;
            }
        } else {
            $notify_address_candidate = ScheduleMemberLogic::getInstance()
                                                           ->getDefaultPublicByUserId($login->getOID(),
                                                               ScheduleMemberLogic::PLUG_IN_TYPE_VIEW,
                                                               true, true);
            if (count($notify_address_candidate) > 0) {
                $schedule_event['notify_address']
                    = ScheduleMemberLogic::getInstance()
                                         ->getDisplayMemberList($notify_address_candidate,
                                             true);
            }
        }

        $start_date = new \CB_DateEx($schedule_event['start_date']);
        $t->assign('start_date', $start_date->format());
        $end_date = new \CB_DateEx($schedule_event['end_date']);
        $t->assign('end_date', $end_date->format());

        require_once("grn/JSONResponse.csp");
        $json = \grn\grn\JSONResponse::create();

        $selected_users_sUID = isset($schedule_event['users'])
            ? $schedule_event['users'] : [];
        $selected_users_sUID
            = $json->encode(['list' => array_values($selected_users_sUID)]);
        $t->assign('selected_users_sUID', $selected_users_sUID);

        $selected_users_p_sUID = isset($schedule_event['notify_address'])
            ? $schedule_event['notify_address'] : [];
        $selected_users_p_sUID
            = $json->encode(['list' => array_values($selected_users_p_sUID)]);
        $t->assign('selected_users_p_sUID', $selected_users_p_sUID);

        $selected_facility
            = $json->encode(['list' => $schedule_event['facilities']]);
        $t->assign('selected_facility', $selected_facility);


        $t->assign('schedule_event', $schedule_event);

        // page title
        $page_title = grn_get_current_page_display_name();
        // site position
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $t->assign('referer_key', $referer_key);
        $referer_exists = false;
        if ($referer_key) {
            require_once('fw/session_manager.csp');
            $session_manager = \CB_SessionManager::getInstance();
            $session = $session_manager->getSession('schedule.referer');
            $referer = $session->get($referer_key);
            if (is_array($referer)) {
                $params = [
                    self::ARG_NAVIGATION_SP => cb_at($referer,
                        self::ARG_NAVIGATION_SP),
                    self::ARG_GROUP_ID      => cb_at($referer,
                        self::ARG_GROUP_ID),
                    self::ARG_SEARCH_TEXT   => cb_at($referer,
                        self::ARG_SEARCH_TEXT),
                    self::ARG_KW_USERS_ID   => cb_at($referer,
                        self::ARG_KW_USERS_ID),
                    self::ARG_KW_FIDS_ID    => cb_at($referer,
                        self::ARG_KW_FIDS_ID),
                    self::ARG_BEGIN_DATE    => cb_at($referer,
                        self::ARG_BEGIN_DATE),
                    self::ARG_USER_ID       => cb_at($referer,
                        self::ARG_USER_ID)
                ];
                if (array_key_exists(self::ARG_EVENT, $referer)) {
                    $params[self::ARG_EVENT] = $referer[self::ARG_EVENT];
                }
                $this->assignBreadcrumbUpperPage($t, $referer['name'],
                    $referer['page'], $params);
                $this->assignBreadcrumbCurrentPage($t, $page_title);
                $referer_exists = true;

                if (array_key_exists('back_link', $referer)) {
                    $t->assign('is_reuse', true);
                    $t->assign('back_link', $referer['back_link']);
                }
            }
        }

        if ($referer_exists === false) {
            $this->assignBreadcrumbUpperPage($t,
                cb_msg('grn.schedule', 'GRN_SCH-982'),
                'schedule/mobile/personal_week');
            $this->assignBreadcrumbCurrentPage($t, $page_title);
        }
        $t->assign('page_title', $page_title);

        $t->assign('user_id', $user_id);
        $t->assign('group_id', $this->getGroupId());
        $t->assign('bdate', $this->getBeginDate()->format());

        $t->assign('week_option', $this->getWeekOption());
        $t->assign('weekday_option', $this->getWeekDayOption());
        $t->assign('monthday_option', $this->getMonthDayOption());
        $t->assign('repeat_caption', $this->getRepeatCaption($schedule_event));

        $page_name = cb_get_pagename();
        $t->assign('page_name', $page_name);

        $page_name .= '/facility';
        $extra_node = true;
        $fgroup_id = 'f';
        $tree_data = $this->getFacilityGroupsTreeMenu($page_name, $fgroup_id,
            $extra_node);
        $t->assign('fgroup_list', $tree_data['org']);

        $facility_tree_for_view = [
            'tree_name' => 'facility_categories_tree',
            'root'      => $tree_data['origin_org'],
            'async_url' => 'schedule/mobile/ajax/get_facility_sub_group',
            'oid_key'   => 'oid',
            'page_name' => $page_name,
            'no_root'   => true
        ];
        $t->assign('facility_categories_tree', $facility_tree_for_view);

        $t->assign('add_plugin', [
            'name'   => 'schedule',
            'params' => [
                'action'       => ['read', 'add'],
                'session_name' => cb_get_pagename()
            ]
        ]);
        $t->assign("view_plugin", [
            "name"   => "schedule",
            "params" => [
                "action"       => ["read"],
                "session_name" => cb_get_pagename() . "/view"
            ]
        ]);
        $t->assign('product_term', cb_get_product_term(CB_TYPE_TEXT));
        $t->assign('copyright', cb_get_copyright(CB_TYPE_TEXT));

        return $t->fetch('schedule/mobile/repeat_add.tpl');
    }

    public function getTitle()
    {
        return grn_get_page_display_name('schedule/mobile/repeat_add');
    }

    public function getRemoveFooter()
    {
        return true;
    }
}
