<?php

namespace grn\schedule\screen\mobile;

use grn\grn\GrnGenericScreenBase;
use grn\grn\Validate;
use grn\grn\mobile\MobileDisplayUserList;
use grn\schedule\bean\AttendanceStatusCondition;
use grn\schedule\bean\AttendanceStatus;
use grn\schedule\AttendanceStatusLogic;
use grn\schedule\ScheduleMemberLogic;

use grn\grn\access\service\AppAccess;

require_once('schedule/error_code.csp');

class MobileScheduleScreenBase extends GrnGenericScreenBase
{
    const ARG_EVENT = 'event';
    const ARG_USER_ID = 'uid';
    const ARG_GROUP_ID = 'gid';
    const ARG_BEGIN_DATE = 'bdate';
    const ARG_REFERER_KEY = 'referer_key';
    const ARG_FILE_ID = 'fid';
    const ARG_FOLLOW_ID = 'follow_id';
    const ARG_SET_HOUR = 'set_hour';
    const ARG_START_HOUR = 'start_hour';
    const ARG_START_MINUTE = 'start_minute';
    const ARG_START_YEAR = 'start_year';
    const ARG_START_MONTH = 'start_month';
    const ARG_START_DAY = 'start_day';
    const ARG_END_HOUR = 'end_hour';
    const ARG_END_MINUTE = 'end_minute';
    const ARG_END_YEAR = 'end_year';
    const ARG_END_MONTH = 'end_month';
    const ARG_END_DAY = 'end_day';
    const ARG_TAB = 'tab';
    const ARG_MENU = 'menu';
    const ARG_EVENT_MENU_COLOR = 'event_menu_color';
    const ARG_SCHEDULE_TITLE = 'title';
    const ARG_MEMO = 'memo';
    const ARG_PRIVATE = 'private';
    const ARG_SUID = 'sUID';
    const ARG_SITEM = 'sITEM';
    const ARG_NEW = 'new';
    const ARG_TIMEZONE = 'timezone';
    const ARG_END_TIMEZONE = 'end_timezone';
    const ARG_NAVIGATION_SP = 'sp';
    const ARG_SEARCH_TEXT = 'search_text';
    const ARG_EVENT_DATE = 'event_date';
    const ARG_VIEW_COUNT = 20;
    const ARG_ATTACHED_FILE = 'attached_file';
    const ARG_UPLOAD_TICKET = 'upload_ticket';
    const ARG_FILE_INPUT = 'file_input';
    const ARG_SESSION_KEY = 'session_key';
    const ARG_REFERER_BDATE = 'referer_bdate';
    const ARG_DATE_ID = 'did';
    const ARG_COMMENT_DATA = 'comment_data';
    const ARG_ATTENDANCE_STATUS = 'attendance_status';
    const ARG_TAB_ID = 'tab_id';

//KEY WORD, NEVER EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!
    const ARG_KW_START_DATE = 'start_date';
    const ARG_KW_LOGIN_ID = 'login_id';
    const ARG_KW_ABSENT = 'absent';
    const ARG_KEYWORD_END_DATE = 'enddatetime';
    const URL_EVENT_DETAIL = "schedule/mobile/view";
    const ARG_KW_USERS_ID = 'uids';
    const ARG_KW_FIDS_ID = 'fids';
    const ARG_KEYWORD_PARENT = 'p';
    const ARG_KW_TYPE = 'type';
    const ARG_KW_ID = 'id';
    const ARG_KW_USER_ID = 'user_id';
    const ARG_KW_SCHEDULE_EVENT = 'schedule_event';
    const ARG_KW_PRIVATE = 'private';
    const ARG_KW_END_DATE = 'end_date';
    const ARG_KW_ALLDAY = 'allday';
    const ARG_KW_SEARCH = 'search';
    const ARG_KW_DATE_TYPE = 'date_type';
    const ARG_KW_DATE = 'date';
    const ARG_KW_FORMAT = 'format';
    const ARG_KW_NAME = 'name';
    const ARG_KW_SELECTED = 'selected';
    const ARG_KW_EVENT_MENU = 'event_menu';
    const ARG_KW_EVENT_MENU_COLOR = 'event_menu_color';
    const ARG_KW_EVENT_DETAIL = 'event_detail';
    const ARG_KW_DATA = 'data';
    const ARG_KW_EVENT_F_NAME = 'event_facility_name';
    const ARG_KW_SH_APP_ID = 'schedule_app_id';
    const ARG_KW_READ = 'read';
    const ARG_KW_ADD = 'add';
    const ARG_KW_F = 'f';
    const ARG_KW_FR = 'fr';
    const ARG_KW_REF = 'referer_key';
    const ARG_KW_M = 'm';
    const ARG_KW_R = 'r';
    const ARG_KW_MY_GROUP = 'mygroup';
    const ARG_KW_GROUP = 'group';

    private $_event;
    private $_userId;
    private $_groupId;
    private $_beginDate;
    private $_refererKey;
    private $_fileId;
    private $_followId;
    private $_setHour;
    private $_startHour;
    private $_startMinute;
    private $_startYear;
    private $_startMonth;
    private $_startDay;
    private $_endHour;
    private $_endMinute;
    private $_endYear;
    private $_endMonth;
    private $_endDay;
    private $_tab;
    private $_menu;
    private $_eventMenuColor;
    private $_title;
    private $_memo;
    private $_private;
    private $_sUID;
    private $_sItem;
    private $_new;
    private $_timezone;
    private $_endTimezone;
    private $_member;
    private $_listGrantedRoles = null;
    private $_sp;
    private $_searchText;
    private $_eventDate;
    private $_bdateStr;
    private $_refererBDate;
    private $_eventObject;
    private $_actualEvent = null;
    private $_access;
    private $_privateHiddenTitle = null;
    private $_view_Util = null;

    public function __construct($input)
    {
        parent::__construct($input);

        $this->initMobileView();
        $this->setMobileApplicationId('schedule');
    }

    public function getInput()
    {
        $input = parent::getInput();
        $session_key = cb_at($input, 'redirect_key');
        if ($session_key) {
            require_once('fw/session_manager.csp');
            $session_manager = \CB_SessionManager::getInstance();
            $session =& $session_manager->getSession($session_key);
            $input = $session->get('G_INPUT_Session');
        }

        return $input;
    }

    public function getEvent()
    {
        return $this->_event;
    }

    protected function setEvent($value)
    {
        $this->_event = $value;
    }

    public function getUserId()
    {
        return $this->_userId;
    }

    protected function setUserId($value)
    {
        $this->_userId = $value;
    }

    public function getGroupId()
    {
        return $this->_groupId;
    }

    protected function setGroupId($value)
    {
        $this->_groupId = $value;
    }

    public function getBeginDate()
    {
        return $this->_beginDate;
    }

    protected function setBeginDate($value)
    {
        $this->_beginDate = $value;
    }

    public function getRefererKey()
    {
        return $this->_refererKey;
    }

    protected function setRefererKey($value)
    {
        $this->_refererKey = $value;
    }

    public function getFileId()
    {
        return $this->_fileId;
    }

    protected function setFileId($value)
    {
        $this->_fileId = $value;
    }

    public function getFollowId()
    {
        return $this->_followId;
    }

    protected function setFollowId($value)
    {
        $this->_followId = $value;
    }

    public function getSetHour()
    {
        return $this->_setHour;
    }

    protected function setSetHour($value)
    {
        $this->_setHour = $value;
    }

    public function getStartHour()
    {
        return $this->_startHour;
    }

    protected function setStartHour($value)
    {
        $this->_startHour = $value;
    }

    public function getStartMinute()
    {
        return $this->_startMinute;
    }

    protected function setStartMinute($value)
    {
        $this->_startMinute = $value;
    }

    public function getStartYear()
    {
        return $this->_startYear;
    }

    protected function setStartYear($value)
    {
        $this->_startYear = $value;
    }

    public function getStartMonth()
    {
        return $this->_startMonth;
    }

    protected function setStartMonth($value)
    {
        $this->_startMonth = $value;
    }

    public function getStartDay()
    {
        return $this->_startDay;
    }

    protected function setStartDay($value)
    {
        $this->_startDay = $value;
    }

    public function getEndHour()
    {
        return $this->_endHour;
    }

    protected function setEndHour($value)
    {
        $this->_endHour = $value;
    }

    public function getEndMinute()
    {
        return $this->_endMinute;
    }

    protected function setEndMinute($value)
    {
        $this->_endMinute = $value;
    }

    public function getEndYear()
    {
        return $this->_endYear;
    }

    protected function setEndYear($value)
    {
        $this->_endYear = $value;
    }

    public function getEndMonth()
    {
        return $this->_endMonth;
    }

    protected function setEndMonth($value)
    {
        $this->_endMonth = $value;
    }

    public function getEndDay()
    {
        return $this->_endDay;
    }

    protected function setEndDay($value)
    {
        $this->_endDay = $value;
    }

    public function getTab()
    {
        return $this->_tab;
    }

    protected function setTab($value)
    {
        $this->_tab = $value;
    }

    public function getMenu()
    {
        return $this->_menu;
    }

    protected function setMenu($value)
    {
        $this->_menu = $value;
    }

    public function getEventMenuColor()
    {
        return $this->_eventMenuColor;
    }

    protected function setEventMenuColor($value)
    {
        $this->_eventMenuColor = $value;
    }

    public function getScheduleTitle()
    {
        return $this->_title;
    }

    protected function setScheduleTitle($value)
    {
        $this->_title = $value;
    }

    public function getMemo()
    {
        return $this->_memo;
    }

    protected function setMemo($value)
    {
        $this->_memo = $value;
    }

    public function getPrivate()
    {
        return $this->_private;
    }

    protected function setPrivate($value)
    {
        $this->_private = $value;
    }

    public function getSUID()
    {
        return $this->_sUID;
    }

    protected function setSUID($value)
    {
        $this->_sUID = $value;
    }

    public function getSItem()
    {
        return $this->_sItem;
    }

    protected function setSItem($value)
    {
        $this->_sItem = $value;
    }

    public function getNew()
    {
        return $this->_new;
    }

    protected function setNew($value)
    {
        $this->_new = $value;
    }

    public function getTimezone()
    {
        return $this->_timezone;
    }

    protected function setTimezone($value)
    {
        $this->_timezone = $value;
    }

    public function getEndTimezone()
    {
        return $this->_endTimezone;
    }

    protected function setEndTimezone($value)
    {
        $this->_endTimezone = $value;
    }

    public function getMember()
    {
        return $this->_member;
    }

    protected function setMember($value)
    {
        $this->_member = $value;
    }

    public function getEventDate()
    {
        return $this->_eventDate;
    }

    protected function setEventDate($value)
    {
        $this->_eventDate = $value;
    }

    public function getBDateStr()
    {
        return $this->_bdateStr;
    }

    protected function setBDateStr($value)
    {
        $this->_bdateStr = $value;
    }

    public function getSp()
    {
        return $this->_sp;
    }

    protected function setSp($value)
    {
        $this->_sp = $value;
    }

    public function getSearchText()
    {
        return $this->_searchText;
    }

    protected function setSearchText($value)
    {
        $this->_searchText = $value;
    }

    public function getRefererBDate()
    {
        return $this->_refererBDate;
    }

    protected function setRefererBDate($value)
    {
        $this->_refererBDate = $value;
    }

    public function getEventObject()
    {
        return $this->_eventObject;
    }

    protected function setEventObject($value)
    {
        $this->_eventObject = $value;
    }

    public function getActualEvent()
    {
        return $this->_actualEvent;
    }

    protected function setActualEvent($value)
    {
        $this->_actualEvent = $value;
    }

    public function getAccess()
    {
        return $this->_access;
    }

    protected function setAccess($value)
    {
        $this->_access = $value;
    }

    public function fetch()
    {
        cb_throw_error();
    }

    public function post($input)
    {
        cb_throw_error();
    }

    public function getTitle()
    {
        cb_throw_error();
    }

    public function removeFooter()
    {
        return false;
    }

    public function getPostParams()
    {
        return [
            self::ARG_USER_ID,
            self::ARG_GROUP_ID,
            self::ARG_BEGIN_DATE,
            self::ARG_REFERER_KEY,
            self::ARG_SET_HOUR,
            self::ARG_START_HOUR,
            self::ARG_START_MINUTE,
            self::ARG_START_YEAR,
            self::ARG_START_MONTH,
            self::ARG_START_DAY,
            self::ARG_END_HOUR,
            self::ARG_END_MINUTE,
            self::ARG_END_YEAR,
            self::ARG_END_MONTH,
            self::ARG_END_DAY,
            self::ARG_SUID,
            self::ARG_SITEM,
            self::ARG_MENU,
            self::ARG_EVENT_MENU_COLOR,
            self::ARG_MEMO,
            self::ARG_PRIVATE,
            self::ARG_SCHEDULE_TITLE,
            self::ARG_TAB,
            self::ARG_NEW,
            self::ARG_EVENT,
            self::ARG_TIMEZONE,
            self::ARG_END_TIMEZONE
        ];
    }

    protected function getListGrantedRoles()
    {
        if ($this->_listGrantedRoles !== null) {
            return $this->_listGrantedRoles;
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $this->_listGrantedRoles = $uum->listGrantedRoles();

        return $this->_listGrantedRoles;
    }

    protected function getUsersInfoType($users_info)
    {
        foreach ($users_info as $user_id => $user) {
            if (is_array($user) && Validate::isNotNull($user['col_valid'])) {
                $users_info[$user_id]['valid'] = 'invalid_user';
            } elseif (is_array($user)
                      && array_key_exists('col_using_app', $user)
                      && Validate::isNull($user['col_using_app'])
            ) {
                $users_info[$user_id]['valid'] = 'invalidApp_user';
            } elseif ($user_id == $this->getLoginUserId()) {
                $users_info[$user_id]['valid'] = 'login_user';
            } else {
                $users_info[$user_id]['valid'] = 'unlogin_user';
            }
        }

        return $users_info;
    }

    /**
     * @return \GRN_UIConfig
     */
    protected function getUserConfig()
    {
        $login = cb_get_login_user();

        require_once('grn/ui.csp');
        $manager = \GRN_UIConfigManager::getInstance();

        return $manager->getUserConfig($login);
    }

    /**
     *
     * @return string
     */
    protected function getLanguageCode()
    {
        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();

        return $i18n->getCurrentLanguage();
    }

    /**
     *
     * @return string
     */
    protected function getTimezoneName()
    {
        require_once("fw/i18n.csp");
        $i18n = \CB_I18N::getInstance();

        return $i18n->getCurrentTimezone();
    }

    /**
     * Get menu
     *
     * @return menu of schedule
     */
    protected function getMenus()
    {
        $menus = [];

        require_once('schedule/personal_logic.csp');
        $personal_logic = \GRN_Schedule_PersonalLogic::getInstance();
        $temp = $personal_logic->getMenus($this->getLoginUser());
        foreach ($temp as $menu) {
            $menus[] = [
                'value' => $menu,
                'title' => $menu
            ];
        }

        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();
        $temp = $system_logic->getMenus();
        if (is_array($temp)) {
            foreach ($temp as $menu) {
                if (strlen($menu[1]) > 0 && ! is_null($menu[0])) {
                    $menus[] = [
                        'value' => $menu[0] . ';#' . $menu[1],
                        'title' => $menu[0],
                        'color' => $menu[1]
                    ];
                }
            }
        }

        return $menus;
    }

    /**
     * Get show organization
     *
     * @return TRUE or FALSE
     */
    protected function getShowOrganize()
    {
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        return $system_logic->getShowOrganize() ? true : false;
    }

    /**
     * Get use private schedule or not
     *
     * @return TRUE or FALSE
     */
    protected function getUsePrivate()
    {
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        return $system_logic->getUsePrivate();
    }

    /**
     * Get schedule unit time
     *
     */
    protected function getScheduleUnit()
    {
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        return $system_logic->getScheduleUnit();
    }

    /**
     * Get schedule repeat limit
     *
     */
    protected function getRepeatLimit()
    {
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        return $system_logic->getRepeatLimit();
    }

    /**
     * Get allow all facilities
     *
     */
    protected function getAllowAllFacilities()
    {
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        return $system_logic->getAllowAllFacilities();
    }

    /**
     * Get facility groups tree menu
     *
     * @return facility groups data
     */
    protected function getFacilityGroupsTreeMenu(
        $page_name,
        $selected_id,
        $extra_param = 0
    ) {
        require_once('schedule/portlet_view_util.csp');

        return \GRN_Schedule_Portlet_Dropdown_Util::makeFacilityGroupsTreeMenu($page_name,
            $selected_id, $extra_param);
    }

    protected function setMemberSchedule()
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $login_id = $login->getOID();

        if ( ! $this->getUserId()) {
            $this->setUserId($login_id);
            $this->setMember($login);
        } // 組織
        elseif (mb_substr($this->getUserId(), 0, 1) == 'g') {
            $this->setMember($uum->getGroup(mb_substr($this->getUserId(), 1)));
            if ( ! $this->getMember()) {
                $this->setUserId($login_id);
                $this->setMember($login);
            }
        } // 施設
        elseif (mb_substr($this->getUserId(), 0, 1) == 'f') {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();
            $this->setMember($facility_logic->getFacility(mb_substr($this->getUserId(),
                '1')));
            if ($this->getMember() === false) {
                $this->setUserId($login_id);
                $this->setMember($login);
            }
        } else {
            $this->setMember($uum->getUser($this->getUserId()));
            if ( ! $this->getMember()) {
                $this->setUserId($login_id);
                $this->setMember($login);
            }
        }
    }

    /**
     * Check logged-in user is permitted to add for this user/organization/facility or not
     *
     */
    protected function checkAccessSchedule()
    {
        $login = $this->getLoginUser();
        $login_id = $this->getLoginUserId();

        $user_id = $this->getUserId();
        $member = $this->getMember();
        $dynamic_roles = $this->getListGrantedRoles();

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();

        if ($user_id && $member) {
            // check access right
            $access = 1;

            if ( ! is_a($member, 'CB_User')
                 || ($member->getOID() != $login_id)
            ) {
                // check access right of facility group if member is facility
                if (is_a($member, 'GRN_Facility_Facility')) {
                    $tmp_array = [$member->getOID() => $member];
                    $access = $acc_logic->getFacilityGroupAccessList($login,
                        $tmp_array, ['read', 'add'], $dynamic_roles);
                    $access += $acc_logic->getEvaluateAccessesListById($login,
                        $tmp_array, 'facility', ['read', 'add'],
                        $dynamic_roles);
                    foreach ($access as $access_item) {
                        if ($access_item['add'] == GRN_SCHD_ACCESS_DENY) {
                            $access = false;
                            break;
                        }
                    }
                } else {
                    $access = $acc_logic->evaluateAccess($login, $member,
                        ['read', 'add'], $dynamic_roles);
                }
            }

            if ( ! $access) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_ENTRY);
            }
        }
    }

    /**
     * Check logged-in user is permitted to add for this user/organization/facility or not
     *
     */
    protected function checkAccessScheduleBanner()
    {
        $login = $this->getLoginUser();
        $login_id = $this->getLoginUserId();

        $user_id = $this->getUserId();
        $member = $this->getMember();
        $dynamic_roles = $this->getListGrantedRoles();

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();

        if ($user_id && $member) {
            // check access right
            $access = 1;

            if ( ! is_a($member, 'CB_User')
                 || ($member->getOID() != $login_id)
            ) {
                $access = $acc_logic->evaluateAccess($login, $member,
                    ['read', 'add'], $dynamic_roles);
            }

            if ( ! $access) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_ENTRY);
            }
        }
    }


    /**
     * Check access right
     *
     */
    protected function evaluateAccessesListById()
    {
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();

        $selected_uid = $this->getSUID();
        $dynamic_roles = $this->getListGrantedRoles();

        if ($selected_uid && is_array($selected_uid)) {
            $sUIDs = [];
            foreach ($selected_uid as $uid_assign) {
                $sUIDs[$uid_assign] = $uid_assign;
            }
            $acc_lists
                = $acc_logic->getEvaluateAccessesListById(cb_get_login_user(),
                $sUIDs, 'user', ['read', 'add'], $dynamic_roles);
            foreach ($sUIDs as $uid_assign) {
                // アクセス権のチェック
                if ($acc_lists[$uid_assign]['add'] == GRN_SCHD_ACCESS_DENY) {
                    unset($sUIDs[$uid_assign]);
                }
            }
            $this->setSUID($sUIDs);
        }
    }

    protected function getDisplayInfo(array $ids, $type = null)
    {
        $input = $this->getInput();
        $limit = self::MORE_VIEW_COUNT;
        $offset = $this->getArrayValue(self::ARG_NAVIGATION_SP, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        $loop_times = count($ids) >= ($limit + $offset) ? ($limit + $offset)
            : count($ids);
        $display_ids = array_slice($ids, 0, $loop_times);
        $this->setNewOffset($offset, $limit, count($ids));

        //Get facility info
        if ($type == 'facility' && count($ids) > 0) {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();
            $farcilities_info = $facility_logic->getFacilitiesInfo($display_ids,
                CB_DATABASE_NO_LOCK);
            $farcilities_info = $this->reorderArray($display_ids,
                $farcilities_info);

            return $farcilities_info;
        }
        //Get user/group info
        $display_uids = [];
        $display_gids = [];
        foreach ($display_ids as $key => $value) {
            if (substr($key, 0, 1) == 'g') //for group
            {
                $display_gids[] = $value;
            } else //for user
            {
                $display_uids[] = $value;
            }
        }
        $display_group_info = [];
        $display_user_info = [];
        //group info
        if (count($display_gids) > 0) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $groups_info = $uum->getGroupInfoList($display_gids);
            $groups_info = $this->reorderArray($display_gids, $groups_info);
            foreach ($groups_info as $key => $value) {
                $display_group_info['g' . $key] = [
                    'id'         => $key,
                    'type_group' => true,
                    'name'       => $value['col_name']
                ];
            }
        }
        //user info
        if (count($display_uids) > 0) {
            $display_user_info
                = MobileDisplayUserList::constructUserList($display_uids);
        }

        return array_merge($display_group_info, $display_user_info);
    }

    protected function getDisplayMemberList(array $ids, $type = null)
    {
        $input = $this->getInput();
        $limit = self::MORE_VIEW_COUNT;
        $offset = $this->getArrayValue(self::ARG_NAVIGATION_SP, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        $loop_times = count($ids) >= ($limit + $offset) ? ($limit + $offset)
            : count($ids);
        $display_ids = array_slice($ids, 0, $loop_times);
        $this->setNewOffset($offset, $limit, count($ids));

        //Get facility info
        if ($type == 'facility' && count($ids) > 0) {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();
            $farcilities_info = $facility_logic->getFacilitiesInfo($display_ids,
                CB_DATABASE_NO_LOCK);
            $farcilities_info = $this->reorderArray($display_ids,
                $farcilities_info);

            return $farcilities_info;
        }
        $target_ids = [];
        foreach ($display_ids as $key => $id) {
            if (mb_strcut($key, 0, 1) == 'r') //for static_role
            {
                $target_ids[] = 'r' . $id;
            } elseif (mb_strcut($key, 0, 1) == 'g') //for group
            {
                $target_ids[] = 'g' . $id;
            } else //for user
            {
                $target_ids[] = $id;
            }
        }
        $display_member_list = ScheduleMemberLogic::getInstance()
                                                  ->getPickoutMemberTypeIdFromParam($target_ids,
                                                      false);
        $display_member_list = ScheduleMemberLogic::getInstance()
                                                  ->getDisplayMemberList($display_member_list,
                                                      true);

        return $display_member_list;
    }

    /**
     * Check argument of $G_INPUT
     *
     * @param  array $paraArr
     * @param  array $input
     *
     * @throws
     */
    protected function checkArgFromInput(array $paraArr, array $input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_USER_ID:
                    $this->setUserId(cb_at($input, self::ARG_USER_ID));

                case self::ARG_GROUP_ID:
                    if (array_key_exists('gid', $input)) {
                        $this->setGroupId(cb_at($input, self::ARG_GROUP_ID));
                    } else {
                        $this->setGroupId(null);
                    }
                    break;

                case self::ARG_BEGIN_DATE:
                    if ( ! empty($input[self::ARG_BEGIN_DATE])) {
                        $this->setBDateStr($input[self::ARG_BEGIN_DATE]);
                    }
                    $str_date = cb_at($input, self::ARG_BEGIN_DATE);
                    require_once('fw/date.csp');
                    $date = new \CB_Date();
                    if ( ! $date->parse($str_date)) {
                        // 今日を求める
                        $tsex = new \CB_TimeStampEx();
                        $date = $tsex->getDate();
                    }
                    $this->setBeginDate($date);
                    break;

                case self::ARG_SET_HOUR:
                    $this->setSetHour(cb_at($input, self::ARG_SET_HOUR));
                    break;

                case self::ARG_START_HOUR:
                    $this->setStartHour(cb_at($input, self::ARG_START_HOUR));
                    break;

                case self::ARG_START_MINUTE:
                    $this->setStartMinute(cb_at($input,
                        self::ARG_START_MINUTE));
                    break;

                case self::ARG_START_YEAR:
                    $this->setStartYear(cb_at($input, self::ARG_START_YEAR));
                    break;

                case self::ARG_START_MONTH:
                    $this->setStartMonth(cb_at($input, self::ARG_START_MONTH));
                    break;

                case self::ARG_START_DAY:
                    $this->setStartDay(cb_at($input, self::ARG_START_DAY));
                    break;

                case self::ARG_END_HOUR:
                    $this->setEndHour(cb_at($input, self::ARG_END_HOUR));
                    break;

                case self::ARG_END_MINUTE:
                    $this->setEndMinute(cb_at($input, self::ARG_END_MINUTE));
                    break;

                case self::ARG_END_YEAR:
                    $this->setEndYear(cb_at($input, self::ARG_END_YEAR));
                    break;

                case self::ARG_END_MONTH:
                    $this->setEndMonth(cb_at($input, self::ARG_END_MONTH));
                    break;

                case self::ARG_END_DAY:
                    $this->setEndDay(cb_at($input, self::ARG_END_DAY));
                    break;

                case self::ARG_TAB:
                    $this->setTab(cb_at($input, self::ARG_TAB));
                    break;

                case self::ARG_MENU:
                    $this->setMenu(cb_at($input, self::ARG_MENU));
                    break;

                case self::ARG_EVENT_MENU_COLOR:
                    $this->setEventMenuColor(cb_at($input,
                        self::ARG_EVENT_MENU_COLOR));
                    break;

                case self::ARG_MEMO:
                    $this->setMemo(cb_at($input, self::ARG_MEMO));
                    break;

                case self::ARG_SCHEDULE_TITLE:
                    $this->setScheduleTitle(cb_at($input,
                        self::ARG_SCHEDULE_TITLE));
                    break;

                case self::ARG_SUID:
                    $this->setSUID(cb_at($input, self::ARG_SUID, []));
                    break;

                case self::ARG_SITEM:
                    $this->setSItem(cb_at($input, self::ARG_SITEM));
                    break;

                case self::ARG_PRIVATE:
                    $this->setPrivate(cb_at($input, self::ARG_PRIVATE));
                    break;

                case self::ARG_EVENT:

                    if (Validate::isNumber(cb_at($input, self::ARG_EVENT))) {
                        $this->setEvent($input[self::ARG_EVENT]);
                    } else {
                        $this->setEvent(null);
                    }
                    break;

                case self::ARG_NEW:
                    $this->setNew(cb_at($input, self::ARG_NEW, false));
                    break;

                case self::ARG_TIMEZONE:
                    $this->setTimezone(cb_at($input, self::ARG_TIMEZONE,
                        false));
                    break;

                case self::ARG_END_TIMEZONE:
                    $this->setEndTimezone(cb_at($input, self::ARG_END_TIMEZONE,
                        false));
                    break;

                case self::ARG_SEARCH_TEXT:
                    if ( ! empty($input[self::ARG_SEARCH_TEXT])) {
                        $this->setSearchText($input[self::ARG_SEARCH_TEXT]);
                    }
                    break;

                case self::ARG_NAVIGATION_SP:
                    if (Validate::isNumber(@$input[self::ARG_NAVIGATION_SP])) {
                        $this->setSp($input[self::ARG_NAVIGATION_SP]);
                    } else {
                        $this->setSp(0);
                    }
                    break;

                case self::ARG_FILE_ID:
                    if (Validate::isNumber(@$input[self::ARG_FILE_ID])) {
                        $this->setFileId($input[self::ARG_FILE_ID]);
                    }
                    break;
                case self::ARG_FOLLOW_ID:
                    if (Validate::isNumber(@$input[self::ARG_FOLLOW_ID])) {
                        $this->setFollowId($input[self::ARG_FOLLOW_ID]);
                    }
                    break;

                case self::ARG_EVENT_DATE:

                    $str_date = cb_at($input, self::ARG_EVENT_DATE);
                    require_once('fw/date.csp');
                    $date = new \CB_Date();
                    if ( ! $date->parse($str_date)) {
                        $date
                            = $this->getBeginDate(); //if invalid get from begin date
                    }
                    $this->setEventDate($date);

                    break;
            }
        }

        return;
    }

    /**
     * get information of member to show on user selection on mobile view
     *
     * @param  CB_User $member
     *
     */
    public function getInformationOfMemberForMobileView($target_user_id)
    {
        $login_user = cb_get_login_user();
        $login_id = $login_user->getOID();

        require_once('grn/controller.csp');
        $users_info
            = \GRN_ControllerUtil::getUserInfoToShowUserName([$target_user_id],
            $login_user);
        $user_info = $users_info[$target_user_id];

        $stt_user = '';
        if ($target_user_id == $login_id) {
            $stt_user = 'Login';
        }
        if ($user_info['col_valid'] !== null) {
            $stt_user = 'Invalid';
        }
        $user[] = [
            'id'       => $target_user_id,
            'gid'      => array_key_exists('primary_group', $user_info)
                ? $user_info['primary_group']['_id'] : '',
            'type'     => 'user',
            'group'    => array_key_exists('primary_group', $user_info)
                ? $user_info['primary_group']['col_name'] : '',
            'name'     => \GRN_ControllerUtil::getUserNameText($login_id,
                $target_user_id, $users_info, true),
            'stt_user' => $stt_user
        ];

        return $user;
    }

    /**
     * Get information of facilities to show on facility selection on mobile view
     *
     * @param  array $faids        array of facilities id
     * @param  array $check_repeat array of check repeat settings of each facility
     *
     */
    public function getInformationOfFacilityForMobileView(
        $faids,
        $facilitiesSetting = null,
        $need_to_check_repeat = true
    ) {
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();

        $facilities = $facility_logic->getFacilitiesInfo($faids);
        if (count($facilities) == 0) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }

        if ($need_to_check_repeat) {
            if ($facilitiesSetting == null) {
                $facilitiesSetting
                    = $facility_logic->getSettingsOfFacilities($faids,
                    ['approval', 'regulary']);
            }

            $facility_list = [];
            foreach ($facilities as $item) {
                $facility_list[] = [
                    'id'          => $item['_id'],
                    'name'        => $item['col_name'],
                    'displayName' => $item['col_name'],
                    'code'        => $item['col_foreign_key'],
                    'forignKey'   => $item['col_foreign_key'],
                    'type'        => 'facility',
                    'checkrepeat' => $facilitiesSetting[$item['_id']]['regulary'],
                    'approval'    => $facilitiesSetting[$item['_id']]['approval']
                ];
            }
        } else {
            $facility_list = [];
            foreach ($facilities as $item) {
                $facility_list[] = [
                    'id'          => $item['_id'],
                    'name'        => $item['col_name'],
                    'displayName' => $item['col_name'],
                    'code'        => $item['col_foreign_key'],
                    'forignKey'   => $item['col_foreign_key'],
                    'type'        => 'facility',
                    'checkrepeat' => 1,
                    'approval'    => $facilitiesSetting[$item['_id']]['approval']
                ];
            }
        }

        return $facility_list;
    }

    public function getSucceededAttendeeFromEvent($event, $login)
    {
        $ret = [];

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $group_ids = [];
        if (is_array($event->groups) && count($event->groups) > 0) {
            foreach (array_keys($event->groups) as $key) {
                $member = $event->groups[$key];
                if ( ! $member) {
                    continue;
                }

                $group_ids[$member->getOID()] = $member->getOID();
            }
            $groups_info = $uum->getGroupInfoList($group_ids);
            foreach ($groups_info as $group_id => $info) {
                $ret[] = [
                    'gid'  => $group_id,
                    'type' => 'group',
                    'name' => '[' . $info['col_name'] . ']'
                ];
            }
        }

        require_once('grn/controller.csp');

        if ($event->users) {
            $uids = [];
            foreach (array_keys($event->users) as $key) {
                $member = $event->users[$key];
                if ( ! $member) {
                    continue;
                }

                $uids[] = $member->getOID();
            }
            $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($uids,
                $login);

            $login_id = $login->getOID();
            foreach (array_keys($event->users) as $key) {
                $member = $event->users[$key];
                if ( ! $member) {
                    continue;
                }

                $stt_user = '';
                if ($key == $login_id) {
                    $stt_user = 'Login';
                }
                if (array_key_exists("col_using_app", $users_info[$key])
                    && is_null($users_info[$key]["col_using_app"])
                ) {
                    $stt_user = 'InvalidApp';
                }
                if ($users_info[$key]['col_valid'] !== null) {
                    $stt_user = 'Invalid';
                }

                $ret[] = [
                    'id'       => $key,
                    'gid'      => array_key_exists('primary_group',
                        $users_info[$key])
                        ? $users_info[$key]['primary_group']['_id'] : '',
                    'type'     => 'user',
                    'group'    => array_key_exists('primary_group',
                        $users_info[$key])
                        ? $users_info[$key]['primary_group']['col_name'] : '',
                    'name'     => \GRN_ControllerUtil::getUserNameText($login_id,
                        $key, $users_info, true),
                    'stt_user' => $stt_user
                ];
            }
        }

        return $ret;
    }

    public function getNotifyTitle($event)
    {
        require_once('schedule/view_util.csp');
        $util = \GRN_Schedule_View_Util::getInstance();

        // 今日を求める
        require_once('fw/date.csp');
        $tsex = new \CB_TimeStampEx();
        $today = $tsex->getDate();
        $bdate = &$event->getFirstDate($today);

        $title = '';
        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            $title
                = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
        } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
                == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
            ) {
                $event->setdatetime = $bdate;
                $event->enddatetime = $bdate;
            } else {
                $event->setdatetime = new \CB_DateTime();
                $event->setdatetime->year = $bdate->year;
                $event->setdatetime->month = $bdate->month;
                $event->setdatetime->day = $bdate->day;
                $event->setdatetime->hour = $event->settime->hour;
                $event->setdatetime->minute = $event->settime->minute;
                $event->setdatetime->second = $event->settime->second;
            }
            $title
                = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
        } elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
            $title
                = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
        }

        return $title;
    }

    public function getWeekOption()
    {
        return [
            [
                'value' => 'week',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-60')
            ],
            [
                'value' => '1stweek',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-61')
            ],
            [
                'value' => '2ndweek',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-62')
            ],
            [
                'value' => '3rdweek',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-63')
            ],
            [
                'value' => '4thweek',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-64')
            ],
            [
                'value' => 'lastweek',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-65')
            ]
        ];
    }

    public function getWeekDayOption()
    {
        return [
            [
                'value' => '0',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-66')
            ],
            [
                'value' => '1',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-67')
            ],
            [
                'value' => '2',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-68')
            ],
            [
                'value' => '3',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-69')
            ],
            [
                'value' => '4',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-70')
            ],
            [
                'value' => '5',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-71')
            ],
            [
                'value' => '6',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-72')
            ]
        ];
    }

    public function getMonthDayOption()
    {
        return [
            [
                'value' => '1',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-74')
            ],
            [
                'value' => '2',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-75')
            ],
            [
                'value' => '3',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-76')
            ],
            [
                'value' => '4',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-77')
            ],
            [
                'value' => '5',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-78')
            ],
            [
                'value' => '6',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-79')
            ],
            [
                'value' => '7',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-80')
            ],
            [
                'value' => '8',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-81')
            ],
            [
                'value' => '9',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-82')
            ],
            [
                'value' => '10',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-83')
            ],
            [
                'value' => '11',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-84')
            ],
            [
                'value' => '12',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-85')
            ],
            [
                'value' => '13',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-86')
            ],
            [
                'value' => '14',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-87')
            ],
            [
                'value' => '15',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-88')
            ],
            [
                'value' => '16',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-89')
            ],
            [
                'value' => '17',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-90')
            ],
            [
                'value' => '18',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-91')
            ],
            [
                'value' => '19',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-92')
            ],
            [
                'value' => '20',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-93')
            ],
            [
                'value' => '21',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-94')
            ],
            [
                'value' => '22',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-95')
            ],
            [
                'value' => '23',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-96')
            ],
            [
                'value' => '24',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-97')
            ],
            [
                'value' => '25',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-98')
            ],
            [
                'value' => '26',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-99')
            ],
            [
                'value' => '27',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-100')
            ],
            [
                'value' => '28',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-101')
            ],
            [
                'value' => '29',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-102')
            ],
            [
                'value' => '30',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-103')
            ],
            [
                'value' => '31',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-104')
            ],
            [
                'value' => '0',
                'title' => cb_msg('grn.schedule', 'GRN_SCH-105')
            ]
        ];
    }

    public function getRepeatCaption($schedule_event)
    {
        $caption = '';
        switch ($schedule_event['type']) {
            case 'day':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-58');
                break;
            case 'weekday':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-59');
                break;
            case 'month':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-73');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['day']) + 73));
                break;
            case 'week':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-60');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['wday']) + 66));
                break;
            case '1stweek':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-61');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['wday']) + 66));
                break;
            case '2ndweek':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-62');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['wday']) + 66));
                break;
            case '3rdweek':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-63');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['wday']) + 66));
                break;
            case '4thweek':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-64');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['wday']) + 66));
                break;
            case 'lastweek':
                $caption = cb_msg('grn.schedule', 'GRN_SCH-65');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['wday']) + 66));
                break;
            default:
                $caption = cb_msg('grn.schedule', 'GRN_SCH-60');
                $caption .= ' ' . cb_msg('grn.schedule',
                        'GRN_SCH-' . (intval($schedule_event['wday']) + 66));
        }

        return $caption;
    }

    /***
     * @param $login thi is user get unread data
     * @param $ts    CB_TimeStampEx
     *
     * @return  array notification has event info
     */
    protected function getUnreadEvent($login, $ts, $tsE = null)
    {
        //Also get notifications of schedule in the case turn off notification application
        require_once('grn/notification.csp');
        $notifi_service = \GRN_Notification_Service::getInstance();

        return $notifi_service->getDataListFast(GRN_NOTIFICATION_TYPE_WHATSNEW,
            $login, 'grn.schedule', 0, -1, 'col_timestamp, _id', $ts, $tsE);
    }

    public function getAllowFileAttachment()
    {
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        if ($system_logic->getAllowFileAttachment() == '1') {
            return true;
        }

        return false;
    }

    public function getAttachedFile($session_key)
    {
        require_once('fw/session_manager.csp');
        $session_manager = \CB_SessionManager::getInstance();

        $session =& $session_manager->getSession($session_key);
        $files = $session->getFiles('attached_file');

        $files_for_view = [];

        foreach (array_keys($files) as $id) {
            $file =& $files[$id];
            $files_for_view[$id] = grn_make_attached_file_info($file,
                'schedule');
        }

        return $files_for_view;
    }

    protected function getEventForView()
    {
        $event = $this->getEventObject();
        if (Validate::isNotNull($event)) {
            return $event;
        }

        $input = $this->getInput();
        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        if ( ! $event_id) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $login = cb_get_login_user();
        $login_id = $login->getOID();

        $event = $app->getEvent($login, $event_id, null, CB_DATABASE_NO_LOCK,
            false);

        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $tsex = new \CB_TimeStampEx();
            $date = $tsex->getDate();
        }

        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            require_once('schedule/repeat_event_logic.csp');
            $repeat_logic = \GRN_Schedule_RepeatEventLogic::getInstance();
            $event_date = $repeat_logic->getRepeatFirstDate($event, $date);

            $event_type = $event->getEventType();
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
                $repeat_id_arr = $repeat_logic->getIDScheduleNormal($event->id,
                    false);
            } else {
                $repeat_id_arr = $repeat_logic->getIDScheduleNormal($event->id,
                    true);
            }

            $event_date_format = null;
            if (isset($event_date['setdatetime'])) {
                $event_date_format
                    = \CB_Date::valueOf($event_date['setdatetime']->year,
                    $event_date['setdatetime']->month,
                    $event_date['setdatetime']->day)->format();
            }

            for ($i = 0; $i < count($repeat_id_arr); $i++) {
                if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
                    $datetime = $repeat_id_arr[$i]['setdatetime'];
                } else {
                    $datetime = date("Y-m-d",
                        $repeat_id_arr[$i]['setdatetime']);
                }

                if ($datetime === $bdate && $event_date_format !== $bdate) {
                    $event = $app->getEvent($login,
                        $repeat_id_arr[$i]['event_id'], null,
                        CB_DATABASE_NO_LOCK, false);

                    if ($event == false) {
                        continue;
                    }

                    $this->setActualEvent($repeat_id_arr[$i]['event_id']);
                    break;
                }
            }

            if (@$datetime != @$bdate) {
                if (is_a($event_date['setdatetime'], 'CB_Date')
                    || is_a($event_date['setdatetime'], 'CB_DateTime')
                ) {
                    $event->setdatetime = &$event_date['setdatetime'];
                    $event->enddatetime = &$event_date['enddatetime'];
                } else {
                    // イベントとして日付がなくなった場合
                    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
                }
            }
        }
        $this->setEventObject($event);

        //access rights
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $dynamic_roles = $uum->listGrantedRoles();

        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add', 'modify', 'delete'], $dynamic_roles);

        if ($access['add'] == GRN_SCHD_ACCESS_DENY
            && $access['modify'] == GRN_SCHD_ACCESS_DENY
            && $access['delete'] == GRN_SCHD_ACCESS_DENY
        ) {
            $access['follow'] = GRN_SCHD_ACCESS_DENY;
            $access['determine'] = GRN_SCHD_ACCESS_DENY;
        } else {
            $access['follow'] = GRN_SCHD_ACCESS_AFFIRM;
            $access['determine'] = GRN_SCHD_ACCESS_AFFIRM;
        }

        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach ($event->facilities as $facility_id => $facility_obj) {
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $facility_id);
                if ($modify_user === 'creator') {
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || is_a($event, 'GRN_Schedule_TemporaryEvent')
                           && $event->isORSearch()
                    ) {
                        if ((is_a($event->creator, 'CB_User')
                             && $login_id != $event->creator->getOID())
                            || is_string($event->creator)
                        ) {
                            $access['modify'] = GRN_SCHD_ACCESS_DENY;
                            $access['delete'] = GRN_SCHD_ACCESS_DENY;
                        }
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ($privilege_logic->hasPrivilegeOfFacilities($login,
                            $event->facilities, 'OR')
                        ) {
                            foreach (array_keys($access) as $action) {
                                $access[$action] = GRN_SCHD_ACCESS_AFFIRM;
                            }
                        }
                        if ($access['modify'] == GRN_SCHD_ACCESS_AFFIRM
                            || $access['delete'] == GRN_SCHD_ACCESS_AFFIRM
                        ) {
                            continue;
                        } elseif ($access['modify'] == GRN_SCHD_ACCESS_DENY
                                  || $access['delete'] == GRN_SCHD_ACCESS_DENY
                        ) {
                            break;
                        }
                    }
                } elseif ($modify_user === 'member') {
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || is_a($event, 'GRN_Schedule_TemporaryEvent')
                           && $event->isORSearch()
                    ) {
                        if ( ! (is_array($event->users)
                                && array_key_exists($login_id, $event->users))
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id !== $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            $access['modify'] = GRN_SCHD_ACCESS_DENY;
                            $access['delete'] = GRN_SCHD_ACCESS_DENY;
                        }
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = \GRN_Facility_Privilege_Logic::getInstance();
                        if ($privilege_logic->hasPrivilegeOfFacilities($login,
                            $event->facilities, 'OR')
                        ) {
                            foreach (array_keys($access) as $action) {
                                $access[$action] = GRN_SCHD_ACCESS_AFFIRM;
                            }
                        }
                        if ($access['modify'] == GRN_SCHD_ACCESS_AFFIRM
                            || $access['delete'] == GRN_SCHD_ACCESS_AFFIRM
                        ) {
                            continue;
                        } elseif ($access['modify'] == GRN_SCHD_ACCESS_DENY
                                  || $access['delete'] == GRN_SCHD_ACCESS_DENY
                        ) {
                            break;
                        }
                    }
                }
            }
        }

        $this->setAccess($access);

        return $event;
    }

    protected function checkDeletableComment()
    {
        $login = cb_get_login_user();
        $input = $this->getInput();
        $event = $this->getEventForView();
        if ($this->getActualEvent()) //Repeat event
        {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        $event_id = cb_at($input, self::ARG_EVENT);
        $follow_id = cb_at($input, self::ARG_FOLLOW_ID);
        $access = $this->getAccess();
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();
        $follow = $app->getEventFollow($login, $event_id, $follow_id);
        if ($event_id != $follow['event_id']) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        if ($follow['creator_id'] == $login->getOID()) {
            return true;
        } else {
            return false;
        }
    }

    //Group day/ personal week
    protected function convertAttributeAllDay(&$temp, $event)
    {
        if ($this->_view_Util == null) {
            require_once('schedule/view_util.csp');
            $this->_view_Util = \GRN_Schedule_View_Util::getInstance();
            if (is_null($this->_privateHiddenTitle)
                || empty($this->_privateHiddenTitle)
            ) {
                $this->_privateHiddenTitle = cb_msg('grn.schedule',
                    'event_hidden');
            }
        }
        $temp[self::ARG_KW_ID] = $event[self::ARG_KW_ID];

        $temp[self::ARG_KW_ALLDAY] = true;
        $temp[self::ARG_KW_TYPE]
            = $this->_view_Util->getViewEventType($event['event_type'],
            $event['share']);
        $temp[self::ARG_KW_START_DATE] = $event['setdate']->format();
        $temp[self::ARG_KW_END_DATE] = $event['enddate']->format();

        $temp[self::ARG_KW_EVENT_MENU] = $event[self::ARG_KW_EVENT_MENU];
        $temp[self::ARG_KW_EVENT_MENU_COLOR]
            = $event[self::ARG_KW_EVENT_MENU_COLOR];
        $temp[self::ARG_KW_EVENT_DETAIL]
            = $event[self::ARG_KW_EVENT_DETAIL];
        $temp[self::ARG_KW_EVENT_F_NAME] = '';
        if ($temp[self::ARG_KW_EVENT_MENU] === ""
            && $temp[self::ARG_KW_EVENT_DETAIL] === ""
        ) {
            $temp[self::ARG_KW_EVENT_DETAIL]
                = $event['title']; //what is this means the title is -- characters
        }
        if ($event[self::ARG_KW_PRIVATE]
            == GRN_EVENT_PRIVATE_HIDDEN
        ) { //no show
            $temp[self::ARG_KW_PRIVATE] = true;
            $temp[self::ARG_KW_EVENT_DETAIL] = $this->_privateHiddenTitle;
            $temp[self::ARG_KW_EVENT_MENU] = '';
            $temp[self::ARG_KW_EVENT_MENU_COLOR] = '';
            $temp[self::ARG_KW_EVENT_F_NAME] = '';

        } elseif ($event[self::ARG_KW_PRIVATE] == GRN_EVENT_PRIVATE_PRIVATE) {
            $temp['is_private'] = true;
        }
        // $temp[self::ARG_KEYWORD_ABSENT] = array_key_exists(self::ARG_KEYWORD_ABSENT, $event) ? $event[self::ARG_KEYWORD_ABSENT] : 0;
    }

    protected function convertAttributes(&$temp, $event, $date_info = null)
    {
        if ($this->_view_Util == null) {
            require_once('schedule/view_util.csp');
            $this->_view_Util = \GRN_Schedule_View_Util::getInstance();
            if (is_null($this->_privateHiddenTitle)
                || empty($this->_privateHiddenTitle)
            ) {
                $this->_privateHiddenTitle = cb_msg('grn.schedule',
                    'event_hidden');
            }
        }

        $temp[self::ARG_KW_TYPE]
            = $this->_view_Util->getViewEventType($event['event_type'],
            $event['share']);
        $temp[self::ARG_KW_ID] = $event[self::ARG_KW_ID];
        $temp[self::ARG_KW_EVENT_MENU] = $event[self::ARG_KW_EVENT_MENU];
        $temp[self::ARG_KW_EVENT_MENU_COLOR]
            = $event[self::ARG_KW_EVENT_MENU_COLOR];
        $temp[self::ARG_KW_EVENT_DETAIL]
            = $event[self::ARG_KW_EVENT_DETAIL];
        $temp[self::ARG_KW_EVENT_F_NAME] = '';
        if (array_key_exists('setdatetime', $event)) {
            $temp[self::ARG_KW_START_DATE] = $event['setdatetime']->format();
        } elseif (array_key_exists('setdate', $event)) {
            $temp[self::ARG_KW_START_DATE] = $event['setdate']->format();
        }
        if (array_key_exists('enddatetime', $event)) {
            $temp[self::ARG_KW_END_DATE] = $event['enddatetime']->format();
        } elseif (array_key_exists('enddate', $event)) {
            $temp[self::ARG_KW_END_DATE] = $event['enddate']->format();
        }
        $temp['conflict'] = array_key_exists('conflict', $event)
            ? $event['conflict'] : false;
        if ($temp[self::ARG_KW_EVENT_MENU] === ""
            && $temp[self::ARG_KW_EVENT_DETAIL] === ""
        ) {
            $temp[self::ARG_KW_EVENT_DETAIL] = $event['title'];
        }
        if ($event[self::ARG_KW_PRIVATE]
            == GRN_EVENT_PRIVATE_HIDDEN
        ) { //no show
            $temp[self::ARG_KW_PRIVATE] = true;
            $temp[self::ARG_KW_EVENT_DETAIL] = $this->_privateHiddenTitle;
            $temp[self::ARG_KW_EVENT_MENU] = '';
            $temp[self::ARG_KW_EVENT_MENU_COLOR] = '';
            $temp[self::ARG_KW_EVENT_F_NAME] = '';
        } elseif ($event[self::ARG_KW_PRIVATE] == GRN_EVENT_PRIVATE_PRIVATE) {
            $temp['is_private'] = true;
        }
        if (isset($date_info)) {
            $temp['time_schedule'] = $this->_view_Util->getViewHour(
                $date_info['date'],
                $event['setdatetime'],
                $event['enddatetime'],
                $event['event_type'],
                1);
        }
    }

    protected function reorderArray($ids, $objects)
    {
        if ( ! is_array($ids) || ! is_array($objects)) {
            return false;
        }

        $new_objects = [];
        foreach ($ids as $id) {
            if (array_key_exists($id, $objects)) {
                $new_objects[] = $objects[$id];
            }
        }

        return $new_objects;
    }

    protected function getSelectMenu($menus, $select_menu)
    {
        foreach ($menus as $menu) {
            if ($menu['value'] == $select_menu) {
                return $select_menu;
            }
        }

        $decode_select_menu = htmlspecialchars_decode($select_menu);
        foreach ($menus as $menu) {
            if ($menu['value'] == $decode_select_menu) {
                return $decode_select_menu;
            }
        }

        return $select_menu;
    }

    //GTM-1630
    protected function convertAttendanceStatusListToUserIdList(
        $attendanceStatusList
    ) {
        $resultList = [];
        if (count($attendanceStatusList) > 0) {
            $userId = 0;
            foreach ($attendanceStatusList as $attendanceStatusObj) {
                $userId = $attendanceStatusObj->getUserId();
                $resultList[$userId] = $userId;
            }
        }

        return $resultList;
    }

    protected function getAttendanceStatusLogic()
    {
        static $logic = null;
        if ($logic == null) {
            $logic = new AttendanceStatusLogic();
        }

        return $logic;
    }

    protected function isAttendanceCheckView($event)
    {
        $attendanceStatusLogic = $this->getAttendanceStatusLogic();
        $isEnableAttendanceCheck
            = $attendanceStatusLogic->isEnableAttendanceCheck();
        $isAttendanceCheckEvent = $event->isAttendanceCheckEvent();

        if ($isEnableAttendanceCheck && $isAttendanceCheckEvent) {
            return true;
        }

        return false;
    }

    protected function isAttendee($user_id, $event)
    {
        if (is_array($event->users)
            && array_key_exists($user_id, $event->users)
        ) {
            return true;
        }

        return false;
    }

    /**
     * @return string
     */
    protected function getDefaultPrivateSet()
    {
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();

        return $system_logic->getDefaultPrivateSet();
    }
}
