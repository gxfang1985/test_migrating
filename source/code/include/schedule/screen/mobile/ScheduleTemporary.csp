<?php

namespace grn\schedule\screen\mobile;

require_once('schedule/error_code.csp');

class ScheduleTemporary extends MobileScheduleScreenBase
{
    public function __construct($input)
    {
        parent::__construct($input);
    }

    public function post($input)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        require_once('schedule/application.csp');
        $app = \GRN_Schedule_Application::getInstance();

        $event_id = cb_at($input, self::ARG_EVENT);
        $bdate = cb_at($input, self::ARG_BEGIN_DATE);
        $user_id = cb_at($input, self::ARG_USER_ID);
        $group_id = cb_at($input, self::ARG_GROUP_ID);
        $referer_key = cb_at($input, self::ARG_REFERER_KEY);
        $did = cb_at($input, self::ARG_DATE_ID);

        $date = new \CB_Date();
        if ( ! $date->parse($bdate)) {
            $date = null;
        }

        $login = cb_get_login_user();

        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add', 'modify', 'delete'], $dynamic_role);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        if ($access['add'] == GRN_SCHD_ACCESS_DENY
            && $access['modify'] == GRN_SCHD_ACCESS_DENY
            && $access['delete'] == GRN_SCHD_ACCESS_DENY
        ) {
            cb_throw_error(E_GRN_SCHD_DENY_DETERMINE);
        }

        if ( ! is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            cb_throw_error(E_GRN_SCHD_ALREADY_DETERMIN_EVENT);
        }

        $result = $app->determineEvent($login, $event_id, $did);

        if ( ! $result) {
            cb_throw_error(E_GRN_SCHD_NOT_FOUND_TEMPORARY_DATE);
        } else {
            // tuning GRB-15157
            // param for load and cache setting
            $param_loadAndCache = ['user', 'locale'];

            require_once('grn/application.csp');
            $app_locator = \GRN_ApplicationLocator::instance();

            require_once('schedule/notification.csp');
            $util = \GRN_Schedule_Notify_Logic::getInstance();

            if ($date == null) {
                $date = new \CB_Date();
            }

            $date->year = $result['setdatetime']->year;
            $date->month = $result['setdatetime']->month;
            $date->day = $result['setdatetime']->day;
            $timstamp = new \CB_TimeStampEx();

            $today = $timstamp->getDate();
            if ($today->compare($result['setdatetime']) <= 0) {
                // ----- GRN2-4506 -----
                $event->setdatetime = $result['setdatetime'];
                $event->enddatetime = $result['enddatetime'];

                if ($event->setdatetime instanceof \CB_DateTimeEx) {
                    require_once('fw/i18n.csp');
                    $settimestamp = new \CB_TimeStampEx(null, $event->timezone);
                    $settimestamp->setDateTime($event->setdatetime,
                        \CB_I18N::getInstance()->getCurrentTimezone());
                    $event->setdatetime = $settimestamp->getDateTime();
                    if (isset($event->enddatetime)) {
                        $endtimestamp = new \CB_TimeStampEx(null,
                            $event->timezone);
                        $endtimestamp->setDateTime($event->enddatetime,
                            \CB_I18N::getInstance()->getCurrentTimezone());
                        $event->enddatetime = $endtimestamp->getDateTime();
                    } else {
                        $event->enddatetime = $event->setdatetime;
                    }
                }
                // ----- GRN2-4506 -----

                if (is_array($event->users) && count($event->users) > 0) {
                    $app_locator->loadAndCacheUsersSetting($event->users,
                        $param_loadAndCache);

                    $title
                        = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
                    $app->setNotify($event->users, $login, $event,
                        $result['setdatetime'], $title, '',
                        GRN_SCHEDULE_NOTIFY_FIX, $timstamp);
                    $app->forwardMail($event,
                        [GRN_SCHEDULE_NOTIFY_FIX => $event->users], $login,
                        $did);
                    $app->sendPushNotification(
                        $event, [GRN_SCHEDULE_NOTIFY_FIX => $event->users],
                        $login, true, $result['setdatetime'], $did);
                }


                if ($event->private && is_array($event->notify_address)
                    && count($event->notify_address) > 0
                ) {
                    $title
                        = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
                    $app->sendNotificationsToPublic($login, $event,
                        $result['setdatetime'], '', $timstamp, $title, true,
                        true, GRN_SCHEDULE_NOTIFY_FIX, $did);
                }
            }
        }

        require_once('schedule/facility_privilege.csp');
        $facility_privilege = \GRN_Facility_Privilege_Logic::getInstance();
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        $determined_event = $app->getEvent($login, $event_id, $date);
        if ($obj_facilities
            = $facility_privilege->getFacilitiesWithoutAuthority($login,
            $determined_event->facilities)
        ) {
            if (is_a($determined_event, 'GRN_Schedule_NormalEvent')) {
                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $determined_event->enddatetime,
                    $determined_event->setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $determined_event->enddatetime);
            } elseif (is_a($determined_event, 'GRN_Schedule_RepeatEvent')) {
                $facility_logic->checkFacilityRepeat($obj_facilities);

                // Create today's CB_DateTime for facility max time check
                $ts = new \CB_TimeStamp();
                $ts->unix_ts = time();
                $tsex = new \CB_TimeStampEx($ts);

                $setdatetime = $tsex->getDateTime();
                $setdatetime->setTime($determined_event->settime);

                $enddatetime = $tsex->getDateTime();
                $enddatetime->setTime($determined_event->endtime);

                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $enddatetime, $setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $determined_event->enddate);
            }
        }

        if ( ! $user_id) {
            $user_id = $login->getOID();
        }

        $b_contain = false;
        $facility_ids = null;
        $member_ids = null;
        if (($fid = mb_substr($user_id, 0, 1)) === 'f') {
            if (is_array($event->facilities) && count($event->facilities) > 0) {
                foreach (array_keys($event->facilities) as $key) {
                    $member = $event->facilities[$key];
                    if ($member->getOID() === $fid) {
                        $b_contain = true;
                        break;
                    }
                }
            }
        } elseif (($gid = mb_substr($user_id, 0, 1)) === 'f') {
            if (is_array($event->groups) && count($event->groups) > 0) {
                foreach (array_keys($event->groups) as $key) {
                    $member = $event->groups[$key];
                    if ($member->getOID() === $gid) {
                        $b_contain = true;
                        break;
                    }
                }
            }
        } else {
            if (is_array($event->users) && count($event->users) > 0) {
                foreach (array_keys($event->users) as $key) {
                    $member = $event->users[$key];
                    if ($member->getOID() === $user_id) {
                        $b_contain = true;
                        break;
                    }
                }
            }
        }

        if ( ! $b_contain) {
            $user_id = null;

            if (is_array($event->groups) && count($event->groups) > 0) {
                $member = reset($event->groups);
                $user_id = 'g' . $member->getOID();
            }

            if (is_null($user_id) && is_array($event->users)
                && count($event->users) > 0
            ) {
                $member = reset($event->users);
                $user_id = $member->getOID();
            }
            if (is_null($user_id) && is_array($event->facilities)
                && count($event->facilities) > 0
            ) {
                $member = reset($event->facilities);
                $user_id = 'f' . $member->getOID();
            }
        }

        cb_redirect('schedule/mobile/view', [
            'event'       => $event_id,
            'bdate'       => $date->format(),
            'uid'         => $user_id,
            'gid'         => $group_id,
            'referer_key' => $referer_key
        ]);
    }
}
