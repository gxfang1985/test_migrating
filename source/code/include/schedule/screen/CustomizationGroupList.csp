<?php

namespace grn\schedule\screen;

use grn\grn\GrnGenericScreenBase;
use grn\grn\customization\logic\CustomizationGroupLogic;
use grn\grn\customization\logic\InspectionUtil;
use grn\grn\customization\service\CustomizationGroupService;
use grn\grn\customization\service\ResourceService;
use grn\grn\customization\screen\CustomizationGroupTemplates;
use grn\grn\customization\service\CustomizationTargetService;

class CustomizationGroupList extends GrnGenericScreenBase
{
    private $customizationGroupService;
    private $resourceService;
    private $customizationTargetService;

    public function __construct($input)
    {
        $this->customizationGroupService
            = new CustomizationGroupService('schedule');
        $this->resourceService = new ResourceService('schedule');
        $this->customizationTargetService
            = new CustomizationTargetService('schedule');

        parent::__construct($input);
    }

    /**
     * @return string
     */
    public function fetch()
    {
        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();

        // page title
        $page_title = grn_get_current_page_display_name();
        $t->assign('page_title', $page_title);

        // site position
        $t->assign('site_position', [
                ['page' => '', 'name' => $page_title],
            ]
        );

        $group_list = $this->customizationGroupService->getGroupList();
        $t->assign("group_list", $group_list);
        $t->assign("disable_order", count($group_list) < 2);

        $t->assign("link_add_page", "schedule/system/customization_group_add");
        $t->assign("link_order_page",
            "schedule/system/customization_group_order");
        $t->assign("delete_info", $this->getDeleteInfo());

        return $t->fetch(CustomizationGroupTemplates::TEMPLATE_NAME_GROUP_LIST);
    }

    /**
     * @return array
     */
    private function getDeleteInfo()
    {
        return [
            'title'        => grn_get_page_display_name('schedule/system/customization_group_delete_multi'),
            'page'         => CustomizationGroupTemplates::TEMPLATE_NAME_GROUP_DELETE_MULTI,
            'no_confirm'   => false,
            'data'         => ["command_page" => 'schedule/system/command_customization_group_list'],
            'handler'      => [
                'btn_delete_multi_top',
                'btn_delete_multi_bottom'
            ],
            'multi_target' => 'ids[]',
            'form_target'  => 'customization/group_list',
        ];
    }

    /**
     * @param $input
     */
    public function post($input)
    {
        $ids = cb_at($input, "ids");
        $cmd = cb_at($input, "cmd");

        switch ($cmd) {
            case "delete":
                foreach ($ids as $id) {
                    $group = $this->customizationGroupService->getGroup($id);
                    $target
                        = CustomizationGroupLogic::CUSTOMIZATION_TARGET_PREFIX
                          . $id;
                    $resources
                        = $this->resourceService->getResourcesByTarget($target);
                    $file_names
                        = $this->resourceService->getFileNamesFromResources($resources);
                    $applicable_targets
                        = $this->customizationTargetService->getCustomizationTarget($id);

                    $this->customizationGroupService->removeGroup($id);

                    $this->inspectionRecordForPost($group->getId(),
                        $group->getName(), $group->isActive(),
                        $applicable_targets->getCustomizationTargetList(),
                        $resources, $file_names);
                }
                break;
        }

        cb_redirect('schedule/system/customization_group_list', []);
    }

    /**
     * @param string                            $id
     * @param string                            $name
     * @param  int                              $apply_status
     * @param array                             $targets
     * @param \grn\grn\customization\Resource[] $resources
     * @param array                             $file_names
     */
    private function inspectionRecordForPost(
        $id,
        $name,
        $apply_status,
        array $targets,
        array $resources,
        array $file_names
    ) {
        require_once('schedule/inspection.csp');
        $inspection = \GRN_Schedule_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_args = array_merge(
                [
                    'id'           => $id,
                    'name'         => $name,
                    'apply_status' => InspectionUtil::getApplyStatusLogValue($apply_status)
                ],
                InspectionUtil::getTargetLogParams($targets),
                InspectionUtil::getResourcesLogParams($resources, $file_names)
            );
            $inspection->record('delete', 'customization_group', $message_args);
        }
    }
}
