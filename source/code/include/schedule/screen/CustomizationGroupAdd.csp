<?php

namespace grn\schedule\screen;

use grn\grn\customization\bean\CustomizationGroup;
use grn\grn\customization\service\CustomizationGroupService;
use grn\grn\customization\logic\CustomizationGroupLogic;
use grn\grn\customization\logic\InspectionUtil;
use grn\grn\customization\bean\ResourceForm;
use grn\grn\customization\service\ResourceService;
use grn\grn\customization\screen\CustomizationGroupTemplates;
use grn\grn\customization\screen\ResourceScreen;
use grn\grn\customization\service\CustomizationTargetService;
use grn\grn\customization\bean\CustomizationTarget;

class CustomizationGroupAdd extends ResourceScreen
{
    private $customizationGroupService;
    private $resourceService;
    private $customizationTargetService;

    public function __construct($input)
    {
        $this->customizationGroupService
            = new CustomizationGroupService('schedule');
        $this->resourceService = new ResourceService('schedule');
        $this->customizationTargetService
            = new CustomizationTargetService('schedule');

        parent::__construct($input);
    }

    public function fetch()
    {
        require_once('grn/smarty.csp');
        $t = new \GRN_Smarty();

        $this->assignResources($t, [], []);
        $this->assignStaticPart($t);

        include('grn/_upload_prepend.csp');

        $customization_group = new CustomizationGroup();
        $t->assign("customization_group", $customization_group);

        $t->assign("require_target", true);
        $t->assign("app_id", 'schedule');

        $this->assignApplyStatus($t, $customization_group->isActive());

        return $t->fetch(CustomizationGroupTemplates::TEMPLATE_NAME_GROUP_ADD);
    }

    /**
     * @param array $input
     *
     * @return string
     */
    private function addGroup($input)
    {
        $name = cb_at($input, "name");
        $apply_status = cb_at($input, "apply_status");
        $apply_status = ($apply_status == '1') ? 1 : 0;

        $customization_group = new CustomizationGroup();
        $customization_group->setName($name);
        $customization_group->setOrder(null);
        $customization_group->setIsActive($apply_status);

        /* @var \CB_User $login_user */
        $login_user = cb_get_login_user();
        $customization_group->setCreator($login_user->getOID());
        $customization_group->setCreatorForeignKey($login_user->get("foreign_key"));
        $customization_group->setCreatorName($login_user->get("display_name"));
        $customization_group->setModifier($login_user->getOID());
        $customization_group->setModifierForeignKey($login_user->get("foreign_key"));
        $customization_group->setModifierName($login_user->get("display_name"));

        return $this->customizationGroupService->addGroup($customization_group);
    }

    /**
     * @param string $group_id
     * @param array  $input
     *
     * @return array
     */
    protected function addTargets(string $group_id, array $input)
    {
        $dynamic_role = cb_at($input,
            CustomizationTargetService::POST_KEY_DYNAMIC_ROLE, null);
        $static_role = cb_at($input,
            CustomizationTargetService::POST_KEY_STATIC_ROLE, null);
        $group = cb_at($input,
            CustomizationTargetService::POST_KEY_GROUP, null);
        $user = cb_at($input, CustomizationTargetService::POST_KEY_USER,
            null);

        $targets
            = $this->customizationTargetService->formatCustomizationTargetValue($dynamic_role,
            $static_role, $group, $user);
        $customization_targets = new CustomizationTarget();
        $customization_targets->setCustomizationTargetList($targets);
        $this->customizationTargetService->updateCustomizationTarget($group_id,
            $customization_targets);

        return $customization_targets->getCustomizationTargetList();
    }

    /**
     * @param $input
     */
    public function post($input)
    {
        $group_id = $this->addGroup($input);
        $targets = $this->addTargets($group_id, $input);

        $form = new ResourceForm($input);

        $target = CustomizationGroupLogic::CUSTOMIZATION_TARGET_PREFIX
                  . $group_id;
        $new_resources = $this->resourceService->updateResources($target,
            $form);
        $file_names
            = $this->resourceService->getFileNamesFromResources($new_resources);

        $apply_status = null;
        if (count($new_resources) > 0) {
            $apply_status = cb_at($input, 'apply_status');
            $apply_status = ($apply_status == '1') ? 1 : 0;
        }

        $this->customizationGroupService->modifyApplyStatus($group_id,
            $apply_status);

        $this->inspectionRecordForPost($group_id, $apply_status, $targets,
            $new_resources, $file_names);

        cb_redirect($this->getRedirectPage(), $this->getRedirectParams());
    }

    /**
     * @return string
     */
    public function getCommandPage()
    {
        return 'schedule/system/command_customization_group_add';
    }

    /**
     * @return array
     */
    public function getCommandParams()
    {
        return [];
    }

    /**
     * @return string
     */
    public function getRedirectPage()
    {
        return 'schedule/system/customization_group_list';
    }

    /**
     * @return array
     */
    public function getRedirectParams()
    {
        return [];
    }

    /**
     * @return array
     */
    public function getSitePosition()
    {
        return [
            [
                'page' => "schedule/system/customization_group_list",
                'name' => grn_get_page_display_name("schedule/system/customization_group_list")
            ],
            ['page' => '', 'name' => grn_get_current_page_display_name()]
        ];
    }

    /**
     * @param string                            $group_id
     * @param int                               $apply_status
     * @param array                             $targets
     * @param \grn\grn\customization\Resource[] $resources
     * @param array                             $file_names
     */
    private function inspectionRecordForPost(
        $group_id,
        $apply_status,
        array $targets,
        array $resources,
        array $file_names
    ) {
        require_once('schedule/inspection.csp');
        $inspection = \GRN_Schedule_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_args = array_merge(
                [
                    'id'           => $group_id,
                    'name'         => $this->getInput()['name'],
                    'apply_status' => InspectionUtil::getApplyStatusLogValue($apply_status)
                ],
                InspectionUtil::getTargetLogParams($targets),
                InspectionUtil::getResourcesLogParams($resources, $file_names)
            );
            $inspection->record('add', 'customization_group', $message_args);
        }
    }
}
