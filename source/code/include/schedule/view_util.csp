<?php
/**
 * スケジューラーの通常予定を管理するメインのロジック
 *
 * @author      A.Shima     2004/10/25
 * @package     grn.schedule
 */
require_once('fw/i18n.csp');
require_once('schedule/resources.csp');

use grn\schedule\bean\AttendanceStatus;
use grn\schedule\AttendanceStatusLogic;
use grn\grn\access\service\AppAccess;

/**
 * 表示用のユーティリティクラス
 *
 * @package grn.schedule
 */
class GRN_Schedule_View_Util
{
    const ALLDAY_EVENT_START_HOUR = 0;
    const ALLDAY_EVENT_START_MINUTE = 0;
    const ALLDAY_EVENT_START_SECOND = 0;
    const ALLDAY_EVENT_END_HOUR = 23;
    const ALLDAY_EVENT_END_MINUTE = 59;
    const ALLDAY_EVENT_END_SECOND = 59;

    /** @var array */
    private $enumRepeatTypeResourceKey
        = [
            GRN_REPEAT_TYPE_DAY      => 'everyday',
            GRN_REPEAT_TYPE_WEEKDAY  => 'weekday',
            GRN_REPEAT_TYPE_WEEK     => 'everyweek',
            GRN_REPEAT_TYPE_1STWEEK  => '1stweek',
            GRN_REPEAT_TYPE_2NDWEEK  => '2ndweek',
            GRN_REPEAT_TYPE_3RDWEEK  => '3rdweek',
            GRN_REPEAT_TYPE_4THWEEK  => '4thweek',
            GRN_REPEAT_TYPE_LASTWEEK => 'lastweek',
            GRN_REPEAT_TYPE_MONTH    => 'everymonth'
        ];

    /** @var array */
    private $enumDayResourceKey
        = [
            0 => 'sunday',
            1 => 'monday',
            2 => 'tuesday',
            3 => 'wednesday',
            4 => 'thursday',
            5 => 'friday',
            6 => 'saturday'
        ];

    /**
     * @access private
     */
    function __construct()
    {
    }

    private static $_instance = null;

    /**
     * @return GRN_Schedule_View_Util
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * 画面から受け取ったデータからイベントオブジェクトを作成する
     *
     * @param   array $params 入力データ
     *
     * @return  GRN_Schedule_EventBase    作成したイベントオブジェクト
     */
    function createEvent($params)
    {
        require_once('schedule/event_base_logic.csp');
        require_once('schedule/utility.csp');

        if (array_key_exists('RP', $params)) {
            $event = $this->_createRepeatEvent($params);
        } elseif (array_key_exists('BN', $params)) {
            $event = $this->_createBannerEvent($params);
        } elseif (array_key_exists('temporary', $params)) {
            $event = $this->_createTemporayEvent($params);
        } else {
            $event = $this->_createNormalEvent($params);
        }

        return $event;
    }

    //GRREQ-141
    function createSimpleEvent($params)
    {
        require_once('schedule/event_base_logic.csp');
        require_once('schedule/utility.csp');

        if (array_key_exists('bdate', $params)) {
            list($year, $month, $day) = explode('-', $params['bdate']);

            if (intval($year)) {
                $params['start_year'] = $year;
                $params['end_year'] = $year;
            }

            if (intval($month)) {
                $params['start_month'] = $month;
                $params['end_month'] = $month;
            }

            if (intval($day)) {
                $params['start_day'] = $day;
                $params['end_day'] = $day;
            }
        }

        $event = $this->_createNormalEvent($params);

        return $event;
    }
    //GRREQ-141

    /**
     * 通常予定をパラメータから生成する
     *
     * @access  private
     */
    function _createNormalEvent($params)
    {
        $event = new GRN_Schedule_NormalEvent();

        $this->_getContantsFromParameters($event, $params);

        $this->_getAddressDataFromParameters($event, $params);

        $this->_getAdditionalItemsFromParameters($event, $params);

        $start_year = array_key_exists('start_year', $params) ? $params['start_year'] : null;
        $start_month = array_key_exists('start_month', $params) ? $params['start_month'] : null;
        $start_day = array_key_exists('start_day', $params) ? $params['start_day'] : null;
        $start_hour = array_key_exists('start_hour', $params) ? $params['start_hour'] : null;
        $start_minute = array_key_exists('start_minute', $params) ? $params['start_minute'] : null;
        $end_year = array_key_exists('end_year', $params) ? $params['end_year'] : null;
        $end_month = array_key_exists('end_month', $params) ? $params['end_month'] : null;
        $end_day = array_key_exists('end_day', $params) ? $params['end_day'] : null;
        $end_hour = array_key_exists('end_hour', $params) ? $params['end_hour'] : null;
        $end_minute = array_key_exists('end_minute', $params) ? $params['end_minute'] : null;

        $event->setdatetime = $this->_createDateTime($start_year, $start_month, $start_day, $start_hour, $start_minute);
        $event->enddatetime = $this->_createDateTime($end_year, $end_month, $end_day, $end_hour, $end_minute);

        // 終了時間しか入っていなかった場合は、日付を追加
        if (is_a($event->enddatetime, 'CB_Time') && is_a($event->setdatetime, 'CB_DateTime')) {
            $event->enddatetime = grn_schedule_get_datetime($event->setdatetime->getDate(), $event->enddatetime);
        }

        $this->_getTimezoneFromParameters($event, $params);
        $this->_getMemberFromParameters($event, $params);

        // 非公開の場合
        if (array_key_exists('private', $params) && $params['private'] == 2) {
            $this->_getNotifyAddressFromParameters($event, $params);
        }

        return $event;
    }

    /**
     * 繰り返し予定をパラメータから生成する
     *
     * @access  private
     */
    function _createRepeatEvent($params)
    {
        $event = new GRN_Schedule_RepeatEvent();

        $this->_getContantsFromParameters($event, $params);

        $this->_getAddressDataFromParameters($event, $params);

        $this->_getAdditionalItemsFromParameters($event, $params);

        $start_year = array_key_exists('start_year', $params)
            ? $params['start_year'] : null;
        $start_month = array_key_exists('start_month', $params)
            ? $params['start_month'] : null;
        $start_day = array_key_exists('start_day', $params)
            ? $params['start_day'] : null;
        $start_hour = array_key_exists('start_hour', $params)
            ? $params['start_hour'] : null;
        $start_minute = array_key_exists('start_minute', $params)
            ? $params['start_minute'] : null;
        $end_year = array_key_exists('end_year', $params)
            ? $params['end_year'] : null;
        $end_month = array_key_exists('end_month', $params)
            ? $params['end_month'] : null;
        $end_day = array_key_exists('end_day', $params)
            ? $params['end_day'] : null;
        $end_hour = array_key_exists('end_hour', $params)
            ? $params['end_hour'] : null;
        $end_minute = array_key_exists('end_minute', $params)
            ? $params['end_minute'] : null;

        // 期限
        $event->setdate = $this->_createDateTime($start_year, $start_month,
            $start_day, null, null);
        $event->enddate = $this->_createDateTime($end_year, $end_month,
            $end_day, null, null);

        // 時間
        $event->settime = $this->_createDateTime(null, null, null, $start_hour,
            $start_minute);
        $event->endtime = $this->_createDateTime(null, null, null, $end_hour,
            $end_minute);

        $event->repeat_type = array_key_exists('type', $params)
            ? $params['type'] : null;
        if ($event->repeat_type == 'week') {
            $event->repeat_type = array_key_exists('week', $params)
                ? $params['week'] : null;
        }
        $event->wday = array_key_exists('wday', $params) ? $params['wday']
            : null;
        $event->day = array_key_exists('day', $params) ? $params['day'] : null;

        $this->_getTimezoneFromParameters($event, $params);
        $this->_getMemberFromParameters($event, $params);

        if (array_key_exists('private', $params) && $params['private'] == 2) {
            $this->_getNotifyAddressFromParameters($event, $params);
        }

        return $event;
    }

    /**
     * バナー予定をパラメータから生成する
     *
     * @access private
     */
    function _createBannerEvent($params)
    {
        $event = new GRN_Schedule_BannerEvent();

        $this->_getContantsFromParameters($event, $params);

        $this->_getAddressDataFromParameters($event, $params);

        $this->_getAdditionalItemsFromParameters($event, $params);

        $start_year = array_key_exists('start_year', $params)
            ? $params['start_year'] : null;
        $start_month = array_key_exists('start_month', $params)
            ? $params['start_month'] : null;
        $start_day = array_key_exists('start_day', $params)
            ? $params['start_day'] : null;
        $end_year = array_key_exists('end_year', $params)
            ? $params['end_year'] : null;
        $end_month = array_key_exists('end_month', $params)
            ? $params['end_month'] : null;
        $end_day = array_key_exists('end_day', $params) ? $params['end_day']
            : null;

        $event->setdate = $this->_createDateTime($start_year, $start_month,
            $start_day, null, null);
        $event->enddate = $this->_createDateTime($end_year, $end_month,
            $end_day, null, null);

        $this->_getTimezoneFromParameters($event, $params);
        $this->_getMemberFromParameters($event, $params);

//        if( array_key_exists( 'private', $params ) && $params['private'] == 2 )
//          $this->_getNotifyAddressFromParameters( $event, $params );

        return $event;
    }

    /**
     * 仮予定をパラメータから生成する
     *
     * @access private
     */
    function _createTemporayEvent($params)
    {
        $event = new GRN_Schedule_TemporaryEvent();

        $this->_getContantsFromParameters($event, $params);

        $this->_getAddressDataFromParameters($event, $params);

        $event->setdates = [];

        $this->_getMemberFromParameters($event, $params);

        if (array_key_exists('private', $params) && $params['private'] == 2) {
            $this->_getNotifyAddressFromParameters($event, $params);
        }

        return $event;
    }

    /**
     * 仮予定をパラメータから生成する(空き時間検索用)
     *
     * @author yonekawa
     * @access private
     */
    function createTemporaryEventForAdjustSearch($params)
    {
        require_once('schedule/event_base_logic.csp');
        require_once('schedule/utility.csp');
        $event = new GRN_Schedule_TemporaryEvent();

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        require_once('fw/date.csp');
        $start_datetime = new CB_DateTime();
        $end_datetime = new CB_DateTime();

        $this->_getContantsFromParameters($event, $params);
        $this->_getAddressDataFromParameters($event, $params);

        $datetime_list = $params['datetimes'];
        $isORSearch = false;
        // OR検索で施設を選択している
        if (array_key_exists(GRN_SCHD_ADJUST_NO_FACILITY, $datetime_list)
            === false
        ) {
            // 選択した候補の施設が存在するかをチェックする
            $facilities = [];
            foreach (array_keys($datetime_list) as $faid) {
                $facility = $facility_logic->getFacility($faid);
                if ($facility === false) {
                    continue;
                }

                $facilities[$faid] = $facility;
            }
            $event->facilities = $facilities;

            // 施設が存在したら OR検索
            if (count($facilities) > 0) {
                $isORSearch = true;
            }
        }

        $event->setdates = [];
        foreach ($datetime_list as $faid => $datetimes) {
            $facility_dates = [];
            if ($isORSearch) {
                if ( ! array_key_exists($faid, $facilities)) {
                    continue;
                }

                $facility_dates['facility'] = $facilities[$faid];
            }

            foreach ($datetimes as $datetime) {
                // start_datetime_string=end_datetime_string
                $candidate = explode(GRN_SCHD_ADJUST_DELIMITER, $datetime);
                if ( ! is_array($candidate)) {
                    cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
                }
                if ( ! $start_datetime->parse($candidate[0])) {
                    cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
                }
                if ( ! $end_datetime->parse($candidate[1])) {
                    cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
                }

                $dates = [];
                $dates['setdatetime'] = clone $start_datetime;
                if ( ! is_a($dates['setdatetime'], 'CB_DateTime')) {
                    continue;
                }

                $dates['enddatetime'] = clone $end_datetime;
                if ( ! is_a($dates['enddatetime'], 'CB_DateTime')) {
                    continue;
                }

                // OR Search
                if ($isORSearch) {
                    $facility_dates['dates'][] = $dates;
                } else {
                    $facility_dates[] = $dates;
                }
            }

            if ($isORSearch) {
                $event->setdates[] = $facility_dates;
            } else {
                $event->setdates = $facility_dates;
            }
        }

        // OR検索だった場合はtemporaryrelationの行を作るときに施設メンバーを作成する
        if ($isORSearch && array_key_exists('sITEM', $params) === true) {
            unset($params['sITEM']);
        }

        $this->_getMemberFromParameters($event, $params);

        if (array_key_exists('private', $params) && $params['private'] == 2) {
            $this->_getNotifyAddressFromParameters($event, $params);
        }

        return $event;
    }

    /**
     *予定の内容をパラメータから設定する
     *
     * @access private
     */
    function _getContantsFromParameters($event, $params)
    {
        $event->menu = array_key_exists('menu', $params) ? $params['menu'] : null;
        $event->detail = array_key_exists('title', $params) ? $params['title'] : null;
        $event->memo = array_key_exists('memo', $params) ? $params['memo'] : null;
        $private = array_key_exists('private', $params) ? intval($params['private']) : null;
        if ($private == 1 || $private == 2) {
            require_once('schedule/system_logic.csp');
            $systemlogic = GRN_Schedule_SystemLogic::getInstance();
            if ( ! $systemlogic->getUsePrivate()) {
                cb_throw_error(E_GRN_SCHD_DENY_CREATE_PRIVATE);
            }
        }
        $event->private = $private;
        if (empty($event->private)) {
            $event->private = 0;
        } else {
            $event->private = 1;
        }

        // GTM-1622
        $attendanceCheck = array_key_exists('attendance_check', $params) ? intval($params['attendance_check']) : null;
        if ( ! is_null($attendanceCheck) && $attendanceCheck == 1) {
            $event->attendanceCheck = 1;
        } else {
            $event->attendanceCheck = null;
        }
    }

    /**
     *アドレス内容をパラメータから設定する
     *
     * @access private
     */
    function _getAddressDataFromParameters($event, $params)
    {
        $event->company_name = array_key_exists('company_name', $params) ? $params['company_name'] : null;
        if ( ! is_string($event->company_name) || mb_strlen($event->company_name) == 0) {
            $event->company_name = null;
        }

        $event->zip_code = array_key_exists('zip_code', $params) ? $params['zip_code'] : null;
        if ( ! is_string($event->zip_code) || mb_strlen($event->zip_code) == 0) {
            $event->zip_code = null;
        }

        $event->physical_address = array_key_exists('physical_address', $params) ? $params['physical_address'] : null;
        if ( ! is_string($event->physical_address) || mb_strlen($event->physical_address) == 0) {
            $event->physical_address = null;
        }

        $event->map = array_key_exists('map_url', $params) ? $params['map_url'] : null;
        if ( ! is_string($event->map) || mb_strlen($event->map) == 0) {
            $event->map = null;
        }

        $event->route = array_key_exists('route', $params) ? $params['route'] : null;
        if ( ! is_string($event->route) || mb_strlen($event->route) == 0) {
            $event->route = null;
        }

        $event->route_time = array_key_exists('route_time', $params) ? $params['route_time'] : null;
        if ( ! is_string($event->route_time) || mb_strlen($event->route_time) == 0) {
            $event->route_time = null;
        }

        $event->route_fare = array_key_exists('route_fare', $params) ? $params['route_fare'] : null;
        if ( ! is_string($event->route_fare) || mb_strlen($event->route_fare) == 0) {
            $event->route_fare = null;
        }

        $event->company_telephone_number
            = array_key_exists('company_telephone_number', $params) ? $params['company_telephone_number'] : null;
        if ( ! is_string($event->company_telephone_number) || mb_strlen($event->company_telephone_number) == 0) {
            $event->company_telephone_number = null;
        }

        $event->facsimile_number = array_key_exists('facsimile_number', $params) ? $params['facsimile_number'] : null;
        if ( ! is_string($event->facsimile_number) || mb_strlen($event->facsimile_number) == 0) {
            $event->facsimile_number = null;
        }

        $event->company_url = array_key_exists('url', $params) ? $params['url'] : null;
        if ( ! is_string($event->company_url) || mb_strlen($event->company_url) == 0) {
            $event->company_url = null;
        }
    }

    /**
     *予定の参加者をパラメータから設定する
     *
     * @access private
     */
    function _getMemberFromParameters($event, $params)
    {
        // ユーザーの取り出し
        $user_ids = array_key_exists('sUID', $params) ? $params['sUID'] : null;
        if (is_array($user_ids) && count($user_ids) > 0) {
            $user_ids = array_unique($user_ids);
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $event->users = [];
            $event->groups = [];
            $i = 1;

            // escape用
            $db = $G_container_base->getInstance('dbconn');

            $user_orders = [];
            $user_condition = [];
            $group_orders = [];
            $groupIds = [];
            foreach ($user_ids as $uid) {
                if (mb_strlen($uid) == 0) {
                    continue;
                }

                // 頭がgの場合は組織
                if (mb_strcut($uid, 0, 1) == 'g') {
                    $gid = mb_strcut($uid, 1);
                    $group_orders[$gid] = $i;
                    $groupIds[] = $gid;
                } else {
                    $user_orders[$uid] = $i;
                    $user_condition[] = cb_queryf($db, "'@S'", $uid);
                }
                $i++;
            }
            unset($db);

            $users = [];
            if (count($user_condition) > 0) {
                $user_add_condition = '_id IN (' . implode(',', $user_condition) . ')';
                $users = $uum->getUsers(0, -1, null, $user_add_condition);

                // 取得したユーザーの順番を指定された順番に並べ替える
                if (count($users) > 0) {
                    foreach ($user_orders as $uid => $order) {
                        if ( ! array_key_exists($uid, $users)) {
                            continue;
                        }
                        $event->users[$order] = $users[$uid];
                    }
                }
            }

            $groups = [];
            if (count($groupIds) > 0) {
                $groups = $uum->getGroupListByIds($groupIds);

                // 取得した組織の順番を指定された順番に並べ替える
                if (count($groups) > 0) {
                    foreach ($group_orders as $gid => $order) {
                        if ( ! array_key_exists($gid, $groups)) {
                            continue;
                        }
                        $event->groups[$order] = $groups[$gid];
                    }
                }
            }

            if (count($event->users) == 0) {
                $event->users = null;
            }
            if (count($event->groups) == 0) {
                $event->groups = null;
            }
        }

        // 施設の取り出し
        $facility_ids = array_key_exists('sITEM', $params) ? $params['sITEM'] : null;
        if (is_array($facility_ids) && count($facility_ids) > 0) {
            $facility_ids = array_unique($facility_ids);

            // まとめて取得するための条件を作成
            $i = 1;
            $orders = [];
            $fidArray = [];
            foreach ($facility_ids as $fid) {
                if (mb_strlen($fid) == 0) {
                    continue;
                }

                $fidArray[] = $fid;
                $orders[$fid] = $i;

                $i++;
            }

            require_once('grn/application.csp');
            require_once('schedule/table.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('schedule');
            $facilityTableInfo = $tm->getTableInfo(GRN_FACILITY_FACILITY);


            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            $facilityList = $facility_logic->getFacilityListByIds($fidArray, null, CB_DATABASE_NO_LOCK);

            // 取得した施設の順番を指定された順番に並べ替える
            $event->facilities = [];
            if (count($facilityList) > 0) {
                foreach ($orders as $fid => $order) {
                    foreach ($facilityList as $facilityRow) {
                        $facilityId = $facilityRow->getOID();
                        if ($facilityId == $fid) {
                            $event->facilities[$order] = $facilityRow;
                            break;
                        }
                    }
                }
            }

            if (count($event->facilities) == 0) {
                $event->facilities = null;
            }
        }
    }

    /**
     *予定の通知先をパラメータから設定する
     *
     * @access private
     */
    function _getNotifyAddressFromParameters($event, $params)
    {
        // 公開先ユーザーの取り出し
        $notify_ids = array_key_exists('p_sUID', $params) ? $params['p_sUID']
            : null;
        if (is_array($notify_ids)) {
            $notify_ids = array_unique($notify_ids);
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');

            // escape用
            $db = $G_container_base->getInstance('dbconn');

            $user_condition = [];
            $group_ids = [];
            $role_condition = [];
            foreach ($notify_ids as $key => $target_id) {
                if (mb_strlen($target_id) == 0) {
                    unset($notify_ids[$key]);
                    continue;
                }

                if (mb_strcut($target_id, 0, 1) == 'r') {
                    // 頭がrの場合はロール
                    $role_condition[] = cb_queryf($db, "'@S'",
                        mb_strcut($target_id, 1));
                } elseif (mb_strcut($target_id, 0, 1) == 'g') {
                    // 頭がgの場合は組織
                    $group_ids[] = mb_strcut($target_id, 1);
                } else {
                    // ユーザー
                    $user_condition[] = cb_queryf($db, "'@S'", $target_id);
                }
            }
            unset($db);

            $users = [];
            if (count($user_condition) > 0) {
                $user_add_condition = '_id IN (' . implode(',', $user_condition)
                                      . ')';
                $users = $uum->getUsers(0, -1, null,
                    $user_add_condition);
            }
            $groups = [];
            if (count($group_ids) > 0) {
                $groups = $uum->getGroupListByIds($group_ids);
            }
            $roles = [];
            if (count($role_condition) > 0) {
                $role_condition = 'tab_cb_role._id IN (' . implode(',',
                        $role_condition) . ')';
                $roles = $uum->getStaticRoles(0, -1, null,
                    $role_condition);
            }

            $order = 1;
            foreach ($notify_ids as $target_id) {
                if (mb_strcut($target_id, 0, 1) == 'r') {
                    // 頭がrの場合はロール
                    $rid = mb_strcut($target_id, 1);
                    if (isset($roles[$rid])) {
                        $event->notify_address[$order] = $roles[$rid];
                        $order++;
                    }
                } elseif (mb_strcut($target_id, 0, 1) == 'g') {
                    // 頭がgの場合は組織
                    $gid = mb_strcut($target_id, 1);
                    if (isset($groups[$gid])) {
                        $event->notify_address[$order] = $groups[$gid];
                        $order++;
                    }
                } elseif (isset($users[$target_id])) {
                    // ユーザー
                    $event->notify_address[$order] = $users[$target_id];
                    $order++;
                }
            }

            if (count($event->notify_address) == 0) {
                $event->notify_address = null;
            }
        }
    }

    /**
     * Get timezones of event's dates or datetimes
     *
     * @param  GRN_Schedule_EventBase $event
     * @param  array                  $params
     */
    private function _getTimezoneFromParameters($event, $params)
    {
        $timezone = isset($params['timezone']) ? $params['timezone']
            : CB_I18N::getInstance()->getCurrentTimezone();
        $timezone_list = CB_I18N::getAvailableTimezones();
        // validate timezone support
        if ( ! in_array($timezone, $timezone_list)) {
            cb_throw_error(E_COMMON_MISSING_TIMEZONE, null, null,
                ['timezone' => $timezone]);
        }
        $event->timezone = $timezone;
        $end_timezone = isset($params['end_timezone'])
            ? $params['end_timezone'] : $event->timezone;
        if ( ! in_array($end_timezone, $timezone_list)) {
            cb_throw_error(E_COMMON_MISSING_TIMEZONE, null, null,
                ['timezone' => $end_timezone]);
        }
        $event->end_timezone = $end_timezone;
    }

    /**
     * @param GRN_Schedule_EventBase $event
     * @param array                  $params
     */
    private function _getAdditionalItemsFromParameters($event, $params)
    {
        $additional_items = cb_at($params, 'additional_items');
        if (is_string($additional_items)) {
            $event->additional_items = $additional_items;
        }
    }

    /**
     * パラメータから日付型を生成する
     *
     * @param       string $year   年
     * @param       string $month  月
     * @param       string $day    日
     * @param       string $hour   時
     * @param       string $minute 分
     * @param       string $second 年
     *
     * @return      CB_Date、CB_Time、CB_DateTimeExを返す。生成できない場合は、NULLがかえる
     */
    function createDateTimeFromParameters(
        $year,
        $month,
        $day,
        $hour = null,
        $minute = null,
        $second = null
    ) {
        require_once('schedule/utility.csp');
        $ret = $this->_createDateTime($year, $month, $day, $hour, $minute,
            $second);

        return $ret;
    }

    /**
     * パラメータから日付型を生成する
     *
     * @access private
     *
     * @param       string $year   年
     * @param       string $month  月
     * @param       string $day    日
     * @param       string $hour   時
     * @param       string $minute 分
     * @param       string $second 年
     *
     * @return      CB_Date|CB_Time|CB_DateTimeEx
     */
    function _createDateTime(
        $year,
        $month,
        $day,
        $hour,
        $minute,
        $second = null
    ) {
        if ( ! is_null($year) && ( ! is_null($hour) && mb_strlen($hour) != 0)) {
            $date = new CB_Date();
            $date->year = intval($year);
            $date->month = intval($month);
            $date->day = intval($day);

            $time = new CB_Time();
            $time->hour = intval($hour);
            $time->minute = intval($minute);
            if ( ! is_null($second)) {
                $time->second = intval($second);
            }

            $ret = grn_schedule_get_datetime($date, $time);

            return $ret;
        } elseif ( ! is_null($year)) {
            $date = new CB_Date();
            $date->year = intval($year);
            $date->month = intval($month);
            $date->day = intval($day);

            return $date;
        } elseif (( ! is_null($hour) && mb_strlen($hour) != 0)) {
            $time = new CB_Time();
            $time->hour = intval($hour);
            $time->minute = intval($minute);
            if ( ! is_null($second)) {
                $time->second = intval($second);
            }

            return $time;
        }

        $null_obj = null;

        return $null_obj;
    }

    /**
     * 翌週の開始日を求める
     *
     * @param   mixed  $datetime  基準となる日付
     * @param   string $startwday 開始の曜日（0：日曜～6土曜日）
     *
     * @return  CB_DateEx    求めた日付
     */
    function getNextWeekDate($datetime, $startwday)
    {
        $date = new CB_Date();
        $date->year = intval($datetime->year);
        $date->month = intval($datetime->month);
        $date->day = intval($datetime->day);

        $dateex = new CB_DateEx($date);

        $wday = $dateex->getDayOfWeek();
        if ($wday < intval($startwday)) {
            $dateex->moveDays(-7);
        }

        $dateex->moveDays(7 - ($wday - intval($startwday)));

        return $dateex;
    }

    /**
     * 前週の開始日を求める
     *
     * @param   mixed  $datetime  基準となる日付
     * @param   string $startwday 開始の曜日（0：日曜～6土曜日）
     *
     * @return  CB_DateEx    求めた日付
     */
    function getPrevWeekDate($datetime, $startwday)
    {
        $date = new CB_Date();
        $date->year = intval($datetime->year);
        $date->month = intval($datetime->month);
        $date->day = intval($datetime->day);

        $dateex = new CB_DateEx($date);

        $wday = $dateex->getDayOfWeek();
        if ($wday > intval($startwday)) {
            $dateex->moveDays(7);
        }

        $dateex->moveDays((intval($startwday) - $wday) - 7);

        return $dateex;
    }

    /**
     * 翌月の1日を求める
     *
     * @param   mixed $datetime 基準となる日付
     * @param   int   $move     移動させる月数
     *
     * @return  CB_DateEx    求めた日付
     */
    function getNextMonthDate($datetime, $move = 1)
    {
        $date = new CB_Date();
        $date->year = intval($datetime->year);
        $date->month = intval($datetime->month);
        $date->day = 1;
        $dateex = new CB_DateEx($date);
        $dateex->moveMonths(1 * intval($move));

        return $dateex;
    }

    /**
     * 前月の最終日付を求める
     *
     * @param   mixed $datetime 基準となる日付
     * @param   int   $move     移動させる月数
     *
     * @return  CB_DateEx    求めた日付
     */
    function getPrevMonthDate($datetime, $move = 1)
    {
        $date = new CB_Date();
        $date->year = intval($datetime->year);
        $date->month = intval($datetime->month);
        $date->day = 1;
        $dateex = new CB_DateEx($date);
        $dateex->moveMonths(-1 * intval($move));
        $dateex->day = $dateex->getEndOfMonthDay();

        return $dateex;
    }

    /**
     * 翌年の1月1日を求める
     *
     * @param   mixed $datetime 基準となる日付
     * @param   int   $move     移動させる年数
     *
     * @return  CB_DateEx    求めた日付
     */
    function getNextYearDate($datetime, $move = 1)
    {
        $date = new CB_Date();
        $date->year = intval($datetime->year) + 1;
        $date->month = 1;
        $date->day = 1;
        $dateex = new CB_DateEx($date);

        return $dateex;
    }

    /**
     * 前年の最終日付を求める
     *
     * @param   mixed $datetime 基準となる日付
     * @param   int   $move     移動させる年数
     *
     * @return  CB_DateEx    求めた日付
     */
    function getPrevYearDate($datetime, $move = 1)
    {
        $date = new CB_Date();
        $date->year = intval($datetime->year) - 1;
        $date->month = 12;
        $date->day = 31;
        $dateex = new CB_DateEx($date);

        return $dateex;
    }

    /**
     * 表示する時刻を文字列で生成する
     *
     * @param   CB_Date $date        表示する日付
     * @param   mixed   $setdatetime 開始日時
     * @param   mixed   $enddatetime 終了日時
     * @param   int     $type        イベントタイプ
     * @param   boolean $showendtime 終了時間を表示するかどうか
     *
     * @return  string  表示用の日付時刻
     */
    function getViewHour(
        $date,
        $setdatetime,
        $enddatetime,
        $type,
        $showendtime = false,
        $event = null
    ) {
        static $time_splitter = null;
        if (is_null($time_splitter)) {
            $time_splitter = cb_msg('grn.schedule', 'time_splitter');
        }

        $str_hour = '';
        if (($type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            // GRN2-3034
            $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
            if ($event && @$event['timezone'] == $current_tz) {
                return '';
            } else {
                // convert time 00:00-23:59 to timezone of user view
                $dateex = new CB_DateEx($date);
                if ($dateex->compare($setdatetime) == 0) {
                    $str_hour .= cb_date_format('TimeShort_HM', $setdatetime);
                } else {
                    $str_hour .= cb_date_format('DateShort_MD', $setdatetime);
                }
                $str_hour .= $time_splitter;
                if ($dateex->compare($enddatetime) == 0) {
                    $str_hour .= cb_date_format('TimeShort_HM', $enddatetime);
                } else {
                    $str_hour .= cb_date_format('DateShort_MD', $enddatetime);
                }
            }
        } elseif (($type & GRN_SCHEDULE_EVENT_TYPE_START)
                  == GRN_SCHEDULE_EVENT_TYPE_START
        ) {
            $str_hour .= cb_date_format('TimeShort_HM', $setdatetime);
        } else {
            static $dateex = false;
            if ($dateex === false) {
                $dateex = new CB_DateEx($date);
            } else {
                $dateex->year = $date->year;
                $dateex->month = $date->month;
                $dateex->day = $date->day;
            }

            if ($dateex->compare($setdatetime) == 0) {
                $str_hour .= cb_date_format('TimeShort_HM', $setdatetime);
            } // 日付が違う場合は、日付を表示
            else {
                $str_hour .= cb_date_format('DateShort_MD', $setdatetime);
            }

            // 終了時刻を表示する設定の場合
            if ($showendtime) {
                $str_hour .= $time_splitter;
                if ($dateex->compare($enddatetime) == 0) {
                    $str_hour .= cb_date_format('TimeShort_HM', $enddatetime);
                } // 日付が違う場合は、日付を表示
                else {
                    $str_hour .= cb_date_format('DateShort_MD', $enddatetime);
                }

            }
        }

        return $str_hour;
    }

    function getViewHourTimezone(
        $date,
        $setdatetime,
        $enddatetime,
        $type,
        $showendtime = false,
        $timezone
    ) {
        $dateex = new CB_DateEx($date);
        $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
        $setdatetime_tz = grn_schedule_convert_datetime_tz1_to_tz2($setdatetime,
            $current_tz, $timezone);
        $enddatetime_tz = grn_schedule_convert_datetime_tz1_to_tz2($enddatetime,
            $current_tz, $timezone);
        // remove redundance sh so timezone
        if ($dateex->compare($setdatetime_tz) < 0
            || $dateex->compare($enddatetime_tz) > 0
        ) {
            return "";
        }

        $str_hour = $this->getViewHour($date, $setdatetime_tz, $enddatetime_tz,
            $type, $showendtime);

        return $str_hour;
    }

    /**
     * 表示用のイベントタイプ
     *
     * @param   int     $type   イベントタイプ
     * @param   boolean $shared 共有かどうか
     *
     * @return  string  表示用のイベントタイプの文字列
     */
    function getViewEventType($type, $shared)
    {
        $str_type = '';

        if (($type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
            == GRN_SCHEDULE_EVENT_TYPE_REPEAT
        ) {
            $str_type .= 'repeat';
            if ($shared) {
                $str_type = 'share_' . $str_type;
            }
        } elseif (($type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
                  == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            if ($shared) {
                $str_type = 'share';
            } else {
                $str_type .= 'normal';
            }
        } elseif (($type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                  == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
        ) {
            $str_type .= 'temporary';
            if ($shared) {
                $str_type = 'share_' . $str_type;
            }
        } elseif (($type & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                  == GRN_SCHEDULE_EVENT_TYPE_BANNER
        ) {
            $str_type .= 'banner';
            if ($shared) {
                $str_type = 'share_' . $str_type;
            }
        }

        return $str_type;
    }

    /**
     * カレンダーとして最初の日付を求める
     *
     * @param   CB_Date $date      求める日付
     * @param   string  $startwday 開始の曜日（0：日曜～6土曜日）
     *
     * @return  CB_DateEx   求めた開始日
     */
    function getCalendarStartDate($date, $startwday)
    {
        $dateex = new CB_DateEx($date);

        $dateex->day = 1;
        $dateex->moveDays((intval($startwday) - $dateex->getDayOfWeek()));
        if ($startwday != 0 && $dateex->day > 1 && $dateex->day < 8) {
            $dateex->moveDays(-7);
        }

        return $dateex;
    }

    /**
     * カレンダーとして最終の日付を求める
     *
     * @param   CB_Date $date      求める日付
     * @param   string  $startwday 開始の曜日（0：日曜～6土曜日）
     *
     * @return  CB_DateEx   求めた最終日
     */
    function getCalendarEndDate($date, $startwday)
    {
        $dateex = new CB_DateEx($date);

        $dateex->day = $dateex->getEndOfMonthDay();
        $dateex->moveDays(6 - ($dateex->getDayOfWeek() - intval($startwday)));

        if ($startwday != 0 && $dateex->day >= 7 && $dateex->day <= 13) {
            $dateex->moveDays(-7);
        }


        return $dateex;
    }


    /**
     * 曜日のタイプを取得する
     *
     * @param   CB_DateEx $date 日付
     *
     * @return  string          文字列
     */
    function getDayType($date, $country = null)
    {
        // 
        switch ($date->getDayOfWeek()) {
            case 0:         // 日曜
                return 's_date_sunday';
                break;
            case 1:         // 月曜
                return 's_date_monday';
                break;
            case 2:         // 火曜
                return 's_date_tuesday';
                break;
            case 3:         // 水曜
                return 's_date_wednesday';
                break;
            case 4:         // 木曜
                return 's_date_thursday';
                break;
            case 5:         // 金曜
                return 's_date_friday';
                break;
            case 6:        // 土曜日
                return 's_date_saturday';
                break;
        }

        return 's_date';
    }

    /**
     * 奇数月・偶数月別の、曜日のタイプを取得する
     *
     * @param  CB_DateEx $date 日付
     *
     * @return string 文字列
     */
    function getDayMonthType($date, $country = null)
    {
        // 奇数月・偶数月の判定
        if (($date->month % 2) === 0) {
            // 偶数月
            $month_class = 'even';
        } else {
            // 奇数月
            $month_class = 'odd';
        }

        switch ($date->getDayOfWeek()) {
            case 0: // 日曜
                return 's_date_sunday_' . $month_class;
                break;
            case 1: // 月曜
                return 's_date_monday_' . $month_class;
                break;
            case 2: // 火曜
                return 's_date_tuesday_' . $month_class;
                break;
            case 3: // 水曜
                return 's_date_wednesday_' . $month_class;
                break;
            case 4: // 木曜
                return 's_date_thursday_' . $month_class;
                break;
            case 5: // 金曜
                return 's_date_friday_' . $month_class;
                break;
            case 6: // 土曜日
                return 's_date_saturday_' . $month_class;
                break;
        }

        return 's_date';
    }

    /**
     * バナーの期間を求める
     *
     * @param   CB_Date $setdate    バナーの開始日
     * @param   CB_Date $enddate    バナーの終了日
     * @param   CB_Date $start_date 表示の開始日
     * @param   CB_Date $last_date  表示の終了日
     *
     * @return  string          表示用の文字列
     */
    function getBannerTerm($setdate, $enddate, $start_date, $last_date)
    {
        $start_date = new CB_DateEx($start_date);
        $last_date = new CB_DateEx($last_date);
        $str_tarm = '';
        if ($start_date->compare($setdate) >= 0) {
            $str_tarm .= '0_';
        } else {
            $span = $start_date->getInterval($setdate);
            $str_tarm .= abs($span->toDays()) . '_';
        }

        if ($last_date->compare($enddate) <= 0) {
            $str_tarm .= '6';
        } else {
            $span = $start_date->getInterval($enddate);
            $str_tarm .= abs($span->toDays());
        }

        return $str_tarm;
    }

    /**
     * 表示用の繰り返しの条件
     *
     * @param   string      $repeat_type 繰り返しのタイプ
     * @param   string      $wday        曜日
     * @param   string      $day         日付
     * @param   string|null $locale
     *
     * @return  string      詳細表示用の文字列
     */
    function getRepeatData($repeat_type, $wday, $day, $locale = null)
    {
        $condition = ['day' => '', 'suffix' => '', 'separator' => ''];

        if (is_null($locale)) {
            $i18n = CB_I18N::getInstance();
            $locale = $i18n->getCurrentLanguage();
        }

        if (array_key_exists($repeat_type, $this->enumRepeatTypeResourceKey)) {
            $condition['prefix'] = cb_msg('grn.schedule',
                $this->enumRepeatTypeResourceKey[$repeat_type], null, $locale);
        }

        switch ($repeat_type) {
            case GRN_REPEAT_TYPE_WEEK:
            case GRN_REPEAT_TYPE_1STWEEK:
            case GRN_REPEAT_TYPE_2NDWEEK:
            case GRN_REPEAT_TYPE_3RDWEEK:
            case GRN_REPEAT_TYPE_4THWEEK:
            case GRN_REPEAT_TYPE_LASTWEEK:
                if ($locale == 'en') {
                    $condition['separator'] = ' ';
                }
                if (isset($this->enumDayResourceKey[intval($wday)])) {
                    $condition['suffix'] = cb_msg('grn.schedule',
                        $this->enumDayResourceKey[intval($wday)], null,
                        $locale);
                }
                break;
            case GRN_REPEAT_TYPE_MONTH:
                if ($day == 0) {
                    $condition['prefix'] = cb_msg('grn.schedule',
                        'everylastdayofmonth', null, $locale);
                } else {
                    $condition['suffix'] = cb_msg('grn.schedule', 'day',
                        null, $locale);
                    $condition['day'] = (string)$day;
                    $condition['separator'] = ' ';
                }
                break;
        }

        return cb_msg('grn.schedule', 'repeat_event', $condition, $locale);
    }


    /**
     * 表示時間をチェックする関数
     *
     * @param   CB_Date         基準となる日付
     * @param   CB_DateTime $setdatetime 開始日時
     * @param   CB_DateTime $enddatetime 終了日時
     * @param   int         $set_hour    表示の開始時刻
     * @param   int         $end_hour    表示の終了時刻
     */
    function checkViewTime(
        $date,
        $setdatetime,
        $enddatetime,
        &$set_hour,
        &$end_hour
    ) {
        // 開始日時に時刻がない場合はそのままかえる
        if ( ! is_a($setdatetime, 'CB_DateTime')) {
            return;
        }

        $dateex = new CB_DateEx($date);

        // 開始時間を見る
        if ($dateex->compare($setdatetime) == 0) {
            // 開始時刻が前の場合
            if ($set_hour > $setdatetime->hour) {
                $set_hour = $setdatetime->hour;
            }

            // 終了時刻の後の場合
            if ($end_hour <= $setdatetime->hour) {
                $end_hour = $setdatetime->hour + 1;
            }
        }

        if (is_a($enddatetime, 'CB_DateTime')
            && ($dateex->compare($enddatetime) == 0)
        ) {
            if ((($dateex->compare($setdatetime) > 0)
                 && ($enddatetime->hour < $set_hour))
                || ($set_hour == $enddatetime->hour
                    && $enddatetime->minute == 0)
            ) {
                $set_hour = $enddatetime->hour - 1;
                if ($set_hour < 0) {
                    $set_hour = 0;
                }
            }

            if ($enddatetime->hour >= $end_hour) {
                $end_hour = $enddatetime->hour;
                if ($enddatetime->minute > 0) {
                    $end_hour += 1;
                }
            }
        }

        // 24時を超えません
        if ($end_hour > 24) {
            $end_hour = 24;
        }
    }


    /**
     * 指定された日付が祝日かどうかをチェックする
     *
     * @param   CB_Date $date
     * @param   array   $calendars
     * retrun   boolean
     */
    function isHoliday($date, $calendars)
    {
        if ( ! is_array($calendars) || count($calendars) == 0) {
            return false;
        }

        require_once('grn/calendar.csp');
        if (array_key_exists($date->format(), $calendars)) {
            foreach ($calendars[$date->format()] as $calendar) {
                if ($calendar['type'] == GRN_CALENDAR_TYPE_PUBLICHOLIDAY) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * 指定された日付が就業日かどうかをチェックする
     *
     * @param   CB_Date $date
     * @param   array   $calendars
     * retrun   boolean
     */
    function isWorkday($date, $calendars, $user = null)
    {
        if ( ! is_array($calendars) || count($calendars) == 0) {
            return false;
        }

        if (array_key_exists($date->format(), $calendars)) {
            require_once('grn/calendar.csp');
            $util = GRN_CalendarUtil::getInstance();

            foreach ($calendars[$date->format()] as $calendar) {
                if ($util->isWorkDay($calendar, $user)) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * 通知の表題の取得
     *
     * @param   CB_Date $date
     * @param   mixed   $setdatetime
     * @param   mixed   $enddatetime
     * @param   string  $title
     * @param   string  $receiver_uid
     *
     * @return  string
     */
    function getNotifyTitle($title)
    {
        require_once('schedule/notification.csp');
        $notify_logic = GRN_Schedule_Notify_Logic::getInstance();

        return $notify_logic->getNotifyTitle($title);
    }

    /**
     * 項目オプション一覧を取得する
     */
    function listItemTypeOptions($selected = null)
    {
        $item_types = [
            GRN_SCHEDULE_ITEM_STRING,
            GRN_SCHEDULE_ITEM_MULTIPLE_STRING,
            GRN_SCHEDULE_ITEM_MENU
        ];

        $item_type_options = [];
        foreach ($item_types as $item_type) {
            $label = cb_msg('grn/schedule',
                'item_type_' . $item_type);
            $item_type_options[$item_type] = [
                'value'    => $item_type,
                'label'    => $label,
                'selected' => $item_type == $selected
            ];
        }

        return $item_type_options;
    }

    function orderUsersEventBySearchKey($users_event, $search_text)
    {
        $texts = cb_parse_search_text($search_text);
        if (count($texts) <= 1) {
            return $users_event;
        }
        // event search result
        $users_event_search = [];
        $user_ids = [];
        $uum = cb_lwc_uum();
        $item_values = $uum->getDefaultItemProperties();

        require_once('grn/uum_search.csp');
        require_once("fw/i18n/system_config.csp");
        $uum_search = new GRN_Uum_Search();
        $columns = [
            'col_display_name',
            'col_foreign_key',
            'col_normalized_sort_key',
            'col_nickname',
            'col_email_address',
            'col_post'
        ];
        $users_info = $uum_search->getUsersInfo(array_keys($users_event), $columns);
        foreach ($texts as $text) {
            $text = mb_strtolower($text);
            $user_event_ids = $this->searchUsersExtensionsInfo($text);
            foreach ($users_event as $user_event_id => $user_event) {
                if (array_key_exists($user_event_id, $user_ids)) {
                    //If the user is already ordered, go next.
                    continue;
                }

                if (substr($user_event_id, 0, 1) == 'f') {
                    $facility_name = mb_strtolower($user_event['facility_title']);
                    $facility_memo = mb_strtolower($user_event['facility_memo']);

                    if (mb_strpos($facility_memo, $text) !== false || mb_strpos($facility_name, $text) !== false) {
                        $users_event_search[] = $user_event;
                        $user_ids[$user_event_id] = $user_event_id;
                    }
                    continue;
                }

                if (isset($users_info[$user_event_id])) {
                    $user_info = $users_info[$user_event_id];

                    $display_name = mb_strtolower($user_info['col_display_name']);
                    if (mb_strpos($display_name, $text) !== false) {
                        $users_event_search[] = $user_event;
                        $user_ids[$user_event_id] = $user_event_id;
                        continue;
                    }
                    if ($item_values['foreign_key']['show']) {
                        $foreign_key = mb_strtolower($user_info['col_foreign_key']);
                        if (mb_strpos($foreign_key, $text) !== false) {
                            $users_event_search[] = $user_event;
                            $user_ids[$user_event_id] = $user_event_id;
                            continue;
                        }
                    }
                    if ($item_values['sort_key']['use'] && $item_values['sort_key']['show']) {
                        $sort_key = mb_strtolower($user_info['col_normalized_sort_key']);
                        if (mb_strpos($sort_key, $text) !== false) {
                            $users_event_search[] = $user_event;
                            $user_ids[$user_event_id] = $user_event_id;
                            continue;
                        }
                    }

                    if (CB_I18N_SystemConfig::isNickname()) {
                        if ($item_values['nickname']['use'] && $item_values['nickname']['show']) {
                            $sort_key = mb_strtolower($user_info['col_nickname']);
                            if (mb_strpos($sort_key, $text) !== false) {
                                $users_event_search[] = $user_event;
                                $user_ids[$user_event_id] = $user_event_id;
                                continue;
                            }
                        }
                    }
                    if ($item_values['email_address']['use'] && $item_values['email_address']['show']) {
                        $email_address = mb_strtolower($user_info['col_email_address']);
                        if (mb_strpos($email_address, $text) !== false) {
                            $users_event_search[] = $user_event;
                            $user_ids[$user_event_id] = $user_event_id;
                            continue;
                        }
                    }
                    if ($item_values['post']['use'] && $item_values['post']['show']) {
                        $post = mb_strtolower($user_info['col_post']);
                        if (mb_strpos($post, $text) !== false) {
                            $users_event_search[] = $user_event;
                            $user_ids[$user_event_id] = $user_event_id;
                            continue;
                        }
                    }
                }
                // search extension field
                if (in_array($user_event_id, $user_event_ids)) {
                    $users_event_search[] = $user_event;
                    $user_ids[$user_event_id] = $user_event_id;
                    continue;
                }

            }
        }
        if (count($users_event_search) > 0) {
            return $users_event_search;
        } else {
            return $users_event;
        }
    }

    /**
     * @param $text
     *
     * @return array
     */
    private function searchUsersExtensionsInfo($text)
    {
        $dbconn = cb_get_master_db();

        $extend_condition = 'tab_cb_user.col_deleted IS NULL AND r.col_user=tab_cb_user._id'
                            . ' AND i.col_use=1 AND i.col_show=1 AND i.col_search=1 AND i.col_type<>"password"';
        $extend_query = " SELECT GROUP_CONCAT(tab_cb_user._id SEPARATOR ' ') as id"
                        . " FROM tab_cb_user, tab_grn_itemuserrelation r INNER JOIN tab_grn_useritem i ON r.col_item=i._id"
                        . " WHERE " . $extend_condition . " AND r.col_string LIKE '%@L%' ";

        $extend_query = cb_queryf($dbconn, $extend_query, $text);
        $extend_query = $dbconn->select_format($extend_query, 0, 1, CB_DATABASE_NO_LOCK);
        $result = $dbconn->query($extend_query);

        $concatenated_user_ids = null;
        while ($row = $dbconn->fetch_assoc($result)) {
            $concatenated_user_ids = $row['id'];
        }
        $dbconn->free_result($result);

        $user_ids = ! is_null($concatenated_user_ids) ? explode(" ", $concatenated_user_ids) : [];

        return $user_ids;
    }

    private static function getSelectBoxDataOnPersonalPage_Group(
        $showgroup,
        $group,
        $group_id,
        $login,
        $dynamic_roles
    ) {
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();

        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        require_once('grn/controller.csp');

        if ($showgroup) {
            $members['g' . $group->getOID()] = cb_msg('grn.common',
                'title_group', ['name' => $group->get('name')]);
        }
        $group_users = $uum->getGroupUsers($group_id, 0, -1,
            'tab_cb_user.col_position', null, GRN_SCHEDULE_APPLICATION_ID);
        if (array_key_exists($login->getOID(), $group_users)) {
            $members[$login->getOID()]
                = GRN_ControllerUtil::getUserNameText($login->getOID(),
                $login->getOID());
        }
        $group_users = $acc_logic->evaluateAccesses($login, $group_users,
            ['read'], $dynamic_roles, 'user');

        $users_info
            = GRN_ControllerUtil::getUserInfoToShowUserName(array_keys($group_users),
            $login);
        foreach ($group_users as $_id => $g_user) {
            $members[$_id]
                = htmlspecialchars(GRN_ControllerUtil::getUserNameText($login->getOID(),
                $_id, $users_info));
        }

        return $members;
    }

    /**
     * @param GRN_MyGroup $group
     * @param CB_User     $login
     * @param             $dynamic_roles
     *
     * @return string[]
     */
    private static function getSelectBoxDataOnPersonalPage_MyGroup(
        $group,
        $login,
        $dynamic_roles
    ) {
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();

        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        require_once('grn/controller.csp');

        global $G_container_base;
        /** @var GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $group_users = $uum->getMyGroupUsers($group->getOID(), 0, -1, null,
            null, GRN_SCHEDULE_APPLICATION_ID);
        $members = [];

        if (array_key_exists($login->getOID(), $group_users)) {
            $members[$login->getOID()]
                = GRN_ControllerUtil::getUserNameText($login->getOID(),
                $login->getOID());
        }
        $group_users = $acc_logic->evaluateAccesses($login, $group_users,
            ['read'], $dynamic_roles, 'user');

        $users_info
            = GRN_ControllerUtil::getUserInfoToShowUserName(array_keys($group_users),
            $login);
        foreach ($group_users as $_id => $g_user) {
            $members[$_id]
                = htmlspecialchars(GRN_ControllerUtil::getUserNameText($login->getOID(),
                $_id, $users_info));
        }

        $facility_ids = $uum->getMyGroupFacilitiesId($group->getOID());
        $facilities = $acc_logic->evaluateAccessesById($login, $facility_ids,
            ['read'], $dynamic_roles, 'facility');
        if (is_array($facilities) && count($facilities)) {
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();
            $facilities_info = $facility_logic->getFacilitiesInfo($facilities,
                CB_DATABASE_DEFAULT_LOCK, ['order_by_ids' => true]);

            foreach ($facilities_info as $_id => $g_facility) {
                $members['f' . $_id]
                    = htmlspecialchars($g_facility['col_name']);
            }
        }

        return $members;
    }

    private static function getSelectBoxDataOnPersonalPage_FrequentUser(
        $frequent_users,
        $login,
        $dynamic_roles
    ) {
        require_once('grn/controller.csp');

        if (array_key_exists($login->getOID(), $frequent_users)) {
            $members[$login->getOID()]
                = GRN_ControllerUtil::getUserNameText($login->getOID(),
                $login->getOID());
        }

        $users_info
            = GRN_ControllerUtil::getUserInfoToShowUserName(array_keys($frequent_users),
            $login);
        foreach ($frequent_users as $_id => $g_user) {
            $members[$_id]
                = htmlspecialchars(GRN_ControllerUtil::getUserNameText($login->getOID(),
                $_id, $users_info));
        }

        return $members;
    }

    private static function getSelectBoxDataOnPersonalPage_Facility(
        $group,
        $login,
        $dynamic_roles
    ) {
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        // 施設のアクセス権は施設グループをたどって評価する
        $facilities = [];
        $tmp_fgroups = [$group->getOID() => $group];

        $facilities = $facility_logic->getGroupFacilities($group->getOID());
        $facilities = $acc_logic->evaluateAccessesById($login, $facilities,
            ['read'], $dynamic_roles, 'facility');
        foreach ($facilities as $faid => $facility) {
            $members['f' . $faid] = htmlspecialchars($facility->get('name'));
        }

        return $members;
    }

    private static function getSelectBoxDataOnPersonalPage_AllFacilities(
        $login,
        $dynamic_roles
    ) {
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        $facilities = $facility_logic->getOrderedFacilityPartInfoList();
        $facilities = $acc_logic->evaluateAccessesById($login, $facilities,
            ['read'], $dynamic_roles, 'facility');
        foreach ($facilities as $faid => $facility) {
            $members['f' . $faid] = htmlspecialchars($facility['col_name']);
        }

        return $members;
    }

    private static function getSelectBoxDataOnPersonalPage_Rest(
        $member,
        $member_id,
        $login
    ) {
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();

        require_once('grn/controller.csp');
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();

        $members = [];
        if (is_a($member, 'CB_User')) {
            if (AppAccess::isAppAvailableInternalAccess(GRN_SCHEDULE_APPLICATION_ID,
                $member_id)
            ) {
                $members[$member_id]
                    = htmlspecialchars(GRN_ControllerUtil::getUserNameText($login->getOID(),
                    $member->getOID()));
            }
        } elseif (is_a($member, 'CB_Group')) {
            $members[$member_id] = cb_msg('grn.common', 'title_group',
                ['name' => $member->get('name')]);
        } else {
            if (mb_substr($member_id, 0, 1) == 'f'
                || AppAccess::isAppAvailableInternalAccess(GRN_SCHEDULE_APPLICATION_ID,
                    $member_id)
            ) {
                $members[$member_id] = htmlspecialchars($member->get('name'));
            }
        }

        return $members;
    }

    public static function getSelectBoxDataOnPersonalPage(
        $showgroup,
        $frequent_users,
        $group,
        $group_id,
        $member,
        $member_id,
        $login,
        $dynamic_roles
    ) {
        // ユーザーリストに表示するユーザー名の取得

        // 組織
        if (is_a($group, 'CB_Group')) {
            return static::getSelectBoxDataOnPersonalPage_Group($showgroup,
                $group, $group_id, $login, $dynamic_roles);
        } // Myグループ
        elseif (is_a($group, 'GRN_MyGroup')) {
            return static::getSelectBoxDataOnPersonalPage_MyGroup($group,
                $login, $dynamic_roles);
        } // よく利用するユーザー
        elseif (is_string($group) && $group == 'frequent') {
            return static::getSelectBoxDataOnPersonalPage_FrequentUser($frequent_users,
                $login, $dynamic_roles);
        } // 施設グループ
        elseif (is_a($group, 'GRN_Facility_FacilityGroup')) {
            return static::getSelectBoxDataOnPersonalPage_Facility($group,
                $login, $dynamic_roles);
        } elseif (is_string($group) && $group == 'f') {
            return static::getSelectBoxDataOnPersonalPage_AllFacilities($login,
                $dynamic_roles);
        } elseif ( ! $group) {
            return static::getSelectBoxDataOnPersonalPage_Rest($member,
                $member_id, $login);
        }

        return [];
    }

    public static function getSucceededAttendeeFromEvent($event, $login)
    {
        $ret = [];

        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $group_ids = [];
        if (is_array($event->groups) && count($event->groups) > 0) {
            foreach (array_keys($event->groups) as $key) {
                $member = $event->groups[$key];
                if ( ! $member) {
                    continue;
                }

                $group_ids[$member->getOID()] = $member->getOID();
            }
            $groups_info = $uum->getGroupInfoList($group_ids);
            foreach ($groups_info as $group_id => $info) {
                $ret['g' . $group_id] = '[' . $info['col_name'] . ']';
            }
        }

        require_once('grn/controller.csp');

        if ($event->users) {
            $uids = [];
            foreach (array_keys($event->users) as $key) {
                $member = $event->users[$key];
                if ( ! $member) {
                    continue;
                }

                $uids[] = $member->getOID();
            }
            $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids,
                $login);

            foreach (array_keys($event->users) as $key) {
                $member = $event->users[$key];
                if ( ! $member) {
                    continue;
                }

                $ret[$member->getOID()]
                    = GRN_ControllerUtil::getUserNameText($login->getOID(),
                    $key, $users_info);
            }
        }

        return $ret;
    }

    /**
     * @return CB_Time
     */
    public static function getAlldayStartTime()
    {
        $start_time = new CB_Time();
        $start_time->hour = self::ALLDAY_EVENT_START_HOUR;
        $start_time->minute = self::ALLDAY_EVENT_START_MINUTE;
        $start_time->second = self::ALLDAY_EVENT_START_SECOND;

        return $start_time;
    }

    /**
     * @return CB_Time
     */
    public static function getAlldayEndTime()
    {
        $end_time = new CB_Time();
        $end_time->hour = GRN_Schedule_View_Util::ALLDAY_EVENT_END_HOUR;
        $end_time->minute = GRN_Schedule_View_Util::ALLDAY_EVENT_END_MINUTE;
        $end_time->second = GRN_Schedule_View_Util::ALLDAY_EVENT_END_SECOND;

        return $end_time;
    }

    /**
     * Get todos
     *
     * @param CB_User $user
     * @param CB_Date $date
     *
     * @return array
     */
    public function getDayToDoListView($user, $date, $to = null)
    {
        assert('$user instanceof CB_User');
        assert('$date instanceof CB_Date');
        require_once('todo/application.csp');
        $todos = [];
        if (GRN_ToDo::isEnableTodo()) {
            require_once('todo/schedule_util.csp');
            $todos = GRN_ToDo_ScheduleUtil::getDayToDoListView($user, $date,
                $to);
        }

        foreach (array_keys($todos) as $key) {
            $todo =& $todos[$key];
            $todo['title'] = htmlspecialchars($todo['title']);
            $todo['memo'] = htmlspecialchars($todo['memo']);
        }

        return $todos;
    }

    /**
     * @param array  $user_info   User Info
     * @param string $referer_key Referer Key
     *
     * @return string
     */
    public static function getUserProfileURL($user_info, $referer_key)
    {
        if (defined('ON_FOREST')) {
            return self::getForestUserProfileURL($user_info['col_foreign_key']);
        }

        return self::getScheduleUserProfileURL($user_info['_id'], $referer_key);
    }

    /**
     * @param string $foreign_key Login Name
     *
     * @return string
     */
    private static function getForestUserProfileURL($foreign_key)
    {
        require_once('grn/controller.csp');

        return GRN_ControllerUtil::getForestUserProfileURL($foreign_key);
    }

    /**
     * @param int    $uid         User ID
     * @param string $referer_key Referer Key
     *
     * @return string
     */
    private static function getScheduleUserProfileURL($uid, $referer_key)
    {
        $pageurl = 'schedule/user_view';

        return cb_pageurl($pageurl,
            ['uid' => $uid, 'referer_key' => $referer_key]);
    }

    /**
     * @param $members
     * @param $login_id
     * @param $group
     *
     * @return bool
     */
    public function isSelfContainedInMember($members, $login_id, $group)
    {
        if ( ! $members) {
            return false;
        }

        if ( ! array_key_exists($login_id, $members)) {
            return false;
        }

        $selfContainedGroup = ["array" => false, "string" => false];

        if (is_array($group)) {
            $selfContainedGroup['array'] = $group['type'] == 'group'
                                           || $group['type'] == 'mygroup';
        }
        if (is_string($group)) {
            $selfContainedGroup['string'] = $group === 'login'
                                            || $group == 'virtual'
                                            || $group == 'frequent'
                                            || $group == 'selected'
                                            || $group == 'search';
        }

        return $selfContainedGroup["array"] || $selfContainedGroup["string"]
               || ! $group;
    }

    /**
     * using drag drop schedule
     * GTM-415
     */
    public function getUsingDragDropSchedule($login)
    {
        // In portal setting page, D&D is disabled
        if (preg_match('/portal\/.+\/[(base_)?view|command_ajax_handler]/',
            cb_get_pagename())
        ) {
            return false;
        }
        require_once('schedule/system_logic.csp');
        $system_logic = GRN_Schedule_SystemLogic::getInstance();
        if ($system_logic->getActivateDragDrop() == '1') {
            require_once("schedule/personal_logic.csp");
            $logic = GRN_Schedule_PersonalLogic::getInstance();
            if ($logic->getUsingDragDrop($login) == '1') {
                return true;
            }
        }

        return false;
    }

    /*
    * get view user
    * @param  array  $members メンバー
    * @return array  $users
    */
    function getViewUsers($members)
    {
        global $G_container_base;
        $db = cb_get_app_db("schedule");
        $condition = cb_queryf($db, "_id in (@A) ", $members);
        $uum = $G_container_base->getInstance('uum');
        $users = $uum->getUsers(0, -1, 'col_position, _id', $condition);

        return $users;
    }

    /**
     * The function created attributes for Attendance Check for user event
     *
     * @param bool  $isEnableAttendanceStatusFunction
     * @param event $event
     * @param       $inDataEvent
     *
     * @return boolean| FALSE flag ignore this event view on list in the case this Attendance Check turn on
     */
    public function createAttendanceStatusForUserEvent(
        $isEnableAttendanceStatusFunction,
        &$event,
        $inDataEvent
    ) {
        $result = true;
        if ($isEnableAttendanceStatusFunction === true) {
            if (cb_at($inDataEvent, AttendanceStatus::ATTENDANCE_CHECK_USING)) {
                $event[AttendanceStatus::ATTENDANCE_CHECK_USING]
                    = $inDataEvent[AttendanceStatus::ATTENDANCE_CHECK_USING];
                if ($inDataEvent[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                    != AttendanceStatus::STATUS_ABSENT
                ) {
                    //un confirmed, attendance
                    if ($inDataEvent[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                        != AttendanceStatus::STATUS_ATTENDANT
                    ) {
                        $event[AttendanceStatus::ATTENDANCE_CHECK_SHOW] = true;
                    } else {
                        $event[AttendanceStatus::ATTENDANCE_CHECK_SHOW] = false;
                    }
                } else {   //continue flag output
                    $result = false;
                }
            }
        }

        return $result;
    }

    /**
     * @param array $events
     *
     * @return array
     */
    public function filterAbsentEvents(array $events)
    {
        foreach ($events as $key => $event) {
            if ($event[AttendanceStatus::ATTENDANCE_CHECK_USING]
                && $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                   == AttendanceStatus::STATUS_ABSENT
            ) {
                unset($events[$key]);
            }
        }

        return $events;
    }

    /**
     * Build attendance status list for view
     *
     * @param \GRN_Schedule_EventBase $event
     * @param int                     $limit
     * @param \CB_User                $login
     *
     * @return array
     * @throws \CBException
     * @throws \Exception
     */
    public function getAttendanceStatusForView(
        \GRN_Schedule_EventBase $event,
        $limit = 10,
        \CB_User $login = null
    ) {
        $attendanceStatusForView = [
            "all"                                => [],
            "users"                              => [],
            "groups"                             => [],
            AttendanceStatus::STATUS_ATTENDANT   => [],
            AttendanceStatus::STATUS_ABSENT      => [],
            AttendanceStatus::STATUS_UNCONFIRMED => [],
            "attendantCount"                     => 0,
            "absentCount"                        => 0,
            "unconfirmedCount"                   => 0,
            "groupCount"                         => 0
        ];
        $groups = &$attendanceStatusForView["groups"];
        $groupCount = 0;
        if (is_array($event->groups)) {
            foreach ($event->groups as $groupId => $group) {
                if ($groupCount < $limit) {
                    $groupName = $group;
                    if ($group instanceof \CB_Group) {
                        $groupName = $group->get("name");
                    }
                    $groups["g" . $groupId] = $groupName;
                }
                $groupCount++;
            }
            $attendanceStatusForView["all"]
                = $attendanceStatusForView["groups"];
            $attendanceStatusForView["groupCount"] = $groupCount;
        }
        $attendanceStatLogic = new AttendanceStatusLogic();
        $attendanceStatusList
            = $attendanceStatLogic->getAttendanceStatusListByEventAndStatus($event,
            ""); // get all status
        $attendantCount = &$attendanceStatusForView["attendantCount"];
        $absentCount = &$attendanceStatusForView["absentCount"];
        $unconfirmedCount = &$attendanceStatusForView["unconfirmedCount"];
        $users = &$attendanceStatusForView["users"];
        if (is_array($event->users)) {
            $allStatus = &$attendanceStatusForView["all"];
            $eventUsers = &$event->users;
            foreach ($attendanceStatusList as $attendanceStatus) {
                $userId = $attendanceStatus->getUserId();
                if (isset($eventUsers[$userId])) {
                    $user = $eventUsers[$userId];
                    $userName = $userId;
                    if ($user instanceof \CB_User) {
                        if ( ! is_null($login)) {
                            require_once("grn/controller.csp");
                            $userName
                                = GRN_ControllerUtil::getUserNameText($login->getOID(),
                                $user->getOID());
                        } else {
                            $userName = $user->get("display_name");
                        }
                    }
                    switch ($attendanceStatus->getStatus()) {
                        case "1":
                            if ($attendantCount < $limit) {
                                $attendanceStatusForView[AttendanceStatus::STATUS_ATTENDANT][$userId]
                                    = $userName;
                                $allStatus[$userId] = $userName;
                                $users[$userId] = $userName;
                            }
                            $attendantCount++;
                            break;
                        case "0":
                            if ($absentCount < $limit) {
                                $attendanceStatusForView[AttendanceStatus::STATUS_ABSENT][$userId]
                                    = $userName;
                                $allStatus[$userId] = $userName;
                                $users[$userId] = $userName;
                            }
                            $absentCount++;
                            break;
                        default:
                            if ($unconfirmedCount < $limit) {
                                $attendanceStatusForView[AttendanceStatus::STATUS_UNCONFIRMED][$userId]
                                    = $userName;
                                $allStatus[$userId] = $userName;
                                $users[$userId] = $userName;
                            }
                            $unconfirmedCount++;
                            break;
                    }
                }
            }
        }

        return $attendanceStatusForView;
    }
}

function grn_schedule_convert_datetime_tz1_to_tz2(
    $obj_date,
    $timezone1,
    $timezone2
) {
    static $_cache = [];

    if ($timezone1 == $timezone2) {
        return clone $obj_date;
    }

    $cacheKey = serialize($obj_date) . "-" . $timezone1 . "-" . $timezone2;
    if (isset($_cache[$cacheKey])) {
        return clone $_cache[$cacheKey];
    }

    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone($timezone1);
    if (is_a($obj_date, 'CB_DateTime')) {
        $timestamp->setDateTime($obj_date);
    } elseif (is_a($obj_date, 'CB_Date')) {
        $datetime = new CB_DateTime();
        $datetime->day = $obj_date->day;
        $datetime->month = $obj_date->month;
        $datetime->year = $obj_date->year;
        $datetime->hour = 0;
        $datetime->minute = 0;
        $datetime->second = 0;
        $timestamp->setDateTime($datetime);
    }
    $timestamp->setTimeZone($timezone2);

    $datetime = $timestamp->getDateTime();
    $_cache[$cacheKey] = $datetime;

    return $datetime;
}

/*
 * create title for banner schedule
 */
function grn_schedule_create_banner_title($date, $event, $include_title = true)
{
    $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
    // GRN2-3034
    if (@$event['timezone'] == $current_tz) {
        if ($include_title) {
            return $event['title'];
        } else {
            return '';
        }
    }
    // GRN2-3034

    $date_tmp = new CB_Date();
    $date_tmp->parse($date);
    $date_ex = new CB_DateEx($date_tmp);
    $title = '';
    if ($date_ex->compare($event['setdate']) == 0) {
        $title .= cb_date_format('TimeShort_HM', $event['setdate']);
    } else {
        $title .= cb_date_format('DateTimeShort_YMD_HM', $event['setdate']);
    }
    $title .= '-';

    if ($date_ex->compare($event['enddate']) == 0) {
        $title .= cb_date_format('TimeShort_HM', $event['enddate']);
    } else {
        $title .= cb_date_format('DateTimeShort_YMD_HM', $event['enddate']);
    }
    if ($include_title) {
        $title .= ' ' . $event['title'];
    }

    return $title;
}

/*
 * create banner title element for user timezone
 */
function grn_schedule_create_banner_title_tz_element(
    $date,
    $event,
    $timezone,
    $show_users_timezone
) {
    return grn_schedule_create_banner_title($date, $event);
}

/*
 * create title for allday schedule (normal and repeat)
 */
function grn_schedule_create_allday_title($date, $event)
{
    $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
    // GRN2-3034
    if (@$event['timezone'] == $current_tz) {
        return $event['title'];
    }
    // GRN2-3034

    $date_tmp = new CB_Date();
    $date_tmp->parse($date);
    $date_ex = new CB_DateEx($date_tmp);
    $title = '';
    if ($date_ex->compare($event['setdate']) == 0) {
        $title .= cb_date_format('TimeShort_HM', $event['setdate']);
    } else {
        $title .= cb_date_format('DateShort_MD', $event['setdate']);
    }
    $title .= '-';

    if ($date_ex->compare($event['enddate']) == 0) {
        $title .= cb_date_format('TimeShort_HM', $event['enddate']);
    } else {
        $title .= cb_date_format('DateShort_MD', $event['enddate']);
    }
    $title .= ' ' . $event['title'];

    return $title;
}


