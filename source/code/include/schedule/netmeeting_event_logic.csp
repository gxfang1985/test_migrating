<?php

/**
 * Netmeeting Event Logic
 *
 * @updated:
 *    2011/06/08 VCBSCH0010 Sync for V-CUBE
 */

require_once('schedule/netmeeting_resources.csp');
require_once('schedule/netmeeting_error_code.csp');
require_once('fw/string_util.csp');

class GRN_Netmeeting_EventLogic
{
    /**
     * @access private
     */
    function __construct()
    {
    }

    private static $_instance = null;

    /**
     * @return GRN_Netmeeting_EventLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    private $_db_logic = null;

    /**
     * @access private
     * @return \GRN_Schedule_Netmeeting_CoopTable_Logic
     */
    function _getDBLogic()
    {
        if (is_null($this->_db_logic)) {
            require_once('schedule/netmeeting_cooptable_logic.csp');
            $this->_db_logic
                = GRN_Schedule_Netmeeting_CoopTable_Logic::getInstance();
        }

        return $this->_db_logic;
    }

    /**
     * @access private
     */
    private $_sync_logic = null;

    /**
     * @access private
     * @return \GRN_Netmeeting_SyncLogic
     */
    function _getSyncLogic()
    {
        if (is_null($this->_sync_logic)) {
            require_once('schedule/netmeeting_sync_logic.csp');
            $this->_sync_logic = GRN_Netmeeting_SyncLogic::getInstance();
        }

        return $this->_sync_logic;
    }

    /**
     * @access private
     */
    private $_error_array = null;

    /**
     * エラーコードセット
     *
     * @access private
     */
    function _setErrorCode($code = null, $diagnosis = null, $cause = null)
    {
        if (is_array($this->_error_array) === false) {
            $this->_error_array = [$code, $diagnosis, $cause];
        }
    }

    /**
     * エラーメッセージ表示
     */
    public function throwError()
    {
        if (is_array($this->_error_array) !== false) {
            if (isset($this->_error_array[0])
                && strlen($this->_error_array[0]) > 0
            ) {
                $code = $this->_error_array[0];
                $diagnosis = $this->_error_array[1];
                $cause = $this->_error_array[2];

                cb_throw_error($code, $diagnosis, $cause);
            }
        }
    }

    /**
     * @param GRN_Schedule_EventBase $event
     *
     * @return bool
     */
    public function isNetmeetingAvailable($event)
    {
        if ( ! is_a($event, 'GRN_Schedule_NormalEvent')) {
            return false;
        }

        require_once('schedule/netmeeting_system_logic.csp');
        $system_logic = GRN_Netmeeting_SystemLogic::getInstance();

        // NETMEETING連携あり
        return $system_logic->isNetmeetingAvailable();

    }

    /**
     * NETMEETING施設チェック
     *
     * @return  boolean
     */
    public function checkNetmeetingFacility($obj_facilities)
    {
        if (is_array($obj_facilities) && count($obj_facilities) > 0) {
            // NETMEETING施設を複数選択している場合はエラー
            if ((count($obj_facilities)) > 1) {
                $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_FACILITY);

                return false;
            }
        }

        return true;
    }

    /**
     * NETMEETING施設変更チェック
     *
     * @return  boolean
     */
    public function checkNetmeetingFacilityChange(
        $new_facilities,
        $old_facility_code
    ) {
        $b_found = false;
        if (is_array($new_facilities) && count($new_facilities) > 0) {
            if (isset($old_facility_code) && strlen($old_facility_code) > 0) {
                foreach (array_keys($new_facilities) as $key_new) {
                    $new_facility = $new_facilities[$key_new];
                    if ( ! $new_facility) {
                        continue;
                    }
                    if ( ! is_a($new_facility, 'GRN_Facility_Facility')) {
                        continue;
                    }
                    if (strcmp($new_facility->get('foreign_key'),
                            $old_facility_code) == 0
                    ) {
                        $b_found = true;
                        break;
                    }
                }
            }
        }
        if ( ! $b_found) {
            // 施設を変更した場合はエラー
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_FACILITY_END);
        }

        return $b_found;
    }

    /**
     * 開始日時変更チェック
     *
     * @return  boolean
     */
    public function checkStartDateTimeChange(
        $new_setdatetime,
        $old_setdatetime,
        $timezone
    ) {
        if (( ! is_a($new_setdatetime, 'CB_DateTimeEx'))
            || ( ! is_a($old_setdatetime, 'CB_DateTimeEx'))
        ) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_STARTDATETIME);

            return false;
        }

        // タイムスタンプに変換
        $new_tsex = new CB_TimeStampEx();
        $new_tsex->setDateTime($new_setdatetime, $timezone);

        // タイムスタンプに変換
        $old_tsex = new CB_TimeStampEx();
        $old_tsex->setDateTime($old_setdatetime);

        // 開始日時を変更した場合はエラー
        if ($new_tsex->compare($old_tsex) == 0) {
            return true;
        } else {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_STARTDATETIME);

            return false;
        }
    }

    /**
     * 終了日時チェック
     *
     * @return  boolean
     */
    public function checkEndDateTimePast($enddatetime, $timezone = null)
    {
        if (( ! is_a($enddatetime, 'CB_DateTimeEx'))
            && ( ! is_a($enddatetime, 'CB_TimeStampEx'))
        ) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_ENDDATETIME);

            return false;
        }

        // 今日を求める
        $tsex = new CB_TimeStampEx();

        // タイムゾーンを合わせる
        if (is_a($enddatetime, 'CB_DateTimeEx')) {
            $end_tsex = new CB_TimeStampEx();
            $end_tsex->setDateTime($enddatetime, $timezone);
        } else {
            $end_tsex = $enddatetime;
        }

        // 終了日時が過去の場合はエラー
        if ($tsex->compare($end_tsex) > 0) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_ENDDATETIME);

            return false;
        }

        return true;
    }

    /**
     * 終了日時チェック
     *
     * @return   boolean
     */
    public function checkEndDateTimeFuture($enddatetime, $timezone)
    {
        if ( ! is_a($enddatetime, 'CB_DateTimeEx')) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_ENDDATETIME_END);

            return false;
        }

        // 今日を求める
        $tsex = new CB_TimeStampEx();
        $current_tmzn = $tsex->getTimeZone();

        // タイムゾーンを合わせる
        $end_tsex = new CB_TimeStampEx();
        $end_tsex->setTimeZone($timezone);
        $end_tsex->setDateTime($enddatetime);
        $end_tsex->setTimeZone($current_tmzn);

        // 終了日時が未来の場合はエラー
        if ($tsex->compare($end_tsex) < 0) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_ENDDATETIME_END);

            return false;
        }

        return true;
    }

    /**
     * タイトルチェック
     *
     * @return   boolean
     */
    public function checkTitle($title)
    {
        // 必須チェック
        if ( ! isset($title) || strlen($title) == 0) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_TITLE_VALUE);

            return false;
        }
        // 文字数チェック
        if (mb_strlen($title) > GRN_NETMEETING_API_TITLE_LIMIT) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_TITLE, null,
                ['limit' => (GRN_NETMEETING_API_TITLE_LIMIT - 1)]);

            return false;
        }

        return true;
    }

    /**
     * メモチェック
     *
     * @return   boolean
     */
    public function checkMemo($memo)
    {
        // 必須チェック
        //if( ! isset( $memo ) || strlen( $memo ) == 0 )
        //{
        //    $this->_setErrorCode( E_GRN_NETMEETING_INPUT_INVALID_MEMO_VALUE );
        //    return FALSE;
        //}
        // 文字数チェック
        if (mb_strlen($memo) > GRN_NETMEETING_API_INFO_LIMIT) {
            $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_MEMO, null,
                ['limit' => GRN_NETMEETING_API_INFO_LIMIT]);

            return false;
        }

        return true;
    }

    /**
     * 参加者チェック
     *
     * @return   boolean
     */
    public function checkEventMembers($members)
    {
        if (is_array($members) && count($members) > 0) {
            foreach (array_keys($members) as $key) {
                $member = $members[$key];

                // メールアドレスチェック
                if ( ! isset($member['user_email'])
                     || strlen($member['user_email']) == 0
                ) {
                    $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_MEMBERS);

                    return false;
                }
            }
        }

        return true;
    }

    /**
     * 操作者チェック
     *
     * @return   boolean
     */
    public function checkOperator($operator)
    {
        if (is_array($operator)) {
            // メールアドレスチェック
            if ( ! isset($operator['user_email'])
                 || strlen($operator['user_email']) == 0
            ) {
                $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_OPERATOR);

                return false;
            }
        }

        return true;
    }

    /**
     * 招待者チェック
     *
     * @return   boolean
     */
    public function checkParticipateMember($member)
    {
        if (is_array($member)) {
            // メールアドレスチェック
            if ( ! isset($member['user_email'])
                 || strlen($member['user_email']) == 0
            ) {
                $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_MEMBERS_INVITE);

                return false;
            }
        }

        return true;
    }

    /**
     * パスワードチェック
     *
     * @return   boolean
     */
    public function checkPassword($obj_input)
    {
        if (($obj_input->password_set == '1')) {
            if (isset($obj_input->password)
                && strlen($obj_input->password) > 0
            ) {
                if ( ! preg_match("/^[a-zA-Z0-9]{6,16}+$/",
                    $obj_input->password)
                ) {
                    $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_PASSWORD);

                    return false;
                }
                if (strcmp($obj_input->password, $obj_input->retype) != 0) {
                    $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_PASSWORD);

                    return false;
                }
            } else {
                $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_PASSWORD);

                return false;
            }
        }

        return true;
    }

    /**
     * 氏名チェック
     *
     * @return   boolean
     */
    public function checkName($str_name)
    {
        if (isset($str_name) && strlen($str_name) > 0) {
            // 文字数チェック
            if (mb_strlen($str_name) > GRN_NETMEETING_API_USER_NAME_LIMIT) {
                return false;
            }
        }

        return true;
    }

    /**
     * メールアドレスチェック
     *
     * @return   boolean
     */
    public function checkMailAddress($str_address)
    {
        if (isset($str_address) && strlen($str_address) > 0) {
            // 文字数チェック
            if (strlen($str_address) > GRN_NETMEETING_API_USER_MAIL_LIMIT) {
                return false;
            }
        }

        return true;
    }

    /**
     * 外部ユーザーチェック
     *
     * @return   boolean
     */
    public function checkOutsideMembers($outsides)
    {
        if (is_array($outsides) && count($outsides) > 0) {
            foreach (array_keys($outsides) as $key) {
                $outside = $outsides[$key];

                if ((isset($outside['user_name'])
                     && strlen($outside['user_name']) > 0)
                    && (isset($outside['user_name'])
                        && strlen($outside['user_email']) > 0)
                ) {
                    // 名前チェック
                    if ( ! $this->checkName($outside['user_name'])) {
                        $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_OUTSIDE_NAME,
                            null,
                            ['limit' => GRN_NETMEETING_API_USER_NAME_LIMIT]);

                        return false;
                    }
                    // メールアドレスチェック
                    if ( ! $this->checkMailAddress($outside['user_email'])) {
                        $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_OUTSIDE_MAIL,
                            null,
                            ['limit' => GRN_NETMEETING_API_USER_MAIL_LIMIT]);

                        return false;
                    }
                } else {
                    $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_OUTSIDE);

                    return false;
                }
            }
        }

        return true;
    }

    /**
     * 上限人数チェック
     *
     * @return   boolean
     */
    public function checkMembersLimit($input_data, $participate_flg = false)
    {
        $setthing = null;
        $facility = $input_data->getFacility();
        if ($facility) {
            require_once('schedule/netmeeting_system_logic.csp');
            $system_logic = GRN_Netmeeting_SystemLogic::getInstance();
            $setting
                = $system_logic->getNetmeetingFacilitySetting($facility);
        }

        $nrml_cnt = 0;

        // 参加者は通常ユーザーとしてカウント
        if (is_array($input_data->event_members)
            && count($input_data->event_members) > 0
        ) {
            $nrml_cnt = count($input_data->event_members);
        }

        // 外部ユーザー人数をカウント
        if (is_array($input_data->outside_members)
            && count($input_data->outside_members) > 0
        ) {
            foreach ($input_data->outside_members as $out_user) {
                if ( ! array_key_exists('user_type', $out_user)) {
                    continue;
                }

                $nrml_cnt++;
            }
        }
        // 通常ユーザー上限チェック
        if ($setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT] > 0) {
            if ($nrml_cnt
                > $setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT]
            ) {
                // この予定に参加する の場合
                if ($participate_flg) {
                    $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_NORMAL_GUESTS_INVITE,
                        null,
                        ['limit' => $setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT]]);
                } else {
                    require_once('schedule/netmeeting_system_logic.csp');
                    $system_logic = GRN_Netmeeting_SystemLogic::getInstance();

                    // 外部ユーザー入力欄表示行数取得
                    $outside_rows
                        = $system_logic->getNetmeetingOutsideMemberInputRows();
                    if ($outside_rows !== false && $outside_rows > 0) {
                        $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_NORMAL_GUESTS_OUTSIDE,
                            null,
                            ['limit' => $setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT]]);
                    } else {
                        $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_NORMAL_GUESTS,
                            null,
                            ['limit' => $setting[GRN_FACILITY_NETMEETING_GUESTS_NORMAL_LIMIT]]);
                    }
                }

                return false;
            }
        } else {
            if ($nrml_cnt > 0) {
                $this->_setErrorCode(E_GRN_NETMEETING_INPUT_INVALID_NORMAL_GUESTS_NOT_USE);

                return false;
            }
        }

        return true;
    }

    /**
     * NETMEETING入力チェック
     *
     * @return   boolean
     */
    public function checkNetmeetingInput($input_data)
    {
        if ( ! is_a($input_data, 'GRN_Schedule_Netmeeting_InputData')) {
            return false;
        }

        if ($this->checkNetmeetingFacility($input_data->facilities) === false) {
            return false;
        }

        if ($this->checkOperator($input_data->operator) === false) {
            return false;
        }

        if ($this->checkEndDateTimePast($input_data->end_datetime) === false) {
            return false;
        }

        if ($this->checkTitle($input_data->title) === false) {
            return false;
        }

        if ($this->checkEventMembers($input_data->event_members) === false) {
            return false;
        }

        if ($this->checkPassword($input_data) === false) {
            return false;
        }

        if ($this->checkOutsideMembers($input_data->outside_members)
            === false
        ) {
            return false;
        }

        if ($this->checkMembersLimit($input_data) === false) {
            return false;
        }

        if ($this->checkMemo($input_data->memo) === false) {
            return false;
        }

        return true;
    }

    /**
     * NETMEETING入力チェック(会議中予定)
     *
     * @return   boolean
     */
    public function checkNetmeetingInputNow_event(
        $new_event,
        $old_event,
        $coop_data
    ) {
        if (isset($coop_data)) {
            if ($this->checkNetmeetingFacilityChange($new_event->facilities,
                    $coop_data->facility_code) === false
            ) {
                return false;
            }
        }

        if ($this->checkStartDateTimeChange($new_event->setdatetime,
                $old_event->setdatetime, $new_event->timezone) === false
        ) {
            return false;
        }

        if ($this->checkEndDateTimePast($new_event->enddatetime,
                $new_event->end_timezone) === false
        ) {
            return false;
        }

        return true;
    }

    /**
     * NETMEETING入力チェック(会議中予定)
     *
     * @return   boolean
     */
    public function checkNetmeetingInputNow_input($input_data)
    {
        if ($this->checkOperator($input_data->operator) === false) {
            return false;
        }

        if ($this->checkEventMembers($input_data->event_members) === false) {
            return false;
        }

        if ($this->checkOutsideMembers($input_data->outside_members)
            === false
        ) {
            return false;
        }

        if ($this->checkMembersLimit($input_data) === false) {
            return false;
        }

        return true;
    }

    /**
     * NETMEETING入力チェック(終了予定)
     *
     * @return   boolean
     */
    public function checkNetmeetingInputEnd($new_event, $old_event, $coop_data)
    {
        if (isset($coop_data)) {
            if ($this->checkNetmeetingFacilityChange($new_event->facilities,
                    $coop_data->facility_code) === false
            ) {
                return false;
            }
        }

        if ($this->checkStartDateTimeChange($new_event->setdatetime,
                $old_event->setdatetime, $new_event->timezone) === false
        ) {
            return false;
        }

        if ($this->checkEndDateTimeFuture($new_event->enddatetime,
                $new_event->end_timezone) === false
        ) {
            return false;
        }

        return true;
    }

    /**
     * NETMEETING施設かチェックし、該当した施設を返却する
     *
     * @return   object
     */
    public function getNetmeetingFacility($obj_facilities)
    {
        $facilities = null;
        if (is_array($obj_facilities) && count($obj_facilities) > 0) {
            $facilities = [];

            foreach (array_keys($obj_facilities) as $key) {
                $facility = $obj_facilities[$key];
                if ( ! is_a($facility, 'GRN_Facility_Facility')) {
                    continue;
                }

                if ($facility->get(GRN_FACILITY_NETMEETING_AVAILABLE) == '1') {
                    $facilities[] = $facility;
                }
            }
            if ((count($facilities)) == 0) {
                $facilities = null;
            }
        }

        return $facilities;
    }

    /**
     * @param GRN_Schedule_EventBase $event
     *
     * @return GRN_Facility_Facility|null
     */
    public function getNetmeetingFacilityById($event)
    {
        $facility = null;

        require_once('schedule/netmeeting_system_logic.csp');
        $system_logic = GRN_Netmeeting_SystemLogic::getInstance();

        // 全NETMEETING施設取得
        $available_facilities
            = $system_logic->getNetmeetingAvailableFacilityData();
        if (isset($available_facilities)) {
            // 選択されている施設がある場合
            if (is_array($event->facilities) && count($event->facilities) > 0) {
                // NETMEETING施設かチェック
                foreach (array_keys($event->facilities) as $key) {
                    if (array_key_exists($key, $available_facilities)) {
                        $facility = $available_facilities[$key];
                        break;
                    }
                }
            }
        }

        return $facility;
    }

    /**
     * 参加者を取得
     *
     * @return   array
     */
    public function getEventMembers($obj_users, $timestamp = null)
    {
        $members = null;
        if (is_array($obj_users) && count($obj_users) > 0) {
            require_once('fw/i18n.csp');
            require_once('fw/i18n/locale.csp');
            require_once('fw/i18n/base.csp');

            require_once('schedule/netmeeting_system_logic.csp');
            $system_logic = GRN_Netmeeting_SystemLogic::getInstance();

            require_once('schedule/netmeeting_personal_logic.csp');
            $personal_logic = GRN_Netmeeting_PersonalLogic::getInstance();

            // デフォルト取得
            $I18N = CB_I18N::getInstance();
            $def_lang = $I18N->getDefaultLanguage();
            $def_tmzn = $I18N->getDefaultTimezone();

            //GTM-529
            // tuning GRB-15157
            //Login User
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $login = $uum->getLoginUser();

            $users_id = [];
            foreach ($obj_users as $user) {
                if ( ! is_a($user, 'CB_User')) {
                    continue;
                }
                $users_id[] = $user->getOID();
            }

            $users_info
                = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
                $login, 'schedule');

            $members = [];
            foreach ($obj_users as $user) {

                if ( ! is_a($user, 'CB_User')) {
                    continue;
                }
                $user_id = $user->getOID();
                if (array_key_exists($user_id, $users_info)
                    && array_key_exists("col_valid", $users_info[$user_id])
                    &&
                    ! is_null($users_info[$user_id]["col_valid"])
                ) //GTM-529
                {
                    continue;
                }

                if (array_key_exists($user_id, $users_info)
                    && array_key_exists("col_using_app", $users_info[$user_id])
                    && is_null($users_info[$user_id]["col_using_app"])
                ) //GTM-529
                {
                    continue;
                }

                // NETMEETING用メールアドレス取得
                $address
                    = $personal_logic->getNetmeetingForwardMailAddress($user);

                // ユーザーのロケール取得
                $locale = CB_LocaleManager::getCurrentLanguage($user_id);
                if ( ! isset($locale) || strlen($locale) == 0) {
                    $locale = $def_lang;
                }

                // ユーザーのタイムゾーン取得
                require_once('fw/i18n.csp');
                $timezone = CB_I18N::getUserTimezone($user);
                if ( ! isset($timezone) || strlen($timezone) == 0) {
                    $timezone = $def_tmzn;
                }
                $timezone
                    = $system_logic->getNetmeetingTimezoneFromUtc($timezone);

                $members[$user_id] = [
                    'user_id'       => $user_id,
                    'user_name'     => $user->get('display_name'),
                    'user_email'    => $address,
                    'user_lang'     => $locale,
                    'user_timezone' => $timezone,
                    'user_type'     => null
                ];
            }
            if (count($members) == 0) {
                $members = null;
            }
        }

        return $members;
    }

    /**
     * 外部ユーザーを取得
     *
     * @return   array
     */
    public function getOutsideMembers($params)
    {
        $outside = [];

        $outside_name = array_key_exists('netmeeting_outside_name', $params)
            ? $params['netmeeting_outside_name'] : null;
        $outside_email = array_key_exists('netmeeting_outside_email',
            $params) ? $params['netmeeting_outside_email'] : null;
        $outside_lang = array_key_exists('netmeeting_outside_lang', $params)
            ? $params['netmeeting_outside_lang'] : null;
        $outside_timezone = array_key_exists('netmeeting_outside_timezone',
            $params) ? $params['netmeeting_outside_timezone'] : null;
        $outside_type = array_key_exists('netmeeting_outside_type', $params)
            ? $params['netmeeting_outside_type'] : null;

        require_once('schedule/netmeeting_system_logic.csp');
        $system_logic = GRN_Netmeeting_SystemLogic::getInstance();

        // 外部ユーザー入力欄表示行数取得
        $outside_rows = $system_logic->getNetmeetingOutsideMemberInputRows();
        if ($outside_rows !== false && $outside_rows > 0) {
            for ($i = 0; $i < $outside_rows; $i++) {
                if (( ! isset($outside_name[$i])
                      || strlen($outside_name[$i]) == 0)
                    && ( ! isset($outside_email[$i])
                         || strlen($outside_email[$i]) == 0)
                ) {
                    continue;
                }

                $user_id = 'out_' . $i;
                $outside[$user_id] = [
                    'user_id'       => $user_id,
                    'user_name'     => $outside_name[$i],
                    'user_email'    => $outside_email[$i],
                    'user_lang'     => (isset($outside_lang[$i])
                                        && strlen($outside_lang[$i]) > 0)
                        ? $outside_lang[$i] : null,
                    'user_timezone' => (isset($outside_timezone[$i])
                                        && strlen($outside_timezone[$i]) > 0)
                        ? $outside_timezone[$i] : null,
                    'user_type'     => (isset($outside_type[$i])
                                        && strlen($outside_type[$i]) > 0)
                        ? $outside_type[$i] : null,
                ];
            }
        }
        if (count($outside) == 0) {
            $outside = null;
        }

        return $outside;
    }

    /**
     * 操作者を取得
     *
     * @return   array
     */
    public function getOperator($obj_user)
    {
        $operator = null;
        if (is_a($obj_user, 'CB_User')) {
            require_once('schedule/netmeeting_personal_logic.csp');
            $personal_logic = GRN_Netmeeting_PersonalLogic::getInstance();

            // NETMEETING用メールアドレス取得
            $address
                = $personal_logic->getNetmeetingForwardMailAddress($obj_user);

            $operator = [
                'user_id'    => $obj_user->getOID(),
                'user_name'  => $obj_user->get('display_name'),
                'user_email' => $address,
            ];
        }

        return $operator;
    }

    /**
     * スケジュール項目の入力値を取得
     *
     * @return   object
     */
    public function getNetmeetingEventParam($obj_event, $login)
    {
        $input_data = null;
        if (is_a($obj_event, 'GRN_Schedule_NormalEvent')) {
            // 入れ物準備
            $input_data = new GRN_Schedule_Netmeeting_InputData();

            if ($input_data->facilities
                = $this->getNetmeetingFacility($obj_event->facilities)
            ) {
                // タイムスタンプに変換
                $timestamp_st = new CB_TimeStampEx();
                $timestamp_st->setDateTime($obj_event->setdatetime,
                    $obj_event->timezone);

                $timestamp_ed = new CB_TimeStampEx();
                $timestamp_ed->setDateTime($obj_event->enddatetime,
                    $obj_event->end_timezone);

                $input_data->start_datetime = $timestamp_st;
                $input_data->end_datetime = $timestamp_ed;
                $input_data->title
                    = html_entity_decode($obj_event->getTitle());
                $input_data->memo = $obj_event->memo;
                $input_data->event_members
                    = $this->getEventMembers($obj_event->users,
                    $timestamp_st);
                $input_data->timezone = $obj_event->timezone;
                $input_data->end_timezone = $obj_event->end_timezone;

                if ( ! isset($input_data->memo)
                     || strlen($input_data->memo) == 0
                ) {
                    $input_data->memo = ' ';
                }

                // 操作者を取得
                $input_data->operator = $this->getOperator($login);
            } else {
                $input_data = null;
            }
        }

        return $input_data;
    }

    /**
     * NETMEETING項目の入力値を取得
     *
     * @return   boolean
     */
    public function getNetmeetingInputParam($params, $input_data)
    {
        if ( ! is_array($params)) {
            return false;
        }

        if ( ! is_a($input_data, 'GRN_Schedule_Netmeeting_InputData')) {
            // 入れ物準備
            $input_data = new GRN_Schedule_Netmeeting_InputData();
        }

        $input_data->password_set = array_key_exists('netmeeting_password_set',
            $params) ? $params['netmeeting_password_set'] : null;
        if ($input_data->password_set == '1') {
            $input_data->password = array_key_exists('netmeeting_password',
                $params) ? $params['netmeeting_password'] : null;
            $input_data->retype = array_key_exists('netmeeting_retype',
                $params) ? $params['netmeeting_retype'] : null;
        }
        $input_data->outside_members = $this->getOutsideMembers($params);

        return true;
    }

    public function setNetmeetingInputParam($coop_data, $input_data)
    {
        if ( ! is_a($coop_data, 'GRN_Schedule_Netmeeting_CoopTable')) {
            return false;
        }

        if ( ! is_a($input_data, 'GRN_Schedule_Netmeeting_InputData')) {
            // 入れ物準備
            $input_data = new GRN_Schedule_Netmeeting_InputData();
        }
        $input_data->password_set = $coop_data->password_set;
        $input_data->password = $coop_data->password;
        $input_data->retype = $coop_data->password;
        $input_data->outside_members = $coop_data->outside_members;

        return true;
    }

    /**
     * 予約状況取得
     *
     * @return  mixed   False or 予約状況ステータス
     */
    public function getReservationStatus($reservation_id, $password)
    {
        $sync_logic = $this->_getSyncLogic();

        // 予約情報詳細取得
        $reserve_detail
            = $sync_logic->netmeeting_reservation_get_detail($reservation_id,
            $password);
        if (is_a($reserve_detail,
            'GRN_Schedule_Netmeeting_ReservationDetail')
        ) {
            $status = $reserve_detail->status;
        } else {
            $status = $reserve_detail;
        }

        return $status;
    }

    /**
     * 予定日時からの開催状況取得
     *
     * @return  mixed   False or 会議開催状況ステータス
     */
    public function getEventStatus($setdatetime, $enddatetime)
    {
        if (( ! is_a($setdatetime, 'CB_DateTimeEx'))
            || ( ! is_a($enddatetime, 'CB_DateTimeEx'))
        ) {
            return false;
        }

        // 今日を求める
        $tsex = new CB_TimeStampEx();

        // タイムゾーンを合わせる(開始日時)
        $tsex_st = new CB_TimeStampEx();
        $tsex_st->setDateTime($setdatetime);

        // タイムゾーンを合わせる(終了日時)
        $tsex_ed = new CB_TimeStampEx();
        $tsex_ed->setDateTime($enddatetime);

        // 開始終了時間内の場合
        if (($tsex->compare($tsex_st) > 0) && ($tsex->compare($tsex_ed) < 0)) {
            return GRN_NETMEETING_MEETING_STATUS_NOW;
        }

        // 開始が未来の場合
        if ($tsex->compare($tsex_st) < 0) {
            return GRN_NETMEETING_MEETING_STATUS_WAIT;
        }

        // 終了日時が過去の場合
        if ($tsex->compare($tsex_ed) > 0) {
            return GRN_NETMEETING_MEETING_STATUS_END;
        }

        return false;
    }

    /**
     * 連携データ取得
     *
     * @return   object
     */
    public function getNetmeetingCoopDataByEventId($event_id)
    {
        $coop_data = null;
        if (isset($event_id) && strlen($event_id) > 0) {
            $db_logic = $this->_getDBLogic();

            // 連携データ取得
            $coop_data = $db_logic->getNetmeetingCoopDataByEventId($event_id);
        }

        return $coop_data;
    }

    /**
     * 招待者追加
     *
     * @return   boolean
     */
    function _InviteAdd($reservation_id, $coop_id, $event_member)
    {
        $db_logic = $this->_getDBLogic();
        $sync_logic = $this->_getSyncLogic();

        // 入力値セット
        $invite_data = $db_logic->setInputDataInvite($event_member);

        // POSTデータセット
        $post = $sync_logic->setPostDataInviteAdd($reservation_id,
            $invite_data);

        // 招待者追加API実行
        if ($sync_logic->netmeeting_invite_add($post, $data) === false) {
            // エラー
            return false;
        } else {
            if (array_key_exists('guests', $data)) {
                if (array_key_exists('guest', $data['guests'])) {
                    if (array_key_exists('0', $data['guests']['guest'])) {
                        $guest = $data['guests']['guest']['0'];

                        if (array_key_exists('guest_id', $guest)) {
                            $invite_data->guest_id = $guest['guest_id'];
                        }
                        if (array_key_exists('invite_url', $guest)) {
                            $invite_data->invite_url = $guest['invite_url'];
                        }
                        // 招待者テーブル作成
                        $db_logic->insertInviteTable1Rec($coop_id,
                            $invite_data);
                    }
                }
            }
        }

        return true;
    }

    /**
     * 予約登録
     *
     * @return string 連携ステータス
     */
    public function cmmandNetmeetingReservationAdd($event_id, $input_data)
    {
        $db_logic = $this->_getDBLogic();
        $sync_logic = $this->_getSyncLogic();

        // 入れ物準備
        $coop_data = new GRN_Schedule_Netmeeting_CoopTable();

        // 入力値セット
        $db_logic->setInputData($input_data, $coop_data);

        $coop_data->event_id = $event_id;
        $coop_data->creator = $input_data->operator;
        $coop_data->modifier = null;

        // 連携テーブル作成
        $db_logic->insertCoopTable($coop_data);

        // コミット
        $db_logic->commitNetmeetingSchedule();


        // POSTデータセット
        $post = $sync_logic->setPostData($coop_data);

        // 予約追加API実行
        $coop_data->cooperation_status
            = $sync_logic->netmeeting_reservation_add($post, $data);
        if ($coop_data->cooperation_status
            == GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
        ) {
            if (is_array($data) !== false) {
                $coop_data->reservation_id = array_key_exists('reservation_id',
                    $data) ? $data['reservation_id'] : null;
                if (array_key_exists('guests', $data)) {
                    $sync_logic->setResponseGuestData($coop_data,
                        $data['guests']);
                }
            }
        }

        // 連携テーブル更新
        $db_logic->updateCoopTableReservationData($coop_data);

        // 招待者テーブル作成
        $db_logic->insertInviteTable($coop_data);

        // コミット
        $db_logic->commitNetmeetingCoopTable();

        return $coop_data->cooperation_status;
    }

    /**
     * 予約変更
     *
     * @return   numeric    連携ステータス
     */
    public function cmmandNetmeetingReservationUpdate(
        $event_id,
        $coop_data,
        $input_data
    ) {
        $db_logic = $this->_getDBLogic();
        $sync_logic = $this->_getSyncLogic();

        // 予約変更
        if (isset($coop_data->reservation_id)
            && strlen($coop_data->reservation_id) > 0
        ) {
            // 予約情報ステータス取得
            $status = $this->getReservationStatus($coop_data->reservation_id,
                $coop_data->old_password);
        } else {
            $status = GRN_NETMEETING_API_MEETING_STATUS_WAIT;
        }

        // 未開催予定
        if ($status === GRN_NETMEETING_API_MEETING_STATUS_WAIT) {
            // 連携データ更新
            // 入力値セット
            $db_logic->setInputData($input_data, $coop_data);

            $coop_data->event_id = $event_id;
            $coop_data->modifier = $input_data->operator;
            $coop_data->cooperation_status
                = GRN_NETMEETING_COOPERATION_STATUS_INCOMPLETE;

            // 連携テーブル更新
            if ($db_logic->updateCoopTable($coop_data) === false) {
                // エラーメッセージ表示
                cb_throw_error(E_GRN_NETMEETING_RESERVE_MOD_ERROR);
            }

            // コミット
            $db_logic->commitNetmeetingSchedule();


            if (isset($coop_data->reservation_id)
                && strlen($coop_data->reservation_id) > 0
            ) {
                // POSTデータセット
                $post = $sync_logic->setPostDataMain($coop_data);

                // 予約変更API実行(招待者を削除する)
                $coop_data->cooperation_status
                    = $sync_logic->netmeeting_reservation_update($post, $data);
                if ($coop_data->cooperation_status
                    == GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
                ) {
                    // POSTデータセット
                    $post_members
                        = $sync_logic->setPostDataMembers($coop_data->invite_data);
                    if (is_array($post_members)) {
                        $post += $post_members;

                        require_once('schedule/netmeeting_system_logic.csp');
                        $system_logic
                            = GRN_Netmeeting_SystemLogic::getInstance();

                        // 招待メール送信する
                        if ($system_logic->isNetmeetingUrlMailSend()) {
                            $post['send_mail'] = '1';
                        }

                        // 予約変更API実行(招待者を追加する)
                        $coop_data->cooperation_status
                            = $sync_logic->netmeeting_reservation_update($post,
                            $data);
                        if ($coop_data->cooperation_status
                            == GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
                        ) {
                            if (is_array($data) !== false) {
                                $sync_logic->setResponseGuestData($coop_data,
                                    $data);
                            }
                        }
                    }
                }
            } else {
                // POSTデータセット
                $post = $sync_logic->setPostData($coop_data);

                // 予約追加API実行
                $coop_data->cooperation_status
                    = $sync_logic->netmeeting_reservation_add($post, $data);
                if ($coop_data->cooperation_status
                    == GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
                ) {
                    if (is_array($data) !== false) {
                        $coop_data->reservation_id
                            = array_key_exists('reservation_id', $data)
                            ? $data['reservation_id'] : null;
                        if (array_key_exists('guests', $data)) {
                            $sync_logic->setResponseGuestData($coop_data,
                                $data['guests']);
                        }
                    }
                }
            }

            // 連携テーブル更新
            $db_logic->updateCoopTableReservationData($coop_data);

            // 招待者テーブル削除
            $db_logic->deleteInviteTableByCoopId($coop_data->coop_id);

            // 招待者テーブル作成
            $db_logic->insertInviteTable($coop_data);

            // コミット
            $db_logic->commitNetmeetingCoopTable();

            return $coop_data->cooperation_status;
        } // 開催中予定
        elseif ($status === GRN_NETMEETING_API_MEETING_STATUS_NOW) {
            // 入力値セット
            $coop_data->event_members = $input_data->event_members;
            $coop_data->outside_members = $input_data->outside_members;
            $coop_data->cooperation_status
                = GRN_NETMEETING_COOPERATION_STATUS_INCOMPLETE;

            // 連携テーブル更新
            if ($db_logic->updateCoopTableMemberData($coop_data) === false) {
                // エラーメッセージ表示
                cb_throw_error(E_GRN_NETMEETING_RESERVE_MOD_ERROR);
            }

            // 招待者テーブル削除
            $db_logic->deleteInviteTableByCoopId($coop_data->coop_id);

            // コミット
            $db_logic->commitNetmeetingSchedule();


            if (isset($coop_data->reservation_id)
                && strlen($coop_data->reservation_id) > 0
            ) {
                // 招待者一覧取得API実行
                if (($invite_data
                        = $sync_logic->netmeeting_get_invite($coop_data->reservation_id))
                    === false
                ) {
                    return $coop_data->cooperation_status;
                }

                // 招待者を全員削除する
                if (is_array($invite_data) && count($invite_data) > 0) {
                    foreach (array_keys($invite_data) as $key) {
                        $invite = $invite_data[$key];

                        if (isset($invite->guest_id)
                            && strlen($invite->guest_id) > 0
                        ) {
                            // 招待者削除API実行
                            if ($sync_logic->netmeeting_invite_delete($coop_data->reservation_id,
                                    $invite->guest_id) === false
                            ) {
                                return $coop_data->cooperation_status;
                            }
                        }
                    }
                }
            }

            // 参加者
            if (is_array($coop_data->event_members)
                && count($coop_data->event_members) > 0
            ) {
                foreach (array_keys($coop_data->event_members) as $key) {
                    $event_member = $coop_data->event_members[$key];

                    // 招待者追加
                    if ($this->_InviteAdd($coop_data->reservation_id,
                            $coop_data->coop_id, $event_member) === false
                    ) {
                        return $coop_data->cooperation_status;
                    }
                }
            }

            // 外部招待者
            if (is_array($coop_data->outside_members)
                && count($coop_data->outside_members) > 0
            ) {
                foreach (array_keys($coop_data->outside_members) as $key) {
                    $event_member = $coop_data->outside_members[$key];

                    // 招待者追加
                    if ($this->_InviteAdd($coop_data->reservation_id,
                            $coop_data->coop_id, $event_member) === false
                    ) {
                        return $coop_data->cooperation_status;
                    }
                }
            }

            $coop_data->cooperation_status
                = GRN_NETMEETING_COOPERATION_STATUS_COMPLETE;

            // 連携テーブル更新
            $db_logic->updateCoopTableReservationData($coop_data);

            // コミット
            $db_logic->commitNetmeetingCoopTable();

            return $coop_data->cooperation_status;
        } // ステータス取得エラー
        elseif ($status === true || $status === false) {
            $coop_data->cooperation_status
                = GRN_NETMEETING_COOPERATION_STATUS_INCOMPLETE;

            // 連携テーブル更新
            if ($db_logic->updateCoopTable($coop_data) === false) {
                // エラーメッセージ表示
                cb_throw_error(E_GRN_NETMEETING_RESERVE_MOD_ERROR);
            }
        }
    }

    /**
     * 予約削除
     */
    public function cmmandNetmeetingReservationDelete($event_id)
    {
        $db_logic = $this->_getDBLogic();
        $sync_logic = $this->_getSyncLogic();

        $coop_data = null;
        if (isset($event_id) && strlen($event_id) > 0) {
            // 連携データ取得
            $coop_data = $db_logic->getNetmeetingCoopDataByEventId($event_id);
        }
        // 連携データあり
        if (isset($coop_data)) {
            if (isset($coop_data->reservation_id)
                && strlen($coop_data->reservation_id) > 0
            ) {
                // 予約情報ステータス取得
                $status
                    = $this->getReservationStatus($coop_data->reservation_id,
                    $coop_data->old_password);
                if ($status === false) {
                    cb_throw_error(E_GRN_NETMEETING_RESERVE_GET_DETAIL_ERROR);
                }

                // 終了予定以外
                if (($status === GRN_NETMEETING_API_MEETING_STATUS_WAIT)
                    || ($status === GRN_NETMEETING_API_MEETING_STATUS_NOW)
                ) {
                    // 予約削除API実行
                    if ($sync_logic->netmeeting_reservation_delete($coop_data->reservation_id)
                        === false
                    ) {
                        // エラーメッセージ表示
                        cb_throw_error(E_GRN_NETMEETING_RESERVE_DEL_ERROR);
                    }
                }
            }
            // 招待者テーブル削除
            $db_logic->deleteInviteTableByCoopId($coop_data->coop_id);

            // 連携テーブル削除
            $db_logic->deleteCoopTable($coop_data->coop_id);

        }
    }

    /**
     * 招待者追加
     */
    public function cmmandNetmeetingInviteAdd($event, $login)
    {
        $event_id = $event->id;
        $login_id = $login->getOID();

        $db_logic = $this->_getDBLogic();
        $sync_logic = $this->_getSyncLogic();

        $coop_data = null;
        $input_data = null;
        $event_member = null;

        // 選択されている施設がある場合
        $facility = $this->getNetmeetingFacilityById($event);
        if (isset($facility)) {
            if (isset($event_id) && strlen($event_id) > 0) {
                // 連携データ取得
                $coop_data
                    = $db_logic->getNetmeetingCoopDataByEventId($event_id);
            }

            // 連携データあり
            if (isset($coop_data)) {
                // 時間のチェック
                $event_status = $this->getEventStatus($event->setdatetime,
                    $event->enddatetime);

                // 終了予定以外
                if ($event_status !== GRN_NETMEETING_MEETING_STATUS_END) {
                    $timestamp_st = new CB_TimeStampEx();
                    $timestamp_st->setDateTime($event->setdatetime);

                    // 参加者セット
                    $coop_data->event_members
                        = $this->getEventMembers($event->users, $timestamp_st);

                    if (is_array($coop_data->event_members)
                        && count($coop_data->event_members) > 0
                    ) {
                        if (array_key_exists($login_id,
                            $coop_data->event_members)
                        ) {
                            $event_member
                                = $coop_data->event_members[$login_id];

                            // 入れ物準備
                            $input_data
                                = new GRN_Schedule_Netmeeting_InputData();
                            $input_data->facilities = [$facility];
                            $input_data->event_members
                                = $coop_data->event_members;
                            $input_data->outside_members
                                = $coop_data->outside_members;

                            // 上限人数チェック
                            if ($this->checkMembersLimit($input_data, true)
                                === false
                            ) {
                                $this->throwError();
                            }
                            // 参加者チェック
                            if ($this->checkParticipateMember($event_member)
                                === false
                            ) {
                                $this->throwError();
                            }
                        }
                    }
                }
            }
        }
        // 参加者あり
        if (isset($input_data)) {
            // 連携が正常終了している場合
            if ($coop_data->cooperation_status
                == GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
            ) {
                // 予約情報ステータス取得
                $status
                    = $this->getReservationStatus($coop_data->reservation_id,
                    $coop_data->old_password);
                if ($status === false) {
                    cb_throw_error(E_GRN_NETMEETING_RESERVE_GET_DETAIL_ERROR);
                }
                // 終了予定以外
                if (($status === GRN_NETMEETING_API_MEETING_STATUS_WAIT)
                    || ($status === GRN_NETMEETING_API_MEETING_STATUS_NOW)
                ) {
                    $reservation_id = $coop_data->reservation_id;

                    if (isset($event_member)) {
                        // 連携テーブル更新
                        if ($db_logic->updateCoopTableEventMemberData($coop_data)
                            === false
                        ) {
                            // エラーメッセージ表示
                            cb_throw_error(E_GRN_NETMEETING_INVITE_ADD_ERROR);
                        }

                        if (array_key_exists($login_id,
                            $coop_data->invite_data)
                        ) {
                            $invite_data = $coop_data->invite_data[$login_id];

                            // 招待者テーブル削除
                            $db_logic->deleteInviteTableById($invite_data->invite_id);

                            if ((isset($reservation_id)
                                 && strlen($reservation_id))
                                && (isset($invite_data->guest_id)
                                    && strlen($invite_data->guest_id) > 0)
                            ) {
                                // 招待者削除API実行
                                if ($sync_logic->netmeeting_invite_delete($reservation_id,
                                        $invite_data->guest_id) === false
                                ) {
                                    // エラーメッセージ表示
                                    cb_throw_error(E_GRN_NETMEETING_INVITE_ADD_ERROR);
                                }
                            }
                        }
                    }

                    if ((isset($reservation_id) && strlen($reservation_id))
                        && (isset($event_member))
                    ) {
                        // 招待者追加
                        if ($this->_InviteAdd($reservation_id,
                                $coop_data->coop_id, $event_member) === false
                        ) {
                            // エラーメッセージ表示
                            cb_throw_error(E_GRN_NETMEETING_INVITE_ADD_ERROR);
                        }
                    }
                }
            }
        }
    }

    /**
     * 招待者削除
     */
    public function cmmandNetmeetingInviteDelete($event_id, $login_id)
    {
        $db_logic = $this->_getDBLogic();
        $sync_logic = $this->_getSyncLogic();

        $coop_data = null;
        if (isset($event_id) && strlen($event_id) > 0) {
            // 連携データ取得
            $coop_data = $db_logic->getNetmeetingCoopDataByEventId($event_id);
        }
        // 連携データあり
        if (isset($coop_data)) {
            $reservation_id = $coop_data->reservation_id;
            $guest_id = null;

            if (is_array($coop_data->event_members)
                && count($coop_data->event_members) > 0
            ) {
                if (array_key_exists($login_id, $coop_data->event_members)) {
                    unset($coop_data->event_members[$login_id]);

                    // 連携テーブル更新
                    $db_logic->updateCoopTableEventMemberData($coop_data);

                    if (array_key_exists($login_id, $coop_data->invite_data)) {
                        $invite_data = $coop_data->invite_data[$login_id];
                        $guest_id = $invite_data->guest_id;

                        // 招待者テーブル削除
                        $db_logic->deleteInviteTableById($invite_data->invite_id);
                    }

                    // コミット
                    $db_logic->commitNetmeetingCoopTable();
                }
            }

            if ((isset($reservation_id) && strlen($reservation_id))
                && (isset($guest_id) && strlen($guest_id))
            ) {
                // 予約情報ステータス取得
                $status
                    = $this->getReservationStatus($coop_data->reservation_id,
                    $coop_data->old_password);

                // 終了予定以外
                if (($status === GRN_NETMEETING_API_MEETING_STATUS_WAIT)
                    || ($status === GRN_NETMEETING_API_MEETING_STATUS_NOW)
                ) {
                    // 招待者削除API実行
                    $sync_logic->netmeeting_invite_delete($reservation_id,
                        $guest_id);
                }
            }
        }
    }
}

/**
 * @package     grn.netmeeting
 */
class GRN_Schedule_Netmeeting_InputData
{
    /**
     * イベントID
     */
    public $event_id = null;
    /**
     * 施設データ
     */
    public $facilities = null;
    /**
     * 開始日時
     */
    public $start_datetime = null;
    /**
     * 終了日時
     */
    public $end_datetime = null;
    /**
     * タイトル
     */
    public $title = null;
    /**
     * メモ
     */
    public $memo = null;
    /**
     * パスワード設定
     */
    public $password_set = null;
    /**
     * パスワード
     */
    public $password = null;
    /**
     * パスワード(確認用)
     */
    public $retype = null;
    /**
     * 参加者
     */
    public $event_members = null;
    /**
     * 外部ユーザー
     */
    public $outside_members = null;
    /**
     * 操作ユーザー
     */
    public $operator = null;
    /**
     * タイムゾーン
     */
    public $timezone = null;
    /**
     * タイムゾーン(終了)
     */
    public $end_timezone = null;

    function __construct()
    {
    }

    public function getFacility()
    {
        $facility = null;
        if (is_array($this->facilities) && (count($this->facilities) == 1)) {
            $facility = $this->facilities[0];
            if ( ! is_a($facility, 'GRN_Facility_Facility')) {
                $facility = null;
            }
        }

        return $facility;
    }

    public function getFacilityCode()
    {
        $code = null;
        if (is_array($this->facilities) && (count($this->facilities) == 1)) {
            $facility = $this->facilities[0];
            if (is_a($facility, 'GRN_Facility_Facility')) {
                $code = $facility->get('foreign_key');
            }
        }

        return $code;
    }

    public function getStartDatetime()
    {
        return $this->start_datetime;
    }

    public function getEndDatetime()
    {
        return $this->end_datetime;
    }

    public function getTimezone()
    {
        return $this->timezone;
    }

    public function getEndTimezone()
    {
        return $this->end_timezone;
    }
}

