<?php
/**
 * スケジューラーのユーティリティ関数
 *
 * @author      A.Shima     2004/10/25
 * @package     grn.schedule
 */

require_once('fw/profile.csp');
require_once('fw/date.csp');

use grn\schedule\bean\AttendanceStatus;


/**
 * プロファイルの属性の作成
 *
 * @package     grn.schedule
 *
 * @param   CB_Profile $profile     プロファイル
 * @param   string     $profile_key 属性名
 *
 * @return  boolean     成功した場合はTRUE、それ以外はFALSE
 */
function grn_schedule_createAttribute($profile, $profile_key)
{
    if ( ! is_a($profile, 'CB_Profile')) {
        return false;
    }

    return $profile->createAttribute($profile_key, '');
}

/**
 * プロファイルのアップデート
 *
 * @package     grn.schedule
 *
 * @param   CB_Profile $profile     プロファイル
 * @param   string     $profile_key 属性名
 * @param   mixed      $value       値
 *
 * @return  boolean     成功した場合はTRUE、それ以外はFALSE
 */
function grn_schedule_updateAttribute($profile, $profile_key, $value)
{
    $temp = null;
    $ret = $profile->getAttribute($profile_key, $temp);

    // プロファイルがないので新規作成
    if ($ret === false) {
        $ret = grn_schedule_createAttribute($profile, $profile_key);
        if ($ret === false) {
            return false;
        }
    }

    return $profile->updateAttribute($profile_key, $value);
}

/**
 * 日時が正常かどうかを確かめる関数
 *
 * @package     grn.schedule
 *
 * @param       CB_DateTime $datetime 日時
 *
 * @return      boolean     正常な場合はTRUE、それ以外はFALSE
 */
function grn_schedule_datetime_isvalid($datetime)
{
    if ( ! is_a($datetime, 'CB_DateTime')) {
        return false;
    }

    if ($datetime->year < 1970 || $datetime->year > 2037) {
        return false;
    }

    if ($datetime->month < 1 || $datetime->month > 12) {
        return false;
    }

    if ($datetime->day < 1
        || $datetime->day > cb_get_end_of_monthday($datetime->year,
            $datetime->month)
    ) {
        return false;
    }

    if ($datetime->hour < 0 || $datetime->hour > 23) {
        return false;
    }

    if ($datetime->minute < 0 || $datetime->minute > 59) {
        return false;
    }

    if ($datetime->second < 0 || $datetime->second > 59) {
        return false;
    }

    return true;
}

/**
 * 日付が正常かどうかを確かめる関数
 *
 * @package     grn.schedule
 *
 * @param       CB_Date $date 日付
 *
 * @return      boolean     正常な場合はTRUE、それ以外はFALSE
 */
function grn_schedule_date_isvalid($date)
{
    if ( ! is_a($date, 'CB_Date')) {
        return false;
    }

    if ($date->year < 1970 || $date->year > 2037) {
        return false;
    }

    if ($date->month < 1 || $date->month > 12) {
        return false;
    }

    if ($date->day < 1
        || $date->day > cb_get_end_of_monthday($date->year, $date->month)
    ) {
        return false;
    }

    return true;
}

/**
 * 時刻が正常かどうかを確かめる関数
 *
 * @package     grn.schedule
 *
 * @param       CB_Time $time 時刻
 *
 * @return      boolean     正常な場合はTRUE、それ以外はFALSE
 */
function grn_schedule_time_isvalid($time)
{
    if ( ! is_a($time, 'CB_Time')) {
        return false;
    }

    if ($time->hour < 0 || $time->hour > 23) {
        return false;
    }

    if ($time->minute < 0 || $time->minute > 59) {
        return false;
    }

    if ($time->second < 0 || $time->second > 59) {
        return false;
    }

    return true;
}

/**
 * 日付時刻を正規化したCB_DateTimeExを返す
 *
 * @package     grn.schedule
 *
 * @param   CB_Date $date 日付
 * @param   CB_Time $time 時刻
 *
 * @return  CB_DateTimeEx
 */
function grn_schedule_get_datetime($date, $time)
{
    if ( ! is_a($date, 'CB_Date') || ! is_a($time, 'CB_Time')) {
        $___ret = false;

        return $___ret;
    }

    $datetime = new CB_DateTime();
    $datetime->year = intval($date->year);
    $datetime->month = intval($date->month);
    $datetime->day = intval($date->day);

    $datetimeex = new CB_DateTimeEx($datetime);

    // 24時の場合は1日ずらす
    if (intval($time->hour) == 24) {
        $datetimeex->moveDays(1);
        $datetimeex->hour = 0;
    } else {
        $datetimeex->hour = intval($time->hour);
    }

    $datetimeex->minute = intval($time->minute);
    $datetimeex->second = intval($time->second);

    return $datetimeex;
}

/**
 * 予定のタイトルの作成
 * この関数は、パフォーマンスを向上させるため、 cb_msg を使わない
 *
 * @param   string $menu
 * @param   string $detail
 */
function grn_schedule_get_event_title($menu, $detail)
{
    $str_title = "--"; // cb_msg( 'grn.schedule', 'event_no_title' );

    if (is_string($menu) && mb_strlen($menu) && is_string($detail)
        && mb_strlen($detail)
    ) {
        //$str_title = cb_msg( 'grn.schedule', 'event_full_title', array( 'menu'=>$menu, 'detail'=>$detail ) );
        $str_title = htmlspecialchars($menu) . ":" . htmlspecialchars($detail);
    } elseif (is_string($menu) && mb_strlen($menu)) {
        //$str_title = cb_msg( 'grn.schedule', 'event_title', array( 'title'=>$menu ) );
        $str_title = htmlspecialchars($menu);
    } elseif (is_string($detail) && mb_strlen($detail)) {
        //$str_title = cb_msg( 'grn.schedule', 'event_title', array( 'title'=>$detail ) );
        $str_title = htmlspecialchars($detail);
    }

    return $str_title;
}

/**
 * The function created attributes for event using attendance check
 *
 * @param $row
 * @param $event
 */
function grn_schedule_createAttendanceStatusAttribute($row, &$event)
{
    if (cb_at($row, AttendanceStatus::ATTENDANCE_CHECK_FIELD) == 1) {
        $event[AttendanceStatus::ATTENDANCE_CHECK_USING] = true;
    } else {
        $event[AttendanceStatus::ATTENDANCE_CHECK_USING] = false;
    }
    switch (cb_at($row, AttendanceStatus::ATTENDANCE_CHECK_STATUS)) {
        case '1':
            $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                = AttendanceStatus::STATUS_ATTENDANT;
            break;
        case '0':
            $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                = AttendanceStatus::STATUS_ABSENT;
            break;
        default:
            $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                = AttendanceStatus::STATUS_UNCONFIRMED;
    }
}

/** GRB-16905
 *
 * @param $user
 *
 * @return mixed
 */
function grn_schedule_getUserObject($user)
{
    if ($user instanceof \CB_User) {
        return $user;
    }
    $userId = $user;
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    return $uum->getUser($userId);
}
