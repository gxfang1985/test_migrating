<?php

/**
 * Netmeeting CoopTable Logic
 *
 * @updated:
 *    2011/06/08 VCBSCH0010 Sync for V-CUBE
 */

class GRN_Schedule_Netmeeting_CoopTable_Logic
{
    /**
     * @access private
     */
    function __construct()
    {
    }

    private static $_instance = null;

    /**
     * @return GRN_Schedule_Netmeeting_CoopTable_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    private $_tablemanager = null;

    /**
     * @access private
     */
    function _getTableManager()
    {
        if (is_null($this->_tablemanager)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_tablemanager = $app_locator->getTableManager('schedule');
        }

        return $this->_tablemanager;
    }

    /**
     * @access private
     */
    private $_db = null;

    /**
     * @access private
     */
    function _getDBConnection()
    {
        // 初期化されいなければ初期化
        if (is_null($this->_db)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_db = $app_locator->getConnection('schedule');
        }

        return $this->_db;
    }

    /**
     * @access private
     */
    private $_netmeetingcooptable = null;

    /**
     * @access private
     */
    function _getNetmeetingCoopTable()
    {
        if (is_null($this->_netmeetingcooptable)) {
            require_once('schedule/table.csp');
            $tm = $this->_getTableManager();
            $this->_netmeetingcooptable
                = $tm->getTableInfo(GRN_SCHEDULE_NETMEETING_COOP);
        }

        return $this->_netmeetingcooptable;
    }

    /**
     * @access private
     */
    private $_netmeetinginvitetable = null;

    /**
     * @access private
     */
    function _getNetmeetingInviteTable()
    {
        if (is_null($this->_netmeetinginvitetable)) {
            require_once('schedule/table.csp');
            $tm = $this->_getTableManager();
            $this->_netmeetinginvitetable
                = $tm->getTableInfo(GRN_SCHEDULE_NETMEETING_INVITE);
        }

        return $this->_netmeetinginvitetable;
    }

    /**
     * コミット
     */
    public function commitNetmeetingCoopTable()
    {
        $db = $this->_getDBConnection();
        $db->commit();
    }

    /**
     * スケジュールコミット
     */
    public function commitNetmeetingSchedule()
    {
        if (class_exists('CB_TransactionManager')) {
            $tm = CB_TransactionManager::getInstance();

            // commit remained transacions if any
            $tm->commit();

            unset($tm);
        }
    }

    /**
     * 連携テーブルフィールドに値をセット
     *
     * @access private
     */
    function _setCoopTableRow($row, $coop_data)
    {
        $row->set(GRN_SCHEDULE_NETMEETING_EVENT_ID, $coop_data->event_id);
        $row->set(GRN_SCHEDULE_NETMEETING_FACILITY_CODE,
            $coop_data->facility_code);
        $row->set(GRN_SCHEDULE_NETMEETING_TITLE, $coop_data->title);
        $row->set(GRN_SCHEDULE_NETMEETING_MEMO, $coop_data->memo);
        $row->set(GRN_SCHEDULE_NETMEETING_START_DATETIME,
            $coop_data->start_datetime);
        $row->set(GRN_SCHEDULE_NETMEETING_END_DATETIME,
            $coop_data->end_datetime);
        $row->set(GRN_SCHEDULE_NETMEETING_TIMEZONE, $coop_data->timezone);
        $row->set(GRN_SCHEDULE_NETMEETING_END_TIMEZONE,
            $coop_data->end_timezone);
        if ($coop_data->password_set == '0') {
            $row->set(GRN_SCHEDULE_NETMEETING_PASSWORD, null);
        } elseif ($coop_data->password_set == '1') {
            $row->set(GRN_SCHEDULE_NETMEETING_PASSWORD, $coop_data->password);
        }
        if (is_array($coop_data->event_members)) {
            $event_members = serialize($coop_data->event_members);
        } else {
            $event_members = $coop_data->event_members;
        }
        $row->set(GRN_SCHEDULE_NETMEETING_EVENT_MEMBERS, $event_members);
        if (is_array($coop_data->outside_members)) {
            $outside_members = serialize($coop_data->outside_members);
        } else {
            $outside_members = $coop_data->outside_members;
        }
        $row->set(GRN_SCHEDULE_NETMEETING_OUTSIDE_MEMBERS, $outside_members);
        $row->set(GRN_SCHEDULE_NETMEETING_COOPERATION_STATUS,
            $coop_data->cooperation_status);
        $row->set(GRN_SCHEDULE_NETMEETING_TIMESTAMP, new CB_TimeStampEx());
    }

    /**
     * 招待者テーブルフィールドに値をセット
     *
     * @access private
     */
    function _setInviteTableRow($row, $coop_row, $invite)
    {
        $row->set(GRN_SCHEDULE_NETMEETING_COOP_ID, $coop_row);
        $row->set(GRN_SCHEDULE_NETMEETING_USER_ID, $invite->user_id);
        $row->set(GRN_SCHEDULE_NETMEETING_USER_NAME, $invite->user_name);
        $row->set(GRN_SCHEDULE_NETMEETING_USER_EMAIL, $invite->user_email);
        $row->set(GRN_SCHEDULE_NETMEETING_USER_LANG, $invite->user_lang);
        $row->set(GRN_SCHEDULE_NETMEETING_USER_TIMEZONE,
            $invite->user_timezone);
        $row->set(GRN_SCHEDULE_NETMEETING_USER_TYPE, $invite->user_type);
        $row->set(GRN_SCHEDULE_NETMEETING_GUEST_ID, $invite->guest_id);
        $row->set(GRN_SCHEDULE_NETMEETING_INVITE_URL, $invite->invite_url);
    }

    /**
     * 連携テーブルの中身の取得
     *
     * @access private
     */
    function _setCoopTableData($cooprow, $coop_data)
    {
        if ( ! $cooprow) {
            return;
        }

        $coop_data->coop_id = $cooprow->getOID();
        $coop_data->event_id
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_EVENT_ID);
        $coop_data->facility_code
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_FACILITY_CODE);
        $coop_data->title
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_TITLE);
        $coop_data->memo
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_MEMO);
        $coop_data->start_datetime
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_START_DATETIME);
        $coop_data->end_datetime
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_END_DATETIME);
        $coop_data->timezone
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_TIMEZONE);
        $coop_data->end_timezone
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_END_TIMEZONE);
        $coop_data->password
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_PASSWORD);
        $coop_data->old_password = $coop_data->password;
        $event_members
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_EVENT_MEMBERS);
        if (strlen($event_members) > 0) {
            $coop_data->event_members = cb_unserialize($event_members,
                ["allowed_classes" => false]);
        }
        $outside_members
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_OUTSIDE_MEMBERS);
        if (strlen($outside_members) > 0) {
            $coop_data->outside_members = cb_unserialize($outside_members,
                ["allowed_classes" => false]);
        }
        $creator = $cooprow->get(GRN_SCHEDULE_NETMEETING_CREATOR);
        if (strlen($creator) > 0) {
            $coop_data->creator = cb_unserialize($creator,
                ["allowed_classes" => false]);
        }
        $modifier = $cooprow->get(GRN_SCHEDULE_NETMEETING_MODIFIER);
        if (strlen($modifier) > 0) {
            $coop_data->modifier = cb_unserialize($modifier,
                ["allowed_classes" => false]);
        }
        $coop_data->reservation_id
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_RESERVATION_ID);
        $coop_data->cooperation_status
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_COOPERATION_STATUS);
        $coop_data->timestamp
            = $cooprow->get(GRN_SCHEDULE_NETMEETING_TIMESTAMP);
    }

    /**
     * 招待者テーブルの中身の取得
     *
     * @access private
     */
    function _setInviteTableData($inviterow, $invite_data)
    {
        if ( ! $inviterow) {
            return;
        }

        $invite_data->invite_id = $inviterow->getOID();
        $invite_data->coop_id
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_COOP_ID);
        $invite_data->user_id
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_USER_ID);
        $invite_data->user_name
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_USER_NAME);
        $invite_data->user_email
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_USER_EMAIL);
        $invite_data->user_lang
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_USER_LANG);
        $invite_data->user_timezone
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_USER_TIMEZONE);
        $invite_data->user_type
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_USER_TYPE);
        $invite_data->guest_id
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_GUEST_ID);
        $invite_data->invite_url
            = $inviterow->get(GRN_SCHEDULE_NETMEETING_INVITE_URL);
    }

    /**
     * 連携データの取得
     *
     * @access private
     * @return  object
     */
    function _getCoopRowById($coop_id)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $row = $netmeetingtable->getRow($coop_id);

        return $row;
    }

    /**
     * 連携データの取得
     *
     * @access private
     * @return  object
     */
    function _getCoopRowByEventId($event_id)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $rowset = new CB_RowSet($netmeetingtable);
        $rowset->addCondition($rowset->queryf("col_event_id = '@S'",
            $event_id));
        $row = $rowset->iterate();
        $rowset->destroy();

        return $row;
    }

    /**
     * 招待者データの取得
     *
     * @access private
     * @return  object
     */
    function _getInviteRowById($invite_id)
    {
        $netmeetingtable = $this->_getNetmeetingInviteTable();
        $row = $netmeetingtable->getRow($invite_id);

        return $row;
    }

    /**
     * 招待者データの取得
     *
     * @access private
     * @return  object
     */
    function _getInviteRowByCoopId($coop_id)
    {
        $netmeetingtable = $this->_getNetmeetingInviteTable();
        $rowset = new CB_RowSet($netmeetingtable);
        $rowset->addCondition($rowset->queryf("col_coop_id = '@S'", $coop_id));

        return $rowset;
    }

    /**
     * 連携データの登録
     *
     * @return  numeric レコードのID
     */
    public function insertCoopTable($coop_data)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $row = $netmeetingtable->newRow();

        $this->_setCoopTableRow($row, $coop_data);

        if (is_array($coop_data->creator)) {
            $creator = serialize($coop_data->creator);
        } else {
            $creator = $coop_data->creator;
        }
        $row->set(GRN_SCHEDULE_NETMEETING_CREATOR, $creator);

        $coop_data->coop_id = $row->getOID();

        return $coop_data->coop_id;
    }

    /**
     * 連携データの更新
     *
     * @return  boolean
     */
    public function updateCoopTable($coop_data)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $row = $netmeetingtable->getRow($coop_data->coop_id);

        if ( ! $row) {
            return false;
        }

        $this->_setCoopTableRow($row, $coop_data);

        if (is_array($coop_data->modifier)) {
            $modifier = serialize($coop_data->modifier);
        } else {
            $modifier = $coop_data->modifier;
        }
        $row->set(GRN_SCHEDULE_NETMEETING_MODIFIER, $modifier);

        return $row->updateNow();
    }

    /**
     * 連携データ予約情報の更新
     *
     * @return  boolean
     */
    public function updateCoopTableReservationData($coop_data)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $row = $netmeetingtable->getRow($coop_data->coop_id);

        if ( ! $row) {
            return false;
        }

        $row->set(GRN_SCHEDULE_NETMEETING_RESERVATION_ID,
            $coop_data->reservation_id);
        $row->set(GRN_SCHEDULE_NETMEETING_COOPERATION_STATUS,
            $coop_data->cooperation_status);
        $row->set(GRN_SCHEDULE_NETMEETING_TIMESTAMP, new CB_TimeStampEx());

        return $row->updateNow();
    }

    /**
     * 連携データの参加者の更新
     *
     * @return  boolean
     */
    public function updateCoopTableEventMemberData($coop_data)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $row = $netmeetingtable->getRow($coop_data->coop_id);

        if ( ! $row) {
            return false;
        }

        if (is_array($coop_data->event_members)) {
            $event_members = serialize($coop_data->event_members);
        } else {
            $event_members = $coop_data->event_members;
        }
        $row->set(GRN_SCHEDULE_NETMEETING_EVENT_MEMBERS, $event_members);
        $row->set(GRN_SCHEDULE_NETMEETING_TIMESTAMP, new CB_TimeStampEx());

        return $row->updateNow();
    }

    /**
     * 連携データの参加者、外部招待者の更新
     *
     * @return  boolean
     */
    public function updateCoopTableMemberData($coop_data)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $row = $netmeetingtable->getRow($coop_data->coop_id);

        if ( ! $row) {
            return false;
        }

        if (is_array($coop_data->event_members)) {
            $event_members = serialize($coop_data->event_members);
        } else {
            $event_members = $coop_data->event_members;
        }
        $row->set(GRN_SCHEDULE_NETMEETING_EVENT_MEMBERS, $event_members);
        if (is_array($coop_data->outside_members)) {
            $outside_members = serialize($coop_data->outside_members);
        } else {
            $outside_members = $coop_data->outside_members;
        }
        $row->set(GRN_SCHEDULE_NETMEETING_OUTSIDE_MEMBERS, $outside_members);
        $row->set(GRN_SCHEDULE_NETMEETING_COOPERATION_STATUS,
            $coop_data->cooperation_status);
        $row->set(GRN_SCHEDULE_NETMEETING_TIMESTAMP, new CB_TimeStampEx());

        return $row->updateNow();
    }

    /**
     * 連携データの削除
     *
     * @return  boolean
     */
    public function deleteCoopTable($coop_id)
    {
        $netmeetingtable = $this->_getNetmeetingCoopTable();
        $row = $netmeetingtable->getRow($coop_id);

        if ( ! $row) {
            return false;
        }
        $row->delete();

        return true;
    }

    /**
     * 招待者データの登録
     *
     * @return  boolean
     */
    public function insertInviteTable1Rec($coop_id, $invite_data)
    {
        $coop_row = $this->_getCoopRowById($coop_id);
        if ( ! $coop_row) {
            return false;
        }

        $netmeetingtable = $this->_getNetmeetingInviteTable();
        $row = $netmeetingtable->newRow();
        $this->_setInviteTableRow($row, $coop_row, $invite_data);
        $invite_data->invite_id = $row->getOID();

        return true;
    }

    /**
     * 招待者データの登録
     *
     * @return  boolean
     */
    public function insertInviteTable($coop_data)
    {
        if ( ! is_array($coop_data->invite_data)
             || count($coop_data->invite_data) == 0
        ) {
            return false;
        }

        $coop_row = $this->_getCoopRowById($coop_data->coop_id);
        if ( ! $coop_row) {
            return false;
        }

        $netmeetingtable = $this->_getNetmeetingInviteTable();

        foreach (array_keys($coop_data->invite_data) as $key) {
            $invite = $coop_data->invite_data[$key];
            if (is_a($invite, 'GRN_Schedule_Netmeeting_InviteTable')) {
                $row = $netmeetingtable->newRow();

                $this->_setInviteTableRow($row, $coop_row, $invite);

                $invite->invite_id = $row->getOID();
            }
        }

        return true;
    }

    /**
     * 招待者データの削除
     *
     * @return  boolean
     */
    public function deleteInviteTableById($invite_id)
    {
        $netmeetingtable = $this->_getNetmeetingInviteTable();
        $row = $netmeetingtable->getRow($invite_id);

        if ( ! $row) {
            return false;
        }
        $row->delete();

        return true;
    }

    /**
     * 招待者データの削除
     *
     * @return  boolean
     */
    public function deleteInviteTableByCoopId($coop_id)
    {
        $netmeetingtable = $this->_getNetmeetingInviteTable();
        $rowset = new CB_RowSet($netmeetingtable);
        $rowset->addCondition($rowset->queryf("col_coop_id = '@S'", $coop_id));

        while (($row = $rowset->iterate())) {
            $row->delete();
        }
        $rowset->destroy();

        return true;
    }

    /**
     * 連携データの取得
     *
     * @return  object
     */
    public function getNetmeetingCoopDataByEventId($event_id)
    {
        $row = $this->_getCoopRowByEventId($event_id);
        if ( ! $row) {
            $coop_data = null;
        } else {
            // 入れ物準備
            $coop_data = new GRN_Schedule_Netmeeting_CoopTable();
            $this->_setCoopTableData($row, $coop_data);

            // 招待者取得
            $rowset = $this->_getInviteRowByCoopId($coop_data->coop_id);
            if ($rowset) {
                $coop_data->invite_data = [];
                while ( ! is_null($row = $rowset->iterate())) {
                    // 入れ物準備
                    $invite_data = new GRN_Schedule_Netmeeting_InviteTable();
                    $this->_setInviteTableData($row, $invite_data);
                    $coop_data->invite_data[$invite_data->user_id]
                        = $invite_data;
                }
            }
        }

        return $coop_data;
    }

    /**
     * 連携テーブルクラスに入力値をセット
     *
     * @return   boolean
     */
    public function setInputData($input_data, $coop_data)
    {
        if ( ! is_a($input_data, 'GRN_Schedule_Netmeeting_InputData')
             || ! is_a($coop_data, 'GRN_Schedule_Netmeeting_CoopTable')
        ) {
            return false;
        }

        if ( ! ($coop_data->facility_code = $input_data->getFacilityCode())) {
            return false;
        }

        if ( ! ($coop_data->start_datetime = $input_data->getStartDatetime())) {
            return false;
        }

        if ( ! ($coop_data->end_datetime = $input_data->getEndDatetime())) {
            return false;
        }

        if ( ! ($coop_data->timezone = $input_data->getTimezone())) {
            return false;
        }

        if ( ! ($coop_data->end_timezone = $input_data->getEndTimezone())) {
            return false;
        }

        $coop_data->title = $input_data->title;
        $coop_data->memo = $input_data->memo;
        $coop_data->password_set = $input_data->password_set;
        if ($coop_data->password_set == '0') {
            $coop_data->password = null;
        } elseif ($coop_data->password_set == '1') {
            $coop_data->password = $input_data->password;
        }
        $coop_data->operator = $input_data->operator;
        $coop_data->event_members = $input_data->event_members;
        $coop_data->outside_members = $input_data->outside_members;

        $guests = [];
        if (is_array($input_data->event_members)
            && count($input_data->event_members) > 0
        ) {
            foreach (array_keys($input_data->event_members) as $key) {
                $event_member = $input_data->event_members[$key];

                $guest_id = null;
                if (is_array($coop_data->invite_data)
                    && count($coop_data->invite_data) > 0
                ) {
                    $guest_id = array_key_exists($key, $coop_data->invite_data)
                        ? $coop_data->invite_data[$key]->guest_id : null;
                }
                $event_member['guest_id'] = $guest_id;

                $guests[$key] = $event_member;
            }
        }
        if (is_array($input_data->outside_members)
            && count($input_data->outside_members) > 0
        ) {
            foreach (array_keys($input_data->outside_members) as $key) {
                $outside_member = $input_data->outside_members[$key];

                $guest_id = null;
                if (is_array($coop_data->invite_data)
                    && count($coop_data->invite_data) > 0
                ) {
                    foreach (array_keys($coop_data->invite_data) as $inv_key) {
                        if (strcmp($coop_data->invite_data[$inv_key]->user_email,
                                $outside_member['user_email']) == 0
                        ) {
                            $guest_id
                                = $coop_data->invite_data[$inv_key]->guest_id;
                        }
                    }
                }
                $outside_member['guest_id'] = $guest_id;

                $guests[$key] = $outside_member;
            }
        }

        $coop_data->invite_data = [];
        if (is_array($guests) && count($guests) > 0) {
            foreach ($guests as $member) {
                $invite_data = $this->setInputDataInvite($member);
                $coop_data->invite_data[$member['user_id']] = $invite_data;
            }
        }

        return true;
    }

    /**
     * 招待者テーブルクラスに入力値をセット(招待者追加用)
     *
     * @return GRN_Schedule_Netmeeting_InviteTable
     */
    public function setInputDataInvite($member)
    {
        $invite_data = new GRN_Schedule_Netmeeting_InviteTable();

        $invite_data->user_id = $member['user_id'];
        $invite_data->user_name = $member['user_name'];
        $invite_data->user_email = $member['user_email'];
        $invite_data->user_type = $member['user_type'];
        $invite_data->user_timezone = $member['user_timezone'];
        $invite_data->user_lang = $member['user_lang'];
        $invite_data->guest_id = array_key_exists('guest_id', $member)
            ? $member['guest_id'] : null;

        return $invite_data;
    }
}

/**
 * @package     grn.netmeeting
 */
class GRN_Schedule_Netmeeting_CoopTable
{
    /**
     * 連携ID
     */
    public $coop_id = null;
    /**
     * イベントID
     */
    public $event_id = null;
    /**
     * 施設コード
     */
    public $facility_code = null;
    /**
     * 開始日時
     */
    public $start_datetime = null;
    /**
     * 終了日時
     */
    public $end_datetime = null;
    /**
     * タイムゾーン
     */
    public $timezone = null;
    /**
     * タイムゾーン(終了)
     */
    public $end_timezone = null;
    /**
     * タイトル
     */
    public $title = null;
    /**
     * メモ
     */
    public $memo = null;
    /**
     * パスワード設定
     */
    public $password_set = null;
    /**
     * パスワード
     */
    public $password = null;
    /**
     * 変更前パスワード
     */
    public $old_password = null;
    /**
     * 参加者
     */
    public $event_members = null;
    /**
     * 外部ユーザー
     */
    public $outside_members = null;
    /**
     * 登録者
     */
    public $creator = null;
    /**
     * 更新者
     */
    public $modifier = null;
    /**
     * 操作ユーザー
     */
    public $operator = null;
    /**
     * 予約ID
     */
    public $reservation_id = null;
    /**
     * 連携状況
     */
    public $cooperation_status = GRN_NETMEETING_COOPERATION_STATUS_INCOMPLETE;
    /**
     * 招待者データ
     */
    public $invite_data = null;
    /**
     * タイムスタンプ
     */
    public $timestamp = null;

    function __construct()
    {
    }
}

/**
 * @package     grn.netmeeting
 */
class GRN_Schedule_Netmeeting_InviteTable
{
    /**
     * 連携ID
     */
    public $coop_id = null;
    /**
     * ユーザーID
     */
    public $user_id = null;
    /**
     * E-Mail
     */
    public $user_email = null;
    /**
     * 言語
     */
    public $user_lang = null;
    /**
     * タイムゾーン
     */
    public $user_timezone = null;
    /**
     * 招待者タイプ
     */
    public $user_type = null;
    /**
     * ゲストID
     */
    public $guest_id = null;
    /**
     * 招待URL
     */
    public $invite_url = null;

    function __construct()
    {
    }
}

