<?php

namespace grn\schedule;

class EventMemberParamUtil
{
    const TYPE_USER = 'user';
    const TYPE_ORGANIZATION = 'org';
    const TYPE_MYGROUP = 'mygroup';
    const TYPE_FACILITY = 'facility';
    const TYPE_SELECTED = 'selected';
    const TYPE_LOGGED_IN_USER = 'login';
    const TYPE_RECENT_USERS = 'recent_users';
    const TYPE_RECENT_FACILITIES = 'recent_facilities';
    const TYPE_SEARCH = 'search';

    const PREFIX_USER = 'u';
    const PREFIX_ORGANIZATION = 'g';
    const PREFIX_MYGROUP = 'm';
    const PREFIX_FACILITY = 'f';
    const PREFIX_RECENT_USERS = 'r';
    const PREFIX_RECENT_FACILITIES = 'fr';

    /**
     * @param $value        string Value of the "uid"|"gid" param. <br/>
     *                      Its format looks as follows "10", "g5", "m3", "f4", etc.
     * @param $default_type string The default object type for the value which is not specified prefix.<br/>
     *                      See: EventMemberParamUtil::TYPE_* constants
     *
     * @return array Parsed value contains "id" and "value".
     */
    public static function parseParamValue(
        $value,
        $default_type = self::TYPE_USER
    ) {
        $parsed = ['id' => '', 'type' => ''];

        if ( ! isset($value)) {
            return $parsed;
        }

        if ($value == self::TYPE_SELECTED
            || $value == self::TYPE_SEARCH
            || $value == self::TYPE_LOGGED_IN_USER
        ) {
            $parsed['type'] = $value;

            return $parsed;
        }

        preg_match("/([a-z]*)(\d*)/", $value, $parsed_values);

        $abbr_type = $parsed_values[1];
        $id = $parsed_values[2];

        $map = [
            self::PREFIX_USER              => self::TYPE_USER,
            self::PREFIX_ORGANIZATION      => self::TYPE_ORGANIZATION,
            self::PREFIX_MYGROUP           => self::TYPE_MYGROUP,
            self::PREFIX_FACILITY          => self::TYPE_FACILITY,
            self::PREFIX_RECENT_USERS      => self::TYPE_RECENT_USERS,
            self::PREFIX_RECENT_FACILITIES => self::TYPE_RECENT_FACILITIES
        ];

        if ( ! array_key_exists($abbr_type, $map)) {
            $id = $value;
            $type = $default_type;
        } else {
            $type = cb_at($map, $abbr_type, $default_type);
        }

        $parsed['type'] = $type;
        $parsed['id'] = $id;

        return $parsed;
    }

    /**
     * @param $id   string Object ID
     * @param $type string Type of the object. See: EventMemberParamUtil::TYPE_* constants
     *
     * @return string The created value looks like as follows "10", "g5", "m3", "f4", etc.
     */
    public static function createParamValue($id, $type)
    {
        $map = [
            self::TYPE_USER         => self::PREFIX_USER,
            self::TYPE_ORGANIZATION => self::PREFIX_ORGANIZATION,
            self::TYPE_MYGROUP      => self::PREFIX_MYGROUP,
            self::TYPE_FACILITY     => self::PREFIX_FACILITY
        ];

        $abbr_type = cb_at($map, $type, '');

        return $abbr_type . $id;
    }

    /**
     * @param $params  array $params['member_ids']: IDs of users/groups/facilities.<br/>
     *                 The format looks like this: <br/>
     *                 <code>
     *                 $params['member_ids'] = ["g1","2","f1","f3"];
     *                 </code>
     *
     * @return string The format looks like "g.1-u.2-f.1-f.3"
     */
    public static function createUrlFragment($params)
    {
        $member_ids = $params['member_ids'];

        $results = [];

        $map = [
            self::TYPE_ORGANIZATION => 'g.%s',
            self::TYPE_FACILITY     => 'f.%s',
            self::TYPE_USER         => 'u.%s',
        ];

        foreach ($member_ids as $id) {
            $member = self::parseParamValue($id);

            $format = cb_at($map, $member['type']);

            if ($format) {
                $results[] = sprintf($format, $member['id']);
            }
        }

        $url_fragment = 'members=' . implode('-', $results);

        return $url_fragment;
    }

    /**
     * @param string $values
     *
     * @return array[]
     * [ [ 'id'=>'123', 'type'='user','name' => '', 'selected' => $selected, 'colorId'  => $color_id  ], ... ]
     */
    public static function parseParamListValues($values)
    {
        $parsed = [];

        if ( ! isset($values)) {
            return $parsed;
        }

        $exploded_values = explode('-', $values);

        $map = [
            self::PREFIX_USER         => self::TYPE_USER,
            self::PREFIX_ORGANIZATION => self::TYPE_ORGANIZATION,
            self::PREFIX_MYGROUP      => self::TYPE_MYGROUP,
            self::PREFIX_FACILITY     => self::TYPE_FACILITY
        ];

        foreach ($exploded_values as $item) {
            $exploded_items = explode('.', $item);

            if (count($exploded_items) < 2) {
                continue;
            }

            $type = cb_at($map, $exploded_items[0]);
            $id = $exploded_items[1];
            $selected = isset($exploded_items[2]) ? true : false;
            $color_id = isset($exploded_items[3]) ? $exploded_items[3] : null;

            $parsed[] = [
                'id'       => $id,
                'type'     => $type,
                'name'     => '',
                'selected' => $selected,
                'colorId'  => $color_id,
            ];

        }

        return $parsed;
    }
}
