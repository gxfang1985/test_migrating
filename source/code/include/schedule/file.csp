<?php
//GTM-1136
/**
 * attached file manager for schedule application
 *
 * @author  Anh-Nguyen   2013/12
 * @package grn.schedule
 */

require_once('grn/file.csp');
require_once('schedule/resources.csp');
require_once('schedule/table.csp');

class GRN_Schedule_FileBody extends GRN_FileBody
{
    var $_app_id = 'schedule';

    var $col_file
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Schedule_File',
            'lazy' => true
        ];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

class GRN_Schedule_FileLog extends GRN_FileLog
{
    var $_app_id = 'schedule';

    var $col_file
        = [
            'type' => 'relation',
            'to'   => 'GRN_Schedule_File',
            'lazy' => true
        ];
    var $col_body
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Schedule_FileBody'
        ];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

class GRN_Schedule_File extends GRN_File
{
    var $_app_id = 'schedule';
    var $_body_table_name = 'GRN_Schedule_FileBody';
    var $_log_table_name = 'GRN_Schedule_FileLog';

    /**
     * @access private
     */
    private $_triggers = null;

    function __construct($row)
    {
        parent::__construct($row, 'grn.schedule');
    }

    /**
     * invoke hooks on create, update or delete event
     *
     * @access public
     *
     * @param string $action action
     */
    function runHook($action)
    {
        if (is_null($this->_triggers)) {
            $loader = new CB_PluginLoader('grn.schedule.file');
            $this->_triggers = $loader->loadHooks();
        }

        foreach ($this->_triggers as $hook) {
            call_user_func($hook, $this, null, $action);
        }
    }

    // override
    function setTitle($title)
    {
        parent::setTitle($title);
        $this->runHook('update');
    }

    // override

    /**
     * ファイルボディを更新してバージョンを上げる.
     *
     * @param mixed  $user    {@link CB_User}, or NULL.
     * @param mixed  $file    {@link GRN_ServerFile}, or an element of
     *                          $_FILES, or a path string of a file.
     * @param string $comment comment on this operation.
     *
     * @return bool             TRUE if success, FALSE otherwise.
     */
    function update($user, $file, $comment)
    {
        parent::update($user, $file, $comment);
        $this->runHook('update');
    }

    // override

    /**
     * ファイル実体を過去のバージョンから復活させる.
     *
     * @param mixed  $user            {@link CB_User}, or NULL.
     * @param int    $restore_version 復活するバージョン
     * @param string $comment         comment on this operation.
     *
     * @return bool             TRUE if success, FALSE otherwise.
     */
    function restore($user, $restore_version, $comment)
    {
        parent::restore($user, $restore_version, $comment);
        $this->runHook('update');
    }

    /**
     * @param    CB_User $user user is a CB_User object
     *
     * @return   bool
     */
    function isCreator($user)
    {
        return $user && $user->getOID() == $this->getId('creator');
    }
}

class GRN_Schedule_FileManager_Core extends GRN_FileManager
{
    function __construct()
    {
        $this->_file_table = cb_class2table('GRN_Schedule_File');
        $this->_body_table = cb_class2table('GRN_Schedule_FileBody');
    }
}

/**
 * attached file manager class
 *
 * @package grn.schedule
 */
class GRN_Schedule_FileManager
{
    private static $_instance = null;

    /**
     * @static
     * @return GRN_Schedule_FileManager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     * @var CB_TableInfo
     */
    private $_tab_file_relation = null;
    private $_tab_file = null;

    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('schedule');
        $this->_tab_file_relation
            = $manager->getTableInfo(GRN_SCHEDULE_FILERELATION);
        $this->_tab_file = $manager->getTableInfo(GRN_SCHEDULE_FILE);
    }

    /**
     * make condition
     *
     * @param string $event_id
     * @param string $file_id
     *
     * @return string
     */
    function _makeCondition($event_id = null, $file_id = null)
    {
        $query = '';

        $app_locator = GRN_ApplicationLocator::instance();
        $database = $app_locator->getConnection('schedule');

        if ($file_id && $event_id) {
            $query = cb_queryf($database,
                "col_file = '@S' AND col_event = '@S'", $file_id, $event_id);
        } elseif ($file_id) {
            $query .= cb_queryf($database, "col_file = '@S'", $file_id);
        } elseif ($event_id) {
            $query .= cb_queryf($database, "col_event = '@S'", $event_id);
        }

        return $query;
    }

    /**
     * add an attached file
     *
     * @param CB_User            $user
     * @param GRN_Schedule_Event $event
     * @param mixed              $file
     *
     * @return GRN_File                 return FALSE if fail
     */
    function addFile($user, $event, & $file)
    {
        if ( ! $event || ! $file) {
            return false;
        }

        require_once('grn/file.csp');
        $fm = new GRN_Schedule_FileManager_Core();

        $grn_file = null;
        if ($file instanceof GRN_File) {
            if ( ! ($grn_file = $fm->duplicateFile($user, $file, null))) {
                return false;
            }
        } else {
            if ( ! ($grn_file = $fm->createFile($user, $file, null))) {
                return false;
            }
        }

        $row = $this->_tab_file_relation->newRow();

        if ($event instanceof GRN_Schedule_Event) {
            $row->set('event', $event);
        } else {
            $row->delete();

            return false;
        }

        $row->set('file', $grn_file);
        $row->updateNow();

        // logging
        require_once('grn/logger.csp');
        $lm = CB_LoggerManager::getInstance();
        $schedule_log = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
        $log_params = [
            'eid'       => $event->getOID(),
            'fid'       => $grn_file->getOID(),
            'file_name' => $grn_file->getCurrentBody()->get('name')
        ];
        $schedule_log->noticeEx('create', 'file', $log_params);

        $grn_file->runHook('create');

        return $grn_file;
    }

    /**
     * get an attached file
     *
     * @param string $event_id
     * @param string $file_id
     *
     * @return GRN_File         return FALSE if does not exist
     */
    function getFile($event_id, $file_id)
    {
        $db = $this->_tab_file_relation->getDBConnection();
        $event_id = $db->escape($event_id);
        $file_id = $db->escape($file_id);

        if ( ! $event_id) {
            return false;
        }
        if ( ! $file_id) {
            return false;
        }

        if ( ! ($condition = $this->_makeCondition($event_id, $file_id))) {
            return false;
        }

        $rowset = new CB_RowSet($this->_tab_file_relation);
        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! $row) {
            return false;
        }

        return $row->get('file');
    }

    /**
     * get all attached files
     *
     * @param string $event_id
     *
     * @return array    array( file_id => GRN_File )
     */
    function getFiles($event_id)
    {
        $db = $this->_tab_file_relation->getDBConnection();
        $event_id = $db->escape($event_id);

        if ( ! $event_id) {
            return [];
        }

        if ( ! ($condition = $this->_makeCondition($event_id))) {
            return [];
        }

        $rowset = new CB_RowSet($this->_tab_file_relation);
        $rowset->addCondition($condition);

        $files = [];
        while ( ! is_null(($row = $rowset->iterate()))) {
            $files[$row->getId('file')] = $row->get('file');
        }

        return $files;
    }

    /**
     * delete an attached file
     *
     * @param CB_User $user
     * @param string  $event_id
     * @param string  $file_id
     *
     * @return bool
     */
    function deleteFile($event_id, $file_id)
    {
        $db = $this->_tab_file_relation->getDBConnection();
        $event_id = $db->escape($event_id);
        $file_id = $db->escape($file_id);

        if ( ! $event_id) {
            return false;
        }
        if ( ! $file_id) {
            return false;
        }

        if ( ! ($condition = $this->_makeCondition($event_id, $file_id))) {
            return false;
        }

        $rowset = new CB_RowSet($this->_tab_file_relation);
        $rowset->addCondition($condition);
        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! $row) {
            return false;
        }

        if (($f = $row->get('file'))) {
            //logging
            require_once('grn/logger.csp');
            $lm = CB_LoggerManager::getInstance();
            $schedule_log = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
            $log_params = [
                'eid'       => $event_id,
                'fid'       => $file_id,
                'file_name' => $f->getCurrentBody()->get('name')
            ];
            $schedule_log->noticeEx('delete', 'file', $log_params);

            $f->delete();
        }

        $row->delete();

        return true;
    }

    /**
     * delete all attached files
     *
     * @param string $event_id
     *
     * @return bool
     */
    function deleteFiles($event_id)
    {
        $db = $this->_tab_file_relation->getDBConnection();
        $event_id = $db->escape($event_id);

        if ( ! ($condition = $this->_makeCondition($event_id))) {
            return false;
        }

        $rowset = new CB_RowSet($this->_tab_file_relation);
        $rowset->addCondition($condition);
        while ( ! is_null($row = $rowset->iterate())) {
            if (($f = $row->get('file'))) {
                $f->delete();
            }
            $row->delete();
        }
        $rowset->destroy();

        return true;
    }
}
