<?php
/**
 * スケジューラーの繰り返し予定を管理するメインのロジック
 *
 * @author      A.Shima     2004/10/25
 * @package     grn.schedule
 */

require_once('schedule/event_base_logic.csp');

/**
 * @package     grn.schedule
 */
class GRN_Schedule_RepeatEventLogic extends GRN_Schedule_EventBaseLogic
{

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct();
    }

    //for bug 1280
    public function connect()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('schedule');

        return $db;
    }

    //for bug 1280
    public function getIDScheduleNormal($id_schedulerepeat, $flag = true)
    {
        $db = $this->connect();
        $sql_string
            = "select _id from tab_grn_schedule_event where col_reserve_int1 = %d";
        $sql = sprintf($sql_string, $id_schedulerepeat);
        $tbSource = $db->query($sql);
        $id_schedulerepeat_arr = [];
        while ($row = $db->fetch_assoc($tbSource)) {
            $id_schedulerepeat_arr[] = ['_id' => $row["_id"]];
        }
        $info = [];
        if ($flag === true) {
            for ($i = 0; $i < count($id_schedulerepeat_arr); $i++) {
                $sql_string
                    = "select * from tab_grn_schedule_eventdatetime where col_event = %d";
                $sql = sprintf($sql_string,
                    $id_schedulerepeat_arr[$i]['_id']);
                $tbSource = $db->query($sql);
                while ($row = $db->fetch_assoc($tbSource)) {
                    $info[] = [
                        '_id'         => $row["_id"],
                        'event_id'    => $row["col_event"],
                        'setdatetime' => $row["col_setdatetime"]
                    ];
                }
            }
        } else {
            for ($i = 0; $i < count($id_schedulerepeat_arr); $i++) {
                $sql_string
                    = "select * from tab_grn_schedule_eventdate where col_event = %d";
                $sql = sprintf($sql_string,
                    $id_schedulerepeat_arr[$i]['_id']);
                $tbSource = $db->query($sql);
                while ($row = $db->fetch_assoc($tbSource)) {
                    $info[] = [
                        '_id'         => $row["_id"],
                        'event_id'    => $row["col_event"],
                        'setdatetime' => $row["col_setdate"]
                    ];
                }
            }
        }

        return $info;
    }

    //for bug 1280
    public function Update_Reserve_Int1($schedule_normal, $schedule_repeat)
    {
        $db = $this->connect();
        $sql_string
            = "update tab_grn_schedule_event set col_reserve_int1 = %d where _id=%d";
        $sql = sprintf($sql_string, $schedule_repeat, $schedule_normal);
        $db->query($sql);

    }

    /**
     * @access private
     */
    private $_repeattable = null;

    /**
     * @access private
     */
    function _getRepeatTable()
    {
        if (is_null($this->_repeattable)) {
            require_once('schedule/table.csp');
            $tm = $this->_getTableManager();
            $this->_repeattable = $tm->getTableInfo(GRN_EVENTREPEATCONDITION);
        }

        return $this->_repeattable;
    }

    /**
     * @access private
     */
    private $_excepttable = null;

    /**
     * @access private
     */
    function _getExceptTable()
    {
        if (is_null($this->_excepttable)) {
            require_once('schedule/table.csp');
            $tm = $this->_getTableManager();
            $this->_excepttable = $tm->getTableInfo(GRN_EVENTREPEATEXCEPT);
        }

        return $this->_excepttable;
    }

    private static $_instance = null;

    /**
     * @return GRN_Schedule_RepeatEventLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * 予定の日付の登録
     *
     * @access private
     *
     * @param   GRN_Schedule_Event       $eventrow 予定
     * @param   GRN_Schedule_RepeatEvent $event    繰り返し予定
     *
     * @return  bool 成功した場合はTRUE、それ以外はFALSE
     */
    function _entryEventDate($eventrow, $event)
    {
        // 条件の保存
        $this->_entryRepeatCondition($eventrow, $event);

        // 実際のイベントの日付の作成
        return $this->_setRepeatDate($eventrow, $event, $event->except);
    }

    /**
     * 繰り返しの条件の登録
     *
     * @access private
     */
    function _entryRepeatCondition($eventrow, $event)
    {
        $repeattable = $this->_getRepeatTable();
        $row = $repeattable->newRow();
        $this->_setRepeatCondition($row, $eventrow, $event);
    }

    /**
     * 繰り返し予定の条件の設定
     *
     * @access private
     */
    function _setRepeatCondition($row, $eventrow, $event)
    {
        // 条件の保存
        $row->set(GRN_SCHEDULE_EVENT, $eventrow);
        $row->set(GRN_SCHEDULE_REPEAT_TYPE, $event->repeat_type);
        $row->set(GRN_SCHEDULE_REPEAT_DAY, intval($event->day));
        $row->set(GRN_SCHEDULE_REPEAT_WDAY, intval($event->wday));
        $row->set(GRN_SCHEDULE_SETDATE, $event->setdate);
        $row->set(GRN_SCHEDULE_ENDDATE, $event->enddate);
        $row->set(GRN_SCHEDULE_SETTIME, $event->settime);
        $row->set(GRN_SCHEDULE_ENDTIME, $event->endtime);
        if (is_null($event->timezone)) {
            $I18N = CB_I18N::getInstance();
            $event->timezone = $I18N->getCurrentTimezone();
        }
        $row->set(GRN_SCHEDULE_TIMEZONE, $event->timezone);
        $row->registerNow();
    }

    /**
     * 繰り返し予定の日付の実体化
     *
     * @access private
     */
    function _setRepeatDate(
        $eventrow,
        $event,
        $excepts = null,
        $edit_flag = false
    ) {
        $ret = false;
        // 日付の登録
        $event->_date_list = [];

        // 繰り返しのタイプで処理を分ける
        // 　ここに新しい処理を追加することで繰り返しのパターンを増やすことができる
        switch ($event->repeat_type) {
            case GRN_REPEAT_TYPE_DAY:
            case GRN_REPEAT_TYPE_WEEKDAY:
                $ret = $this->_setRepeatDay($eventrow, $event, $excepts,
                    $edit_flag);
                break;
            case GRN_REPEAT_TYPE_WEEK:
            case GRN_REPEAT_TYPE_1STWEEK:
            case GRN_REPEAT_TYPE_2NDWEEK:
            case GRN_REPEAT_TYPE_3RDWEEK:
            case GRN_REPEAT_TYPE_4THWEEK:
            case GRN_REPEAT_TYPE_LASTWEEK;
                $ret = $this->_setRepeatWeek($eventrow, $event, $excepts,
                    $edit_flag);
                break;
            case GRN_REPEAT_TYPE_MONTH:
                $ret = $this->_setRepeatMonth($eventrow, $event, $excepts,
                    $edit_flag);
                break;
        }

        if ($event->_date_list == null) {
            cb_throw_error(E_GRN_SCHEDULE_FAILED_EVENT_OPERATE);
        }

        return $ret;
    }

    //GTM-143 HTVs
    function _getRangeRepeatDay($event)
    {
        $date_list = [];

        $date = new CB_DateEx($event->setdate);

        if ($event->repeat_type == GRN_REPEAT_TYPE_WEEKDAY) {
            $wday = $date->getDayOfWeek();
            if ($wday == 0) {
                $date->moveDays(1);
            } elseif ($wday == 6) {
                $date->moveDays(2);
            }
        }

        if ($date->compare($event->enddate) > 0) {
            cb_throw_error(E_GRN_SCHEDULE_FAILED_EVENT_OPERATE);

            return false;
        }

        while ($date->compare($event->enddate) <= 0) {
            $date_list[] = $date;
            $date = clone $date;
            $date->moveDays(1);
            if ($event->repeat_type == GRN_REPEAT_TYPE_WEEKDAY) {
                $wday = $date->getDayOfWeek();
                if ($wday == 6) {
                    $date->moveDays(2);
                } elseif ($wday == 0) {
                    $date->moveDays(1);
                }
            }
        }

        return $date_list;
    }

//GTM-143 HTVs
    function _getRangeRepeatWeek($event)
    {
        $date_list = [];
        $date = new CB_DateEx($event->setdate);
        // 最初に条件に当てはまる日を求める

        while ($date->compare($event->enddate) <= 0) {
            // 条件にあう日なので終了
            if ($this->_checkWeekDate($date, $event->repeat_type)) {
                if (intval($event->wday) == $date->getDayOfWeek()) {
                    break;
                }
            }

            $date->moveDays(1);
        }

        // 最初の日が登録終了日よりも後の場合は、戻る
        if ($date->compare($event->enddate) > 0) {
            cb_throw_error(E_GRN_SCHEDULE_FAILED_EVENT_OPERATE);

            return false;
        }

        while ($date->compare($event->enddate) <= 0) {

            $date_list[] = $date;
            $date = clone $date;
            switch ($event->repeat_type) {
                case GRN_REPEAT_TYPE_WEEK:
                    $date->moveDays(7);
                    break;
                case GRN_REPEAT_TYPE_1STWEEK:
                    $date->moveMonths(1);
                    $date->day = 1;
                    break;
                case GRN_REPEAT_TYPE_2NDWEEK;
                    $date->moveMonths(1);
                    $date->day = 8;
                    break;
                case GRN_REPEAT_TYPE_3RDWEEK;
                    $date->moveMonths(1);
                    $date->day = 15;
                    break;
                case GRN_REPEAT_TYPE_4THWEEK;
                    $date->moveMonths(1);
                    $date->day = 22;
                    break;
                case GRN_REPEAT_TYPE_LASTWEEK;
                    $date->moveMonths(1);
                    $date->day = $date->getEndOfMonthDay() - 6;
                    break;

            }

            while ($date->compare($event->enddate) <= 0) {
                // 条件にあう日なので終了
                if ($this->_checkWeekDate($date, $event->repeat_type)) {
                    if (intval($event->wday) == $date->getDayOfWeek()) {
                        break;
                    }
                }

                $date->moveDays(1);
            }
        }

        return $date_list;
    }

    /**
     * @param $event
     *
     * @return array|bool
     */
    function _getRangeRepeatMonth($event)
    {
        $date_list = [];
        $date = new CB_DateEx($event->setdate);

        if (intval($event->day) != 0) {
            if ($date->day <= intval($event->day)) {
                if (intval($event->day) > $date->getEndOfMonthDay()) {
                    $date->moveMonths(1);
                    $date->day = intval($event->day);
                } else {
                    $date->day = intval($event->day);
                }
            } else {
                $date->moveMonths(1);
                $date->day = intval($event->day);
            }
        } else {
            if (intval($date->day) != $date->getEndOfMonthDay()) {
                $date->day = $date->getEndOfMonthDay();
            }
        }

        if ($date->Compare($event->enddate) > 0) {
            cb_throw_error(E_GRN_SCHEDULE_FAILED_EVENT_OPERATE);

            return false;
        }

        while ($date->compare($event->enddate) <= 0) {
            $date_list[] = $date;
            $date = clone $date;
            if (intval($event->day) != 0) {
                $date->moveMonths(1);
                // 日付が合わない場合は次の月へ
                if ($date->day != intval($event->day)) {
                    $date->moveMonths(1);
                    $date->day = intval($event->day);
                }
            } else {
                $date->moveMonths(1);
                // そのつきの最後の日を取得
                $date->day = $date->getEndOfMonthDay();
            }
        }

        return $date_list;
    }

    /**
     * 繰り返し予定の実体の設定
     *
     * @access private
     */
    function _setRepeatEventDate(
        $eventrow,
        $date,
        $event,
        & $excepts,
        $edit_flag = false
    ) {
        // 例外日のチェック        
        if (is_array($excepts)) {
            foreach ($excepts as $exdate) {
                // 例外日にヒットした場合は、登録はしない
                if ($date->compare($exdate) == 0) {
                    return true;
                }
            }
        }

        $event->_date_list[] = $date;
        $event_type = $event->getEventType();


        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $end_date = new CB_DateEx($date);
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY
                 & GRN_SCHEDULE_EVENT_TYPE_START) === 0
            ) {
                $settime = new CB_TimeEx($event->settime);
                $endtime = new CB_TimeEx($event->endtime);
                if ($endtime->compare($settime) < 0) {
                    $end_date->moveDays(1);
                }
            }

            $continueIfConflict = false;
            require_once('schedule/utility.csp');
            $current_timezone = CB_I18N::getInstance()->getCurrentTimezone();
            $user_setdatetime
                = CB_I18N::translateDatetimeTimezone(grn_schedule_get_datetime($date,
                $event->settime), $event->timezone, $current_timezone);
            $user_enddatetime
                = CB_I18N::translateDatetimeTimezone(grn_schedule_get_datetime($end_date,
                $event->endtime), $event->timezone, $current_timezone);
            //
            $user_setdatetimeF
                = CB_I18N::translateDatetimeTimezone(grn_schedule_get_datetime($event->setdate,
                $event->settime), $event->timezone, $current_timezone);
            $user_enddatetimeF
                = CB_I18N::translateDatetimeTimezone(grn_schedule_get_datetime($event->enddate,
                $event->endtime), $event->timezone, $current_timezone);
            //
            if (($faid = $this->_checkConfilictFacilites($eventrow->getOID(),
                    $user_setdatetime,
                    $user_enddatetime,
                    $event->facilities)) != '0'
            ) {
                // Conflict
                if ($this->facilityConflictHandler == null) {
                    require_once('schedule/facility_system_logic.csp');
                    $facility_logic = GRN_Facility_SystemLogic::getInstance();
                    $facility = $facility_logic->getFacility($faid);
                    cb_throw_error(E_GRN_FCLT_CONFLICT_DATETIME,
                        ['facility' => $facility->get('name')], null,
                        ['facility' => $facility->get('name')]);
                } else {
                    $events_conflict = [];
                    $id_facility_conflict = [];
                    $events_conflict['conflict_facility'] = 0;
                    $id_facility_conflict
                        = $this->_getIdsConfilictFacilites($eventrow->getOID(),
                        $user_setdatetimeF, $user_enddatetimeF,
                        $event->facilities);
                    $date_list = [];
                    if (is_array($id_facility_conflict)
                        && count($id_facility_conflict) > 0
                    ) {
                        $events_conflict['conflict_facility'] = 1;
                        $events_conflict['conflict_events']
                            = $this->_loadEventConflictFacilities(
                            $id_facility_conflict, $user_setdatetimeF,
                            $user_enddatetimeF, $event->id, $excepts,
                            $edit_flag
                        );
                        switch ($event->repeat_type) {
                            case GRN_REPEAT_TYPE_DAY:
                            case GRN_REPEAT_TYPE_WEEKDAY:
                                $date_list = $this->_getRangeRepeatDay($event);
                                break;
                            case GRN_REPEAT_TYPE_WEEK:
                            case GRN_REPEAT_TYPE_1STWEEK:
                            case GRN_REPEAT_TYPE_2NDWEEK:
                            case GRN_REPEAT_TYPE_3RDWEEK:
                            case GRN_REPEAT_TYPE_4THWEEK:
                            case GRN_REPEAT_TYPE_LASTWEEK;
                                $date_list = $this->_getRangeRepeatWeek($event);
                                break;
                            case GRN_REPEAT_TYPE_MONTH:
                                $date_list
                                    = $this->_getRangeRepeatMonth($event);
                                break;
                        }

                        $event_conflict = $events_conflict['conflict_events'];
                        unset($events_conflict['conflict_events']);
                        $events_conflict['conflict_events'] = [];
                        $timestamp_EventStart
                            = new CB_TimeStampEx();
                        $timestamp_EventEnd
                            = new CB_TimeStampEx();
                        $datetime_NewEventStart = new CB_DateTime();
                        $datetime_NewEventEnd = new CB_DateTime();
                        foreach ($date_list as $key0 => $cpdate) {
                            $datetime_NewEventStart
                                = CB_I18N::translateDatetimeTimezone(grn_schedule_get_datetime($cpdate,
                                $event->settime), $event->timezone,
                                $current_timezone);
                            $datetime_NewEventEnd
                                = CB_I18N::translateDatetimeTimezone(grn_schedule_get_datetime($cpdate,
                                $event->endtime), $event->timezone,
                                $current_timezone);

                            foreach ($event_conflict as $key => $value) {
                                $timestamp_EventStart->unix_ts
                                    = intval($value['col_setdatetime']);
                                $datetime_EventStart = new CB_DateTime();
                                $datetime_EventStart
                                    = $timestamp_EventStart->getDateTime();

                                $timestamp_EventEnd->unix_ts
                                    = intval($value['col_enddatetime']);
                                $datetime_EventEnd = new CB_DateTime();
                                $datetime_EventEnd
                                    = $timestamp_EventEnd->getDateTime();
                                if (($datetime_EventStart->compare($datetime_NewEventStart)
                                     >= 0
                                     && $datetime_EventStart->compare($datetime_NewEventEnd)
                                        < 0)
                                    || ($datetime_EventStart->compare($datetime_EventEnd)
                                        < 0
                                        && $datetime_EventEnd->compare($datetime_NewEventStart)
                                           > 0
                                        && $datetime_EventEnd->compare($datetime_NewEventEnd)
                                           <= 0)
                                    || ($datetime_EventStart->compare($datetime_NewEventStart)
                                        < 0
                                        && $datetime_EventEnd->compare($datetime_NewEventEnd)
                                           > 0)
                                ) {
                                    $tempEvent = [];
                                    $tempEvent['id']
                                        = $value['id'];
                                    $tempEvent['setdatetime']
                                        = cb_date_format("ShortDateFormat",
                                        $cpdate);
                                    $tempEvent['col_setdatetime']
                                        = cb_date_convert2timestamp($datetime_NewEventStart);
                                    $tempEvent['col_facility']
                                        = $value['col_facility'];
                                    $events_conflict['conflict_events'][]
                                        = $tempEvent;
                                    unset($date_list[$key0]);
                                } elseif ($edit_flag === true && isset($excepts)
                                          && count($excepts) > 0
                                ) {
                                    foreach ($excepts as $exdate) {
                                        if ($exdate->year == $cpdate->year
                                            && $exdate->month == $cpdate->month
                                            && $exdate->day == $cpdate->day
                                        ) {
                                            unset($date_list[$key0]);
                                        }
                                    }
                                }
                                if ($datetime_EventEnd->compare($datetime_NewEventStart)
                                    < 0
                                ) {
                                    unset($event_conflict[$key]);
                                }
                            }
                        }
                        $date_list = array_values($date_list);
                        if (count($date_list) == 0) {
                            $events_conflict['conflict_all'] = 1;
                        }
                        $facilityConflictHandler
                            = $this->facilityConflictHandler;
                        $facilityConflictHandler($events_conflict,
                            $continueIfConflict);

                        if ( ! $continueIfConflict)//==FALSE
                        {
                            return false;
                        }
                    }
                }

            }
        }

        if (is_null($event->timezone)) {
            $I18N = CB_I18N::getInstance();
            $event->timezone = $I18N->getCurrentTimezone();
        }
        if (is_null($event->end_timezone)) {
            $event->end_timezone = $event->timezone;
        }

        $row = null;
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
            $datetable = $this->_getDateTable();
            $row = $datetable->newRow();

            $row->set(GRN_SCHEDULE_SETDATE, $date);
            $row->set(GRN_SCHEDULE_ENDDATE, $date);
        } // 開始時間のみ
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_START) > 0) {
            $datetimetable = $this->_getDateTimeTable();
            $row = $datetimetable->newRow();

            $timestamp = new CB_TimeStampEx();
            $datetime = new CB_DateTime();
            $datetime->year = intval($date->year);
            $datetime->month = intval($date->month);
            $datetime->day = intval($date->day);
            $datetime->hour = intval($event->settime->hour);
            $datetime->minute = intval($event->settime->minute);
            $datetime->second = intval($event->settime->second);
            $timestamp->setDateTime($datetime, $event->timezone);
            $row->set(GRN_SCHEDULE_SETDATETIME, $timestamp);
            $row->set(GRN_SCHEDULE_ENDDATETIME, $timestamp);
        } else {
            $datetimetable = $this->_getDateTimeTable();
            $row = $datetimetable->newRow();

            $timestamp = new CB_TimeStampEx();

            $start_datetime = CB_DateTimeEx::createByDateAndTime($date,
                $event->settime);
            $timestamp->setDateTime($start_datetime, $event->timezone);
            $row->set(GRN_SCHEDULE_SETDATETIME, clone $timestamp);
            $end_datetime = CB_DateTimeEx::createByDateAndTime($date,
                $event->endtime);
            if ($end_datetime->compare($start_datetime) < 0) {
                $end_datetime->moveDays(1);
            }
            $timestamp->setDateTime($end_datetime, $event->timezone);
            $row->set(GRN_SCHEDULE_ENDDATETIME, clone $timestamp);
            $row->set(GRN_SCHEDULE_END_TIMEZONE, $event->end_timezone);
        }

        $row->set(GRN_SCHEDULE_EVENT, $eventrow);
        $row->set(GRN_SCHEDULE_TIMEZONE, $event->timezone);
        $row->set(GRN_SCHEDULE_EVENT_TYPE, $event->getEventType());
        $row->registerNow();

        return true;
    }

    /**
     * 繰り返し予定（毎日、毎日（土日を除く）の日付の実体化
     *
     * @access private
     */
    function _setRepeatDay($eventrow, $event, & $excepts, $edit_flag = false)
    {
        // 日付になるまで
        $date = new CB_DateEx($event->setdate);

        if ($event->repeat_type == GRN_REPEAT_TYPE_WEEKDAY) {
            $wday = $date->getDayOfWeek();

            // 土日ならばずらす
            if ($wday == 0) {
                $date->moveDays(1);
            } elseif ($wday == 6) {
                $date->moveDays(2);
            }
        }

        // 最初の日が登録終了日よりも後の場合は、戻る
        if ($date->compare($event->enddate) > 0) {
            cb_throw_error(E_GRN_SCHEDULE_FAILED_EVENT_OPERATE);

            return false;
        }

        while ($date->compare($event->enddate) <= 0) {
            if ( ! $this->_setRepeatEventDate($eventrow, $date, $event,
                $excepts, $edit_flag)
            ) {
                return false;
            }

            $date = clone $date;
            $date->moveDays(1);
            if ($event->repeat_type == GRN_REPEAT_TYPE_WEEKDAY) {
                $wday = $date->getDayOfWeek();
                if ($wday == 6) {
                    $date->moveDays(2);
                } elseif ($wday == 0) {
                    $date->moveDays(1);
                }
            }
        }

        return true;
    }

    /**
     * @access private
     */
    function _checkWeekDate($date, $type)
    {
        switch ($type) {
            case GRN_REPEAT_TYPE_WEEK:
                return true;
            case GRN_REPEAT_TYPE_1STWEEK:
                return ($date->day >= 1 && $date->day <= 7);
            case GRN_REPEAT_TYPE_2NDWEEK:
                return ($date->day >= 8 && $date->day <= 14);
            case GRN_REPEAT_TYPE_3RDWEEK:
                return ($date->day >= 15 && $date->day <= 21);
            case GRN_REPEAT_TYPE_4THWEEK:
                return ($date->day >= 22 && $date->day <= 28);
            case GRN_REPEAT_TYPE_LASTWEEK:
                $lastday = $date->getEndOfMonthDay();

                return ($date->day <= $lastday && $date->day >= ($lastday - 6));
        }

        return false;
    }

    /**
     * 繰り返し予定（毎週、第○曜日）の日付の実体化
     *
     * @access private
     */
    function _setRepeatWeek($eventrow, $event, & $excepts, $edit_flag = false)
    {
        $date = new CB_DateEx($event->setdate);
        // 最初に条件に当てはまる日を求める

        while ($date->compare($event->enddate) <= 0) {
            // 条件にあう日なので終了
            if ($this->_checkWeekDate($date, $event->repeat_type)) {
                if (intval($event->wday) == $date->getDayOfWeek()) {
                    break;
                }
            }

            $date->moveDays(1);
        }

        // 最初の日が登録終了日よりも後の場合は、戻る
        if ($date->compare($event->enddate) > 0) {
            cb_throw_error(E_GRN_SCHEDULE_FAILED_EVENT_OPERATE);

            return false;
        }

        while ($date->compare($event->enddate) <= 0) {
            if ( ! $this->_setRepeatEventDate($eventrow, $date, $event,
                $excepts, $edit_flag)
            ) {
                return false;
            }

            $date = clone $date;
            switch ($event->repeat_type) {
                case GRN_REPEAT_TYPE_WEEK:
                    $date->moveDays(7);
                    break;
                case GRN_REPEAT_TYPE_1STWEEK:
                    $date->moveMonths(1);
                    $date->day = 1;
                    break;
                case GRN_REPEAT_TYPE_2NDWEEK;
                    $date->moveMonths(1);
                    $date->day = 8;
                    break;
                case GRN_REPEAT_TYPE_3RDWEEK;
                    $date->moveMonths(1);
                    $date->day = 15;
                    break;
                case GRN_REPEAT_TYPE_4THWEEK;
                    $date->moveMonths(1);
                    $date->day = 22;
                    break;
                case GRN_REPEAT_TYPE_LASTWEEK;
                    $date->moveMonths(1);
                    $date->day = $date->getEndOfMonthDay() - 6;
                    break;

            }

            while ($date->compare($event->enddate) <= 0) {
                // 条件にあう日なので終了
                if ($this->_checkWeekDate($date, $event->repeat_type)) {
                    if (intval($event->wday) == $date->getDayOfWeek()) {
                        break;
                    }
                }

                $date->moveDays(1);
            }
        }

        return true;
    }

    /**
     * @access private
     */
    function _setRepeatMonth($eventrow, $event, & $excepts, $edit_flag = false)
    {
        $date = new CB_DateEx($event->setdate);

        if (intval($event->day) != 0) {
            if ($date->day <= intval($event->day)) {
                if (intval($event->day) > $date->getEndOfMonthDay()) {
                    $date->moveMonths(1);
                    $date->day = intval($event->day);
                } else {
                    $date->day = intval($event->day);
                }
            } else {
                $date->moveMonths(1);
                $date->day = intval($event->day);
            }
        } else {
            if (intval($date->day) != $date->getEndOfMonthDay()) {
                $date->day = $date->getEndOfMonthDay();
            }
        }

        if ($date->Compare($event->enddate) > 0) {
            cb_throw_error(E_GRN_SCHEDULE_FAILED_EVENT_OPERATE);

            return false;
        }

        while ($date->compare($event->enddate) <= 0) {
            if ( ! $this->_setRepeatEventDate($eventrow, $date, $event,
                $excepts, $edit_flag)
            ) {
                return false;
            }

            $date = clone $date;
            if (intval($event->day) != 0) {
                $date->moveMonths(1);
                // 日付が合わない場合は次の月へ
                if ($date->day != intval($event->day)) {
                    $date->moveMonths(1);
                    $date->day = intval($event->day);
                }
            } else {
                $date->moveMonths(1);
                // そのつきの最後の日を取得
                $date->day = $date->getEndOfMonthDay();
            }
        }

        return true;
    }

    /**
     * 繰り返し予定の変更
     *
     * @param       GRN_Schedule_EventBase $event イベントオブジェクト
     * @param       string                 $type  変更区分
     * @param       CB_Date                $date  ログインユーザーのタイムゾーンにおける変更日
     *
     * @return      boolean         成功した場合は変更したイベントID、それ以外はFALSE
     *
     */
    function modifyEvent(
        $event,
        $date = null,
        $type = GRN_REPEAT_MODIFY_ALL,
        $start_date = null,
        $end_date = null
    ) {
        $ret = false;
        // すべての変更
        if ($type == GRN_REPEAT_MODIFY_ALL) {
            $ret = parent::modifyEvent($event);
        } // 指定日のみ
        elseif ($type == GRN_REPEAT_MODIFY_THIS) {
            $ret = $this->_modifyThisEvent($event, $date, $start_date,
                $end_date);
            // update star
            $bdate = new CB_Date();
            $bdate->year = $event->setdatetime->year;
            $bdate->month = $event->setdatetime->month;
            $bdate->day = $event->setdatetime->day;
            $old_unique_id = 'rp_' . $event->id . '_' . $bdate->format();
            $this->updateStarWhenUpdateOneDay($old_unique_id, $ret, $ret,
                $date);
            $this->updateCreatorAfterModifyEvent($ret, $event);
        } // 指定日以降
        elseif ($type == GRN_REPEAT_MODIFY_AFTER) {
            $ret = $this->_modifyAfterEvent($event, $date);
            $this->updateStarModifyAfterEvent($event, $ret, $date);
            $this->updateCreatorAfterModifyEvent($ret, $event);
        }

        return $ret;
    }

    /**
     * 指定日のみの予定の変更
     *
     * @param GRN_Schedule_RepeatEvent $event
     * @param CB_Date                  $date ログインユーザーのタイムゾーンにおける日付
     *
     * @return int
     */
    private function _modifyThisEvent(
        $event,
        $date,
        $start_date = null,
        $end_date = null
    ) {
        if (is_null($date)) {
            cb_throw_error(E_GRN_SCHD_NOT_SPECIFIED_DATE);
        }

        // イベントがあるかどうかの確認
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($event->id);
        if ( ! $eventrow) {
            return false;
        }

        // 新規に登録するイベントにデータをコピーする
        $newevent = new GRN_Schedule_NormalEvent();
        $newevent->menu = $event->menu;
        $newevent->detail = $event->detail;
        $newevent->memo = $event->memo;
        $newevent->menucolor = $event->menucolor;
        $newevent->private = $event->private;
        $newevent->creator = &$event->modifier;
        $newevent->ctime = $event->mtime;
        $newevent->timezone = $event->timezone;
        $newevent->end_timezone = $event->end_timezone ?: $newevent->timezone;

        $newevent->company_name = $event->company_name;
        $newevent->zip_code = $event->zip_code;
        $newevent->physical_address = $event->physical_address;
        $newevent->map = $event->map;
        $newevent->route = $event->route;
        $newevent->route_time = $event->route_time;
        $newevent->route_fare = $event->route_fare;
        $newevent->company_telephone_number = $event->company_telephone_number;
        $newevent->facsimile_number = $event->facsimile_number;
        $newevent->company_url = $event->company_url;

        $newevent->users = $event->users;
        $newevent->groups = $event->groups;
        $newevent->facilities = $event->facilities;

        $newevent->notify_address = $event->notify_address;

        //custom item data
        $newevent->additional_items = $event->additional_items;

        $except_date = null;
        if (is_a($event->setdatetime, 'CB_DateTime')) {
            $except_date = $event->setdatetime->getDate();
        } elseif (is_a($event->setdatetime, 'CB_Date')) {
            $except_date = $event->setdatetime;
        }

        // 例外日が指定できるか
        if ( ! $this->setExcept($event->modifier, $eventrow->getOID(),
            $except_date)
        ) {
            // 例外日が登録できない場合は、エラー
            return false;
        }

        /*
                ↑の$this->setExcept()内で変更の日付を設定しているのでここはコメント
                // 元となった予定の変更
                if( ! is_null( $event->modifier ) && is_a( $event->modifier, 'CB_User' )  )
                {
                    $eventrow->set( 'modifier', $event->modifier );
                    $eventrow->set( 'modifier_foreign_key', $event->modifier->get( 'foreign_key' ) );
                    $eventrow->set( 'modifier_name', $event->modifier->get( 'display_name' ) );
                }
                else if( ! is_null( $event->modifier ) && is_string( $event->modifier )  )
                {
                    $eventrow->set( 'modifier_name', $event->modifier );
                }

                $ts = new CB_TimeStampEx();
                $eventrow->set( 'mtime', $ts );
        */

        $event_date = $this->translateRepeatDateToEventTimezone($event, $date);

        // 日付の作成
        if (is_null($event->settime) && is_null($event->endtime)) {
            $newevent->setdatetime = new CB_Date();
            $newevent->setdatetime->year = intval($event_date->year);
            $newevent->setdatetime->month = intval($event_date->month);
            $newevent->setdatetime->day = intval($event_date->day);
            $newevent->enddatetime = new CB_Date();
            $newevent->enddatetime->year = intval($event_date->year);
            $newevent->enddatetime->month = intval($event_date->month);
            $newevent->enddatetime->day = intval($event_date->day);
        } elseif (is_null($event->endtime)) {
            $datetime = new CB_DateTime();
            $datetime->year = intval($event_date->year);
            $datetime->month = intval($event_date->month);
            $datetime->day = intval($event_date->day);
            $datetime->hour = intval($event->settime->hour);
            $datetime->minute = intval($event->settime->minute);
            $datetime->second = intval($event->settime->second);
            $newevent->setdatetime = $datetime;
        } else {
            if ($start_date != null && $end_date != null) {
                $datetime = new CB_DateTime();
                $datetime->year = intval($start_date->year);
                $datetime->month = intval($start_date->month);
                $datetime->day = intval($start_date->day);
                $datetime->hour = intval($event->settime->hour);
                $datetime->minute = intval($event->settime->minute);
                $datetime->second = intval($event->settime->second);
                $newevent->setdatetime = $datetime;
                $datetime = new CB_DateTime();
                $datetime->year = intval($end_date->year);
                $datetime->month = intval($end_date->month);
                $datetime->day = intval($end_date->day);
                $datetime->hour = intval($event->endtime->hour);
                $datetime->minute = intval($event->endtime->minute);
                $datetime->second = intval($event->endtime->second);
                $newevent->enddatetime = $datetime;
            } else {
                $datetime = new CB_DateTime();
                $datetime->year = intval($event_date->year);
                $datetime->month = intval($event_date->month);
                $datetime->day = intval($event_date->day);
                $datetime->hour = intval($event->settime->hour);
                $datetime->minute = intval($event->settime->minute);
                $datetime->second = intval($event->settime->second);
                $newevent->setdatetime = $datetime;
                $datetime = new CB_DateTime();
                $datetime->year = intval($event_date->year);
                $datetime->month = intval($event_date->month);
                $datetime->day = intval($event_date->day);
                $datetime->hour = intval($event->endtime->hour);
                $datetime->minute = intval($event->endtime->minute);
                $datetime->second = intval($event->endtime->second);
                $newevent->enddatetime = $datetime;
                if (cb_date_compare($newevent->enddatetime,
                        $newevent->setdatetime) < 0
                ) {
                    cb_date_move_days($newevent->enddatetime, 1);
                }
            }
        }

        //新規に通常の予定として登録
        require_once('schedule/normal_event_logic.csp');
        $normalogic = GRN_Schedule_NormalEventLogic::getInstance();
        $event_id = $normalogic->entryEvent($newevent);
        if ( ! $event_id) {
            return false;
        }

        // 施設があればカスタマイズ項目もコピー
        if (is_array($newevent->facilities)
            && count($newevent->facilities) > 0
        ) {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            $item_data = $facility_logic->getData($event->id);

            $item_data_list = [];
            foreach (array_keys($item_data) as $item_key) {
                $data = $item_data[$item_key];
                if ( ! array_key_exists('oid', $data)) {
                    continue;
                }

                $item_data_list[$data['oid']] = array_key_exists('value', $data)
                    ? $data['value'] : '';
            }

            $result = $facility_logic->registerDataFromParameter($event_id,
                $item_data_list);
            if ( ! $result) {
                return false;
            }
        }

        return $event_id;
    }

    /**
     * 指定日以降の予定の変更
     *
     * @param GRN_Schedule_RepeatEvent $event
     * @param CB_Date                  $date ユーザーのタイムゾーンにおける日付
     */
    private function _modifyAfterEvent($event, $date)
    {
        if (is_null($date)) {
            cb_throw_error(E_GRN_SCHD_NOT_SPECIFIED_DATE);
        }

        // イベントがあるかどうかの確認
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($event->id);
        if ( ! $eventrow) {
            return false;
        }

        $repeattable = $this->_getRepeatTable();
        $repeatrowset = new CB_RowSet($repeattable);
        $repeatrowset->addCondition($repeatrowset->queryf("col_event = '@S'",
            $eventrow->getOID()));
        $repeatrow = $repeatrowset->iterate();
        if (is_null($repeatrow)) {
            return false;
        }

        // イベントの有効期限のチェック
        $event_date = $this->translateRepeatDateToEventTimezone($event, $date);
        $dateex = new CB_DateEx($event_date);
        if (($dateex->compare($repeatrow->get(GRN_SCHEDULE_SETDATE)) < 0)
            || ($dateex->compare($repeatrow->get(GRN_SCHEDULE_ENDDATE)) > 0)
        ) {
            return false;
        }

        // 元となった予定の変更
        if ( ! is_null($event->modifier) && is_a($event->modifier, 'CB_User')) {
            $eventrow->set('modifier', $event->modifier);
            $eventrow->set('modifier_foreign_key',
                $event->modifier->get('foreign_key'));
            $eventrow->set('modifier_name',
                $event->modifier->get('display_name'));
        } elseif ( ! is_null($event->modifier) && is_string($event->modifier)) {
            $eventrow->set('modifier_name', $event->modifier);
        }

        $ts = new CB_TimeStampEx();
        $eventrow->set('mtime', $ts);

        // イベントの削除
        $this->_deleteAfterEvent($event->modifier, $eventrow->getOID(), $date);

        // 新規の繰り返し予定の登録
        $newevent = new GRN_Schedule_RepeatEvent();
        $newevent->menu = $event->menu;
        $newevent->detail = $event->detail;
        $newevent->memo = $event->memo;
        $newevent->private = intval($event->private);
        $newevent->creator = &$event->modifier;
        $newevent->ctime = $event->mtime;
        $newevent->timezone = $event->timezone;
        $newevent->users = $event->users;
        $newevent->groups = $event->groups;
        $newevent->facilities = $event->facilities;
        $newevent->notify_address = $event->notify_address;

        $newevent->company_name = $event->company_name;
        $newevent->zip_code = $event->zip_code;
        $newevent->physical_address = $event->physical_address;
        $newevent->map = $event->map;
        $newevent->route = $event->route;
        $newevent->route_time = $event->route_time;
        $newevent->route_fare = $event->route_fare;
        $newevent->company_telephone_number = $event->company_telephone_number;
        $newevent->facsimile_number = $event->facsimile_number;
        $newevent->company_url = $event->company_url;
        $newevent->menucolor = $event->menucolor;

        //custom item data
        $newevent->additional_items = $event->additional_items;

        // 時間の設定
        $newevent->setdate = new CB_DateEx($event->setdate);
        $newevent->enddate = new CB_DateEx($event->enddate);
        if ( ! is_null($event->settime)) {
            $newevent->settime = new CB_TimeEx($event->settime);
            if ( ! is_null($event->endtime)) {
                $newevent->endtime = new CB_TimeEx($event->endtime);
            }
        }
        $newevent->repeat_type = $event->repeat_type;
        $newevent->day = intval($event->day);
        $newevent->wday = intval($event->wday);

        // 例外日
        $newevent->except = $event->except;

        // 新規の繰り返し予定として登録
        $result = $this->entryEvent($newevent);

        if ($result) {
            $event->_date_list = $newevent->_date_list;

            if (is_array($newevent->except) && count($newevent->except)) {
                // 実際の例外日の登録
                $eventtable = &$this->_getEventTable();
                $neweventrow = &$eventtable->getRow($newevent->id);
                foreach ($newevent->except as $except_date) {
                    $this->_setExceptDate($neweventrow, $except_date, null);
                }
            }
        }

        return $result;
    }

    /**
     * 予定の変更
     *
     * @access private
     */
    function _modifyEventDate($eventrow, $event)
    {
        $oldType = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));

        // 今までの日付の削除
        $rowset = null;
        if (($oldType & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            $datetable = $this->_getDateTable();
            $rowset = new CB_RowSet($datetable);
            $rowset->addCondition($rowset->queryf("col_event = '@S'",
                $eventrow->getOID()));
        } else {
            $datetimetable = $this->_getDateTimeTable();
            $rowset = new CB_RowSet($datetimetable);
            $rowset->addCondition($rowset->queryf("col_event = '@S'",
                $eventrow->getOID()));
        }
        // すべての日付の削除
        $rowset->deleteAllMatched();
        /*
                while( !is_null( $row = &$rowset->iterate() ) )
                {
                    $row->delete();
                }
        */
        // 例外日の取得
        $exdate = $this->_getExceptDate($eventrow->getOID());

        // 条件の保存
        $repeattable = $this->_getRepeatTable();
        $rowset = new CB_RowSet($repeattable);
        $rowset->addCondition($rowset->queryf("col_event = '@S'",
            $eventrow->getOID()));
        $condrow = $rowset->iterate();
        $this->_setRepeatCondition($condrow, $eventrow, $event);

        // 実際のイベントの日付の作成
        return $this->_setRepeatDate($eventrow, $event, $exdate,
            true);//TRUE: is lag for edit conflict
    }

    /**
     * 例外日を取得する。
     * 例外日の日付は、予定の現在のタイムゾーンにおける日付である。
     *
     * @param int $eid
     *
     * @return array<CB_Date>
     */
    function _getExceptDate($eid)
    {
        $excepttable = $this->_getExceptTable();
        $rowset = new CB_RowSet($excepttable);
        $rowset->addCondition($rowset->queryf("col_event = '@S'", $eid));
        $exdate = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $exdate[] = $row->get('date');
        }

        return $exdate;
    }

    /**
     * 例外日をイベントIDから取得する
     *
     * @param array $ids
     *
     * @return array| FALSE
     */
    function getExceptDatesByIds(array $ids)
    {
        $db = $this->_getDBConnection();
        $query = cb_queryf(
            $db,
            'SELECT * FROM tab_grn_schedule_repeatexcept WHERE col_event IN (@A)',
            $ids
        );
        $result = $db->query($query);
        if ($result) {
            $retVal = [];
            while ($row = $db->fetch_assoc($result)) {
                $retVal[$row['col_event']][] = $row['col_date'];
            }

            return $retVal;
        }

        return false;
    }

    /**
     * 例外日の登録
     *
     * @param   object CB_User  $user       変更者
     * @param   string  $eid      イベントID
     * @param   CB_Date $date     ログインユーザーのタイムゾーンにおける日付
     * @param   string  $timezone タイムゾーン
     */
    function setExcept($user, $eid, $date, $timezone = null, $flag = false)
    {// The flag parameter this is use in the case GTM-143
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // 元となった予定の変更
        if ( ! is_null($user) && is_a($user, 'CB_User')) {
            $eventrow->set('modifier', $user);
            $eventrow->set('modifier_foreign_key', $user->get('foreign_key'));
            $eventrow->set('modifier_name', $user->get('display_name'));
            $ts = new CB_TimeStampEx();
            $eventrow->set('mtime', $ts);
        } elseif ( ! is_null($user) && is_string($user)) {
            $eventrow->set('modifier_name', $user);
            $ts = new CB_TimeStampEx();
            $eventrow->set('mtime', $ts);
        }

        // ログインユーザーのタイムゾーンにおける日付を予定のタイムゾーンにおける日付に変換する
        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($user, $eid);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        $event_date = $this->translateRepeatDateToEventTimezone($event, $date);

        $row = null;
        $event_type = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            $datetable = $this->_getDateTable();
            $rowset = new CB_RowSet($datetable);
            $format = "col_event = '@S' AND col_setdate = '@S'";
            $rowset->addCondition($rowset->queryf($format, $eid,
                $event_date->format()));
            $row = $rowset->iterate();
        } else {
            $setts = new CB_TimeStampEx($this->_ts);
            $endts = new CB_TimeStampEx($this->_ts);
            $datetime = new CB_DateTime();
            $datetime->year = intval($date->year);
            $datetime->month = intval($date->month);
            $datetime->day = intval($date->day);
            $datetime->hour = 0;
            $datetime->minute = 0;
            $datetime->second = 0;
            $setts->setDateTime($datetime);
            $timespan = new CB_DateTimeSpan(86400);
            $endts->setDateTime($datetime);
            $endts->add($timespan);
            $datetimetable = $this->_getDateTimeTable();
            $rowset = new CB_RowSet($datetimetable);
            $format = "col_event = '@S' AND ( col_setdatetime >= '"
                      . $setts->unix_ts . "' AND col_setdatetime <= '"
                      . $endts->unix_ts . "' )";
            $rowset->addCondition($rowset->queryf($format, $eid));
            $row = $rowset->iterate();
        }

        if (is_null($row) && $flag == false) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        if ( ! is_null($row)) {
            // 日付の削除
            $row->delete();
            $row->registerNow();
        }
        // 例外日の登録
        $this->_setExceptDate($eventrow, $event_date, $timezone);

        return true;
    }

    public function SetExceptDate($eventrow, $date, $timezone)
    {
        $this->_setExceptDate($eventrow, $date, $timezone);
    }

    /**
     * @param CB_Row  $eventrow
     * @param CB_Date $date 予定のタイムゾーンにおける日付
     * @param string  $timezone
     */
    private function _setExceptDate($eventrow, $date, $timezone)
    {
        $repeattable = $this->_getRepeatTable();
        $rowset = new CB_RowSet($repeattable);
        $rowset->addCondition($rowset->queryf("col_event = '@S'",
            $eventrow->getOID()));
        $conditionrow = $rowset->iterate();

        $excepttable = $this->_getExceptTable();
        $row = $excepttable->newRow();
        $row->set(GRN_SCHEDULE_EVENT, $eventrow);
        $row->set(GRN_SCHEDULE_EVENT_CONDITION, $conditionrow);
        $row->set('date', $date);

        if (is_null($timezone)) {
            $I18N = CB_I18N::getInstance();
            $timezone = $I18N->getCurrentTimezone();
        }
        $row->set(GRN_SCHEDULE_TIMEZONE, $timezone);
        $row->registerNow();

        return true;
    }

    /**
     * イベントの削除
     *
     * @param   CB_User $user                   削除した人
     * @param   string  $eid                    イベントID
     * @param   CB_Date $date                   ユーザーのタイムゾーンにおける削除する日付。nullの場合はすべてのイベントが削除
     * @param   array   $extension_log_messages 削除するときに追加するログメッセージ
     * @param   string  $type                   削除する条件
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function deleteEvent(
        $user,
        $eid,
        $date = null,
        array $extension_log_messages = null,
        $type = GRN_REPEAT_DELETE_ALL
    ) {
        $ret = false;
        switch ($type) {
            case GRN_REPEAT_DELETE_ALL:
                $ret = $this->_deleteAllEvent($user, $eid);
                break;
            case GRN_REPEAT_DELETE_AFTER:
                $ret = $this->_deleteAfterEvent($user, $eid, $date);
                break;
            case GRN_REPEAT_DELETE_THIS:
                $ret = $this->_deleteThisEvent($user, $eid, $date);
                break;
        }

        return $ret;
    }

    /**
     * 全部削除
     *
     * @param CB_User $user
     * @param int     $eid
     */
    private function _deleteAllEvent($user, $eid)
    {
        return parent::deleteEvent($user, $eid, null, ['range' => 'all']);
    }

    /**
     * 指定日のみ
     *
     * @param CB_User $user
     * @param int     $eid
     * @param CB_Date $date ユーザーのタイムゾーンにおける日付
     */
    private function _deleteThisEvent($user, $eid, $date)
    {
        // 例外日の指定
        $retVal = $this->setExcept($user, $eid, $date);
        if ($retVal) {
            // ログ
            $eventtable = $this->_getEventTable();
            $eventrow = $eventtable->getRow($eid);
            $deletedate = sprintf('%d-%02d-%02d', (int)$date->year,
                (int)$date->month, (int)$date->day);
            $eventrow->setExtensionLogMessage([
                'range' => 'only ' . $deletedate
            ]);
            $eventrow->onAction('delete');
        }

        return $retVal;
    }

    /**
     * 指定日以降
     *
     * @param CB_User $user
     * @param int     $eid
     * @param CB_Date $date ユーザーのタイムゾーンにおける日付
     */
    private function _deleteAfterEvent($user, $eid, $date)
    {
        if ( ! is_a($date, 'CB_Date')) {
            return false;
        }

        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // 元となった予定の変更
        if ( ! is_null($user) && is_a($user, 'CB_User')) {
            $eventrow->set('modifier', $user);
            $eventrow->set('modifier_foreign_key', $user->get('foreign_key'));
            $eventrow->set('modifier_name', $user->get('display_name'));
            $ts = new CB_TimeStampEx();
            $eventrow->set('mtime', $ts);
        } elseif ( ! is_null($user) && is_string($user)) {
            $eventrow->set('modifier_name', $user);
            $ts = new CB_TimeStampEx();
            $eventrow->set('mtime', $ts);
        }

        // 指定日以降のイベントの日付の取得
        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        $event = $app->getEvent($user, $eid);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        $event_date = $this->translateRepeatDateToEventTimezone($event, $date);
        $event_type = $eventrow->get(GRN_SCHEDULE_EVENT_TYPE);
        $rowset = null;
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            $datetable = $this->_getDateTable();
            $rowset = new CB_RowSet($datetable);
            $rowset->addCondition($rowset->queryf("col_event = '@S' AND col_setdate >= '@S'",
                $eventrow->getOID(), $event_date->format()));
        } else {
            $datetime = new CB_DateTime();
            $datetime->year = intval($date->year);
            $datetime->month = intval($date->month);
            $datetime->day = intval($date->day);
            $datetime->hour = 0;
            $datetime->minute = 0;
            $datetime->second = 0;
            $setdatetime = new CB_TimeStampEx($this->_ts);
            $setdatetime->setDateTime($datetime);
            $datetimetable = $this->_getDateTimeTable();
            $rowset = new CB_RowSet($datetimetable);
            //$rowset->addCondition( "col_event = '".$eventrow->getOID()."' AND col_setdatetime >= '".$setdatetime->unix_ts."'" );
            $rowset->addCondition($rowset->queryf("col_event = '@S' AND col_setdatetime >= '@S'",
                $eventrow->getOID(), $setdatetime->unix_ts));
        }

        // 条件に当てはまる予定の削除
        $rowset->deleteAllMatched();

        // ログ
        $deletedate = sprintf('%d-%02d-%02d', (int)$date->year,
            (int)$date->month, (int)$date->day);
        $eventrow->setExtensionLogMessage([
            'range' => 'on and after ' . $deletedate
        ]);
        $eventrow->onAction('delete');
        /*
                while( ! is_null( $row = & $rowset->iterate() ) )
                {
                    $row->delete();
                }
        */
        // 期限の変更
        $repeattable = $this->_getRepeatTable();
        $rowset = new CB_RowSet($repeattable);
        $rowset->addCondition($rowset->queryf("col_event = '@S'",
            $eventrow->getOID()));
        $repeatrow = $rowset->iterate();
        if (is_null($repeatrow)) {
            return false;
        }

        // 繰り返しの作成
        $event = new GRN_Schedule_RepeatEvent();
        $event->repeat_type = $repeatrow->get(GRN_REPEAT_TYPE);
        $event->wday = $repeatrow->get(GRN_SCHEDULE_REPEAT_WDAY);
        $event->day = $repeatrow->get(GRN_SCHEDULE_REPEAT_DAY);
        $event->settime = $repeatrow->get(GRN_SCHEDULE_SETTIME);
        $event->endtime = $repeatrow->get(GRN_SCHEDULE_ENDTIME);
        $event->setdate = $repeatrow->get(GRN_SCHEDULE_SETDATE);
        $event->timezone = $repeatrow->get(GRN_SCHEDULE_TIMEZONE);

        // 最終日を1日前に
        $enddate = new CB_DateEx($event_date);
        $enddate->moveDays(-1);
        $event->enddate = $enddate;

        // 条件の更新
        $this->_setRepeatCondition($repeatrow, $eventrow, $event);

        return true;
    }

    /**
     * イベントの取得
     *
     * @param       string  $eid       イベントID
     * @param       CB_Date $date      日付
     * @param       int     $lock_mode DBのロックモード
     * @param       int     $get_mode
     *
     * @return      mixed       成功した場合はイベントオブジェクト、それ以外はFALSE
     */
    function getEvent(
        $eid,
        $date = null,
        $lock_mode = CB_DATABASE_SHARED_LOCK,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_OBJECT
    ) {
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            $___ret = false;

            return $___ret;
        }
//            cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );

        // イベントタイプが同じかどうか
        $event_type = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT) == 0) {
            $___ret = false;

            return $___ret;
        }

        // 入れ物準備
        $event = new GRN_Schedule_RepeatEvent();

        // データの中身の取得
        $this->_getEventData($eventrow, $event);

        // 日付のデータの取得
        if ( ! $this->_getEventDate($eventrow, $event, $date)) {
            $___ret = false;

            return $___ret;
        }

        // 参加者の取得
        if ( ! $this->_getEventMember($event, $lock_mode, $get_mode)) {
            $___ret = false;

            return $___ret;
        }

        // 通知先の取得
        if ( ! $this->_getEventNotifyAddress($event, $lock_mode, $get_mode)) {
            $___ret = false;

            return $___ret;
        }

        return $event;
    }

    /**
     * @param CB_Row                 $eventrow
     * @param GRN_Schedule_EventBase $event
     * @param CB_Date                $date ユーザーのタイムゾーンにおける日付
     */
    public function _getEventDate($eventrow, $event, $date)
    {
        $event_type = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));

        $repeattable = $this->_getRepeatTable();
        $repeatrowset = new CB_RowSet($repeattable);
        $repeatrowset->addCondition($repeatrowset->queryf("col_event = '@S'",
            $event->id));
        $repeatrow = $repeatrowset->iterate();
        if (is_null($repeatrow)) {
            return false;
        }

        $event->repeat_type = $repeatrow->get(GRN_REPEAT_TYPE);
        $event->wday = $repeatrow->get(GRN_SCHEDULE_REPEAT_WDAY);
        $event->day = $repeatrow->get(GRN_SCHEDULE_REPEAT_DAY);
        $event->settime = $repeatrow->get(GRN_SCHEDULE_SETTIME);
        $event->endtime = $repeatrow->get(GRN_SCHEDULE_ENDTIME);
        $event->setdate = $repeatrow->get(GRN_SCHEDULE_SETDATE);
        $event->enddate = $repeatrow->get(GRN_SCHEDULE_ENDDATE);

        // タイムゾーン
        $event->timezone = $repeatrow->get(GRN_SCHEDULE_TIMEZONE);

        // 例外日
        $excepttable = $this->_getExceptTable();
        $exceptrowset = new CB_RowSet($excepttable);
        $exceptrowset->addCondition($exceptrowset->queryf("col_event = '@S'",
            $event->id));
        $event->except = [];
        while ( ! is_null($row = $exceptrowset->iterate())) {
            $event->except[] = $row->get('date');
        }
        if (count($event->except) == 0) {
            $event->except = null;
        }

        // 日付のチェック
        if ( ! is_null($date)) {
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
                == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
            ) {
                // 予定情報の取得は、予定のタイムゾーンで行う必要がある
                $event_date = $this->translateRepeatDateToEventTimezone($event,
                    $date);
                $datetable = $this->_getDateTable();
                $rowset = new CB_RowSet($datetable);
                $rowset->addCondition($rowset->queryf("col_event = '@S' AND col_setdate = '@S'",
                    $event->id, $event_date->format()));
                $row = $rowset->iterate();
                if (is_null($row)) {
                    return false;
                }
                // 予定が持つ日付情報は、ユーザーのタイムゾーン
                $event->setdatetime
                    = $this->translateRepeatDateToUserTimezone($event,
                    $row->get(GRN_SCHEDULE_SETDATE));
                // enddateは1日ずらす。translateRepeatDateToUserTimezoneで00:00:00として扱うため。
                require_once('fw/date.csp');
                $dateex = new CB_DateEx($row->get(GRN_SCHEDULE_ENDDATE));
                $dateex->moveDays(1);
                $enddate = new CB_Date();
                $enddate->year = $dateex->year;
                $enddate->month = $dateex->month;
                $enddate->day = $dateex->day;
                $event->enddatetime
                    = $this->translateRepeatDateToUserTimezone($event,
                    $enddate);
            } else {
                $setts = new CB_TimeStampEx();
                $endts = new CB_TimeStampEx();
                $datetime = new CB_DateTime();
                $datetime->year = intval($date->year);
                $datetime->month = intval($date->month);
                $datetime->day = intval($date->day);
                $datetime->hour = 0;
                $datetime->minute = 0;
                $datetime->second = 0;
                $setts->setDateTime($datetime);
                $timespan = new CB_DateTimeSpan(86400);
                $endts->setDateTime($datetime);
                $endts->add($timespan);
                $datetimetable = $this->_getDateTimeTable();
                $rowset = new CB_RowSet($datetimetable);
                $format
                    = $rowset->queryf("col_event = '@S' AND ( col_setdatetime >= '@S' AND col_setdatetime < '@S' )",
                    $event->id, $setts->unix_ts, $endts->unix_ts);

                $rowset->addCondition($format);
                $row = $rowset->iterate();
                if (is_null($row)) {
                    return false;
                }

                $ts = new CB_TimeStampEx($row->get(GRN_SCHEDULE_SETDATETIME));
                $event->setdatetime = $ts->getDateTime();
                $ts
                    = new CB_TimeStampEx($row->get(GRN_SCHEDULE_ENDDATETIME));
                $event->enddatetime = $ts->getDateTime();
            }
        }

        return true;
    }

    /**
     * 日付をログインユーザーのタイムゾーンから予定のタイムゾーンに変換する
     *
     * @param  GRN_Schedule_RepeatEvent $event
     * @param  CB_Date or null           $date
     *
     * @return CB_Date
     */
    public function translateRepeatDateToEventTimezone($event, $date)
    {
        if (is_null($date)) {
            return null;
        }

        assert('$event instanceof GRN_Schedule_RepeatEvent');
        assert('$date instanceof CB_Date');

        if ( ! $event->isAllDay()) {
            require_once('schedule/view_util.csp');
            $start_time = GRN_Schedule_View_Util::getAlldayStartTime();
            $date_new = CB_DateTimeEx::createByDateAndTime($date,
                $start_time);
            $dates = [];
            for ($i = -2; $i <= 2; $i++) {
                $date_check = clone $date_new;
                $date_check->moveDays($i);
                $dates[] = $date_check;
            }

            $datetime = CB_DateTimeEx::createByDateAndTime($date,
                $event->settime);
            foreach ($dates as $date_check) {
                $datetime_check
                    = CB_DateTimeEx::createByDateAndTime($date_check,
                    $event->settime);
                $datetime_check
                    = CB_I18N::translateDatetimeTimezone($datetime_check,
                    $event->timezone,
                    CB_I18N::getInstance()->getCurrentTimezone());
                if ($datetime_check->day == $date->day) {
                    $datetime = clone $datetime_check;
                    break;
                }
            }

            $datetime = CB_I18N::translateDatetimeTimezone($datetime,
                CB_I18N::getInstance()->getCurrentTimezone(), $event->timezone);

            return $datetime->getDate();
        }

        $translated_date = $this->translateDateToEventTimezone($event, $date);

        return $translated_date;
    }

    /**
     * 日付を予定のタイムゾーンからログインユーザーのタイムゾーンに変換する
     *
     * @param  GRN_Schedule_RepeatEvent $event
     * @param  CB_Date or null           $date
     *
     * @return CB_Date
     */
    public function translateRepeatDateToUserTimezone($event, $date)
    {
        if (is_null($date)) {
            return null;
        }

        assert('$event instanceof GRN_Schedule_RepeatEvent');
        assert('$date instanceof CB_Date');

        if ( ! $event->isAllDay()) {
            $datetime = CB_DateTimeEx::createByDateAndTime($date,
                $event->settime);
            $datetime = CB_I18N::translateDatetimeTimezone($datetime,
                $event->timezone, CB_I18N::getInstance()->getCurrentTimezone());

            return $datetime->getDate();
        }

        require_once('schedule/view_util.csp');
        $datetime = CB_DateTimeEx::createByDateAndTime($date,
            GRN_Schedule_View_Util::getAlldayStartTime());
        $timestamp = cb_datetime_to_timestamp($datetime, $event->timezone);
        $datetime = new CB_DateTimeEx(cb_timestamp_to_datetime($timestamp));

        $translated_date = new CB_Date();
        $translated_date->year = $datetime->year;
        $translated_date->month = $datetime->month;
        $translated_date->day = $datetime->day;

        return $translated_date;
    }

    /**
     * 指定された日に一番近い予定の日付を取得する
     *
     * @param   GRN_Schedule_RepeatEvent $event 繰り返し予定
     * @param   CB_Date                  $date  基準となるユーザー視点の日付
     *
     * @return  mixed       成功した場合はイベントの日時、それ以外はFALSE
     */
    function getRepeatFirstDate($event, $date)
    {
        assert('$event instanceof GRN_Schedule_RepeatEvent');
        assert('$date instanceof CB_Date');

        $event_id = $event->id;
        $event_type = $event->getEventType();

        // 繰り返しではないので戻る
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
            !== GRN_SCHEDULE_EVENT_TYPE_REPEAT
        ) {
            return false;
        }

        $event_date = [];
        $db = $this->_getDBConnection();
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            === GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            // 全日予定は、タイムスタンプでなくdate型で検索するため、ユーザーのタイムゾーンから予定のタイムゾーンに変換する
            $translated_date = $this->translateRepeatDateToEventTimezone($event,
                $date);
            $query = cb_queryf($db,
                "SELECT col_setdate, col_enddate FROM tab_grn_schedule_eventdate WHERE ( col_event = '@S' AND col_setdate >= '@S' )",
                $event_id, $translated_date->format());

            $query = $db->select_format($query);
            $result = $db->query($query, 0, 1);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            $row = $db->fetch_assoc($result);
            if ($row) {
                $setdate = new CB_Date();
                $setdate->parse($row['col_setdate']);
                $setdate = $this->translateRepeatDateToUserTimezone($event,
                    $setdate);
                $event_date['setdatetime'] = $setdate;
                $enddate = new CB_Date();
                $enddate->parse($row['col_enddate']);
                $enddate = $this->translateRepeatDateToUserTimezone($event,
                    $enddate);
                $event_date['enddatetime'] = $enddate;

                return $event_date;
            }

            // 未来にはなかった
            $query = cb_queryf($db,
                "SELECT col_setdate, col_enddate FROM tab_grn_schedule_eventdate WHERE ( col_event = '@S' AND col_setdate < '@S') ORDER BY col_setdate DESC",
                $event_id, $translated_date->format());

            $query = $db->select_format($query);
            $result = $db->query($query, 0, 1);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            $row = $db->fetch_assoc($result);
            if ($row) {
                $setdate = new CB_Date();
                $setdate->parse($row['col_setdate']);
                $setdate = $this->translateRepeatDateToUserTimezone($event,
                    $setdate);
                $event_date['setdatetime'] = $setdate;
                $enddate = new CB_Date();
                $enddate->parse($row['col_enddate']);
                $enddate = $this->translateRepeatDateToUserTimezone($event,
                    $enddate);
                $event_date['enddatetime'] = $enddate;

                return $event_date;
            }
        } else {
            $datetime = new CB_DateTime();
            $datetime->year = intval($date->year);
            $datetime->month = intval($date->month);
            $datetime->day = intval($date->day);
            $datetime->hour = 0;
            $datetime->minute = 0;
            $datetime->second = 0;
            $setts = new CB_TimeStampEx();
            $setts->setDateTime($datetime);

            $query = cb_queryf($db,
                "SELECT col_setdatetime, col_enddatetime FROM tab_grn_schedule_eventdatetime WHERE ( col_event = '@S' AND col_setdatetime >= '@S' )",
                $event_id, $setts->unix_ts);


            $query = $db->select_format($query);
            $result = $db->query($query, 0, 1);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            $row = $db->fetch_assoc($result);
            if ($row) {
                $setts->unix_ts = intval($row['col_setdatetime']);
                $event_date['setdatetime'] = $setts->getDateTime();

                $setts->unix_ts = intval($row['col_enddatetime']);
                $event_date['enddatetime'] = $setts->getDateTime();

                return $event_date;
            }

            // 未来にはなかった
            $query = cb_queryf($db,
                "SELECT col_setdatetime, col_enddatetime FROM tab_grn_schedule_eventdatetime WHERE ( col_event = '@S' AND col_setdatetime < '@S' ) ORDER BY col_setdatetime DESC",
                $event_id, $setts->unix_ts);
            $query = $db->select_format($query);
            $result = $db->query($query, 0, 1);
            if ($result === false) {
                $db->throwError([
                    'query' => 'failed query on SELECT: ' . $query
                ]);
            }

            $row = $db->fetch_assoc($result);
            if ($row) {
                $setts->unix_ts = intval($row['col_setdatetime']);
                $event_date['setdatetime'] = &$setts->getDateTime();

                $setts->unix_ts = intval($row['col_enddatetime']);
                $event_date['enddatetime'] = &$setts->getDateTime();

                return $event_date;
            }
        }

        return false;
    }

    /*
     * update star for all user when update one day of repeat
     * @param old_unique_id         unique id of star of old repeat sh
     * @param new_unique_id         new unique_id for new sh
     * @param new_event_id          new event id of new sh
     * @param date                  date of new sh
     */
    function updateStarWhenUpdateOneDay(
        $old_unique_id,
        $new_unique_id,
        $new_event_id,
        $date
    ) {
        global $G_container_base;
        $app_locator = GRN_ApplicationLocator::instance();
        $star_db = $app_locator->getConnection('star');

        global $G_config_common;
        if ($G_config_common->get('Database', 'merged')) {
            $table_name = 'tab_grn_star';

            // get all user mark star
            $query_find_user = sprintf("SELECT col_user FROM %s 
                       WHERE col_module_id='%s' AND col_unique_id='%s';",
                $table_name, 'grn.schedule', $old_unique_id);
            $ret = $star_db->query($query_find_user);

            $uids = [];
            while ($row = $star_db->fetch_assoc($ret)) {
                $uids[] = $row['col_user'];
            }
            $star_db->free_result($ret);

            // not user
            if (count($uids) > 0) {
                $org_data = [
                    'event' => $new_event_id,
                    'bdate' => $date->format()
                ];
                // update star data
                $query_update_star = sprintf("UPDATE %s 
                        SET col_unique_id='%s', col_org_data='%s' 
                        WHERE col_module_id='%s' AND col_unique_id='%s' AND col_user IN (%s);",
                    $table_name, $new_unique_id,
                    $star_db->escape(serialize($org_data)),
                    'grn.schedule', $old_unique_id, implode(',', $uids));
                $star_db->query($query_update_star);
            }
        } else {
            for ($i = 0; $i < cb_get_user_tables(); $i++) {
                $table_name = 'tab_grn_star___p' . $i;

                // get all user mark star
                $query_find_user = sprintf("SELECT col_user FROM %s 
                           WHERE col_module_id='%s' AND col_unique_id='%s';",
                    $table_name, 'grn.schedule', $old_unique_id);
                $ret = $star_db->query($query_find_user);

                $uids = [];
                while ($row = $star_db->fetch_assoc($ret)) {
                    $uids[] = $row['col_user'];
                }
                $star_db->free_result($ret);

                // not user
                if (count($uids) == 0) {
                    continue;
                }
                $org_data = [
                    'event' => $new_event_id,
                    'bdate' => $date->format()
                ];
                // update star data
                $query_update_star = sprintf("UPDATE %s 
                        SET col_unique_id='%s', col_org_data='%s' 
                        WHERE col_module_id='%s' AND col_unique_id='%s' AND col_user IN (%s);",
                    $table_name, $new_unique_id,
                    $star_db->escape(serialize($org_data)),
                    'grn.schedule', $old_unique_id, implode(',', $uids));
                $star_db->query($query_update_star);
            }
        }
    }

    /*
     * update star for all user when modify after repeat event
     * @param event             old repeate event
     * @param new_event_id      new event id of new repeat event
     * @param date              begin date of sh to change
     */
    function updateStarModifyAfterEvent($event, $new_event_id, $date)
    {
        global $G_container_base;
        $app_locator = GRN_ApplicationLocator::instance();
        $schedule_db = $app_locator->getConnection('schedule');

        $event_type = $event->getEventType();
        $repeat_dates = [];
        // sh only date
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
            $query_date = sprintf("SELECT col_setdate FROM tab_grn_schedule_eventdate 
                                WHERE col_event='%s';", $new_event_id);
            $ret = $schedule_db->query($query_date);
            while ($row = $schedule_db->fetch_assoc($ret)) {
                $tmp_date = new CB_Date();
                if ( ! $tmp_date->parse($row['col_setdate'])) {
                    continue;
                }
                $repeat_dates[] = $tmp_date;
            }
            $schedule_db->free_result($ret);
        } else // sh date time
        {
            $query_date = sprintf("SELECT col_setdatetime FROM tab_grn_schedule_eventdatetime 
                                WHERE col_event='%s';", $new_event_id);
            $ret = $schedule_db->query($query_date);
            while ($row = $schedule_db->fetch_assoc($ret)) {
                $tmp_ts = new CB_Timestamp();
                $tmp_ts->unix_ts = $row['col_setdatetime'];
                $tmp_tsex = new CB_TimeStampEx($tmp_ts);
                $repeat_dates[] = $tmp_tsex->getDate();
            }
            $schedule_db->free_result($ret);
        }

        // update star for all user
        foreach ($repeat_dates as $repeat_date) {
            $old_unique_id = 'rp_' . $event->id . '_' . $repeat_date->format();
            $new_unique_id = 'rp_' . $new_event_id . '_'
                             . $repeat_date->format();
            $this->updateStarWhenUpdateOneDay($old_unique_id, $new_unique_id,
                $new_event_id, $repeat_date);
        }
    }

    function getRepeatCondition($event_ids)
    {
        $db = $this->connect();
        $query_eids = [];
        foreach ($event_ids as $eid) {
            $query_eids[] = cb_queryf($db, "'@S'", $eid);
        }

        if (count($query_eids) <= 0) {
            return [];
        }
        $query_eids = implode(',', $query_eids);
        $query
            = "SELECT col_event, col_repeat_day, col_repeat_type, col_repeat_wday FROM tab_grn_schedule_repeatcondition WHERE col_event IN ("
              . $query_eids . ")";
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        $conditions = [];
        while ($row = $db->fetch_assoc($result)) {
            $condition = [];
            $condition['event_id'] = $row['col_event'];
            $condition['repeat_day'] = $row['col_repeat_day'];
            $condition['repeat_type'] = $row['col_repeat_type'];
            $condition['repeat_wday'] = $row['col_repeat_wday'];
            $conditions[$condition['event_id']] = $condition;
        }

        $db->free_result($result);

        return $conditions;
    }

    function getRepeatEndDate($event_id, $allday = true)
    {
        $db = $this->connect();
        if ($allday) {
            $query = cb_queryf($db,
                "SELECT  MAX(col_enddate) AS col_enddate FROM tab_grn_schedule_eventdate WHERE col_event='@S'",
                $event_id);
        } else {
            $query = cb_queryf($db,
                "SELECT  MAX(col_enddatetime) AS col_enddatetime FROM tab_grn_schedule_eventdatetime WHERE col_event='@S'",
                $event_id);
        }
        $query = $db->select_format($query, 0, 1, CB_DATABASE_NO_LOCK);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        $event_date = [];
        $row = $db->fetch_assoc($result);
        if ($row) {
            if ($allday) {
                $date = new CB_Date();
                $date->parse($row['col_enddate']);
                $event_date['end_date'] = $date;
            } else {
                $timestamp = new CB_TimeStampEx();
                $timestamp->unix_ts = intval($row['col_enddatetime']);
                $event_date['end_datetime'] = $timestamp->getDateTime();
            }
        }
        $db->free_result($result);

        return $event_date;
    }

    /**
     * @param $new_event_id
     * @param $old_event
     */
    function updateCreatorAfterModifyEvent($new_event_id, $old_event)
    {
        $event_table = $this->_getEventTable();
        $event_row = $event_table->getRow($new_event_id);
        if ( ! $event_row) {
            return false;
        }

        // 登録者情報
        if ( ! is_null($old_event->creator)
             && is_a($old_event->creator, 'CB_User')
        ) {
            $event_row->set('creator', $old_event->creator);
            $event_row->set('creator_foreign_key',
                $old_event->creator->get('foreign_key'));
            $event_row->set('creator_name',
                $old_event->creator->get('display_name'));
            $event_row->set('ctime', $old_event->ctime);
        } elseif (is_string($old_event->creator)) {
            $event_row->set('creator', null);
            $event_row->set('creator_foreign_key', null);
            $event_row->set('creator_name', $old_event->creator);
            $event_row->set('ctime', $old_event->ctime);
        } else {
            $old_event_row = $event_table->getRow($old_event->id);
            if ( ! $old_event_row) {
                return false;
            }

            $event_row->set('creator', $old_event_row->get('creator'));
            $event_row->set('creator_foreign_key',
                $old_event_row->get('creator_foreign_key'));
            $event_row->set('creator_name',
                $old_event_row->get('creator_name'));
            $event_row->set('ctime', $old_event_row->get('ctime'));
        }

        return true;
    }
}
