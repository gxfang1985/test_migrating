<?php
/**
 *
 * @author      A.Shima
 * @package     grn.schedule
 */

require_once('schedule/resources.csp');
require_once('schedule/error_code.csp');
require_once('grn/application.csp');

class GRN_Facility_Privilege_Logic
{
    /**
     * @access private
     */
    function __construct()
    {
    }

    /** @var  GRN_Facility_Privilege_Logic */
    private static $_instance = null;

    /**
     * @return GRN_Facility_Privilege_Logic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    private $_privilage_table = null;

    /**
     * @access private
     */
    function _getTable()
    {
        if (is_null($this->_privilage_table)) {
            require_once('schedule/table.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $tm = $app_locator->getTableManager('schedule');

            $this->_privilage_table
                = $tm->getTableInfo(GRN_FACILITY_FACILITYGROUP_PRIVILEGE);
        }

        return $this->_privilage_table;
    }

    /**
     * @access private
     */
    private $_db = null;

    /**
     * @access private
     */
    function _getDBConnection()
    {
        // 初期化されいなければ初期化
        if (is_null($this->_db)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_db = $app_locator->getConnection('schedule');
        }

        return $this->_db;
    }

    /**
     * @access private
     */
    function _isAlreadyEntry($object, & $target, $target_type)
    {
        // 既に登録されているかの確認
        $rowset = new CB_RowSet($this->_getTable());
        switch ($target_type) {
            case 'user':
                $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S' AND col_user = '@S'",
                    $object->getOID(), $target->getOID()));
                break;
            case 'group':
                $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S' AND col_group = '@S'",
                    $object->getOID(), $target->getOID()));
                break;
            case 'static_role':
                $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S' AND col_static_role = '@S'",
                    $object->getOID(), $target->getOID()));
                break;
            case 'dynamic_role':
                $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S' AND col_dynamic_role = '@S'",
                    $object->getOID(), $target));
                break;
            default:
                return false;
        }

        $row = $rowset->iterate();
        $rowset->destroy();

        return ( ! is_null($row));
    }

    /**
     * 管理の設定
     *
     * @param   object GRN_Facility_FacilityGroup   $object
     * @param   mixed  $target
     * @param   string $target_type
     */
    function setPrivilege($object, & $target, $target_type)
    {
        if ( ! is_a($object, 'GRN_Facility_FacilityGroup')) {
            return false;
        }

        // 既に登録されている場合
        if ($this->_isAlreadyEntry($object, $target, $target_type)) {
            return true;
        }

        $table = $this->_getTable();

        $row = $table->newRow();

        $row->set('facilitygroup', $object);

        switch ($target_type) {
            case 'user':
                $row->set('user', $target);
                break;
            case 'group':
                $row->set('group', $target);
                break;
            case 'static_role':
                $row->set('static_role', $target);
                break;
            case 'dynamic_role':
                $row->set('dynamic_role', $target);
                break;
            default:
                return false;
        }

        return true;
    }

    /**
     * 管理の取得
     *
     * @param   object GRN_Facility_FacilityGroup   $object
     * @param   mixed  $target
     * @param   string $target_type
     */
    function getPrivilege($object, & $target, $target_type)
    {
        if ( ! is_a($object, 'GRN_Facility_FacilityGroup')) {
            $___ret = false;

            return $___ret;
        }

        $rowset = new CB_RowSet($this->_getTable());

        $condition = $rowset->queryf("col_facilitygroup = '@S' AND ",
            $object->getOID());
        switch ($target_type) {
            case 'user':
                $condition .= $rowset->queryf("col_user = '@S'",
                    $target->getOID());
                break;
            case 'group':
                $condition .= $rowset->queryf("col_group = '@S'",
                    $target->getOID());
                break;
            case 'static_role':
                $condition .= $rowset->queryf("col_static_role = '@S'",
                    $target->getOID());
                break;
            case 'dynamic_role':
                $condition .= $rowset->queryf("col_dynamic_role = '@S'",
                    $target);
                break;
            default:
                {
                    $___ret = false;

                    return $___ret;
                }
        }

        $rowset->addCondition($condition);

        $row = $rowset->iterate();

        return $row;

    }

    /**
     * 管理の取得
     *
     * @param   object GRN_Facility_FacilityGroup   $object
     */
    function getPrivileges($object)
    {
        if ( ! is_a($object, 'GRN_Facility_FacilityGroup')) {
            return false;
        }
        $rowset = new CB_RowSet($this->_getTable());

        $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S'",
            $object->getOID()));
        $rowset->addOrderColumn('col_user, col_group, col_static_role, col_dynamic_role, _id');

        $retval = [
            'dynamic_role' => [],
            'static_role'  => [],
            'group'        => [],
            'user'         => []
        ];

        while ( ! is_null($row = $rowset->iterate())) {
            if (($user = $row->get('user'))) {
                $retval['user'][$user->getOID()] = $user;
            } elseif (($group = $row->get('group'))) {
                $retval['group'][$group->getOID()] = $group;
            } elseif (($role = $row->get('static_role'))) {
                $retval['static_role'][$role->getOID()] = $role;
            } elseif (($dynamic_role = $row->get('dynamic_role'))) {
                $retval['dynamic_role'][$dynamic_role] = $dynamic_role;
            }
        }
        $rowset->destroy();

        return $retval;
    }

    /**
     * 管理の件数の取得
     *
     * @param   object GRN_Facility_FacilityGroup   $object
     */
    function getPrivilegesCount($object)
    {
        if ( ! is_a($object, 'GRN_Facility_FacilityGroup')) {
            return false;
        }
        $priv_table = $this->_getTable();
        $rowset = new CB_RowSet($priv_table);
        $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S'",
            $object->getOID()));

        // 先に削除フラグが立っているユーザーを知っておく
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');
        $real_table_name = CB_DATABASE_TABLE_PREFIX
                           . $priv_table->getTableName();
        $user_table = $tm->getTableInfo('CB_User');
        $on = $real_table_name . '.col_user = u._id';
        $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        $rowset->addCondition("u.col_deleted IS NOT NULL");

        $b_deleted = false;
        $deleted_privileges = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $b_deleted = true;
            $deleted_privileges[] = $rowset->queryf("'@S'", $row->getOID());
        }
        $deleted_privileges_str = implode(',', $deleted_privileges);
        $rowset->destroy();

        $rowset = new CB_RowSet($priv_table);
        $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S'",
            $object->getOID()));
        if ($b_deleted) {
            $rowset->addCondition($real_table_name . '._id NOT IN ('
                                  . $deleted_privileges_str . ')');
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);

        $row = $rowset->iterate();
        $rowset->destroy();

        if ( ! $row) {
            return false;
        }

        return intval($row['count']);
    }

    /**
     * 削除
     *
     * @param   object GRN_Facility_FacilityGroup   $object
     * @param   mixed  $target
     * @param   string $target_type
     */
    function deletePrivilege($object, $target, $target_type)
    {
        if ( ! is_a($object, 'GRN_Facility_FacilityGroup')) {
            return false;
        }

        $rowset = new CB_RowSet($this->_getTable());

        $condition = $rowset->queryf("col_facilitygroup = '@S' AND ",
            $object->getOID());
        switch ($target_type) {
            case 'user':
                $condition .= $rowset->queryf("col_user = '@S'",
                    $target->getOID());
                break;
            case 'group':
                $condition .= $rowset->queryf("col_group = '@S'",
                    $target->getOID());
                break;
            case 'static_role':
                $condition .= $rowset->queryf("col_static_role = '@S'",
                    $target->getOID());
                break;
            case 'dynamic_role':
                $condition .= $rowset->queryf("col_dynamic_role = '@S'",
                    $target);
                break;
            default:
                return false;
        }

        $rowset->addCondition($condition);

        $row = $rowset->iterate();
        if ( ! is_null($row)) {
            $row->delete();

            return true;
        }

        return false;
    }

    /**
     * 削除
     *
     * @param   object GRN_Facility_FacilityGroup   $object
     */
    function deletePrivileges($object)
    {
        if ( ! is_a($object, 'GRN_Facility_FacilityGroup')) {
            return false;
        }
        $rowset = new CB_RowSet($this->_getTable());

        $rowset->addCondition($rowset->queryf("col_facilitygroup = '@S'",
            $object->getOID()));

        $rowset->deleteAllMatched();

        return true;
    }

    /**
     * 権限があるか？
     *
     * @param   object CB_User      $user
     */
    function hasPrivilege($user)
    {
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わないようにする
        $user_groups = $uum->getUserGroupsInfo($user->getOID(), true);
        $user_roles = $uum->getUserRolesInfo($user->getOID(), true);
        $dynamic_roles = $uum->listGrantedRoles();

        $db = $this->_getDBConnection();

        $query = cb_queryf($db,
            "SELECT COUNT(*) from tab_grn_facility_facilitygroup_privilege WHERE col_user = '@S'",
            $user->getOID());

        if (is_array($user_groups) && count($user_groups) > 0) {
            $groups = [];
            foreach (array_keys($user_groups) as $key) {
                $groups[] = cb_queryf($db, "col_group = '@S'", $key);
            }

            $query .= ' OR ' . implode(' OR ', $groups);
        }

        if (is_array($user_roles) && count($user_roles) > 0) {
            $roles = [];
            foreach (array_keys($user_roles) as $key) {
                $roles[] = cb_queryf($db, "col_static_role = '@S'", $key);
            }

            $query .= ' OR ' . implode(' OR ', $roles);
        }

        if (is_array($dynamic_roles) && count($dynamic_roles) > 0) {
            $roles = [];
            foreach (array_keys($dynamic_roles) as $key) {
                $roles[] = cb_queryf($db, "col_dynamic_role = '@S'", $key);
            }

            $query .= ' OR ' . implode(' OR ', $roles);
        }

        $query = $db->select_format($query);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $row = $db->fetch_assoc($result);
        // 結果の開放
        $db->free_result($result);

        if (intval($row['COUNT(*)']) > 0) {
            return true;
        }

        return false;
    }

    /**
     * 指定された施設グループの権限があるかどうか
     *
     * @param   object CB_User                      $user
     * @param   object GRN_Facility_FacilityGroup   $object
     */
    function hasPrivilegeOfFacilityGroup($user, $object)
    {
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }

        if ( ! is_a($object, 'GRN_Facility_FacilityGroup')) {
            return false;
        }

        $result = $this->hasPrivilegeOfFacilityGroupByID($user,
            $object->getOID());

        return $result;
    }

    /**
     * 指定された施設グループIDの権限があるかどうか
     *
     * @param   object CB_User  $user
     * @param   string $fagid
     */
    function hasPrivilegeOfFacilityGroupByID($user, $fagid)
    {
        $db = $this->_getDBConnection();
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }

        if (empty($fagid)) {
            return false;
        }

        require_once('schedule/facility_system_logic.csp');
        $fsl = GRN_Facility_SystemLogic::getInstance();

        $tree =& $fsl->makeFacilityGroupTree([$fagid => $fagid]);

        $parent_groups = [];
        $tmp_fagid = $fagid;
        $counter = 0;
        while ( ! is_null($tmp_fagid)
                && $counter < GRN_SCHD_MAX_FACILITY_GROUP_TREE) {
            $counter += 1;
            $parent_groups[] = $tmp_fagid;
            if ( ! isset($tree[$tmp_fagid])) {
                break;
            }
            $tmp_fagid = $tree[$tmp_fagid];
        }

        $parent_groups_query = [];
        foreach ($parent_groups as $g) {
            $parent_groups_query[] = cb_queryf($db, "'@S'", $g);
        }
        $parent_groups_query = implode(',', $parent_groups_query);

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わないようにする
        $user_groups = $uum->getUserGroupsInfo($user->getOID(), true);
        $user_roles = $uum->getUserRolesInfo($user->getOID(), true);
        $dynamic_roles = $uum->listGrantedRoles();

        $query = cb_queryf($db,
            'SELECT COUNT(*) from tab_grn_facility_facilitygroup_privilege WHERE col_facilitygroup in('
            . $parent_groups_query . ') AND ( col_user = \'@S\'',
            $user->getOID());

        if (is_array($user_groups) && count($user_groups) > 0) {
            $groups = [];
            foreach (array_keys($user_groups) as $key) {
                $groups[] = cb_queryf($db, "col_group = '@S'", $key);
            }

            $query .= ' OR ' . implode(' OR ', $groups);
        }

        if (is_array($user_roles) && count($user_roles) > 0) {
            $roles = [];
            foreach (array_keys($user_roles) as $key) {
                $roles[] = cb_queryf($db, "col_static_role = '@S'", $key);
            }

            $query .= ' OR ' . implode(' OR ', $roles);
        }

        if (is_array($dynamic_roles) && count($dynamic_roles) > 0) {
            $roles = [];
            foreach (array_keys($dynamic_roles) as $key) {
                $roles[] = cb_queryf($db, "col_dynamic_role = '@S'", $key);
            }

            $query .= ' OR ' . implode(' OR ', $roles);
        }
        $query .= ' )';

        $query = $db->select_format($query);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $row = $db->fetch_assoc($result);
        // 結果の開放
        $db->free_result($result);

        if (intval($row['COUNT(*)']) > 0) {
            return true;
        }

        return false;
    }

    /**
     * 指定された施設の権限があるかどうか
     *
     * @param   CB_User               $user
     * @param   GRN_Facility_Facility $object
     */
    function hasPrivilegeOfFacility($user, $object)
    {
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }

        if ( ! is_a($object, 'GRN_Facility_Facility')) {
            return false;
        }


        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        // 施設の所属している施設グループを取得する
        $facilitygroup
            = &$facility_logic->getFacilityAffiliationGroup($object->getOID());
        if ($facilitygroup == false) {
            return false;
        }

        // その施設グループの権限をチェック
        return $this->hasPrivilegeOfFacilityGroup($user, $facilitygroup);
    }

    /**
     * 管理者の持つ施設グループの一覧を取得する
     * 運用管理権限がある施設グループの子孫に、さらに運用管理権限が設定されていても
     * 最上位のものしか表示しない
     */
    public function getPrivilegeFacilityGroupListBeanByTopLevel($user)
    {
        $facilities = $this->_getPrivilegeFacilityGroupListBean($user);
        require_once('schedule/facility_system_logic.csp');
        $fsl = GRN_Facility_SystemLogic::getInstance();
        $tree =& $fsl->makeFacilityGroupTree($facilities);

        foreach (array_keys($facilities) as $key) {
            $parents = [];
            $tmp_key = $key;
            for (
                $i = 0; $i < GRN_SCHD_MAX_FACILITY_GROUP_TREE && $tmp_key; $i++
            ) {
                if ($tmp_key != $key
                    && array_key_exists($tmp_key, $facilities)
                ) {
                    unset($facilities[$key]);
                    break;
                }
                $tmp_key = $tree[$tmp_key];
            }
        }

        return $facilities;
    }

    /**
     * Get all facility groups which the operator has the privileges of.
     * This function traces the facility group tree to evaluate the user's privilege.
     */
    function getFacilityGroupWithAuthorityEx($user)
    {
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        $priv_fgroups = $this->getFacilityGroupWithAuthority($user);
        $next_priv_fgroup_key = array_keys($priv_fgroups);

        while (count($next_priv_fgroup_key)) {
            $tmp_fgroup_keys = [];
            foreach ($next_priv_fgroup_key as $fg_key) {
                $children = $facility_logic->getFacilityGroupChildren($fg_key);
                foreach ($children as $child) {
                    $priv_fgroups[$child->getOID()] = $child;
                    $tmp_fgroup_keys[] = $child->getOID();
                }
            }
            $next_priv_fgroup_key = $tmp_fgroup_keys;
        }

        return $priv_fgroups;
    }

    /**
     * 管理者の持つ施設グループの一覧を取得する
     * 施設グループの階層をたどって評価しない
     */
    public function getFacilityGroupWithAuthority($user)
    {
        $facilityGroupArray = $this->_getPrivilegeFacilityGroupListBean($user);

        $resultFacilityGroupArray = [];

        require_once('schedule/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');
        $facilitygroupTable = $tm->getTableInfo(GRN_FACILITY_FACILITYGROUP);

        foreach ($facilityGroupArray as $facilityGroup) {
            $facilityGroupId = $facilityGroup->getId();
            $row
                = $facilitygroupTable->getRow($facilityGroupId,
                $facilityGroup->convertArray());
            $resultFacilityGroupArray[$facilityGroupId] = $row;
        }

        return $resultFacilityGroupArray;
    }

    /**
     * 指定したユーザーが管理権限を持つGrnFacilityFacilitygroupオブジェクトの配列を返す。
     *
     * @access    private
     *
     * @param     object $inUserObj CB_Userオブジェクト
     *
     * @return    array     GrnFacilityFacilitygroupオブジェクトの配列
     */
    private function _getPrivilegeFacilityGroupListBean($inUserObj)
    {
        if ( ! is_a($inUserObj, 'CB_User')) {
            return [];
        }

        $resultArray = [];

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わないようにする
        $user_groups = $uum->getUserGroupsInfo($inUserObj->getOID(), true);
        $user_roles = $uum->getUserRolesInfo($inUserObj->getOID(), true);
        $dynamic_roles = $uum->listGrantedRoles();

        $groupIdArray = [];
        if (is_array($user_groups) && count($user_groups) > 0) {
            $groupIdArray = array_keys($user_groups);
        }

        $userRoleIdArray = [];
        if (is_array($user_roles) && count($user_roles) > 0) {
            $userRoleIdArray = array_keys($user_roles);
        }

        $dynamicRoleIdArray = [];
        if (is_array($dynamic_roles) && count($dynamic_roles) > 0) {
            $dynamicRoleIdArray = array_keys($dynamic_roles);
        }

        require_once('schedule/table.csp');
        require_once('schedule/FacilityFacade.csp');
        require_once('schedule/bean/GrnFacilityFacilitygroupPrivilegeCondition.csp');
        require_once('fw/i18n.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');
        $facilitygroupTable = $tm->getTableInfo(GRN_FACILITY_FACILITYGROUP);

        $i18n = CB_I18N::getInstance();
        $dao = new FacilityFacade();
        $dataObj = [];
        $dataObj['lock'] = $facilitygroupTable->_lock;
        $dataObj['language'] = $i18n->getCurrentLanguage();

        $conditionBean
            = new GrnFacilityFacilitygroupPrivilegeCondition($inUserObj->getOID(),
            $groupIdArray, $userRoleIdArray, $dynamicRoleIdArray);

        $resultArray = $dao->getFacilitygroupListByPrivilegeCondition($dataObj,
            $conditionBean);

        return $resultArray;
    }

    /**
     * 管理者の持つ施設の一覧を取得する
     * 施設グループの階層をたどって評価する
     */
    function getFacilitiesWithAuthority($user, $fagid = null)
    {
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        // 階層をたどって、権限がある施設グループの子孫の施設グループを集める
        $priv_fgroups = $this->getFacilityGroupWithAuthority($user);
        $next_priv_fgroup_key = array_keys($priv_fgroups);

        while (count($next_priv_fgroup_key)) {
            $tmp_fgroup_keys = [];
            foreach ($next_priv_fgroup_key as $fg_key) {
                $children = $facility_logic->getFacilityGroupChildren($fg_key);
                foreach ($children as $child) {
                    $priv_fgroups[$child->getOID()] = $child;
                    $tmp_fgroup_keys[] = $child->getOID();
                }
            }
            $next_priv_fgroup_key = $tmp_fgroup_keys;
        }

        // 施設グループに所属する施設を集める
        $facilities = [];

        foreach ($priv_fgroups as $fgroup) {
            $tmp_facilities
                = $facility_logic->getGroupFacilitiesInfo($fgroup->getOID());
            foreach ($tmp_facilities as $f) {
                $facilities[$f['_id']] = $f;
            }
        }

        // 全施設の並び順を調べて並べ替える
        $ordered_all_facilities = $facility_logic->getOrderedAllFacilitiesID();
        $ret_facilities = [];
        foreach ($ordered_all_facilities as $id) {
            if (array_key_exists($id, $facilities)) {
                $ret_facilities[$facilities[$id]['_id']] = $facilities[$id];
            }
            unset($facilities[$id]);
        }

        return $ret_facilities;
    }

    /**
     * 指定された施設(複数)のうち権限を持たない施設を返す
     *
     * @param $user
     * @param $obj_facilities
     *
     * @return array|bool
     */
    function getFacilitiesWithoutAuthority($user, $obj_facilities)
    {
        if ( ! (is_array($obj_facilities) && count($obj_facilities))) {
            return false;
        }

        foreach ($obj_facilities as $key => $value) {
            if ($this->hasPrivilegeOfFacility($user, $value)) {
                unset($obj_facilities[$key]);
            }
        }

        return $obj_facilities;
    }

    /**
     * 指定された施設（複数）の権限があるかどうか
     *
     * @param   object CB_User      $user
     * @param   array  $objects
     * @param   string $condition
     */
    function hasPrivilegeOfFacilities($user, $objects, $condition = 'OR')
    {
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }

        if ( ! is_array($objects) && count($objects) === 0) {
            return false;
        }


        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        // その施設グループの権限をチェック
        if (strcasecmp($condition, 'OR') === 0) {
            $b_or = true;
            $retval = false;
        } else {
            $b_or = false;
            $retval = true;
        }

        // 施設の所属している施設グループを取得する
        $facilitygroups = [];
        foreach (array_keys($objects) as $key) {
            $object = $objects[$key];
            $facilitygroup
                = $facility_logic->getFacilityAffiliationGroup($object->getOID());
            // 施設グループに所属していない施設は権限を持っていないものとして扱う
            if ( ! $facilitygroup) {
                if ($b_or) {
                    continue;
                } else {
                    return false;
                }
            }
            $facilitygroups[$facilitygroup->getOID()] = $facilitygroup;
        }
        if (count($facilitygroups) === 0) {
            return false;
        }

        //施設グループ分
        foreach (array_keys($facilitygroups) as $key) {
            $facilitygroup = $facilitygroups[$key];

            $result = $this->hasPrivilegeOfFacilityGroup($user, $facilitygroup);
            if ($b_or) {
                if ($result) {
                    return true;
                } else {
                    continue;
                }
            } elseif ( ! $result) {
                return false;
            }
        }

        return $retval;
    }

    /**
     * 指定された施設IDの施設(複数)の権限があるかどうか
     *
     * @param   object CB_User      $user
     * @param   array  $fids
     * @param   string $condition
     */
    function hasPrivilegeOfFacilitiesById($user, $fids, $condition = 'OR')
    {
        if ( ! is_array($fids) || count($fids) === 0) {
            return false;
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        $facilities = [];
        foreach ($fids as $fid) {
            $facility = $facility_logic->getFacility($fid);
            if ($facility === false) {
                continue;
            }
            $facilities[] = $facility;
        }

        return $this->hasPrivilegeOfFacilities($user, $facilities, $condition);
    }

}


