<?php
/**
 * スケジューラーの個人設定などを管理するロジック
 *
 * @author      A.Shima     2004/10/22
 * @package     grn.schedule
 */

require_once('fw/profile.csp');
require_once('schedule/resources.csp');

/**
 * @package     grn.schedule
 */
class GRN_Schedule_PersonalLogic extends CB_ModuleBase
{
    const PRE_SHOW_FULL_TITLE = 'show_full_title.';
    const PRE_SHOW_TODOS_KEY = 'show_todos.';
    const PRE_SHOW_EXPIRED_TODOS_KEY = 'show_expired_todos.';
    const PRE_SHOW_USER_TIMEZONE = 'show_users_timezone.';
    const NOT_SHOW_FULL_TITLE = 0;
    const NOT_DISPLAY_MEMBER_TIMEZONE = 0;

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct(GRN_SCHEDULE_MODULE_ID . '.personal');
    }

    private static $_instance = null;

    /**
     * @return GRN_Schedule_PersonalLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    function _getUserProfile($user)
    {
        $profile = $this->getUserProfile($user);

        return $profile;
    }

    /**
     * 予定メニューの取得
     *
     * @param   CB_User $user ユーザー
     *
     * @return  mixed           成功した場合はユーザーの配列のメニュー、失敗の場合はFALSE
     */
    function getMenus($user)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_MENUS, $value);
        $menus = [];
        if ($ret && is_string($value)) {
            $menus = mb_split("\r\n", $value);
        }
        // 空行の削除
        foreach ($menus as $key => $menu) {
            if (mb_strlen($menu) == 0) {
                unset($menus[$key]);
            }
        }

        $ret_menus = [];
        foreach ($menus as $menu) {
            $menu = cb_trim_unicode_separator($menu);
            $ret_menus[] = $menu;
        }

        return $ret_menus;
    }

    /**
     * メニューの設定
     *
     * @param   CB_User $user  ユーザー
     * @param   mixed   $menus メニューの内容(stringかarrayの配列）
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function setMenus($user, $menus)
    {
        // プロファイルの取得
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        $str_menus = null;
        if (is_array($menus)) {
            foreach ($menus as $menu) {
                // 空行を抜く
                $trim_menu = trim($menu);
                if (strlen($trim_menu) <= 0) {
                    continue;
                }
                $str_menus .= $trim_menu . "\r\n";
            }
        } else {
            $menus = explode("\n", $menus);
            $trim_menus = [];
            foreach ($menus as $key => $value) {
                $trim_value = trim($value);
                if (strlen($trim_value) > 0) {
                    $trim_menus[$key] = $trim_value;
                }
            }
            $menus = implode("\r\n", $trim_menus);
            $str_menus = $menus;
        }
        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_MENUS,
            $str_menus);
    }

    /**
     * 日表示画面での表示時間の取得
     *
     * @param   CB_User $user    ユーザー
     * @param   int     $sethour 開始時間(0～23）
     * @param   int     $endhour 終了時間（1～24)
     *
     * @return  boolean 成功した場合はTRUE、それ以外はFALSE
     */
    function getViewHour($user, & $sethour, & $endhour)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_SETHOUR, $value);
        if ( ! $ret) {
            $sethour = 8;
        } else {
            $sethour = intval($value);
        }
        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_ENDHOUR, $value);
        if ( ! $ret) {
            $endhour = 19;
        } else {
            $endhour = intval($value);
        }

        return true;
    }

    /**
     * 日表示画面での表示時間の設定
     *
     * @param   CB_User $user    ユーザー
     * @param   int     $sethour 開始時間(0～23）
     * @param   int     $endhour 終了時間（1～24)
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function setViewHour($user, $sethour, $endhour)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');
        $ret = grn_schedule_updateAttribute($profile, GRN_SCHEDULE_SETHOUR,
            $sethour);
        if ($ret === false) {
            return false;
        }

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_ENDHOUR,
            $endhour);
    }


    /**
     * 週の開始を月曜日にする設定
     *
     * @param   CB_User $user ユーザー
     *
     * @return  mixed           成功した場合は0～6（日曜～土曜）、それ以外はFALSE
     */
    function getCalendarWeekStart($user)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_WEEKSTART, $value);

        if ($ret === false) {
            $value = '0';
        }

        return $value;
    }

    /**
     * 月表示において週の開始を月曜日にする設定
     *
     * @param   CB_User $user  ユーザー
     * @param   int     $start 開始する曜日 0～6（日曜～土曜）
     *
     * @return  mixed       成功した場合はTRUE、それ以外はFALSE
     */
    function setCalendarWeekStart($user, $start)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_WEEKSTART,
            $start);
    }

    /**
     * 月表示で終了時間を表示するかどうか
     *
     * @param   CB_User $user ユーザー
     *
     * @return  mixed       成功した場合は、表示する 1 表示しない 0、それ以外はFALSE
     */
    function getShowEndTime($user)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_SHOW_ENDTIME, $value);
        if ($ret === false) {
            $value = '1';
        }

        return $value;
    }

    /**
     * 月表示で終了時間を表示するかどうか
     *
     * @param   CB_User $user ユーザー
     * @param   int     $flag 表示する場合は1、表示しない場合は0
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function setShowEndTime($user, $flag)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_SHOW_ENDTIME,
            $flag);
    }

    /**
     * using drag drop schedule
     * GTM-415
     */
    function getUsingDragDrop($user)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_USING_DRAGDROP, $value);

        if ($ret === false) {
            require_once('schedule/system_logic.csp');
            $system_logic = GRN_Schedule_SystemLogic::getInstance();
            if ($system_logic->getActivateDragDrop() == '1') {
                $value = '1';
            } else {
                $value = '0';
            }
        }

        return $value;
    }

    function setUsingDragDrop($user, $flag)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_USING_DRAGDROP, $flag);
    }
    // GTM-415

    /**
     * CSVの書き出し
     *
     * @param   object CB_CSVWriter     $writer
     * @param   object CB_User          $user
     * @param   CB_Date $setdate
     * @param   CB_Date $enddate
     *
     * @return  boolean
     */
    function exportEventsToCSV($writer, $user, $setdate, $enddate)
    {
        require_once('schedule/table.csp');
        // 終日
        $this->_exportAllDayEvents($writer, $user, $setdate, $enddate);

        // 時間あり
        $this->_exportNormalEvents($writer, $user, $setdate, $enddate);

        return true;
    }


    /**
     * 終日
     *
     * @access      private
     */
    function _exportAllDayEvents($writer, $user, $setdate, $enddate)
    {
        require_once('schedule/system_logic.csp');
        $systemLogic = \GRN_Schedule_SystemLogic::getInstance();

        $b_attendance_check = ($systemLogic->getAllowAttendanceCheck() == '1');

        $member_name = '';
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }
        $member_name = $user->get('foreign_key');

        $db = cb_get_app_db("schedule");

        $query = $db->format(
            "SELECT d.col_setdate, d.col_enddate, e.col_eventmenu, e.col_detail, e.col_memo "
            .
            "FROM tab_grn_schedule_eventmember AS m " .
            "LEFT JOIN tab_grn_schedule_eventdate AS d " .
            "ON m.col_event_type BETWEEN '32' AND '34' " .
            "AND m.col_user = '@S' " .
            "AND d.col_event = m.col_event " .
            "LEFT JOIN tab_grn_schedule_event AS e " .
            "ON m.col_event = e._id ",
            [$user->getOID()]
        );

        if ($b_attendance_check) {
            $query .= "LEFT JOIN tab_grn_schedule_event_attendance_status AS s "
                      .
                      "ON s.col_event = m.col_event AND s.col_user = m.col_user ";
        }

        $query .= $db->format(
            "WHERE ( d.col_setdate >= '@S' AND d.col_setdate <= '@S' ) ",
            [$setdate->format(), $enddate->format()]
        );

        if ($b_attendance_check) {
            $query .= "AND (s.col_status IS NULL OR s.col_status = '1') ";
        }

        $query .= "ORDER BY d.col_setdate, d.col_enddate, d.col_event";

        $result = $db->query($query);

        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $event = [];

            // The format of date and time is fixed.
            // It makes no difference which language/format a user/system administrator selects.
            // This specification could be changed someday.
            $date = new CB_Date();
            $date->parse($row['col_setdate']);

            $event['setdate'] = sprintf('%04d/%02d/%02d', $date->year,
                $date->month, $date->day);
            $event['settime'] = '';

            $date = new CB_Date();
            $date->parse($row['col_enddate']);
            $event['enddate'] = sprintf('%04d/%02d/%02d', $date->year,
                $date->month, $date->day);
            $event['endtime'] = '';

            $event['menu'] = $row['col_eventmenu'];
            $event['detail'] = $row['col_detail'];
            $event['memo'] = $row['col_memo'];

            $writer->writeLine($event);
        }

        $db->free_result($result);
    }

    /**
     * 時間ありの出力
     *
     * @access      private
     */
    function _exportNormalEvents($writer, $user, $setdate, $enddate)
    {
        require_once('schedule/system_logic.csp');
        $systemLogic = \GRN_Schedule_SystemLogic::getInstance();

        $b_attendance_check = ($systemLogic->getAllowAttendanceCheck() == '1');

        $member_name = '';
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }
        $member_name = $user->get('foreign_key');

        $db = cb_get_app_db("schedule");

        $query = $db->format(
            "SELECT d.col_setdatetime, d.col_enddatetime, e.col_event_type, e.col_eventmenu, e.col_detail, e.col_memo "
            .
            "FROM tab_grn_schedule_eventmember AS m " .
            "LEFT JOIN tab_grn_schedule_eventdatetime AS d " .
            "ON m.col_event_type_simple = '1' " .
            "AND m.col_user = '@S' " .
            "AND d.col_event = m.col_event " .
            "LEFT JOIN tab_grn_schedule_event AS e " .
            "ON m.col_event = e._id ",
            [$user->getOID()]
        );

        $attendance_check_condition = "";
        if ($b_attendance_check) {
            $query .= "LEFT JOIN tab_grn_schedule_event_attendance_status AS s "
                      .
                      "ON s.col_event = m.col_event AND s.col_user = m.col_user ";
            $attendance_check_condition
                = "AND ( s.col_status IS NULL OR s.col_status = '1' ) ";
        }

        $datetime = new CB_DateTime();
        $datetime->year = intval($setdate->year);
        $datetime->month = intval($setdate->month);
        $datetime->day = intval($setdate->day);
        $datetime->hour = 0;
        $datetime->minute = 0;
        $datetime->second = 0;

        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $ts1 = new CB_TimeStampEx($ts);
        $ts1->setDateTime($datetime);

        $datetime->year = intval($enddate->year);
        $datetime->month = intval($enddate->month);
        $datetime->day = intval($enddate->day);
        $ts2 = new CB_TimeStampEx($ts);
        $ts2->setDateTime($datetime);
        $ts2->add(new CB_DateTimeSpan(86400));

        $query .= $db->format(
            "WHERE ( d.col_setdatetime >= '@S' AND d.col_setdatetime < '@S' ) ",
            [$ts1->unix_ts, $ts2->unix_ts]
        );

        $query .= $attendance_check_condition;

        $query .= "ORDER BY d.col_setdatetime, d.col_enddatetime, d.col_event";

        $result = $db->query($query);

        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        while ($row = $db->fetch_assoc($result)) {
            $event = [];

            $ts = new CB_Timestamp();
            $ts->unix_ts = $row['col_setdatetime'];
            $timestamp = new CB_TimeStampEx($ts);

            // The format of date and time is fixed.
            // It makes no difference which language/format a user/system administrator selects.
            // This specification could be changed someday.
            $event['setdate'] = $timestamp->getDate();
            $event['setdate'] = sprintf('%04d/%02d/%02d',
                $event['setdate']->year, $event['setdate']->month,
                $event['setdate']->day);
            $event['settime'] = $timestamp->getTime();
            $event['settime'] = $event['settime']->format();

            $ts->unix_ts = $row['col_enddatetime'];
            $timestamp = new CB_TimeStampEx($ts);
            $event['enddate'] = $timestamp->getDate();
            $event['enddate'] = sprintf('%04d/%02d/%02d',
                $event['enddate']->year, $event['enddate']->month,
                $event['enddate']->day);
            if (($row['col_event_type'] & GRN_SCHEDULE_EVENT_TYPE_START)
                == GRN_SCHEDULE_EVENT_TYPE_START
            ) {
                $event['endtime'] = '';
            } else {
                $event['endtime'] = $timestamp->getTime();
                $event['endtime'] = $event['endtime']->format();
            }

            $event['menu'] = $row['col_eventmenu'];
            $event['detail'] = $row['col_detail'];
            $event['memo'] = $row['col_memo'];

            $writer->writeLine($event);
        }

        $db->free_result($result);
    }

    /**
     * イベントの確認
     *
     * @param CB_User $user
     * @param  string $eid
     * @param CB_Date $date
     *
     * @return bool|mixed
     */
    function existsEvent($user, $eid, $date = null)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('schedule');

        $_membertable = $tm->getTableInfo(GRN_EVENTMEMBER);

        // 自分の予定かどうかのチェック
        // 削除フラグたってたらオブジェクト取れないし対処すると普段のパフォーマンスが怖いのでこれは対処しない
        $memberrowset = new CB_RowSet($_membertable);
        $memberrowset->addCondition($memberrowset->queryf("col_user = '@S' AND col_event = '@S'",
            $user->getOID(), $eid));

        // 自分の予定ではない
        $member = $memberrowset->iterate();
        if ( ! $member) {
            $___ret = false;

            return $___ret;
        }

        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();

        $event = $app->getEvent($user, $eid, $date);

        return $event;
    }

    /**
     * メール転送の設定
     *
     * @param   boolean $forward_mail
     */
    function setForwardMail($user, $forward_mail)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_SCHEDULE_FORWARDMAIL,
            $forward_mail);
    }

    /**
     * メール転送の取得
     *
     * @return  boolean     $forward_mail
     */
    function getForwardMail($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_FORWARDMAIL, $value);
        if ($ret === false) {
            $value = false;
        }

        return $value;
    }

    /**
     * 施設の承認依頼通知の転送の設定
     *
     * @param   boolean $forward_facility_rely_mail
     */
    function setForwardFacilityRelyMail($user, $forward_facility_rely_mail)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_FORWARDFACILITYRELYMAIL, $forward_facility_rely_mail);
    }

    /**
     * 施設の承認依頼通知の転送の取得
     *
     * @return  boolean     $forward_facility_rely_mail
     */
    function getForwardFacilityRelyMail($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_FORWARDFACILITYRELYMAIL,
            $value);
        if ($ret === false) {
            $value = false;
        }

        return $value;
    }

    /**
     * メール転送の転送タイプの設定
     *
     * @param   int
     */
    function setForwardMailType($user, $type)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_FORWARDMAIL_TYPE, $type);
    }

    /**
     * メール転送の転送タイプの取得
     *
     * @return  int
     */
    function getForwardMailType($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_FORWARDMAIL_TYPE, $value);
        if ($ret === false) {
            $value = GRN_SCHD_FORWARD_TYPE_MAIL;
        }

        return $value;
    }

    /**
     * メール転送のメールアドレスの設定
     *
     * @param   string $mail_address
     */
    function setForwardMailAddress($user, $mail_address)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_FORWARDMAIL_ADDRESS, $mail_address);
    }

    /**
     * メール転送のメールアドレスの取得
     *
     * @return  string
     */
    function getForwardMailAddress($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_FORWARDMAIL_ADDRESS,
            $value);
        if ($ret === false) {
            $value = '';
        }

        return $value;
    }


    /**
     * シンクのシンクの開始期間
     */
    function getSyncStartLimit($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_SYNC_STARTLIMIT, $value);
        if ($ret === false) {
            $value = 12;
        }

        return intval($value);
    }

    function setSyncStartLimit($user, $startlimit)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_SYNC_STARTLIMIT, $startlimit);
    }

    /**
     * シンクのシンクの開始期間
     */
    function getSyncEndLimit($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_SCHEDULE_SYNC_ENDLIMIT, $value);
        if ($ret === false) {
            $value = 12;
        }

        return intval($value);
    }

    function setSyncEndLimit($user, $endlimit)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_SCHEDULE_SYNC_ENDLIMIT, $endlimit);
    }


    /**
     * 個人日表示ポートレットの翌日の予定を表示するかどうかの設定
     *
     * @param   CB_User $user ユーザー
     *
     * @return  mixed           成功した場合はユーザーの配列のメニュー、失敗の場合はFALSE
     */
    function getNextEvents($user)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute('nextevent', $value);
        if ($ret === false) {
            return 'on';
        }

        return $value;
    }

    /**
     * 個人日表示ポートレットの翌日の予定を表示するかどうかの設定
     *
     * @param   CB_User $user  ユーザー
     * @param   string  $value メニューの内容(stringかarrayの配列）
     *
     * @return  boolean     成功した場合はTRUE、それ以外はFALSE
     */
    function setNextEvents($user, $value)
    {
        // プロファイルの取得
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, 'nextevent', $value);
    }

    /* GRN2-1933
     * show member timezone in group day
     */
    function getDisplayMemberTimezone($user)
    {
        $profile = $this->_getUserProfile($user);
        $value = null;
        $ret = $profile->getAttribute('display_member_timezone', $value);
        if ($ret === false) {
            return 0;
        }

        return $value;
    }

    function setDisplayMemberTimezone($user, $member_tz)
    {
        $profile = $this->_getUserProfile($user);
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, 'display_member_timezone',
            $member_tz);
    }

    //GRN2-2286
    public function setShowHideAbsentSchedule($user, $status, $page)
    {
        $profile = $this->_getUserProfile($user);
        require_once('schedule/utility.csp');
        $name_attribute = null;
        if ($page == 'group_week') {
            $name_attribute = 'show_absent_schedule_group_week';
        }
        if ($page == 'portlet_group_week') {
            $name_attribute = 'show_absent_schedule_portlet_group_week';
        }

        if ($page == 'group_day') {
            $name_attribute = 'show_absent_schedule_group_day';
        }

        if ($page == 'portlet_group_day') {
            $name_attribute = 'show_absent_schedule_portlet_group_day';
        }

        if ($page == 'personal_day') {
            $name_attribute = 'show_absent_schedule_personal_day';
        }

        if ($page == 'portlet_personal_day') {
            $name_attribute = 'show_absent_schedule_portlet_personal_day';
        }

        if ($page == 'personal_week') {
            $name_attribute = 'show_absent_schedule_personal_week';
        }

        if ($page == 'portlet_personal_week') {
            $name_attribute = 'show_absent_schedule_portlet_personal_week';
        }

        if ($page == 'personal_month') {
            $name_attribute = 'show_absent_schedule_personal_month';
        }

        if ($page == 'portlet_personal_month') {
            $name_attribute = 'show_absent_schedule_portlet_personal_month';
        }

        if ( ! is_null($name_attribute)) {
            return grn_schedule_updateAttribute($profile, $name_attribute,
                $status);
        }

        return;
    }

    public function getShowHideAbsentSchedule($user, $page)
    {
        $profile = $this->_getUserProfile($user);
        $value = null;
        if ($page == 'group_week') {
            $name_attribute = 'show_absent_schedule_group_week';
        }

        if ($page == 'portlet_group_week') {
            $name_attribute = 'show_absent_schedule_portlet_group_week';
        }

        if ($page == 'portlet_group_day') {
            $name_attribute = 'show_absent_schedule_portlet_group_day';
        }

        if ($page == 'group_day') {
            $name_attribute = 'show_absent_schedule_group_day';
        }

        if ($page == 'personal_day') {
            $name_attribute = 'show_absent_schedule_personal_day';
        }

        if ($page == 'portlet_personal_day') {
            $name_attribute = 'show_absent_schedule_portlet_personal_day';
        }

        if ($page == 'personal_week') {
            $name_attribute = 'show_absent_schedule_personal_week';
        }

        if ($page == 'porlet_personal_week') {
            $name_attribute = 'show_absent_schedule_portlet_personal_week';
        }

        if ($page == 'personal_month') {
            $name_attribute = 'show_absent_schedule_personal_month';
        }

        if ($page == 'portlet_personal_month') {
            $name_attribute = 'show_absent_schedule_portlet_personal_month';
        }
        $ret = $profile->getAttribute($name_attribute, $value);
        if ($ret === false) {
            return 1;
        }

        return $value;
    }
    //GRN2-2286

    /*
     * show or hide users timezone
     * GRN2-2718
     */
    function getShowUsersTimezone(CB_User $user, $page)
    {
        return $this->selectDisplayStatus($user, $page,
            self::PRE_SHOW_USER_TIMEZONE, 0);
    }

    function setShowUsersTimezone(CB_User $user, $show_users_timezone, $page)
    {
        return $this->updateDisplayStatus($user, $show_users_timezone, $page,
            self::PRE_SHOW_USER_TIMEZONE);
    }

    /**
     * show full or short title of schedule
     * GRN2-2287
     *
     * @param CB_User $user
     * @param string  $page
     * @param int     $defaultValue
     *
     * @return int
     */
    function getShowFullTitle(CB_User $user, $page, $defaultValue = 1)
    {
        return $this->selectDisplayStatus($user, $page,
            self::PRE_SHOW_FULL_TITLE, $defaultValue);
    }

    function setShowFullTitle(CB_User $user, $show_full_title, $page)
    {
        return $this->updateDisplayStatus($user, $show_full_title, $page,
            self::PRE_SHOW_FULL_TITLE);
    }

    /**
     * Get whether to show todos.
     *
     * @param CB_User $user
     * @param string  $page
     *
     * @return int
     */

    public function getShowToDos(CB_User $user, $page)
    {
        return $this->selectDisplayStatus($user, $page,
            self::PRE_SHOW_TODOS_KEY);
    }

    /**
     * Set whether to show todos.
     *
     * @param CB_User $user
     * @param int     $value
     * @param string  $page
     *
     * @return bool
     */
    public function setShowToDos(CB_User $user, $show_todo, $page)
    {
        return $this->updateDisplayStatus($user, $show_todo, $page,
            self::PRE_SHOW_TODOS_KEY);
    }

    public function getLoginUser()
    {
        global $G_container_base;

        return $G_container_base->getInstance("uum")->getLoginUser();
    }

    /**
     * Get whether to show expired todos.
     *
     * @param CB_User $user
     * @param string  $page
     *
     * @return int
     */

    public function getShowExpiredToDos(CB_User $user, $page)
    {
        return $this->selectDisplayStatus($user, $page,
            self::PRE_SHOW_EXPIRED_TODOS_KEY);
    }

    /**
     * Set whether to show expired todos.
     *
     * @param CB_User $user
     * @param int     $value
     * @param string  $page
     *
     * @return bool
     */
    public function setShowExpiredToDos(CB_User $user, $show_todo, $page)
    {
        return $this->updateDisplayStatus($user, $show_todo, $page,
            self::PRE_SHOW_EXPIRED_TODOS_KEY);
    }

    private function updateDisplayStatus(
        CB_User $user,
        $show_something,
        $page,
        $db_key
    ) {
        $value = $show_something ? 1 : 0;
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($this->_getUserProfile($user),
            $db_key . $page, $show_something);
    }

    private function selectDisplayStatus(
        CB_User $user,
        $page,
        $dbkey,
        $default_return = 1
    ) {
        return $this->_getUserProfile($user)->getAttribute($dbkey . $page,
            $value) === false ? $default_return : $value;
    }

}

