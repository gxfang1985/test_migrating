<?php

use grn\schedule\bean\AttendanceStatus;
use grn\schedule\AttendanceStatusLogic;
use grn\schedule\FacilityApprovalLogic;

/**
 * スケジューラーの通常予定を管理するメインのロジック
 *
 * @author      A.Shima     2004/10/25
 * @package     grn.schedule
 */

require_once('schedule/event_base_logic.csp');

/**
 * @package     grn.schedule
 */
class GRN_Schedule_NormalEventLogic extends GRN_Schedule_EventBaseLogic
{

    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct();
    }

    private static $_instance = null;

    /**
     * @return GRN_Schedule_NormalEventLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * イベントの取得
     *
     * @param   string  $eid       イベントID
     * @param   CB_Date $date      イベントの日付
     * @param   int     $lock_mode DBのロックモード
     * @param   int     $get_mode
     *
     * @return  mixed       成功した場合はイベント、それ以外はFALSE
     */
    function getEvent(
        $eid,
        $date = null,
        $lock_mode = CB_DATABASE_SHARED_LOCK,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_OBJECT
    ) {
        $eventtable = $this->_getEventTable();
        $eventrow = $eventtable->getRow($eid);
        if ( ! $eventrow) {
            $___ret = false;

            return $___ret;
        }

        // イベントタイプが同じかどうか
        $event_type = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_NORMAL) == 0) {
            $___ret = false;

            return $___ret;
        }

        // 入れ物準備
        $event = new GRN_Schedule_NormalEvent();

        // データの中身の取得
        $this->_getEventData($eventrow, $event);

        // 時刻データの取得
        if ( ! $this->_getEventDate($eventrow, $event, $date)) {
            $___ret = false;

            return $___ret;
        }

        if ( ! $this->_getEventMember($event, $lock_mode, $get_mode)) {
            $___ret = false;

            return $___ret;
        }

        // 通知先の取得
        if ( ! $this->_getEventNotifyAddress($event, $lock_mode, $get_mode)) {
            $___ret = false;

            return $___ret;
        }

        return $event;
    }

    /**
     * @access private
     */
    function _getEventDate($eventrow, $event, $date)
    {
        $event_type = intval($eventrow->get(GRN_SCHEDULE_EVENT_TYPE));

        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            $datetable = $this->_getDateTable();
            $rowset = new CB_RowSet($datetable);
            $rowset->addCondition($rowset->queryf("col_event = '@S'",
                $event->id));
            $daterow = $rowset->iterate();
            if (is_null($daterow)) {
                return false;
            }
//                cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );

            $event->setdatetime = $daterow->get(GRN_SCHEDULE_SETDATE);
            $event->enddatetime = $daterow->get(GRN_SCHEDULE_ENDDATE);

        } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_START)
                  == GRN_SCHEDULE_EVENT_TYPE_START
        ) {
            $datetimetable = $this->_getDateTimeTable();
            $rowset = new CB_RowSet($datetimetable);
            $rowset->addCondition($rowset->queryf("col_event = '@S'",
                $event->id));
            $daterow = $rowset->iterate();
            if (is_null($daterow)) {
                return false;
            }
//                cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );

            $timestamp
                = new CB_TimeStampEx($daterow->get(GRN_SCHEDULE_SETDATETIME));
            $event->setdatetime = $timestamp->getDateTime();

        } else {
            $datetimetable = $this->_getDateTimeTable();
            $rowset = new CB_RowSet($datetimetable);
            $rowset->addCondition($rowset->queryf("col_event = '@S'",
                $event->id));
            $daterow = $rowset->iterate();
            if (is_null($daterow)) {
                return false;
            }
//                cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );

            $timestamp
                = new CB_TimeStampEx($daterow->get(GRN_SCHEDULE_SETDATETIME));
            $event->setdatetime = $timestamp->getDateTime();
            $timestamp
                = new CB_TimeStampEx($daterow->get(GRN_SCHEDULE_ENDDATETIME));
            $event->enddatetime = $timestamp->getDateTime();
        }

        // タイムゾーン
        $event->timezone = $daterow->get(GRN_SCHEDULE_TIMEZONE);
        $event->end_timezone = $daterow->get(GRN_SCHEDULE_END_TIMEZONE)
            ?: $event->timezone;

        if ( ! is_null($date)) {
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
                == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
            ) {
                // 時間のチェック
                $dateex = new CB_DateEx($date);
                if (($dateex->compare($event->setdatetime) < 0)
                    || ($dateex->compare($event->enddatetime) > 0)
                ) {
                    return false;
                }
//                    cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );
            } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_START)
                      == GRN_SCHEDULE_EVENT_TYPE_START
            ) {
                // 時間のチェック
                $dateex = $event->setdatetime->getDate();
                if ($dateex->compare($date) != 0) {
                    return false;
                }
//                    cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );
            } else {

                // 時間のチェック
                $dateex1 = $event->setdatetime->getDate();
                $dateex2 = $event->enddatetime->getDate();
                if (($dateex1->compare($date) > 0)
                    || ($dateex2->compare($date) < 0)
                ) {
                    return false;
                }
//                    cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );

            }
        }

        return true;
    }

    /**
     * 日付の設定
     *
     * @access private
     */
    function _setEventDate($row, $eventrow, $event)
    {
        $row->set(GRN_SCHEDULE_EVENT, $eventrow);

        $event_type = $event->getEventType();
        // 日付の設定

        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $current_timezone = CB_I18N::getInstance()->getCurrentTimezone();
            $user_setdatetime
                = CB_I18N::translateDatetimeTimezone($event->setdatetime,
                $event->timezone, $current_timezone);
            $user_enddatetime
                = CB_I18N::translateDatetimeTimezone($event->enddatetime,
                $event->end_timezone, $current_timezone);
            $this->_lockFacilites($event->facilities);
            if (($faid = $this->_checkConfilictFacilites($eventrow->getOID(),
                    $user_setdatetime, $user_enddatetime, $event->facilities))
                != '0'
            ) {
                require_once('schedule/facility_system_logic.csp');
                $facility_logic = GRN_Facility_SystemLogic::getInstance();
                $facility = $facility_logic->getFacility($faid);
                cb_throw_error(E_GRN_FCLT_CONFLICT_DATETIME,
                    ['facility' => $facility->get('name')], null,
                    ['facility' => $facility->get('name')]);
            }
        }

        if (is_null($event->timezone)) {
            $I18N = CB_I18N::getInstance();
            $event->timezone = $I18N->getCurrentTimezone();
        }
        if (is_null($event->end_timezone)) {
            $event->end_timezone = $event->timezone;
        }

        // 終日
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            $row->set(GRN_SCHEDULE_SETDATE, $event->setdatetime);
            $row->set(GRN_SCHEDULE_ENDDATE, $event->enddatetime);
        } // 開始時間のみ
        elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_START)
                == GRN_SCHEDULE_EVENT_TYPE_START
        ) {
            $timestamp = new CB_TimeStampEx($this->_ts);
            $timestamp->setDateTime($event->setdatetime, $event->timezone);
            $row->set(GRN_SCHEDULE_SETDATETIME, $timestamp);
            $row->set(GRN_SCHEDULE_ENDDATETIME, $timestamp);
        } else {
            $timestamp = new CB_TimeStampEx($this->_ts);
            $timestamp->setDateTime($event->setdatetime, $event->timezone);
            $row->set(GRN_SCHEDULE_SETDATETIME, clone $timestamp);
            $timestamp->setDateTime($event->enddatetime, $event->end_timezone);
            $row->set(GRN_SCHEDULE_ENDDATETIME, clone $timestamp);
        }

        $row->set(GRN_SCHEDULE_TIMEZONE, $event->timezone);
        $row->set(GRN_SCHEDULE_END_TIMEZONE, $event->end_timezone);
        $row->set(GRN_SCHEDULE_EVENT_TYPE, $event_type);

//        $row->registerNow();

        return true;
    }

    /**
     * 予定の登録
     *
     * @param   object GRN_Schedule_EventBase $event  イベント
     *
     * @return  mixed       成功した場合はイベントID、それ以外はFALSE。
     */
    function entryEvent($event)
    {
        $eid = parent::entryEvent($event);

        // add status for register in case 
        $this->_entryAttendanceStatusForRegister($event);

        // add using purpose if event uses appoval facility
        $this->_entryUsingPurposeForApprovalFacility($event);

        return $eid;
    }

    // GTM-1676
    function _entryUsingPurposeForApprovalFacility($event)
    {
        if (strlen($event->usingPurpose) > 0) {
            $facilityApprovalLogic = new FacilityApprovalLogic();
            $facilityApprovalLogic->setFacilityUsingPurpose($event->id,
                $event->usingPurpose);
        }
    }
    // end GTM-1676

    // GTM-1622
    function _entryAttendanceStatusForRegister($event)
    {
        // check login user in attendee list
        $login = cb_get_login_user();
        $login_id = $login->getOID();
        $isInAttendeeList = false;
        if (is_array($event->users)) {
            foreach ($event->users as $user) {
                if ($user->getOID() === $login_id) {
                    $isInAttendeeList = true;
                    break;
                }
            }
        }

        $attendanceStatusLogic = new AttendanceStatusLogic();
        // in case that register in attendees list, set status of register is [Attend]
        if ($isInAttendeeList
            && $attendanceStatusLogic->isEnableAttendanceCheck()
            && $event->isAttendanceCheckEvent()
        ) {
            $attendanceStatus = new AttendanceStatus();
            $attendanceStatus->setEvent($event);
            $attendanceStatus->setUserId($login_id);
            $attendanceStatus->setStatus(AttendanceStatus::STATUS_ATTENDANT);
            $attendanceStatus->setCreateTime(time());
            $attendanceStatusLogic->addAttendanceStatus($attendanceStatus);
        }
    }
}


