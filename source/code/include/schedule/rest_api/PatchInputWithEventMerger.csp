<?php
declare(strict_types=1);

namespace grn\schedule\rest_api;

use grn\schedule\api\model\DateTime;
use grn\schedule\api\model\Event;

class PatchInputWithEventMerger
{
    /**
     * @param array $input
     * @param array $event_data
     *
     * @return array
     */
    public static function merge(array $input, array $event_data): array
    {
        $event_data = self::restoreStartAndEndFromOriginalTimezone($event_data);

        foreach ($input as $prop_name => $prop_value) {
            switch ($prop_name) {
                case Event::EVENT_TYPE:
                case Event::EVENT_ID:
                case Event::COMPANY_INFO:
                case Event::VISIBILITY_TYPE:
                case Event::WATCHERS:
                case Event::REPEAT_INFO:
                    break;
                case Event::START:
                case Event::END:
                    $event_data[$prop_name] = self::mergeObject($event_data[$prop_name] ?? [], $prop_value);
                    break;
                case Event::ATTENDEES:
                case Event::FACILITIES:
                    $event_data[$prop_name] = is_null($prop_value) ? [] : $prop_value;
                    break;
                case EVENT::ADDITIONAL_ITEM:
                    $event_data[$prop_name] = self::mergeAdditionalItems($event_data[$prop_name], $prop_value);
                    break;
                default:
                    $event_data[$prop_name] = $prop_value;
            }
        }

        return $event_data;
    }

    /**
     * @param array $event_data
     *
     * @return array
     */
    public static function restoreStartAndEndFromOriginalTimezone(array $event_data): array
    {
        if (isset($event_data[Event::START])) {
            $event_data[Event::START] = self::convertTimeZone(
                $event_data[Event::START],
                $event_data[Event::ORIGINAL_START_TIMEZONE]
            );
        }

        if (isset($event_data[Event::END])) {
            $event_data[Event::END] = self::convertTimeZone(
                $event_data[Event::END],
                $event_data[Event::ORIGINAL_END_TIMEZONE]
            );
        }

        unset($event_data[Event::ORIGINAL_START_TIMEZONE]);
        unset($event_data[Event::ORIGINAL_END_TIMEZONE]);

        return $event_data;
    }

    /**
     * @param array  $arr_datetime
     * @param string $timezone
     *
     * @return array
     */
    private static function convertTimeZone(array $arr_datetime, string $timezone): array
    {
        $dt = new DateTime(
            self::convertTimeZoneOffset($arr_datetime[DateTime::DATETIME], $timezone),
            $timezone
        );

        return $dt->toArray();
    }

    /**
     * @param string $iso8601_datetime
     * @param string $timezone
     *
     * @return string
     */
    private static function convertTimeZoneOffset(string $iso8601_datetime, string $timezone): string
    {
        $ts = cb_timestring_to_timestamp($iso8601_datetime);

        require_once('util_api/util.csp');

        return grn_util_api_iso8601(\CB_TimeStamp::valueOf($ts), false, $timezone);
    }

    /**
     * @param $event_prop_value
     * @param $input_prop_value
     *
     * @return array
     */
    public static function mergeObject($event_prop_value, $input_prop_value)
    {
        if (is_array($input_prop_value)) {
            return array_merge($event_prop_value, $input_prop_value);
        } else {
            return $input_prop_value;
        }
    }

    /**
     * @param array $event_additional_item
     * @param string|boolean|array|null $input_additional_item
     *
     * @return string|boolean|array|null
     */
    public static function mergeAdditionalItems($event_additional_item, $input_additional_item)
    {
        if ($input_additional_item === null) {
            return self::deleteAdditionalItemsValue($event_additional_item);
        }

        if ( ! is_array($input_additional_item)) {
            return $input_additional_item;
        }

        if ( ! array_key_exists(Event::ADDITIONAL_ITEM_NAME, $input_additional_item)) {
            return $event_additional_item;
        }

        $item = $input_additional_item[Event::ADDITIONAL_ITEM_NAME];
        if ($item === null) {
            return self::deleteAdditionalItemsValue($event_additional_item);
        }

        if ( ! is_array($item)) {
            return $input_additional_item;
        }

        if ( ! array_key_exists(Event::ADDITIONAL_ITEM_VALUE, $item)) {
            return $event_additional_item;
        }

        if ($item[Event::ADDITIONAL_ITEM_VALUE] === null) {
            return self::deleteAdditionalItemsValue($event_additional_item);
        }

        return $input_additional_item;
    }

    /**
     * @param array $additional_item
     *
     * @return array
     */
    private static function deleteAdditionalItemsValue($additional_item): array
    {
        $additional_item[Event::ADDITIONAL_ITEM_NAME][Event::ADDITIONAL_ITEM_VALUE] = '';
        return $additional_item;
    }
}
