<?php
declare(strict_types=1);

namespace grn\schedule\rest_api\event_param_factory;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;
use grn\schedule\api\model\Member;
use grn\schedule\rest_api\EventCheckUtil;


class MemberFactory extends MemberFactoryAbstract
{
    private const TYPE = 'type';
    private const MEMBER_TYPE_ORGANIZATION = Member::MEMBER_TYPE_ORGANIZATION;
    private const MEMBER_TYPE_USER = Member::MEMBER_TYPE_USER;
    private const MEMBER_TYPE_ROLE = Member::MEMBER_TYPE_ROLE;
    private const ALLOWED_TYPES
        = [
            self::MEMBER_TYPE_USER,
            self::MEMBER_TYPE_ORGANIZATION,
            self::MEMBER_TYPE_ROLE,
        ];

    private $type;

    /**
     * @return Member
     * @throws ValidationFailedException
     */
    public function build()
    {
        $this->type = $this->input[self::TYPE] ?? '';

        if ( ! in_array($this->type, self::ALLOWED_TYPES)) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, self::TYPE);
        }

        if (array_key_exists(self::ID, $this->input)) {
            return $this->buildFromId();
        }

        if (array_key_exists(self::CODE, $this->input)) {
            return $this->buildFromCode();
        }

        throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, self::ID);
    }

    /**
     * @return Member
     * @throws ValidationFailedException
     */
    private function buildFromId(): Member
    {
        $id_string = $this->getValueAsString(self::ID);
        if ($this->isIdExist($id_string)) {
            return new Member($this->addPrefix($id_string));
        }
        throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, self::ID);
    }

    /**
     * @param string $id
     *
     * @return bool
     */
    protected function isIdExist(string $id): bool
    {
        return EventCheckUtil::isIdExist($id, $this->type);
    }

    /**
     * @return Member
     * @throws ValidationFailedException
     */
    private function buildFromCode(): Member
    {
        $code_string = $this->getValueAsString(self::CODE);
        $id_string = $this->convertAttendeeCodeToId($code_string);
        if ($id_string === '') {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, self::CODE);
        }

        return new Member($this->addPrefix($id_string));
    }

    /**
     * @param string $attendee_code
     *
     * @return string
     */
    protected function convertAttendeeCodeToId(string $attendee_code): string
    {
        $uum = cb_lwc_uum();
        switch ($this->type) {
            case self::MEMBER_TYPE_USER:
                $attendee = $uum->getUserByForeignKey($attendee_code);
                break;
            case self::MEMBER_TYPE_ORGANIZATION:
                $attendee = $uum->getGroupByForeignKey($attendee_code);
                break;
            case self::MEMBER_TYPE_ROLE:
                $attendee = $uum->getStaticRoleByForeignKey($attendee_code);
                break;
            default:
                $attendee = false;
        }
        if ($attendee) {
            return (string)$attendee->getOID();
        }

        return '';
    }

    /**
     * @param string $attendee_id
     *
     * @return string
     */
    private function addPrefix(string $attendee_id): string
    {
        if ($this->type == self::MEMBER_TYPE_ORGANIZATION) {
            return 'g' . $attendee_id;
        }

        if ($this->type == self::MEMBER_TYPE_ROLE) {
            return 'r' . $attendee_id;
        }

        return $attendee_id;
    }
}
