<?php
declare(strict_types=1);

namespace grn\schedule\rest_api\event_param_factory;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;
use grn\schedule\api\model\Facility;
use grn\schedule\rest_api\EventCheckUtil;

require_once('schedule/facility_system_logic.csp');

class FacilityFactory extends MemberFactoryAbstract
{
    /**
     * @return Facility
     * @throws ValidationFailedException
     */
    public function build()
    {
        if (array_key_exists(self::ID, $this->input)) {
            return $this->buildFromId();
        }

        if (array_key_exists(self::CODE, $this->input)) {
            return $this->buildFromCode();
        }

        throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, self::ID);
    }

    /**
     * @return Facility
     * @throws ValidationFailedException
     */
    private function buildFromId(): Facility
    {
        $id_string = $this->getValueAsString(self::ID);
        if ($this->isIdExist($id_string)) {
            return new Facility($id_string);
        }
        throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, self::ID);
    }

    /**
     * @param string $id
     *
     * @return bool
     */
    protected function isIdExist(string $id): bool
    {
        return EventCheckUtil::isIdExist($id, EventCheckUtil::TYPE_FACILITY);
    }

    /**
     * @return Facility
     * @throws ValidationFailedException
     */
    private function buildFromCode()
    {
        $code_string = $this->getValueAsString(self::CODE);

        return new Facility($this->convertCodeToId($code_string));
    }


    /**
     * @param string $code_string
     *
     * @return string
     * @throws ValidationFailedException
     */
    protected function convertCodeToId($code_string): string
    {
        $facilities = $this->getFacilitiesInfo($code_string);

        if (count($facilities) === 1) {
            $id = (string)array_values($facilities)[0]["_id"];

            return $id;
        }

        throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, self::CODE);
    }

    /**
     * @param $code_string
     *
     * @return array
     */
    protected function getFacilitiesInfo($code_string): array
    {
        $facility_logic = \GRN_Facility_SystemLogic::getInstance();
        $facilities = $facility_logic->getFacilitiesByForeignKeys([$code_string]);

        return $facilities;
    }
}
