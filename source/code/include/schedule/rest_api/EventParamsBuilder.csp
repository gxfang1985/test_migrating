<?php
declare(strict_types=1);

namespace grn\schedule\rest_api;

use grn\api\exception\ErrorCode;
use grn\api\exception\validation\ValidationFailedException;
use grn\schedule\api\model\DateTime;
use grn\schedule\rest_api\event_param_factory\MemberFactory;
use grn\schedule\rest_api\event_param_factory\FacilityFactory;
use grn\schedule\api\model\Event;
use grn\schedule\api\model\RepeatInfo;

class EventParamsBuilder
{
    private $params = [];
    private $input = [];
    private $data = [];

    /**
     * EventParamsBuilder constructor.
     *
     * @param array $input
     * @param array $data Data which is created from an existing event. The format is the same as $input.
     */
    public function __construct(array $input, array $data = [])
    {
        $this->input = $input;
        $this->data = $data;
    }

    /**
     * @return array
     * @throws ValidationFailedException
     */
    public function buildPost(): array
    {
        $event_type = $this->getValue(Event::EVENT_TYPE);
        $this->setEventType($event_type);
        if ($event_type === Event::EVENT_TYPE_REGULAR) {
            $this->buildPostForRegular();
        } elseif ($event_type === Event::EVENT_TYPE_ALL_DAY) {
            $this->buildPostForAllDay();
        }
        return $this->params;
    }

    /**
     * @throws ValidationFailedException
     */
    private function buildPostForRegular()
    {
        $this->setStart();
        $this->setEnd();
        $this->setEventMenu($this->getValue(Event::EVENT_MENU, ''));
        $this->setTitle($this->getValue(Event::SUBJECT, ''));
        $this->setAttendees($this->getValue(Event::ATTENDEES, []));
        $this->setFacilities($this->getValue(Event::FACILITIES, []));
        $this->setFacilityUsingPurpose($this->getValue(Event::FACILITY_USING_PURPOSE, ''));
        $this->setCompanyInfo($this->getValue(Event::COMPANY_INFO, []));
        $this->setNotes($this->getValue(Event::NOTES, ''));
        $this->setWatchers($this->getValue(Event::WATCHERS, []));
        $this->setAdditionalItems();
        $this->setVisibilityType();
        $this->setUseAttendanceCheck();
        $this->setAttachments($this->getValue(Event::ATTACHMENTS, []));
    }

    /**
     * @throws ValidationFailedException
     */
    private function buildPostForAllDay()
    {
        $this->setStart();
        $this->setEnd();
        $this->setEventMenu($this->getValue(Event::EVENT_MENU, ''));
        $this->setTitle($this->getValue(Event::SUBJECT, ''));
        $this->setAttendees($this->getValue(Event::ATTENDEES, []));
        $this->setCompanyInfo($this->getValue(Event::COMPANY_INFO, []));
        $this->setNotes($this->getValue(Event::NOTES, ''));
        $this->setAdditionalItems();
        $this->setAttachments($this->getValue(Event::ATTACHMENTS, []));
    }

    /**
     * @return array
     * @throws ValidationFailedException
     */
    public function buildPatch(): array
    {
        $event_type = $this->getValue(Event::EVENT_TYPE);
        $this->setEventType($event_type);
        if ($event_type === Event::EVENT_TYPE_REGULAR) {
            $this->buildPatchForRegular();
        } elseif ($event_type === Event::EVENT_TYPE_ALL_DAY) {
            $this->buildPatchForAllDay();
        } elseif ($event_type === Event::EVENT_TYPE_REPEATING) {
            $this->buildPatchForRepeating();
        }

        return $this->params;
    }

    /**
     * @throws ValidationFailedException
     */
    private function buildPatchForRegular()
    {
        $this->setEventId();
        $this->setStart();
        $this->setEnd();
        $this->setEventMenu($this->getValue(Event::EVENT_MENU, ''));
        $this->setTitle($this->getValue(Event::SUBJECT, ''));
        $this->setAttendees($this->getValue(Event::ATTENDEES, []));
        $this->setFacilities($this->getValue(Event::FACILITIES, []));
        $this->setFacilityUsingPurpose($this->getValue(Event::FACILITY_USING_PURPOSE, ''));
        $this->setCompanyInfo($this->getValue(Event::COMPANY_INFO, []));
        $this->setNotes($this->getValue(Event::NOTES, ''));
        $this->setWatchers($this->getValue(Event::WATCHERS, []));
        $this->setAdditionalItems();
        $this->setVisibilityType();
    }

    /**
     * @throws ValidationFailedException
     */
    private function buildPatchForAllDay()
    {
        $this->setEventId();
        $this->setStart();
        $this->setEnd();
        $this->setEventMenu($this->getValue(Event::EVENT_MENU, ''));
        $this->setTitle($this->getValue(Event::SUBJECT, ''));
        $this->setAttendees($this->getValue(Event::ATTENDEES, []));
        $this->setCompanyInfo($this->getValue(Event::COMPANY_INFO, []));
        $this->setNotes($this->getValue(Event::NOTES, ''));
        $this->setAdditionalItems();
    }

    /**
     * @throws ValidationFailedException
     */
    private function buildPatchForRepeating()
    {
        $this->setEventId();
        $this->setEventMenu($this->getValue(Event::EVENT_MENU, ''));
        $this->setTitle($this->getValue(Event::SUBJECT, ''));
        $this->setAttendees($this->getValue(Event::ATTENDEES, []));
        $this->setFacilities($this->getValue(Event::FACILITIES, []));
        $this->setFacilityUsingPurpose($this->getValue(Event::FACILITY_USING_PURPOSE, ''));
        $this->setCompanyInfo($this->getValue(Event::COMPANY_INFO, []));
        $this->setNotes($this->getValue(Event::NOTES, ''));
        $this->setWatchers($this->getValue(Event::WATCHERS, []));
        $this->setAdditionalItems();
        $this->setVisibilityType();
        $this->setRepeatInfo();
    }


    /**
     * @param string $param
     */
    public function setEventType(string $param)
    {
        $event_type_map = [
            Event::EVENT_TYPE_REGULAR   => 'normal',
            Event::EVENT_TYPE_REPEATING => 'repeat',
            Event::EVENT_TYPE_TEMPORARY => 'temporary',
            Event::EVENT_TYPE_ALL_DAY   => 'banner',
        ];

        switch ($param) {
            case Event::EVENT_TYPE_REPEATING:
                $this->params['RP'] = '1';
                break;
            case Event::EVENT_TYPE_ALL_DAY:
                $this->params['BN'] = '1';
                break;
        }

        $this->params['event_type'] = $event_type_map[$param];
    }

    /**
     * @return bool
     */
    private function isStartOnly(): bool
    {
        if ($this->isEventTypeAllDay()) {
            return false;
        }

        return $this->convertToBool($this->getValue(Event::START_ONLY, false));
    }

    /**
     * @return bool
     */
    private function isAllDay(): bool
    {
        if ($this->isEventTypeAllDay()) {
            return true;
        }

        return $this->convertToBool($this->getValue(Event::ALL_DAY, false));
    }

    /**
     * @return bool
     */
    private function isEventTypeAllDay(): bool
    {
        return $this->getValue(Event::EVENT_TYPE) === Event::EVENT_TYPE_ALL_DAY;
    }

    /**
     * @param array $attendees
     *
     * @throws ValidationFailedException
     */
    public function setAttendees(array $attendees)
    {
        $ids = [];
        foreach ($attendees as $attendee) {
            $ids[] = $this->getMemberId($attendee);
        }
        $this->params['sUID'] = $ids;
    }

    /**
     * @param array $input_object
     *
     * @return string
     * @throws ValidationFailedException
     */
    public function getMemberId(array $input_object): string
    {
        $attendee_factory = new MemberFactory($input_object);
        $attendee = $attendee_factory->build();

        return $attendee->getId();
    }

    /**
     * @param array $facilities
     *
     * @throws ValidationFailedException
     */
    public function setFacilities(array $facilities)
    {
        $ids = [];
        foreach ($facilities as $facility) {
            $ids[] = $this->getFacilityId($facility);
        }
        $this->params['sITEM'] = $ids;
    }

    /**
     * @param array $input_object
     *
     * @return string
     * @throws ValidationFailedException
     */
    public function getFacilityId(array $input_object): string
    {
        $facility_factory = new FacilityFactory($input_object);
        $facility = $facility_factory->build();

        return $facility->getId();
    }

    /**
     * @param string $event_menu
     */
    public function setEventMenu(string $event_menu)
    {
        $this->params['menu'] = self::eliminateControlChars($event_menu, false);
    }

    /**
     * @param string $title
     */
    public function setTitle(string $title)
    {
        $this->params['title'] = self::eliminateControlChars($title, false);
    }

    /**
     * @throws ValidationFailedException
     */
    public function setStart()
    {
        $timezone = $this->input[Event::START][DateTime::TIMEZONE] ?? '';
        $datetime = $this->input[Event::START][DateTime::DATETIME] ?? '';

        if ($this->isAllDay()) {
            $parsed_date = \CB_ISO8601Util::toUTCDate($datetime);
            if ($parsed_date === false) {
                throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, Event::START);
            }
            $this->params['start_year'] = $parsed_date->year;
            $this->params['start_month'] = $parsed_date->month;
            $this->params['start_day'] = $parsed_date->day;
        } else {
            $local_datetime = self::convertDateTimeToLocalDateTime($datetime, $timezone, Event::START);
            $this->params['start_year'] = $local_datetime->year;
            $this->params['start_month'] = $local_datetime->month;
            $this->params['start_day'] = $local_datetime->day;
            $this->params['start_hour'] = $local_datetime->hour;
            $this->params['start_minute'] = $local_datetime->minute;
            $this->params['start_second'] = $local_datetime->second;
        }
        $this->params['timezone'] = $timezone;
    }

    /**
     * @throws ValidationFailedException
     */
    public function setEnd()
    {
        if ($this->isStartOnly()) {
            return;
        }

        if ($this->isEventTypeAllDay()) {
            // Use the same value with start.dateTime because ALL DAY(BANNER) event can have only one timezone
            $timezone = $this->input[Event::START][DateTime::TIMEZONE] ?? '';
        } else {
            $timezone = $this->input[Event::END][DateTime::TIMEZONE] ?? '';
        }

        $datetime = $this->input[Event::END][DateTime::DATETIME] ?? '';

        if ($this->isAllDay()) {
            $parsed_date = \CB_ISO8601Util::toUTCDate($datetime);
            if ($parsed_date === false) {
                throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, Event::END);
            }
            $this->params['end_year'] = $parsed_date->year;
            $this->params['end_month'] = $parsed_date->month;
            $this->params['end_day'] = $parsed_date->day;
        } else {
            $local_datetime = $this->convertDateTimeToLocalDateTime($datetime, $timezone, Event::END);
            $this->params['end_year'] = $local_datetime->year;
            $this->params['end_month'] = $local_datetime->month;
            $this->params['end_day'] = $local_datetime->day;
            $this->params['end_hour'] = $local_datetime->hour;
            $this->params['end_minute'] = $local_datetime->minute;
            $this->params['end_second'] = $local_datetime->second;
        }
        $this->params['end_timezone'] = $timezone;
    }

    /**
     * @param string $facility_using_purpose
     */
    private function setFacilityUsingPurpose(string $facility_using_purpose)
    {
        $this->params['facility_using_purpose'] = self::eliminateControlChars($facility_using_purpose, true);
    }

    /**
     * @param string $notes
     */
    public function setNotes(string $notes)
    {
        $this->params['memo'] = self::eliminateControlChars($notes, true);
    }

    public function setAdditionalItems()
    {
        $value = $this->input[Event::ADDITIONAL_ITEM][Event::ADDITIONAL_ITEM_NAME][Event::ADDITIONAL_ITEM_VALUE] ?? "";
        $this->params['additional_items'] = $value;
    }

    public function setEventId()
    {
        $this->params['event'] = $this->input[Event::EVENT_ID] ?? "";
    }

    public function setRepeatInfo()
    {
        $repeat_info = $this->getValue(Event::REPEAT_INFO);
        $type = $this->getRepeatType($repeat_info[RepeatInfo::TYPE]);
        $this->params['type'] = $type;
        $this->params['week'] = $type;

        $is_all_day = $repeat_info[RepeatInfo::IS_ALL_DAY];
        $is_start_only = $repeat_info[RepeatInfo::IS_START_ONLY];

        $setdate = new \CB_Date();
        $setdate->parse($repeat_info[RepeatInfo::PERIOD][RepeatInfo::PERIOD_START]);
        $this->params['start_year'] = $setdate->year;
        $this->params['start_month'] = $setdate->month;
        $this->params['start_day'] = $setdate->day;

        $enddate = new \CB_Date();
        $enddate->parse($repeat_info[RepeatInfo::PERIOD][RepeatInfo::PERIOD_END]);
        $this->params['end_year'] = $enddate->year;
        $this->params['end_month'] = $enddate->month;
        $this->params['end_day'] = $enddate->day;

        if ( ! $is_all_day) {
            $settime = new \CB_Time();
            $settime->parse($repeat_info[RepeatInfo::TIME][RepeatInfo::TIME_START] . ':00');
            $this->params['start_hour'] = $settime->hour;
            $this->params['start_minute'] = $settime->minute;

            if ( ! $is_start_only) {
                $endtime = new \CB_Time();
                $endtime->parse($repeat_info[RepeatInfo::TIME][RepeatInfo::TIME_END] . ':00');
                $this->params['end_hour'] = $endtime->hour;
                $this->params['end_minute'] = $endtime->minute;
            }
        }

        $this->params['timezone'] = $repeat_info[RepeatInfo::TIME_ZONE];

        if ($repeat_info[RepeatInfo::TYPE] === RepeatInfo::EVERY_MONTH) {
            $this->params['day'] = ($repeat_info[RepeatInfo::DAY_OF_MONTH] === 'EOM') ? 0
                : $repeat_info[RepeatInfo::DAY_OF_MONTH];
        }

        if (in_array($repeat_info[RepeatInfo::TYPE], [
            RepeatInfo::EVERY_WEEK,
            RepeatInfo::EVERY_1STWEEK,
            RepeatInfo::EVERY_2NDWEEK,
            RepeatInfo::EVERY_3RDWEEK,
            RepeatInfo::EVERY_4THWEEK,
            RepeatInfo::EVERY_LASTWEEK
        ])
        ) {
            $this->params['wday'] = $this->getWday($repeat_info[RepeatInfo::DAY_OF_WEEK]);
        }
    }

    /**
     * @param string $repeat_type
     *
     * @return string
     */
    public function getRepeatType(string $repeat_type): string
    {
        require_once('schedule/resources.csp');

        $repeat_type_map = [
            RepeatInfo::EVERY_DAY      => GRN_REPEAT_TYPE_DAY,
            RepeatInfo::EVERY_WEEKDAY  => GRN_REPEAT_TYPE_WEEKDAY,
            RepeatInfo::EVERY_WEEK     => GRN_REPEAT_TYPE_WEEK,
            RepeatInfo::EVERY_1STWEEK  => GRN_REPEAT_TYPE_1STWEEK,
            RepeatInfo::EVERY_2NDWEEK  => GRN_REPEAT_TYPE_2NDWEEK,
            RepeatInfo::EVERY_3RDWEEK  => GRN_REPEAT_TYPE_3RDWEEK,
            RepeatInfo::EVERY_4THWEEK  => GRN_REPEAT_TYPE_4THWEEK,
            RepeatInfo::EVERY_LASTWEEK => GRN_REPEAT_TYPE_LASTWEEK,
            RepeatInfo::EVERY_MONTH    => GRN_REPEAT_TYPE_MONTH,
        ];

        return $repeat_type_map[$repeat_type];
    }

    /**
     * @param string $day_of_week
     *
     * @return string
     */
    public function getWday(string $day_of_week): string
    {
        $day_of_week_map = [
            'SUN' => '0',
            'MON' => '1',
            'TUE' => '2',
            'WED' => '3',
            'THU' => '4',
            'FRI' => '5',
            'SAT' => '6',
        ];

        return $day_of_week_map[$day_of_week];
    }

    /**
     * @param string $datetime
     * @param string $timezone
     * @param string $datetime_key
     *
     * @return \CB_DateTimeEx
     * @throws ValidationFailedException
     */
    public static function convertDateTimeToLocalDateTime(
        string $datetime,
        string $timezone,
        string $datetime_key
    ): \CB_DateTimeEx
    {
        $datetime = \CB_ISO8601Util::toDateTime($datetime, $timezone, false);
        if ($datetime === false) {
            throw new ValidationFailedException(ErrorCode::INVALID_ITEM_TYPE, $datetime_key);
        }

        return $datetime;
    }

    /**
     * @return array
     */
    public function getParams(): array
    {
        return $this->params;
    }

    /**
     * @param string $key
     * @param mixed  $default
     *
     * @return mixed
     */
    private function getValue(string $key, $default = null)
    {
        return $this->input[$key] ?? $this->data[$key] ?? $default;
    }

    /**
     * @param bool|mixed $value
     *
     * @return bool|NULL
     *
     * This function returns;
     *  - input value:    when $value is boolean or "true" or "false". (Case insensitive)
     *  - NULL:           when $value is invalid string or integer or object.
     */
    public static function convertToBool($value)
    {
        if (is_bool($value)) {
            return $value;
        }

        if (is_string($value)) {
            if (mb_strtolower($value) === 'true') {
                return true;
            }
            if (mb_strtolower($value) === 'false') {
                return false;
            }
        }

        return null;
    }

    /**
     * @param string $string
     * @param bool   $allow_newline
     *
     * @return string
     */
    public static function eliminateControlChars(string $string, $allow_newline = false)
    {
        $newline_chars = ["\n", "\r"];
        $eliminate_control_chars = ["\f"];

        if ( ! $allow_newline) {
            $eliminate_control_chars = array_merge($eliminate_control_chars, $newline_chars);
        }

        return str_replace($eliminate_control_chars, "", $string);
    }

    public function setVisibilityType()
    {
        $visibilities = [
            'PUBLIC'               => 0,
            'PRIVATE'              => 1,
            'SET_PRIVATE_WATCHERS' => 2
        ];
        $param = $this->getValue(Event::VISIBILITY_TYPE, 'PUBLIC');
        $this->params['private'] = $visibilities[$param];
    }

    /**
     * @param array $watchers
     *
     * @throws ValidationFailedException
     */
    public function setWatchers(array $watchers)
    {
        $ids = [];
        foreach ($watchers as $watcher) {
            $ids[] = $this->getMemberId($watcher);
        }
        $this->params['p_sUID'] = $ids;
    }

    /**
     * @param array $company_info
     */
    public function setCompanyInfo(array $company_info)
    {
        $this->params['physical_address']
            = self::eliminateControlChars($company_info[Event::COMPANY_INFO_ADDRESS] ?? '', false);
        $this->params['company_name']
            = self::eliminateControlChars($company_info[Event::COMPANY_INFO_NAME] ?? '', false);
        $this->params['company_telephone_number']
            = self::eliminateControlChars($company_info[Event::COMPANY_INFO_PHONE] ?? '', false);
        $this->params['route']
            = self::eliminateControlChars($company_info[Event::COMPANY_INFO_ROUTE] ?? '', false);
        $this->params['route_fare']
            = self::eliminateControlChars($company_info[Event::COMPANY_INFO_ROUTE_FARE] ?? '', false);
        $this->params['route_time']
            = self::eliminateControlChars($company_info[Event::COMPANY_INFO_ROUTE_TIME] ?? '', false);
        $this->params['zip_code']
            = self::eliminateControlChars($company_info[Event::COMPANY_INFO_ZIP_CODE] ?? '', false);
    }

    public function setUseAttendanceCheck()
    {
        $this->params['attendance_check'] = $this->convertToBool($this->getValue(Event::USE_ATTENDANCE_CHECK, false));
    }

    /**
     * @param array $attachments
     */
    public function setAttachments(array $attachments)
    {
        $files = [];
        foreach ($attachments as $attachment) {
            $files[] = [
                'name' => $attachment[Event::ATTACHMENTS_NAME],
                'content' => $attachment[Event::ATTACHMENTS_CONTENT]
            ];
        }
        $this->params['files'] = $files;
    }
}
