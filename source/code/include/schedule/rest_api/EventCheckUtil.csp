<?php

declare(strict_types=1);

namespace grn\schedule\rest_api;

use grn\schedule\api\model\Member;

class EventCheckUtil
{
    const TYPE_ORGANIZATION = Member::MEMBER_TYPE_ORGANIZATION;
    const TYPE_USER = Member::MEMBER_TYPE_USER;
    const TYPE_ROLE = Member::MEMBER_TYPE_ROLE;
    const TYPE_FACILITY = 'FACILITY';

    /**
     * @param string $id
     * @param string $type
     *
     * @return bool
     */
    public static function isIdExist(string $id, string $type): bool
    {
        $uum = cb_lwc_uum();
        if ($type === self::TYPE_USER) {
            if ($uum->getUser($id) !== false) {
                return true;
            }
        }
        if ($type === self::TYPE_ORGANIZATION) {
            if ($uum->getGroup($id) !== false) {
                return true;
            }
        }
        if ($type === self::TYPE_FACILITY) {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();
            if ($facility_logic->getFacility($id) !== false) {
                return true;
            }
        }

        if ($type == self::TYPE_ROLE) {
            if ($uum->getStaticRole($id) !== false) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param string $id
     * @param string $type
     * @param array  $operations
     *
     * @return bool
     */
    public static function hasAuthorityToTarget(
        string $id,
        string $type,
        array $operations
    ): bool {
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();

        if ($type === self::TYPE_ORGANIZATION) {
            // Adjust to the character used in $acc_logic.
            $type = GRN_SCHD_TARGET_TYPE_GROUP;
        }
        $object_type = mb_strtolower($type);
        $dynamic_roles = cb_lwc_uum()->listGrantedRoles();
        $login = cb_get_login_user();

        $authorities = $acc_logic->evaluateAccessesById($login, [$id],
            $operations,
            $dynamic_roles, $object_type, true, true);

        return in_array($id, $authorities, true);
    }

    /**
     * @param \GRN_Schedule_EventBase $event
     * @param array                   $operations
     *
     * @return bool
     */
    public static function hasAuthorityToEventObj(
        \GRN_Schedule_EventBase $event,
        array $operations
    ): bool {
        $uum = cb_lwc_uum();
        $dynamic_roles = $uum->listGrantedRoles();
        require_once('schedule/access_logic.csp');
        $acc_logic = \GRN_Schedule_Access_Logic::getInstance();
        $login = cb_get_login_user();
        $access = $acc_logic->getEventAccessByID($login, $event, $operations,
            $dynamic_roles);

        foreach ($operations as $operation) {
            if ($access[$operation] == GRN_SCHD_ACCESS_DENY) {
                return false;
            }
        }

        return true;
    }
}
