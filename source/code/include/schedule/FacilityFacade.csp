<?php

require_once('grn/application.csp');
require_once('grn/CBException.csp');
require_once('grn/DAOFactory.csp');
require_once('schedule/error_code.csp');
require_once('schedule/inspection.csp');

define('CB_FACILITY_FACADE_DB_STATUS_INSERT', 1);
define('CB_FACILITY_FACADE_DB_STATUS_UPDATE', 2);
define('CB_FACILITY_FACADE_DB_STATUS_DELETE', 3);

/**
 * 施設関連のファサードクラス
 * 使いたいDAOを選択（現在はMySQLのみ）・生成し、条件に合ったdaoメソッドを呼び出す。
 * ログを管理する責任を持つ。データを変える処理が発生した場合はログ出力処理を行う。
 * データベースコネクションの管理を行う。ゆくゆくはトランザクション管理も行わせたい。
 * 現状、Exceptionの仕組みを用意しているが、Azaleaフレームワークのエラー処理が存在するため実装していない。ゆくゆくは置き換えたい。
 *
 * @package code.include.schedule
 * @access  public
 * @author  Toshihisa Kobayashi
 * @create  2011/02/16
 **/
class FacilityFacade
{
    private $_db = null;

    public function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_db = $app_locator->getConnection('schedule');
    }

    /** ***************************************************** */
    /** -----           GrnFacilityFacility       --------- */
    /** ***************************************************** */
    /**
     * @param $inDataObj
     * @param $inFacilityKey
     *
     * @return bool|GrnFacilityFacility
     */
    public function referFacilityByForeignKey($inDataObj, $inFacilityKey)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnFacilityFacilityDAO();

        $result = $dao->selectByForeignKey($inDataObj, $inFacilityKey);

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inId
     *
     * @return bool|GrnFacilityFacility
     */
    public function referFacilityById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnFacilityFacilityDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * @param $inDataObj
     * @param $inEventId
     *
     * @return bool|GrnFacilityFacility[]
     */
    public function referFacilitiesByEventId($inDataObj, $inEventId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnFacilityFacilityDAO();

        $result = $dao->selectByEventId($inDataObj, $inEventId);

        return $result;
    }

    /**
     * @param $inDataObj
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityList($inDataObj)
    {
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();

            if (is_null($inLanguage)) {
                $resultList = $dao->getFacilityListWithNonLocal($inDataObj);
            } else {
                $resultList = $dao->getFacilityList($inDataObj);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFacilitygroupId
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByFacilitygroupId(
        $inDataObj,
        $inFacilitygroupId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();

            if ($inFacilitygroupId == -1) {
                $resultList
                    = $dao->getFacilityListByIsolatedFacilitygroup($inDataObj,
                    $inFacilitygroupId);
            } else {
                $resultList = $dao->getFacilityListByFacilitygroupId($inDataObj,
                    $inFacilitygroupId);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * Archive the list of facility by the id base on the specified group ids.
     *
     * @param       $inDataObj
     * @param array $groupIds
     *
     * @return array Array of facility ids belong the specified group ids.
     */
    public function getFacilityIdListByGroupIdList($inDataObj, array $groupIds)
    {
        $inDataObj['db'] = $this->_db;
        $daoFactory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFactory->getGrnFacilityFacilityDAO();

        return $dao->getFacilityIdListByGroupIdList($inDataObj, $groupIds);
    }

    /**
     * @param $inDataObj
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByIsolatedFacilitygroup($inDataObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();
            $isPart = (array_key_exists('isPart', $inDataObj))
                ? $inDataObj['isPart'] : false;

            $resultList = $isPart
                ? $dao->getFacilityPartListByIsolatedFacilitygroup($inDataObj)
                : $dao->getFacilityListByIsolatedFacilitygroup($inDataObj);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByIds($inDataObj, $inFacilityArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();
            $isPart = (array_key_exists('isPart', $inDataObj))
                ? $inDataObj['isPart'] : false;

            $resultList = $isPart ? $dao->getFacilityPartListByIds($inDataObj,
                $inFacilityArray)
                : $dao->getFacilityListByIds($inDataObj, $inFacilityArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * *** レスポンス改善の応急処置的メソッド ***
     * このメソッドを作った背景
     * 目指している処理は「システム内ではGrnFacilityFacilityオブジェクトをそのまま使う」ことなのだが現状は配列を使って動作している。
     * そのため、目指す処理に置き換わるまでの折衷案として、各所でGrnFacilityFacilityオブジェクトを配列にコンバートして配列として情報を渡す処理を用意している。
     * しかし、配列にコンバートする処理がレスポンスに影響する箇所が発生した。
     * 改善するため、GrnFacilityFacilityオブジェクトを間に用意せず、クエリ実行結果を直接配列に代入するメソッドを用意することになった。
     * 目指す処理が実現できた暁には、このメソッドは削除して @see FacilityFacade::getFacilityListByIdsメソッドを利用してください。
     *
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return array
     */
    public function getFacilityArrayListByIds($inDataObj, $inFacilityArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();
            $isPart = (array_key_exists('isPart', $inDataObj))
                ? $inDataObj['isPart'] : false;

            $resultList = $isPart
                ? $dao->getFacilityPartArrayListByIds($inDataObj,
                    $inFacilityArray)
                : $dao->getFacilityArrayListByIds($inDataObj, $inFacilityArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityAndFacilitygroupIdListByIds(
        $inDataObj,
        $inFacilityArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();

            $resultList
                = $dao->getFacilityAndFacilitygroupIdListByIds($inDataObj,
                $inFacilityArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inWordArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByNames_Memos($inDataObj, $inWordArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();

            $resultList = $dao->getFacilityListByNames_Memos($inDataObj,
                $inWordArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /***
     * @param $inDataObj
     * @param $inWordArray
     *
     * @return array
     */
    public function IncrementalSearchFacilityByNames($inDataObj, $inWordArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();

            $resultList = $dao->IncrementalSearchFacilityByNames($inDataObj,
                $inWordArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inWordArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByIsolatedFacilitygroup_Names_Memos(
        $inDataObj,
        $inWordArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();

            $resultList
                = $dao->getFacilityListByIsolatedFacilitygroup_Names_Memos($inDataObj,
                $inWordArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFacilitygroupId
     * @param $inWordArray
     *
     * @return GrnFacilityFacility[]
     */
    public function getFacilityListByFacilitygroupId_Names_Memos(
        $inDataObj,
        $inFacilitygroupId,
        $inWordArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityDAO();

            $resultList
                = $dao->getFacilityListByFacilitygroupId_Names_Memos($inDataObj,
                $inFacilitygroupId, $inWordArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }


    /** ***************************************************** */
    /** -----        GrnFacilityFacilityLocal    --------- */
    /** ***************************************************** */
    /**
     * @param                          $inDataObj
     * @param GrnFacilityFacilityLocal $inFacilityLocalObj
     *
     * @return bool|int
     */
    public function insertFacilityLocal($inDataObj, $inFacilityLocalObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityLocalDAO();
            $inspection
                = GRN_Facility_Facility_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj, $inFacilityLocalObj);

            if (($insertCount > 0) && ($inspection->isEnabled())) {
                $messageType = 'facility_local_add';
                $message_args = [
                    'faid'          => $inFacilityLocalObj->getParentId(),
                    'language_code' => $inFacilityLocalObj->getLanguageCode(),
                    'facility_name' => $inFacilityLocalObj->getName(),
                ];

                $inspection->write($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                          $inDataObj
     * @param GrnFacilityFacilityLocal $inFacilityLocalObj
     *
     * @return int
     */
    public function updateFacilityLocal($inDataObj, $inFacilityLocalObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityLocalDAO();

            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd']
                : 'facility_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'facility_local_modify';
            $inspection
                = GRN_Facility_Facility_Local_Inspection::getInstance();

            $beforFacilityLocal
                = $dao->selectByFacilityId_LanguageCode($inDataObj,
                $inFacilityLocalObj);
            if ($beforFacilityLocal === false) {
                $insertCount = $dao->insert($inDataObj, $inFacilityLocalObj);

                if (($insertCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'faid'          => $inFacilityLocalObj->getParentId(),
                        'language_code' => $inFacilityLocalObj->getLanguageCode(),
                        'facility_name' => $inFacilityLocalObj->getName(),
                    ];

                    $inspection->write($inMessageTypeAdd, $message_args);
                }

                return CB_FACILITY_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj, $inFacilityLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($updateCount >= 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'faid'               => $inFacilityLocalObj->getParentId(),
                        'language_code'      => $inFacilityLocalObj->getLanguageCode(),
                        'prev_facility_name' => $beforFacilityLocal->getName(),
                        'next_facility_name' => $inFacilityLocalObj->getName(),
                    ];

                    $inspection->write($inMessageTypeModify, $message_args);
                }

                return CB_FACILITY_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                          $inDataObj
     * @param GrnFacilityFacilityLocal $inFacilityLocalObj
     *
     * @return bool|int
     */
    public function deleteFacilityLocal($inDataObj, $inFacilityLocalObj)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityLocalDAO();

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'facility_local_delete';
            $inspection
                = GRN_Facility_Facility_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforFacilityLocal
                = $dao->selectByFacilityId_LanguageCode($inDataObj,
                $inFacilityLocalObj);
            if ($beforFacilityLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inFacilityLocalObj);
                if (($deleteCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'faid'          => $inFacilityLocalObj->getParentId(),
                        'language_code' => $inFacilityLocalObj->getLanguageCode(),
                        'facility_name' => $beforFacilityLocal->getName(),
                    ];

                    $inspection->write($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFacilityId
     *
     * @return GrnFacilityFacilityLocal[]
     */
    public function getFacilityLocalListByFacilityId($inDataObj, $inFacilityId)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityLocalDAO();
            $resultList
                = $dao->getFacilityLocalListByFacilityId($inDataObj,
                $inFacilityId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param      $inDataObj
     * @param null $inExportLanguageCodeArray
     *
     * @return GrnFacilityFacilityLocal[]
     */
    public function getFacilityLocalListByLanguageCodes(
        $inDataObj,
        $inExportLanguageCodeArray = null
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilityLocalDAO();
            $isLog = (array_key_exists('isLog', $inDataObj))
                ? $inDataObj['isLog'] : false;
            $messageType = (array_key_exists('messageType', $inDataObj))
                ? $inDataObj['messageType'] : 'facility_local_export';

            if (is_null($inExportLanguageCodeArray)) {
                $resultList = $dao->getFacilityLocalList($inDataObj);
            } else {
                $resultList
                    = $dao->getFacilityLocalListByLanguageCodes($inDataObj,
                    $inExportLanguageCodeArray);
            }

            if ($isLog) {
                $inspection
                    = GRN_Facility_Facility_Local_Inspection::getInstance();

                foreach ($resultList as $facilityLocal) {
                    //Check Inspection Message Enabled
                    if ($inspection->isEnabled()) {
                        //Write Inspection Message
                        $message_args
                            = [
                            'faid'          => $facilityLocal->getParentId(),
                            'languageCode'  => $facilityLocal->getLanguageCode(),
                            'facility_name' => $facilityLocal->getName()
                        ];
                        $inspection->write($messageType, $message_args);
                    }
                }
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----         GrnFacilityFacilitygroup      --------- */
    /** ***************************************************** */

    /**
     * 指定した施設グループコードを持つ施設グループオブジェクトを返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj          データアクセスに使用する付加情報等が格納される
     * @param     string $inFacilitygroupKey 施設グループコード
     *
     * @return    bool|GrnFacilityFacilitygroup     取得出来た場合:GrnFacilityFacilitygroupオブジェクト  取得できなかった場合:FALSE
     */
    public function referFacilitygroupByForeignKey(
        $inDataObj,
        $inFacilitygroupKey
    ) {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

        $result = $dao->selectByForeignKey($inDataObj, $inFacilitygroupKey);

        return $result;
    }

    /**
     * 指定した施設グループIDを持つ施設グループオブジェクトを返す。
     * 施設グループ名は、言語の指定がある場合は指定言語名称を優先して選択する。指定が無い場合は標準名を選択する
     *
     * @access    public
     *
     * @param     array  $inDataObj データアクセスに使用する付加情報等が格納される
     * @param     string $inId      施設グループID
     *
     * @return    bool|GrnFacilityFacilitygroup     取得出来た場合:GrnFacilityFacilitygroupオブジェクト  取得できなかった場合:FALSE
     */
    public function referFacilitygroupById($inDataObj, $inId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;
        if (is_null($inLanguage)) {
            $result = $dao->selectDefaultById($inDataObj, $inId);
        } else {
            $result = $dao->selectLocalById($inDataObj, $inId);
        }

        return $result;
    }

    /**
     * 指定した施設IDを持つ施設グループオブジェクトを返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj    データアクセスに使用する付加情報等が格納される
     * @param     string $inFacilityId 施設ID
     *
     * @return    bool|GrnFacilityFacilitygroup     取得出来た場合:GrnFacilityFacilitygroupオブジェクト  取得できなかった場合:FALSE
     */
    public function referFacilitygroupByFacilityId($inDataObj, $inFacilityId)
    {
        $inDataObj['db'] = $this->_db;
        $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
        $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

        $result = $dao->selectLocalByFacilityId($inDataObj, $inFacilityId);

        return $result;
    }

    /**
     * 施設グループオブジェクトの配列を返す。
     * 施設グループ名は、言語の指定がある場合は指定言語名称を優先して選択する。指定が無い場合は標準名を選択する
     *
     * @access    public
     *
     * @param     array $inDataObj データアクセスに使用する付加情報等が格納される
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupList($inDataObj)
    {
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

            if (is_null($inLanguage)) {
                $resultList
                    = $dao->getFacilitygroupListWithNonLocal($inDataObj);
            } else {
                $resultList = $dao->getFacilitygroupList($inDataObj);
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * 指定した施設グループIDを親に持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は、言語の指定がある場合は指定言語名称を優先して選択する。指定が無い場合は標準名を選択する
     *
     * @access    public
     *
     * @param     array  $inDataObj  データアクセスに使用する付加情報等が格納される
     * @param     string $inParentId 施設グループID
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByParentId($inDataObj, $inParentId)
    {
        $inLanguage = (array_key_exists('language', $inDataObj))
            ? $inDataObj['language'] : null;

        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

            if ($inParentId == 0) {
                if (is_null($inLanguage)) {
                    $resultList
                        = $dao->getFacilitygroupListByIsNullParentIdWithNonLocal($inDataObj);
                } else {
                    $resultList
                        = $dao->getFacilitygroupListByIsNullParentId($inDataObj);
                }
            } else {
                if (is_null($inLanguage)) {
                    $resultList
                        = $dao->getFacilitygroupListByParentIdWithNonLocal($inDataObj,
                        $inParentId);
                } else {
                    $resultList
                        = $dao->getFacilitygroupListByParentId($inDataObj,
                        $inParentId);
                }
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * 指定した施設グループIDを持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj            データアクセスに使用する付加情報等が格納される
     * @param     array $inFacilitygroupArray 施設グループIDを値に持つ配列
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByIds($inDataObj, $inFacilitygroupArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

            $resultList = $dao->getFacilitygroupListByIds($inDataObj,
                $inFacilitygroupArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * 指定した文字列を名称に含む施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択及び検索をする。
     *
     * @access    public
     *
     * @param     array $inDataObj   データアクセスに使用する付加情報等が格納される
     * @param     array $inWordArray 検索文字列を含む配列
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByNames($inDataObj, $inWordArray)
    {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

            $resultList = $dao->getFacilitygroupListByNames($inDataObj,
                $inWordArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * 指定した施設IDを持つ施設グループオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array $inDataObj       データアクセスに使用する付加情報等が格納される
     * @param     array $inFacilityArray 施設IDを値に持つ配列
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByFacilityIds(
        $inDataObj,
        $inFacilityArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

            $resultList = $dao->getFacilitygroupListByFacilityIds($inDataObj,
                $inFacilityArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * *** レスポンス改善の応急処置的メソッド ***
     * このメソッドを作った背景
     * 目指している処理は「システム内ではGrnFacilityFacilitygroupオブジェクトをそのまま使う」ことなのだが現状は配列を使って動作している。
     * そのため、目指す処理に置き換わるまでの折衷案として、各所でGrnFacilityFacilitygroupオブジェクトを配列にコンバートして配列として情報を渡す処理を用意している。
     * しかし、配列にコンバートする処理がレスポンスに影響する箇所が発生した。
     * 改善するため、GrnFacilityFacilitygroupオブジェクトを間に用意せず、クエリ実行結果を直接配列に代入するメソッドを用意することになった。
     * 目指す処理が実現できた暁には、このメソッドは削除して@see FacilityFacade::getFacilitygroupListByFacilityIdsメソッドを利用してください。
     *
     * @param $inDataObj
     * @param $inFacilityArray
     *
     * @return array
     */
    public function getFacilitygroupArrayListByFacilityIds(
        $inDataObj,
        $inFacilityArray
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

            $resultList
                = $dao->getFacilitygroupArrayListByFacilityIds($inDataObj,
                $inFacilityArray);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * 指定した条件を元に管理権限を持つGrnFacilityFacilitygroupオブジェクトの配列を返す。
     * 施設グループ名は指定した言語名称を優先して選択する。
     *
     * @access    public
     *
     * @param     array  $inDataObj       データアクセスに使用する付加情報等が格納される
     * @param     object $inConditionBean GrnFacilityFacilitygroupPrivilegeConditionオブジェクト
     *
     * @return    GrnFacilityFacilitygroup[]     GrnFacilityFacilitygroupオブジェクトの配列
     */
    public function getFacilitygroupListByPrivilegeCondition(
        $inDataObj,
        $inConditionBean
    ) {
        try {
            if ($inConditionBean->isInvalidityCondition()) {
                return [];
            }

            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupDAO();

            $resultList
                = $dao->getFacilitygroupListByPrivilegeCondition($inDataObj,
                $inConditionBean);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /** ***************************************************** */
    /** -----      GrnFacilityFacilitygroupLocal    --------- */
    /** ***************************************************** */
    /**
     * @param                               $inDataObj
     * @param GrnFacilityFacilityGroupLocal $inFacilitygroupLocalObj
     *
     * @return bool|int
     */
    public function insertFacilitygroupLocal(
        $inDataObj,
        $inFacilitygroupLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupLocalDAO();
            $inspection
                = GRN_Facility_Facilitygroup_Local_Inspection::getInstance();

            $insertCount = $dao->insert($inDataObj, $inFacilitygroupLocalObj);

            if (($insertCount > 0) && ($inspection->isEnabled())) {
                $messageType = 'facilitygroup_local_add';
                $message_args = [
                    'fgid'               => $inFacilitygroupLocalObj->getParentId(),
                    'language_code'      => $inFacilitygroupLocalObj->getLanguageCode(),
                    'facilitygroup_name' => $inFacilitygroupLocalObj->getName(),
                ];

                $inspection->write($messageType, $message_args);
            }

            return $insertCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                               $inDataObj
     * @param GrnFacilityFacilityGroupLocal $inFacilitygroupLocalObj
     *
     * @return int
     */
    public function updateFacilitygroupLocal(
        $inDataObj,
        $inFacilitygroupLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupLocalDAO();

            $inMessageTypeAdd = (array_key_exists('messageTypeAdd',
                $inDataObj)) ? $inDataObj['messageTypeAdd']
                : 'facilitygroup_local_add';
            $inMessageTypeModify = (array_key_exists('messageTypeModify',
                $inDataObj)) ? $inDataObj['messageTypeModify']
                : 'facilitygroup_local_modify';
            $inspection
                = GRN_Facility_Facilitygroup_Local_Inspection::getInstance();

            $beforFacilitygroupLocal
                = $dao->selectByFacilitygroupId_LanguageCode($inDataObj,
                $inFacilitygroupLocalObj);
            if ($beforFacilitygroupLocal === false) {
                $insertCount = $dao->insert($inDataObj,
                    $inFacilitygroupLocalObj);

                if (($insertCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'fgid'               => $inFacilitygroupLocalObj->getParentId(),
                        'language_code'      => $inFacilitygroupLocalObj->getLanguageCode(),
                        'facilitygroup_name' => $inFacilitygroupLocalObj->getName(),
                    ];

                    $inspection->write($inMessageTypeAdd, $message_args);
                }

                return CB_FACILITY_FACADE_DB_STATUS_INSERT;
            } else {
                $updateCount = $dao->update($inDataObj,
                    $inFacilitygroupLocalObj);

                //MySQLは変化が無い場合UPDATE結果が0件になる。しかし、現在のGaroonのログ仕様は変化が無くても変更ログを出力しているので、更新件数が0でもログ出力している
                if (($updateCount >= 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'fgid'                    => $inFacilitygroupLocalObj->getParentId(),
                        'language_code'           => $inFacilitygroupLocalObj->getLanguageCode(),
                        'prev_facilitygroup_name' => $beforFacilitygroupLocal->getName(),
                        'next_facilitygroup_name' => $inFacilitygroupLocalObj->getName(),
                    ];

                    $inspection->write($inMessageTypeModify, $message_args);
                }

                return CB_FACILITY_FACADE_DB_STATUS_UPDATE;
            }
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param                          $inDataObj
     * @param GrnFacilityFacilityLocal $inFacilitygroupLocalObj
     *
     * @return bool|int
     */
    public function deleteFacilitygroupLocal(
        $inDataObj,
        $inFacilitygroupLocalObj
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupLocalDAO();

            $inMessageTypeDelete = (array_key_exists('messageTypeDelete',
                $inDataObj)) ? $inDataObj['messageTypeDelete']
                : 'facilitygroup_local_delete';
            $inspection
                = GRN_Facility_Facilitygroup_Local_Inspection::getInstance();

            $deleteCount = 0;
            $beforFacilitygroupLocal
                = $dao->selectByFacilitygroupId_LanguageCode($inDataObj,
                $inFacilitygroupLocalObj);
            if ($beforFacilitygroupLocal !== false) {
                $deleteCount = $dao->deleteByParentId_LanguageCode($inDataObj,
                    $inFacilitygroupLocalObj);
                if (($deleteCount > 0) && ($inspection->isEnabled())) {
                    $message_args = [
                        'fgid'               => $inFacilitygroupLocalObj->getParentId(),
                        'language_code'      => $inFacilitygroupLocalObj->getLanguageCode(),
                        'facilitygroup_name' => $beforFacilitygroupLocal->getName(),
                    ];

                    $inspection->write($inMessageTypeDelete, $message_args);
                }
            }

            return $deleteCount;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param $inDataObj
     * @param $inFacilitygroupId
     *
     * @return GrnFacilityFacilitygroupLocal[]
     */
    public function getFacilitygroupLocalListByFacilitygroupId(
        $inDataObj,
        $inFacilitygroupId
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupLocalDAO();
            $resultList
                = $dao->getFacilitygroupLocalListByFacilitygroupId($inDataObj,
                $inFacilitygroupId);

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * @param      $inDataObj
     * @param null $inExportLanguageCodeArray
     *
     * @return GrnFacilityFacilitygroupLocal[]
     */
    public function getFacilitygroupLocalListByLanguageCodes(
        $inDataObj,
        $inExportLanguageCodeArray = null
    ) {
        try {
            $inDataObj['db'] = $this->_db;
            $daoFctry = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $daoFctry->getGrnFacilityFacilitygroupLocalDAO();
            $isLog = (array_key_exists('isLog', $inDataObj))
                ? $inDataObj['isLog'] : false;
            $messageType = (array_key_exists('messageType', $inDataObj))
                ? $inDataObj['messageType'] : 'facilitygroup_local_export';


            if (is_null($inExportLanguageCodeArray)) {
                $resultList = $dao->getFacilitygroupLocalList($inDataObj);
            } else {
                $resultList
                    = $dao->getFacilitygroupLocalListByLanguageCodes($inDataObj,
                    $inExportLanguageCodeArray);
            }

            if ($isLog) {
                $inspection
                    = GRN_Facility_Facilitygroup_Local_Inspection::getInstance();

                foreach ($resultList as $facilitygroupLocal) {
                    //Check Inspection Message Enabled
                    if ($inspection->isEnabled()) {
                        //Write Inspection Message
                        $message_args
                            = [
                            'fgid'               => $facilitygroupLocal->getParentId(),
                            'languageCode'       => $facilitygroupLocal->getLanguageCode(),
                            'facilitygroup_name' => $facilitygroupLocal->getName()
                        ];
                        $inspection->write($messageType, $message_args);
                    }
                }
            }

            return $resultList;
        } catch (CBException $cbe) {

        }
    }

    /**
     * Get Facility list by foreign keys
     *
     * @param array $data_obj     data object information
     * @param array $foreign_keys list facility foreign key
     *
     * @return array facility list
     */
    public function getFacilitiesByForeignKeys(array $data_obj, array $foreign_keys)
    {
        try {
            $data_obj['db'] = $this->_db;
            $dao_factory = DAOFactory::getDAOFactory(DAOFactory::$MYSQL);
            $dao = $dao_factory->getGrnFacilityFacilityDAO();
            $resultList = $dao->getFacilitiesByForeignKeys($data_obj, $foreign_keys);
            return $resultList;
        } catch (CBException $cbe) {
            return [];
        }
    }
}

