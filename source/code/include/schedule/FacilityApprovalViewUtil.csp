<?php

namespace grn\schedule;

use grn\schedule\bean\FacilityApproval;
use grn\schedule\FacilityApprovalLogic;

class FacilityApprovalViewUtil
{

    private $_facilityApprovalLogic;

    /**
     * @access private
     */
    function __construct()
    {
        $this->_facilityApprovalLogic = new FacilityApprovalLogic();
    }

    private static $_instance = null;

    /**
     * @return FacilityApprovalViewUtil
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @param array                     $params ('hasHistory','history', 'usingPurpose', 'currentStatus')
     * @param \GRN_Schedule_NormalEvent $event
     * @param null                      $usersId
     *
     * @return array
     */
    public function fetch(
        array $params,
        \GRN_Schedule_NormalEvent $event,
        &$usersId = null
    ) {
        $facilityApprovalData = [];
        if (array_search('hasHistory', $params) !== false) {
            $facilityApprovalData['hasHistory']
                = $this->_facilityApprovalLogic->hasApprovalHistory($event->id);
        }

        //get facility approval history
        if (array_search('history', $params) !== false) {
            $history = $this->getHistoryForView($event, $usersId);

            $facilityApprovalData['history'] = $history;

            $facilityApprovalData['isExpandedHistory']
                = $this->isExpandedHistory($event);
        }

        //get facility approval purpose
        if (array_search('usingPurpose', $params) !== false) {
            $usingPurpose
                = $this->_facilityApprovalLogic->getFacilityUsingPurpose($event->id);
            $facilityApprovalData['usingPurpose'] = $usingPurpose;
        }

        //get facility approval current status
        if (array_search('currentStatus', $params) !== false) {
            $facilityApprovalData['currentStatus']
                = $this->getCurrentStatus($event);
        }

        return $facilityApprovalData;
    }

    /**
     * @param $event
     * @param $usersId this is used to get user information
     *
     * @return array
     */
    public function getHistoryForView(
        \GRN_Schedule_NormalEvent $event,
        & $usersId = null
    ) {
        $facilityApprovalList
            = $this->_facilityApprovalLogic->getListFacilityApprovalByEvent($event);

        $facilityHistoryList = [];
        $facilitiesId = [];
        foreach ($facilityApprovalList as $facilityId => $facilityHistory) {
            $facilityHistory = $facilityHistory->toArray();
            $facilitiesId[] = $facilityHistory['col_facility'];

            $facilityHistory['col_status_text'] = $this->toStatusString(
                $facilityHistory['col_status']
            );

            if ($usersId) {
                $usersId[] = $facilityHistory['col_user'];
            }

            $approvalTimestampEx = new \CB_TimeStampEx();
            $approvalTimestampEx->unix_ts
                = intval($facilityHistory['col_approval_time']);
            $facilityHistory['col_approval_time_for_js'] = $approvalTimestampEx;
            $approvalTime
                = $approvalTimestampEx->getDateTime();
            $facilityHistory['col_approval_time']
                = $approvalTime->format();

            $facilityHistoryList[] = $facilityHistory;
        }

        require_once('schedule/facility_system_logic.csp');
        $facilityLogic = \GRN_Facility_SystemLogic::getInstance();
        $historyFacilityInfo = $facilityLogic->getFacilitiesInfo($facilitiesId,
            CB_DATABASE_NO_LOCK);
        foreach (array_keys($facilityHistoryList) as $index) {
            $facilityHistory = &$facilityHistoryList[$index];
            if ( ! empty($facilityHistory['col_facility'])) {
                $facilityId = $facilityHistory['col_facility'];
                $facilityHistory['col_facility_name']
                    = $historyFacilityInfo[$facilityId]['col_name'];
                $facilityHistory['col_facility_code']
                    = $historyFacilityInfo[$facilityId]['col_foreign_key'];
            } else {
                $facilityHistory['col_facility_name'] .= cb_msg('grn.schedule',
                    'deletedFacility');
                $facilityHistory['col_facility_code'] = '';
            }
        }

        return $facilityHistoryList;
    }

    /**
     * @param bool   $approved
     * @param string $locale
     *
     * @return string
     */
    public function toCurrentStatusString($approved, $locale = null)
    {
        if ($approved) {
            return cb_msg('grn.schedule', 'facilityApprovalStatusApproved',
                null, $locale);
        }

        return cb_msg('grn.schedule', 'facilityApprovalStatusPending', null,
            $locale);
    }

    /**
     * @param int $statusCode
     *
     * @return string
     */
    private function toStatusString($statusCode)
    {
        switch ($statusCode) {
            case FacilityApproval::STATUS_APPROVE:
                return cb_msg('grn.schedule',
                    'facilityApprovalResponseApprove');
            case FacilityApproval::STATUS_REJECT:
                return cb_msg('grn.schedule', 'facilityApprovalResponseReject');
            default:
                return;
        }
    }

    public function getCurrentStatus($event)
    {
        $currentStatus = [];
        $currentStatusOfFacilities
            = $this->_facilityApprovalLogic->getCurrentStatusOfFacilities($event);
        if (count($currentStatusOfFacilities) == 0) {
            return $currentStatus;
        }

        foreach ($currentStatusOfFacilities as $facilityId => $approval) {
            $text = $this->toCurrentStatusString($approval);
            $textEnclosed = cb_msg('grn.schedule', 'facilityApprovalStatus',
                ['status' => $text]);

            $currentStatus[$facilityId] = [
                'isApproved'   => $approval,
                'text'         => $text,
                'textEnclosed' => $textEnclosed
            ];
        }

        return $currentStatus;
    }

    public function isExpandedHistory($event)
    {
        $login = cb_get_login_user();
        $loginId = $login->getOID();

        if ( ! ($event->creator instanceof \CB_User)
             || $loginId != $event->creator->getOID()
        ) {
            return false;
        }

        require_once('schedule/event_base_logic.csp');
        $eventBaseLogic = new \GRN_Schedule_EventBaseLogic();
        $eventReadTime = $eventBaseLogic->getEventReadTime($event->id,
            $loginId);

        $lastApprovalTime
            = $this->_facilityApprovalLogic->getLastApprovalTime($event->id);

        if ( ! $lastApprovalTime) {
            return false;
        }

        if ($eventReadTime && $eventReadTime >= $lastApprovalTime) {
            return false;
        }

        return true;
    }
}
