<?php

namespace grn\schedule\api\model;

class Event
{
    CONST EVENT_TYPE_REGULAR = 'REGULAR';
    CONST EVENT_TYPE_REPEATING = 'REPEATING';
    CONST EVENT_TYPE_ALL_DAY = 'ALL_DAY';
    CONST EVENT_TYPE_TEMPORARY = 'TEMPORARY';
    CONST VISIBILITY_TYPE_PUBLIC = 'PUBLIC';
    CONST VISIBILITY_TYPE_PRIVATE = 'PRIVATE';
    CONST VISIBILITY_TYPE_SET_PRIVATE_WATCHERS = 'SET_PRIVATE_WATCHERS';

    const VISIBILITY_TYPES
        = [
            self::VISIBILITY_TYPE_PUBLIC,
            self::VISIBILITY_TYPE_PRIVATE,
            self::VISIBILITY_TYPE_SET_PRIVATE_WATCHERS,
        ];

    const EVENT_TYPE = 'eventType';
    const EVENT_ID = 'id';

    const START = 'start';
    const END = 'end';
    const ORIGINAL_START_TIMEZONE = 'originalStartTimeZone';
    const ORIGINAL_END_TIMEZONE = 'originalEndTimeZone';

    const EVENT_MENU = 'eventMenu';
    const SUBJECT = 'subject';

    const ATTENDEES = 'attendees';
    const WATCHERS = 'watchers';

    const FACILITIES = 'facilities';

    const FACILITY_USING_PURPOSE = 'facilityUsingPurpose';

    const COMPANY_INFO = 'companyInfo';
    const COMPANY_INFO_ADDRESS = 'address';
    const COMPANY_INFO_NAME = 'name';
    const COMPANY_INFO_PHONE = 'phone';
    const COMPANY_INFO_ROUTE = 'route';
    const COMPANY_INFO_ROUTE_FARE = 'routeFare';
    const COMPANY_INFO_ROUTE_TIME = 'routeTime';
    const COMPANY_INFO_ZIP_CODE = 'zipCode';

    const ATTACHMENTS = 'attachments';
    const ATTACHMENTS_NAME = 'name';
    const ATTACHMENTS_CONTENT = 'content';

    const REPEAT_INFO = "repeatInfo";

    const NOTES = 'notes';

    const VISIBILITY_TYPE = 'visibilityType';

    const USE_ATTENDANCE_CHECK = 'useAttendanceCheck';

    const START_ONLY = 'isStartOnly';
    const ALL_DAY = 'isAllDay';

    const ADDITIONAL_ITEM = "additionalItems";
    const ADDITIONAL_ITEM_NAME = "item";
    const ADDITIONAL_ITEM_VALUE = "value";

    /**
     * @var string $id
     */
    private $id;
    /**
     * @var integer $version
     */
    private $version;
    /**
     * @var Person $creator Event creator
     */
    private $creator;
    /**
     * @var \DateTime $createdAt Event created date and time. The value is formatted in ISO8601 format with UTC
     */
    private $createdAt;
    /**
     * @var Person $modifier Event modifier
     */
    private $modifier;
    /**
     * @var \DateTime $updatedAt Event updated date and time. The value is formatted in ISO8601 format with UTC.
     */
    private $updatedAt;
    /**
     * @var string $eventType Event type (REGULAR/REPEATING/ALL_DAY)
     */
    private $eventType;
    /**
     * @var string $eventMenu event menu
     */
    private $eventMenu;
    /**
     * @var string $subject Title of event
     */
    private $subject;
    /**
     * @var string $memo Notes
     */
    private $notes;
    /**
     * @var DateTime $start Start date and time and time zone
     */
    private $start;
    /**
     * @var DateTime $end End date and time and time zone
     */
    private $end;
    /**
     * @var string $originalStartTimeZone original timezone of start datetime
     */
    private $originalStartTimeZone;
    /**
     * @var string $originalEndTimeZone original timezone of end datetime
     */
    private $originalEndTimeZone;
    /**
     * @var bool $isAllDay All day event or not
     */
    private $isAllDay;
    /**
     * @var bool $isStartOnly Specified only start time or not
     */
    private $isStartOnly;
    /**
     * @var bool $hiddenPrivate If other users events are private,this flag is true.
     */
    private $hiddenPrivate;
    /**
     * @var Member[] $attendees Event members/organizations
     */
    private $attendees;
    /**
     * @var Member[] $attendeesCandidate User or organization candidate
     */
    private $attendeesCandidate;
    /**
     * @var Facility[] $facilities Facilities
     */
    private $facilities;
    /**
     * @var Facility[] $facilitiesCandidate Facilities candidate
     */
    private $facilitiesCandidate;
    /**
     * @var string $facilityPurpose The purpose of using facility. Returned only when this item enabled set in system setting
     */
    private $facilityPurpose;
    /**
     * @var FacilityReservationInfoItem[] $facilityReservationInfo Facility reservation items
     */
    private $facilityReservationInfo;
    /**
     * @var Member[] $watchers When "visibilityType" is "SET_PRIVATE_WATCHERS ", this property is show
     */
    private $watchers;
    /**
     * @var Member[] $watchersCandidate Watchers candidate parts value
     */
    private $watchersCandidate;
    /**
     * @var Company $company Company Information
     */
    private $company;
    /**
     * @var Attachment[] $attachments Attachment
     */
    private $attachments;
    /**
     * @var array $removedFileId Removed file id
     */
    private $removedAttachmentId;
    /**
     * @var string $visibilityType The type of public setting (PUBLIC/PRIVATE/SET_PRIVATE_WATCHERS).
     * Note: If event type is "ALL_DAY", this property is not returned
     */
    private $visibilityType;
    /**
     * @var bool $useAttendanceCheck Use attendance check status.
     * Note: If only event type is "REGULAR", this property is returned.
     */
    private $useAttendanceCheck;
    /**
     * @var RepeatInfo $repeatInfo Information of "repeat" event.
     */
    private $repeatInfo;
    /**
     * @var FacilityUsageRequest[] $facilityUsageRequests Facility usage request
     */
    private $facilityUsageRequests;
    /**
     * @var string
     */
    private $repeatId;

    /**
     * @var TemporaryEventCandidate[] $temporaryEventCandidates
     */
    private $temporaryEventCandidates;

    /**
     * @var string custom item of event
     */
    private $additionalItems;

    public function getId()
    {
        return $this->id;
    }

    public function setId($id)
    {
        $this->id = (string)$id;
    }

    public function getVersion()
    {
        return $this->version;
    }

    public function setVersion($version)
    {
        $this->version = $version;
    }

    public function getCreator()
    {
        return $this->creator;
    }

    public function setCreator($creator)
    {
        $this->creator = $creator;
    }

    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    public function setCreatedAt($created_at)
    {
        $this->createdAt = $created_at;
    }

    public function getModifier()
    {
        return $this->modifier;
    }

    public function setModifier($modifier)
    {
        $this->modifier = $modifier;
    }

    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt($updated_at)
    {
        $this->updatedAt = $updated_at;
    }

    public function getEventType()
    {
        return $this->eventType;
    }

    public function setEventType($event_type)
    {
        $this->eventType = $event_type;
    }

    public function getEventMenu()
    {
        return $this->eventMenu;
    }

    public function setEventMenu($event_menu)
    {
        $this->eventMenu = $event_menu;
    }

    public function getSubject()
    {
        return $this->subject;
    }

    public function setSubject($subject)
    {
        $this->subject = $subject;
    }

    public function getNotes()
    {
        return $this->notes;
    }

    public function setNotes($notes)
    {
        $this->notes = $notes;
    }

    public function getStart()
    {
        return $this->start;
    }

    public function setStart($start)
    {
        $this->start = $start;
    }

    public function getEnd()
    {
        return $this->end;
    }

    public function setEnd($end)
    {
        $this->end = $end;
    }

    public function getOriginalStartTimeZone()
    {
        return $this->originalStartTimeZone;
    }

    public function setOriginalStartTimeZone($original_start_time_zone)
    {
        $this->originalStartTimeZone = $original_start_time_zone;
    }

    public function getOriginalEndTimeZone()
    {
        return $this->originalEndTimeZone;
    }

    public function setOriginalEndTimeZone($original_end_time_zone)
    {
        $this->originalEndTimeZone = $original_end_time_zone;
    }

    public function getIsAllDay()
    {
        return $this->isAllDay;
    }

    public function setIsAllDay($is_all_day)
    {
        $this->isAllDay = $is_all_day;
    }

    public function getIsStartOnly()
    {
        return $this->isStartOnly;
    }

    public function setIsStartOnly($is_start_only)
    {
        $this->isStartOnly = $is_start_only;
    }

    public function getHiddenPrivate()
    {
        return $this->hiddenPrivate;
    }

    public function setHiddenPrivate($hidden_private)
    {
        $this->hiddenPrivate = $hidden_private;
    }

    public function getAttendees()
    {
        return $this->attendees;
    }

    public function setAttendees($attendees)
    {
        $this->attendees = $attendees;
    }

    public function getAttendeesCandidate()
    {
        return $this->attendeesCandidate;
    }

    public function setAttendeesCandidate($attendees_candidate)
    {
        $this->attendeesCandidate = $attendees_candidate;
    }

    public function getFacilities()
    {
        return $this->facilities;
    }

    public function setFacilities($facilities)
    {
        $this->facilities = $facilities;
    }

    public function getFacilitiesCandidate()
    {
        return $this->facilitiesCandidate;
    }

    public function setFacilitiesCandidate($facilities_candidate)
    {
        $this->facilitiesCandidate = $facilities_candidate;
    }

    public function getFacilityPurpose()
    {
        return $this->facilityPurpose;
    }

    public function setFacilityPurpose($facility_purpose)
    {
        $this->facilityPurpose = $facility_purpose;
    }

    public function getFacilityReservationInfo()
    {
        return $this->facilityReservationInfo;
    }

    public function setFacilityReservationInfo($facility_reservation_info)
    {
        $this->facilityReservationInfo = $facility_reservation_info;
    }

    public function getWatchers()
    {
        return $this->watchers;
    }

    public function setWatchers($watchers)
    {
        $this->watchers = $watchers;
    }

    public function getWatchersCandidate()
    {
        return $this->watchersCandidate;
    }

    public function setWatchersCandidate($watchers_candidate)
    {
        $this->watchersCandidate = $watchers_candidate;
    }

    public function getCompany()
    {
        return $this->company;
    }

    public function setCompany($company)
    {
        $this->company = $company;
    }

    public function getAttachments()
    {
        return $this->attachments;
    }

    public function setAttachments($attachments)
    {
        $this->attachments = $attachments;
    }

    public function getRemovedAttachmentId()
    {
        return $this->removedAttachmentId;
    }

    public function setRemovedAttachmentId($removed_attachment_id)
    {
        $this->removedAttachmentId = $removed_attachment_id;
    }

    public function getVisibilityType()
    {
        return $this->visibilityType;
    }

    public function setVisibilityType($visibility_type)
    {
        $this->visibilityType = $visibility_type;
    }

    public function getUseAttendanceCheck()
    {
        return $this->useAttendanceCheck;
    }

    public function setUseAttendanceCheck($use_attendance_check)
    {
        $this->useAttendanceCheck = $use_attendance_check;
    }

    public function getRepeatInfo()
    {
        return $this->repeatInfo;
    }

    public function setRepeatInfo($repeat_info)
    {
        $this->repeatInfo = $repeat_info;
    }

    public function getFacilityUsageRequest()
    {
        return $this->facilityUsageRequests;
    }

    public function setFacilityUsageRequests($facility_usage_requests)
    {
        $this->facilityUsageRequests = $facility_usage_requests;
    }

    /**
     * @param TemporaryEventCandidate[] $tentative_appointment_canditates
     */
    public function setTemporaryEventCandidates(
        $tentative_appointment_canditates
    ) {
        $this->temporaryEventCandidates = $tentative_appointment_canditates;
    }

    /**
     * @return TemporaryEventCandidate[]
     */
    public function getTemporaryEventCandidates()
    {
        return $this->temporaryEventCandidates;
    }

    /**
     * @param $repeatId string
     */
    public function setRepeatId($repeatId)
    {
        $this->repeatId = $repeatId;
    }

    /**
     * @return string
     */
    public function getRepeatId()
    {
        return $this->repeatId;
    }

    public function setCustomItemData($custom_item_data)
    {
        $this->additionalItems = $custom_item_data;
    }

    public function getCustomItemData()
    {
        return $this->additionalItems;
    }

    public static function getMappingVisibilityType($visibility_type)
    {
        $public_type_data = Event::VISIBILITY_TYPE_PUBLIC;
        switch ($visibility_type) {
            case GRN_PRIVATE_SETTING_PRIVATE:
                $public_type_data = Event::VISIBILITY_TYPE_PRIVATE;
                break;
            case GRN_PRIVATE_SETTING_MANAGED:
                $public_type_data = Event::VISIBILITY_TYPE_SET_PRIVATE_WATCHERS;
                break;
        }

        return $public_type_data;
    }

    /**
     * Get Event type from object
     *
     * @param \GRN_Schedule_EventBase $event_object
     *
     * @return string
     */
    public static function getEventTypeFromObject($event_object)
    {
        $instance_class_name = get_class($event_object);
        switch ($instance_class_name) {
            case 'GRN_Schedule_NormalEvent':
                return Event::EVENT_TYPE_REGULAR;
            case 'GRN_Schedule_BannerEvent':
                return Event::EVENT_TYPE_ALL_DAY;
            case 'GRN_Schedule_RepeatEvent':
                return Event::EVENT_TYPE_REPEATING;
            case 'GRN_Schedule_TemporaryEvent':
                return Event::EVENT_TYPE_TEMPORARY;
            default:
                return null;
        }
    }

    public function toArray()
    {
        $data = [];
        if ($this->id !== null) {
            $data['id'] = $this->id;
        }
        if ($this->version !== null) {
            $data['version'] = $this->version;
        }
        if ($this->creator !== null) {
            $data['creator'] = $this->creator->toArray();
        }
        if ($this->createdAt !== null) {
            $data['createdAt'] = $this->createdAt;
        }
        if ($this->modifier !== null) {
            $data['updater'] = $this->modifier->toArray();
        }
        if ($this->updatedAt !== null) {
            $data['updatedAt'] = $this->updatedAt;
        }
        if ($this->eventType !== null) {
            $data['eventType'] = $this->eventType;
        }
        if ($this->eventMenu !== null) {
            $data['eventMenu'] = $this->eventMenu;
        }
        if ($this->subject !== null) {
            $data['subject'] = $this->subject;
        }
        if ($this->notes !== null) {
            $data['notes'] = $this->notes;
        }
        if ($this->isAllDay !== null) {
            $data['isAllDay'] = $this->isAllDay;
        }
        if ($this->isStartOnly !== null) {
            $data['isStartOnly'] = $this->isStartOnly;
        }
        if ($this->hiddenPrivate !== null) {
            $data['hiddenPrivate'] = $this->hiddenPrivate;
        }
        if ($this->attendees !== null) {
            $data['attendees']
                = $this->convertObjectListToArray($this->attendees);
        }
        if ($this->attendeesCandidate !== null) {
            $data['attendeesCandidate']
                = $this->convertObjectListToArray($this->attendeesCandidate);
        }
        if ($this->company !== null) {
            $data['companyInfo'] = $this->company->toArray();
        }
        if ($this->attachments !== null) {
            $data['attachments']
                = $this->convertObjectListToArray($this->attachments);
        }
        if ($this->start !== null) {
            $data['start'] = $this->start->toArray();
        }
        if ($this->end !== null) {
            $data['end'] = $this->end->toArray();
        }
        if ($this->originalStartTimeZone != null) {
            $data['originalStartTimeZone'] = $this->originalStartTimeZone;
        }
        if ($this->originalEndTimeZone != null) {
            $data['originalEndTimeZone'] = $this->originalEndTimeZone;
        }
        if ($this->watchers !== null) {
            $data['watchers']
                = $this->convertObjectListToArray($this->watchers);
        }
        if ($this->watchersCandidate !== null) {
            $data['watchersCandidate']
                = $this->convertObjectListToArray($this->watchersCandidate);
        }
        if ($this->facilities !== null) {
            $data['facilities']
                = $this->convertObjectListToArray($this->facilities);
        }
        if ($this->facilitiesCandidate !== null) {
            $data['facilitiesCandidate']
                = $this->convertObjectListToArray($this->facilitiesCandidate);
        }
        if ($this->facilityPurpose !== null) {
            $data['facilityUsingPurpose'] = $this->facilityPurpose;
        }
        if ($this->facilityReservationInfo !== null) {
            $data['facilityReservationInfo']
                = $this->convertObjectListToArray($this->facilityReservationInfo);
        }
        if ($this->facilityUsageRequests !== null) {
            $data['facilityUsageRequests']
                = $this->convertObjectListToArray($this->facilityUsageRequests);
        }
        if ($this->visibilityType !== null) {
            $data['visibilityType'] = $this->visibilityType;
        }
        if ($this->useAttendanceCheck !== null) {
            $data['useAttendanceCheck'] = $this->useAttendanceCheck;
        }
        if ($this->repeatInfo !== null) {
            $data['repeatInfo'] = $this->repeatInfo->toArray();
        }
        if ($this->temporaryEventCandidates !== null) {
            $data['temporaryEventCandidates']
                = $this->convertObjectListToArray($this->temporaryEventCandidates);
        }
        if ($this->repeatId !== null) {
            $data['repeatId'] = $this->repeatId;
        }
        if ($this->additionalItems !== null) {
            $additional_items = ['item' => ['value' => $this->additionalItems]];
            $data['additionalItems'] = $additional_items;
        }

        return $data;
    }

    /**
     * @param Object[]|Mixed $object_list
     *
     * @return array $result
     */
    private function convertObjectListToArray($object_list)
    {
        $result = [];
        if ( ! is_array($object_list)) {
            return $result;
        }
        foreach ($object_list as $key => $object) {
            $result[$key] = $object->toArray();
        }

        return $result;
    }
}
