<?php

namespace grn\schedule\api\model;

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\bean\AttendanceStatus;
use grn\schedule\bean\AttendanceStatusCondition;
use grn\schedule\ScheduleFacade;

class Member
{
    CONST MEMBER_TYPE_ORGANIZATION = 'ORGANIZATION';
    CONST MEMBER_TYPE_USER = 'USER';
    CONST MEMBER_TYPE_ROLE = 'ROLE';

    const TYPE = 'type';
    const CODE = 'code';
    const ID = 'id';

    /**
     * @var string $id Organization ID or login ID Role ID
     */
    private $id;
    /**
     * @var string $code Organization code or login name or Role Name
     */
    private $code;
    /**
     * @var string $name Organization name or Users displaying name
     */
    private $name;
    /**
     * @var string $type Type (ORGANIZATION/USER/ROLE)
     */
    private $type;
    /**
     * @var AttendeeInfo $attendeeInfo
     */
    private $attendeeInfo;
    /**
     * @var boolean $isForeignKeyPublic
     */
    private $isForeignKeyPublic;

    public function __construct(
        $id = null,
        $code = null,
        $name = null,
        $type = null,
        $attendee_info = null,
        $is_foreign_key_public = false
    ) {
        $this->id                 = (string)$id;
        $this->code               = $code;
        $this->name               = $name;
        $this->type               = $type;
        $this->attendeeInfo       = $attendee_info;
        $this->isForeignKeyPublic = $is_foreign_key_public;
    }

    public function getId()
    {
        return $this->id;
    }

    public function setId($id)
    {
        $this->id = (string)$id;
    }

    public function getCode()
    {
        return $this->code;
    }

    public function setCode($code)
    {
        $this->code = $code;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    public function getType()
    {
        return $this->type;
    }

    public function setType($type)
    {
        $this->type = $type;
    }

    public function getAttendeeInfo()
    {
        return $this->attendeeInfo;
    }

    public function setAttendeeInfo($attendee_info)
    {
        $this->attendeeInfo = $attendee_info;
    }

    public function toArray()
    {
        $data = [
            'id'   => $this->id,
            'name' => $this->name,
            'type' => $this->type,
        ];

        if ($this->type !== self::MEMBER_TYPE_USER
            || $this->isForeignKeyPublic
        ) {
            $data['code'] = $this->code;
        }

        if ($this->attendeeInfo) {
            $data['attendanceResponse'] = $this->attendeeInfo->toArray();
        }

        return $data;
    }

    /**
     * Get mapping member type from Schedule Event
     *
     * @param int $member_type Member type of Schedule Event Object
     *
     * @return null|string $member_type_data member type after convert
     */
    public static function getMappingMemberType($member_type)
    {
        $member_type_data = null;
        switch ($member_type) {
            case 'group':
                $member_type_data = self::MEMBER_TYPE_ORGANIZATION;
                break;
            case 'user':
                $member_type_data = self::MEMBER_TYPE_USER;
                break;
            case 'static_role':
                $member_type_data = self::MEMBER_TYPE_ROLE;
                break;
        }

        return $member_type_data;
    }

    /**
     * Get Members from Schedule Event Members
     *
     * @param array          $event_members      must have keys: id, type, foreignKey, displayName
     * @param AttendeeInfo[] $attendees_response attendee info list
     * @param bool           $is_foreign_key_public
     *
     * @return Member[] $members member list after convert
     */
    public static function getMembers(
        $event_members,
        $attendees_response = [],
        $is_foreign_key_public
    ) {
        $members = [];
        if (is_array($event_members)) {
            foreach ($event_members as $member) {
                $member_type = self::getMappingMemberType($member['type']);
                $converted_member = new Member($member['id'],
                    $member['foreignKey'], $member['displayName'],
                    $member_type, null, $is_foreign_key_public);
                if ($member_type == self::MEMBER_TYPE_USER
                    && isset($attendees_response[$member['id']])
                ) {
                    $converted_member->setAttendeeInfo($attendees_response[$member['id']]);
                }
                $members[] = $converted_member;
            }
        }

        return $members;
    }

    /**
     * @param array
     *
     * @return array
     */
    public static function getAttendeesResponseList(array $event_ids)
    {
        $attendance_status_logic = new AttendanceStatusLogic();
        if ( ! $attendance_status_logic->isEnableAttendanceCheck()) {
            return [];
        }

        if (count($event_ids) === 1) {
            $key = array_keys($event_ids)[0];
            $attendance_status_condition
                = new AttendanceStatusCondition(['col_event' => $event_ids[$key]]);
        } else {
            $attendance_status_condition = new AttendanceStatusCondition();
            $attendance_status_condition->setListEventIds($event_ids);
        }

        $schedule_facade = new ScheduleFacade();
        $status_list
            = $schedule_facade->getEventAttendanceStatusListByCondition($attendance_status_condition);

        $user_ids = array_map(function (AttendanceStatus $status) {
            return $status->getUserId();
        }, $status_list);
        $users_info = cb_lwc_uum()->getUsersInfo($user_ids);

        $result = [];

        /** @var AttendanceStatus $status */
        foreach ($status_list as $status) {
            if ( ! isset($users_info[$status->getUserId()])) {
                continue;
            }

            $event_id = $status->getEventId();
            $user_id = $status->getUserId();
            $result[$event_id][$user_id] = new AttendeeInfo(
                $status->getMessage(),
                AttendeeInfo::getMappingAttendeeStatus($status->getStatus())
            );
        }

        return $result;
    }
}
