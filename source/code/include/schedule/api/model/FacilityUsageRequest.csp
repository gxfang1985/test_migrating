<?php

namespace grn\schedule\api\model;

use grn\schedule\api\RenderMemberHolder;
use grn\schedule\bean\FacilityApproval;
use grn\schedule\collection\EventFacilityApprovals;

class FacilityUsageRequest
{
    CONST STATUS_IN_PROGRESS = 'IN_PROGRESS';
    CONST STATUS_REJECTED = 'REJECTED';
    CONST STATUS_APPROVED = 'APPROVED';
    CONST SERVER_SIDE_STATUS_REJECTED = '0';
    CONST SERVER_SIDE_STATUS_APPROVED = '1';
    /**
     * @var Facility $facility Facility
     */
    private $facility;
    /**
     * @var string $resultStatus Approved status (IN_PROGRESS/REJECTED/APPROVED)
     */
    private $status;
    /**
     * @var string $approvedDateTime Approved date and time
     */
    private $approvedDateTime;
    /**
     * @var Person $approvedBy Approved member
     */
    private $approvedBy;

    public function __construct(
        $facility = null,
        $status = null,
        $approved_date_time = null,
        $approved_by = null
    ) {
        $this->facility = $facility;
        $this->status = $status;
        $this->approvedDateTime = $approved_date_time;
        $this->approvedBy = $approved_by;
    }

    public function getFacility()
    {
        return $this->facility;
    }

    public function setFacility($facility)
    {
        $this->facility = $facility;
    }

    public function getStatus()
    {
        return $this->status;
    }

    public function setStatus($status)
    {
        $this->status = $status;
    }

    public function getApprovedDateTime()
    {
        return $this->approvedDateTime;
    }

    public function setApprovedDateTime($approved_date_time)
    {
        $this->approvedDateTime = $approved_date_time;
    }

    public function getApprovedBy()
    {
        return $this->approvedBy;
    }

    public function setApprovedBy($approved_by)
    {
        $this->approvedBy = $approved_by;
    }

    public static function getMappingApprovalStatus($status)
    {
        $status_data = self::STATUS_IN_PROGRESS;
        switch ($status) {
            case self::SERVER_SIDE_STATUS_REJECTED:
                $status_data = self::STATUS_REJECTED;
                break;
            case self::SERVER_SIDE_STATUS_APPROVED:
                $status_data = self::STATUS_APPROVED;
                break;
        }

        return $status_data;
    }

    public function toArray()
    {
        $data = [];

        if ($this->status !== null) {
            $data['status'] = $this->status;
        }
        if ($this->facility !== null) {
            $data['facility'] = $this->facility->toArray();
        }
        if ($this->approvedBy !== null) {
            $data['approvedBy'] = $this->approvedBy->toArray();
        }
        if ($this->approvedDateTime !== null) {
            $data['approvedDateTime'] = $this->approvedDateTime;
        }

        return $data;
    }

    /**
     * @param string                 $facility_id
     * @param bool                   $is_in_event_facilities
     * @param EventFacilityApprovals $facility_approvals
     * @param RenderMemberHolder     $render_member_holder
     * @param bool                   $is_foreign_key_public
     *
     * @return FacilityUsageRequest|null
     */
    public static function create(
        string $facility_id,
        bool $is_in_event_facilities,
        EventFacilityApprovals $facility_approvals,
        RenderMemberHolder $render_member_holder,
        bool $is_foreign_key_public
    ): ?FacilityUsageRequest
    {
        if ($is_in_event_facilities) {
            $approval = $facility_approvals->getUsingOne($facility_id);
            $status = ! is_null($approval)
                ? FacilityUsageRequest::STATUS_APPROVED
                : FacilityUsageRequest::STATUS_IN_PROGRESS;
        } else {
            $approval = $facility_approvals->getLatestOne($facility_id);
            $status
                = FacilityUsageRequest::getMappingApprovalStatus($approval->getStatus());
        }

        $approved_by = null;
        $approved_date_time = null;
        if ( ! is_null($approval)) {
            $approved_by = self::createApprovedBy($approval,
                $render_member_holder, $is_foreign_key_public);

            $approved_ts
                = \CB_TimeStamp::valueOf(intval($approval->getApprovalTime()));
            require_once('cbpapi/util.csp');
            $approved_date_time = grn_cbpapi_iso8601($approved_ts, true);
        }

        $facility = self::createFacility($facility_id, $render_member_holder);

        return new self($facility, $status, $approved_date_time, $approved_by);
    }

    private static function createApprovedBy(
        FacilityApproval $history,
        RenderMemberHolder $render_member_holder,
        bool $is_foreign_key_public
    ): Person {
        $approver_id = $history->getUser();
        if ($approver_id
            && $render_member_holder->getUserForeignKey($approver_id)
        ) {
            return new Person(
                $approver_id,
                $render_member_holder->getUserForeignKey($approver_id),
                $render_member_holder->getUserDisplayName($approver_id),
                $is_foreign_key_public
            );
        } else {
            return new Person('', '', $history->getUserName(),
                $is_foreign_key_public);
        }
    }

    private static function createFacility(
        $facility_id,
        RenderMemberHolder $render_member_holder
    ): Facility {
        $render_facility
            = $render_member_holder->getRenderFacility($facility_id);

        return new Facility ($facility_id, $render_facility['displayName'],
            $render_facility['foreignKey']);
    }
}
