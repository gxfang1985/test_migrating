<?php

declare(strict_types=1);

namespace grn\schedule\api\adapter\events;

use grn\schedule\api\EventModelArranger;
use grn\schedule\rest_api\EventCheckUtil;

require_once('schedule/api_eventfactory.csp');

class GetEventAdapter
{
    /** @var \GRN_Schedule_API_EventFactory */
    private $eventSelector;

    public function __construct()
    {
        $this->eventSelector = \GRN_Schedule_API_EventFactory::getInstance();
    }

    /**
     * Returns an event.
     *
     * @param \GRN_Schedule_EventBase $event
     *
     * @param array                   $files
     *
     * @return array
     */
    public function getResponse(
        \GRN_Schedule_EventBase $event,
        array $files
    ): array {
        $event_arranger = new EventModelArranger([$event], $files, false);

        return $event_arranger->arrange()[0]->toArray();
    }

    /**
     * @param string $event_id
     *
     * @return \GRN_Schedule_EventBase $event
     */
    public function getEvent(string $event_id): \GRN_Schedule_EventBase
    {
        $events = $this->eventSelector->getEventsByIDs([$event_id], true);

        if ( ! $events) {
            // The event does not exist.
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        $event = $events[$event_id];
        $this->checkPrivate($event);
        $this->checkAccessibility($event);

        return $event;
    }

    /**
     * @param string $event_id
     *
     * @return array
     */
    public function getFiles(string $event_id): array
    {
        return $this->eventSelector->getFilesByEventIDs([$event_id]);
    }

    /**
     * If the event is invisible for the user, throws error.
     *
     * @param \GRN_Schedule_EventBase $event
     */
    public function checkPrivate(\GRN_Schedule_EventBase $event)
    {
        $events = $this->eventSelector->checkPrivateEvent([$event]);
        if ( ! $events) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
    }

    /**
     * If the event is not accessible for the user, throws error.
     *
     * @param \GRN_Schedule_EventBase $event
     */
    public function checkAccessibility(\GRN_Schedule_EventBase $event)
    {
        $has_authority = EventCheckUtil::hasAuthorityToEventObj($event,
            ['read']);
        if ( ! $has_authority) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
    }
}
