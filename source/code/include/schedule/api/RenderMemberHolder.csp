<?php
declare(strict_types=1);

namespace grn\schedule\api;

use grn\grn\MemberLogic;
use grn\schedule\ScheduleMemberLogic;

/**
 * This class reduces the number of queries of getting render member names of multiple events.
 */
class RenderMemberHolder
{
    private $renderNotifyAddresses;
    private $renderUsers;
    private $renderFacilities;
    private $renderAttendees;

    /**
     * @param RenderMemberProvider $render_member_provider
     */
    public function __construct(RenderMemberProvider $render_member_provider)
    {
        $this->renderNotifyAddresses
            = $render_member_provider->getRenderNotifyAddresses();
        $this->renderUsers = $render_member_provider->getRenderUsers();
        $this->renderFacilities
            = $render_member_provider->getRenderFacilities();
        $this->renderAttendees = $render_member_provider->getRenderAttendees();
    }

    /**
     * @param \GRN_Schedule_EventBase[] $events
     *
     * @return array
     */
    public function getRenderUsers(array $events)
    {
        $user_ids = [];

        foreach ($events as $event) {
            if ($event->creator instanceof \CB_User) {
                $user_ids[] = $event->creator->getOID();
            }
            if ($event->modifier instanceof \CB_User) {
                $user_ids[] = $event->modifier->getOID();
            }
        }

        return MemberLogic::getInstance()
                          ->getDisplayUsersByUserIds(array_unique($user_ids),
                              'schedule');
    }

    /**
     * @param \CB_User[]|\CB_Group[]|\CB_Role[]|array $notify_addresses
     *
     * @return array
     */
    public function getRenderNotifyAddresses(array $notify_addresses)
    {
        $data = [];
        foreach ($notify_addresses as $address) {
            if (is_object($address)) {
                $key
                    = ScheduleMemberLogic::getMemberKeyNameFromObject($address);
            } else {
                $key = ScheduleMemberLogic::getMemberKeyNameFromArray($address);
            }
            $data[$key] = $this->renderNotifyAddresses[$key];
        }

        return $data;
    }

    /**
     * @param string $user_id
     *
     * @return string
     */
    public function getUserDisplayName($user_id)
    {
        return $this->renderUsers[$user_id][MemberLogic::DISPLAY_NAME];
    }

    /**
     * @param string $user_id
     *
     * @return string
     */
    public function getUserForeignKey($user_id)
    {
        $user = $this->renderUsers[$user_id];

        if (array_key_exists(MemberLogic::IS_DELETED, $user)) {
            return "";
        }

        return $user[MemberLogic::FOREIGN_KEY];
    }

    /**
     * @param \GRN_Facility_Facility[]|array $facilities
     *
     * @return array
     */
    public function getRenderFacilities(array $facilities): array
    {
        $data = [];
        foreach ($facilities as $facility) {
            $key = ScheduleMemberLogic::getFacilityKeyName($facility);
            $data[$key] = $this->renderFacilities[$key];
        }

        return $data;
    }

    /**
     * @param string $facility
     *
     * @return array
     */
    public function getRenderFacility($facility): array
    {
        $key = ScheduleMemberLogic::getFacilityKeyName($facility);

        return $this->renderFacilities[$key];
    }

    /**
     * @param array $users
     * @param array $groups
     *
     * @return array
     */
    public function getRenderAttendees(array $users, array $groups): array
    {
        $data = [];
        foreach ($users as $user) {
            $key = ScheduleMemberLogic::getUserKeyName($user);
            $data[$key] = $this->renderAttendees[$key];
        }

        foreach ($groups as $group) {
            $key = ScheduleMemberLogic::getGroupKeyName($group);
            $data[$key] = $this->renderAttendees[$key];
        }

        return $data;
    }
}
