<?php
declare(strict_types=1);

namespace grn\schedule\api\service;

use grn\schedule\api\adapter\events\GetEventAdapter;
use grn\schedule\api\adapter\events\ModifyEventRestAdapter;
use grn\schedule\api\adapter\events\PostEventAdapterAbstract;
use grn\schedule\api\adapter\events\DeleteEventAdapterAbstract;

require_once('grn/application.csp');

class EventsService
{
    /**
     * @param string $event_id
     *
     * @return array
     */
    public function getEvent(string $event_id): array
    {
        $adapter = new GetEventAdapter();

        $event = $adapter->getEvent($event_id);

        $files = $adapter->getFiles($event_id);

        $body = $adapter->getResponse($event, $files);

        return $body;
    }

    /**
     * @param \CB_user                 $user
     * @param array                    $event_params
     * @param PostEventAdapterAbstract $adapter
     *
     * @return string
     */
    public function postEvent(\CB_user $user, array $event_params, PostEventAdapterAbstract $adapter): string
    {
        $event = $adapter->createEvent($event_params);

        $authorities = ['read', 'add'];
        $adapter->checkAccess($user, $event, $authorities);

        $adapter->checkEventData($event);

        $adapter->checkFacilities($user, $event);

        $event_id = $adapter->addEvent($user, $event_params, $event);

        $adapter->sendNotification($user, $event);

        return $event_id;
    }

    /**
     * @param \CB_user                   $user
     * @param string                     $event_id
     * @param DeleteEventAdapterAbstract $adapter
     */
    public function deleteEvent(\CB_user $user, string $event_id, DeleteEventAdapterAbstract $adapter)
    {
        $event = $adapter->getEvent($user, $event_id);

        $adapter->checkWhetherEventIsDeletableType($event);

        $authorities = ['read', 'delete'];
        $adapter->checkAccess($user, $event, $authorities);

        $adapter->checkCanModifyFacility($user, $event);

        $adapter->deleteNetmeetingReservation($event);

        $event = $adapter->convertTimezone($event);

        $adapter->sendNotification($user, $event);

        $adapter->removeEvent($user, $event);
    }

    public function saveNow()
    {
        $locator = \GRN_ApplicationLocator::instance();
        $manager = $locator->getTableManager(GRN_SCHEDULE_APPLICATION_ID);
        $manager->registerNowAndUpdateNowAll();
    }

    /**
     * @param \CB_user                $user
     * @param \GRN_Schedule_EventBase $old_event
     * @param array                   $event_params
     */
    public function patchEvent(\CB_user $user, \GRN_Schedule_EventBase $old_event, array $event_params): void
    {
        if ($old_event instanceof \GRN_Schedule_RepeatEvent) {
            $adapter = new ModifyEventRestAdapter();
            $adapter->modifyRepeatEvent($user, $event_params, GRN_REPEAT_MODIFY_ALL);
        } else {
            $adapter = new ModifyEventRestAdapter();
            $adapter->modifyEvent($user, $event_params);
        }
    }
}
