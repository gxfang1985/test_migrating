<?php
declare(strict_types=1);

namespace grn\schedule\api;

use grn\grn\MemberLogic;
use grn\schedule\collection\EventFacilityApprovals;
use grn\schedule\ScheduleMemberLogic;

class RenderMemberProvider
{
    /**
     * @var \GRN_Schedule_EventBase[]
     */
    private $events;
    /**
     * @var array
     */
    private $presetData;

    /**
     * @var EventFacilityApprovals[]
     */
    private $facilityApprovalsOfEvents;

    const PRESET_DATA_ATTENDEES = 'attendees';
    const PRESET_DATA_NOTIFY_ADDRESS = 'notify_address';
    const PRESET_DATA_FACILITIES = 'facilities';

    /**
     * @param \GRN_Schedule_EventBase[] $events
     * @param array                     $preset_data
     * @param EventFacilityApprovals[]  $facility_approvals_of_events
     */
    public function __construct(
        array $events,
        array $preset_data = [],
        array $facility_approvals_of_events = []
    ) {
        $this->events = $events;
        $this->presetData = $preset_data;
        $this->facilityApprovalsOfEvents = $facility_approvals_of_events;
    }

    /**
     * @return array
     */
    public function getRenderNotifyAddresses(): array
    {
        if (array_key_exists(self::PRESET_DATA_NOTIFY_ADDRESS,
            $this->presetData)
        ) {
            return $this->presetData[self::PRESET_DATA_NOTIFY_ADDRESS];
        }

        $notify_address_list = [];

        foreach ($this->events as $event) {
            if (is_array($event->notify_address)) {
                $notify_address_list += $event->notify_address;
            }
        }

        if (empty($notify_address_list)) {
            return [];
        }

        $get_mode = is_object(current($notify_address_list))
            ? GRN_SCHEDULE_GET_MEMBER_OBJECT : GRN_SCHEDULE_GET_MEMBER_ID;

        return ScheduleMemberLogic::getInstance()
                                  ->getNotifyAddressRender($notify_address_list,
                                      $get_mode);
    }

    /**
     * @return array
     */
    public function getRenderFacilities(): array
    {
        if (array_key_exists(self::PRESET_DATA_FACILITIES, $this->presetData)) {
            return $this->presetData[self::PRESET_DATA_FACILITIES];
        }

        $facilities = [];
        foreach ($this->events as $event) {
            $facilities += $event->getAllFacilityIds();
        }
        $facilities += $this->getFacilityIdsInApprovalHistories();

        return ScheduleMemberLogic::getInstance()
                                  ->getFacilitiesRender(array_unique($facilities));
    }

    private function getFacilityIdsInApprovalHistories(): array
    {
        $ids = [];
        foreach ($this->facilityApprovalsOfEvents as $facility_approvals) {
            $ids += $facility_approvals->getFacilityIds();
        }

        return $ids;
    }

    /**
     * @return array
     */
    public function getRenderAttendees(): array
    {
        if (array_key_exists(self::PRESET_DATA_ATTENDEES, $this->presetData)) {
            return $this->presetData[self::PRESET_DATA_ATTENDEES];
        }

        $users = [];
        $groups = [];

        foreach ($this->events as $event) {
            if (is_array($event->users)) {
                $users += $event->users;
            }
            if (is_array($event->groups)) {
                $groups += $event->groups;
            }
        }

        return ScheduleMemberLogic::getInstance()
                                  ->getAttendeesRender($users, $groups);
    }

    /**
     * @return array
     */
    public function getRenderUsers(): array
    {
        $user_ids = [];

        foreach ($this->events as $event) {
            if ($event->creator instanceof \CB_User) {
                $user_ids[] = $event->creator->getOID();
            }
            if ($event->modifier instanceof \CB_User) {
                $user_ids[] = $event->modifier->getOID();
            }
        }

        foreach (
            $this->facilityApprovalsOfEvents as
            $event_facility_approval_collection
        ) {
            $approver_ids
                = $event_facility_approval_collection->getApproverIds();
            $user_ids = array_merge($user_ids, $approver_ids);
        }

        return MemberLogic::getInstance()
                          ->getDisplayUsersByUserIds(array_unique($user_ids),
                              'schedule');
    }
}
