<?php

namespace grn\schedule;

use grn\schedule\bean\AttendanceStatus;
use grn\schedule\bean\AttendanceStatusCondition;
use grn\schedule\bean\FacilityApproval;
use grn\schedule\bean\FacilityApprovalApplyingInfo;
use grn\schedule\collection\EventFacilityApprovals;
use grn\schedule\dao\AttendanceStatusDAO;
use grn\schedule\dao\FacilityApprovalDAO;

require_once('grn/application.csp');
require_once('schedule/error_code.csp');

class ScheduleFacade
{

    //Attendance status dao
    public function insertEventAttendanceStatus(
        AttendanceStatus $attendanceStatus
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->insert($attendanceStatus);
    }

    public function convertStatus($strStatus)
    {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->convertStatus($strStatus);
    }

    public function deleteByConditionEventAttendanceStatus(
        AttendanceStatusCondition $attendanceStatusCondition
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->deleteByCondition($attendanceStatusCondition);
    }


    public function getEventAttendanceStatusByUserIdAndEventId(
        AttendanceStatusCondition $attendanceStatusConditionObj
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->getByUserIdAndEventId($attendanceStatusConditionObj);
    }

    public function getEventAttendanceStatusListByCondition(
        AttendanceStatusCondition $attendanceStatusConditionObj
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->getListByCondition($attendanceStatusConditionObj);
    }

    public function countEventAttendanceStatusByCondition(
        AttendanceStatusCondition $attendanceStatusConditionObj
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->countByCondition($attendanceStatusConditionObj);
    }

    function getLastAccessTimeForCreator(
        AttendanceStatusCondition $attendanceStatusObj
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->getLastAccessTimeForCreator($attendanceStatusObj);
    }

    function getLastConfirmationTime(
        AttendanceStatusCondition $attendanceStatusObj
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->getLastConfirmationTime($attendanceStatusObj);
    }

    public function setEventAttendanceStatusTimeCreatorAccess(
        AttendanceStatusCondition $attendanceStatusCondition
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->setLastAccessTimeForCreator($attendanceStatusCondition);
    }

    function deleteLastAccessTimeOfEvent(
        AttendanceStatusCondition $attendanceStatusObj
    ) {
        $attendanceStatusDAO = new AttendanceStatusDAO();

        return $attendanceStatusDAO->deleteLastAccessTimeOfEvent($attendanceStatusObj);
    }

    public function insertFacilityApproval(FacilityApproval $facilityApprovalObj
    ) {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->insert($facilityApprovalObj);
    }

    public function invalidateFacilitiesOfEvent($eventId, $facilityIds)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->invalidateFacilitiesOfEvent($eventId,
            $facilityIds);
    }

    /**
     * @param $eventId
     *
     * @return FacilityApproval[]
     */
    public function getListFacilityApprovalByEventId($eventId)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getListByEventId($eventId);
    }

    /**
     * @param array $eventIds
     *
     * @return EventFacilityApprovals[]
     */
    public function getListFacilityApprovalByEventIds(array $eventIds)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getListByEventIds($eventIds);
    }

    public function getListFacilityApprovalByCondition(
        FacilityApproval $facilityApprovalObj
    ) {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getListByCondition($facilityApprovalObj);
    }

    public function getLastApprovalTime($eventId)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getLastApprovalTime($eventId);
    }

    /**
     * @param $eventId
     * @param $facilityId
     *
     * @return FacilityApproval|null
     */
    public function getLastApproval($eventId, $facilityId)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getLastApproval($eventId, $facilityId);
    }

    public function hasApprovalHistory($eventId)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->hasApprovalHistory($eventId);
    }

    public function setFacilityUsingPurpose($eventId, $usingPurpose)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->setUsingPurpose($eventId, $usingPurpose);
    }

    /**
     * @param array $eventIds
     *
     * @return string[] Key is a event id
     */
    public function getFacilityUsingPurposesByEventIds(array $eventIds)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getUsingPurposesByEventIds($eventIds);
    }

    public function removeFacilityOfEvent($eventId, $facilityId)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->removeFacilityOfEvent($eventId,
            $facilityId);
    }

    /**
     * @param FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
     *
     * @return bool|int
     */
    public function setFacilityApplyingInfo(
        FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
    ) {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->setFacilityApplyingInfo($facilityApprovalApplyingInfo);
    }

    /**
     * @param FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
     *
     * @return bool|int
     */
    public function setFacilityApplyingInfoForDeletedCreator(
        FacilityApprovalApplyingInfo $facilityApprovalApplyingInfo
    ) {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->setFacilityApplyingInfoForDeletedCreator($facilityApprovalApplyingInfo);
    }

    /**
     * @param int $eventId
     * @param int $facilityId
     *
     * @return mixed
     */
    public function getFacilityApplyingInfo($eventId, $facilityId)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getFacilityApplyingInfo($eventId,
            $facilityId);
    }

    /**
     * @param int   $eventId
     * @param array $facilityIds
     *
     * @return bool|int
     */
    public function deleteFacilitiesApplyingInfo($eventId, $facilityIds)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->deleteFacilitiesApplyingInfo($eventId,
            $facilityIds);
    }

    /**
     * @param int $eventId
     *
     * @return mixed
     */
    public function getIdOfDeletedCreator($eventId)
    {
        $facilityApprovalDAO = new FacilityApprovalDAO();

        return $facilityApprovalDAO->getIdOfDeletedCreator($eventId);
    }
}
