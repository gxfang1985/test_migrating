<?php

namespace grn\schedule;

require_once('schedule/resources.csp');

class FacilitySettingLogic
{
    /** @var \GRN_Facility_SystemLogic */
    private $facilitySystemLogic = null;

    public function __construct(\GRN_Facility_SystemLogic $facilitySystemLogic)
    {
        $this->facilitySystemLogic = $facilitySystemLogic;
    }

    /**
     * @return array
     */
    public function getGlobalSettings()
    {
        return [
            GRN_FACILITY_ADVANCE    => $this->getFacilityAdvance(),
            GRN_FACILITY_MAXTIME    => $this->getFacilityMaxTime(),
            GRN_FACILITY_MODIFYUSER => $this->getFacilityModifyUser(),
            GRN_FACILITY_SHOWMEMO   => $this->getFacilityShowMemo(),
            // Note: The global setting name of FACILITY REPEAT is defined as 'repeat' (see: GRN_FACILITY_REPEAT).
            // But the setting name of FACILITY REPEAT for facility and facility group is 'regulary'.
            'regulary'              => $this->getFacilityRepeat(),
            GRN_FACILITY_APPROVAL   => $this->getFacilityApproval(),
            // Note: The global setting name of FACILITY INHERIT PARENT is defined as 'inheritparent' (see: GRN_FACILITY_INHERITPARENT).
            // But the setting name of FACILITY INHERIT PARENT for facility and facility group is 'apply_from_parent'.
            'apply_from_parent'     => $this->getFacilityInheritParent(),
        ];
    }

    /**
     * @return \CB_Profile
     */
    private function getSystemProfile()
    {
        return $this->facilitySystemLogic->getSystemProfile();
    }

    /**
     * 施設の予約の期間の設定
     *
     * @param $advance
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setFacilityAdvance($advance)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_FACILITY_ADVANCE,
            $advance);
    }

    /**
     * 施設の予約の期間の取得
     *
     * @return string
     */
    public function getFacilityAdvance()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_ADVANCE, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * 施設の予約の最大時間の設定
     *
     * @param $maxtime
     *
     * @return  mixed   成功した場合はTRUE、それ以外はFALSE
     */
    public function setFacilityMaxTime($maxtime)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_FACILITY_MAXTIME,
            $maxtime);
    }

    /**
     * 施設の予約の最大時間の取得
     *
     * @return string
     */
    public function getFacilityMaxTime()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_MAXTIME, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * 施設予約で予定を変更できるユーザー
     *
     * @param $modifyuser
     *
     * @return  boolean   成功した場合はTRUE、それ以外はFALSE
     */
    public function setFacilityModifyUser($modifyuser)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_FACILITY_MODIFYUSER,
            $modifyuser);
    }

    /**
     * 施設予約で予定を変更できるユーザー
     *
     * @return string
     */
    public function getFacilityModifyUser()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_MODIFYUSER, $value);
        if ( ! $ret) {
            $value = 'grantuser';
        }

        return $value;
    }

    /**
     * 施設でメモを表示するかの可否
     *
     * @param $showmemo
     *
     * @return  boolean   成功した場合はTRUE、それ以外はFALSE
     */
    public function setFacilityShowMemo($showmemo)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_FACILITY_SHOWMEMO,
            $showmemo);
    }

    /**
     * 施設でメモを表示するかの可否
     *
     * @return string
     */
    public function getFacilityShowMemo()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_SHOWMEMO, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * 繰り返しの登録の可否
     *
     * @param $repeat
     *
     * @return  boolean   成功した場合はTRUE、それ以外はFALSE
     */
    public function setFacilityRepeat($repeat)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_FACILITY_REPEAT,
            $repeat);
    }

    /**
     * 繰り返しの登録の可否
     *
     * @return string
     */
    public function getFacilityRepeat()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_REPEAT, $value);
        if ( ! $ret) {
            $value = '1';
        }

        return $value;
    }

    /**
     * 施設の承認
     *
     * @param $approval
     *
     * @return  boolean   成功した場合はTRUE、それ以外はFALSE
     */
    public function setFacilityApproval($approval)
    {
        $profile = $this->getSystemProfile();

        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile, GRN_FACILITY_APPROVAL,
            $approval);
    }

    /**
     * 施設の承認
     *
     * @return string
     */
    public function getFacilityApproval()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_APPROVAL, $value);
        if ( ! $ret) {
            $value = '0';
        }

        return $value;
    }

    /**
     * Get flag inherit from parent
     *
     * @return string
     */
    public function getFacilityInheritParent()
    {
        $profile = $this->getSystemProfile();
        $value = null;
        $ret = $profile->getAttribute(GRN_FACILITY_INHERITPARENT, $value);
        if ( ! $ret) {
            $value = '1';
        }

        return $value;
    }

    /**
     * set flag allow inherit from parent setting
     *
     * @param $inherit
     *
     * @return  boolean
     */
    public function setFacilityInheritParent($inherit)
    {
        // プロファイルの取得
        $profile = $this->getSystemProfile();

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_FACILITY_INHERITPARENT, $inherit);
    }

    /**
     * @param \GRN_Facility_FacilityGroup|null|bool $parentGroup The facility group that a facility/facility group belongs.
     *                                                           Set NULL or FALSE if facility doesn't belong to any group.
     *                                                           Set NULL or FALSE if facility group is in the top group.
     *
     * @return array
     */
    public function getParentGroupSetting($parentGroup)
    {
        $globalSettings = $this->getGlobalSettings();

        if (is_null($parentGroup) || $parentGroup === false) {
            return $globalSettings;
        }

        $settings = $this->unserializeSettings($parentGroup->get('settings'));
        if (is_array($settings)) {
            return array_merge($globalSettings, $settings);
        }

        return $globalSettings;
    }

    /**
     * @param string|null $serializedSettings
     *
     * @return array
     */
    public function getSettings($serializedSettings)
    {
        $globalSettings = $this->getGlobalSettings();
        $settings = $this->unserializeSettings($serializedSettings);

        if (is_array($settings)) {
            return array_merge($globalSettings, $settings);
        }

        return $globalSettings;
    }

    /**
     * @param string|null $serializedSettings
     *
     * @return bool|array
     */
    private function unserializeSettings($serializedSettings)
    {
        if (strlen($serializedSettings) === 0) {
            return false;
        }

        return cb_unserialize($serializedSettings,
            ['allowed_classes' => false]);
    }

    /**
     * @param array  $facilityGroupSettings
     * @param string $facilityGroupId
     */
    private function reflectParentGroupSettingsToChildFacilities(
        array $facilityGroupSettings,
        $facilityGroupId
    ) {
        $facilityGroupSettings['apply_from_parent'] = '1';

        $facilities
            = $this->facilitySystemLogic->getGroupFacilityArrayList($facilityGroupId);
        foreach ($facilities as $facility) {
            if ($this->isApplyParentGroupSettings($facility['col_settings'])) {
                $this->updateFacilitySetting($facilityGroupSettings,
                    $facility['_id']);
            }
        }
    }

    /**
     * @param array $settings
     * @param       $facilityGroupId
     */
    private function reflectGroupSettingToDescendants(
        array $settings,
        $facilityGroupId
    ) {
        $settings['apply_from_parent'] = '1';

        $this->reflectParentGroupSettingsToChildFacilities($settings,
            $facilityGroupId);

        $descendantFacilityGroupIds
            = $this->facilitySystemLogic->getTreeChildren($facilityGroupId);
        $descendantFacilityGroups
            = $this->facilitySystemLogic->getFacilityGroupsInfo($descendantFacilityGroupIds);

        $groupTreeMap = [];
        foreach ($descendantFacilityGroups as $group) {
            $parentId = $group['col_parent'];
            if ( ! array_key_exists($parentId, $groupTreeMap)) {
                $groupTreeMap[$parentId] = [];
            }
            $groupTreeMap[$parentId][] = $group;
        }

        $this->reflectParentGroupSettingToDescendants($settings,
            $facilityGroupId, $groupTreeMap);
    }

    /**
     * @param array  $settings
     * @param string $facilityGroupId
     * @param [][] $groupTreeMap
     */
    private function reflectParentGroupSettingToDescendants(
        array $settings,
        $facilityGroupId,
        $groupTreeMap
    ) {
        if ( ! array_key_exists($facilityGroupId, $groupTreeMap)) {
            return;
        }

        $childGroups = $groupTreeMap[$facilityGroupId];
        foreach ($childGroups as $group) {
            if ($this->isApplyParentGroupSettings($group['col_settings'])) {
                $groupId = $group['_id'];
                $this->updateFacilityGroupSetting($settings, $groupId);
                $this->reflectParentGroupSettingsToChildFacilities($settings,
                    $groupId);
                $this->reflectParentGroupSettingToDescendants($settings,
                    $groupId, $groupTreeMap);
            }
        }
    }

    /**
     * @param string|null $unserializedSettings
     *
     * @return bool
     */
    public function isApplyParentGroupSettings($unserializedSettings)
    {
        if (is_null($unserializedSettings)) {
            return true;
        }

        $settings = $this->unserializeSettings($unserializedSettings);

        if ( ! is_array($settings)
             || ! array_key_exists('apply_from_parent', $settings)
        ) {
            return true;
        }

        return $settings['apply_from_parent'] == '1';
    }

    /**
     * @param string[] $facilityIds The list of facility's id to update
     */
    public function updateFacilitiesSettingsOnGroupDelete(array $facilityIds)
    {
        $facilities
            = $this->facilitySystemLogic->getFacilityListByIds($facilityIds);
        $globalSettings = $this->getGlobalSettings();
        $globalSettings['apply_from_parent'] = '1';

        foreach ($facilities as $facility) {
            if ($this->isApplyParentGroupSettings($facility->get('settings'))) {
                $this->updateFacilitySetting($globalSettings,
                    $facility->getOID());
            }
        }
    }

    /**
     * @param string                                $facilityId
     * @param \GRN_Facility_FacilityGroup|null|bool $parentGroup
     *
     * @return array
     */
    public function setFacilitySettingByParentGroup($facilityId, $parentGroup)
    {
        $setSettings = $this->getParentGroupSetting($parentGroup);
        $setSettings['apply_from_parent'] = '1';
        $this->updateFacilitySetting($setSettings, $facilityId);

        return $setSettings;
    }

    /**
     * @param $settings
     * @param $facilityId
     */
    public function setFacilitySettingByInput($settings, $facilityId)
    {
        $this->updateFacilitySetting($settings, $facilityId);
    }

    /**
     * @param string                                $facilityGroupId
     * @param \GRN_Facility_FacilityGroup|null|bool $parentGroup
     *
     * @return array
     */
    public function setFacilityGroupSettingByParentGroup(
        $facilityGroupId,
        $parentGroup
    ) {
        $setSettings = $this->getParentGroupSetting($parentGroup);
        $setSettings['apply_from_parent'] = '1';
        $this->setFacilityGroupSettingByInput($setSettings, $facilityGroupId);

        return $setSettings;
    }

    /**
     * @param $settings
     * @param $facilityGroupId
     */
    public function setFacilityGroupSettingByInput($settings, $facilityGroupId)
    {
        $this->updateFacilityGroupSetting($settings, $facilityGroupId);
        $this->reflectGroupSettingToDescendants($settings, $facilityGroupId);

        return $settings;
    }

    /**
     * @param $settings
     * @param $facility_id
     *
     * @return bool
     */
    protected function updateFacilitySetting($settings, $facility_id)
    {
        // Serialize Settings
        $serialized_settings = serialize($settings);
        $db = cb_get_app_db('schedule');
        $query
            = "UPDATE tab_grn_facility_facility SET col_settings = '@S', col_settings_mtime = '@S' WHERE _id = '@S'";
        $query = cb_queryf($db, $query, $serialized_settings,
            time(), $facility_id);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    /**
     * @param $settings
     * @param $group_id
     *
     * @return bool
     */
    protected function updateFacilityGroupSetting($settings, $group_id)
    {
        //Serialize Settings
        $serialized_settings = serialize($settings);
        $db = cb_get_app_db('schedule');
        $query
            = "UPDATE tab_grn_facility_facilitygroup SET col_settings = '@S', col_settings_mtime = '@S' WHERE _id = '@S'";
        $query = cb_queryf($db, $query, $serialized_settings,
            time(), $group_id);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    /**
     * @return bool
     */
    public function resetAllFacilitiesSetting()
    {
        $db = cb_get_app_db('schedule');
        $query
            = "UPDATE tab_grn_facility_facility SET col_settings = NULL, col_settings_mtime = '@S'";
        $query = $db->format($query, [time()]);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }

    /**
     * @return bool
     */
    public function resetAllGroupsSetting()
    {
        $db = cb_get_app_db('schedule');
        $query
            = "UPDATE tab_grn_facility_facilitygroup SET col_settings = NULL, col_settings_mtime = '@S'";
        $query = $db->format($query, [time()]);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'query failed: ' . $query]);
        }

        return true;
    }
}
