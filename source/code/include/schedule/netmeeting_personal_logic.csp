<?php
/**
 * Netmeeting personal Logic
 *
 * @create:
 *    2011/06/08 VCBSCH0010 Sync for V-CUBE
 */

require_once('fw/profile.csp');
require_once('schedule/netmeeting_resources.csp');

/**
 * @package     grn.netmeeting
 */
class GRN_Netmeeting_PersonalLogic extends CB_ModuleBase
{
    /**
     * @access private
     */
    function __construct()
    {
        parent::__construct(GRN_NETMEETING_MODULE_ID . '.personal');
    }

    private static $_instance = null;

    /**
     * @return GRN_Netmeeting_PersonalLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * @access private
     */
    function _getUserProfile($user)
    {
        $profile = $this->getUserProfile($user);

        return $profile;
    }

    /**
     * メール転送の転送タイプの設定
     *
     * @param   int
     */
    public function setForwardMailType($user, $type)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_FORWARDMAIL_TYPE, $type);
    }

    /**
     * メール転送の転送タイプの取得
     *
     * @return  int
     */
    public function getForwardMailType($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_NETMEETING_FORWARDMAIL_TYPE,
            $value);
        if ($ret === false) {
            $value = GRN_NETMEETING_FORWARD_TYPE_MAIL;
        }

        return $value;
    }

    /**
     * メール転送のメールアドレスの設定
     *
     * @param   string $mail_address
     */
    public function setForwardMailAddress($user, $mail_address)
    {
        if ( ! $user) {
            return false;
        }
        $profile = $this->_getUserProfile($user);

        // プロファイルの設定
        require_once('schedule/utility.csp');

        return grn_schedule_updateAttribute($profile,
            GRN_NETMEETING_FORWARDMAIL_ADDRESS, $mail_address);
    }

    /**
     * メール転送のメールアドレスの取得
     *
     * @return  string
     */
    public function getForwardMailAddress($user)
    {
        $profile = $this->_getUserProfile($user);

        $value = null;
        $ret = $profile->getAttribute(GRN_NETMEETING_FORWARDMAIL_ADDRESS,
            $value);
        if ($ret === false) {
            $value = '';
        }

        return $value;
    }

    /**
     * 転送するときのメールアドレスの取得
     *
     * @param   object CB_User  $user
     *
     * @return  mixed   転送する設定がしてある場合は、転送先のメールアドレス、それ以外はFALSE
     */
    function getNetmeetingForwardMailAddress($user)
    {
        if ( ! is_a($user, 'CB_User')) {
            return false;
        }

        $address = '';
        $type = $this->getForwardMailType($user);
        // 設定されているメールアドレス
        if ($type == GRN_NETMEETING_FORWARD_TYPE_MAIL) {
            $address = $user->get('email_address');
        } // その他のメールアドレス
        elseif ($type == GRN_NETMEETING_FORWARD_TYPE_OTHER) {
            $address = $this->getForwardMailAddress($user);
        }

        // 文字列じゃない
        if ( ! is_string($address)) {
            return false;
        }

        // 空
        require_once('fw/string_util.csp');
        if (mb_strlen(cb_trim($address)) == 0) {
            return false;
        }

        return $address;
    }

}


