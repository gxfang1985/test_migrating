<?php

/**
 * Inspection for Schedule.
 *
 * @author  KAWAGUCHI Yoshihiro 2007/06
 * @version 1.0
 * @package grn.schedule
 */

class GRN_Schedule_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @return GRN_Schedule_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    protected $_logger = null;

    private $_uum = null;

    function __construct()
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();

        parent::__construct('grn.schedule');

        $this->_logger = $logger_manager->getLogger($this->getModuleId());

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
    }

    function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    function record($action, $target, $params = [])
    {
        $this->_logger->noticeEx($action, $target, $params);
    }
}

class GRN_Facility_Facility_Local_Inspection extends GRN_Schedule_Inspection
{
    /** Inspacetion Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        parent::__construct();

        $template_list = [
            'facility_local_add'           => [
                'action' => 'create',
                'target' => 'facility_local',
            ],
            'facility_local_modify'        => [
                'action' => 'modify',
                'target' => 'facility_local',
            ],
            'facility_local_delete'        => [
                'action' => 'delete',
                'target' => 'facility_local',
            ],
            'facility_local_add_import'    => [
                'action' => 'import',
                'target' => 'facility_local',
            ],
            'facility_local_modify_import' => [
                'action' => 'import',
                'target' => 'facility_local',
            ],
            'facility_local_delete_import' => [
                'action' => 'import_delete',
                'target' => 'facility_local',
            ],
            'facility_local_export'        => [
                'action' => 'export',
                'target' => 'facility_local',
            ],
        ];

        //Set Template List
        $this->_template_list = $template_list;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function isEnabled($threshold = 'notice')
    {
        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $this->_logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $this->_logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $this->_logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $this->_logger->isNoticeEnabled();
                break;
            case 'info':
                $result = $this->_logger->isInfoEnabled();
                break;
            case 'debug':
                $result = $this->_logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Record Inspection Message
     *
     * @param  string $message_type //Inspection Message Type
     * @param  array  $message_args //Inspection Message Argument List
     *
     * @return bool   $result                     //Result
     */
    function write($message_type, $message_args = [])
    {
        //Get Inspaction Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

class GRN_Facility_Facilitygroup_Local_Inspection
    extends GRN_Schedule_Inspection
{
    /** Inspacetion Message Template List **/
    var $_template_list = null;

    /**
     * Constructor
     *
     */
    public function __construct()
    {
        parent::__construct();

        $template_list = [
            'facilitygroup_local_add'           => [
                'action' => 'create',
                'target' => 'facilitygroup_local',
            ],
            'facilitygroup_local_modify'        => [
                'action' => 'modify',
                'target' => 'facilitygroup_local',
            ],
            'facilitygroup_local_delete'        => [
                'action' => 'delete',
                'target' => 'facilitygroup_local',
            ],
            'facilitygroup_local_add_import'    => [
                'action' => 'import',
                'target' => 'facilitygroup_local',
            ],
            'facilitygroup_local_modify_import' => [
                'action' => 'import',
                'target' => 'facilitygroup_local',
            ],
            'facilitygroup_local_delete_import' => [
                'action' => 'import_delete',
                'target' => 'facilitygroup_local',
            ],
            'facilitygroup_local_export'        => [
                'action' => 'export',
                'target' => 'facilitygroup_local',
            ],
        ];

        //Set Template List
        $this->_template_list = $template_list;
    }

    /** @var self */
    private static $_instance = null;

    /**
     * @return self
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    function isEnabled($threshold = 'notice')
    {
        //Check Threshold
        $result = false;
        switch ($threshold) {
            case 'critical':
                $result = $this->_logger->isCriticalEnabled();
                break;
            case 'error':
                $result = $this->_logger->isErrorEnabled();
                break;
            case 'warning':
                $result = $this->_logger->isWarningEnabled();
                break;
            case 'notice':
                $result = $this->_logger->isNoticeEnabled();
                break;
            case 'info':
                $result = $this->_logger->isInfoEnabled();
                break;
            case 'debug':
                $result = $this->_logger->isDebugEnabled();
                break;
            default:
                $result = false;
                break;
        }

        //Return Result
        return $result;
    }

    /**
     * Record Inspection Message
     *
     * @param  string $message_type //Inspection Message Type
     * @param  array  $message_args //Inspection Message Argument List
     *
     * @return bool   $result                     //Result
     */
    function write($message_type, $message_args = [])
    {
        //Get Inspection Message Template
        if ( ! array_key_exists($message_type, $this->_template_list)) {
            return false;
        }
        $message_template = $this->_template_list[$message_type];

        $message_action = $message_template['action'];
        $message_target = $message_template['target'];

        $this->_logger->noticeEx($message_action, $message_target,
            $message_args);

        //Return Result
        return true;
    }
}

