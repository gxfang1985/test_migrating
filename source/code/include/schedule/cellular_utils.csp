<?php

class GRN_ScheduleCellularUtil
{

    /**
     * 施設の配列を作る
     *
     * @param      $group_id 施設グループ ID。全施設、ルートのときは NULL
     * @param      $user
     * @param      $dynamic_roles
     * @param      $access
     * @param      $fsl
     * @param      $acc
     * @param      $sys
     * @param bool $lax_evaluate
     *
     * @return array|null
     */
    public static function makeFacilityArray(
        $group_id,
        $user,
        &$dynamic_roles,
        $access,
        $fsl,
        $acc,
        $sys,
        $lax_evaluate = false
    ) {
        assert('is_null( $group_id ) || is_int( intval( $group_id ) )');

        $allow_all_facilities = $sys->getAllowAllFacilities();
        $facilities = null;

        if ($group_id) {
            if (substr($group_id, 0, 1) == 'm') {
                global $G_container_base;
                $uum = $G_container_base->getInstance('uum');
                $login = cb_get_login_user();

                $facilities_tmp = $fsl->getOrderedFacilityPartInfoList();
                $facilities_tmp = $acc->evaluateAccessesById($login,
                    $facilities_tmp, ['read'], $dynamic_roles, 'facility');
                $facilities_in_mygroup
                    = $uum->getMyGroupFacilitiesId(substr($group_id,
                    1));

                foreach ($facilities_in_mygroup as $key) {
                    if (array_key_exists($key, $facilities_tmp)) {
                        $facilities[] = $fsl->getFacility($key);
                    }
                }
            } else {
                $group = $fsl->getFacilityGroup($group_id);
                if ($group === false) {
                    cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
                }
                $facilities = $fsl->getGroupFacilities($group->getOID());
            }
        } else {
            if ( ! $allow_all_facilities) {
                return [];
            }
            $facilities = $fsl->getGroupFacilities();
        }

        $facilities = $acc->evaluateAccessesById($user, $facilities, $access,
            $dynamic_roles, "facility", false, $lax_evaluate);

        return $facilities;
    }

    /**
     * 階層がある施設グループを表現するための配列を作る
     *
     * @param int|string                $group_id 施設グループ ID。全施設、ルートのときは NULL
     * @param                           $user
     * @param                           $dynamic_roles
     * @param                           $access
     * @param GRN_Facility_SystemLogic  $fsl
     * @param GRN_Schedule_Access_Logic $acc
     * @param GRN_Schedule_SystemLogic  $sys
     * @param string                    $prefix
     * @param null|string               $page_name
     * @param bool                      $lax_evaluate
     *
     * @return array
     */
    public static function makeFacilityGroupArray(
        $group_id,
        $user,
        &$dynamic_roles,
        $access,
        $fsl,
        $acc,
        $sys,
        $prefix = '',
        $page_name = null,
        $lax_evaluate = false
    ) {
        $f_list = [];
        $fhm = GRN_Facility_HistoryManager::getInstance();
        $uum = cb_lwc_uum();

        //Mygroup
        $mygroups = null;
        if (GRN_ScheduleCellularUtil::isShowMyGroupOnFacilitySelection($page_name)) {
            $login = cb_get_login_user();
            $mygroups = $uum->getMyGroupsInfo($login->getOID(), 'facility');
            if (count($mygroups) > 0) {
                foreach ($mygroups as $mygroup) {
                    $mygroup_id = $mygroup['_id'];
                    $mygroup_name = $mygroup['col_name'];
                    $f_list[] = [
                        'id'          => $prefix . "m$mygroup_id",
                        'name'        => $mygroup_name . cb_msg('grn.grn',
                                'GRN_GRN-813') . cb_msg('grn.grn',
                                'GRN_GRN-814'),
                        'extra_param' => '1'
                    ];
                }
            }
        }

        //set often used facility group
        $oftenused_facility_groups
            = $fhm->getOftenusedFacilityGroups($user->getOID());
        if (count($oftenused_facility_groups)) {
            $tmp_facilitygroup
                = $fsl->getFacilityGroupsInfo($oftenused_facility_groups);
            $ret_facilitygroup = [];

            foreach ($oftenused_facility_groups as $fgid) {
                $fg = $tmp_facilitygroup[$fgid];
                $key = $fg['_id'];
                $ret_facilitygroup[$key] = [
                    'oid'         => $key,
                    'name'        => $fg['col_name'],
                    'children'    => [],
                    'count'       => 0,
                    'extra_param' => '1'
                ];
            }
            $oftenused_facility_groups = $ret_facilitygroup;
            unset($tmp_facilitygroup);
        }
        if ( ! is_null($oftenused_facility_groups)) {
            $oftenused_facility_groups = $acc->evaluateAccessesById($user,
                $oftenused_facility_groups, $access, $dynamic_roles,
                'facilitygroup', false, $lax_evaluate);
            foreach ($oftenused_facility_groups as $_group) {
                if (GRN_ScheduleCellularUtil::checkFacilityExists($_group['oid'],
                        $user, $dynamic_roles, $access, $fsl, $acc) > 0
                ) {
                    $f_list[] = [
                        'id'          => $prefix . $_group['oid'],
                        'name'        => $_group['name'],
                        'extra_param' => '1'
                    ];
                }
            }
        }

        // 最近選択した施設グループを作成
        $frequent_facility_groups
            = $fhm->getFacilityGroupHistory($user->getOID());
        if (count($frequent_facility_groups)) {
            $tmp_facilitygroup
                = $fsl->getFacilityGroupsInfo($frequent_facility_groups);
            $ret_facilitygroup = [];

            foreach ($frequent_facility_groups as $fgid) {
                $fg = $tmp_facilitygroup[$fgid];
                $key = $fg['_id'];
                if (array_key_exists($key, $oftenused_facility_groups)) {
                    continue;
                }
                $ret_facilitygroup[$key] = [
                    'oid'         => $key,
                    'name'        => $fg['col_name'],
                    'children'    => [],
                    'count'       => 0,
                    'extra_param' => '2'
                ];
            }
            $frequent_facility_groups = $ret_facilitygroup;
            unset($tmp_facilitygroup);
        }
        if ( ! is_null($oftenused_facility_groups)) {
            $frequent_facility_groups = $acc->evaluateAccessesById($user,
                $frequent_facility_groups, $access, $dynamic_roles,
                'facilitygroup', false, $lax_evaluate);
            foreach ($frequent_facility_groups as $_group) {
                if (GRN_ScheduleCellularUtil::checkFacilityExists($_group['oid'],
                        $user, $dynamic_roles, $access, $fsl, $acc) > 0
                ) {
                    $f_list[] = [
                        'id'          => $prefix . $_group['oid'],
                        'name'        => $_group['name'],
                        'extra_param' => '2'
                    ];
                }
            }
        }

        if (count($f_list) > 0) {
            $f_list[] = [
                'id'          => ($group_id != null) ? $prefix . $group_id
                    : $prefix . '0',
                'name'        => '----------',
                'extra_param' => '-'
            ];
        }

        $allow_all_facilities = $sys->getAllowAllFacilities();

        if ($allow_all_facilities) {
            $f_list[] = [
                'id'          => $prefix . '0',
                'name'        => cb_msg('grn.schedule', 'facility_all'),
                'extra_param' => null
            ];
        } else {
            $f_list[] = [
                'id'          => $prefix . '0',
                'name'        => cb_msg('grn.cellular.common',
                    'selectbox_root',
                    [
                        'rootname' => cb_msg('grn.cellular.common',
                            'group_rootname')
                    ]),
                'extra_param' => null
            ];

        }
        if (is_string($group_id)
            && strlen($group_id) > 0
            && substr($group_id, 0, 1) != 'm'
            && $group_id != '0'
        ) {
            $tmp_array = [$group_id => $group_id];
            $ancestors = $fsl->getAncestors($tmp_array);
            $ancestors = $ancestors[$group_id];

            if (count($ancestors) >= 2) {
                $ancestor = $fsl->getFacilityGroup($ancestors[1]);
                $f_list[] = [
                    'id'          => $prefix . $ancestor->getOID(),
                    'name'        => cb_msg('grn.cellular.common',
                        'selectbox_up'),
                    'extra_param' => null
                ];
            } else {
                $f_list[] = [
                    'id'          => $prefix . '0',
                    'name'        => cb_msg('grn.cellular.common',
                        'selectbox_up'),
                    'extra_param' => null
                ];
            }
            $selected_group = $fsl->getFacilityGroup($group_id);
            $f_list[] = [
                'id'          => $prefix . $selected_group->getOID(),
                'name'        => $selected_group->get('name'),
                'extra_param' => null
            ];
        }

        $facility_groups = $fsl->getFacilityGroupChildren($group_id);
        if ( ! is_null($facility_groups)) {
            $facility_groups = $acc->evaluateAccessesById($user,
                $facility_groups, $access, $dynamic_roles, 'facilitygroup',
                false, $lax_evaluate);
            foreach ($facility_groups as $_group) {
                if (GRN_ScheduleCellularUtil::checkFacilityExists($_group->getOID(),
                        $user, $dynamic_roles, $access, $fsl, $acc) > 0
                ) {
                    $f_list[] = [
                        'id'          => $prefix . $_group->getOID(),
                        'name'        => $_group->get('name'),
                        'extra_param' => null
                    ];
                }
            }
        }

        return $f_list;
    }


    public static function checkFacilityExists(
        $group_id,
        $user,
        &$dynamic_roles,
        &$access,
        $fsl,
        $acc
    ) {
        $facilities = $fsl->getGroupFacilities($group_id);
        if (count($acc->evaluateAccessesById($user, $facilities, $access,
            $dynamic_roles, 'facility'))
        ) {
            return true;
        }
        $next_groups = $fsl->getFacilityGroupChildrenInfo($group_id);
        $next_groups = $acc->evaluateAccessesById($user, $next_groups, $access,
            $dynamic_roles, 'facilitygroup');
        if (count($next_groups) == 0) {
            return false;
        }
        foreach ($next_groups as $group) {
            if (GRN_ScheduleCellularUtil::checkFacilityExists($group['_id'],
                $user, $dynamic_role, $access, $fsl, $acc)
            ) {
                return true;
            }
        }

        return false;
    }

    public static function isShowMyGroupOnFacilitySelection($page_name)
    {
        $list_screen_support_my_group = [
            'schedule/cellular/add_facility',
        ];

        if (array_search($page_name, $list_screen_support_my_group) !== false) {
            return true;
        }

        return false;
    }
}
