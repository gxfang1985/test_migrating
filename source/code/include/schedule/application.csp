<?php

use grn\fw\DistributorDBConvert;
use grn\grn\access\service\AppAccess;
use grn\grn\customization\CustomizationJsCssLoader;
use grn\grn\push_notification\PushNotificationRegister;
use grn\grn\push_notification\schedule\PushConversionDataOfAppointment;
use grn\grn\push_notification\schedule\PushConversionDataOfAttendanceConfirm;
use grn\grn\push_notification\schedule\PushConversionDataOfFacilityRequest;
use grn\grn\push_notification\schedule\PushConversionDataOfFacilityResponse;
use grn\schedule\AttendanceStatusLogic;
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\ScheduleMemberLogic;
use grn\schedule\bean\AttendanceStatus;
use grn\schedule\bean\FacilityApproval;

require_once('grn/application.csp');
require_once('grn/controller.csp');
require_once('schedule/error_code.csp');
require_once('schedule/resources.csp');
require_once('schedule/netmeeting_resources.csp');
require_once('schedule/notification.csp');

/**
 * @package     grn.schedule
 */
class GRN_Schedule_Application extends GRN_ApplicationBase
{
    public $facilityConflictHandler;

    function __construct()
    {
        parent::__construct('schedule');
    }

    /** @var GRN_Schedule_Application */
    private static $_instance = null;

    /**
     * @access private
     */
    private $_attendanceCheckEventCount = [];

    /**
     * @access private
     */
    private $_facilityApprovalRequestNum = [];

    /**
     * @return GRN_Schedule_Application
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    public function initializeDatabase()
    {
        parent::initializeDatabase();
        $distributor = new DistributorDBConvert();
        $distributor->convertSchedule();
    }

    protected function initializeSystemProfile()
    {
        parent::initializeSystemProfile();

        cb_get_system_profile(GRN_NETMEETING_MODULE_ID
                              . '.system')->removeAttributes();
        cb_get_system_profile(GRN_FACILITY_MODULE_ID
                              . '.system')->removeAttributes();
    }

    /**
     * after initialize schedule application,
     * truncate tab_grn_report_reportschedulerelation.
     */
    public function initialize()
    {
        parent::initialize();
        $reportScheduleRelation
            = new \grn\report\dao\ReportScheduleRelationDAO();
        $reportScheduleRelation->removeUnnecessaryReportScheduleRelation();
    }

    /**
     * @param null|string $name
     *
     * @return mixed
     */
    function getConfig($name = null)
    {
        return parent::getConfig($name);
    }

    /**
     * @access private
     */
    private $_base_logic = null;

    /**
     * @access private
     */
    function _getEventBaseLogic()
    {
        if (is_null($this->_base_logic)) {
            require_once('schedule/event_base_logic.csp');
            $this->_base_logic = new GRN_Schedule_EventBaseLogic();
        }

        return $this->_base_logic;
    }

    /**
     * アプリケーションポートレットリストの取得
     *
     * @return array $portlet_list
     *          このアプリケーションが持つ
     *          アプリケーションポートレット情報を返します
     */
    function &getPortletList()
    {
        //アプリケーションポートレットリストの生成
        $portlet_list = [];

        //アプリケーションポートレットの定義
        $group_day_portlet = [
            'name'             => cb_msg('grn.schedule', 'portlet_groupday'),
            //名前
            'type'             => 'grn.schedule.group_day',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'schedule/portlet/set_group_day.csp',
            //設定用テンプレート名
            'command_template' => 'schedule/portlet/command_set_group.csp',
            //設定用テンプレート名
            'view_template'    => 'schedule/portlet/view_group_day.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $group_day_portlet;

        $group_week_portlet = [
            'name'             => cb_msg('grn.schedule',
                'portlet_group_schedule'),
            //名前
            'type'             => 'grn.schedule.user_week',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'schedule/portlet/set_user_week.csp',
            //設定用テンプレート名
            'command_template' => 'schedule/portlet/command_set_group.csp',
            //設定用テンプレート名
            'view_template'    => 'schedule/portlet/view_user_week.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $group_week_portlet;

        $user_day_portlet = [
            'name'             => cb_msg('grn.schedule', 'portlet_day'),
            //名前
            'type'             => 'grn.schedule.personal_day',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'schedule/portlet/set_personal_day.csp',
            //設定用テンプレート名
            'command_template' => 'schedule/portlet/command_set_personal.csp',
            //設定用テンプレート名
            'view_template'    => 'schedule/portlet/view_personal_day.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $user_day_portlet;

        $personal_week_portlet = [
            'name'             => cb_msg('grn.schedule', 'portlet_week'),
            //名前
            'type'             => 'grn.schedule.personal_week',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'schedule/portlet/set_personal_week.csp',
            //設定用テンプレート名
            'command_template' => 'schedule/portlet/command_set_personal.csp',
            //設定用テンプレート名
            'view_template'    => 'schedule/portlet/view_personal_week.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $personal_week_portlet;

        $personal_month_portlet = [
            'name'             => cb_msg('grn.schedule', 'portlet_month'),
            //名前
            'type'             => 'grn.schedule.personal_month',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'schedule/portlet/set_personal_month.csp',
            //設定用テンプレート名
            'command_template' => 'schedule/portlet/command_set_personal.csp',
            //設定用テンプレート名
            'view_template'    => 'schedule/portlet/view_personal_month.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $personal_month_portlet;

        $personal_year_portlet = [
            'name'             => cb_msg('grn.schedule', 'portlet_year'),
            //名前
            'type'             => 'grn.schedule.personal_year',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'schedule/portlet/set_personal_year.csp',
            //設定用テンプレート名
            'command_template' => 'schedule/portlet/command_set_font.csp',
            //設定用テンプレート名
            'view_template'    => 'schedule/portlet/view_personal_year.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $personal_year_portlet;

        // search
        $search_schedule_portlet = [
            'name'             => cb_msg('grn.schedule',
                'portlet_search_schedule'),
            //名前
            'type'             => 'grn.schedule.search_schedule',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => null,
            //設定用テンプレート名
            'command_template' => null,
            //設定用テンプレート名
            'view_template'    => 'schedule/portlet/view_search_schedule.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $search_schedule_portlet;

        return $portlet_list;
    }

    /**
     * イベントの詳細の取得
     *
     * @param   mixed  $user      ユーザーまたはNULL。ユーザーの場合は、非公開予定のチェックを行う。
     * @param   string $eid       イベントID
     * @param   mixed  $date      取得する日付または、NULL。日付を指定した場合は、その日付に予定の日時が入っているかをチェックする
     * @param   int    $lock_mode DBのロックモード
     * @param   bool   $throw_error
     * @param   int    $get_mode
     *
     * @return mixed       イベントオブジェクトまたは、FALSE
     */
    function getEvent(
        $user,
        $eid,
        $date = null,
        $lock_mode = CB_DATABASE_SHARED_LOCK,
        $throw_error = true,
        $get_mode = GRN_SCHEDULE_GET_MEMBER_OBJECT
    ) {
        require_once('schedule/eventfactory.csp');
        $factory = GRN_Schedule_EventFactory::getInstance();
        $event = $factory->getEvent($eid, $date, $lock_mode, $get_mode);

        if ($event && $event->private > GRN_EVENT_PRIVATE_NONE) {
            $is_event_available = ScheduleMemberLogic::getInstance()
                                                     ->isEventAvailableForUser($user,
                                                         $event, $get_mode);
            if ($is_event_available) {
                return $event;
            }

            // チェックではじかれた場合は、エラー
            if ($throw_error) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
            }

            $event = false;
        }

        return $event;
    }

    /**
     * 指定された参加者がほかの予定と時刻がぶつかっているかをチェックする
     *
     * @param       CB_User     $user          ログインユーザー
     * @param       array       $members       チェックするメンバー
     * @param       CB_DateTime $setdatetime   開始日時
     * @param       CB_DateTime $enddatetime   開始日時
     * @param       string      $event_id      イベントID
     * @param       int         $event_type    イベントの種類
     * @param       boolean     $hiddenprivate 非公開を隠すかどうか
     *
     * @return      array   チェックした結果。
     */
    function conflictMembersEvent(
        $user,
        $members,
        $setdatetime,
        $enddatetime,
        $event_id,
        $event_type,
        $hiddenprivate
    ) {
        require_once('schedule/eventfactory.csp');
        $factory = GRN_Schedule_EventFactory::getInstance();

        return $factory->conflictMembersEvent($user, $members, $setdatetime,
            $enddatetime, $event_id, $event_type, $hiddenprivate);
    }

    /**
     * 指定した期間の予定を取得する
     *
     * @param   mixed   $member          取得するユーザー/組織/施設
     * @param   mixed   $setdate         開始日（CB_Data）または、開始日時（CB_DataTime）
     * @param   mixed   $enddate         終了日（CB_Data）（この日を含める）または、終了日時（CB_DataTime）
     * @param   CB_User $login           ログインユーザー
     * @param   int     $type            取得する予定の種類（GRN_SCHEDULE_EVENT_TYPE_NORMAL,GRN_SCHEDULE_EVENT_TYPE_BANNER,GRN_SCHEDULE_EVENT_TYPE_ALLDAYの組み合わせ）
     * @param   boolean $hidden          非公開のデータを取得するかどうか
     * @param   boolean $b_checkconflict 予定の衝突のチェック
     *
     * @return  array       予定の連想配列
     */
    function getEvents(
        & $member,
        $setdate,
        $enddate,
        & $login,
        $type,
        $hidden = false,
        $b_checkconflict = true,
        $isEnableAttendanceCheck = false
    ) {
        static $_logic = null;

        if (is_null($_logic)) {
            $_logic = $this->_getEventBaseLogic();;
        }

        $events = [];

        if (($type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            $events['allday'] = $_logic->getAllDayEvents($member, $setdate,
                $enddate, $login, $isEnableAttendanceCheck);
        }

        if (($type & GRN_SCHEDULE_EVENT_TYPE_BANNER)
            == GRN_SCHEDULE_EVENT_TYPE_BANNER
        ) {
            $events['banner'] = $_logic->getBannerEvents($member, $setdate,
                $enddate, $login);
        }

        if (($type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
            == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            $events['normal'] = $_logic->getNormalEvents(
                $member, $setdate, $enddate, $login, $hidden, $b_checkconflict,
                $isEnableAttendanceCheck
            );
        }

        if (($type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
            == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
        ) {
            $events['daily'] = $_logic->getDailyEvents($member, $setdate,
                $enddate, $login, $isEnableAttendanceCheck);
        }

        return $events;
    }

    /**
     * 1週間単位で予定を取得する
     *
     * @param   mixed   $member          取得するユーザー/組織/施設
     * @param   mixed   $setdate         開始日（CB_Data）または、開始日時（CB_DataTime）
     * @param   mixed   $enddate         終了日（CB_Data）（この日を含める）または、終了日時（CB_DataTime）
     * @param   CB_User $login           ログインユーザー
     * @param   int     $type            取得する予定の種類（GRN_SCHEDULE_EVENT_TYPE_NORMAL,GRN_SCHEDULE_EVENT_TYPE_BANNER,GRN_SCHEDULE_EVENT_TYPE_ALLDAYの組み合わせ）
     * @param   boolean $hidden          非公開のデータを取得するかどうか
     * @param   array   $dates           取得する期間の日付のデータの配列
     * @param   boolean $b_checkconflict 予定の衝突のチェック
     *
     * @return  array       予定の連想配列
     */
    function getEventsForWeek(
        & $member,
        $setdate,
        $enddate,
        & $login,
        $type,
        $hidden = false,
        $dates = null,
        $b_checkconflict = false,
        $isEnableAttendanceCheck = false
    ) {
        // 日付がない場合は日付を作成
        if ( ! is_array($dates) || count($dates) == 0) {
            $dates = [];

            $dateex = new CB_DateEx($setdate);
            while ($dateex->compare($enddate) <= 0) {
                $dates[] = ['date' => $dateex, 'format' => $dateex->format()];
                $dateex->moveDays(1);
            }
        }

        $events = $this->getEvents($member, $setdate, $enddate, $login, $type,
            $hidden, false, $isEnableAttendanceCheck);

        $retval_allday = [];
        $retval_normal = [];
        foreach (array_keys($dates) as $key) {
            if (($type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
                == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
            ) {
                $retval_allday[$dates[$key]['format']]
                    = $this->_getDayEvents_AllDay($dates[$key]['date'],
                    $events['daily']);
            }

            if (($type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
                == GRN_SCHEDULE_EVENT_TYPE_NORMAL
            ) {
                $retval_normal[$dates[$key]['format']]
                    = $this->_getDayEvents_Normal($dates[$key]['date'],
                    $events['normal'], $b_checkconflict);
            }
        }

        $retval_banner = [];
        if (($type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
            == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
        ) {
            foreach (array_keys($events['daily']) as $key) {
                $event = &$events['daily'][$key];
                if (array_key_exists('banner', $event) && $event['banner']) {
                    $retval_banner[] = $event;
                }
            }
        }

        $retval = [];
        $retval['allday'] = $retval_allday;
        $retval['normal'] = $retval_normal;
        $retval['banner'] = $retval_banner;

        return $retval;
    }

    /**
     * @param      $member
     * @param      $setdate
     * @param      $enddate
     * @param      $login
     * @param      $type
     * @param      $hidden
     * @param bool $b_checkconflict
     * @param bool $isEnableAttendanceCheck
     *
     * @return array
     */
    function getEventsForExportIcs(
        & $member,
        $setdate,
        $enddate,
        & $login,
        $type,
        $hidden = false,
        $b_checkconflict = true,
        $isEnableAttendanceCheck = false
    ) {
        static $_logic = null;

        if (is_null($_logic)) {
            $_logic = $this->_getEventBaseLogic();;
        }

        $results = [];

        if (($type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
            == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            //GTM-1632
            $events = $_logic->getNormalEventsForExportICS(
                $member, $setdate, $enddate, $login, $hidden, $b_checkconflict,
                $isEnableAttendanceCheck
            );
            if (is_array($events)) {
                $results += $events;
            }
        }

        if (($type & GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT)
            == GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT
        ) {
            //GTM-1632
            $events = $_logic->getDailyEventsForExportICS(
                $member, $setdate, $enddate, $login, $isEnableAttendanceCheck
            );
            if (is_array($events)) {
                $results += $events;
            }
        }

        return $results;
    }

    /**
     * 終日予定からデータを各日ごとに分解する
     *
     * @access private
     */
    function _getDayEvents_AllDay(& $date, & $events)
    {
        $dayevents = [];
        // 日付の比較
        foreach (array_keys($events) as $key) {
            $event = &$events[$key];

            if ($event['banner']) {
                continue;
            }

            if ($date->compare($event['enddate']) == 0) {
                $dayevents[] = $event;
                // 終わりの場合はリストから消す
                unset($events[$key]);
            } elseif ($date->compare($event['setdate']) >= 0) {
                $dayevents[] = $event;
            }
        }

        return $dayevents;
    }

    /**
     * 日付の比較を行う
     */
    function compareDate($date1, $date2)
    {
        $ydiff = $date1->year - $date2->year;
        if ($ydiff !== 0) {
            return $ydiff;
        }

        $mdiff = $date1->month - $date2->month;
        if ($mdiff !== 0) {
            return $mdiff;
        }

        $ddiff = $date1->day - $date2->day;
        if ($ddiff !== 0) {
            return $ddiff;
        }

        return 0;
    }

    /**
     * @access private
     */
    function _getDayEvents_Normal(& $date, & $events, $b_checkconflict)
    {
        $dayevents = [];
        // 日付の比較
        foreach (array_keys($events) as $key) {
            $event = &$events[$key];
            if ($event[AttendanceStatus::ATTENDANCE_CHECK_USING]
                && $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                   == AttendanceStatus::STATUS_ABSENT
            ) {
                continue;
            }
            if ($event['enddatetime']->compare($event['setdatetime']) != 0
                && $event['enddatetime']->hour == 0
                && $event['enddatetime']->minute == 0
                && $this->compareDate($event['enddatetime'], $date) == 0
            ) {
                unset($events[$key]);
            } elseif ($this->compareDate($event['enddatetime'], $date) <= 0) {
                if ($b_checkconflict) {
                    if ($this->_isConflict($dayevents, $event['setdatetime'])) {
                        $event['conflict'] = true;
                    } else {
                        $event['conflict'] = false;
                    }
                }
                $dayevents[] = $event;
                unset($events[$key]);
            } elseif ($this->compareDate($event['setdatetime'], $date) <= 0) {
                if ($b_checkconflict) {
                    if ($this->_isConflict($dayevents, $event['setdatetime'])) {
                        $event['conflict'] = true;
                    } else {
                        $event['conflict'] = false;
                    }
                }
                $dayevents[] = $event;
            }
        }

        return $dayevents;
    }

    /**
     * 衝突マーク
     *
     * @access private
     */
    function _isConflict(& $events, $datetime)
    {
        foreach (array_keys($events) as $key) {
            $item = &$events[$key];
            $setdatetime = $item['setdatetime'];
            $enddatetime = $item['enddatetime'];

            // 開始時間が同じ場合は衝突
            if ($setdatetime->compare($datetime) == 0) {
                if ( ! array_key_exists('conflict', $item)
                     || $item['conflict'] == false
                ) {
                    // 1回目がチェックできないので入れ替え
                    $item['conflict'] = true;
                }

                return true;
            } elseif ($enddatetime->compare($datetime) > 0) {
                if ( ! array_key_exists('conflict', $item)
                     || $item['conflict'] == false
                ) {
                    // 1回目がチェックできないので入れ替え
                    $item['conflict'] = true;
                }

                return true;
            }

        }

        return false;
    }

    /**
     * 予定の登録
     *
     * @param   \GRN_Schedule_EventBase $event イベントオブジェクト
     *
     * @return  mixed                      成功した場合はそのイベントID、それ以外はFALSE
     */
    function entryEvent($event)
    {
        $logic = null;
        // 繰り返しの場合
        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            require_once('schedule/repeat_event_logic.csp');
            $logic = GRN_Schedule_RepeatEventLogic::getInstance();
            $logic->facilityConflictHandler = $this->facilityConflictHandler;
        } // バナーの場合
        elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
            require_once('schedule/banner_event_logic.csp');
            $logic = GRN_Schedule_BannerEventLogic::getInstance();
        } // 仮予定の場合
        elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            require_once('schedule/temporary_event_logic.csp');
            $logic = GRN_Schedule_TemporaryEventLogic::getInstance();
        } // それ以外（通常予定）の場合
        elseif (is_a($event, 'GRN_Schedule_NormalEvent')) {
            require_once('schedule/normal_event_logic.csp');
            $logic = GRN_Schedule_NormalEventLogic::getInstance();
        } else {
            cb_throw_error();
        }

        return $logic->entryEvent($event);
    }

    /**
     * 予定の変更
     *
     * @param   \GRN_SChedule_Event $newevent 新しいイベントオブジェクト
     * @param   CB_Date             $date     予定の現在のタイムゾーンにおける日付
     * @param   string              $apply    変更区分
     * @param   null                $start_date
     * @param   null                $end_date
     *
     * @return  mixed              成功した場合はそのイベントID、それ以外はFALSE
     */
    function modifyEvent(
        & $newevent,
        $date = null,
        $apply = null,
        $start_date = null,
        $end_date = null
    ) {
        // 繰り返しの場合
        if (is_a($newevent, 'GRN_Schedule_RepeatEvent')) {
            require_once('schedule/repeat_event_logic.csp');
            $logic = GRN_Schedule_RepeatEventLogic::getInstance();
            $logic->facilityConflictHandler
                = $this->facilityConflictHandler;//GTM-143
        } // バナーの場合
        elseif (is_a($newevent, 'GRN_Schedule_BannerEvent')) {
            require_once('schedule/banner_event_logic.csp');
            $logic = GRN_Schedule_BannerEventLogic::getInstance();
        } // 仮予定の場合
        elseif (is_a($newevent, 'GRN_Schedule_TemporaryEvent')) {
            require_once('schedule/temporary_event_logic.csp');
            $logic = GRN_Schedule_TemporaryEventLogic::getInstance();
        } // それ以外（通常予定）の場合
        elseif (is_a($newevent, 'GRN_Schedule_NormalEvent')) {
            require_once('schedule/normal_event_logic.csp');
            $logic = GRN_Schedule_NormalEventLogic::getInstance();
        } else {
            cb_throw_error();
        }

        if (is_a($newevent, 'GRN_Schedule_RepeatEvent') && $start_date != null
            && $end_date != null
        ) {
            $ret = $logic->modifyEvent($newevent, $date, $apply, $start_date,
                $end_date);
        } else {
            $ret = $logic->modifyEvent($newevent, $date, $apply);
        }

        return $ret;
    }

    /**
     * 日時の変更なしで予定を変更する
     * GRN2-3198対策
     *
     * @param GRN_Schedule_EventBase $event
     * @param CB_Date                $date
     * @param string                 $apply
     *
     * @return int or FALSE  イベントID or FALSE
     */
    public function modifyEventWithoutDateTime(
        $event,
        $date = null,
        $apply = null
    ) {
        require_once('schedule/event_base_logic.csp');
        $current_timezone = CB_I18N::getInstance()->getCurrentTimezone();
        $new_event
            = GRN_Schedule_EventBaseLogic::getEventWithEventTimezoneDateTime($event,
            $current_timezone);
        $event_id = $this->modifyEvent($new_event, $date, $apply);

        // For notification, copy date list from modified event.
        if ($new_event instanceof GRN_Schedule_RepeatEvent) {
            $event->_date_list = $new_event->_date_list;
        }

        return $event_id;
    }

    /**
     * 予定の削除
     *
     * @param    CB_User        $user  削除した人
     * @param   string          $eid   イベントID
     * @param                   $event_type
     * @param   CB_Date         $date  日付
     * @param   string          $apply 削除区分
     *
     * @return  mixed           成功した場合はTRUE、それ以外はFALSE
     */
    function deleteEvent($user, $eid, $event_type, $date = null, $apply = null)
    {
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
            == GRN_SCHEDULE_EVENT_TYPE_REPEAT
        ) {
            require_once('schedule/repeat_event_logic.csp');
            $logic = GRN_Schedule_RepeatEventLogic::getInstance();
        } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_BANNER)
                  == GRN_SCHEDULE_EVENT_TYPE_BANNER
        ) {
            require_once('schedule/banner_event_logic.csp');
            $logic = GRN_Schedule_BannerEventLogic::getInstance();
        } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_TEMPORARY)
                  == GRN_SCHEDULE_EVENT_TYPE_TEMPORARY
        ) {
            require_once('schedule/temporary_event_logic.csp');
            $logic = GRN_Schedule_TemporaryEventLogic::getInstance();
        } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_NORMAL)
                  == GRN_SCHEDULE_EVENT_TYPE_NORMAL
        ) {
            require_once('schedule/normal_event_logic.csp');
            $logic = GRN_Schedule_NormalEventLogic::getInstance();
        } else {
            cb_throw_error();
        }

        return $logic->deleteEvent($user, $eid, $date, null, $apply);
    }


    /**
     * フォローの書き込み
     *  <pre>
     *   必要なアクセス権のチェックなどは、この関数を呼び出す前に処理すること
     *  </pre>
     *
     * @param   \CB_User $user   発言者
     * @param   string   $follow 発言内容
     * @param   string   $eid    イベントID
     * @param   CB_Date  $date   イベント日付
     *
     * @return bool|string
     */
    function writeFollow($user, $follow, $eid, $date = null)
    {
        require_once('schedule/eventfactory.csp');
        $factory = GRN_Schedule_EventFactory::getInstance();
        $event_type = $factory->getEventType($eid);
        // 繰り返しは分離
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
            == GRN_SCHEDULE_EVENT_TYPE_REPEAT
        ) {
            if (is_null($date)) {
                cb_throw_error(E_GRN_SCHD_NOT_SPECIFIED_DATE);
            }

            // 分離するためにイベントの取得
            $event = $factory->getEvent($eid, $date);
            $old_eid = $eid;
            $event->setdate = $date;
            $event->enddate = $date;
            $event->modifier = $user;
            require_once('schedule/repeat_event_logic.csp');
            $logic = GRN_Schedule_RepeatEventLogic::getInstance();
            $eid = $logic->modifyEvent($event, $date, GRN_REPEAT_MODIFY_THIS);

            //GRN2-1820
            $logic->Update_Reserve_Int1($eid, $old_eid);
            //GRN2-1820
            // コンバートしてきた場合の対応
            $logic->copyFollows($old_eid, $eid);
        }

        $logic = $this->_getEventBaseLogic();;
        if ( ! $logic->writeScheduleFollow($eid, $user, $follow)) {
            return false;
        }

        return $eid;
    }

    /**
     * フォローリストの取得
     *  <pre>
     *   必要なアクセス権のチェックなどは、この関数を呼び出す前に処理すること
     *  </pre>
     *
     * @param   \CB_User $user      ユーザー
     * @param   string   $eid       イベントID
     * @param   int      $offset    位置
     * @param   int      $limit     取得数。0の場合はすべて
     * @param   string   $follow_id 取得する先頭のフォローID
     *
     * @return  array   フォローの連想配列
     */
    function getEventFollows($user, $eid, $offset, $limit, $follow_id = null)
    {
        $logic = $this->_getEventBaseLogic();

        return $logic->getScheduleFollowDataList($eid, $offset, $limit,
            $follow_id);
    }

    /**
     * フォローIDからフォローの位置を取得
     *
     * @param   string  $event_id
     * @param   string  $follow_id
     * @param   boolean $desc 古い順にするかどうか
     *
     * @return  mixed       成功した場合は、位置それ以外はFALSE
     */
    function getFollowPosition($event_id, $follow_id, $desc = false)
    {
        $logic = $this->_getEventBaseLogic();

        return $logic->getFollowPosition($event_id, $follow_id, $desc);
    }

    /**
     * フォローの取得
     *
     * @param   CB_User $user ユーザー
     * @param   string  $eid  イベントID
     * @param   string  $fid  フォローID
     *
     * @return  array   フォローが入った連想配列
     */
    function getEventFollow($user, $eid, $fid)
    {
        $logic = $this->_getEventBaseLogic();

        return $logic->getScheduleFollowData($eid, $fid);
    }

    //GTM-1190

    /**
     * get total of event follows
     *
     * @param   string $event_id
     *
     * @return  int             total of event follows
     */
    function countEventFollows($event_id)
    {
        $logic = $this->_getEventBaseLogic();

        return $logic->countFollows($event_id);
    }

    /**
     * フォローの削除
     *
     * @param   CB_User $user ユーザー
     * @param   string  $eid  イベントID
     * @param   string  $fid  フォローID
     *
     * @return bool 削除に成功した場合はTRUE
     */
    function deleteFollow($user, $eid, $fid)
    {
        $follow = $this->getEventFollow($user, $eid, $fid);

        if ( ! is_null($user)) {
            if ($follow['creator_id'] != $user->getOID()) {
                cb_throw_error(E_GRN_SCHD_DENYDELETE_EVENTFOLLOW);
            }
        }

        $logic = $this->_getEventBaseLogic();
        $logic->deleteScheduleFollow($eid, $fid);

        return true;
    }

    /**
     * イベントオブジェクトのデータがきちんと設定されているかをチェックする
     *
     * @param \GRN_Schedule_EventBase $event チェックするイベント
     *
     * @return void
     */
    function checkEventData(& $event)
    {
        // 参加者がいるかどうか
        // ただしORの仮予定だったら施設が確定していないので参加者なしもあり得る
        if (is_null($event->users) && is_null($event->groups)
            && is_null($event->facilities)
            && ( ! is_a($event, 'GRN_Schedule_TemporaryEvent')
                 || $event->isORSearch() === false)
        ) {
            cb_throw_error(E_GRN_SCHD_NOT_MEMBER);
        }

        // 時間があっているかどうか
        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            if (is_a($event->setdatetime, 'CB_DateTime')) {
                $setdatetime
                    = $this->_translateDateTimeToUTC($event->setdatetime,
                    $event->timezone);
            } else {
                $setdatetime = $event->setdatetime;
            }
            if (is_a($event->enddatetime, 'CB_DateTime')) {
                $enddatetime
                    = $this->_translateDateTimeToUTC($event->enddatetime,
                    $event->end_timezone);
            } else {
                $enddatetime = $event->enddatetime;
            }
            if (is_array($event->facilities) && count($event->facilities)) {
                // 開始時刻と終了時刻が入っていなければならない
                if ( ! is_a($setdatetime, 'CB_DateTime')
                     || ! is_a($enddatetime, 'CB_DateTime')
                ) {
                    cb_throw_error(E_GRN_FCLT_INVALID_DATETIME);
                }

                $tempdatetime = new CB_DateTimeEx($setdatetime);
                if ($tempdatetime->compare($enddatetime) >= 0) {
                    cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
                }

            }

            $this->checkDateTime($setdatetime, $enddatetime);

            if (is_a($event->setdatetime, 'CB_DateTime')
                && is_a($event->enddatetime, 'CB_Date')
            ) {
                if (($event->setdatetime->year != $event->enddatetime->year)
                    || ($event->setdatetime->month
                        != $event->enddatetime->month)
                    || ($event->setdatetime->day != $event->enddatetime->day)
                ) {
                    cb_throw_error(E_GRN_SCHD_INVALID_ENDDATE);
                }
            }
        } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            // イベントの条件が入力されているか
            if ( ! $event->repeat_type) {
                cb_throw_error(E_GRN_SCHD_NOT_REPEAT_TYPE);
            }

            // 期間のチェック
            $this->_checkDate($event->setdate, $event->enddate);

            if (is_array($event->facilities) && count($event->facilities)) {
                // 開始時刻と終了時刻が入っていなければならない
                if ( ! is_a($event->settime, 'CB_Time')
                     || ! is_a($event->endtime, 'CB_Time')
                ) {
                    cb_throw_error(E_GRN_FCLT_INVALID_DATETIME);
                }

                $settimeex = new CB_TimeEx($event->settime);
                $endtimeex = new CB_TimeEx($event->endtime);

                if ($settimeex->compare($endtimeex) == 0) {
                    cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
                }

                $setdatetime
                    = CB_DateTimeEx::createByDateAndTime($event->setdate,
                    $event->settime);
                $enddatetime
                    = CB_DateTimeEx::createByDateAndTime($event->enddate,
                    $event->endtime);
                if ($enddatetime->compare($setdatetime) < 0) {
                    // STM-290
                    cb_date_move_days($enddatetime, 1);
                    // End STM-290
                }
            }

            // 時間のチェック
            if (is_null($event->settime) && ! is_null($event->endtime)) {
                cb_throw_error(E_GRN_SCHD_INVALID_SETTIME);
            }

        } elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
            // 日付のチェック
            $this->_checkDate($event->setdate, $event->enddate);
        } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            if ( ! is_array($event->setdates) || count($event->setdates) == 0) {
                cb_throw_error(E_GRN_SCHD_NOT_TEMPRARY_DATES);
            }

            if ($event->isORSearch()) {
                if ( ! is_array($event->setdates)
                     || count($event->setdates) == 0
                ) {
                    cb_throw_error(E_GRN_SCHD_NOT_TEMPRARY_DATES);
                }

                foreach ($event->setdates as $facility_data) {
                    if (is_array($facility_data['dates'])
                        && count($facility_data['dates']) > 0
                    ) {
                        $index = 0;
                        // 日付のチェック
                        foreach ($facility_data['dates'] as $dates) {
                            $this->_checkDateTime($dates['setdatetime'],
                                $dates['enddatetime']);

                            if ($this->checkConflict($dates['setdatetime'],
                                $dates['enddatetime'], $facility_data['dates'],
                                $index)
                            ) {
                                cb_throw_error(E_GRN_FCLT_CONFLICT_INPUTDATETIME);
                            }

                            $index++;
                        }
                    }
                }
            } else {

                if (is_array($event->setdates) && count($event->setdates) > 0) {
                    $index = 0;
                    // 日付のチェック
                    $facility = null;
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        $facility = reset($event->facilities);
                    }

                    foreach ($event->setdates as $dates) {
                        $this->_checkDateTime($dates['setdatetime'],
                            $dates['enddatetime']);

                        if ($facility
                            && $this->checkConflict($dates['setdatetime'],
                                $dates['enddatetime'], $event->setdates, $index)
                        ) {
                            cb_throw_error(E_GRN_FCLT_CONFLICT_INPUTDATETIME);
                        }

                        $index++;
                    }
                }
            }
        }


    }

    /**
     *
     * @param CB_Date or CB_DateTime $datetime
     * @param string $from_timezone
     *
     * @return CB_DateTime
     */
    private function _translateDateTimeToUTC($datetime, $from_timezone)
    {
        if ($datetime instanceof CB_DateTime) {
            return cb_timestamp_to_datetime(cb_datetime_to_timestamp($datetime,
                $from_timezone), 'UTC');
        } elseif ($datetime instanceof CB_Date) {
            $dt = new CB_DateTime();
            $dt->year = $datetime->year;
            $dt->month = $datetime->month;
            $dt->day = $datetime->day;
            $dt->hour = 23;
            $dt->minute = 59;
            $dt->second = 0;

            return cb_timestamp_to_datetime(cb_datetime_to_timestamp($dt,
                $from_timezone), 'UTC');
        } elseif (is_null($datetime)) {
            return null;
        }

        assert('FALSE');
    }

    /**
     * 日付のチェック
     *
     * @access private
     *
     * @param   CB_Date $date1 開始日
     * @param   CB_Date $date2 終了日
     *
     * @return bool
     */
    function _checkDate($date1, $date2)
    {
        require_once('schedule/utility.csp');
        // 日付のチェック
        // 開始日付がおかしい
        if ( ! grn_schedule_date_isvalid($date1)) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETDATE);
        }

        // 終了日付がおかしい
        if ( ! grn_schedule_date_isvalid($date2)) {
            cb_throw_error(E_GRN_SCHD_INVALID_ENDDATE);
        }

        $dateex = new CB_DateEx($date1);
        // 日付が前後している
        if ($dateex->compare($date2) > 0) {
            cb_throw_error(E_GRN_SCHD_INVALID_DATE);
        }

        return true;
    }

    /**
     * 時刻のチェック
     *
     * @access private
     */
    function _checkTime($time1, $time2)
    {
        require_once('schedule/utility.csp');
        if ( ! grn_schedule_time_isvalid($time1)) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETTIME);
        }

        if ( ! grn_schedule_time_isvalid($time2)) {
            cb_throw_error(E_GRN_SCHD_INVALID_ENDTIME);
        }

        // 秒に変換する
        $ts1 = $time1->hour * 3600 + $time1->minute * 60 + $time1->second;
        $ts2 = $time2->hour * 3600 + $time2->minute * 60 + $time2->second;

        if ($ts1 <= $ts2) {
            return true;
        }

        // 時間の設定がおかしい
        cb_throw_error(E_GRN_SCHD_INVALID_TIME);
    }

    /**
     * @access private
     */
    function _checkDateTime($start_time, $end_time)
    {
        if ( ! is_a($start_time, 'CB_DateTime')
             || ! is_a($end_time, 'CB_DateTime')
        ) {
            cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
        }

        require_once('schedule/utility.csp');
        if ( ! grn_schedule_datetime_isvalid($start_time)) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETDATETIME);
        }

        if ( ! grn_schedule_datetime_isvalid($end_time)) {
            cb_throw_error(E_GRN_SCHD_INVALID_ENDDATETIME);
        }

        $datetimeex = new CB_DateTimeEx($start_time);

        if ($datetimeex->compare($end_time) > 0) {
            cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
        }

        return true;
    }

    /**
     * 日付時刻のチェック
     */
    function checkDateTime($datetime1, $datetime2)
    {
        // 日付同士のチェック
        if (is_a($datetime1, 'CB_Date') && is_a($datetime2, 'CB_Date')) {
            return $this->_checkDate($datetime1, $datetime2);
        } // 日時と日付同士のチェック
        elseif (is_a($datetime1, 'CB_DateTime')
                && is_a($datetime2, 'CB_Date')
        ) {
            $date1 = new CB_Date();
            $date1->year = $datetime1->year;
            $date1->month = $datetime1->month;
            $date1->day = $datetime1->day;

            return $this->_checkDate($date1, $datetime2);
        } // 日時同士のチェック
        elseif (is_a($datetime1, 'CB_DateTime')
                && is_a($datetime2, 'CB_DateTime')
        ) {
            return $this->_checkDateTime($datetime1, $datetime2);
        } // 時間同士のチェック
        elseif (is_a($datetime1, 'CB_Time') && is_a($datetime2, 'CB_Time')) {
            return $this->_checkTime($datetime1, $datetime2);
        } // 後のデータがない場合はチェックせずに戻る
        elseif ( ! is_null($datetime1) && is_null($datetime2)) {
            return true;
        } elseif (is_null($datetime1)) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETDATETIME);
        }

        // 時間の型がおかしい
        cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
    }

    /**
     * ほかの予定と予定がぶつかっていないかのチェック
     *
     * @param   CB_DateTime $setdatetime
     * @param   CB_DateTime $enddatetime
     * @param   array       $dates
     * @param   int         $index
     *
     * @return bool
     */
    function checkConflict($setdatetime, $enddatetime, $dates, $index = -1)
    {
        $setdatetimeex = new CB_DateTimeEx($setdatetime);
        $enddatetimeex = new CB_DateTimeEx($enddatetime);
        $i = -1;

        foreach ($dates as $date) {
            $i++;
            if ($i == $index) {
                continue;
            }

            if ($setdatetimeex->compare($date['enddatetime']) >= 0
                || $enddatetimeex->compare($date['setdatetime']) <= 0
            ) {
                // OK
            } else {
                return true;
            }
        }

        return false;
    }

    /**
     * 繰り返しの登録期限を取得する
     *
     * @param   CB_Date $date 基準となる日付
     *
     * @return \CB_DateEx               基準日から算出した期限
     */
    function getRepeatLimitDate($date)
    {
        require_once('schedule/system_logic.csp');
        $sytemlogic = GRN_Schedule_SystemLogic::getInstance();

        $limit = intval($sytemlogic->getRepeatLimit());

        $dateex = new CB_DateEx($date);
        $dateex->moveMonths($limit);
        // 1日前に戻さないと同じ日がかぶってしまう
        $dateex->moveDays(-1);

        return $dateex;
    }

    /**
     * 繰り返しの有効期限をチェックする
     *
     * @param   CB_Date $date    チェックする日付
     * @param   CB_Date $setdate 基準日
     *
     * @return  boolean     よい場合はTRUE、超えている場合はエラーがスローされる
     */
    function checkRepeatLimit($date, $setdate = null)
    {
        if (is_null($setdate)) {
            $ts = new CB_TimeStamp();
            $ts->unix_ts = time();
            $tsex = new CB_TimeStampEx($ts);
            $setdate = $tsex->getDate();
        }

        $dateex = $this->getRepeatLimitDate($setdate);
        if ($dateex->compare($date) < 0) {
            cb_throw_error(E_GRN_SCHD_REPEAT_LIMIT, null,
                ['limit' => cb_date_format('DateFull_YMDW', $dateex)]);
        }


        return true;
    }

    /**
     * システム設定
     */
    function getSystemConfigArray()
    {
        $system_config_array = [
            'schedule_config' =>
                [
                    [
                        'page' => 'schedule/system/common_set',
                        'icon' => 'general32'
                    ],
                    [
                        'page' => 'schedule/system/menu_set',
                        'icon' => 'menu32'
                    ],
                    [
                        'page' => 'schedule/system/menupage_list',
                        'icon' => 'menu_coop32'
                    ],
                    [
                        'page' => 'schedule/system/facility_group',
                        'icon' => 'facilitygroup32'
                    ],
                    [
                        'page' => 'schedule/system/facility_select_set',
                        'icon' => 'reserve32'
                    ],
                    [
                        'page' => 'schedule/system/item_list',
                        'icon' => 'reserve_item_list32'
                    ],
                    [
                        'page' => 'schedule/system/access_index',
                        'icon' => 'access32'
                    ],
                    [
                        'page' => 'schedule/system/default_public_index',
                        'icon' => 'public32'
                    ],
                    [
                        'page' => 'schedule/system/delete_all',
                        'icon' => 'deleteall32'
                    ],
                    [
                        'page' => 'schedule/system/import_index',
                        'icon' => 'import32'
                    ],
                    [
                        'page' => 'schedule/system/export_index',
                        'icon' => 'export32'
                    ],
                    [
                        'page' => 'schedule/system/netmeeting_set',
                        'icon' => 'netmeeting_coop32'
                    ],
                ]
        ];

        $is_licensed = CustomizationJsCssLoader::getInstance()
                                               ->isAvailableLicense();
        if ($is_licensed) {
            $system_config_array['schedule_config'][] = [
                'page' => 'schedule/system/customization_group_list',
                'icon' => 'file_b32'
            ];
        }

        require_once('kintone/Logic.csp');
        require_once('fw/slash_util.csp');
        if (GRN_Kintone_Logic::isAvailable()
            && CB_SlashUtil::isGaiaLicenseapiRequest()
        ) {
            $system_config_array['schedule_config'][] = [
                'page' => 'schedule/system/kintone_relation',
                'icon' => 'kintone_logo32'
            ];
        }

        return $system_config_array;
    }

    /**
     * 個人設定
     */
    function getPersonalConfigArray()
    {

        $schedule_config = [];
        $schedule_config[] = [
            'page' => 'schedule/personal/display',
            'icon' => 'display32'
        ];

        $schedule_config[] = [
            'page' => 'schedule/personal/menu',
            'icon' => 'menu32'
        ];
        $schedule_config[] = [
            'page' => 'schedule/personal/mail_forward',
            'icon' => 'mail32'
        ];
        $schedule_config[] = [
            'page' => 'schedule/personal/default_public_list',
            'icon' => 'public32'
        ];
        $schedule_config[] = [
            'page' => 'schedule/personal/import1',
            'icon' => 'import32'
        ];
        $schedule_config[] = [
            'page' => 'schedule/personal/export1',
            'icon' => 'export32'
        ];
        $schedule_config[] = [
            'page' => 'schedule/personal/statistics1',
            'icon' => 'schedule_stat32'
        ];
        $schedule_config[] = [
            'page' => 'schedule/personal/ical_export',
            'icon' => 'export32'
        ];

        // システム管理でV-Cubeを使用する場合のみ「V-CUBEシステム用メールアドレス設定画面」を表示する
        require_once('schedule/netmeeting_system_logic.csp');
        $vcb_system_logic = GRN_Netmeeting_SystemLogic::getInstance();

        // NETMEETING連携あり
        if ($vcb_system_logic->isNetmeetingAvailable()) {
            $schedule_config[] = [
                'page' => 'schedule/personal/netmeeting_mail_forward',
                'icon' => 'netmeeting_coop32'
            ];

        }

        return ['schedule_config' => $schedule_config];
    }

    /**
     * 通知データのページ情報の取得
     * 通知アプリから呼び出される
     *
     * @param  object $user      対象となるユーザー
     * @param  string $app_id    アプリケーションID
     * @param  string $unique_id 通知元データのユニークID
     * @param  array  $org_data  通知元データのオリジナルデータ配列
     * @param  string $status    通知元データの状態（'unread', 'update', 'confirmed'）
     * @param  string $action_id 通知元データのアクションID（'create', 'update', 'delete', 'fixed'）
     * @param  string $sub_module_id
     *
     * @return mixed    ページ情報の配列
     *                  'subject_page'  => 標題用ページ名（'schedule/view'）
     *                  'subject_icon'  => 標題用アイコン名（'event20'）
     *                  'url_params'    => URLに積むパラメータの配列（標題、内容共通）
     *                  'isBlankDisplayAbstract'    => 内容のブランク表示（TRUE：ブランク表示　FALSE：なにもしない）
     */
    function getNotificationPageInfo(
        $user,
        $app_id,
        $unique_id,
        $org_data,
        $status,
        $action_id,
        $sub_module_id
    ) {
        $page_info = [];

        $page_info['url_params'] = [
            'uid'   => $user->getOID(),
            'event' => $unique_id
        ];
        if (array_key_exists('bdate', $org_data)) {
            $page_info['url_params']['bdate'] = $org_data['bdate'];
        }

        if (array_key_exists('follow', $org_data)) {
            // フォローの場合
            $page_info['subject_fragment'] = 'follow';
        }

        $page_info['subject_page'] = 'schedule/view';
        if (array_key_exists(GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID,
            $org_data)
        ) {
            $page_info['subject_page'] = 'schedule/operation/facility_approve';
            $page_info['url_params']['faid'] = cb_at($org_data, "faid",
                0);    // facility id
            $page_info['url_params']['event'] = cb_at($org_data, "event",
                0);  // event id;
        }
        $blankDisplayAbstractChecks = [
            'follow',
            \grn\schedule\bean\AttendanceStatus::STATUS_ATTENDANT,
            GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID,
            GRN_NOTIFICATION_ACTION_FACILITY_REJECTED_ID,
            GRN_NOTIFICATION_ACTION_FACILITY_APPROVED_ID
        ];
        $page_info['isBlankDisplayAbstract'] = true;
        foreach ($blankDisplayAbstractChecks as $value) {
            if (array_key_exists($value, $org_data)
                && $org_data[$value] == true
            ) {
                $page_info['isBlankDisplayAbstract'] = false;
                break;
            }
        }

        require_once('notification/resources.csp');
        switch ($action_id) {
            case GRN_NOTIFICATION_ACTION_CREATE_ID :
                $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_SCHEDULE_ICON_CODE_ADD);
                break;
            case GRN_NOTIFICATION_ACTION_UPDATE_ID :
                if (array_key_exists('follow', $org_data)) {
                    $page_info['subject_icon']
                        = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_SCHEDULE_ICON_CODE_FOLLOW);
                } else {
                    $page_info['subject_icon']
                        = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                        GRN_NOTIFICATION_SCHEDULE_ICON_CODE_MOD);
                }
                break;
            case GRN_NOTIFICATION_ACTION_DELETE_ID :
                $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_SCHEDULE_ICON_CODE_DEL);
                break;
            case GRN_NOTIFICATION_ACTION_FIXED_ID :
                $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_SCHEDULE_ICON_CODE_FIX);
                break;
            default:
                $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                    GRN_NOTIFICATION_SCHEDULE_ICON_CODE_ADD);
                break;
        }

        return $page_info;
    }

    /**
     * ケータイ用
     */
    function getNotificationPageInfo_cellular(
        $user,
        $app_id,
        $unique_id,
        & $org_data,
        $status
    ) {
        $page_info = [];

        $page_info['url_params'] = [];
        $page_info['url_params']['mid'] = $user->getOID();
        $page_info['url_params']['eid'] = $unique_id;
        if (array_key_exists('bdate', $org_data)) {
            $page_info['url_params']['day'] = $org_data['bdate'];
        }
        if (array_key_exists('follow', $org_data)) {
            // フォローの場合
            $page_info['subject_icon'] = 'follow';
        }

        $page_info['subject_page'] = 'schedule/cellular/look1';

        return $page_info;
    }

    /**
     * ケータイトップページ通知表示用
     */
    function getNotificationIndexPageInfo_cellular($user, $app_id)
    {
        $info = [];
        $info['caption_module'] = 'grn.schedule.cellular';
        $info['caption_key'] = 'index';
        $info['icon'] = 'watch';

        return $info;
    }

    /**
     * 公開先のユーザーには通知しない」がチェックされていない場合、公開先に通知をする
     *
     * @param CB_User      $login        login user
     * @param object       $event        schedule event
     * @param object       $date         date
     * @param object       $abstract     schedule follow
     * @param CB_TimeStamp $tsex         timestamp
     * @param string       $title        notification title
     * @param boolean      $is_cache     whether to load and cache users setting
     * @param boolean      $is_send_mail whether to send mail
     * @param string       $mode         notification mode
     * @param string       $temporary_id 仮予定の特定の日付
     */
    function sendNotificationsToPublic(
        $login,
        $event,
        $date,
        $abstract,
        $tsex,
        $title,
        $is_cache,
        $is_send_mail,
        $mode,
        $temporary_id = null
    ) {
        require_once('schedule/system_logic.csp');
        $logic = GRN_Schedule_SystemLogic::getInstance();
        if ($logic->getManagedNotify() == '1') {
            return;
        }

        $event_users = [];
        if (is_array($event->users)) {
            foreach (array_keys($event->users) as $key2) {
                $event_user = &$event->users[$key2];
                $event_users[$event_user->getOID()] = $event_user->getOID();
            }
        }

        $notify_list = [];
        if (is_array($event->notify_address)
            && count($event->notify_address) > 0
        ) {
            $notify_address_users = ScheduleMemberLogic::getInstance()
                                                       ->getUsersOfBelongToMembersWithObjects($event->notify_address,
                                                           null);
            foreach ($notify_address_users as $user_id => $user) {
                if ( ! isset($event_users[$user_id])) {
                    $notify_list[] = $user;
                }
            }
        }

        if (count($notify_list) > 0) {
            if ($is_cache) {
                $param_loadAndCache = ['user', 'locale'];
                require_once('grn/application.csp');
                $app_locator = GRN_ApplicationLocator::instance();
                $app_locator->loadAndCacheUsersSetting($notify_list,
                    $param_loadAndCache);
            }
            $this->setNotify(
                $notify_list, $login, $event, $date, $title, $abstract, $mode,
                $tsex
            );
            if ($is_send_mail) {
                $this->forwardMail($event, [$mode => $notify_list], $login,
                    $temporary_id);
            }
        }
    }

    /**
     * 通知の設定
     *
     * @param  CB_User[]    $members   参加者 each index of this array doesn't have to be the CB_User's ID of its value.
     * @param  CB_User      $user      通知者
     * @param  object       $event     イベント
     * @param  CB_Date      $date      日付
     * @param  string       $subject   内容
     * @param  string       $abstract  フォローの内容
     * @param  int          $mode      通知のモード
     * @param  CB_TimeStamp $timestamp タイムスタンプ
     *
     * @return void
     */
    function setNotify(
        $members,
        $user,
        $event,
        $date,
        $subject,
        $abstract,
        $mode,
        $timestamp
    ) {
        $notify_logic = GRN_Schedule_Notify_Logic::getInstance();
        $notify_logic->setNotify($this->getModuleId(), $members, $user, $event,
            $date, $subject, $abstract, $mode, $timestamp);
    }

    /**
     * GTM-1680 Facility approval request notification
     *
     * @param array                  $facilityList
     * @param GRN_Schedule_EventBase $event
     * @param CB_User                $sender
     * @param CB_TimeStamp           $timestamp
     */
    function sendFacilityApprovalRequestNotify(
        array $facilityList,
        $event,
        \CB_User $sender,
        $timestamp
    ) {
        if ( ! is_object($event) || count($facilityList) == 0) {
            // Don't send notification
            return;
        }
        $notifyLogic = GRN_Schedule_Notify_Logic::getInstance();
        $requestNofData = $notifyLogic->getNotificationData($event,
            GRN_NOTIFICATION_ACTION_FACILITY_REQUESTED_ID);
        $requestNofData->setTimeStampData($timestamp);
        $notifyLogic->sendFacilityApprovalRequestNotify($facilityList,
            $requestNofData, $sender);
    }

    /**
     * GTM-1680 Facility approval request notification for update
     *
     * @param GRN_Schedule_NormalEvent $oldEvent
     * @param GRN_Schedule_NormalEvent $newEvent
     * @param CB_User                  $sender
     * @param CB_TimeStamp             $timestamp
     */
    function sendFacilityApprovalRequestNotifyForUpdate(
        $oldEvent,
        $newEvent,
        \CB_User $sender,
        $timestamp
    ) {
        if (is_null($newEvent->facilities)) {
            return;
        } elseif (is_null($oldEvent->facilities)) {
            $this->sendFacilityApprovalRequestNotify($newEvent->facilities,
                $newEvent, $sender, $timestamp);

            return;
        }

        if ($oldEvent->setdatetime->compare($newEvent->setdatetime)
            || $oldEvent->enddatetime->compare($newEvent->enddatetime)
        ) {
            $this->sendFacilityApprovalRequestNotify($newEvent->facilities,
                $newEvent, $sender, $timestamp);
        } else {
            $oldFacilities = $oldEvent->facilities
                ? $oldEvent->facilities : [];
            $newFacilities = $newEvent->facilities
                ? $newEvent->facilities : [];
            $oldFacilitiesAssocArray = [];
            $newFacilitiesAssocArray = [];

            foreach ($oldFacilities as $facility) {
                $oldFacilitiesAssocArray[$facility->getOID()] = $facility;
            }

            foreach ($newFacilities as $facility) {
                $newFacilitiesAssocArray[$facility->getOID()] = $facility;
            }

            $addedFacilities = array_diff_key($newFacilitiesAssocArray,
                $oldFacilitiesAssocArray);
            $this->sendFacilityApprovalRequestNotify($addedFacilities,
                $newEvent, $sender, $timestamp);
        }
    }

    /**
     * 通知の確認
     *
     * @param   CB_User      $user      ユーザー
     * @param   string       $module_id モジュールID
     * @param   string       $unique_id イベントID
     * @param   array        $org_datas パラメータ
     * @param   CB_TimeStamp $timestamp 確認時間
     *
     * @return bool
     */
    function confirmApplicationData(
        $user,
        $module_id,
        $unique_id,
        $org_datas,
        $timestamp
    ) {
        $notify_logic = GRN_Schedule_Notify_Logic::getInstance();

        return $notify_logic->confirmApplicationData($user, $module_id,
            $unique_id, $org_datas, $timestamp);
    }

    /**
     * 予定の閲覧
     *
     * @param   object CB_User  $user
     * @param   string       $eid
     * @param   CB_TimeStamp $timestamp
     */
    function readEvent($user, $eid, $timestamp = null)
    {
        $notify_logic = GRN_Schedule_Notify_Logic::getInstance();
        $notify_logic->readEvent($this->getModuleId(), $user, $eid, $timestamp);
    }


    /**
     * 指定されたユーザーの統計を行う
     *
     * @param   object CB_User      $user
     * @param   mixed   $member
     * @param   CB_Date $setdate
     * @param   CB_Time $settime
     * @param   CB_Date $enddate
     * @param   CB_Time $endtime
     * @param   array   $columns
     * @param   boolean $b_sunday
     * @param   boolean $b_saturday
     * @param   array   $calendars
     *
     * @return  array   統計した結果。配列の一番最後にメニュー以外の項目が入る
     */
    function statisticsEvents(
        $user,
        & $member,
        $setdate,
        $settime,
        $enddate,
        $endtime,
        $columns,
        $b_sunday = true,
        $b_saturday = false,
        $calendars = null
    ) {
        // 開始日からの求める時間を作成
        require_once('schedule/utility.csp');
        $setdatetime = grn_schedule_get_datetime($setdate, $settime);
        $enddatetime = grn_schedule_get_datetime($setdate, $endtime);
        $timestamp = new CB_TimeStampEx();
        $timestamp->setDateTime($setdatetime);
        $set_ts = $timestamp->unix_ts;
        $timestamp->setDateTime($enddatetime);
        $end_ts = $timestamp->unix_ts;

        //
        $dateex = new CB_DateEx($setdate);

        // 入れ物準備
        $results = [];
        foreach ($columns as $column) {
            $results[$column['0']] = 0;
        }

        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();
        $others = 0;

        while ($dateex->compare($enddate) <= 0) {
            // 日曜日を除く
            if ( ! $b_sunday && $dateex->getDayOfWeek() == 0) {
                $set_ts += 86400;
                $end_ts += 86400;
                $setdatetime->moveDays(1);
                $enddatetime->moveDays(1);

                $dateex->moveDays(1);
                continue;
            }

            // 土曜日を除く
            if ( ! $b_saturday && $dateex->getDayOfWeek() == 6) {
                $set_ts += 86400;
                $end_ts += 86400;
                $setdatetime->moveDays(1);
                $enddatetime->moveDays(1);

                $dateex->moveDays(1);
                continue;
            }

            // 祝日を除く
            if (is_array($calendars) && $util->isHoliday($dateex, $calendars)) {
                $set_ts += 86400;
                $end_ts += 86400;
                $setdatetime->moveDays(1);
                $enddatetime->moveDays(1);

                $dateex->moveDays(1);
                continue;
            }

            //GTM-1632
            $attendanceStatusLogic = new AttendanceStatusLogic();
            $isEnableAttendanceStatus
                = $attendanceStatusLogic->isEnableAttendanceCheck();

            // イベントの取得
            $events = $this->getEvents(
                $member, $setdatetime, $enddatetime, $user,
                GRN_SCHEDULE_EVENT_TYPE_NORMAL, false, true,
                $isEnableAttendanceStatus
            );

            foreach ($events['normal'] as $event) {
                //GTM-1632
                if ($event[AttendanceStatus::ATTENDANCE_CHECK_USING]
                    && $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                       == AttendanceStatus::STATUS_ABSENT
                ) {
                    continue;
                }

                // 時間が設定されていないイベントはとらない
                if ($event['event_type'] != GRN_SCHEDULE_EVENT_TYPE_NORMAL
                    && $event['event_type'] != GRN_SCHEDULE_EVENT_TYPE_REPEAT
                ) {
                    continue;
                }

                // 非公開は計算しない
                if ($event['private'] != GRN_EVENT_PRIVATE_NONE) {
                    continue;
                }
                $data = 0;

                // タイムスタンプを求める
                $timestamp->setDateTime($event['setdatetime']);
                $event_set = $timestamp->unix_ts;
                $timestamp->setDateTime($event['enddatetime']);
                $event_end = $timestamp->unix_ts;

                if ($event_set < $set_ts) {
                    $event_set = $set_ts;
                }
                if ($event_end > $end_ts) {
                    $event_end = $end_ts;
                }

                $data = $event_end - $event_set;

                // 既にメニューがあるかどうか
                if (mb_strlen($event['event_menu'])
                    && array_key_exists($event['event_menu'], $results)
                ) {
                    $results[$event['event_menu']] += $data;
                } else {
                    $others += $data;
                }
            }

            $set_ts += 86400;
            $end_ts += 86400;
            $setdatetime->moveDays(1);
            $enddatetime->moveDays(1);

            $dateex->moveDays(1);
        }

        // その他を混ぜる
        $results[] = $others;

        return $results;
    }

    /**
     * 予定通知のメールの転送本体
     *
     * @param  \GRN_Schedule_EventBase $event        予定
     * @param  array                   $list         操作とその通知先の配列
     * @param  CB_User                 $operator     操作した人
     * @param  string                  $temporary_id 仮予定の特定の日付
     *
     * @return boolean
     */
    function forwardMail(& $event, $list, & $operator, $temporary_id = null)
    {
        $notify_logic = GRN_Schedule_Notify_Logic::getInstance();

        return $notify_logic->forwardMail($event, $list, $operator,
            $temporary_id);
    }

    /**
     * @param GRN_Schedule_EventBase $event
     * @param array                  $members_with_operation [Schedule notify type => CB_User[] ]
     * @param CB_User                $sender
     * @param bool                   $sender_invisible
     * @param CB_Date|CB_TimeStamp   $bdate
     * @param string|NULL            $temporary_id
     */
    public function sendPushNotification(
        \GRN_Schedule_EventBase $event,
        array $members_with_operation,
        \CB_User $sender,
        bool $sender_invisible,
        $bdate,
        string $temporary_id = null
    ) {
        $push_notification_register = new PushNotificationRegister();
        if ( ! $push_notification_register->isAvailable()) {
            return;
        }

        $push_conversion_data = new PushConversionDataOfAppointment(
            $event,
            $members_with_operation,
            $sender,
            $sender_invisible,
            $bdate,
            $temporary_id);
        $push_notification_register->enqueuePushRequest($push_conversion_data);
    }

    /**
     * @param GRN_Schedule_EventBase $event
     * @param CB_User                $sender
     * @param string                 $status
     * @param string                 $message
     * @param CB_Date|NULL           $bdate
     */
    public function sendPushNotificationOfAttendanceConfirm(
        \GRN_Schedule_EventBase $event,
        \CB_User $sender,
        string $status,
        string $message,
        $bdate = null
    ) {
        $push_notification_register = new PushNotificationRegister();
        if ( ! $push_notification_register->isAvailable()) {
            return;
        }

        $allowed_status = [
            AttendanceStatus::STATUS_ABSENT,
            AttendanceStatus::STATUS_ATTENDANT
        ];
        if ( ! in_array($status, $allowed_status)) {
            return;
        }

        $schedule_notify_logic = GRN_Schedule_Notify_Logic::getInstance();
        $receiver
            = $schedule_notify_logic->getEventCreatorForNotification($event,
            $sender);
        if (empty($receiver)) {
            return;
        }

        $receiver_id = $receiver->getOID();
        $sender_id = $sender->getOID();
        $user_ids = [$receiver_id, $sender_id];
        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($user_ids,
            $sender, GRN_SCHEDULE_APPLICATION_ID);
        if ( ! isset($users_info[$receiver_id])
             || ! isset($users_info[$sender_id])
        ) {
            return;
        }
        if (isset($users_info[$receiver_id]['col_valid'])
            || ! $users_info[$receiver_id]["col_using_app"]
        ) {
            return;
        }

        $push_conversion_data = new PushConversionDataOfAttendanceConfirm(
            $event,
            $sender,
            $receiver,
            $status,
            $message,
            $bdate);
        $push_notification_register->enqueuePushRequest($push_conversion_data);
    }

    /**
     * @param GRN_Schedule_EventBase  $event
     * @param GRN_Facility_Facility[] $facilities
     * @param CB_User                 $sender
     */
    public function sendPushNotificationOfFacilityRequest(
        \GRN_Schedule_EventBase $event,
        array $facilities,
        \CB_User $sender
    ) {
        $push_notification_register = new PushNotificationRegister();
        if ( ! $push_notification_register->isAvailable()) {
            return;
        }

        if ( ! is_a($event, 'GRN_Schedule_NormalEvent')) {
            return;
        }

        $facility_approval_logic = new FacilityApprovalLogic();
        if (count($facilities) > 0) {
            $approval_facilities_names
                = $facility_approval_logic->getNamesForFacilitiesNeedApproval($facilities);
        } else {
            $approval_facilities_names
                = $facility_approval_logic->getNamesForFacilitiesNeedApproval($event->facilities);
        }
        if (count($approval_facilities_names) == 0) {
            return;
        }

        foreach (array_keys($approval_facilities_names) as $facility_id) {
            $push_conversion_data = new PushConversionDataOfFacilityRequest(
                $event,
                $facility_id,
                $sender);
            $push_notification_register->enqueuePushRequest($push_conversion_data);
        }
    }

    /**
     * @param GRN_Schedule_EventBase $old_event
     * @param GRN_Schedule_EventBase $new_event
     */
    public function sendPushNotificationOfUpdatedFacilityRequest(
        \GRN_Schedule_EventBase $old_event,
        \GRN_Schedule_EventBase $new_event
    ) {
        $push_notification_register = new PushNotificationRegister();
        if ( ! $push_notification_register->isAvailable()) {
            return;
        }

        $sender = $old_event->creator;
        if ( ! is_a($sender, 'CB_User')) {
            return;
        }

        if (is_null($new_event->facilities)) {
            return;
        }

        if (is_null($old_event->facilities)
            || $old_event->setdatetime->compare($new_event->setdatetime)
            || $old_event->enddatetime->compare($new_event->enddatetime)
        ) {
            $this->sendPushNotificationOfFacilityRequest($new_event, [],
                $sender);

            return;
        }

        $old_facilities = $old_event->facilities ? $old_event->facilities : [];
        $new_facilities = $new_event->facilities ? $new_event->facilities : [];

        $old_facilities_assoc_array = [];
        foreach ($old_facilities as $facility) {
            $old_facilities_assoc_array[$facility->getOID()] = $facility;
        }

        $new_facilities_assoc_array = [];
        foreach ($new_facilities as $facility) {
            $new_facilities_assoc_array[$facility->getOID()] = $facility;
        }

        $added_facilities = array_diff_key($new_facilities_assoc_array,
            $old_facilities_assoc_array);
        if (count($added_facilities) > 0) {
            $this->sendPushNotificationOfFacilityRequest($new_event,
                $added_facilities, $sender);

            return;
        }
    }

    /**
     * @param FacilityApproval $facility_approval
     * @param bool             $is_approval
     */
    public function sendPushNotificationOfFacilityResponse(
        FacilityApproval $facility_approval,
        bool $is_approval
    ) {
        $push_notification_register = new PushNotificationRegister();
        if ( ! $push_notification_register->isAvailable()) {
            return;
        }

        $event = $facility_approval->getEvent();
        if ( ! is_a($event, 'GRN_Schedule_NormalEvent')) {
            return;
        }

        $sender = cb_get_login_user();
        $schedule_notify_logic = GRN_Schedule_Notify_Logic::getInstance();
        $receiver
            = $schedule_notify_logic->getEventCreatorForNotification($event,
            $sender);
        if (empty($receiver)) {
            return;
        }

        $facility_id = $facility_approval->getFacility();
        $push_conversion_data = new PushConversionDataOfFacilityResponse(
            $event,
            $facility_id,
            $is_approval,
            $sender);
        $push_notification_register->enqueuePushRequest($push_conversion_data);
    }

    /**
     * 仮予定の確定
     *
     * @param        $user
     * @param string $eid     イベントID
     * @param string $date_id 確定させる日付ID
     *
     * @return mixed
     */
    function determineEvent($user, $eid, $date_id)
    {
        require_once('schedule/temporary_event_logic.csp');
        $logic = GRN_Schedule_TemporaryEventLogic::getInstance();

        return $logic->determineEvent($user, $eid, $date_id);
    }

    /**
     * 仮予定の指定した日付を取得する
     *
     * @param   string $event_id イベントID
     * @param   string $date_id  仮予定の日付のオブジェクトID
     *
     * @return  mixed
     */
    function getEventDate($event_id, $date_id)
    {
        require_once('schedule/temporary_event_logic.csp');
        $logic = GRN_Schedule_TemporaryEventLogic::getInstance();

        return $logic->getEventDate($event_id, $date_id);
    }

    /**
     * %...%形式の識別子リストを返す
     *
     * @return array $identifier_list           //%...% Identifier List
     */
    function getIdentifierList()
    {
        //Set Standard Identifier List
        $identifier_list = [
            '%grn.schedule.eventbase.id%',
            '%grn.schedule.eventbase.menu%',
            '%grn.schedule.eventbase.detail%',
            '%grn.schedule.eventbase.memo%',
            '%grn.schedule.eventbase.private%',
            '%grn.schedule.eventbase.creator%',
            '%grn.schedule.eventbase.ctime%',
            '%grn.schedule.eventbase.modifier%',
            '%grn.schedule.eventbase.mtime%',
            '%grn.schedule.eventbase.timezone%',
            '%grn.schedule.eventbase.end_timezone%',
            '%grn.schedule.eventbase.users%',
            '%grn.schedule.eventbase.groups%',
            '%grn.schedule.eventbase.facilities%',
            '%grn.schedule.eventbase.company_name%',
            '%grn.schedule.eventbase.zip_code%',
            '%grn.schedule.eventbase.physical_address%',
            '%grn.schedule.eventbase.map%',
            '%grn.schedule.eventbase.route%',
            '%grn.schedule.eventbase.company_telephone_number%',
            '%grn.schedule.eventbase.company_url%',
            //from GRN_Schedule_NormalEvent
            '%grn.schedule.normalevent.setdatetime%',
            '%grn.schedule.normalevent.enddatetime%',
            //from GRN_Schedule_RepeatEvent
            '%grn.schedule.repeatevent.repeat_type%',
            '%grn.schedule.repeatevent.wday%',
            '%grn.schedule.repeatevent.day%',
            '%grn.schedule.repeatevent.settime%',
            '%grn.schedule.repeatevent.endtime%',
            '%grn.schedule.repeatevent.setdate%',
            '%grn.schedule.repeatevent.enddate%',
            '%grn.schedule.repeatevent.except%',
            '%grn.schedule.repeatevent.setdatetime%',
            '%grn.schedule.repeatevent.enddatetime%',
            //from GRN_Schedule_BannerEvent
            '%grn.schedule.bannerevent.setdate%',
            '%grn.schedule.bannerevent.enddate%',
            //from GRN_Schedule_TemporaryEvent
            '%grn.schedule.temporaryevent.setdates%',
            '%grn.schedule.temporaryevent.setdatetime%',
            '%grn.schedule.temporaryevent.enddatetime%',
        ];

        return $identifier_list;
    }

    /**
     * %...%形式の識別子とその値のリストを返す(Object版)
     *
     * @param  object $object      //Target Object
     * @param  string $object_type //Optional Object Type
     *
     * @return array  $identifier_value_list    //Identifier Value List
     */
    function getIdentifierValueListWithObject(&$object, $object_type = null)
    {
        if (is_a($object, 'GRN_Schedule_NormalEvent')) {
            $target_class = 'normalevent';
        } elseif (is_a($object, 'GRN_Schedule_RepeatEvent')) {
            $target_class = 'repeatevent';
        } elseif (is_a($object, 'GRN_Schedule_BannerEvent')) {
            $target_class = 'bannerevent';
        } elseif (is_a($object, 'GRN_Schedule_TemporaryEvent')) {
            $target_class = 'temporaryevent';
        } else {
            $target_class = 'eventbase';
        }

        //Get Target Object Property List
        $identifier_value_list = [];
        $identifier_list = $this->getIdentifierlist();
        $properties = get_object_vars($object);
        foreach ($identifier_list as $identifier) {
            $identifier_items = explode('.', $identifier);
            if ($identifier_items[2] === $target_class
                || $identifier_items[2] === 'eventbase'
            ) {
                $identifier_items[3] = str_replace('%', '',
                    $identifier_items[3]);
                if (is_object($properties[$identifier_items[3]])) {
                    //Object
                    $identifier_value_list[$identifier]
                        =& $properties[$identifier_items[3]];
                } else {
                    //Other
                    $identifier_value_list[$identifier]
                        = $properties[$identifier_items[3]];
                }
            }
        }

        //Return Identifier Value
        return $identifier_value_list;
    }

    /**
     * JavaScript形式の識別子リストを返す
     *
     * @return array $javascript_identifier_list    //JavaScript Identifier List
     */
    function getJavaScriptIdentifierList()
    {
        //Get Identifier List
        $identifier_list = $this->getIdentifierList();

        //Remove "%" Character and Replace "." Character
        $javascript_identifier_list = [];
        foreach (array_keys($identifier_list) as $identifier_key) {
            $javascript_identifier_value = str_replace('%', '',
                $identifier_list[$identifier_key]);
            $javascript_identifier_value = str_replace('%', '',
                $javascript_identifier_value);
            $javascript_identifier_list[] = $javascript_identifier_value;
        }

        //Add Alias Identifiers for Old Garoon
        $javascript_identifier_list[] = 'gr_EID';
        $javascript_identifier_list[] = 'gr_UID';
        $javascript_identifier_list[] = 'gr_Creator';
        $javascript_identifier_list[] = 'gr_MemberGUIDs';
        $javascript_identifier_list[] = 'gr_MemberNames';
        $javascript_identifier_list[] = 'gr_MemberAccounts';
        $javascript_identifier_list[] = 'gr_MemberMails';
        $javascript_identifier_list[] = 'gr_FacilityIDs';
        $javascript_identifier_list[] = 'gr_FacilityNames';
        $javascript_identifier_list[] = 'gr_Normal';
        $javascript_identifier_list[] = 'gr_Banner';
        $javascript_identifier_list[] = 'gr_Regular';
        $javascript_identifier_list[] = 'gr_Temporary';
        $javascript_identifier_list[] = 'gr_Private';
        $javascript_identifier_list[] = 'gr_StartYear';
        $javascript_identifier_list[] = 'gr_StartMonth';
        $javascript_identifier_list[] = 'gr_Startday';
        $javascript_identifier_list[] = 'gr_StartHour';
        $javascript_identifier_list[] = 'gr_StartMinute';
        $javascript_identifier_list[] = 'gr_EndYear';
        $javascript_identifier_list[] = 'gr_EndMonth';
        $javascript_identifier_list[] = 'gr_Endday';
        $javascript_identifier_list[] = 'gr_EndHour';
        $javascript_identifier_list[] = 'gr_EndMinute';
        $javascript_identifier_list[] = 'gr_RegularType';
        $javascript_identifier_list[] = 'gr_RegularDay';
        $javascript_identifier_list[] = 'gr_RegularWDay';

        //Return JavaScript Identifier List
        return $javascript_identifier_list;
    }

    /**
     * JavaScript形式の識別子とその値のリストを返す(Object版)
     *
     * @param  object $object      //Target Object
     * @param  string $object_type //Optional Object Type
     *
     * @return array  $javascript_identifier_value_list    //JavaScript Identifier Value List
     */
    function getJavaScriptIdentifierValueListWithObject(
        &$object,
        $object_type = null
    ) {
        //Get Identifier Value List
        $identifier_value_list
            = $this->getIdentifierValueListWithObject($object, $object_type);

        //Base Class Infomation
        $javascript_identifier_value_list = [];

        //Event
        $javascript_identifier_value_list['gr_EID'] = '"'
                                                      . $identifier_value_list['%grn.schedule.eventbase.id%']
                                                      . '"';
        if (is_a($object->creator, 'CB_User')) {
            $javascript_identifier_value_list['gr_UID'] = '"'
                                                          . $object->creator->getOID()
                                                          . '"';
            $str
                = mb_ereg_replace("\\\\",
                "\\\\", $object->creator->get('display_name'));
            $creator_name
                = htmlspecialchars($str);
            $javascript_identifier_value_list['gr_Creator'] = '"'
                                                              . $creator_name
                                                              . '"';
        } elseif (is_string($object->creator)) {
            $str = mb_ereg_replace("\\\\",
                "\\\\", $object->creator);
            $creator_name
                = htmlspecialchars($str);
            $javascript_identifier_value_list['gr_Creator'] = '"'
                                                              . $creator_name
                                                              . '"';
        }
        $str = mb_ereg_replace("\\\\",
            "\\\\", $identifier_value_list['%grn.schedule.eventbase.detail%']);
        $javascript_identifier_value_list['gr_Detail'] = '"'
                                                         . htmlspecialchars($str)
                                                         . '"';

        //Members
        $member_count = count($object->users);
        if ($member_count !== 0) {
            $javascript_identifier_value_list['gr_MemberGUIDs'] = 'new Array('
                                                                  . $member_count
                                                                  . ')';
            $javascript_identifier_value_list['gr_MemberNames']
                = 'new Array('
                  . $member_count
                  . ')';
            $javascript_identifier_value_list['gr_MemberAccounts']
                = 'new Array('
                  . $member_count
                  . ')';
            $javascript_identifier_value_list['gr_MemberMails']
                = 'new Array('
                  . $member_count
                  . ')';

            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $users_info = $uum->getUsersInfo($object->users,
                ['col_display_name', 'col_foreign_key', 'col_email_address']);
            $user_index = 0;
            foreach ($users_info as $user_id => $user_info) {
                $javascript_identifier_value_list['gr_MemberGUIDs']
                    = $javascript_identifier_value_list['gr_MemberGUIDs']
                      . '; gr_MemberGUIDs[' . $user_index . '] = ' . '"'
                      . $user_id . '"';
                $str = mb_ereg_replace("\\\\", "\\\\",
                    $user_info['col_display_name']);
                $javascript_identifier_value_list['gr_MemberNames']
                    = $javascript_identifier_value_list['gr_MemberNames']
                      . '; gr_MemberNames[' . $user_index . '] = ' . '"'
                      . htmlspecialchars($str) . '"';
                $str = mb_ereg_replace("\\\\", "\\\\",
                    $user_info['col_foreign_key']);
                $javascript_identifier_value_list['gr_MemberAccounts']
                    = $javascript_identifier_value_list['gr_MemberAccounts']
                      . '; gr_MemberAccounts[' . $user_index . '] = ' . '"'
                      . htmlspecialchars($str) . '"';
                $str = mb_ereg_replace("\\\\", "\\\\",
                    $user_info['col_email_address']);
                $javascript_identifier_value_list['gr_MemberMails']
                    = $javascript_identifier_value_list['gr_MemberMails']
                      . '; gr_MemberMails[' . $user_index . '] = ' . '"'
                      . htmlspecialchars($str) . '"';
                $user_index++;
            }
        }

        //Facilities
        $facility_count = count($object->facilities);
        if ($facility_count !== 0) {
            $javascript_identifier_value_list['gr_FacilityIDs'] = 'new Array('
                                                                  . $facility_count
                                                                  . ')';
            $javascript_identifier_value_list['gr_FacilityNames'] = 'new Array('
                                                                    . $facility_count
                                                                    . ')';

            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            $facilities_info
                = $facility_logic->getFacilitiesInfo($object->facilities,
                CB_DATABASE_NO_LOCK);
            $facility_index = 0;
            foreach ($facilities_info as $facility_id => $facility_info) {
                $javascript_identifier_value_list['gr_FacilityIDs']
                    = $javascript_identifier_value_list['gr_FacilityIDs']
                      . '; gr_FacilityIDs[' . $facility_index . '] = ' . '"'
                      . $facility_id . '"';
                $str = mb_ereg_replace("\\\\", "\\\\",
                    $facility_info['col_name']);
                $javascript_identifier_value_list['gr_FacilityNames']
                    = $javascript_identifier_value_list['gr_FacilityNames']
                      . '; gr_FacilityNames[' . $facility_index . '] = ' . '"'
                      . htmlspecialchars($str) . '"';
                $facility_index++;
            }
        }

        //Create Aliases for Old Garoon
        if (is_a($object, 'GRN_Schedule_NormalEvent')) {
            //Event Type
            $javascript_identifier_value_list['gr_Normal'] = '"' . '1' . '"';
            $javascript_identifier_value_list['gr_Banner'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Regular'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Temporary'] = '"' . '0' . '"';
            //Start and End DateTime
            $event_type = $object->getEventType();
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
                == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
            ) {
                $setdate
                    = $identifier_value_list['%grn.schedule.normalevent.setdatetime%'];
                $enddate
                    = $identifier_value_list['%grn.schedule.normalevent.enddatetime%'];

                $javascript_identifier_value_list['gr_StartYear'] = '"'
                                                                    . $setdate->year
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMonth'] = '"'
                                                                     . $setdate->month
                                                                     . '"';
                $javascript_identifier_value_list['gr_StartDay'] = '"'
                                                                   . $setdate->day
                                                                   . '"';
                $javascript_identifier_value_list['gr_StartHour'] = '""';
                $javascript_identifier_value_list['gr_StartMinute'] = '""';
                $javascript_identifier_value_list['gr_EndYear'] = '"'
                                                                  . $enddate->year
                                                                  . '"';
                $javascript_identifier_value_list['gr_EndMonth'] = '"'
                                                                   . $enddate->month
                                                                   . '"';
                $javascript_identifier_value_list['gr_EndDay'] = '"'
                                                                 . $enddate->day
                                                                 . '"';
                $javascript_identifier_value_list['gr_EndHour'] = '""';
                $javascript_identifier_value_list['gr_EndMinute'] = '""';
            } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_START)
                      == GRN_SCHEDULE_EVENT_TYPE_START
            ) {
                $setdate
                    = $identifier_value_list['%grn.schedule.normalevent.setdatetime%']->getDate();
                $settime
                    = $identifier_value_list['%grn.schedule.normalevent.setdatetime%']->getTime();

                $javascript_identifier_value_list['gr_StartYear'] = '"'
                                                                    . $setdate->year
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMonth'] = '"'
                                                                     . $setdate->month
                                                                     . '"';
                $javascript_identifier_value_list['gr_StartDay'] = '"'
                                                                   . $setdate->day
                                                                   . '"';
                $javascript_identifier_value_list['gr_StartHour'] = '"'
                                                                    . $settime->hour
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMinute'] = '"'
                                                                      . $settime->minute
                                                                      . '"';
                $javascript_identifier_value_list['gr_EndYear'] = '""';
                $javascript_identifier_value_list['gr_EndMonth'] = '""';
                $javascript_identifier_value_list['gr_EndDay'] = '""';
                $javascript_identifier_value_list['gr_EndHour'] = '""';
                $javascript_identifier_value_list['gr_EndMinute'] = '""';
            } else {
                $setdate
                    = $identifier_value_list['%grn.schedule.normalevent.setdatetime%']->getDate();
                $settime
                    = $identifier_value_list['%grn.schedule.normalevent.setdatetime%']->getTime();
                $enddate
                    = $identifier_value_list['%grn.schedule.normalevent.enddatetime%']->getDate();
                $endtime
                    = $identifier_value_list['%grn.schedule.normalevent.enddatetime%']->getTime();

                $javascript_identifier_value_list['gr_StartYear'] = '"'
                                                                    . $setdate->year
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMonth'] = '"'
                                                                     . $setdate->month
                                                                     . '"';
                $javascript_identifier_value_list['gr_StartDay'] = '"'
                                                                   . $setdate->day
                                                                   . '"';
                $javascript_identifier_value_list['gr_StartHour'] = '"'
                                                                    . $settime->hour
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMinute'] = '"'
                                                                      . $settime->minute
                                                                      . '"';
                $javascript_identifier_value_list['gr_EndYear'] = '"'
                                                                  . $enddate->year
                                                                  . '"';
                $javascript_identifier_value_list['gr_EndMonth'] = '"'
                                                                   . $enddate->month
                                                                   . '"';
                $javascript_identifier_value_list['gr_EndDay'] = '"'
                                                                 . $enddate->day
                                                                 . '"';
                $javascript_identifier_value_list['gr_EndHour'] = '"'
                                                                  . $endtime->hour
                                                                  . '"';
                $javascript_identifier_value_list['gr_EndMinute'] = '"'
                                                                    . $endtime->minute
                                                                    . '"';
            }
            //Private
            $javascript_identifier_value_list['gr_Private'] = '"'
                                                              . $identifier_value_list['%grn.schedule.eventbase.private%']
                                                              . '"';
        } elseif (is_a($object, 'GRN_Schedule_RepeatEvent')) {
            //Event Type
            $javascript_identifier_value_list['gr_Normal'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Banner'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Regular'] = '"' . '1' . '"';
            $javascript_identifier_value_list['gr_Temporary'] = '"' . '0' . '"';
            //Repeat Type
            $javascript_identifier_value_list['gr_RegularType'] = '"'
                                                                  . $identifier_value_list['%grn.schedule.repeatevent.repeat_type%']
                                                                  . '"';
            $javascript_identifier_value_list['gr_RegularDay'] = '"'
                                                                 . $identifier_value_list['%grn.schedule.repeatevent.day%']
                                                                 . '"';
            $javascript_identifier_value_list['gr_RegularWDay'] = '"'
                                                                  . $identifier_value_list['%grn.schedule.repeatevent.wday%']
                                                                  . '"';
            $event_type
                = $object->getEventType();
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
                == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
            ) {
                $javascript_identifier_value_list['gr_StartHour'] = '""';
                $javascript_identifier_value_list['gr_StartMinute'] = '""';
                $javascript_identifier_value_list['gr_EndHour'] = '""';
                $javascript_identifier_value_list['gr_EndMinute'] = '""';
            } elseif (($event_type & GRN_SCHEDULE_EVENT_TYPE_START)
                      == GRN_SCHEDULE_EVENT_TYPE_START
            ) {
                $settime
                    = $identifier_value_list['%grn.schedule.repeatevent.settime%'];

                $javascript_identifier_value_list['gr_StartHour'] = '"'
                                                                    . $settime->hour
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMinute'] = '"'
                                                                      . $settime->minute
                                                                      . '"';
                $javascript_identifier_value_list['gr_EndHour'] = '""';
                $javascript_identifier_value_list['gr_EndMinute'] = '""';
            } else {
                $settime
                    = $identifier_value_list['%grn.schedule.repeatevent.settime%'];
                $endtime
                    = $identifier_value_list['%grn.schedule.repeatevent.endtime%'];
                $javascript_identifier_value_list['gr_StartHour'] = '"'
                                                                    . $settime->hour
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMinute'] = '"'
                                                                      . $settime->minute
                                                                      . '"';
                $javascript_identifier_value_list['gr_EndHour'] = '"'
                                                                  . $endtime->hour
                                                                  . '"';
                $javascript_identifier_value_list['gr_EndMinute'] = '"'
                                                                    . $endtime->minute
                                                                    . '"';
            }

            //Private
            $javascript_identifier_value_list['gr_Private'] = '"'
                                                              . $identifier_value_list['%grn.schedule.eventbase.private%']
                                                              . '"';
        } elseif (is_a($object, 'GRN_Schedule_BannerEvent')) {
            //Event Type
            $javascript_identifier_value_list['gr_Normal'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Banner'] = '"' . '1' . '"';
            $javascript_identifier_value_list['gr_Regular'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Temporary'] = '"' . '0' . '"';
            //Start and End DateTime
            $setdate
                = $identifier_value_list['%grn.schedule.bannerevent.setdate%'];
            $enddate
                = $identifier_value_list['%grn.schedule.bannerevent.enddate%'];
            $javascript_identifier_value_list['gr_StartYear'] = '"'
                                                                . $setdate->year
                                                                . '"';
            $javascript_identifier_value_list['gr_StartMonth'] = '"'
                                                                 . $setdate->month
                                                                 . '"';
            $javascript_identifier_value_list['gr_StartDay'] = '"'
                                                               . $setdate->day
                                                               . '"';
            $javascript_identifier_value_list['gr_EndYear'] = '"'
                                                              . $enddate->year
                                                              . '"';
            $javascript_identifier_value_list['gr_EndMonth'] = '"'
                                                               . $enddate->month
                                                               . '"';
            $javascript_identifier_value_list['gr_EndDay'] = '"'
                                                             . $enddate->day
                                                             . '"';
        } elseif (is_a($object, 'GRN_Schedule_TemporaryEvent')) {
            //Event Type
            $javascript_identifier_value_list['gr_Normal'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Banner'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Regular'] = '"' . '0' . '"';
            $javascript_identifier_value_list['gr_Temporary'] = '"' . '1' . '"';
            //Start and End DateTime
            if ($object->setdatetime) {
                $setdate
                    = $identifier_value_list['%grn.schedule.temporaryevent.setdatetime%']->getDate();
                $settime
                    = $identifier_value_list['%grn.schedule.temporaryevent.setdatetime%']->getTime();
                $enddate
                    = $identifier_value_list['%grn.schedule.temporaryevent.enddatetime%']->getDate();
                $endtime
                    = $identifier_value_list['%grn.schedule.temporaryevent.enddatetime%']->getTime();
                $javascript_identifier_value_list['gr_StartYear'] = '"'
                                                                    . $setdate->year
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMonth'] = '"'
                                                                     . $setdate->month
                                                                     . '"';
                $javascript_identifier_value_list['gr_StartDay'] = '"'
                                                                   . $setdate->day
                                                                   . '"';
                $javascript_identifier_value_list['gr_StartHour'] = '"'
                                                                    . $settime->hour
                                                                    . '"';
                $javascript_identifier_value_list['gr_StartMinute'] = '"'
                                                                      . $settime->minute
                                                                      . '"';
                $javascript_identifier_value_list['gr_EndYear'] = '"'
                                                                  . $enddate->year
                                                                  . '"';
                $javascript_identifier_value_list['gr_EndMonth'] = '"'
                                                                   . $enddate->month
                                                                   . '"';
                $javascript_identifier_value_list['gr_EndDay'] = '"'
                                                                 . $enddate->day
                                                                 . '"';
                $javascript_identifier_value_list['gr_EndHour'] = '"'
                                                                  . $endtime->hour
                                                                  . '"';
                $javascript_identifier_value_list['gr_EndMinute'] = '"'
                                                                    . $endtime->minute
                                                                    . '"';
            }
            //Private
            $javascript_identifier_value_list['gr_Private'] = '"'
                                                              . $identifier_value_list['%grn.schedule.eventbase.private%']
                                                              . '"';
        }

        //Remove "%" Character and Replace "." Character From Key
        foreach (array_keys($identifier_value_list) as $identifier_value_key) {
            if ( ! is_object($identifier_value_list[$identifier_value_key])
                 && ! is_array($identifier_value_list[$identifier_value_key])
            ) {
                $javascript_identifier_value_key = str_replace('%', '',
                    $identifier_value_key);
                $javascript_identifier_value_key = str_replace('.', '_',
                    $javascript_identifier_value_key);
                $str
                    = htmlspecialchars($identifier_value_list[$identifier_value_key]);
                $str = mb_ereg_replace("\\\\",
                    "\\\\", $str);
                $str = mb_ereg_replace("\r\n",
                    '\r\n', $str);
                $str = mb_ereg_replace("\r", '\r',
                    $str);
                $str = mb_ereg_replace("\n", '\n',
                    $str);
                $javascript_identifier_value_list[$javascript_identifier_value_key]
                    = '"' . $str . '"';
            }
        }

        //Return JavaScript Identifier Value List
        return $javascript_identifier_value_list;
    }

    /**
     * @param $param_list
     * @param $members
     * @param $login_id
     *
     * @return array
     */
    function getInteractionInfoList($param_list, $members, $login_id)
    {
        $app_locator = GRN_ApplicationLocator::instance();

        $app_ids = [
            'phonemessage'
        ];

        $interaction_info_list = [];
        foreach ($app_ids as $app_id) {
            $app = $app_locator->getInstance($app_id);

            if (is_null($app)) {
                continue;
            }
            if ( ! method_exists($app, 'getInteractionInfo')) {
                continue;
            }

            if ( ! AppAccess::isAppAvailable($app_id, $login_id)) {
                continue;
            }
            $users_id
                = AppAccess::filterUserIdsInternalAccessByAppId(array_keys($members),
                $app_id);
            $interaction_info_list[$app_id]
                = $app->getInteractionInfo($login_id, $users_id, $param_list);
        }

        return $interaction_info_list;
    }

    /**
     * @param $user
     * @param $params
     *
     * @return GRN_Star_Data
     */
    function getStarData($user, $params)
    {
        assert('is_array($params) && count($params) > 0');
        $event_id = null;
        if (array_key_exists('event', $params)) {
            $event_id = $params['event'];
        }
        $str_date = array_key_exists('bdate', $params) ? $params['bdate']
            : null;
        $date = new CB_Date();
        if ( ! $date->parse($str_date)) {
            $tsex = new CB_TimeStampEx();
            $date = $tsex->getDate();
        }
        if ( ! cb_date_validate_date($date)) {
            cb_throw_error(E_COMMON_INVALID_DATE);
        }
        $event = $this->getEvent($user, $event_id, $date, CB_DATABASE_NO_LOCK,
            false, GRN_SCHEDULE_GET_MEMBER_ID);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        // Check access permission
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $dynamic_roles = $uum->listGrantedRoles();
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_Logic::getInstance();
        $access = $acc_logic->getEventAccessByID($user, $event, ['read'],
            $dynamic_roles);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        $ret = $this->_createStarData($event, $date);

        return $ret;
    }

    /**
     * @param $event
     * @param $date
     *
     * @return GRN_Star_Data
     */
    function _createStarData($event, $date)
    {
        assert('is_object($event)');
        assert('is_a($date, \'cb_date\')');

        require_once('star/logic.csp');
        $data = new GRN_Star_Data();
        $data->setModuleId($this->getModuleId());
        $event_id = $event->id;
        $subject = $event->getTitle();
        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            $event_id = 'rp_' . $event_id . '_' . $date->format();
            $subject = cb_msg('grn.star', 'star_title',
                [
                    'separator' => ' ',
                    'title'     => $event->getTitle(),
                    'time'      => cb_date_format('DateShort_MD', $date)
                ]);
            $data->setUniqueId($event_id);
            $data->setSubjectData(html_entity_decode($subject));
            $org_data = ['event' => $event->id, 'bdate' => $date->format()];
        } else {
            $data->setUniqueId($event_id);
            $data->setSubjectData(html_entity_decode($subject));
            $org_data = ['event' => $event->id, 'bdate' => $date->format()];
        }
        if ($event->mtime) {
            $data->setTimeStampData($event->mtime);
        } else {
            $data->setTimeStampData($event->ctime);
        }
        if (is_a($event->creator, 'CB_User')) {
            $data->setSenderData($event->creator->get('display_name'),
                $event->creator->getOID());
        } else {
            $data->setSenderData($event->creator, null);
        }
        $data->setOrgData($org_data);

        return $data;
    }

    /**
     * @param $user
     */
    function updateStarData($user)
    {
        assert('is_object($user) && is_a($user, \'cb_user\')');
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_Logic::getInstance();
        $dynamic_roles = $uum->listGrantedRoles();

        require_once('star/logic.csp');
        $logic = GRN_Star_StarLogic::getInstance();

        $star_list = $logic->getList($user, $this->getModuleId(), 0, -1);
        foreach ($star_list as $starid => $star_data) {
            if (isset($star_data['org_data'])) {
                $bdate = array_key_exists('bdate', $star_data['org_data'])
                    ? $star_data['org_data']['bdate'] : null;
                $date = new CB_Date();
                if ( ! $date->parse($bdate)) {
                    $ts = new CB_TimeStampEx();
                    $date = $ts->getDate();
                }
                $event_id = array_key_exists('event', $star_data['org_data'])
                    ? $star_data['org_data']['event'] : null;
                $event = $this->getEvent($user, $event_id, null,
                    CB_DATABASE_NO_LOCK, false, GRN_SCHEDULE_GET_MEMBER_ID);
                if ( ! $event) {
                    // if event don't exist, remove star item.
                    $logic->removeByIds($user, [$starid]);
                    continue;
                }
                // if user have no access right, remove star item
                $access = $acc_logic->getEventAccessByID($user, $event,
                    ['read'], $dynamic_roles);
                if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
                    $logic->removeByIds($user, [$starid]);
                    continue;
                }
                // if event is a repeat event
                if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                    require_once('schedule/repeat_event_logic.csp');
                    $repeat_logic
                        = GRN_Schedule_RepeatEventLogic::getInstance();
                    $event_date = $repeat_logic->getRepeatFirstDate($event,
                        $date);

                    if (is_a($event_date['setdatetime'], 'CB_Date')
                        || is_a($event_date['setdatetime'], 'CB_DateTime')
                    ) {
                        $dateex = new CB_DateEx($event_date['setdatetime']);
                        if ($dateex->compare($date) != 0) {
                            $logic->removeByIds($user, [$starid]);
                            continue;
                        }
                    } else {
                        $logic->removeByIds($user, [$starid]);
                        continue;
                    }
                }
                // update existence tiem
                $data = $this->_createStarData($event, $date);
                $ts = new CB_TimeStampEx($data->getTimeStampData());
                if ($ts->compare($star_data['timestamp']) != 0) {
                    $logic->modify($user, $data);
                }
            } else {
                // if org_data isn't exist, remove star item
                $logic->removeByIds($user, [$starid]);
            }
        }
    }

    /**
     * @param $event
     * @param $factory
     * @param $event_id
     * @param $display_on_right
     */
    function addFacilityNameToEventTitle(
        &$event,
        $factory,
        $event_id,
        $display_on_right,
        $mobileView = false
    ) {
        if ( ! $factory) {
            require_once('schedule/eventfactory.csp');
            $factory = GRN_Schedule_EventFactory::getInstance();
        }
        $names = $factory->getFacilitiesNameByEvent($event['id']);

        if ( ! is_array($names) || count($names) === 0) {
            return;
        }

        if ($mobileView) {
            $countView = count($names);
            if ($countView > 1) {
                $event['event_facility_name'] = array_values($names)[0] . "(+"
                                                . --$countView . ")";
            } else {
                $event['event_facility_name'] = array_values($names)[0];
            }
        } else {
            $names = htmlspecialchars(implode('-',
                $names));
            $event['event_facility_name'] = ' [' . $names . '] ';

            if ($display_on_right) {
                $event['title'] .= ' [' . $names . '] ';
            } else {
                $event['title'] = ' [' . $names . '] ' . $event['title'];
            }
        }
    }

    /**
     * 返答待ちの出席確認予定の件を取得する
     * Archive the number of appointments which need to be responded.
     *
     * @param CB_User $user
     * @param bool    $force
     *
     * @return mixed
     */
    function getAttendanceCheckEventCount(&$user, $force = false)
    {
        $attendanceStatusLogic = new \grn\schedule\AttendanceStatusLogic();
        if ($attendanceStatusLogic->isEnableAttendanceCheck()
            && $user instanceof \CB_User
        ) {
            $userId = $user->getOID();
            if ($force
                || ! array_key_exists($userId,
                    $this->_attendanceCheckEventCount)
            ) {
                require_once('schedule/view_util.csp');
                $util = GRN_Schedule_View_Util::getInstance();
                $timeStampEx = new CB_TimeStampEx();
                $today = $timeStampEx->getDateTime();

                $dateEx = new CB_DateEx($today);
                $endDateTime = [
                    'format'    => $dateEx->format(),
                    'type'      => $util->getDayType($dateEx),
                    'date'      => $dateEx,
                    'timestamp' => $timeStampEx->unix_ts
                ];

                require_once("schedule/eventfactory.csp");
                $eventFactory = GRN_Schedule_EventFactory::getInstance();
                $events
                    = $eventFactory->getEventsAttendance($userId,
                    $endDateTime,
                    GRN_SCHEDULE_ATTENDANCE_LIST_SCENE_TYPE_ATTENDEES,
                    GRN_SCHEDULE_ATTENDANCE_LIST_REGISTRANT_SHOW_ALL_NOT_REPLY);
                $this->_attendanceCheckEventCount[$userId] = count($events);
            }

            return $this->_attendanceCheckEventCount[$userId];
        }

        return 0;
    }

    /**
     * @param CB_User $user
     * @param bool    $force
     *
     * @return int
     */
    function getFacilityApprovalRequestNum(\CB_User &$user, $force = false)
    {
        $userId = $user->getOID();
        if ($force
            || ! array_key_exists($userId, $this->_facilityApprovalRequestNum)
        ) {
            $this->_facilityApprovalRequestNum[$userId] = 0;
            require_once("schedule/facility_system_logic.csp");
            require_once("schedule/facility_privilege.csp");
            $facilityApprovalSetting
                = new \grn\schedule\ScheduleFacilityApprovalSetting();
            $facilitySystemLogic
                = \GRN_Facility_SystemLogic::getInstance();
            $privilegeLogic
                = \GRN_Facility_Privilege_Logic::getInstance();
            $privilegeFacilityGroups
                = $privilegeLogic->getFacilityGroupWithAuthorityEx($user);
            $privilegeFacilities
                = $facilitySystemLogic->getFacilityIdListByGroupIdList(array_keys($privilegeFacilityGroups));
            $privilegeApprovalFacilities
                = $facilityApprovalSetting->filterNeedApprovalFacilityIds($privilegeFacilities);

            require_once('schedule/eventfactory.csp');
            $eventFactory = GRN_Schedule_EventFactory::getInstance();
            if (count($privilegeApprovalFacilities) > 0) {
                $timeStampEx = new CB_TimeStampEx();
                $events
                    = $eventFactory->getEventForApprovalList(
                    $privilegeApprovalFacilities,
                    $timeStampEx->unix_ts,
                    GRN_FACILITY_APPROVAL_LIST_SHOW_NOT_PROCESSED
                );
                $this->_facilityApprovalRequestNum[$userId] = count($events);
            }
        }

        return $this->_facilityApprovalRequestNum[$userId];
    }

    /**
     * Forward facility rely mail when add appointment.
     *
     * @param GRN_Schedule_NormalEvent $event
     * @param CB_User                  $operator
     *
     * @return boolean                    成功した場合はTRUEそれ以外はFALSE
     */
    function forwardFacilityRelyMail(& $event, & $operator)
    {
        $notify_logic = GRN_Schedule_Notify_Logic::getInstance();

        return $notify_logic->forwardFacilityRelyMail($event, $operator);
    }

    /**
     * Forward facility rely mail when edit appointment.
     *
     * @param GRN_Schedule_NormalEvent $oldEvent
     * @param GRN_Schedule_NormalEvent $newEvent
     *
     * @return boolean                    成功した場合はTRUEそれ以外はFALSE
     */
    function forwardFacilityRelyMailForUpdate($oldEvent, $newEvent)
    {
        $sender = $oldEvent->creator;
        if ( ! is_a($sender, 'CB_User')) {
            return false;
        }
        $notifyLogic = GRN_Schedule_Notify_Logic::getInstance();
        if (is_null($newEvent->facilities)) {
            return false;
        } elseif (is_null($oldEvent->facilities)) {
            return $notifyLogic->forwardFacilityRelyMail($newEvent, $sender);
        }

        if ($oldEvent->setdatetime->compare($newEvent->setdatetime)
            || $oldEvent->enddatetime->compare($newEvent->enddatetime)
        ) {
            return $notifyLogic->forwardFacilityRelyMail($newEvent, $sender);
        } else {
            $oldFacilities = $oldEvent->facilities
                ? $oldEvent->facilities : [];
            $newFacilities = $newEvent->facilities
                ? $newEvent->facilities : [];
            $oldFacilitiesAssocArray = [];
            $newFacilitiesAssocArray = [];

            foreach ($oldFacilities as $facility) {
                $oldFacilitiesAssocArray[$facility->getOID()] = $facility;
            }

            foreach ($newFacilities as $facility) {
                $newFacilitiesAssocArray[$facility->getOID()] = $facility;
            }
            $addedFacilities = array_diff_key($newFacilitiesAssocArray,
                $oldFacilitiesAssocArray);
            if (count($addedFacilities)) {
                return $notifyLogic->forwardFacilityRelyMail($newEvent, $sender,
                    $addedFacilities);
            }

            return false;
        }
    }

    /**
     * Forward facility result(approve/reject) mail
     *
     * @param grn\schedule\bean\FacilityApproval $fa
     *
     * @return boolean                              成功した場合はTRUEそれ以外はFALSE
     */
    function forwardFacilityResultMail(grn\schedule\bean\FacilityApproval $fa)
    {
        $notify_logic = GRN_Schedule_Notify_Logic::getInstance();

        return $notify_logic->forwardFacilityResultMail($fa);
    }
}


