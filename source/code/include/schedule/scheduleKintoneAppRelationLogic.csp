<?php

namespace grn\schedule;

use grn\kintone\bean\GrnKintoneAppRelationSetting;
use grn\kintone\AppRelationSettingLogic;
use grn\schedule\bean\GrnScheduleAppRelation;
use grn\schedule\dao\GrnScheduleAppRelationDAO;
use grn\grn\Validate;

class scheduleKintoneAppRelationLogic
{
    /**
     * @param int   $event_id
     * @param array $items_info (item_id => kintone_app_list)
     *
     * @return array    (item_id=>array(app_id=>x, field_code=>array(...), record_id=>x))
     */
    public function getRelatedAppRecords($event_id, array $items_info)
    {
        if ( ! Validate::isNumber($event_id)) {
            return false;
        }

        $records = [];
        $relation_dao = new GrnScheduleAppRelationDAO();
        $relations = $relation_dao->getRelationsByEventId($event_id);
        foreach ($relations as $relation) {
            /** @var GrnScheduleAppRelation $relation */
            $kintone_app = cb_at($items_info, $relation->getItemId());
            if (is_array($kintone_app)) {
                foreach ($kintone_app as $app) {
                    if ($relation->getAppId() != ''
                        && $relation->getAppId() == cb_at($app,
                            GrnKintoneAppRelationSetting::VALUE_KEY_APP_ID)
                    ) {
                        $app['record_id'] = $relation->getRecordId();
                        $records[$relation->getItemId()] = $app;
                        break;
                    }
                }
            }
        }

        return $records;
    }

    public function addRelationRecord($event_id, $event_menu, $input)
    {
        if ( ! Validate::isNumber($event_id)) {
            return false;
        }

        $relation = new GrnScheduleAppRelation();
        $relation->setEvent($event_id);

        $login_user = cb_get_login_user();
        $relation->setUser($login_user->getOID());

        $relation_dao = new GrnScheduleAppRelationDAO();

        $item_ids = $this->getRelatedItemIds($event_menu);
        foreach ($item_ids as $item_id) {
            $app_id = cb_at($input, 'app_item_' . $item_id);
            $record_id = cb_at($input, 'record_item_' . $item_id);
            if (Validate::isNumber($app_id) && Validate::isNumber($record_id)) {
                $relation->setItemId($item_id);
                $relation->setAppId($app_id);
                $relation->setRecordId($record_id);
                $relation_dao->addRelation($relation);
            }
        }

        return true;
    }

    private function getRelatedItemIds($event_menu)
    {
        $setting_logic = new AppRelationSettingLogic();
        $all_settings = $setting_logic->getAllRelationSettings('schedule/add');
        $item_ids = [];
        foreach ($all_settings as $id => $setting) {
            if (cb_at($setting, AppRelationSettingLogic::ALL_MENU)
                || (Validate::isNotNull($event_menu)
                    && in_array($event_menu,
                        $setting[AppRelationSettingLogic::MENUS]))
            ) {
                $item_ids[] = $id;
            }
        }

        return $item_ids;
    }

    public function modifyRelationRecord($event_id, $event_menu, $input)
    {
        if ( ! Validate::isNumber($event_id)) {
            return false;
        }

        $login_user_id = cb_get_login_user()->getOID();

        // get existed relations from DB
        $relation_dao = new GrnScheduleAppRelationDAO();
        $old_relations = $relation_dao->getRelationsByEventId($event_id);

        // get new relations from input
        $new_relations = [];
        $item_ids = $this->getRelatedItemIds($event_menu);
        foreach ($item_ids as $item_id) {
            $app_id = cb_at($input, 'app_item_' . $item_id);
            $record_id = cb_at($input, 'record_item_' . $item_id);
            if (Validate::isNumber($app_id)
                && Validate::isNumber($record_id)
            ) {
                $relation = new GrnScheduleAppRelation();
                $relation->setAppId($app_id);
                $relation->setRecordId($record_id);
                $relation->setEvent($event_id);
                $relation->setItemId($item_id);
                $relation->setUser($login_user_id);
                $new_relations[$item_id] = $relation;
            }
        }

        $delete_relation_ids = [];
        foreach ($old_relations as $old_relation) {
            /**
             * @var GrnScheduleAppRelation $old_relation
             * @var GrnScheduleAppRelation $new_relation
             */
            $new_relation = cb_at($new_relations, $old_relation->getItemId(),
                new GrnScheduleAppRelation());
            if ($new_relation->getEvent()) {
                $relation_dao->updateRelation($new_relation);
                unset($new_relations[$old_relation->getItemId()]);
            } else {
                $delete_relation_ids[] = $old_relation->getId();
            }
        }

        foreach ($new_relations as $new_relation) {
            $relation_dao->addRelation($new_relation);
        }

        $relation_dao->deleteRelations($delete_relation_ids);
    }
}
