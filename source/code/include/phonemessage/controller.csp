<?php

require_once('grn/controller.csp');
require_once('grn/application.csp');

class GRN_PhoneMessage_ErrorListener
{
    /**
     * @return GRN_PhoneMessage_ErrorListener
     */
    public static function getInstance()
    {
        static $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_PhoneMessage_ErrorListener;
        }

        return $_instance;
    }

    function error($errno, $msg)
    {
        // 監査する
        require_once('phonemessage/inspection.csp');
        $inspection = GRN_PhoneMessage_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $inspection->debug($msg);
        }
    }
}

class GRN_PhoneMessage_ControllerUtil extends GRN_ControllerUtil
{
    /**
     * @access private
     * @var GRN_Uum
     */
    var $_uum = null;

    /**
     * @access private
     * @var GRN_TableManager
     */
    var $_table_manager = null;

    /**
     * @access private
     * @var GRN_ApplicationLocator
     */
    var $_app_locator = null;

    /**
     * @access private
     */
    var $_message_manager = null;

    /**
     * @access private
     */
    var $_access_manager = null;

    /**
     * コンストラクタ
     */
    function __construct($page = null)
    {
        parent::__construct($page);

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');

        $app_locator = GRN_ApplicationLocator::instance();
        $this->_table_manager = $app_locator->getTableManager('phonemessage');

        require_once('grn/uum_util.csp');
        $this->_uum_util = GRN_UumUtil::getInstance();

        require_once('phonemessage/application.csp');
        require_once('mail/application.csp');
        $this->_app_locator = GRN_ApplicationLocator::instance();
        $this->_messag_manager = GRN_PhoneMessage_Manager::getInstance();

        require_once('phonemessage/access.csp');
        $this->_access_manager = GRN_PhoneMessage_AccessManager::getInstance();
    }

    /**
     * @access private
     */
    var $_table_infos = [];

    /**
     * テーブル情報を取得する
     *
     * @access private
     */
    function getTableInfo($table_name)
    {
        if ( ! array_key_exists($table_name, $this->_table_infos)) {
            $this->_table_infos[$table_name]
                = $this->_table_manager->getTableInfo($table_name);
        }

        return $this->_table_infos[$table_name];
    }

    /**
     * 電話メモを取得する
     */
    function getPhoneMessage(& $message)
    {
        $sender_id = null;
        if ($sender = $message->get('sender')) {
            $sender_id = $sender->getOID();
        }
        $receiver_id = null;
        if ($receiver = $message->get('receiver')) {
            $receiver_id = $receiver->getOID();
        }

        return [
            'mid'              => $message->getOID(),
            'client_name'      => $message->get('client_name'),
            'matter'           => $message->get('matter'),
            'telephone_number' => $message->get('telephone_number'),
            'message'          => $message->get('message'),
            'sender'           => $sender_id,
            'sender_name'      => $message->get('sender_name'),
            'send_time'        => $message->get('send_time'),
            'receiver'         => $receiver_id,
            'receiver_name'    => $message->get('receiver_name'),
            'confirm_time'     => $message->get('confirm_time')
        ];
    }

    /**
     * 電話メモ一覧を取得する
     */
    function listMessages($messages)
    {
        $messages_for_view = [];
        foreach (array_keys($messages) as $message_id) {
            $messages_for_view[$message_id]
                = $this->getPhoneMessage($messages[$message_id]);
        }

        return $messages_for_view;
    }

    /**
     * シングルサインオンオプション一覧を取得する
     */
    function listSSOOptions($ssos, $selected_sso = 0)
    {
        $sso_options = [];

        $label = cb_msg('grn.phonemessage', 'default');
        $value = GRN_PHONEMESSAGE_SSO_DEFAULT;
        $selected = $value == $selected_sso;
        $sso_options[$value] = [
            'label'    => $label,
            'value'    => $value,
            'selected' => $selected
        ];

        if (is_array($ssos) && 0 < count($ssos)) {
            $label = cb_msg('grn.phonemessage', 'separator');
            $value = GRN_PHONEMESSAGE_SSO_SEPARATOR;
            $sso_options[$value] = [
                'label' => $label,
                'value' => $value
            ];

            foreach (array_keys($ssos) as $value) {
                $sso = $ssos[$value];

                $label = $sso->get('display_name');
                $selected = $value == $selected_sso;
                $sso_options[$value] = [
                    'label'    => $label,
                    'value'    => $value,
                    'selected' => $selected
                ];
            }
        }

        return $sso_options;
    }

    function listCategoryOptions($selected_category, $received_only)
    {
        $module_id = GRN_PHONEMESSAGE_MODULE_ID;

        if ($received_only) {
            return [
                [
                    'value'    => '',
                    'label'    => cb_msg($module_id, 'category_received'),
                    'selected' => 0 == strlen($selected_category)
                ]
            ];
        } else {
            return [
                [
                    'value'    => 'all',
                    'label'    => cb_msg($module_id, 'category_all'),
                    'selected' => GRN_PHONEMESSAGE_CATEGORY_ALL
                                  == $selected_category
                ],
                [
                    'value'    => '',
                    'label'    => cb_msg($module_id, 'category_received'),
                    'selected' => 0 == strlen($selected_category)
                ],
                [
                    'value'    => 'sent',
                    'label'    => cb_msg($module_id, 'category_sent'),
                    'selected' => GRN_PHONEMESSAGE_CATEGORY_SENT
                                  == $selected_category
                ]
            ];
        }
    }

    function listStatusOptions($selected_status)
    {
        $module_id = GRN_PHONEMESSAGE_MODULE_ID;

        return [
            [
                'value'    => GRN_PHONEMESSAGE_STATUS_ALL,
                'label'    => cb_msg($module_id, 'status_all'),
                'selected' => GRN_PHONEMESSAGE_STATUS_ALL == $selected_status
            ],
            [
                'value'    => GRN_PHONEMESSAGE_STATUS_NOT_CONFIRMED,
                'label'    => cb_msg($module_id, 'status_not_confirmed'),
                'selected' => GRN_PHONEMESSAGE_STATUS_NOT_CONFIRMED
                              == $selected_status
            ],
            [
                'value'    => GRN_PHONEMESSAGE_STATUS_CONFIRMED,
                'label'    => cb_msg($module_id, 'status_confirmed'),
                'selected' => GRN_PHONEMESSAGE_STATUS_CONFIRMED
                              == $selected_status
            ]
        ];
    }

    function getSecurityModel($security_model)
    {
        if (GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE == $security_model) {
            return 'revoke';
        }

        return 'grant';
    }

    /**
     * @param CB_Role[] $roles
     *
     * @return array
     */
    function listStaticRoles($roles)
    {
        if (is_array($roles) && 0 < count($roles)) {
            $role_info = $this->_access_manager->getObjectInfo($roles);
            $access_counts
                = $this->_access_manager->listAccessCounts($role_info);
        }

        $roles_for_view = [];
        foreach (array_keys($roles) as $role_id) {
            $role = $roles[$role_id];
            $object = null;
            if (array_key_exists($role_id, $role_info['id_map'])) {
                $object_id = $role_info['id_map'][$role_id];
                if (array_key_exists($object_id, $role_info['objects'])) {
                    $object = $role_info['objects'][$object_id];
                }
            }

            $foreign_key = $role->get('foreign_key');
            $security_model = $this->_access_manager->getSecurityModel($object);
            $security_model = $this->getSecurityModel($security_model);
            $access_count = 0;
            if (array_key_exists($role_id, $access_counts)) {
                $access_count = $access_counts[$role_id];
            }

            $roles_for_view[$role_id] = [
                'rid'            => $role_id,
                'foreign_key'    => $foreign_key,
                'security_model' => $security_model,
                'access_count'   => $access_count
            ];
        }

        return $roles_for_view;
    }

    function getNoGroup()
    {
        return [
            'oid'         => -1,
            'name'        => cb_msg('grn.system', 'nogroup_users'),
            'foreign_key' => null,
            'description' => null,
            'ancestors'   => [],
            'children'    => [],
            'child_count' => 0
        ];
    }

    /**
     * @return array
     */
    function &getGroup($group_id)
    {
        require_once('grn/org_util.csp');

        $group_for_view = [];
        $access_count = 0;
        $security_model = null;
        if ( ! is_null($group = grn_get_org_row($group_id))) {
            $group_for_view = grn_get_org_info($group, false, true);
            $object = $this->_access_manager->getObject($group);
            $access_count = $this->_access_manager->getAccessCount($object);
            $security_model = $this->_access_manager->getSecurityModel($object);
            $security_model = $this->getSecurityModel($security_model);
        }
        $ancestors = grn_get_org_ancestors($group);
        $children = grn_get_org_children($group_id, true);
        $child_count = count($children);

        $group_for_view['security_model'] = $security_model;
        $group_for_view['access_count'] = $access_count;
        $group_for_view['ancestors'] = $ancestors;
        $group_for_view['children'] = $children;
        $group_for_view['child_count'] = $child_count;

        return $group_for_view;
    }

    function listUsers($users)
    {
        $users_for_view = [];
        foreach (array_keys($users) as $user_id) {
            $user = $users[$user_id];

            if (is_object($user)) {
                $display_name = $user->get('display_name');
            } else {
                $display_name = $user['col_display_name'];
            }
            $sso = ['uid' => $user_id];
            $users_for_view[$user_id] = [
                'display_name'     => $display_name,
                'newmessage_count' => 0,
                'sso'              => $sso
            ];
        }

        $table_info = $this->_messag_manager->getTableInfo();
        $rowset = new CB_RowSet($table_info);

        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('phonemessage');
        $user_table = $tm->getTableInfo('CB_User');
        $table_name = CB_DATABASE_TABLE_PREFIX . $table_info->getTableName();
        $rowset->addJoin($user_table,
            $table_name . '.col_receiver = u._id AND u.col_deleted IS NULL',
            CB_DATABASE_INNER_JOIN, 'u');

        $conditions = [];
        foreach (array_keys($users) as $user_id) {
            $user = $users[$user_id];
            //$conditions[] = 'col_receiver = '.$user_id;
            //for Escape
            $conditions[] = $rowset->queryf("col_receiver = '@S'", $user_id);
        }
        $condition = implode(' OR ', $conditions);
        if (0 < strlen($condition)) {
            $condition = '( ' . $condition . ' ) AND ';
        }
        $condition .= '( col_confirm_time IS NULL )';
        $rowset->addCondition($condition);

        $group_functions = ['count' => 'COUNT(*)'];
        $group_by = ['_id' => 'col_receiver'];

        $rowset->applyGroupFunctions($group_functions, $group_by);
        while ( ! is_null($result = $rowset->iterate())) {
            $user_id = $result['_id'];
            $users_for_view[$user_id]['newmessage_count'] = $result['count'];
        }

        return $users_for_view;
    }

    function listUsersFast(& $users)
    {
        if ( ! is_array($users) || 0 == count($users)) {
            return;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('phonemessage');

        $table_name = 'tab_grn_phonemessage_message';
        $group_functions = [
            'COUNT(*)',
            'col_receiver'
        ];

        $conditions = [];
        foreach (array_keys($users) as $user_id) {
            //$conditions[] = 'col_receiver = '.$user_id;
            //escape!
            $conditions[] = 'col_receiver = \'' . $dbconn->escape($user_id)
                            . '\'';
        }
        $condition = implode(' OR ', $conditions);
        if (0 < strlen($condition)) {
            $condition = '( ' . $condition . ' ) AND ';
        }
        $condition .= '( col_confirm_time IS NULL )';

        $join = 'INNER JOIN tab_cb_user AS u ON ' .
                $table_name
                . '.col_receiver = u._id AND u.col_deleted IS NULL';
        $query_format = 'SELECT %s FROM %s %s WHERE %s GROUP BY col_receiver';
        $query = sprintf($query_format, implode(', ', $group_functions),
            $table_name,
            $join,
            $condition);

        $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row_count = $dbconn->num_rows($result);

            $datas = [];
            for ($i = 0; $i < $row_count; $i++) {
                $row = $dbconn->fetch_assoc($result);
                if (is_array($row) && 0 < count($row)) {
                    $user_id = $row['col_receiver'];
                    $users[$user_id]['sso'] = ['uid' => $user_id];
                    $users[$user_id]['newmessage_count'] = $row['COUNT(*)'];
                }
            }
        }
    }

    function listUsersForAccess($users)
    {
        if (is_array($users) && 0 < count($users)) {
            $user_info = $this->_access_manager->getObjectInfo($users);
            $access_counts
                = $this->_access_manager->listAccessCounts($user_info);
        }

        $users_for_view = [];
        foreach (array_keys($users) as $user_id) {
            $user = $users[$user_id];
            $object = null;
            if (array_key_exists($user_id, $user_info['id_map'])) {
                $object_id = $user_info['id_map'][$user_id];
                if (array_key_exists($object_id, $user_info['objects'])) {
                    $object = $user_info['objects'][$object_id];
                }
            }

            $display_name = $user->get('display_name');
            $position = $user->get('position');
            $foreign_key = $user->get('foreign_key');
            $security_model = $this->_access_manager->getSecurityModel($object);
            $security_model = $this->getSecurityModel($security_model);
            $access_count = 0;
            if (array_key_exists($user_id, $access_counts)) {
                $access_count = $access_counts[$user_id];
            }

            $users_for_view[$user_id] = [
                'uid'            => $user_id,
                'display_name'   => $display_name,
                'position'       => $position,
                'foreign_key'    => $foreign_key,
                'security_model' => $security_model,
                'access_count'   => $access_count,
                'row'            => & $user
            ];
        }

        return $users_for_view;
    }

    /**
     * @param CB_Row $access
     *
     * @return array $ret
     *               string $ret['tid'] Id of the target
     *               string $ret['data']['browse'] '0' or '1'
     *               string $ret['data']['add'] '0' or '1'
     */
    function &getAccess($access)
    {
        $target = $access->get('target');
        if (is_string($target)) {
            $target_id = $target;
        } else {
            $target_id = $target->getOID();
        }

        $keys = ['browse', 'add'];
        $authorities = [];
        foreach ($keys as $key) {
            $authorities[$key] = $access->get('authority_' . $key);
        }

        $ret = [
            'tid'  => $target_id,
            'data' => $authorities
        ];

        return $ret;
    }

    /**
     * Convert list of access right instances to arrays for view.
     *
     * @param array $accesses
     *
     * @return array
     */
    function listAccesses($accesses)
    {
        require_once('grn/access_resources.csp');

        $accesses_for_view = [];
        foreach (array_keys($accesses) as $target_type) {
            foreach (array_keys($accesses[$target_type]) as $access_id) {
                $access_for_view
                    = $this->getAccess($accesses[$target_type][$access_id]);
                $access_for_view['type'] = $target_type;
                $accesses_for_view[] = $access_for_view;
            }
        }

        return $accesses_for_view;
    }

    /**
     * 組織オプション一覧を取得する
     */
    function listGroupOptions($user_id, $selected_group_id)
    {
        $gid = [];
        $group_options = [];
        $value = -1;
        $gid[] = $value;
        $label = cb_msg('grn.address', 'title_everyone');
        $selected = $selected_group_id == $value;
        $group_options[] = [
            'value'    => $value,
            'label'    => $label,
            'selected' => $selected
        ];

        $user = $this->_uum->getUser($user_id);
        $my_groups = $this->_uum->listMyGroups($user);
        if (is_array($my_groups) && 0 < count($my_groups)) {
            foreach (array_keys($my_groups) as $group_id) {
                $my_group = $my_groups[$group_id];
                $value = 'm' . $group_id;
                $label = $my_group->get('name');
                $label = cb_msg('grn.common', 'title_my_group',
                    ['name' => $label]);
                $selected = $selected_group_id == $value;
                if ($selected) {
                    $selected_group_id = null;
                }
                $group_options[] = [
                    'value'    => $value,
                    'label'    => $label,
                    'selected' => $selected
                ];
            }
        }

        $primary_group = $this->_uum->getUserPrimaryGroup($user_id);
        if ($primary_group !== false) {
            $value = $primary_group->getOID();
            $gid[] = $value;
            $label = $primary_group->get('name');
            $label = cb_msg('grn.common', 'title_primary_group',
                ['name' => $label]);
            $selected = $selected_group_id == $value;
            if ($selected) {
                $selected_group_id = null;
            }
            $group_options[] = [
                'value'    => $value,
                'label'    => $label,
                'selected' => $selected
            ];
        }

        $groups = $this->_uum->getUserGroups($user_id);
        if (is_array($groups) && 0 < count($groups)) {
            foreach (array_keys($groups) as $group_id) {
                if ( ! array_search($group_id, $gid)) {
                    $group = $groups[$group_id];
                    $value = $group_id;
                    $gid[] = $value;
                    $label = $group->get('name');
                    $label = cb_msg('grn.common', 'title_belonging_group',
                        ['name' => $label]);
                    $selected = $selected_group_id == $value;
                    if ($selected) {
                        $selected_group_id = null;
                    }
                    $group_options[] = [
                        'value'    => $value,
                        'label'    => $label,
                        'selected' => $selected
                    ];
                }
            }
        }

        $conditions = [];
        foreach ($gid as $group_id) {
            $conditions[] = 'tab_cb_group._id <> ' . $group_id;
        }
        $condition = implode(' OR ', $conditions);

        require_once('grn/uum_util.csp');
        $frequent_groups
            = $this->_uum_util->getFrequentGroupsWithCondition($user,
            GRN_COMMON_FREQUENT_GROUP_MAX, $condition);
        if (is_array($frequent_groups) && 0 < count($frequent_groups)) {
            foreach (array_keys($frequent_groups) as $group_id) {
                $frequent_group = $frequent_groups[$group_id];
                $value = $group_id;
                $label = $frequent_group->get('name');
                $label = cb_msg('grn.common', 'title_frequent_group',
                    ['name' => $label]);
                $selected = $selected_group_id == $value;
                if ($selected) {
                    $selected_group_id = null;
                }
                $group_options[] = [
                    'value'    => $value,
                    'label'    => $label,
                    'selected' => $selected
                ];
            }
        }

        if ( ! array_search($selected_group_id, $gid)) {
            $group = $this->_uum->getGroup($selected_group_id);
            if (is_object($group) && is_a($group, 'CB_Group')) {
                $value = $selected_group_id;
                $label = $group->get('name');
                $label = cb_msg('grn.common', 'title_select_group',
                    ['name' => $label]);
                $group_options[] = [
                    'value'    => $value,
                    'label'    => $label,
                    'selected' => true
                ];
            }
        }

        return $group_options;
    }

    var $_authorities = ['browse', 'add'];

    function _evaluateAccess(& $access, $target_id, $object_info)
    {
        $objects = $object_info['objects'];
        $accesses = $object_info['accesses'];
        $id_map = $object_info['id_map'];

        if (array_key_exists($target_id, $id_map)) {
            $object_id = $id_map[$target_id];

            $object = $objects[$object_id];
            $security_model = $this->_access_manager->getSecurityModel($object);

            if (GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE == $security_model) {
                if (array_key_exists($object_id, $accesses)) {
                    foreach ($accesses[$object_id] as $key => $value) {
                        if ($value) {
                            $access[$key] = 1;
                        }
                    }
                }
            } else {
                if (array_key_exists($object_id, $accesses)) {
                    foreach ($this->_authorities as $authority) {
                        if (array_key_exists($authority,
                            $accesses[$object_id])
                        ) {
                            if (1 != $accesses[$object_id][$authority]) {
                                $access[$authority] = 1;
                            }
                        } else {
                            $access[$authority] = 1;
                        }
                    }
                } else {
                    foreach ($this->_authorities as $authority) {
                        $access[$authority] = 1;
                    }
                }
            }
        }
    }

    function _evaluateAccessFast(& $access, $target_id, $objects_info)
    {
        $accesses = $objects_info['accesses'];
        $by_target_id = $objects_info['by_target_id'];

        if (array_key_exists($target_id, $by_target_id)) {
            $object_id = $by_target_id[$target_id]['_id'];
            $security_model = $by_target_id[$target_id]['security_model'];
            $security_model
                = $this->_access_manager->getSecurityModelFast($security_model);

            if (GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE == $security_model) {
                if (array_key_exists($object_id, $accesses)) {
                    foreach ($accesses[$object_id] as $key => $value) {
                        if ($value) {
                            $access[$key] = 1;
                        }
                    }
                }
            } else {
                if (array_key_exists($object_id, $accesses)) {
                    foreach ($this->_authorities as $authority) {
                        if (array_key_exists($authority,
                            $accesses[$object_id])
                        ) {
                            if (1 != $accesses[$object_id][$authority]) {
                                $access[$authority] = 1;
                            }
                        } else {
                            $access[$authority] = 1;
                        }
                    }
                } else {
                    foreach ($this->_authorities as $authority) {
                        $access[$authority] = 1;
                    }
                }
            }
        }
    }

    var $_authority_list = ['browse', 'add'];

    function evaluateAccess($user_id, $user_info, $group_info, $role_info)
    {
        $access = [];
        $found_user_access = true;

        // ユーザーのアクセス権を評価する
        $this->_evaluateAccess($access, $user_id, $user_info);
        if (count($access) === 0) {
            $found_user_access = false;
        }

        $id_map = $user_info['id_map'];
        $objects = $user_info['objects'];
        if (array_key_exists($user_id, $id_map)) {
            $object_id = $id_map[$user_id];
            $object = $objects[$object_id];
            $security_model = $this->_access_manager->getSecurityModel($object);

            // GRANTだったらアクセス権設定がある
            if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT == $security_model) {
                $found_user_access = true;
            }
        }

        // ユーザーにアクセス権設定が無かったら組織とロールを見る
        if ( ! $found_user_access) {
            // ユーザーが所属する組織のアクセス権を取得する
            $groups = $this->_uum->getUserGroups($user_id);
            foreach (array_keys($groups) as $group_id) {
                $tmp_access = [];
                $found_group_access = true;

                $this->_evaluateAccess($tmp_access, $group_id, $group_info);
                if (count($tmp_access) === 0) {
                    $found_group_access = false;
                }

                // セキュリティモデルをチェック
                $id_map = $group_info['id_map'];
                $objects = $group_info['objects'];
                if (array_key_exists($group_id, $id_map)) {
                    $object_id = $id_map[$group_id];
                    $object = $objects[$object_id];
                    $security_model
                        = $this->_access_manager->getSecurityModel($object);

                    // GRANTならアクセス権設定がある
                    if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                        == $security_model
                    ) {
                        $found_group_access = true;
                    }
                }

                // 対象の組織にアクセス権設定が存在しない
                if ( ! $found_group_access) {
                    continue;
                }

                // 許可優先でアクセス権を構築
                foreach ($this->_authority_list as $authority) {
                    if ( ! array_key_exists($authority, $tmp_access)) {
                        $value = 0;
                    } else {
                        $value = $tmp_access[$authority];
                    }

                    if ( ! array_key_exists($authority, $access) || ! $value) {
                        $access[$authority] = $value;
                    }
                }

                // アクセス許可は0、拒否は1なので、合計が0なら全てアクセス許可
                if (array_sum($access) === 0) {
                    return [];
                }
            }

            // ユーザーが持つスタティックロールのアクセス権を取得する
            $roles = $this->_uum->getUserRoles($user_id);
            foreach (array_keys($roles) as $role_id) {
                $tmp_access = [];
                $found_role_access = true;

                $this->_evaluateAccess($tmp_access, $role_id, $role_info);
                if (count($tmp_access) === 0) {
                    $found_role_access = false;
                }

                // セキュリティモデルをチェック
                $id_map = $role_info['id_map'];
                $objects = $role_info['objects'];
                if (array_key_exists($role_id, $id_map)) {
                    $object_id = $id_map[$role_id];
                    $object = $objects[$object_id];
                    $security_model
                        = $this->_access_manager->getSecurityModel($object);
                    // GRANTならアクセス権設定がある
                    if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                        == $security_model
                    ) {
                        $found_role_access = true;
                    }
                }

                // 対象のロールにアクセス権設定が存在しない
                if ( ! $found_role_access) {
                    continue;
                }

                // 許可優先でアクセス権を構築
                foreach ($this->_authority_list as $authority) {
                    if ( ! array_key_exists($authority, $tmp_access)) {
                        $value = 0;
                    } else {
                        $value = $tmp_access[$authority];
                    }

                    if ( ! array_key_exists($authority, $access) || ! $value) {
                        $access[$authority] = $value;
                    }
                }

                // アクセス許可は0、拒否は1なので、合計が0なら全てアクセス許可
                if (array_sum($access) === 0) {
                    return [];
                }
            }
        }

        // 今までは許可された権限は$accessに格納されていなかったためunsetしておく
        foreach ($access as $key => $authority) {
            if ( ! $authority) {
                unset($access[$key]);
            }
        }

        return $access;
    }

    function evaluateAccessFast(
        $user_id,
        $users_info,
        $groups_info,
        $roles_info
    ) {
        $access = [];
        $found_user_access = true;

        // ユーザーのアクセス権を評価する
        $this->_evaluateAccessFast($access, $user_id, $users_info);
        if (count($access) === 0) {
            $found_user_access = false;
        }

        $by_target_id = $users_info['by_target_id'];
        if (array_key_exists($user_id, $by_target_id)) {
            $security_model = $by_target_id[$user_id]['security_model'];
            $security_model
                = $this->_access_manager->getSecurityModelFast($security_model);

            // GRANTだったらアクセス権設定がある
            if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT == $security_model) {
                $found_user_access = true;
            }
        }

        // ユーザーにアクセス権設定が無かったら組織とロールを見る
        if ( ! $found_user_access) {
            // ユーザーが所属する組織のアクセス権を取得する
            $groups = $this->_uum->getUserGroupsInfo($user_id);
            foreach (array_keys($groups) as $group_id) {
                $tmp_access = [];
                $found_group_access = true;

                $this->_evaluateAccessFast($tmp_access, $group_id,
                    $groups_info);
                if (count($tmp_access) === 0) {
                    $found_group_access = false;
                }

                // セキュリティモデルをチェック
                $by_target_id = $groups_info['by_target_id'];
                if (array_key_exists($group_id, $by_target_id)) {
                    $security_model
                        = $by_target_id[$group_id]['security_model'];
                    $security_model
                        = $this->_access_manager->getSecurityModelFast($security_model);
                    // GRANTならアクセス権設定がある
                    if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                        == $security_model
                    ) {
                        $found_group_access = true;
                    }
                }

                // 対象の組織にアクセス権設定が存在しない
                if ( ! $found_group_access) {
                    continue;
                }

                // 許可優先でアクセス権を構築
                foreach ($this->_authority_list as $authority) {
                    if ( ! array_key_exists($authority, $tmp_access)) {
                        $value = 0;
                    } else {
                        $value = $tmp_access[$authority];
                    }

                    if ( ! array_key_exists($authority, $access) || ! $value) {
                        $access[$authority] = $value;
                    }
                }

                // アクセス許可は0、拒否は1なので、合計が0なら全てアクセス許可
                if (array_sum($access) === 0) {
                    return [];
                }
            }

            // ユーザーが持つスタティックロールのアクセス権を取得する
            $roles = $this->_uum->getUserRolesInfo($user_id);
            foreach (array_keys($roles) as $role_id) {
                $tmp_access = [];
                $found_role_access = true;

                $this->_evaluateAccessFast($tmp_access, $role_id, $roles_info);
                if (count($tmp_access) === 0) {
                    $found_role_access = false;
                }

                // セキュリティモデルをチェック
                $by_target_id = $roles_info['by_target_id'];
                if (array_key_exists($role_id, $by_target_id)) {
                    $security_model = $by_target_id[$role_id]['security_model'];
                    $security_model
                        = $this->_access_manager->getSecurityModelFast($security_model);
                    // GRANTならアクセス権設定がある
                    if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                        == $security_model
                    ) {
                        $found_role_access = true;
                    }
                }

                // 対象のロールにアクセス権設定が存在しない
                if ( ! $found_role_access) {
                    continue;
                }

                // 許可優先でアクセス権を構築
                foreach ($this->_authority_list as $authority) {
                    if ( ! array_key_exists($authority, $tmp_access)) {
                        $value = 0;
                    } else {
                        $value = $tmp_access[$authority];
                    }

                    if ( ! array_key_exists($authority, $access) || ! $value) {
                        $access[$authority] = $value;
                    }
                }

                // アクセス許可は0、拒否は1なので、合計が0なら全てアクセス許可
                if (array_sum($access) === 0) {
                    return [];
                }
            }
        }

        // 今までは許可された権限は$accessに格納されていなかったためunsetしておく
        foreach ($access as $key => $authority) {
            if ( ! $authority) {
                unset($access[$key]);
            }
        }

        return $access;
    }

    function makeEvaluatedAccessList($object_info_list)
    {
        $access_list = $object_info_list['access_list'];
        $target_list = $object_info_list['by_target_id'];

        $evaluated_access_list = [];
        foreach (array_keys($target_list) as $target_id) {
            $object_id = $target_list[$target_id]['_id'];
            $security_model = $target_list[$target_id]['security_model'];
            $security_model
                = $this->_access_manager->getSecurityModelFast($security_model);

            $evaluated_access = [];
            if (GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE == $security_model) {
                if (array_key_exists($object_id, $access_list)) {
                    foreach ($access_list[$object_id] as $key => $value) {
                        if ($value) {
                            $evaluated_access[$key] = 1;
                        }
                    }
                }
            } else {
                if (array_key_exists($object_id, $access_list)) {
                    foreach ($this->_authority_list as $authority) {
                        if (array_key_exists($authority,
                            $access_list[$object_id])
                        ) {
                            if (1 != $access_list[$object_id][$authority]) {
                                $evaluated_access[$authority] = 1;
                            }
                        } else {
                            $evaluated_access[$authority] = 1;
                        }
                    }
                } else {
                    foreach ($this->_authority_list as $authority) {
                        $evaluated_access[$authority] = 1;
                    }
                }
            }
            $evaluated_access_list[$target_id] = $evaluated_access;
        }

        return $evaluated_access_list;
    }

    function evaluateAccesses($users, $user_info, $group_info, $role_info)
    {
        $accesses_for_view = [];
        foreach (array_keys($users) as $user_id) {
            $accesses_for_view[$user_id] = $this->evaluateAccess($user_id,
                $user_info, $group_info, $role_info);
        }

        return $accesses_for_view;
    }

    function evaluateAccessesFast(
        $uid_list,
        $users_info,
        $groups_info,
        $roles_info
    ) {
        $accesses_for_view = [];
        foreach ($uid_list as $uid) {
            $accesses_for_view[$uid] = $this->evaluateAccessFast($uid,
                $users_info, $groups_info, $roles_info);
        }

        return $accesses_for_view;
    }

    /**
     * @return array
     */
    function &getUser($user)
    {
        $info = [
            'uid'          => $user->getOID(),
            'display_name' => $user->get('display_name')
        ];

        return $info;
    }

    function formatMail($args, $locale = null)
    {
        /** @var GRN_PhoneMessage_Application $app */
        $app
            = $this->_app_locator->getInstance(GRN_PHONEMESSAGE_APPLICATION_ID);
        if ( ! is_object($app)
             || ! is_a($app, 'GRN_PhoneMessage_Application')
        ) {
            assert('FALSE');
        }

        $result = [];

        $args['send_time'] = cb_date_format(GRN_PHONEMESSAGE_DATETIME_FORMAT,
            $args['send_time'], $args["receiver_uid"], null, $locale);
        $args['application_name'] = $app->getName($locale);

        $result['data'] = $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
            'format_send_time', $args, $locale);
        $result['data'] .= "\r\n\r\n";

        if (0 < strlen($args['client_name'])) {
            $result['subject'] = $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
                'format_subject', $args, $locale);
            $result['data'] .= $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
                'format_client_name', $args, $locale);
            $result['data'] .= "\r\n";
        } else {
            $result['subject'] = $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
                'format_default_subject', $args, $locale);
        }

        if (0 < strlen($args['telephone_number'])) {
            $result['data'] .= $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
                'format_matter', $args, $locale);
            $result['data'] .= "\r\n";
        } else {
            $result['data'] .= $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
                'format_default_matter', $args, $locale);
            $result['data'] .= "\r\n";
        }

        if (0 < strlen($args['message'])) {
            $result['data'] .= $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
                'format_message', $args, $locale);
            $result['data'] .= "\r\n";
        }

        $result['data'] .= "\r\n";
        $result['data'] .= $this->cb_plain_msg(GRN_PHONEMESSAGE_MODULE_ID,
            'format_sender', $args, $locale);

        return $result;
    }

    /**
     * システムメールアカウントからメールを送信する
     */
    function sendSystemMail($mail_info, $locale, $encoding)
    {
        // システムメールアカウントを取得する
        require_once('grn/system_mail.csp');
        $system_email_config_manager
            = GRN_SystemMailConfigManager::getInstance();

        // システムメールアカウントが利用可能か判定する
        if ( ! $system_email_config_manager->isAvailable()) {
            return false;
        }
        $errMessage = null;

        // メール送信を取得する
        if ( ! ($mail_sender
            = $system_email_config_manager->getSystemMailSender($errMessage))
        ) {
            $system_email_config_manager->logForwardMailFail($errMessage,
                GRN_PHONEMESSAGE_APPLICATION_ID,
                GRN_PHONEMESSAGE_MODULE_ID);

            return true;
        }
        // 差出人を取得する
        if ( ! ($from = $system_email_config_manager->getMailAddress())) {
            return true;
        }

        $listener = GRN_PhoneMessage_ErrorListener::getInstance();
        $mail_sender->setErrorListener($listener);

        $mail_sender->commit();

        // Check the mail address whether is a local address
        if ($system_email_config_manager->useBuiltinMailServer()) {
            $invalid_addresses = [];

            $to = explode(',', $mail_info['to']);
            $system_email_config_manager->separateLocalMailAddress($to,
                $invalid_addresses);
            $mail_info['to'] = implode(',', $to);

            $reply_to = cb_at($mail_info, 'reply_to');
            if ( ! is_null($reply_to)) {
                $reply_to = explode(',', $reply_to);
                $system_email_config_manager->separateLocalMailAddress($reply_to,
                    $invalid_addresses);
                $mail_info['reply_to'] = implode(',', $reply_to);
            }

            if (count($invalid_addresses) > 0) {
                $log_message
                    = $system_email_config_manager->createInvalidAddressLogMessage($invalid_addresses);
                $system_email_config_manager->logForwardMailFail($log_message,
                    GRN_PHONEMESSAGE_APPLICATION_ID,
                    GRN_PHONEMESSAGE_MODULE_ID);
            }
        }

        if (0 == strlen($mail_info['to'])) {
            return false;
        }

        require_once('fw/mail_message.csp');
        $mail_composer = new CB_MailComposer();

        $mail_address = new CB_MailAddress($mail_info['to']);
        $mail_composer->addTo($mail_address);

        if (array_key_exists('reply_to', $mail_info)
            && 0 < strlen($mail_info['reply_to'])
        ) {
            $mail_address = new CB_MailAddress($mail_info['reply_to']);
            $mail_composer->addReplyTo($mail_address);
        }

        $mail_address = new CB_MailAddress($from);
        $mail_composer->setFrom($mail_address);

        $mail_composer->setSubject(CB_MailComposer::escapeHalfWidthKana($mail_info['subject'],
            $encoding));
        $mail_composer->setTextBody(CB_MailComposer::escapeHalfWidthKana($mail_info['data'],
            $encoding));

        $mail_composer->setXMailer();

        $mail_message = $mail_composer->getMailMessage();
        $mail_message->setForceEncoding($encoding);
        $mail_messages = [];
        $mail_messages[] = $mail_message;

        $ret = $mail_sender->sendMails($mail_messages, $locale);
        $mail_sender->disconnect();
        if ( ! $ret) {
            $system_email_config_manager->logForwardMailFail($mail_info['to'],
                GRN_PHONEMESSAGE_APPLICATION_ID,
                GRN_PHONEMESSAGE_MODULE_ID);
        }

        return $ret;
    }

    /**
     * 個人メールアカウントからメールを送信する
     */
    function sendMail(& $user, $mail_info)
    {
        // メールを取得する
        /** @var GRN_Mail_App $mail_app */
        $mail_app = $this->_app_locator->getInstance(GRN_MAIL_APP_ID);
        if ( ! is_object($mail_app) || ! is_a($mail_app, 'GRN_Mail_App')) {
            return false;
        }

        // ユーザーがメールを利用可能か
        if ( ! $mail_app->isAvailableFor($user)) {
            return false;
        }

        // デフォルトメールアカウント情報を取得する
        if (is_null(
            $mail_account_info = $mail_app->getDefaultMailAccountInfo($user))
        ) {
            return false;
        }

        // メールを送信する
        $mail_info['from'] = $mail_account_info['account_info']->email;

        return $mail_app->sendMail($user, $mail_account_info['id'], $mail_info,
            null);
    }

    function cb_msg($module, $resourceKey, $args = null)
    {
        require_once('fw/i18n.csp');

        return cb_msg($module, $resourceKey, $args,
            GRN_PHONEMESSAGE_NOTIFY_LOCALE);
    }

    function cb_plain_msg($module, $resourceKey, $args = null, $locale = null)
    {
        require_once('fw/i18n.csp');
        if ( ! $locale) {
            $locale = GRN_PHONEMESSAGE_NOTIFY_LOCALE;
        }

        return cb_plain_msg($module, $resourceKey, $args, $locale);
    }
}


