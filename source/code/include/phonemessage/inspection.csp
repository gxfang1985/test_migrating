<?php

/**
 * Inspection for Phone Message.
 *
 * @author  YOSHIDA, Hideyasu 2005/04
 * @version 1.0
 * @package grn.phonemessage
 */

require_once('address/error_code.csp');
require_once('address/resources.csp');
require_once('address/table.csp');

class GRN_PhoneMessage_Inspection extends CB_ModuleBase
{
    private static $_instance = null;

    /**
     * @return GRN_PhoneMessage_Inspection
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    var $_logger = null;

    var $_uum = null;

    function __construct()
    {
        require_once('grn/logger.csp');
        $logger_manager = CB_LoggerManager::getInstance();

        parent::__construct(GRN_PHONEMESSAGE_MODULE_ID);

        $this->_logger = $logger_manager->getLogger($this->getModuleId());

        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
    }

    function isEnabled()
    {
        return $this->_logger->isNoticeEnabled();
    }

    function _getInspectionMessage(
        $action,
        $target,
        $params = null,
        $informations = null
    ) {
        $messages = [];
        if (is_array($params) && 0 < count($params)) {
            $temporaries = [];
            foreach ($params as $key => $value) {
                $temporaries[] = $key . ':' . $value;
            }

            if (0 < count($temporaries)) {
                $messages[] = implode(', ', $temporaries);
            }
        }
        if (is_array($informations) && 0 < count($informations)) {
            $temporaries = [];
            foreach ($informations as $key => $value) {
                $temporaries[] = $key . ':' . $value;
            }

            if (0 < count($temporaries)) {
                $messages[] = implode(', ', $temporaries);
            }
        }
        $message = sprintf('[%s] %s ', $action, $target);
        if (0 < count($messages)) {
            $message .= '(' . implode(', ', $messages) . ')';
        }

        return $message;
    }

    // 値が空文字の要素もログに出力する
    function _createMessage($action, $object, & $params)
    {
        $temp = [];
        if (is_array($params)) {
            foreach ($params as $key => $value) {
                if ( ! is_numeric($value)) {
                    $value = "'" . mb_substr(addslashes($value), 0, 100) . "'";
                }
                $temp[] = $key . ':' . $value;
            }
        }
        $msg1 = '';
        if (0 < count($temp)) {
            $msg1 = ' (' . implode(', ', $temp) . ')';
        }
        $msg = '';
        if ( ! is_null($action)) {
            $msg .= '[' . $action . '] ';
        }
        $msg .= $object . $msg1;

        return $msg;
    }

    function record($action, $target, $params = [], $informations = [])
    {
        $information_params = array_merge($params, $informations);
        $message = $this->_createMessage($action, $target,
            $information_params);
        $this->_logger->noticeEx($action, $target, $message);
    }

    function debug($msg)
    {
        $this->_logger->debug($msg);
    }
}


