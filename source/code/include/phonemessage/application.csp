<?php

/**
 * Application for Phone Message.
 *
 * @author  YOSHIDA, Hideyasu 2005/03
 * @version 1.0
 * @package grn.phonemessage
 */

require_once('grn/application.csp');
require_once('phonemessage/error_code.csp');
require_once('phonemessage/resources.csp');
require_once('phonemessage/table.csp');

/**
 * 電話メモアプリケーション
 *
 * @package grn.phonemessage
 */
class GRN_PhoneMessage_Application extends GRN_ApplicationBase
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_PHONEMESSAGE_APPLICATION_ID);
    }

    /**
     * 電話メモ管理を取得する
     */
    function getMessageManager()
    {
        $ret = GRN_PhoneMessage_Manager::getInstance();

        return $ret;
    }

    /**
     * システム設定に表示するメニューを取得する
     */
    function getSystemConfigArray()
    {
        $configs = [];
        $configs['phonemessage_system_config'] = [];
        $config
            =& $configs['phonemessage_system_config'];
        if ( ! defined('ON_FOREST')) {
            $config[] = [
                'page' => 'phonemessage/system/common_set',
                'icon' => 'general32'
            ];
        }
        $config[] = [
            'page' => 'phonemessage/system/access_index',
            'icon' => 'access32'
        ];
        $config[] = [
            'page' => 'phonemessage/system/access_import1',
            'icon' => 'import32'
        ];
        $config[] = [
            'page' => 'phonemessage/system/access_export',
            'icon' => 'export32'
        ];

        return $configs;
    }

    /**
     * 個人設定に表示するメニューを取得する
     */
    function getPersonalConfigArray()
    {
        $configs = [];
        $configs['phonemessage_config'] = [];
        $config =& $configs['phonemessage_config'];
        $config[] = [
            'page' => 'phonemessage/personal/mail_forward_set',
            'icon' => 'mail32'
        ];

        return $configs;
    }

    /**
     * アプリケーションポートレット一覧を取得する
     */
    function getPortletList()
    {
        return [
            [
                'name'             => '電話メモ',
                'type'             => 'grn.phonemessage.view',
                'version'          => '1.0',
                'set_template'     => 'phonemessage/portlet/set_view.csp',
                'command_template' => 'phonemessage/portlet/command_set_view.csp',
                'view_template'    => 'phonemessage/portlet/view.csp'
            ]
        ];
    }

    /**
     * 通知のページ情報を取得する
     */
    function getNotificationPageInfo(
        $user,
        $app_id,
        $unique_id,
        & $org_data,
        $status,
        $action_id,
        $sub_module_id
    ) {
        return [
            'subject_page' => 'phonemessage/history',
            'subject_icon' => 'telmemo20',
            'url_params'   => $org_data
        ];
    }

    function getNotificationPageInfo_cellular(
        & $user,
        $app_id,
        $unique_id,
        & $org_data,
        $status
    ) {
        return [
            'subject_page' => 'phonemessage/cellular/look',
            'url_params'   => ['mid' => $unique_id]
        ];
    }

    /**
     * ケータイトップページ通知表示用
     */
    function getNotificationIndexPageInfo_cellular(& $user, $app_id)
    {
        $info = [];
        $info['caption_module'] = 'grn.phonemessage.cellular';
        $info['caption_key'] = 'index';
        $info['icon'] = 'tel';

        return $info;
    }

    /**
     * （%書式で使用する）SSO用の識別子一覧を取得する
     */
    function getSSOIdentifierList()
    {
        $identifier = '%grn.phonemessage.uid%';

        return [cb_msg('grn.phonemessage', $identifier) => $identifier];
    }

    /**
     * （%書式を置換する）識別子の値を取得する
     */
    function getIdentifierValueList($sso_params)
    {
        $user_id = null;
        if (array_key_exists('uid', $sso_params)) {
            $user_id = $sso_params['uid'];
        }

        return ['%grn.phonemessage.uid%' => $user_id];
    }

    /**
     * 連携情報を取得する
     *
     * @param   $login_id   int     ログインID
     * @param   $uid_list   array   ユーザーIDの配列
     * @option  $param_list array   連携ページ情報に割り当てるパラメータ
     *
     * @return  mixed
     */
    function getInteractionInfo($login_id, $user_id_list, $param_list = null)
    {
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        if (0 < $param_list) {
            $session = $session_manager->getSession(GRN_PHONEMESSAGE_MODULE_ID);
            $session->set('param_list', $param_list);
        }

        $access_list = $this->_getAccessList($login_id, $user_id_list);

        $interaction_info = [];
        $alt = cb_plain_msg('grn.phonemessage', 'add',
            ['application_name' => $this->getName()]);
        $caption = cb_plain_msg('grn.phonemessage', 'add_caption',
            ['application_name' => $this->getName()]);
        foreach ($user_id_list as $user_id) {
            $image = 'telmemo20_a.gif';
            $disabled = true;
            if (array_key_exists($user_id, $access_list)) {
                if ( ! array_key_exists('add', $access_list[$user_id])) {
                    $image = 'telmemo20_w.gif';
                    $disabled = false;
                }
            }

            $interaction_info[$user_id] = [
                'page'     => 'phonemessage/add',
                'image'    => $image,
                'alt'      => $alt,
                'caption'  => $caption,
                'disabled' => $disabled
            ];
        }

        if (array_key_exists($login_id, $interaction_info)) {
            $image = 'telmemo20.gif';
            if (0 < $this->_getNotConfirmCount($login_id)) {
                $image = 'telmemo20_u.gif';
            }
            $alt = cb_plain_msg('grn.phonemessage', 'history',
                ['application_name' => $this->getName()]);

            $interaction_info[$login_id] = [
                'page'    => 'phonemessage/history',
                'image'   => $image,
                'alt'     => $alt,
                'caption' => $alt
            ];
        }

        return $interaction_info;
    }

    function _getNotConfirmCount($user_id)
    {
        require_once('phonemessage/controller.csp');
        $controller_util = new GRN_PhoneMessage_ControllerUtil();
        $user_list = [$user_id => []];
        $controller_util->listUsersFast($user_list);

        return intval(@ $user_list[$user_id]['newmessage_count']);
    }

    function _getAccessList($login_id, $user_id_list)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $dynamic_roles = $uum->listGrantedRoles();

        require_once('phonemessage/access.csp');
        $access_manager = GRN_PhoneMessage_AccessManager::getInstance();
        $user_info_list = $access_manager->listObjectsInfo($user_id_list,
            'user');
        $authority_list = ['browse', 'add'];
        if (0 < count($user_info_list['by_object_id'])) {
            $user_info_list['access_list']
                = $access_manager->evaluateAccessesFast($user_info_list['by_object_id'],
                'user', $login_id, $dynamic_roles, $authority_list);
        } else {
            $user_info_list['access_list'] = [];
        }

        // 組織一覧を取得する
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $users_groups_info = $uum->getUsersGroupsInfo($user_id_list);

        $group_id_list = [];
        foreach (array_keys($users_groups_info) as $user_id) {
            $user_groups_info = $users_groups_info[$user_id];
            foreach (array_keys($user_groups_info) as $group_id) {
                if (false === array_search($group_id, $group_id_list)) {
                    $group_id_list[] = $group_id;
                }
            }
        }

        // 組織一覧のアクセス権を評価する
        $group_info_list = $access_manager->listObjectsInfo($group_id_list,
            'group');
        if (0 < count($group_info_list['by_object_id'])) {
            $group_info_list['access_list']
                = $access_manager->evaluateAccessesFast($group_info_list['by_object_id'],
                'group', $login_id, $dynamic_roles, $authority_list);
        } else {
            $group_info_list['access_list'] = [];
        }

        // スタティックロール一覧を取得する
//        $roles_info = $uum->listStaticRolesInfo();
        $users_roles_info = $uum->getUsersRolesInfo($user_id_list);

        $role_id_list = [];
        foreach (array_keys($users_roles_info) as $user_id) {
            $user_roles_info = $users_roles_info[$user_id];
            foreach (array_keys($user_roles_info) as $role_id) {
                if (false === array_search($role_id, $role_id_list)) {
                    $role_id_list[] = $role_id;
                }
            }
        }

        // スタティックロール一覧のアクセス権を評価する
        $role_info_list = $access_manager->listObjectsInfo($role_id_list,
            'role');
        if (0 < count($role_info_list['by_object_id'])) {
            $role_info_list['access_list']
                = $access_manager->evaluateAccessesFast($role_info_list['by_object_id'],
                'role', $login_id, $dynamic_roles, $authority_list);
        } else {
            $role_info_list['access_list'] = [];
        }

        require_once('phonemessage/controller.csp');
        $controller_util = new GRN_PhoneMessage_ControllerUtil();
        $user_evaluated_access_list
            = $controller_util->makeEvaluatedAccessList($user_info_list);
        $group_evaluated_access_list
            = $controller_util->makeEvaluatedAccessList($group_info_list);
        $role_evaluated_access_list
            = $controller_util->makeEvaluatedAccessList($role_info_list);

        $access_list = [];
        foreach ($user_id_list as $user_id) {
            $access = [];
            $found_user_access = true;
            if (array_key_exists($user_id, $user_evaluated_access_list)) {
                $access = $user_evaluated_access_list[$user_id];
            }
            if (count($access) === 0) {
                $found_user_access = false;
            }

            $by_target_id = $user_info_list['by_target_id'];
            if (array_key_exists($user_id, $by_target_id)) {
                $security_model = $by_target_id[$user_id]['security_model'];
                $security_model
                    = $access_manager->getSecurityModelFast($security_model);
                // GRANTだったらアクセス権設定がある
                if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT == $security_model) {
                    $found_user_access = true;
                }
            }

            // ユーザーにアクセス権設定が無かったら組織とロールを見る
            if ( ! $found_user_access) {
                // 組織
                $full_access = false;
                if (array_key_exists($user_id, $users_groups_info)) {
                    $user_groups_info = $users_groups_info[$user_id];
                    foreach (array_keys($user_groups_info) as $group_id) {
                        if (array_key_exists($group_id,
                            $group_evaluated_access_list)
                        ) {
                            $found_group_access = true;

                            $tmp_access
                                = $group_evaluated_access_list[$group_id];
                            if (count($tmp_access) === 0) {
                                $found_group_access = false;
                            }

                            // セキュリティモデルをチェック
                            $by_target_id = $group_info_list['by_target_id'];
                            if (array_key_exists($group_id, $by_target_id)) {
                                $security_model
                                    = $by_target_id[$group_id]['security_model'];
                                $security_model
                                    = $access_manager->getSecurityModelFast($security_model);
                                // GRANTならアクセス権設定がある
                                if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                                    == $security_model
                                ) {
                                    $found_group_access = true;
                                }
                            }

                            // 対象の組織にアクセス権設定が存在しない
                            if ( ! $found_group_access) {
                                continue;
                            }

                            // 許可優先でアクセス権を構築
                            foreach ($authority_list as $authority) {
                                if ( ! array_key_exists($authority,
                                    $tmp_access)
                                ) {
                                    $value = 0;
                                } else {
                                    $value = $tmp_access[$authority];
                                }

                                if ( ! array_key_exists($authority, $access)
                                     || ! $value
                                ) {
                                    $access[$authority] = $value;
                                }
                            }

                            // そのユーザーはフルアクセス権限を持っている
                            if (array_sum($access) === 0) {
                                $full_access = true;
                                break;
                            }
                        }
                    }
                }

                // role
                if ( ! $full_access
                     && array_key_exists($user_id, $users_roles_info)
                ) {
                    $user_roles_info = $users_roles_info[$user_id];
                    foreach (array_keys($user_roles_info) as $role_id) {
                        if (array_key_exists($role_id,
                            $role_evaluated_access_list)
                        ) {
                            $found_role_access = true;

                            $tmp_access = $role_evaluated_access_list[$role_id];
                            if (count($tmp_access) === 0) {
                                $found_role_access = false;
                            }

                            // セキュリティモデルをチェック
                            $by_target_id = $role_info_list['by_target_id'];
                            if (array_key_exists($role_id, $by_target_id)) {
                                $security_model
                                    = $by_target_id[$role_id]['security_model'];
                                $security_model
                                    = $access_manager->getSecurityModelFast($security_model);
                                // GRANTならアクセス権設定がある
                                if (GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                                    == $security_model
                                ) {
                                    $found_role_access = true;
                                }
                            }

                            // 対象のロールにアクセス権設定が存在しない
                            if ( ! $found_role_access) {
                                continue;
                            }

                            // 許可優先でアクセス権を構築
                            foreach ($authority_list as $authority) {
                                if ( ! array_key_exists($authority,
                                    $tmp_access)
                                ) {
                                    $value = 0;
                                } else {
                                    $value = $tmp_access[$authority];
                                }

                                if ( ! array_key_exists($authority, $access)
                                     || ! $value
                                ) {
                                    $access[$authority] = $value;
                                }
                            }

                            // そのユーザーはフルアクセス権限を持っている
                            if (array_sum($access) === 0) {
                                break;
                            }
                        }
                    }
                }

            }
            // 許可された権限は値として格納されないのでunsetする
            foreach ($access as $key => $value) {
                if ( ! $value) {
                    unset($access[$key]);
                }
            }
            $access_list[$user_id] = $access;
        }

        return $access_list;
    }
}

/**
 * 電話メモ管理
 *
 * @package grn.phonemessage
 */
class GRN_PhoneMessage_Manager
{
    private static $_instance = null;

    /**
     * シングルトンを取得する
     *
     * @return GRN_PhoneMessage_Manager
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    var $_uum = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');
    }

    /**
     * @access private
     */
    var $_table_info = null;

    /**
     * テーブル情報を取得する
     */
    function getTableInfo()
    {
        if (is_null($this->_table_info)) {
            $this->_table_info = cb_class2table('GRN_PhoneMessage_Message');
        }

        return $this->_table_info;
    }

    function getRealTableName()
    {
        $table_info = $this->getTableInfo();
        $real_table_name = CB_DATABASE_TABLE_PREFIX
                           . $table_info->getTableName();

        return $real_table_name;
    }

    /**
     * @access private
     */
    var $_messages = [];

    /**
     * 電話メモを追加する
     */
    function add($properties)
    {
        $table_info = $this->getTableInfo();
        if ($row = $table_info->newRow()) {
            $informations = [];
            foreach ($properties as $key => $value) {
                $row->set($key, $value);
            }
            $row->registerNow();

            $this->_messages[$row->getOID()] = $row;

            // 監査する
            require_once('phonemessage/inspection.csp');
            $inspection = GRN_PhoneMessage_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $section = GRN_PHONEMESSAGE_INSPECTION_CREATE;
                $message = GRN_PHONEMESSAGE_INSPECTION_PHONEMESSAGE;
                $params = [];
                $params['mid'] = $row->getOID();
                $inspection_map = [
                    'client_name',
                    'matter',
                    'telephone_number',
                    'message'
                ];
                $informations = [];

                foreach ($inspection_map as $key) {
                    if (array_key_exists($key, $properties)) {
                        $informations[$key] =& $properties[$key];
                    }
                }

                if ($informations['telephone_number'] === '') {
                    unset($informations['telephone_number']);
                }

                $sender = $properties['sender'];
                $informations['sender'] = $sender->getOID();
                $receiver = $properties['receiver'];
                $informations['receiver'] = $receiver->getOID();
                $send_time = $properties['send_time'];
                $informations['send_time'] = $send_time->unix_ts;

                $inspection->record($section, $message, $params, $informations);
            }

            return $row;
        }
        $ret = false;

        return $ret;
    }

    /**
     * 電話メモを取得する
     */
    function get($message_id)
    {
        assert('0 < strlen( $message_id )');

        if (array_key_exists($message_id, $this->_messages)) {
            return $this->_messages[$message_id];
        }

        $table_info = $this->getTableInfo();
        if ($row = $table_info->getRow($message_id)) {
            // ユーザー削除フラグが立っていなければ取得
            if ( ! is_null($row->get('receiver'))) {
                $this->_messages[$message_id] = $row;

                return $row;
            }
        }
        $ret = false;

        return $ret;
    }

    /**
     * 電話メモ一覧を取得する
     *
     * @return array
     */
    function &getList(
        $offset = 0,
        $limit = -1,
        $order_by = '_id',
        $additional_condition = null
    ) {
        $table_info = $this->getTableInfo();
        $rowset = new CB_RowSet($table_info);
        $this->_addUserJoin($rowset, $table_info->getTableName(),
            'col_receiver');

        $rowset->limit($offset, $limit);
        $rowset->addOrderColumn($order_by, true);
        if ( ! is_null($additional_condition)) {
            $rowset->addCondition($additional_condition);
        }
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $messages = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $message_id = $row->getOID();

            $messages[$message_id] = $row;
            $this->_messages[$message_id] = $row;
        }

        return $messages;
    }

    /**
     * @return CB_RowSet
     */
    function _getFullTextSearchRowSet(
        $order_by,
        $additional_condition,
        $search_words,
        $sensitive,
        $search_keys
    ) {
        $table_info = $this->getTableInfo();
        $rowset = new CB_RowSet($table_info);
        $real_table_name = CB_DATABASE_TABLE_PREFIX
                           . $table_info->getTableName();
        $this->_addUserJoin($rowset, $table_info->getTableName(),
            'col_receiver');

        $format = 'LIKE';
        if ($sensitive) {
            $format .= ' BINARY';
        }
        $format = '( ' . $real_table_name . '.col_@S ' . $format
                  . ' \'%@L%\' )';

        if (0 < strlen($additional_condition)) {
            $rowset->addCondition($additional_condition);
        }

        foreach ($search_words as $search_word) {
            $conditions = [];
            foreach ($search_keys as $search_key) {
                $conditions[] = $rowset->queryf($format, $search_key,
                    $search_word);
            }
            $condition = implode(' OR ', $conditions);
            $rowset->addCondition($condition);
        }

        $rowset->addOrderColumn($order_by);

        return $rowset;
    }

    /**
     * 全文検索結果一覧を取得する
     */
    function getFullTextSearchList(
        $offset = 0,
        $limit = -1,
        $order_by = '_id',
        $additional_condition = null,
        $search_words,
        $sensitive,
        $search_keys
    ) {
        $rowset =& $this->_getFullTextSearchRowSet($order_by,
            $additional_condition, $search_words, $sensitive, $search_keys);
        $rowset->limit($offset, $limit);

        $messages = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $message_id = $row->getOID();

            $messages[$message_id] = $row;
            $this->_messages[$message_id] = $row;
        }

        return $messages;
    }

    /**
     * 全文検索のヒット数を取得する
     */
    function getFullTextSearchCount(
        $additional_condition = null,
        $search_words,
        $sensitive,
        $search_keys
    ) {
        $order_by = $this->getRealTableName() . '._id';
        $rowset =& $this->_getFullTextSearchRowSet($order_by,
            $additional_condition, $search_words, $sensitive, $search_keys);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);

        if (is_null($result = $rowset->iterate())) {
            $ret = 0;

            return $ret;
        }
        $rowset->destroy();

        $ret = $result['count'];

        return $ret;
    }

    /**
     * 総数を取得する
     */
    function getCount($additional_condition = null)
    {
        $table_info =& $this->getTableInfo();
        $rowset = new CB_RowSet($table_info);
        $this->_addUserJoin($rowset, $table_info->getTableName(),
            'col_receiver');

        if ( ! is_null($additional_condition)) {
            $rowset->addCondition($additional_condition);
        }

        $group_functions = ['count' => 'COUNT(*)'];
        $rowset->applyGroupFunctions($group_functions);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        if (is_null($result = $rowset->iterate())) {
            return 0;
        }
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * 電話メモを削除する
     */
    function remove($message_id)
    {
        if ($row =& $this->get($message_id)) {
            $row->delete();
            unset($this->_messages[$message_id]);

            // 監査する
            require_once('phonemessage/inspection.csp');
            $inspection = GRN_PhoneMessage_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $section = GRN_PHONEMESSAGE_INSPECTION_DELETE;
                $message = GRN_PHONEMESSAGE_INSPECTION_PHONEMESSAGE;
                $params = [];
                $params['mid'] = $row->getOID();
                $inspection->record($section, $message, $params);
            }
        }
    }

    /**
     * 電話メモ一覧を削除する
     */
    function removeList($message_ids)
    {
        $offset = 0;
        $limit = -1;
        $order_by = '_id';
        $conditions = [];

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('phonemessage');

        foreach ($message_ids as $message_id) {
            //$conditions[] = '_id = '.$message_id;
            //Escape !!
            $conditions[] = cb_queryf($dbconn, "_id = '@S'", $message_id);
        }
        $condition = implode(' OR ', $conditions);

        $rows = $this->getList($offset, $limit, $order_by, $condition);
        $message_ids = [];
        foreach (array_keys($rows) as $message_id) {
            $row =& $rows[$message_id];
            $row->delete();
            $message_ids[] = $message_id;
            unset($this->_messages[$message_id]);
        }

        // 監査する
        require_once('phonemessage/inspection.csp');
        $inspection = GRN_PhoneMessage_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $section = GRN_PHONEMESSAGE_INSPECTION_DELETE;
            $message = GRN_PHONEMESSAGE_INSPECTION_PHONEMESSAGE;
            foreach ($message_ids as $message_id) {
                $params = [];
                $params['mid'] = $message_id;
                $inspection->record($section, $message, $params);
            }
        }
    }

    /**
     * プロパティを変更する
     */
    function setProperty($message_id, $key, & $value)
    {
        if ( ! $row = $this->get($message_id)) {
            return false;
        }

        if ($row->set($key, $value)) {
            $row->updateNow();

            // 監査する
            require_once('phonemessage/inspection.csp');
            $inspection = GRN_PhoneMessage_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $section = GRN_PHONEMESSAGE_INSPECTION_MODIFY;
                $message = GRN_PHONEMESSAGE_INSPECTION_PHONEMESSAGE;
                $params = [];
                $params['mid'] = $row->getOID();
                $informations = [];
                switch ($key) {
                    case 'sender':
                    case 'receiver':
                        $informations[$key] = $value->getOID();
                        break;
                    case 'send_time':
                    case 'confirm_time':
                        $informations[$key] = $value->unix_ts;
                        break;
                    default:
                        $informations[$key] = $value;
                        break;
                }

                $inspection->record($section, $message, $params, $informations);
            }

            return true;
        }

        return false;
    }

    /**
     * プロパティ一覧を変更する
     */
    function setProperties($message_id, $properties)
    {
        if ( ! $row =& $this->get($message_id)) {
            return false;
        }

        $result = true;
        foreach ($properties as $key => $value) {
            $result &= $row->set($key, $value);
        }
        if ($result) {
            // 監査する
            require_once('phonemessage/inspection.csp');
            $inspection = GRN_PhoneMessage_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $section = GRN_PHONEMESSAGE_INSPECTION_MODIFY;
                $message = GRN_PHONEMESSAGE_INSPECTION_PHONEMESSAGE;
                $params = [];
                $params['mid'] = $row->getOID();
                $informations = [];
                foreach (array_keys($properties) as $key) {
                    $value =& $properties[$key];
                    switch ($key) {
                        case 'sender':
                        case 'receiver':
                            $informations[$key] = $value->getOID();
                            break;
                        case 'send_time':
                        case 'confirm_time':
                            $informations[$key] = $value->unix_ts;
                            break;
                        default:
                            $informations[$key] = $value;
                            break;
                    }
                }
                $inspection->record($section, $message, $params, $informations);
            }
            $row->updateNow();
        }

        return $result;
    }

    function _addUserJoin(& $rowset, $table_name, $column_name)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $tm = $app_locator->getTableManager('phonemessage');
        $user_table = $tm->getTableInfo('CB_User');

        $real_table_name = CB_DATABASE_TABLE_PREFIX . $table_name;
        $on = $real_table_name . '.' . $column_name
              . ' = u._id AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
    }
}


