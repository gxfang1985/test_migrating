<?php

/**
 * Access right for Phone Message.
 *
 * @author  YOSHIDA, Hideyasu 2005/02
 * @version 1.0
 * @package grn.phonemessage
 */
require_once('grn/access_table.csp');
require_once('grn/access_resources.csp');
require_once('grn/application.csp');
require_once('phonemessage/error_code.csp');
require_once('phonemessage/resources.csp');
require_once('phonemessage/table.csp');

/**
 * アクセス権管理クラス
 *
 * @package grn.phonemessage
 */
class GRN_PhoneMessage_AccessManager extends CB_ModuleBase
{
    /**
     * シングルトンを取得する
     *
     * @return GRN_PhoneMessage_AccessManager
     */
    public static function getInstance()
    {
        $_instance = null;
        if (is_null($_instance)) {
            $_instance = new GRN_PhoneMessage_AccessManager();
        }

        return $_instance;
    }

    /**
     * @access private
     */
    var $_table_manager = null;
    /**
     * @access private
     */
    var $_uum = null;
    /**
     * @access private
     */
    var $_dbconn = null;
    /**
     * @access private
     */
    var $_common_policy = null;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_PHONEMESSAGE_MODULE_ID);

        $app_locator = GRN_ApplicationLocator::instance();
        $this->_dbconn = $app_locator->getConnection('phonemessage');

        global $G_container_base;
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_table_manager = $app_locator->getTableManager('phonemessage');

        $this->_uum = $G_container_base->getInstance('uum');

        global $G_container_app;
        $this->_common_policy = $G_container_app->getInstance('common_policy');
    }

    function addObject(& $object)
    {
        $object_name = substr(strtolower(get_class($object)), 3);
        $table_name = 'GRN_PhoneMessage_' . $object_name;

        $table_info = $this->_getTableInfo($table_name);
        $row = $table_info->newRow();
        $row->set('object', $object);
        $row->registerNow();

        return $row;
    }

    /**
     * @param CB_User|CB_Group|CB_Role $target
     *
     * @return GRN_PhoneMessage_User|GRN_PhoneMessage_Group|GRN_PhoneMessage_Role|false
     */
    function getObject(& $target)
    {
        $object_name = substr(strtolower(get_class($target)), 3);
        $table_name = 'GRN_PhoneMessage_' . $object_name;

        $table_info = $this->_getTableInfo($table_name);
        $rowset = new CB_RowSet($table_info);

        if (strcasecmp('user', $object_name) == 0) {
            $real_table_name = CB_DATABASE_TABLE_PREFIX
                               . strtolower($table_name);
            $on = $real_table_name
                  . '.col_object = u._id AND u.col_deleted IS NULL';
            $user_table = $this->_getTableInfo('CB_User');
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        }

        //escape
        $condition = $rowset->queryf("col_object = '@S'", $target->getOID());
        $rowset->addCondition($condition);

        /** @var GRN_PhoneMessage_User|GRN_PhoneMessage_Group|GRN_PhoneMessage_Role|false $row */
        $row = $rowset->iterate();
        $rowset->destroy();
        if ( ! $row) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * @param CB_User[]|CB_Group[]|CB_Role[] $targets
     *
     * @return array
     */
    function getObjectInfo($targets)
    {
        $object_info = [];
        $object_info['objects'] = [];
        $object_info['id_map'] = [];
        if (is_array($targets) && 0 < count($targets)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $dbconn = $app_locator->getConnection('phonemessage');

            $tid_list = array_keys($targets);
            $escaped_tid_list = [];
            //escape
            foreach ($tid_list as $tid) {
                $escaped_tid_list[] = cb_queryf($dbconn, "'@S'", $tid);
            }
            $condition = implode(',', $escaped_tid_list);
            $condition = "col_object in (${condition})";

            $target = $targets[$tid_list[0]];
            $object_name = substr(strtolower(get_class($target)), 3);
            $table_name = 'GRN_PhoneMessage_' . $object_name;

            $table_info = $this->_getTableInfo($table_name);
            $rowset = new CB_RowSet($table_info);

            if (strcasecmp('user', $object_name) == 0) {
                $real_table_name = CB_DATABASE_TABLE_PREFIX
                                   . strtolower($table_name);
                $on = $real_table_name
                      . '.col_object = u._id AND u.col_deleted IS NULL';
                $user_table = $this->_getTableInfo('CB_User');
                $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
            }

            $rowset->addCondition($condition);

            /** @var GRN_PhoneMessage_User|GRN_PhoneMessage_Group|GRN_PhoneMessage_Role $object */
            while ( ! is_null($object = $rowset->iterate())) {
                /** @var CB_User|CB_Group|CB_Role $target */
                $target = $object->get('object');

                $target_id = $target->getOID();
                $object_id = $object->getOID();

                $object_info['objects'][$object_id] = $object;
                $object_info['id_map'][$target_id] = $object_id;
            }
        }

        return $object_info;
    }

    function listObjectsInfo(
        $oid_list,
        $object_type,
        $columns = null,
        $offset = 0,
        $limit = -1,
        $order_by = null,
        $add_condition = null
    ) {
        $objects_info = [
            'by_object_id' => [],
            'by_target_id' => []
        ];
        if (is_array($oid_list) && 0 < count($oid_list)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $dbconn = $app_locator->getConnection('phonemessage');

            $table_name = strtolower('tab_grn_phonemessage_' . $object_type);
            if ( ! is_array($columns) || 0 == count($columns)) {
                $columns = [
                    $table_name . '._id',
                    $table_name . '.col_object',
                    $table_name . '.col_security_model'
                ];
            }

            // Escape!
            $escaped_oid_list = [];
            foreach ($oid_list as $item) {
                $escaped_oid_list [] = "'" . $dbconn->escape($item) . "'";
            }
            $condition = implode(',', $escaped_oid_list);
            $condition = "col_object in (${condition})";
            //$add_conditionが指定されて呼ばれることはないので、そのまま
            if (is_string($add_condition) && 0 < strlen($add_condition)) {
                $condition = sprintf('(%s) AND (%s)', $condition,
                    $add_condition);
            }
            if (is_string($order_by) && 0 < strlen($order_by)) {
                $order_by = ' ORDER BY ' . $order_by;
            }

            $join = '';
            if (strcasecmp('user', $object_type) == 0) {
                $join = 'INNER JOIN tab_cb_user AS u ON ' . $table_name
                        . '.col_object = u._id AND u.col_deleted IS NULL';
            }

            $query_format = 'SELECT %s FROM %s %s WHERE %s%s';
            //$columnsが指定されて呼ばれることはない
            //$columns = array('_id',
            //                 'col_object',
            //                 'col_security_model' );で決めうち
            $query = sprintf($query_format, implode(', ', $columns),
                $table_name, $join, $condition, $order_by);

            $query = $dbconn->select_format($query, 0, -1);
            if (cb_is_db_result($result = $dbconn->query($query))) {
                $row_count = $dbconn->num_rows($result);

                for ($i = 0; $i < $row_count; $i++) {
                    $row = $dbconn->fetch_assoc($result);
                    if (is_array($row) && 0 < count($row)) {
                        $object_id = $row['_id'];
                        $target_id
                            = $row['col_object'];
                        $objects_info['by_object_id'][$object_id] = [
                            '_id'            => $object_id,
                            'security_model' => $row['col_security_model']
                        ];
                        $objects_info['by_target_id'][$target_id]
                            =& $objects_info['by_object_id'][$object_id];
                    }
                }
            }
        }

        return $objects_info;
    }

    /**
     * セキュリティ・モデルを取得する
     */
    function getSecurityModel(& $object)
    {
        if (is_null($object) || false === $object) {
            $object_security_model = null;
        } else {
            $object_security_model = $object->get('security_model');
        }

        $module_id = $this->getModuleId();
        $section = 'security_model';
        $policy_securyti_model = $this->_common_policy->getPolicy($module_id,
            $section);

        if (false === $object_security_model
            || is_null($object_security_model)
        ) {
            if ('revoke' == $policy_securyti_model) {
                return GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE;
            } else {
                return GRN_PHONEMESSAGE_SECURITY_MODEL_GRANT;
            }
        }

        return $object_security_model;
    }

    function getSecurityModelFast($security_model)
    {
        if (false === $security_model || is_null($security_model)) {
            if ('revoke'
                == $this->_common_policy->getPolicy($this->getModuleId(),
                    'security_model')
            ) {
                return GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE;
            } else {
                return GRN_PHONEMESSAGE_SECURITY_MODEL_GRANT;
            }
        }

        return $security_model;
    }

    /**
     * セキュリティ・モデルを設定する
     */
    function setSecurityModel(& $object, $security_model)
    {
        $old_security_model = $this->getSecurityModel($object);
        if ($security_model != $old_security_model) {
            $object->set('security_model', intval($security_model));
            $object->updateNow();

            $this->removeAccesses($object);

            // 監査する
            require_once('phonemessage/inspection.csp');
            $inspection = GRN_PhoneMessage_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $row = $object->get('object');
                $object_name = substr(strtolower(get_class($row)), 3);

                $section = GRN_PHONEMESSAGE_INSPECTION_MODIFY;
                $message
                    = GRN_PHONEMESSAGE_INSPECTION_ACCESS;
                $params = [];
                $informations = [];
                $informations['object_' . $object_name] = $row->getOID();
                if (GRN_ADDRESS_SECURITYMODEL_REVOKE == $security_model) {
                    $informations['security_model'] = 'revoke';
                } else {
                    $informations['security_model'] = 'grant';
                }

                $inspection->record($section, $message, $params, $informations);
            }
        }
    }

    var $_target_map
        = [
            GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE => null,
            GRN_ACCESS_TARGET_TYPE_STATIC_ROLE  => 'CB_Role',
            GRN_ACCESS_TARGET_TYPE_GROUP        => 'CB_Group',
            GRN_ACCESS_TARGET_TYPE_USER         => 'CB_User'
        ];

    /**
     * アクセス権テーブルを生成する
     */
    function createAccessTable($access_info)
    {
        $object_name = substr($access_info['to_table'], 4);
        if (array_key_exists('unique_key', $access_info)) {
            $object_name .= '_' . $access_info['unique_key'];
        }

        foreach ($this->_target_map as $target_name => $target_table) {
            $table_name = 'GRN_' . $object_name . '_' . $target_name;
            $table_info = $this->_getTableInfo($table_name);

            $column_name = 'object';
            $column_info = [];
            $column_info['type'] = 'relation';
            $column_info['to'] = $access_info['to_table'];
            $table_info->addColumn($column_name, $column_info);

            $column_name = 'target';
            $column_info = [];
            if (is_null($target_table)) {
                $column_info['type'] = 'char';
                $column_info['length'] = 100;
            } else {
                $column_info['type'] = 'relation';
                $column_info['to'] = $target_table;
            }
            $table_info->addColumn($column_name, $column_info);

            $column_info = [];
            foreach ($access_info['authorities'] as $authority) {
                $column_name = 'authority_' . $authority;
                $column_info['type'] = 'int';
                $table_info->addColumn($column_name, $column_info);
            }

            $index_name = 'o_t';
            $index_info = [];
            $index_info['cols'] = ['object', 'target'];
            $index_info['unique'] = true;
            $table_info->addIndex($index_name, $index_info);

            $table_info->createTable();
        }
    }

    /**
     * アクセス権テーブルを破棄する
     */
    function dropAccessTable($access_info)
    {
        $object_name = substr($access_info['to_table'], 4);
        if (array_key_exists('unique_key', $access_info)) {
            $object_name .= '_' . $access_info['unique_key'];
        }

        foreach (array_keys($this->_target_map) as $target_name) {
            $table_name = 'GRN_' . $object_name . '_' . $target_name;
            $table_info = $this->_getTableInfo($table_name);
            $table_info->dropTable();
        }
    }

    /**
     * 抽象データを取得する
     */
    function &getAbstractData($unique_key)
    {
        $dbconn = $this->_table_manager->getDBConnection();
        $query = cb_queryf($dbconn, "col_unique_key = '@S'", $unique_key);
        $logic = GRN_Access_AbstractDataLogic::getInstance();
        $object =& $logic->get(null, $query);

        return $object;
    }

    /**
     * アクセス権をかける標的の名前を取得する
     *
     * @param string|CB_User|CB_Group|CB_Role $target
     *
     * @return string 'dynamic_role', 'user', 'group' or 'role'
     */
    function getTargetName(& $target)
    {
        switch (gettype($target)) {
            case 'string':
                return GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE;
            case 'object':
                switch (strtolower(strtolower(get_class($target)))) {
                    case 'cb_group':
                        return GRN_ACCESS_TARGET_TYPE_GROUP;
                    case 'cb_role':
                        return GRN_ACCESS_TARGET_TYPE_STATIC_ROLE;
                    case 'cb_user':
                        return GRN_ACCESS_TARGET_TYPE_USER;
                    default:
                        assert('FALSE');
                }
            default:
                assert('FALSE');
        }
    }

    /**
     * アクセス権をかける標的の識別子を取得する
     */
    function getTargetId(& $target)
    {
        switch (gettype($target)) {
            case 'string':
                return $target;
            case 'object':
                return $target->getOID();
            default:
                assert('FALSE');
        }
    }

    /**
     * @param GRN_PhoneMessage_User|GRN_PhoneMessage_Group|GRN_PhoneMessage_Role $object
     * @param string                                                             $target_name 'dynamic_role', 'user', 'group' or 'role'
     *
     * @return string
     */
    function _getTableName(& $object, $target_name)
    {
        switch (gettype($object)) {
            case 'string':
                $object_name = $object;
                break;
            case 'object':
                $object_name = strtolower(get_class($object));
                if (is_a($object, 'GRN_Access_AbstractData')) {
                    $object_name = 'grn_access_abstractdata_'
                                   . $object->get('unique_key');
                }
                $object_name = substr($object_name, 4);
                break;
            default:
                assert('FALSE');
        }

        return 'GRN_' . $object_name . '_' . $target_name;
    }

    /**
     * @access private
     */
    var $_table_infos = [];

    /**
     * @access private
     *
     * @param string $table_name
     *
     * @return GRN_TableInfo
     */
    function _getTableInfo($table_name)
    {
        if ( ! array_key_exists($table_name, $this->_table_infos)) {
            $this->_table_infos[$table_name]
                = $this->_table_manager->getTableInfo($table_name);
        }

        return $this->_table_infos[$table_name];
    }

    /**
     * アクセス権を追加する
     */
    function addAccess(& $object, & $target, $authorities)
    {
        $target_name = $this->getTargetName($target);
        $table_name = $this->_getTableName($object, $target_name);
        $table_info = $this->_getTableInfo($table_name);

        $row = $table_info->newRow();
        $row->set('object', $object);
        $row->set('target', $target);
        foreach ($authorities as $key => $value) {
            $row->set('authority_' . $key, intval($value));
        }
        $row->registerNow();

        // 監査する
        require_once('phonemessage/inspection.csp');
        $inspection = GRN_PhoneMessage_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $row = $object->get('object');
            $object_name = substr(strtolower(get_class($row)), 3);
            $target_name = $this->getTargetName($target);

            $section = GRN_PHONEMESSAGE_INSPECTION_CREATE;
            $message
                = GRN_PHONEMESSAGE_INSPECTION_ACCESS;
            $params = [];
            $params['object_' . $object_name] = $row->getOID();
            $params['access_' . $target_name] = $this->getTargetId($target);
            $keys = [];
            foreach ($authorities as $key => $value) {
                if ($value) {
                    $keys[] = $key;
                }
            }
            $informations = [];
            $informations['auth'] = implode('/', $keys);

            $inspection->record($section, $message, $params, $informations);
        }

        return $row;
    }

    /**
     * アクセス権を取得する
     */
    function getAccessById(& $object, $target_name, $access_id)
    {
        $table_name = $this->_getTableName($object, $target_name);
        $table_info = $this->_getTableInfo($table_name);

        if ( ! ($row = $table_info->getRow($access_id))) {
            $ret = false;

            return $ret;
        }

        // 削除フラグが立っている可能性があるので取得できるかチェック
        $user_object = $row->get('object');
        if (is_null($user_object->get('object'))) {
            $ret = false;

            return $ret;
        }
        if (is_null($row->get('target'))) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * アクセス権を取得する
     */
    function getAccess(& $object, & $target)
    {
        $target_name = $this->getTargetName($target);
        $table_name = $this->_getTableName($object, $target_name);
        $table_info = $this->_getTableInfo($table_name);

        $object_id = $object->getOID();
        $target_id = $this->getTargetId($target);

        $rowset = new CB_RowSet($table_info);
        $real_table_name = CB_DATABASE_TABLE_PREFIX . strtolower($table_name);
        $this->_addUserJoin($rowset, $object, $target_name);

        //escape
        $condition = $rowset->queryf($real_table_name
                                     . ".col_object = '@S' AND col_target = '@S'",
            $object_id, $target_id);
        $rowset->addCondition($condition);

        if (is_null($row = $rowset->iterate())) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * Get list of access right settings for the $object.
     *
     * @param GRN_PhoneMessage_User|GRN_PhoneMessage_Group|GRN_PhoneMessage_Role $object
     *
     * @return array $accesses
     *
     *               $accesses[GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE][$id_of_target_access_right] $target_access_right
     *                  $target_access_right GRN_PhoneMessage_User_Dynamic_Role|GRN_PhoneMessage_Group_Dynamic_Role|GRN_PhoneMessage_Role_Dynamic_Role
     *
     *               $accesses[GRN_ACCESS_TARGET_TYPE_STATIC_ROLE][$id_of_target_access_right] = $target_access_right
     *                  $target_access_right GRN_PhoneMessage_User_Static_Role|GRN_PhoneMessage_Group_Static_Role|GRN_PhoneMessage_Role_Static_Role
     *
     *               $accesses[GRN_ACCESS_TARGET_TYPE_GROUP][$id_of_target_access_right] = $target_access_right
     *                  $target_access_right GRN_PhoneMessage_User_Group|GRN_PhoneMessage_Group_Group|GRN_PhoneMessage_Role_Group
     *
     *               $accesses[GRN_ACCESS_TARGET_TYPE_USER][$id_of_target_access_right] =
     *                  $target_access_right GRN_PhoneMessage_User_Group|GRN_PhoneMessage_Group_Group|GRN_PhoneMessage_Role_Group
     */
    function listAccesses($object)
    {
        $db = cb_get_app_db('phonemessage');

        $accesses = [];

        foreach ($this->_target_map as $target_type => $target_table_class_name) {
            $access_table_name = CB_DATABASE_TABLE_PREFIX
                                 . strtolower($this->_getTableName($object,
                    $target_type));

            $query_parts = [];
            $query_parts[] = "SELECT a.* FROM ${access_table_name} AS a";

            if ($target_type === GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE) {
                $query_parts[] = $db->format("WHERE col_object = '@S'",
                    [$object->getOID()]);
                $query_parts[] = "ORDER BY a._id";
            } else {
                $target_table_name = CB_DATABASE_TABLE_PREFIX
                                     . strtolower($target_table_class_name);
                $query_parts[]
                    = "INNER JOIN ${target_table_name} AS t ON a.col_target = t._id";
                $query_parts[] = $db->format("WHERE col_object = '@S'",
                    [$object->getOID()]);
                if ($target_type === GRN_ACCESS_TARGET_TYPE_USER) {
                    $query_parts[] = "AND t.col_deleted IS NULL";
                }
                $query_parts[] = "ORDER BY t.col_list_index";
            }

            $query = join(' ', $query_parts);
            $result = $db->query($query);

            $access_table_info
                = $this->_getTableInfo($this->_getTableName($object,
                $target_type));

            $accesses[$target_type] = [];
            while ($row = $db->fetch_assoc($result)) {
                $accesses[$target_type][$row['_id']]
                    = $access_table_info->getRow($row['_id'], $row);
            }
        }

        return $accesses;
    }

    /**
     * Get a count of access right settings of the $object.
     *
     * @param GRN_PhoneMessage_User|GRN_PhoneMessage_Group|GRN_PhoneMessage_Role $object
     *
     * @return int
     */
    function getAccessCount(& $object)
    {
        $access_count = 0;
        if ($object) {
            foreach ($this->_target_map as $target_name => $target_table) {
                $table_name = $this->_getTableName($object, $target_name);
                $table_info = $this->_getTableInfo($table_name);

                $rowset = new CB_RowSet($table_info, 'a');
                $this->_addUserJoin($rowset, $object, $target_name, 'a');
                if ( ! is_null($target_table)) {
                    $table_info = $this->_getTableInfo($target_table);
                    $condition = 'a.col_target = t._id';
                    $rowset->addJoin($table_info, $condition,
                        CB_DATABASE_INNER_JOIN, 't');
                }

                //Escape
                $condition = $rowset->queryf("a.col_object = '@S'",
                    $object->getOID());

                $rowset->addCondition($condition);
                $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);

                if (is_null($result = $rowset->iterate())) {
                    return 0;
                }
                $rowset->destroy();
                $access_count += $result['count'];
            }
        }

        return $access_count;
    }

    /**
     * @param $object_info
     *
     * @return array
     */
    function listAccessCounts($object_info)
    {
        $access_counts = [];
        foreach ($object_info['id_map'] as $object_id) {
            $object =& $object_info['objects'][$object_id];

            $target_id = array_search($object_id,
                $object_info['id_map']);
            $access_counts[$target_id] = 0;
        }

        if (0 < count($access_counts)) {

            $app_locator = GRN_ApplicationLocator::instance();
            $dbconn = $app_locator->getConnection('phonemessage');

            //Escape!
            $escaped_object_info = [];
            foreach ($object_info['id_map'] as $item) {
                $escaped_object_info[] = cb_queryf($dbconn, "'@S'", $item);
            }
            $add_condition = implode(',', $escaped_object_info);
            foreach ($this->_target_map as $target_name => $target_table) {
                $table_name = $this->_getTableName($object, $target_name);
                $table_info = $this->_getTableInfo($table_name);

                $rowset = new CB_RowSet($table_info, 'a');
                $this->_addUserJoin($rowset, $object, $target_name, 'a');
                if ( ! is_null($target_table)) {
                    $table_info = $this->_getTableInfo($target_table);
                    $join_condition = 'a.col_target = t._id';
                    $join_type = CB_DATABASE_INNER_JOIN;
                    $join_alias = 't';

                    $rowset->addJoin($table_info, $join_condition, $join_type,
                        $join_alias);
                }
                $group_functions = ['count' => 'COUNT(*)'];
                $group_by = ['_id' => 'a.col_object'];

                $rowset->addCondition("a.col_object in (${add_condition})");
                $rowset->applyGroupFunctions($group_functions, $group_by);

                while ( ! is_null($result = $rowset->iterate())) {
                    $object_id = $result['_id'];
                    $target_id = array_search($object_id,
                        $object_info['id_map']);
                    $access_counts[$target_id] += $result['count'];
                }
            }
        }

        return $access_counts;
    }

    /**
     * アクセス権を削除する
     */
    function removeAccess(& $object, & $target)
    {
        $target_name = $this->getTargetName($target);
        $table_name = $this->_getTableName($object, $target_name);
        $table_info = $this->_getTableInfo($table_name);

        $rowset = new CB_RowSet($table_info);
        $condition = $rowset->queryf("col_object='@S'", $object->getOID());
        $rowset->addCondition($condition);
        if (is_string($target)) {
            $target_id = $target;
        } else {
            $target_id = $target->getOID();
        }
        //Escape OK!
        $condition = $rowset->queryf('col_target = \'@S\'', $target_id);
        $rowset->addCondition($condition);

        $rowset->deleteAllMatched();

        // 監査する
        require_once('phonemessage/inspection.csp');
        $inspection = GRN_PhoneMessage_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $row = $object->get('object');
            $object_name = substr(strtolower(get_class($row)), 3);

            $section = GRN_PHONEMESSAGE_INSPECTION_DELETE;
            $message
                = GRN_PHONEMESSAGE_INSPECTION_ACCESS;
            $params = [];
            $informations = [];
            $informations['object_' . $object_name] = $row->getOID();
            $informations['access_' . $target_name]
                = $this->getTargetId($target);

            $inspection->record($section, $message, $params, $informations);
        }
    }

    /**
     * 全てのアクセス権を削除する
     */
    function _removeAllAccesses(& $object)
    {
        foreach (array_keys($this->_target_map) as $target_name) {
            $table_name = $this->_getTableName($object, $target_name);
            $table_info = $this->_getTableInfo($table_name);

            //$condition = 'col_object = '.$object->getOID();

            $rowset = new CB_RowSet($table_info);
            //Escape!
            $condition = $rowset->queryf("col_object = '@S'",
                $object->getOID());
            $rowset->addCondition($condition);

            $rowset->deleteAllMatched();
        }

        // 監査する
        require_once('phonemessage/inspection.csp');
        $inspection = GRN_PhoneMessage_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $row = $object->get('object');
            $object_name = substr(strtolower(get_class($row)), 3);

            $section = GRN_PHONEMESSAGE_INSPECTION_DELETE_ALL;
            $message = GRN_PHONEMESSAGE_INSPECTION_ACCESS;

            $params = [];
            $informations = [];
            $informations['object_' . $object_name] = $row->getOID();

            $inspection->record($section, $message, $params, $informations);
        }
    }

    /**
     * 複数のアクセス権を削除する
     */
    function _removeAccesses(& $object, $access_info)
    {
        require_once('phonemessage/inspection.csp');
        $inspection = GRN_PhoneMessage_Inspection::getInstance();
        $accesses = [];

        foreach (array_keys($access_info) as $target_name) {
            $target_ids =& $access_info[$target_name];

            $table_name = $this->_getTableName($object, $target_name);
            $table_info = $this->_getTableInfo($table_name);

            $rowset = new CB_RowSet($table_info);
            $condition = $rowset->queryf("col_object='@S'", $object->getOID());
            $rowset->addCondition($condition);
            $conditions = [];
            foreach ($target_ids as $target_id) {
                $accesses[] = ['id' => $target_id, 'name' => $target_name];
                //Escape! OK
                $conditions[] = $rowset->queryf('col_target = \'@S\'',
                    $target_id);
            }
            $condition = implode(' OR ', $conditions);
            $rowset->addCondition($condition);

            $rowset->deleteAllMatched();
        }

        // 監査する
        if ($inspection->isEnabled()) {
            $row = $object->get('object');
            $object_name = substr(strtolower(get_class($row)), 3);

            $section = GRN_PHONEMESSAGE_INSPECTION_DELETE;
            $message = GRN_PHONEMESSAGE_INSPECTION_ACCESS;

            foreach ($accesses as $access) {
                $params = [];
                $informations = [];
                $informations['object_' . $object_name] = $row->getOID();
                $informations['access_' . $access['name']] = $access['id'];
                $inspection->record($section, $message, $params, $informations);
            }
        }
    }

    /**
     * アクセス権一覧を削除する
     */
    function removeAccesses(& $object, $access_info = null)
    {
        if (is_null($access_info)) {
            $this->_removeAllAccesses($object);
        } else {
            $this->_removeAccesses($object, $access_info);
        }
    }

    /**
     * @access private
     */
    var $_evaluation_info
        = [
            [
                'retval_true'    => true,
                'retval_false'   => false,
                'initial_access' => 1,
                'operations'     => [
                    0 => [
                        0 => 0,
                        1 => 0
                    ],
                    1 => [
                        0 => 0,
                        1 => 1
                    ]
                ]
            ],
            [
                'retval_true'    => false,
                'retval_false'   => true,
                'initial_access' => 0,
                'operations'     => [
                    0 => [
                        0 => 0,
                        1 => 1
                    ],
                    1 => [
                        0 => 1,
                        1 => 1
                    ]
                ]
            ]
        ];

    /**
     * オブジェクトのアクセス権を評価する
     */
    function evaluateAccess(
        & $object,
        & $user,
        $dynamic_roles,
        $authorities,
        $force_security_model = false
    ) {
        //for Escape
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('phonemessage');

        $object_name = strtolower(get_class($object));
        $object_id = $object->getOID();
        if (array_key_exists($object_id, $this->_cached_access)) {
            return $this->_cached_access[$object_name][$object_id];
        }

        $targets = [];
        $targets[GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE] = $dynamic_roles;

        $user_id = $user->getOID();
        $targets[GRN_ACCESS_TARGET_TYPE_USER] = [$user_id => & $user];

        if (false === ($static_roles = $this->_uum->getUserRoles($user_id))) {
            assert('FALSE');
        }
        $targets[GRN_ACCESS_TARGET_TYPE_STATIC_ROLE] = $static_roles;

        if (false === ($groups = $this->_uum->getUserGroups($user_id))) {
            assert('FALSE');
        }
        $targets[GRN_ACCESS_TARGET_TYPE_GROUP] = $groups;

        if ($force_security_model) {
            $security_model = $force_security_model;
        } else {
            $security_model = $this->getSecurityModel($object);
        }

        $conditions = [];
        foreach ($authorities as $authority) {
            //not necessary to escape
            $conditions[] = 'col_authority_' . $authority . ' = 1';
        }

        $base_condition = 'a.col_object = ' . "'" . $dbconn->escape($object_id)
                          . "'" .
                          ' AND ( ' . implode(' OR ', $conditions) . ' ) AND ';
        $cached_access = [];
        foreach (array_keys($this->_target_map) as $target_name) {
            if (0 == count($targets[$target_name])) {
                continue;
            }

            $table_name = $this->_getTableName($object, $target_name);
            $table_info = $this->_getTableInfo($table_name);
            $rowset = new CB_RowSet($table_info, 'a');
            $this->_addUserJoin($rowset, $object, $target_name, 'a');

            $conditions = [];
            foreach (array_keys($targets[$target_name]) as $target_id) {
                //Escape OK
                $conditions[] = $rowset->queryf("col_target = '@S'",
                    $target_id);
            }
            $condition = $base_condition . '( ' . implode(' OR ', $conditions)
                         . ' )';
            $rowset->addCondition($condition);

            while ( ! is_null($row = $rowset->iterate())) {
                foreach ($authorities as $authority) {
                    $access = $row->get('authority_' . $authority);
                    if ($access > @ $cached_access[$authority]) {
                        $cached_access[$authority] = $access;
                    }
                }
            }
        }
        if ( ! array_key_exists($object_name, $this->_cached_access)) {
            $this->_cached_access[$object_name] = [];
        }
        $this->_cached_access[$object_name][$object_id] = $cached_access;

        return $cached_access;
    }

    var $_cached_access = [];
    var $_cached_accesses = [];

    /**
     * 複数のオブジェクトのアクセス権を評価する
     */
    function evaluateAccesses(
        $objects,
        & $user,
        $dynamic_roles,
        $authorities,
        $force_security_model = false
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('phonemessage');

        $targets = [];
        $targets[GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE] = $dynamic_roles;

        $user_id = $user->getOID();
        $targets[GRN_ACCESS_TARGET_TYPE_USER] = [$user_id => & $user];

        if (false === ($static_roles = $this->_uum->getUserRoles($user_id))) {
            assert('FALSE');
        }
        $targets[GRN_ACCESS_TARGET_TYPE_STATIC_ROLE] = $static_roles;

        if (false === ($groups = $this->_uum->getUserGroups($user_id))) {
            assert('FALSE');
        }
        $targets[GRN_ACCESS_TARGET_TYPE_GROUP] = $groups;

        $cached_access = [];
//        $conditions = array();
        foreach (array_keys($objects) as $object_id) {
            $object =& $objects[$object_id];
            if ($force_security_model) {
                $security_model = $force_security_model;
            } else {
                $security_model = $this->getSecurityModel($object);
            }

            $cached_access[$object_id] = [];
//            $conditions[] = 'col_object = '.$object_id;
        }
        //$base_condition = implode( ',', array_keys( $objects ) );
        //for escape
        $before = array_keys($objects);
        $after = [];
        foreach ($before as $item) {
            $after [] = "'" . $dbconn->escape($item) . "'";
        }
        $base_condition = implode(',', $after);
        $base_condition = "(a.col_object in (${base_condition})) AND ";
//        $base_condition = '( '.implode( ' OR ', $conditions ).' ) AND ';
        $conditions = [];
        foreach ($authorities as $authority) {
            $conditions[] = 'col_authority_' . $authority . ' = 1';
        }
        $base_condition .= '( ' . implode(' OR ', $conditions) . ' ) AND ';
        foreach (array_keys($this->_target_map) as $target_type) {
            if (0 == count($targets[$target_type])) {
                continue;
            }

            $table_name = $this->_getTableName($object, $target_type);
            $table_info = $this->_getTableInfo($table_name);
            $rowset = new CB_RowSet($table_info, 'a');
            $this->_addUserJoin($rowset, $object, $target_type, 'a');

            $conditions = [];
            foreach (array_keys($targets[$target_type]) as $target_id) {
                //Escape OK
                $conditions[] = $rowset->queryf("col_target = '@S'",
                    $target_id);
            }
            $condition = $base_condition . '( ' . implode(' OR ', $conditions)
                         . ' )';
            $rowset->addCondition($condition);

            while ( ! is_null($row = $rowset->iterate())) {
                $object = $row->get('object');
                $object_id = $object->getOID();
                if ($force_security_model) {
                    $security_model = $force_security_model;
                } else {
                    $security_model = $this->getSecurityModel($object);
                }

                foreach ($authorities as $authority) {
                    $access = $row->get('authority_' . $authority);
                    if ($access > @ $cached_access[$object_id][$authority]) {
                        $cached_access[$object_id][$authority] = $access;
                    }
                }
            }
        }
        $object_name = strtolower(get_class($object));
        if ( ! array_key_exists($object_name, $this->_cached_access)) {
            $this->_cached_access[$object_name] = [];
        }
        $this->_cached_access[$object_name] = $cached_access;

        return $cached_access;
    }

    /**
     * 複数のオブジェクトのアクセス権を評価する
     */
    function evaluateAccessesFast(
        $objects_info,
        $object_type,
        $user_id,
        $dynamic_roles,
        $authorities,
        $forced_security_model = false
    ) {
        //for Escape
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('phonemessage');

        // ダイナミックロールIDを列挙する
        $targets = [];
        $targets[GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE]
            = array_keys($dynamic_roles);

        // ユーザーIDを列挙する
        $targets[GRN_ACCESS_TARGET_TYPE_USER] = [$user_id];


        // ユーザーが保持するスタティックロールIDを列挙する
        $static_roles_info = $this->_uum->getUserRolesInfo($user_id);
        if (is_array($static_roles_info) && 0 < count($static_roles_info)) {
            $targets[GRN_ACCESS_TARGET_TYPE_STATIC_ROLE]
                = array_keys($static_roles_info);
        } else {
            $targets[GRN_ACCESS_TARGET_TYPE_STATIC_ROLE] = [];
        }

        // ユーザーが所属する組織IDを列挙する
        $groups_info = $this->_uum->getUserGroupsInfo($user_id);
        if (is_array($groups_info) && 0 < count($groups_info)) {
            $targets[GRN_ACCESS_TARGET_TYPE_GROUP] = array_keys($groups_info);
        } else {
            $targets[GRN_ACCESS_TARGET_TYPE_GROUP] = [];
        }

        // 取得したいカラムを列挙する
        $authority_columns = [];
        foreach ($authorities as $authority) {
            //Escape!
            $authority_columns[] = 'col_authority_'
                                   . $dbconn->escape($authority);
        }

        // オブジェクトの絞込み条件を生成する
        $cached_accesses = [];
//        $conditions = array();
        foreach (array_keys($objects_info) as $object_id) {
            $cached_accesses[$object_id] = [];
//            $conditions[] = 'col_object = '.$object_id;
        }
//        $add_condition = implode( ' OR ', $conditions );
        //$add_condition = implode( ',', array_keys( $objects_info ) );

        //Escape!
        $before = array_keys($objects_info);
        $after = [];
        foreach ($before as $item) {
            $after [] = "'" . $dbconn->escape($item) . "'";
        }
        $add_condition = implode(',', $after);

        $add_condition = "a.col_object in (${add_condition})";
        // 権限の絞込み条件を生成する
        $conditions = [];
        foreach ($authorities as $authority) {
            //escape
            $conditions[] = 'col_authority_' . $dbconn->escape($authority)
                            . ' = 1';
        }
        $add_condition = sprintf("( %s ) AND ( %s )",
            implode(' OR ', $conditions), $add_condition);
        foreach (array_keys($this->_target_map) as $target_type) {
            if (0 < count($targets[$target_type])) {
                // DBのコネクションを取得する
                // $app_locator = GRN_ApplicationLocator::instance();
                // $dbconn =& $app_locator->getConnection( 'phonemessage' );

                //獲得済みなので、削除
                $table_name = strtolower('tab_grn_phonemessage_' . $object_type
                                         . '_' . $target_type);

                // ターゲットの絞り込み条件を生成する
                $conditions = [];
                foreach ($targets[$target_type] as $target_id) {
                    //escape!
                    //$conditions[] = "col_target = '".$target_id."'";
                    $conditions[] = "col_target = '"
                                    . $dbconn->escape($target_id) . "'";
                }
                $condition = implode(' OR ', $conditions);
                $condition = sprintf('(%s) AND (%s)', $condition,
                    $add_condition);

                $join = '';
                if (strcasecmp('user', $object_type) == 0) {
                    $join .= 'INNER JOIN tab_grn_phonemessage_user AS pu ON a.col_object = pu._id INNER JOIN tab_cb_user AS ou ON pu.col_object = ou._id AND ou.col_deleted IS NULL ';
                }
                if (strcasecmp('user', $target_type) == 0) {
                    $join .= 'INNER JOIN tab_cb_user AS tu ON a.col_target = tu._id AND tu.col_deleted IS NULL';
                }

                // DBに投げるクエリを生成する
                $query_format = 'SELECT a._id, a.col_object, ' . implode(', ',
                        $authority_columns) . ' FROM ' . $table_name . ' AS a '
                                . $join . ' WHERE %s';
                $query = sprintf($query_format, $condition);
                $query = $dbconn->select_format($query, 0, -1);

                // DBにクエリを投げる
                if (cb_is_db_result($result = $dbconn->query($query))) {
                    // 結果の行数を取得する
                    $row_count = $dbconn->num_rows($result);

                    for ($i = 0; $i < $row_count; $i++) {
                        $row = $dbconn->fetch_assoc($result);
                        if (is_array($row) && 0 < count($row)) {
                            $object_id = $row['col_object'];
                            foreach ($authorities as $authority) {
                                $column_name = 'col_authority_' . $authority;
                                if ( ! array_key_exists($column_name, $row)) {
                                    continue;
                                }

                                // アクセス権を構成する権限の値を取得する
                                $access_value = $row[$column_name];
                                if (array_key_exists($authority,
                                    $cached_accesses[$object_id])
                                ) {
                                    $cached_access_value
                                        = $cached_accesses[$object_id][$authority];
                                } else {
                                    $cached_access_value = 0;
                                }

                                // キャッシュされた権限の値と比較する
                                if ($access_value > $cached_access_value) {
                                    $cached_accesses[$object_id][$authority]
                                        = $access_value;
                                }
                            }
                        }
                    }
                }
            }
        }

        // アクセス権をキャッシュする
        if ( ! array_key_exists($object_type, $this->_cached_accesses)) {
            $this->_cached_accesses[$object_type] = [];
        }
        $this->_cached_accesses[$object_type] = $cached_accesses;

        return $cached_accesses;
    }

    /**
     * 許可されたオブジェクトを取得する
     */
    function pickAllowedObjects(
        $objects,
        & $user,
        $dynamic_roles,
        $authorities,
        $force_security_model = false
    ) {
        //for Escape
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('phonemessage');

        $targets = [];
        $targets[GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE] = $dynamic_roles;

        $user_id = $user->getOID();
        $targets[GRN_ACCESS_TARGET_TYPE_USER] = [$user_id => & $user];

        if (false === ($static_roles = $this->_uum->getUserRoles($user_id))) {
            assert('FALSE');
        }
        $targets[GRN_ACCESS_TARGET_TYPE_STATIC_ROLE] = $static_roles;

        if (false === ($groups = $this->_uum->getUserGroups($user_id))) {
            assert('FALSE');
        }
        $targets[GRN_ACCESS_TARGET_TYPE_GROUP] = $groups;

        $cached_access = [];
        $picked_objects = [];
//        $conditions = array();
        foreach (array_keys($objects) as $object_id) {
            $object =& $objects[$object_id];
            if ($force_security_model) {
                $security_model = $force_security_model;
            } else {
                $security_model = $this->getSecurityModel($object);
            }

            $cached_access[$object_id] = [];
            if ($this->_evaluation_info[$security_model]['retval_false']) {
                $picked_objects[$object_id] =& $object;
            }
//            $conditions[] = 'col_object = '.$object_id;
        }
        //$base_condition = implode( ',', array_keys( $objects ) );

        //for escape
        $before = array_keys($objects);
        $after = [];
        foreach ($before as $item) {
            $after [] = "'" . $dbconn->escape($item) . "'";
        }
        $base_condition = implode(',', $after);
        $base_condition = "(a.col_object in (${base_condition})) AND ";
//        $base_condition = '( '.implode( ' OR ', $conditions ).' ) AND ';

        $conditions = [];
        foreach ($authorities as $authority) {
            $conditions[] = 'col_authority_' . $authority . ' = 1';
        }
        $base_condition .= '( ' . implode(' OR ', $conditions) . ' ) AND ';

        foreach (array_keys($this->_target_map) as $target_name) {
            if (0 == count($targets[$target_name])) {
                continue;
            }

            $table_name = $this->_getTableName($object, $target_name);
            $table_info = $this->_getTableInfo($table_name);
            $rowset = new CB_RowSet($table_info, 'a');
            $this->_addUserJoin($rowset, $object, $target_name, 'a');

            $conditions = [];
            foreach (array_keys($targets[$target_name]) as $target_id) {
                //Escape OK
                $conditions[] = $rowset->queryf("col_target = '@S'",
                    $target_id);
            }
            $condition = $base_condition . '( ' . implode(' OR ', $conditions)
                         . ' )';
            $rowset->addCondition($condition);

            while ( ! is_null($row = $rowset->iterate())) {
                $object = $row->get('object');
                $object_id = $object->getOID();
                if ($force_security_model) {
                    $security_model = $force_security_model;
                } else {
                    $security_model = $this->getSecurityModel($object);
                }

                $evaluated_value
                    = $this->_evaluation_info[$security_model]['initial_access'];
                foreach ($authorities as $authority) {
                    $cached_access[$object_id][$authority]
                        = intval(max(@ $cached_access[$object_id][$authority],
                        $row->get('authority_' . $authority)));
                    $evaluated_value
                        = $this->_evaluation_info[$security_model]['operations'][$evaluated_value][$cached_access[$object_id][$authority]];
                }

                if (1 == $evaluated_value) {
                    if ($this->_evaluation_info[$security_model]['retval_true']) {
                        $picked_objects[$object_id] =& $object;
                    } elseif (array_key_exists($object_id, $picked_objects)) {
                        unset($picked_objects[$object_id]);
                    }
                }
            }
        }
        $object_name = strtolower(get_class($object));
        if ( ! array_key_exists($object_name, $this->_cached_access)) {
            $this->_cached_access[$object_name] = [];
        }
        $this->_cached_access[$object_name] = $cached_access;

        return $picked_objects;
    }

    /**
     * 許可されたアクセス権か判定する
     */
    function isAllowedAccess($access, $authorities, $security_model)
    {
        if (GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE == $security_model) {
            $allowed_access = 0;
        } else {
            $allowed_access = 1;
        }

        $evaluated_access = true;
        foreach ($authorities as $authority) {
            $evaluated_access &= $allowed_access
                                 == intval(@ $access[$authority]);
        }

        return $evaluated_access;
    }

    /**
     * @param CB_CSVWriter $writer
     */
    function exportAccessToCSV(& $writer)
    {
        $object_types = ['user', 'role', 'group'];

        foreach ($object_types as $object_type) {
            $this->_exportAccessToCSV($writer, $object_type);
        }
    }

    /**
     * @param CB_CSVWriter $writer
     * @param string       $object_type 'user' or 'role' or 'group'
     * @param string[]     $object_list
     */
    function _exportSecurityModelToCSV(& $writer, $object_type, $object_list)
    {
        $table_name = strtolower('grn_phonemessage_' . $object_type);
        $table_info = $this->_getTableInfo($table_name);
        $real_table_name = CB_DATABASE_TABLE_PREFIX . $table_name;

        $rowset = new CB_RowSet($table_info);
        if (strcasecmp('user', $object_type) == 0) {
            $user_table = &$this->_getTableInfo('CB_User');
            $on = $real_table_name
                  . '.col_object = u._id AND u.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        }

        if (is_array($object_list) && 0 < count($object_list)) {
            $add_condition = $rowset->queryf($real_table_name
                                             . '._id NOT IN (@A)',
                array_keys($object_list));
            $rowset->addCondition($add_condition);
        }

        while ( ! is_null($row = $rowset->iterate())) {
            $object = $row->get('object');
            $foreign_key = $object->get('foreign_key');
            $security_model = $this->getSecurityModel($row);

            $line = [];
            $line[] = $object_type;
            $line[] = $foreign_key;
            $line[] = 'security_model';
            $line[] = GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE == $security_model
                ? 'revoke' : 'grant';
            $line[] = '';

            $writer->writeLine($line);
        }
        $rowset->destroy();
    }

    /**
     * @param CB_CSVWriter $writer
     * @param string       $object_type 'user' or 'role' or 'group'
     */
    function _exportAccessToCSV(& $writer, $object_type)
    {
        $object_list = [];
        $object_name = 'PhoneMessage_' . $object_type;
        foreach (array_keys($this->_target_map) as $target_name) {
            $table_name = $this->_getTableName($object_name, $target_name);
            $table_info = &$this->_getTableInfo($table_name);
            $rowset = new CB_RowSet($table_info);
            $this->_addUserJoin($rowset, $object_name, $target_name);
            $real_table_name = strtolower(CB_DATABASE_TABLE_PREFIX
                                          . $table_name);

            $rowset->addOrderColumn($real_table_name . '.col_object', true);
            $rowset->applyGroupFunctions(null,
                ['object' => $real_table_name . '.col_object']);

            while ( ! is_null($row =& $rowset->iterate())) {
                $object_id = $row['object'];
                if ( ! array_key_exists($object_id, $object_list)) {
                    $object_list[$object_id] = [];
                }
                $object_list[$object_id][] = $table_name;
            }
        }

        $this->_exportSecurityModelToCSV($writer, $object_type, $object_list);

        foreach ($object_list as $object_id => $table_name_list) {
            $first = true;
            foreach ($table_name_list as $table_name) {
                $table_info = $this->_getTableInfo($table_name);
                $rowset = new CB_RowSet($table_info);

                // grn_phonemessage_OBJECT_TARGETという形式でくるので、
                // 文字列操作でobjectとtargetに分割
                // ただしobjectはphonemessage_OBJECTという形で渡す必要がある
                $object_target = substr($table_name,
                    strlen('grn_phonemessage_'));
                $object_index = strpos($object_target, '_');
                $object = substr($object_target, 0, $object_index);
                $target = substr($object_target, strlen($object) + 1);
                $object = 'phonemessage_' . $object;
                $this->_addUserJoin($rowset, $object, $target);

                $real_table_name = strtolower(CB_DATABASE_TABLE_PREFIX
                                              . $table_name);

                //Escape! 
                $condition = $rowset->queryf($real_table_name
                                             . ".col_object = '@S'",
                    $object_id);
                $rowset->addCondition($condition);

                $rowset->addOrderColumn('col_target');

                while ( ! is_null($row = $rowset->iterate())) {
                    $target = $row->get('target');
                    $object = $row->get('object');
                    $security_model = $this->getSecurityModel($object);
                    $object = $object->get('object');
                    $foreign_key = $object->get('foreign_key');

                    if ($first) {
                        if (is_a($object, 'CB_User')) {
                            $object_type = 'user';
                        } elseif (is_a($object, 'CB_Role')) {
                            $object_type = 'role';
                        } elseif (is_a($object, 'CB_Group')) {
                            $object_type = 'group';
                        } else {
                            continue;
                        }

                        $line = [];
                        $line[] = $object_type;
                        $line[] = $foreign_key;
                        $line[] = 'security_model';
                        $line[] = GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE
                                  == $security_model ? 'revoke' : 'grant';
                        $line[] = '';

                        $writer->writeLine($line);
                        $first = false;
                    }

                    $target_type = '';
                    if (is_a($target, 'CB_User')) {
                        $target_name = $target->get('foreign_key');
                        $target_type = 'user';
                    } elseif (is_a($target, 'CB_Role')) {
                        $target_name = $target->get('foreign_key');
                        $target_type = 'static_role';
                    } elseif (is_a($target, 'CB_Group')) {
                        $target_name = $target->get('foreign_key');
                        $target_type = 'group';
                    } else {
                        $target_name = $target;
                        $target_type = 'dynamic_role';
                    }

                    $access = '';
                    $autority = $row->get('authority_add');
                    if ($security_model == GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                        && $autority
                    ) {
                        $access .= 'A';
                    } elseif ($security_model
                              == GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE
                              && ! $autority
                    ) {
                        $access .= 'A';
                    }
                    $autority = $row->get('authority_browse');
                    if ($security_model == GRN_PHONEMESSAGE_SECURITYMODEL_GRANT
                        && $autority
                    ) {
                        $access .= 'B';
                    } elseif ($security_model
                              == GRN_PHONEMESSAGE_SECURITYMODEL_REVOKE
                              && ! $autority
                    ) {
                        $access .= 'B';
                    }

                    $line = [];
                    $line[] = $object_type;
                    $line[] = $foreign_key;
                    $line[] = $target_type;
                    $line[] = $access;
                    $line[] = $target_name;

                    $writer->writeLine($line);
                }
            }
        }
    }

    /**
     * If method parameter matches to the condition, $rowset's table is joined with tab_cb_user table.
     *
     * @param CB_RowSet                      $rowset
     * @param string|CB_User|GRN_Access_Base $object
     * @param string                         $target_name 'dynamic_role', 'user', 'group' or 'role'
     * @param string                         $alias
     */
    function _addUserJoin($rowset, $object, $target_name, $alias = '')
    {
        // 対象のテーブル名にエイリアスを貼っていたらそれを使えるようにする
        if (is_string($alias) && strlen($alias) > 0) {
            $real_table_name = $alias;
        } else {
            $real_table_name = CB_DATABASE_TABLE_PREFIX .
                               strtolower($this->_getTableName($object,
                                   $target_name));
        }

        if (is_object($object) && is_a($object, 'CB_User')) {
            $user_object_table = $this->_getTableInfo('GRN_PhoneMessage_User');
            $on = $real_table_name . '.col_object = pu._id';
            $rowset->addJoin($user_object_table, $on, CB_DATABASE_INNER_JOIN,
                'pu');
            $user_table = $this->_getTableInfo('CB_User');
            $on = 'pu.col_object = ou._id AND ou.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'ou');
        } elseif (is_string($object)
                  && strcasecmp('phonemessage_user', $object) == 0
        ) {
            $user_object_table = $this->_getTableInfo('GRN_PhoneMessage_User');
            $on = $real_table_name . '.col_object = pu._id';
            $rowset->addJoin($user_object_table, $on, CB_DATABASE_INNER_JOIN,
                'pu');
            $user_table = &$this->_getTableInfo('CB_User');
            $on = 'pu.col_object = ou._id AND ou.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'ou');
        }

        if (is_string($target_name) && strcasecmp('user', $target_name) == 0) {
            $user_table = $this->_getTableInfo('CB_User');
            $on = $real_table_name
                  . '.col_target = tu._id AND tu.col_deleted IS NULL';
            $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'tu');
        }
    }
}

class GRN_PhoneMessage_Group_Base extends CB_PersistentBase
{
    var $col_authority_add = ['type' => 'int'];
    var $col_authority_browse = ['type' => 'int'];
    var $col_object = ['type' => 'relation', 'to' => 'grn_phonemessage_group'];
}

class GRN_PhoneMessage_Group_User extends GRN_PhoneMessage_Group_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_PhoneMessage_Group_Group extends GRN_PhoneMessage_Group_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_PhoneMessage_Group_Dynamic_Role extends GRN_PhoneMessage_Group_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_PhoneMessage_Group_Static_Role extends GRN_PhoneMessage_Group_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}

class GRN_PhoneMessage_Role_Base extends CB_PersistentBase
{
    var $col_authority_add = ['type' => 'int'];
    var $col_authority_browse = ['type' => 'int'];
    var $col_object = ['type' => 'relation', 'to' => 'grn_phonemessage_role'];
}

class GRN_PhoneMessage_Role_User extends GRN_PhoneMessage_Role_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_PhoneMessage_Role_Group extends GRN_PhoneMessage_Role_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_PhoneMessage_Role_Dynamic_Role extends GRN_PhoneMessage_Role_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_PhoneMessage_Role_Static_Role extends GRN_PhoneMessage_Role_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}

class GRN_PhoneMessage_User_Base extends CB_PersistentBase
{
    var $col_authority_add = ['type' => 'int'];
    var $col_authority_browse = ['type' => 'int'];
    var $col_object = ['type' => 'relation', 'to' => 'grn_phonemessage_user'];
}

class GRN_PhoneMessage_User_User extends GRN_PhoneMessage_User_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_user'];
}

class GRN_PhoneMessage_User_Group extends GRN_PhoneMessage_User_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_group'];
}

class GRN_PhoneMessage_User_Dynamic_Role extends GRN_PhoneMessage_User_Base
{
    var $col_target = ['type' => 'char', 'length' => 100];
}

class GRN_PhoneMessage_User_Static_Role extends GRN_PhoneMessage_User_Base
{
    var $col_target = ['type' => 'relation', 'to' => 'cb_role'];
}
