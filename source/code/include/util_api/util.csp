<?php

/**
 * Convert ISO8601 datetime format to CB_DateTime
 */
function grn_util_api_parse_iso8601($str_datetime)
{
    $datetime = new CB_DateTime();
    if (preg_match('#([0-9]+)-([0-9]+)-([0-9]+)T([0-9]+):([0-9]+):([0-9]+)(Z)?#',
        $str_datetime, $regs)
    ) {
        $datetime->year = intval($regs[1]);
        $datetime->month = intval($regs[2]);
        $datetime->day = intval($regs[3]);
        $datetime->hour = intval($regs[4]);
        $datetime->minute = intval($regs[5]);
        $datetime->second = intval($regs[6]);
        $datetime->utc = isset($regs[7]) ? $regs[7] == 'Z' : false;
        if (isTimestampable($datetime)) {
            return $datetime;
        } else {
            return false;
        }
    }

    return false;
}

/**
 * mktimeでエラーを返さずタイムスタンプを取得できるかどうかを調べる関数
 */
function isTimestampable($datetime)
{
    if (is_null($datetime)) {
        return false;
    }

    if ( ! cb_date_validate_datetime($datetime)) {
        return false;
    }

    $offset = _getOffset();
    $min_time = date('YmdHis', $offset);
    $max_time = date("YmdHis", mktime(23, 59, 59, 12, 31, 2037));
    $target = sprintf("%04d%02d%02d%02d%02d%02d",
        $datetime->year,
        $datetime->month,
        $datetime->day,
        $datetime->hour,
        $datetime->minute,
        $datetime->second);

    $under = strcmp($target, $min_time) >= 0;
    $over = strcmp($target, $max_time) <= 0;

    return ($under & $over);
}

function _getOffset()
{
    $tz = localtime(0, true);
    $offset = $tz['tm_hour'] * 3600 + $tz['tm_min'] * 60;

    return $offset;
}

/**
 * Convert datetime to ISO8601
 *
 * @param   $datetime           mixed   support following types:
 *                              CB_DateTime, CB_DateTimeEx, CB_TimeStamp, CB_TimeStampEx
 * @param   $UTC                boolean TRUE: return UTC format, e.g: 2009-05-30T10:20:00Z
 *                              FALSE: return orther timezone format, e.g: 2009-07-03T16:05:27+09:00
 * @param   $timezone           string
 */
function grn_util_api_iso8601($datetime, $UTC = true, $timezone = null)
{
    assert('is_a($datetime, "CB_DateTime" ) || is_a($datetime, "CB_DateTimeEx" ) || is_a($datetime, "CB_TimeStamp" ) || is_a($datetime, "CB_TimeStampEx" )');

    $tsex = null;
    $obj_type = strtolower(get_class($datetime));
    switch ($obj_type) {
        case 'cb_datetime':
            $tsex = new CB_TimeStampEx();
            $tsex->setDateTime($datetime, $timezone);
            break;
        case 'cb_datetimeex':
            $tsex = new CB_TimeStampEx();
            $tsex->setDateTime($datetime, $timezone);
            break;
        case 'cb_timestamp':
            $tsex = new CB_TimeStampEx($datetime, $timezone);
            break;
        case 'cb_timestampex':
            $tsex = $datetime;
            break;
    }

    return _grn_util_api_iso8601_from_timestamp($tsex, $UTC, $timezone);
}

function _grn_util_api_iso8601_from_timestamp(
    $timestamp,
    $UTC = true,
    $timezone = null
) {
    if ($UTC) {
        $timestamp->setTimeZone('UTC');
        $datetime = $timestamp->getDateTime();

        // ISO8601 UTC format, e.g: 2009-05-30T10:20:00Z
        $format = sprintf('%04d-%02d-%02dT%02d:%02d:%02dZ',
            $datetime->year,
            $datetime->month,
            $datetime->day,
            $datetime->hour,
            $datetime->minute,
            $datetime->second);
    } elseif ( ! is_null($timezone)) {
        $timestamp->setTimezone($timezone);
        $datetime = $timestamp->format('Y-m-d\TH:i:sO');
        $format = substr($datetime, 0, 22) . ':' . substr($datetime, 22, 2);
    } else {
        // ISO8601 orther timezone format, e.g: 2009-07-03T16:05:27+09:00
        $datetime = date('Y-m-d\TH:i:sO', $timestamp->unix_ts);
        $format = substr($datetime, 0, 22) . ':' . substr($datetime, 22, 2);
    }

    return $format;
}

/**
 * Clean up upload temp files
 * NOTICE: only use in "commit" plugin, and "error/hook" plugin.
 */
function util_api_cleanup_upload_temp_file()
{
    global $G_state_set;
    $upload_tmp_files = $G_state_set->get('util_api.upload_tmp_files');
    if (is_array($upload_tmp_files)) {
        foreach ($upload_tmp_files as $file) {
            @unlink($file);
        }
    }
}

/**
 * Convert datetime from UTC timezone to local timezone.
 *
 * @param   $obj_date   CB_DateTime
 *
 * @return  $timestamp  CB_DateTime
 */
function grn_util_api_convert_utc_to_local($obj_date)
{
    static $timezone = null;
    if (is_null($timezone)) {
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();
    }
    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone('UTC');
    if (is_object($obj_date)) {
        if (is_a($obj_date, 'CB_DateTime')) {
            $timestamp->setDateTime($obj_date);
        }
    }
    $timestamp->setTimeZone($timezone);
    $date_time = $timestamp->getDateTime();

    return $date_time;
}

/**
 * Throw an error iff trimmed string of <var>$s</var> is empty.
 *
 * @param string $s          The string to be checked.
 * @param string $error_code Error code to be thrown.
 *
 * @return string            Trimmed string, if not empty.
 */
function util_api_trim_check($s, $error_code, $item)
{
    // quickly check if $s is an empty string.
    if (mb_strlen($s) == 0) {
        cb_throw_error($error_code, null, ['param' => $item],
            ['param' => $item]);
    }

    // do trim then recheck
    require_once('fw/string_util.csp');
    $s = cb_trim($s);
    if (mb_strlen($s) == 0) {
        cb_throw_error($error_code, null, ['param' => $item],
            ['param' => $item]);
    }

    return $s;
}


