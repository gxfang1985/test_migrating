<?php

require_once('grn/controller.csp');


class GRN_Message_ControllerUtil extends GRN_ControllerUtil
{
    function __construct($page = null)
    {
        parent::__construct($page);
    }

    function isCurrentPage()
    {
        return $this->_page == cb_get_pagename();
    }

    function setSwitchOrderColumn($col = 'ctime')
    {
        $session = $this->getSession();
        $session->set('switch_order_column', $col);
    }

    function getSwitchOrderColumn()
    {
        $session = $this->getSession();
        $switch_order_column = $session->get('switch_order_column');
        if (is_null($switch_order_column)) {
            return 'last_mtime';
        } else {
            return $switch_order_column;
        }
    }

    /**
     * @access private
     */
    private $_order_param = null;

    function getListOrderParam($default = null)
    {
        if ( ! is_null($this->_order_param)) {
            return $this->_order_param;
        }

        global $G_INPUT;

        if ($this->isCurrentPage()) {
            if (array_key_exists('sort', $G_INPUT)) {
                $this->_order_param = $G_INPUT['sort'];
                if ( ! $this->_order_param) {
                    $this->_order_param = $default;
                }

                $session = $this->getSession();
                $session->set('current_sort', $this->_order_param);

                return $this->_order_param;
            }
        }

        $session = $this->getSession();
        $current_sort = $session->get('current_sort');
        if ($current_sort == null) {
            $current_sort = $default;
        }

        $this->_order_param = $current_sort;

        return $current_sort;
    }

    function setListOrderParam($arg)
    {
        $this->_order_param = $arg;

        $session = $this->getSession();
        $session->set('current_sort', $this->_order_param);
    }

    function getListOrderColumn($arg = null, $default = 'mtd')
    {
        $params = [
            'tlu' => [
                'param'  => 'tlu',
                'column' => 'subject',
                'order'  => false
            ],
            'tld' => ['param' => 'tld', 'column' => 'subject', 'order' => true],
            'ctu' => ['param' => 'ctu', 'column' => 'ctime', 'order' => false],
            'ctd' => ['param' => 'ctd', 'column' => 'ctime', 'order' => true],
            'mtu' => [
                'param'  => 'mtu',
                'column' => 'last_mtime',
                'order'  => false
            ],
            'mtd' => [
                'param'  => 'mtd',
                'column' => 'last_mtime',
                'order'  => true
            ],
            'cuu' => [
                'param'  => 'cuu',
                'column' => 'creator_name',
                'order'  => false
            ],
            'cud' => [
                'param'  => 'cud',
                'column' => 'creator_name',
                'order'  => true
            ],
            'anu' => [
                'param'  => 'anu',
                'column' => 'addressee_name',
                'order'  => false
            ],
            'and' => [
                'param'  => 'and',
                'column' => 'addressee_name',
                'order'  => true
            ],
        ];

        if (is_null($arg)) {
            $arg = $this->getListOrderParam($default);
        }

        if ( ! $arg || ! array_key_exists($arg, $params)) {
            $arg = 'mtd';
        }

        return $params[$arg];
    }

    /**
     *
     * @param string $folderId
     *
     * @return string
     */
    public function makeMessageSitePosition($folderId)
    {
        $folderLogic = new GRN_Message_FolderLogic();
        $ids = $folderLogic->getParentFoldersList($folderId);
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        $sitePosition = [];
        foreach ($ids as $id) {
            $folder = $folderLogic->getFolderInfo($user, $id);
            switch ($folder['folder_type']) {
                case GRN_MESSAGE_ROOTFOLDER:
                    $sitePosition[] = [
                        'name' => grn_get_page_display_name('message/index'),
                        'page' => 'message/index',
                        'sf'   => '0'
                    ];
                    break;
                case GRN_MESSAGE_RECEIVINGFOLDER:
                    $sitePosition[] = [
                        'name' => grn_get_page_display_name('message/inbox'),
                        'page' => 'message/index',
                        'cid'  => $id
                    ];
                    break;
                case GRN_MESSAGE_SENDINGFOLDER:
                    $sitePosition[] = [
                        'name' => grn_get_page_display_name('message/outbox'),
                        'page' => 'message/index',
                        'cid'  => $id
                    ];
                    break;
                case GRN_MESSAGE_DRAFTFOLDER:
                    $sitePosition[] = [
                        'name' => grn_get_page_display_name('message/draftbox'),
                        'page' => 'message/index',
                        'cid'  => $id
                    ];
                    break;
                case GRN_MESSAGE_GARBAGEFOLDER:
                    $sitePosition[] = [
                        'name' => grn_get_page_display_name('message/garbagebox'),
                        'page' => 'message/index',
                        'cid'  => $id
                    ];
                    break;
                default:
                    $sitePosition[] = [
                        'name' => $folder['folder_name'],
                        'page' => 'message/index',
                        'cid'  => $id
                    ];
            }
        }
        require_once('message/application.csp');
        $app = new GRN_Message_Application();
        $sitePosition[] = [
            'name' => grn_get_current_page_display_name(['app_name' => $app->getName()]),
        ];

        return $sitePosition;
    }
}

