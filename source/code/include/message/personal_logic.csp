<?php

/**
 * メッセージアプリケーション個人設定ロジック
 *
 * @author   Eiji TAEN   2005/07
 * @package  grn.message
 */

define('GRN_MESSAGE_PERSONAL_USEGARBAGEBOX', 'personal_usegarbagebox');
define('GRN_MESSAGE_PERSONAL_STOREDTERM', 'personal_storedterm');
define('GRN_MESSAGE_MESSAGEBOX_IS_LAST_PULLED', 'messagebox_is_last_pulled');
define('GRN_MESSAGE_NOTIFICATION_IS_LAST_PULLED',
    'notification_is_last_pulled');

/**
 * Message application personal logic class
 *
 * @package  grn.message
 */
class GRN_Message_PersonalLogic
{
    /**
     * message user profile
     *
     * @access   private
     */
    private $_profile = [];

    /**
     * filters table
     *
     * @access   private
     */
    private $_filters = null;

    /**
     * filter conditions table
     *
     * @access   private
     */
    private $_filter_conditions = null;

    /**
     * constructor
     */
    function __construct()
    {
        //
    }

    private static $_instance = null;

    /**
     *
     * @var CB_DatabaseConnection
     */
    private $databaseConnection = null;

    public function getDatabaseConnection()
    {
        if (is_null($this->databaseConnection)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->setDatabaseConnection($app_locator->getConnection('message'));
        }

        return $this->databaseConnection;
    }

    public function setDatabaseConnection($databaseConnection)
    {
        $this->databaseConnection = $databaseConnection;
    }

    /**
     * get instance
     *
     * @return   GRN_Message_PersonalLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * get message application user profile
     *
     * @param CB_User
     *
     * @return   CB_Profile
     */
    function _getUserProfile(CB_User $user)
    {
        assert('is_object( $user ) && is_a( $user, \'CB_User\' )');

        $user_id = $user->getOID();
        if ( ! isset($this->_profile[$user_id])) {
            require_once('message/application.csp');
            $application = new GRN_Message_Application();
            $this->_profile[$user_id] = $application->getUserProfile($user);
        }

        return $this->_profile[$user_id];
    }

    /**
     * get specified attribute
     *
     * @access   private
     *
     * @param    $user
     * @param    $name      string   attribute name
     * @param    $default   string   default value
     *
     * @return   string              specified attribute. if it doesn't exist,
     *                               return $default
     */
    function _getAttribute($user, $name, $default)
    {
        $profile = $this->_getUserProfile($user);

        if ( ! $profile->getAttribute($name, $value)) {
            return $default;
        }

        return $value;
    }

    /**
     * set specified attribute
     *
     * @access   private
     *
     * @param    $user    CB_User
     * @param    $name    string   attribute name
     * @param    $value   string   attribute value
     *
     * @return   boolean           TRUE: success setting attribute, FALSE: fail
     */
    function _setAttribute($user, $name, $value)
    {
        $profile = $this->_getUserProfile($user);

        if ( ! $profile->getAttribute($name, $dummy)) {
            if ( ! $profile->createAttribute($name, $value)) {
                return false;
            }
        } else {
            if ( ! $profile->updateAttribute($name, $value)) {
                return false;
            }
        }

        return true;
    }

    /**
     * get use garbage box attribute
     *
     * @param    object $user CB_User
     *
     * @return   string   1: use garbage box, 0: do not use it
     */
    function getUseGarbageBoxAttribute($user)
    {
        return $this->_getAttribute($user, GRN_MESSAGE_PERSONAL_USEGARBAGEBOX,
            1);
    }

    /**
     * set use garbage box attribute
     *
     * @param           $user           CB_User
     * @param    string $use_garbagebox 1: use garbage box, 0: do not use it
     *
     * @return   boolean                    TRUE: success setting attribute
     *                                      FALSE: fail to set attribute
     */
    function setUseGarbageBoxAttribute($user, $use_garbagebox)
    {
        return $this->_setAttribute($user, GRN_MESSAGE_PERSONAL_USEGARBAGEBOX,
            $use_garbagebox);
    }

    /**
     * get stored term attribute
     *
     * @param    object $user CB_User
     *
     * @return   string   stored term (1-10), default 5
     */
    function getStoredTermAttribute($user)
    {
        return $this->_getAttribute($user, GRN_MESSAGE_PERSONAL_STOREDTERM, 5);
    }

    /**
     * set stored term attribute
     *
     * @param           $user          CB_User
     * @param    string $stored_term   stored term (1-10)
     *
     * @return   boolean                 TRUE: success setting attribute
     *                                   FALSE: fail to set attribute
     */
    function setStoredTermAttribute($user, $stored_term)
    {
        return $this->_setAttribute($user, GRN_MESSAGE_PERSONAL_STOREDTERM,
            $stored_term);
    }

    /**
     * get attribute which means the user's messagebox is pulled after version up to Gr2.5.2 ( changed to push notification )
     *
     * @param    object $user CB_User
     *
     * @return   boolean          TRUE:  messagebox is pulled
     *                            FALSE: Not, or GRN_MESSAGE_MESSAGEBOX_IS_LAST_PULLED record does not exists on DB
     */
    function isLastPulledMessageAttribute($user)
    {
        return $this->_getAttribute($user,
            GRN_MESSAGE_MESSAGEBOX_IS_LAST_PULLED, false);
    }

    /**
     * set attribute which means the user's messagebox is pulled after version up to Gr2.5.2 ( changed to push notification )
     *
     * @param    object  $user           CB_User
     * @param    boolean $is_pulled      TRUE:  messagebox is pulled
     *                                   FALSE: Not
     *
     * @return   boolean                 TRUE: success setting attribute
     *                                   FALSE: fail to set attribute
     */
    function setLastPulledMessageAttribute($user, $is_pulled)
    {
        return $this->_setAttribute($user,
            GRN_MESSAGE_MESSAGEBOX_IS_LAST_PULLED, $is_pulled);
    }

    /**
     * get attribute which means the user's notifications is pulled after version up to Gr2.5.2 ( changed to push notification )
     *
     * @param    object $user CB_User
     *
     * @return   boolean          TRUE:  notifications is pulled
     *                            FALSE: Not, or GRN_MESSAGE_NOTIFICATION_IS_LAST_PULLED record does not exists on DB
     */
    function isLastPulledNotificationAttribute($user)
    {
        return $this->_getAttribute($user,
            GRN_MESSAGE_NOTIFICATION_IS_LAST_PULLED, false);
    }

    /**
     * set attribute which means the user's notification is pulled after version up to Gr2.5.2 ( changed to push notification )
     *
     * @param    object  $user           CB_User
     * @param    boolean $is_pulled      TRUE:  notification is pulled
     *                                   FALSE: Not
     *
     * @return   boolean                 TRUE: success setting attribute
     *                                   FALSE: fail to set attribute
     */
    function setLastPulledNotificationAttribute($user, $is_pulled)
    {
        return $this->_setAttribute($user,
            GRN_MESSAGE_NOTIFICATION_IS_LAST_PULLED, $is_pulled);
    }

    /**
     * get specified table
     *
     * @access   private
     *
     * @param    string $table_name table name
     *
     * @return   CB_TableInfo
     */
    function _getTable($table_name)
    {
        require_once('message/table.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');

        $ret = $manager->getTableInfo($table_name);

        return $ret;
    }

    /**
     * get filters table
     *
     * @return   CB_TableInfo
     */
    function getFiltersTable()
    {
        if (is_null($this->_filters)) {
            require_once('message/resources.csp');
            $this->_filters = $this->_getTable(GRN_MESSAGE_FILTERS);
        }

        return $this->_filters;
    }

    /**
     * get filter conditions table
     *
     * @return   CB_TableInfo
     */
    function getFilterConditionsTable()
    {
        if (is_null($this->_filter_conditions)) {
            require_once('message/resources.csp');
            $this->_filter_conditions
                = $this->_getTable(GRN_MESSAGE_FILTERCONDITIONS);
        }

        return $this->_filter_conditions;
    }

    /**
     * get all filters
     *
     * @param    object $user CB_User
     *
     * @return   array    array[]['filter_id']   => string:  filter id
     *                           ['filter_name'] => string:  filter name
     *                           ['available']   => boolean:
     *                                                 TRUE: filter available
     *                           ['folder_id']   => string:  folder id
     */
    function getAllFilters($user)
    {
        $filters_tbl = $this->getFiltersTable();

        $rowset = new CB_RowSet($filters_tbl);
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        $user_table_info = $this->_getTable('cb_user');
        $on = CB_DATABASE_TABLE_PREFIX
              . $filters_tbl->getTableName() . '.col_user = u._id '
              . 'AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN, 'u');
        $rowset->addOrderColumn('col_view_order');
        $rowset->addOrderColumn('_id');

        require_once('message/folder_logic.csp');
        $folder_logic = new GRN_Message_FolderLogic();

        $filters = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $filter = [];
            $filter['filter_id'] = $row->getOID();
            $filter['filter_name'] = $row->get('name');
            $folder = $row->get('folder');
            if ( ! is_null($folder)) {
                $filter['available'] = true;

                require_once('message/resources.csp');
                if ($folder->get('folder_type') == GRN_MESSAGE_GARBAGEFOLDER) {
                    require_once('message/personal_logic.csp');
                    $personal_logic = GRN_Message_PersonalLogic::getInstance();
                    if ($personal_logic->getUseGarbageBoxAttribute($user)
                        == '0'
                    ) {
                        $filter['available'] = false;
                    }
                }

                $filter['folder_id'] = $folder->getOID();
            } else {
                $filter['available'] = false;
                $filter['folder_id'] = '';
            }

            $filters[] = $filter;
        }

        return $filters;
    }

    /**
     * get specified folder
     * if specified folder doesn't exist, create new folder and return it's row
     *
     * @access   private
     *
     * @param    object $user        CB_User
     * @param    string $folder_id   folder id
     * @param    string $folder_name new folder name
     *
     * @return   object   CB_Row         folder row
     */
    function _getFolder($user, $folder_id, $folder_name)
    {
        require_once('message/resources.csp');
        $folders_tbl = $this->_getTable(GRN_MESSAGE_FOLDERS);
        $folder_row = $folders_tbl->getRow($folder_id);

        // create new folder
        if ( ! $folder_row
             || $folder_row->get('user')->getOID() != $user->getOID()
        ) {
            require_once('message/folder_logic.csp');
            $folder_logic = new GRN_Message_FolderLogic();
            $root_folder_id = $folder_logic->getSpecificFolderID($user,
                GRN_MESSAGE_ROOTFOLDER);

            $folder_row = $folder_logic->addFolder($user, $root_folder_id,
                $folder_name, null);
        } elseif (is_null($folder_row->get('user'))) {
            $folder_row = false;
        }

        return $folder_row;
    }

    /**
     * add new filter
     *
     * @param    object $user            CB_User
     * @param    string $filter_name     filter name
     * @param    string $and_or          a combination of conditions (1: and, 2: or )
     * @param    array  $conditions      filter conditions
     * @param    string $folder_id       folder id
     *                                   if folder id is '-1', create new folder
     *                                   which name is $filter_name on root
     *
     * conditions[]['data_class'] => data class
     *                               1: subject, 2: sender, 3: addressee
     *             ['string']     => matched string
     *             ['condition']  => matched condition
     *                               1: included, 2: excluded, 3: same as,
     *                               4: different from, 5: begin with
     */
    function addFilter($user, $filter_name, $and_or, $conditions, $folder_id)
    {
        $folder_row = $this->_getFolder($user, $folder_id, $filter_name);

        // insert filter data
        $filters_tbl = $this->getFiltersTable();
        $filter_row = $filters_tbl->newRow();
        $filter_row->set('user', $user);
        $filter_row->set('name', $filter_name);
        $filter_row->set('folder', $folder_row);
        $filter_row->set('and_or', $and_or);

        // insert filter condition data
        $conditions_tbl = $this->getFilterConditionsTable();
        foreach ($conditions as $condition) {
            $conditions_row = $conditions_tbl->newRow();
            $conditions_row->set('filter', $filter_row);
            $conditions_row->set('data_class', $condition['data_class']);
            $conditions_row->set('string', $condition['string']);
            $conditions_row->set('condition', $condition['condition']);
        }
    }

    /**
     * get filter data
     *
     * @param    object $user      CB_User
     * @param    string $filter_id filter id
     *
     * @return   mixed    return array object which has filter data.
     *                    if specified filter doesn't exist, return FALSE.
     *
     * return_array['name']       => filter name
     *             ['folder_id']  => folder name
     *             ['and_or']     => a combination of conditions (1: and, 2: or)
     *             ['view_order'] => view order
     *             ['conditions'][]['condition_id'] => filter condition id
     *                             ['class']        => data class
     *                                                 1: subject, 2: sender, 3: addressee
     *                             ['string']       => matched string
     *                             ['condition']    => matched condition
     *                                                 1: included, 2: excluded, 3: same as,
     *                                                 4: different from, 5: begin with
     */
    function getFilter($user, $filter_id)
    {
        // get filter data
        $filters_tbl = $this->getFiltersTable();
        $filter_row = $filters_tbl->getRow($filter_id);

        if ( ! $filter_row) {
            return false;
        }

        $filter_owner = $filter_row->get('user');
        if (is_null($filter_owner)) {
            return false;
        } else {
            if ($user->getOID() != $filter_owner->getOID()) {
                return false;
            }
        }

        $filter = [];
        $filter['name'] = $filter_row->get('name');
        $folder_row = $filter_row->get('folder');
        if ( ! is_null($folder_row)) {
            $filter['folder_id'] = $folder_row->getOID();
        } else {
            $filter['folder_id'] = '';
        }
        $filter['and_or'] = $filter_row->get('and_or');
        $filter['view_order'] = $filter_row->get('view_order');

        // get filter condition data
        $filter['conditions'] = $this->getFilterConditions($filter_id);

        return $filter;
    }

    /**
     * get filter data
     *
     * @param    string $filter_id filter id
     *
     * @return   array    filter condition data
     *
     * return_array[]['condition_id'] => filter condition id
     *               ['class']        => data class
     *                                   1: subject, 2: sender, 3: addressee
     *               ['string']       => matched string
     *               ['condition']    => matched condition
     *                                   1: included, 2: excluded, 3: same as,
     *                                   4: different from, 5: begin with
     */
    function getFilterConditions($filter_id)
    {
        $conditions = [];

        $conditions_tbl = $this->getFilterConditionsTable();
        $rowset = new CB_RowSet($conditions_tbl);
        $rowset->addCondition($rowset->queryf("col_filter = '@S'",
            $filter_id));
        $rowset->addOrderColumn("_id");
        while ( ! is_null($row = $rowset->iterate())) {
            $condition = [];
            $condition['condition_id'] = $row->getOID();
            $condition['class'] = $row->get('data_class');
            $condition['string'] = $row->get('string');
            $condition['condition'] = $row->get('condition');
            $conditions[] = $condition;
        }

        return $conditions;
    }

    /**
     * modify specified filter
     *
     * @param    object $user            CB_User
     * @param    string $filter_id       filter id
     * @param    string $filter_name     filter name
     * @param    string $and_or          a combination of conditions
     *                                   (1: and, 2: or )
     * @param    array  $conditions      filter conditions
     * @param    string $folder_id       folder id
     *                                   if folder id is '-1', create new folder
     *                                   which name is $filter_name on root
     *
     * @return   boolean   TRUE: success update filter data, FALSE: fail
     *
     * conditions[]['data_class']   => data class
     *                                 1: subject, 2: sender, 3: addressee
     *             ['string']       => matched string
     *             ['condition']    => matched condition
     *                                 1: included, 2: excluded, 3: same as,
     *                                 4: different from, 5: begin with
     */
    function modifyFilter(
        $user,
        $filter_id,
        $filter_name,
        $and_or,
        $conditions,
        $folder_id
    ) {
        // update filter data
        $filters_tbl = $this->getFiltersTable();
        $filter_row = $filters_tbl->getRow($filter_id);

        if ( ! $filter_row) {
            return false;
        }

        $filter_owner = $filter_row->get('user');
        if (is_null($filter_owner)) {
            return false;
        } else {
            if ($user->getOID() != $filter_owner->getOID()) {
                return false;
            }
        }

        $filter_row->set('name', $filter_name);
        $filter_row->set('folder',
            $this->_getFolder($user, $folder_id, $filter_name));
        $filter_row->set('and_or', $and_or);

        // delete all conditions
        $conditions_tbl = $this->getFilterConditionsTable();
        $rowset = new CB_RowSet($conditions_tbl);
        $rowset->addCondition($rowset->queryf("col_filter = '@S'",
            $filter_id));
        while ( ! is_null($row = $rowset->iterate())) {
            $row->delete();
        }

        // insert new conditions
        foreach ($conditions as $condition) {
            $conditions_row = $conditions_tbl->newRow();
            $conditions_row->set('filter', $filter_row);
            $conditions_row->set('data_class', $condition['data_class']);
            $conditions_row->set('string', $condition['string']);
            $conditions_row->set('condition', $condition['condition']);
        }

    }

    /**
     * get a filter name
     *
     * @param    string $filter_id filter id
     *
     * @return   mixed    filter name. if specified filter doesn't exist, return FALSE.
     */
    function getFilterName($filter_id)
    {
        $filter_row = $this->_getFilterRow($filter_id);

        if ( ! $filter_row) {
            return false;
        }

        return $filter_row->get('name');
    }

    /**
     * get specified filter name
     *
     * @param    object $user      CB_User
     * @param    string $filter_id filter id
     *
     * @return   mixed    filter name. if specified filter doesn't exists, return FALSE.
     */
    function getFilterName2($user, $filter_id)
    {
        $filter_row = $this->_getFilterRow($filter_id);

        if ( ! $filter_row) {
            return false;
        }

        $filter_owner = $filter_row->get('user');

        if (is_null($filter_owner)) {
            return false;
        }

        if ($user->getOID() != $filter_owner->getOID()) {
            return false;
        }

        return $filter_row->get('name');
    }

    /**
     * @access   private
     */
    function _getFilterRow($filter_id)
    {
        $filters_tbl = $this->getFiltersTable();
        $filter_row = $filters_tbl->getRow($filter_id);

        if ( ! $filter_row) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        return $filter_row;
    }

    /**
     * delete specified filter
     *
     * @param    string $filter_id filter id
     *
     * @return   boolean   TRUE: success deleting filter and conditions data
     */
    function deleteFilter($filter_id)
    {
        $filters_tbl = $this->getFiltersTable();
        $filter_row = $filters_tbl->getRow($filter_id);

        if ( ! $filter_row) {
            return false;
        }

        $filter_row->delete();

        return true;
    }

    /**
     * change filter order
     *
     * @param    array $filters array[filter id] => order
     *
     * @return   boolean            TRUE: success changing filter order
     */
    function changeFilterOrder($filters)
    {
        $filters_tbl = $this->getFiltersTable();

        foreach ($filters as $filter_id => $order) {
            $filter_row = $filters_tbl->getRow($filter_id);

            if ( ! $filter_row) {
                return false;
            }

            $filter_row->set('view_order', $order);
        }

        return true;
    }

    /**
     * delete messages automatically
     *
     * @param   object $user CB_User
     */
    function autoDeleteMessages($user)
    {
        // 1 day = 86400 sec
        $time = time() - 86400 * $this->getStoredTermAttribute($user);

        require_once('message/folder_logic.csp');
        $folder_logic = new GRN_Message_FolderLogic();
        $garbage_folder_id = $folder_logic->getSpecificFolderID($user,
            GRN_MESSAGE_GARBAGEFOLDER);

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');

        //$relations_tbl =& $manager->getTableInfo( GRN_MESSAGE_FOLDERMESSAGERELATIONS );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $relations_tbl = $manager->getTableInfo($table_name);

        $rowset = new CB_RowSet($relations_tbl);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_folder = '@S' AND col_mtime < '@S'",
            $user->getOID(), $garbage_folder_id, $time));
        $rowset->limit(0, 100);

        require_once('message/message_logic.csp');
        $message_logic = new GRN_Message_Logic();
        while ( ! is_null($relation = $rowset->iterate())) {
            $message = $relation->get('message');
            $message_logic->deleteMessages($user,
                [$relation->getOID() => $message->getOID()]
            );
        }
    }

}


