<?php
require_once("message/bean/GrnMessageAddressee.csp");
require_once("fw/bean/CbUser.csp");

class GrnMessageAddresseeDAO
{
    /**
     *
     * @param array  $inDataObj
     * @param string $inMessageId
     *
     * @return array
     */
    public function selectAddresseeAndUserByMessageIdSenderIsZero(
        $inDataObj,
        $inMessageId
    ) {
        /** @var $inDB CB_DatabaseConnection */
        $inDB = $inDataObj['db'];
        $escapedMessageId = $inDB->escape($inMessageId);
        $query = "SELECT "
                 . "a._id AS _id, a.col_addressee, a.col_addressee_name, a.col_delete_flag, a.col_dtime, a.col_finish_view_flag,"
                 . "a.col_follow, a.col_is_operator, a.col_is_sender, a.col_message, a.col_rtime, a.col_view_flag, a.col_view_order, "
                 . "u.col_display_name AS u_display_name, u.col_display_name_language AS u_display_name_language,"
                 . "u.col_email_address AS u_email_address, u.col_foreign_key AS u_foreign_key, u._id AS u_id, "
                 . "u.col_nickname AS u_nickname, u.col_password AS u_password, u.col_position AS u_position,"
                 . "u.col_telephone_number AS u_telephone_number, u.col_url AS u_url "
                 . " FROM "
                 . " tab_grn_message_addressees a LEFT JOIN tab_cb_user u ON a.col_addressee = u._id "
                 . " WHERE "
                 . " a.col_message = '{$escapedMessageId}' "
                 . " AND "
                 . " a.col_is_sender = 0 "
                 . " ORDER BY "
                 . " a._id;";

        $ret = [];

        $result = $inDB->query($query);
        while ($row = $inDB->fetch_assoc($result)) {
            $addressee = new GrnMessageAddressee($row);
            $user = new CbUser();
            $user->setDisplayName($row["u_display_name"]);
            $user->setDisplayNameLanguage($row["u_display_name_language"]);
            $user->setEmailAddress($row["u_email_address"]);
            $user->setForeignKey($row["u_foreign_key"]);
            $user->setId($row["u_id"]);
            $user->setNickname($row["u_nickname"]);
            $user->setPassword($row["u_password"]);
            $user->setPosition($row["u_position"]);
            $user->setTelephoneNumber($row["u_telephone_number"]);
            $user->setUrl($row["u_url"]);

            $ret[] = [$addressee, $user];
        }
        $inDB->free_result($result);

        return $ret;
    }

    /**
     * @return array
     */
    private function getAddresseesColumns()
    {
        return [
            "col_addressee",
            "col_addressee_name",
            "col_delete_flag",
            "col_dtime",
            "col_finish_view_flag",
            "col_is_operator",
            "col_is_sender",
            "col_view_order",
            "col_message",
            "col_view_flag"
        ];
    }

    /**
     * @return string
     */
    private function getValuesFormat()
    {
        return "("
               . "'@S'," //addressee
               . "'@S'," //addressee_name
               . "'@S'," //delete_flag
               . "'@S'," //dtime
               . "'@S'," //finish_view_flag
               . "'@S'," //is_operator
               . "'@S'," //is_sender
               . "'@S'," //message
               . "'@S'," //view_flag
               . "'@S'"  //view_order
               . ")";
    }

    /**
     * @param GRN_Message_Messages $message
     * @param array                $addressees []['addressee_id']    => 宛先ID
     *                                         ['addressee_order'] => 表示順序
     *                                         ['addressee_is_operator'] => 管理権限
     *                                         ['is_sender']       => 宛先に含まれて[いない/かった]差出人の場合は存在
     * @param array                $users      CB_Users[]
     * @param                      $updateAddressees
     */
    public function insertAddressees(
        GRN_Message_Messages $message,
        array $addressees,
        array $users,
        $updateAddressees
    ) {
        $db = cb_get_app_db("message");

        $valueStatement = [];
        foreach ($addressees as $eachAddressees) {

            if ( ! isset($users[$eachAddressees["addressee_id"]])) {
                continue;
            }

            if (isset($eachAddressees['is_sender']) && $updateAddressees) {
                $sender["user"] = $users[$eachAddressees["addressee_id"]];
                $sender["addressees"] = $eachAddressees;
                $this->updateSender($message, $sender["user"],
                    $sender["addressees"]);
                continue;
            }

            /** @var CB_User $user */
            $user = $users[$eachAddressees["addressee_id"]];
            $valueStatement[] = $db->format(
                $this->getValuesFormat(),
                [
                    $user->getOID(),
                    $user->get("display_name"),
                    0,
                    0,
                    0,
                    $eachAddressees['addressee_is_operator'],
                    isset($eachAddressees['is_sender']) ? 1 : 0,
                    $eachAddressees['addressee_order'],
                    $message->getOID(),
                    0
                ]
            );
        }

        if (empty($valueStatement)) {
            return;
        }


        $query
            = sprintf("INSERT INTO tab_grn_message_addressees (%s) VALUES %s",
            implode($this->getAddresseesColumns(), ","),
            implode($valueStatement, ","));
        $db->query($query);

    }

    /**
     * @param GRN_Message_Messages $message
     * @param CB_User              $user
     * @param array                $sender
     */
    private function updateSender(
        GRN_Message_Messages $message,
        CB_User $user,
        array $sender
    ) {
        $db = cb_get_app_db("message");
        $query
            = "INSERT IGNORE INTO tab_grn_message_addressees (%s) VALUES %s ";

        $values = $db->format(
            $this->getValuesFormat(),
            [
                $user->getOID(),
                $user->get("display_name"),
                0,
                0,
                0,
                $sender['addressee_is_operator'],
                0,
                $sender['addressee_order'],
                $message->getOID(),
                0
            ]
        );

        $query = sprintf($query, implode($this->getAddresseesColumns(), ","),
            $values);
        $db->query($query);
        $db->query(
            $db->format("DELETE FROM tab_grn_message_addressees WHERE col_message='@S' AND col_addressee='@S' AND col_is_sender='1'",
                [
                    $message->getOID(),
                    $user->getOID()
                ])
        );
    }

    /**
     * @param GRN_Message_Messages $message
     * @param array                $userIds
     */
    public function setDeleteFlag(GRN_Message_Messages $message, array $userIds)
    {
        if (empty($userIds)) {
            return;
        }
        $db = cb_get_app_db("message");
        $db->query(
            $db->format("UPDATE tab_grn_message_addressees SET col_delete_flag='1' "
                        . "WHERE col_message='@S' AND col_addressee IN (@A)",
                [
                    $message->getOID(),
                    $userIds
                ]
            )
        );
    }


    /**
     * Reset message acknowledge
     *
     * @param int   $user_id     User ID
     * @param array $message_ids Message IDs
     */
    public function resetMessageAcknowledgment(int $user_id, array $message_ids = [])
    {
        if ( ! $message_ids || ! $user_id) {
            return;
        }

        $db = cb_get_app_db("message");
        $query = $db->format("UPDATE tab_grn_message_addressees SET col_rtime=NULL, col_view_flag=0 "
                             . "WHERE col_addressee='@S' AND col_message IN (@A)",
            [
                $user_id,
                $message_ids
            ]
        );
        $db->query($query);
    }

}
