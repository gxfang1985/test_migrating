<?php

/**
 * メッセージアプリケーション
 *
 * @author   Eiji TAEN
 * @date     2005/04
 * @package  grn.message
 */

use grn\favour\data\bean\FavourNotify;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\favour\service\FavourService;
use grn\favour\exception\FavourErrorCode;
use grn\favour\exception\FavourException;

require_once('grn/application.csp');
require_once('message/resources.csp');
require_once('message/table.csp');

/**
 * メッセージアプリケーションクラス
 *
 * @package  grn.message
 */
class GRN_Message_Application extends GRN_ApplicationBase
{
    /**
     * application_id
     */
    const GRN_MESSAGE_APPLICATION_ID = "message";

    /**
     * module_id
     */
    const GRN_MESSAGE_MODULE_ID = "grn.message";

    /**
     * sub_module_id
     */
    const GRN_MESSAGE_SUB_MODULE_ID = "";

    /**
     * favour type
     */
    const FAVOUR_MESSAGE_BODY = 'message_body';
    const FAVOUR_MESSAGE_COMMENT = 'message_comment';

    /**
     * acknowlegement
     */
    const GRN_MESSAGE_NEED_CONFIRM = 1;
    const GRN_MESSAGE_CONFIRMED = 1;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        parent::__construct(GRN_MESSAGE_APPID);
    }

    /**
     * 通知の既読処理
     *
     * @param CB_User $user
     * @param         $module_id
     * @param         $unique_id
     * @param         $org_data
     * @param         $timestamp
     *
     * @return bool
     */
    function confirmApplicationData(
        $user,
        $module_id,
        $unique_id,
        $org_data,
        $timestamp
    ) {
        $dao = new \grn\message\dao\GrnMessageFolderMessageRelationsDAO();

        return $dao->updateLastViewTimeToNow($user, $unique_id);
    }

    /**
     * 通知データのページ情報の取得
     * 通知アプリから呼び出される
     *
     * @param  object $user      対象となるユーザー
     * @param  string $app_id    アプリケーションID
     * @param  string $unique_id 通知元データのユニークID
     * @param  array  $org_data  通知元データのオリジナルデータ配列
     * @param  string $status    通知元データの状態（'unread', 'update', 'confirmed'）
     * @param  string $action_id 通知元データのアクションID（'create', 'update'）
     * @param  string $sub_module_id
     *
     * @return mixed    ページ情報の配列
     *                  'subject_page'  => 標題用ページ名（ex:'message/view'）
     *                  'abstract_page' => 内容用ページ名（ex:'message/download'）
     *                  'subject_icon'  => 標題用アイコン名（ex:'message20'）
     *                  'abstract_icon' => 内容用アイコン名（ex:'file20'）
     *                  'url_params'    => URLに積むパラメータの配列（標題、内容共通）
     */
    function &getNotificationPageInfo(
        $user,
        $app_id,
        $unique_id,
        & $org_data,
        $status,
        $action_id,
        $sub_module_id
    ) {
        $page_info = [];

        // icon
        if ($action_id === 'update' && $status === "update") {
            $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                GRN_NOTIFICATION_MESSAGE_ICON_CODE_FOLLOW);
        } else {
            $page_info['subject_icon'] = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                GRN_NOTIFICATION_MESSAGE_ICON_CODE_ADD);
        }

        $url_params = [];
        if (is_array($org_data)) {
            if (array_key_exists('file', $org_data)) {
                if ($org_data['file'] > 0) {
                    if ($action_id === 'update' && $status === "update") {
                        $page_info['subject_icon']
                            = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                            GRN_NOTIFICATION_MESSAGE_CLIPFILE_ICON_CODE_FOLLOW);
                    } else {
                        $page_info['subject_icon']
                            = cb_msg(GRN_NOTIFICATION_MODULE_ID,
                            GRN_NOTIFICATION_MESSAGE_CLIPFILE_ICON_CODE_ADD);
                    }
                }
                unset($org_data['file']);
            }

            if (array_key_exists('follow_id', $org_data)) {
                $page_info['subject_fragment'] = 'follow';
            }

            foreach ($org_data as $key => $value) {
                if ($key != 'follow_id') {
                    $url_params[$key] = $value;
                }
            }
        }

        $page_info['subject_page'] = 'message/view';
        $page_info['url_params'] = $url_params;

        return $page_info;
    }

    /**
     * @param $user
     * @param $app_id
     * @param $unique_id
     * @param $org_data
     * @param $status
     *
     * @return array
     */
    function &getNotificationPageInfo_cellular(
        $user,
        $app_id,
        $unique_id,
        & $org_data,
        $status
    ) {
        $url_params = [];
        if (is_array($org_data)) {
            if (array_key_exists('file', $org_data)) {
                unset($org_data['file']);
            }

            foreach ($org_data as $key => $value) {
                $url_params[$key] = $value;
            }
        }

        $page_info = [];
        $page_info['subject_page'] = 'message/cellular/look1';
        $page_info['url_params'] = $url_params;

        return $page_info;
    }

    /**
     * ケータイトップページ通知表示用
     *
     * @param $user
     * @param $app_id
     *
     * @return array
     */
    function getNotificationIndexPageInfo_cellular($user, $app_id)
    {
        $info = [];
        $info['caption_module'] = 'grn.message.cellular';
        $info['caption_key'] = 'index';
        $info['icon'] = 'memo';

        return $info;
    }

    /**
     * system configuration
     *
     * @return array|mixed
     */
    function getSystemConfigArray()
    {
        $ret = [
            'message_config' =>
                [
                    [
                        'page' => 'message/system/common_set',
                        'icon' => 'general32'
                    ],
                    [
                        'page' => 'message/system/delete_all',
                        'icon' => 'deleteall32'
                    ],
                    [
                        'page' => 'message/system/inspection_search',
                        'icon' => 'msg32'
                    ],
                ],
        ];

        return $ret;
    }

    /**
     * personal configuration
     *
     * @return array|mixed
     */
    function getPersonalConfigArray()
    {
        return [
            'message_config' =>
                [
                    [
                        'page' => 'message/personal/folder_subscribe',
                        'icon' => 'notifyfolder32'
                    ],
                    [
                        'page' => 'message/personal/filter',
                        'icon' => 'msgfilter32'
                    ],
                    [
                        'page' => 'message/personal/trash',
                        'icon' => 'trashbox32'
                    ],
                ],
        ];
    }

    /**
     * アプリケーションポートレットリストの取得
     *
     * @return array    このアプリケーションが持つアプリケーションポートレット情報を返します
     */
    function &getPortletList()
    {
        require_once('fw/i18n.csp');
        $portlet_list = [];

        // メッセージポートレットの定義
        $message_portlet = [
            'name'             => cb_msg(GRN_MESSAGE_MODULEID,
                'portlet_view_message'),
            //名前
            'type'             => 'grn.message.message',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'message/portlet/set_message.csp',
            //設定用テンプレート名
            'command_template' => 'message/portlet/command_set_message.csp',
            //設定用テンプレート名
            'view_template'    => 'message/portlet/view_message.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $message_portlet;

        // 未確認メッセージ一覧ポートレットの定義
        $unconfirmed_portlet = [
            'name'             => cb_msg(GRN_MESSAGE_MODULEID,
                'portlet_view_unconfirmed'),
            //名前
            'type'             => 'grn.message.unconfirmed',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'message/portlet/set_unconfirmed.csp',
            //設定用テンプレート名
            'command_template' => 'message/portlet/command_set_unconfirmed.csp',
            //設定用テンプレート名
            'view_template'    => 'message/portlet/view_unconfirmed.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $unconfirmed_portlet;

        // 閲覧確認ポートレットの定義
        $read_status_portlet = [
            'name'             => cb_msg(GRN_MESSAGE_MODULEID,
                'portlet_read_status'),
            //名前
            'type'             => 'grn.message.read_status',
            //種別
            'version'          => '1.0',
            //バージョン
            'set_template'     => 'message/portlet/set_read_status.csp',
            //設定用テンプレート名
            'command_template' => 'message/portlet/command_set_read_status.csp',
            //設定用テンプレート名
            'view_template'    => 'message/portlet/read_status.csp'
            //表示用テンプレート名
        ];
        $portlet_list[] = $read_status_portlet;

        return $portlet_list;
    }

    /**
     * アプリケーションのデータをクリーンアップする
     */
    function cleanup()
    {
        $this->_cleanup_garbage_message();
        $this->_cleanup_garbage_draft_message();
    }

    /**
     * 宛先ユーザーが誰もいなくて作成者が消えた社内メールとその添付ファイルを削除
     *
     * @access private
     */
    function _cleanup_garbage_message()
    {
        global $G_container_base;
        $logger = $G_container_base->getInstance('cleanup_logger');

        $target_mids = $this->_search_garbage_message();
        if (is_array($target_mids) && count($target_mids) > 0) {
            $app_locator = GRN_ApplicationLocator::instance();
            $manager = $app_locator->getTableManager('message');

            require_once('message/file.csp');
            $tab_message = $manager->getTableInfo('GRN_Message_Messages');
            $tab_attachedfile
                = $manager->getTableInfo('GRN_Message_AttachedFiles');
            $tab_file = $manager->getTableInfo('GRN_Message_File');

            $rowset = new CB_RowSet($tab_file, 'file');
            $rowset->addJoin($tab_attachedfile, 'file._id = attach.col_file',
                CB_DATABASE_LEFT_JOIN, 'attach');
            $rowset->addJoin($tab_message, 'attach.col_message = message._id',
                CB_DATABASE_LEFT_JOIN, 'message');
            $condition = $rowset->queryf("attach.col_message IN (@A)",
                $target_mids);
            $rowset->addCondition($condition);

            while ( ! is_null($file = $rowset->iterate())) {
                $file_id = $file->getOID();
                $logger->log('[delete] message file(fid:' . $file_id . ')');
                $file->delete();
            }
            $rowset->destroy();

            $rowset = new CB_RowSet($tab_message, 'message');
            $condition = '_id IN (' . implode(',', $target_mids) . ')';
            $rowset->addCondition($condition);
            $rowset->deleteAllMatched();

            foreach ($target_mids as $mid) {
                $logger->log('[delete] message(mid:' . $mid . ')');
            }

            unset($tab_message, $tab_attachedfile, $tab_file, $rowset, $manager, $app_locator, $logger);
        }
    }

    /**
     * クリーンアップ対象となる社内メールのIDを取得する
     *
     * @access private
     */
    function _search_garbage_message()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');

        require_once('message/file.csp');
        $tab_message = $manager->getTableInfo('GRN_Message_Messages');
        $tab_addressee = $manager->getTableInfo('GRN_Message_Addressees');

        $target_mids = [];

        // 削除対象の社内メールを検索
        $mids = [];
        $rowset = new CB_RowSet($tab_message, 'message');
        $rowset->addCondition('message.col_creator IS NULL AND message.col_original_message IS NULL');
        while ( ! is_null($message = $rowset->iterate())) {
            $mids[] = $message->getOID();
        }
        $rowset->destroy();

        if (is_array($mids) && count($mids) > 0) {
            // 削除対象から除外する社内メールを検索
            $not_deleted_mids = [];
            $rowset = new CB_RowSet($tab_addressee, 'addressee');
            $condition
                = $rowset->queryf("col_message IN (@A) AND col_addressee IS NOT NULL",
                $mids);
            $rowset->addCondition($condition);

            while ( ! is_null($have_addressee = $rowset->iterate())) {
                $message = $have_addressee->get('message');
                $not_deleted_mids[] = $message->getOID();
            }
            $rowset->destroy();

            $target_mids = array_diff($mids, $not_deleted_mids);
        }

        unset($tab_addressee, $tab_message, $rowset, $manager, $app_locator);

        return $target_mids;
    }

    /**
     * 削除されたユーザーの社内メール下書きとその添付ファイルを削除
     *
     * @access private
     */
    function _cleanup_garbage_draft_message()
    {
        global $G_container_base;
        $logger = $G_container_base->getInstance('cleanup_logger');

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');

        require_once('message/file.csp');
        $tab_message = $manager->getTableInfo('GRN_Message_Messages');
        $tab_addressee = $manager->getTableInfo('GRN_Message_Addressees');
        $tab_attachedfile = $manager->getTableInfo('GRN_Message_AttachedFiles');
        $tab_file = $manager->getTableInfo('GRN_Message_File');

        $rowset = new CB_RowSet($tab_file, 'file');
        $rowset->addJoin($tab_attachedfile, 'file._id = attach.col_file',
            CB_DATABASE_LEFT_JOIN, 'attach');
        $rowset->addJoin($tab_message, 'attach.col_message = message._id',
            CB_DATABASE_LEFT_JOIN, 'message');

        $condition
            = $rowset->queryf("message.col_creator IS NULL AND message.col_message_type = '@S'",
            GRN_MESSAGE_TYPE_DRAFT);
        $rowset->addCondition($condition);

        while ( ! is_null($file = $rowset->iterate())) {
            $file_id = $file->getOID();
            $logger->log('[delete] message file(fid:' . $file_id . ')');
            $file->delete();
        }
        $rowset->destroy();
        unset($rowset);

        $rowset = new CB_RowSet($tab_message, 'message');
        $rowset->addJoin($tab_addressee, 'message._id = addressee.col_message',
            CB_DATABASE_LEFT_JOIN, 'addressee');
        $rowset->addCondition($condition);

        while ( ! is_null($message = $rowset->iterate())) {
            $message_id = $message->getOID();
            $logger->log('[delete] message(mid:' . $message_id . ')');
            $message->delete();
        }
        $rowset->destroy();

        unset($tab_addressee, $tab_message, $tab_attachedfile, $tab_file, $rowset, $manager, $app_locator, $logger);
    }

    /**
     * Generate star data
     *
     * @param       $user CB_User
     * @param array $params
     *
     * @return GRN_Star_Data
     */
    function getStarData($user, $params = [])
    {
        require_once('message/message_logic.csp');
        $logic = new GRN_Message_Logic();
        $ret = $logic->getStarData($user, $params);

        return $ret;
    }

    /**
     * @return array
     */
    public function getFavourType()
    {
        return [self::FAVOUR_MESSAGE_BODY, self::FAVOUR_MESSAGE_COMMENT];
    }

    /**
     * @return array
     */
    public function getSubModuleId()
    {
        return [self::GRN_MESSAGE_SUB_MODULE_ID];
    }

    /**
     * @param string $login_id
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return null
     * @throws GrnDataNotFoundException
     * @throws GrnInvalidPermissionException
     * @throws FavourException
     */
    public function checkLoginUserAuthorityForFavour(
        $login_id,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $favour_service = new FavourService();
        if ( ! $favour_service->isAppAllowedRespond('message')) {
            throw new FavourException(FavourErrorCode::GRN_FAVOUR_NOT_ALLOW_APP,
                FavourException::getArrayForErrMsg(),
                FavourException::getArrayForErrMsg());
        }

        $message_id = cb_at($params, 'mid');
        $relation_id = cb_at($params, 'rid');
        $follow_id = cb_at($params, 'follow_id');
        $is_system = cb_at($params, 'is_system');

        require_once('message/message_logic.csp');
        $message_logic = new GRN_Message_Logic();

        $login = cb_lwc_uum()->getUser($login_id);

        if (self::FAVOUR_MESSAGE_BODY == $type) {
            if ($is_system && $this->isMessageAdmin()) {
                require_once('message/inspection.csp');
                $message = grn_message_inspection_get_message_info($value);
            } else {
                $message = $message_logic->hasPrivilege($login, $value,
                    $relation_id);
                if ($message && $this->isTrashFolder($login, $message['cid'])) {
                    $this->thrownMessageDoNotAllowLike();
                }
            }

            if ( ! $message) {
                $this->thrownMessageNotFoundError();
            }
        } elseif (self::FAVOUR_MESSAGE_COMMENT == $type) {
            if ($is_system && $this->isMessageAdmin()) {
                require_once('message/inspection.csp');
                $message = grn_message_inspection_get_message_byFID($message_id,
                    $follow_id, 1);
            } else {
                $message_info = $message_logic->hasPrivilege($login,
                    $message_id, $relation_id);
                if ($message_info) {
                    $relation_id = $message_info['rid'];
                }

                $message = $message_logic->getMessageByFID($login, $relation_id,
                    $message_id, $follow_id, 1);
                if ($message
                    && $this->isTrashFolder($login, $message['folder_id'])
                ) {
                    $this->thrownMessageDoNotAllowLike();
                }
            }

            if ( ! $message) {
                $this->thrownMessageNotFoundError();
            }

            if ( ! array_key_exists($value, $message['follows'])) {
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_FOLLOW_NOT_FOUND);
            }
        } else {
            throw new GrnInvalidPermissionException(ErrorCode::GRN_UNEXPECTED_ERROR);
        }
    }

    /**
     * @param $type
     * @param $value
     * @param $org_data
     * @param $sub_module_id
     *
     * @return array
     */
    public function getFavourNotifyPageInfo(
        $type,
        $value,
        $org_data,
        $sub_module_id
    ) {
        $page_info = [];

        $page_info['subject_page'] = 'message/view';
        if ($type == self::FAVOUR_MESSAGE_BODY) {
            $page_info['url_params'] = [
                'cid' => $org_data['cid'],
                'rid' => $org_data['rid'],
                'mid' => $value
            ];
        } elseif ($type == self::FAVOUR_MESSAGE_COMMENT) {
            $page_info['url_params'] = [
                'cid'       => $org_data['cid'],
                'mid'       => $org_data['mid'],
                'rid'       => $org_data['rid'],
                'follow_id' => $org_data['follow_id']
            ];
            $page_info['subject_fragment'] = 'follow';
        }

        $page_info['subject_icon'] = 'icon_message_grn';
        $page_info['subject_icon_label'] = cb_msg(GRN_MESSAGE_MODULEID,
            'application_name');

        return $page_info;
    }

    /**
     * @param string $loginId
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return bool
     */
    public function checkNotifyUserAuthorityForFavour(
        $loginId,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $message_id = cb_at($params, 'mid');
        $relation_id = cb_at($params, 'rid');

        require_once('message/message_logic.csp');
        $message_logic = new GRN_Message_Logic();

        $login = cb_lwc_uum()->getUser($loginId);

        if (self::FAVOUR_MESSAGE_BODY == $type) {
            $message_info = $message_logic->hasPrivilege($login, $message_id,
                $relation_id);
            if ($message_info) {
                $relation_id = $message_info['rid'];
            }

            $message = $message_logic->getMessageInfo($login, $relation_id,
                $message_id);
            $creator_id = $message['creator_id'];
        } elseif (self::FAVOUR_MESSAGE_COMMENT == $type) {
            $follow = $message_logic->getFollowDetail($message_id, $value);
            $creator_id = $follow['creator_id'];
        } else {
            return false;
        }

        if ( ! $creator_id) {
            return false;
        }

        $creator_user = cb_lwc_uum()->getUser($creator_id);
        $message_info = $message_logic->hasPrivilege($creator_user, $message_id,
            $relation_id);
        if ($message_info) {
            if ($this->isTrashFolder($creator_user, $message_info['cid'])) {
                return false;
            }
        } else {
            return false;
        }

        return true;
    }

    /**
     * Check the authority and get notification data for favour.
     *
     * @param string $loginId
     * @param string $type
     * @param string $value
     * @param array  $params
     * @param string $sub_module
     *
     * @return \grn\favour\data\bean\FavourNotify
     */
    public function getNotifyDataForFavour(
        $loginId,
        $type,
        $value,
        array $params = [],
        $sub_module = ''
    ) {
        $category_id = cb_at($params, 'cid');
        $message_id = cb_at($params, 'mid');
        $relation_id = cb_at($params, 'rid');

        $data = new FavourNotify();

        require_once('message/message_logic.csp');
        $message_logic = new GRN_Message_Logic();

        $login = cb_lwc_uum()->getUser($loginId);

        $message_info = $message_logic->hasPrivilege($login, $message_id,
            $relation_id);
        if ($message_info) {
            $relation_id = $message_info['rid'];
        }

        if (self::FAVOUR_MESSAGE_BODY == $type) {
            $message = $message_logic->getMessageInfo($login, $relation_id,
                $message_id);
            $creator_id = $message['creator_id'];
            if (empty($creator_id)) {
                $creator_id = $message_logic->getMessageCreatorId($message_id,
                    true);
            }

            $data->setAbstract($message['subject']);
            $data->setUser($creator_id);
            $data->setOrgData([
                'cid' => $category_id,
                'rid' => $relation_id
            ]);
        } elseif (self::FAVOUR_MESSAGE_COMMENT == $type) {
            $follow = $message_logic->getFollowDetail($message_id, $value);
            $creator_id = $follow['creator_id'];
            if (empty($creator_id)) {
                $creator_id = $message_logic->getCommentCreatorId($value);
            }

            require_once('grn/controller.csp');
            $data->setAbstract((isset($follow['format_type'])
                                && $follow['format_type'] != 0)
                ? grn_strip_tags($follow['data']) : $follow['data']);
            $data->setUser($creator_id);
            $data->setOrgData([
                'cid'       => $category_id,
                'mid'       => $message_id,
                'rid'       => $relation_id,
                'follow_id' => $follow['id']
            ]);
        }

        return $data;
    }

    public function isMessageAdmin()
    {
        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();
        $logged_in_user = cb_get_login_user();
        if ($system->adminApplication(self::GRN_MESSAGE_APPLICATION_ID,
            $logged_in_user)
        ) {
            return true;
        }

        return false;
    }

    public function thrownMessageNotFoundError()
    {
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();

        /** @var GRN_Message_Application $message_app */
        $message_app
            = $app_locator->getInstance(self::GRN_MESSAGE_APPLICATION_ID);
        $message_name = $message_app->getName();
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
            ['app_name' => $message_name],
            ['app_name' => $message_name],
            ['app_name' => $message_name]);
    }

    public function thrownMessageDoNotAllowLike()
    {
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();

        /** @var GRN_Message_Application $app */
        $app = $app_locator->getInstance('message');
        $G_message_name = $app->getName();
        /** @var \grn\favour\Application $app */
        $app = $app_locator->getInstance('favour');
        $G_favour_name = $app->getName();

        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_DO_NOT_ALLOW_LIKE,
            ['favour_name' => $G_favour_name],
            ['message_name' => $G_message_name],
            ['message_name' => $G_message_name]);
    }

    public function isTrashFolder($user, $folder_id)
    {
        require_once('message/folder_logic.csp');
        $folder_logic = new GRN_Message_FolderLogic();

        $folder_info = $folder_logic->getFolderInfo($user, $folder_id);
        if ($folder_info['folder_type'] == GRN_MESSAGE_GARBAGEFOLDER) {
            return true;
        }

        return false;
    }
}


