<?php

namespace grn\message\screen\mobile;

use grn\grn\GrnGenericScreenBase;
use grn\grn\Validate;
use grn\grn\mobile\MobileDisplayUserList;
use grn\grn\GrnException;

require_once('message/resources.csp');
require_once('message/error_code.csp');

class MobileMessageScreenBase extends GrnGenericScreenBase
{
    const ARG_CATEGORY_ID = 'cid';
    const ARG_RELATION_ID = 'rid';
    const ARG_MESSAGE_ID = 'mid';
    const ARG_FILE_ID = 'rfid';
    const ARG_FOLLOW_ID = 'follow_id';
    const ARG_NOTIFY_ID = 'nid';
    const ARG_NOTIFY_HISTORY_ID = 'nhid';
    const ARG_NAVIGATION_SP = 'sp';
    const ARG_VIEW_COUNT = 20;

    private $_categoryId;
    private $_relationId;
    private $_messageId;
    private $_fileId;
    private $_followId;
    private $_messageObject;
    private $_message_app;
    private $_message_name;
    private $_folderInfo;
    private $_sp;

    public function __construct($input)
    {
        parent::__construct($input);

        $this->initMobileView();
        $this->setMobileApplicationId(GRN_MESSAGE_APPID);
    }

    public function getCategoryId()
    {
        return $this->_categoryId;
    }

    public function setCategoryId($value)
    {
        $this->_categoryId = $value;
    }

    public function getRelationId()
    {
        return $this->_relationId;
    }

    protected function setRelationId($value)
    {
        $this->_relationId = $value;
    }

    public function getMessageId()
    {
        return $this->_messageId;
    }

    protected function setMessageId($value)
    {
        $this->_messageId = $value;
    }

    public function getFileId()
    {
        return $this->_fileId;
    }

    protected function setFileId($value)
    {
        $this->_fileId = $value;
    }

    public function getFollowId()
    {
        return $this->_followId;
    }

    protected function setFollowId($value)
    {
        $this->_followId = $value;
    }

    public function getMessageObject()
    {
        return $this->_messageObject;
    }

    protected function setMessageObject($value)
    {
        $this->_messageObject = $value;
    }

    public function getSp()
    {
        return $this->_sp;
    }

    protected function setSp($value)
    {
        $this->_sp = $value;
    }

    /**
     * Check argument of $G_INPUT
     *
     * @param  array $paraArr ( cid, rid, mid... )
     * @param  array $input
     *
     * @throws E_GRN_MESSAGE_XXX
     */
    protected function checkArgFromInput(array $paraArr, array $input)
    {
        foreach ($paraArr as $para) {
            switch ($para) {
                case self::ARG_CATEGORY_ID:
                    if (Validate::isNumber(@$input[self::ARG_CATEGORY_ID])) {
                        $this->setCategoryId($input[self::ARG_CATEGORY_ID]);
                    } else {
                        cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
                    }
                    break;
                case self::ARG_RELATION_ID:
                    if (Validate::isNumber(@$input[self::ARG_RELATION_ID])) {
                        $this->setRelationId($input[self::ARG_RELATION_ID]);
                    }
                    break;
                case self::ARG_MESSAGE_ID:
                    if (Validate::isNumber(@$input[self::ARG_MESSAGE_ID])) {
                        $this->setMessageId($input[self::ARG_MESSAGE_ID]);
                    } else {
                        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                            ['app_name' => $this->getMessageName()],
                            ['app_name' => $this->getMessageName()],
                            ['app_name' => $this->getMessageName()]);
                    }
                    break;
                case self::ARG_FILE_ID:
                    if (Validate::isNumber(@$input[self::ARG_FILE_ID])) {
                        $this->setFileId($input[self::ARG_FILE_ID]);
                    } else {
                        cb_throw_error(E_GRN_MESSAGE_FILE_NOT_FOUND,
                            null,
                            ['app_name' => $this->getMessageName()]);
                    }
                    break;
                case self::ARG_FOLLOW_ID:
                    if (Validate::isNumber(@$input[self::ARG_FOLLOW_ID])) {
                        $this->setFollowId($input[self::ARG_FOLLOW_ID]);
                    } else {
                        cb_throw_error(E_GRN_MESSAGE_FOLLOW_NOT_FOUND);
                    }
                    break;
                case self::ARG_NAVIGATION_SP:

                    if (Validate::isNumber(@$input[self::ARG_NAVIGATION_SP])) {
                        if ((int)$input[self::ARG_NAVIGATION_SP] < 0) {
                            $this->setSp(0);
                        } else {
                            $this->setSp((int)$input[self::ARG_NAVIGATION_SP]);
                        }
                    } else {
                        $this->setSp(0);
                    }
                    break;
            }
        }

        return;
    }

    /**
     * Get User info
     *
     * @param: array users ID (1,2,3...)
     *
     * @return array user info
     */
    protected function getDisplayInfo(array $uids)
    {
        $input = $this->getInput();
        $limit = self::MORE_VIEW_COUNT;
        $offset = $this->getArrayValue(self::ARG_NAVIGATION_SP, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        $loop_times = count($uids) >= ($limit + $offset) ? ($limit + $offset)
            : count($uids);
        $display_uids = array_slice($uids, 0, $loop_times);
        $this->setNewOffset($offset, $limit, count($uids));
        //user info
        $display_user_info = [];
        if (count($display_uids) > 0) {
            $display_user_info
                = MobileDisplayUserList::constructUserList($display_uids);
        }

        return $display_user_info;
    }

    /**
     * Get Message for view
     *
     * @return array $message
     */
    protected function getMessageForView(
        $offset = 0,
        $limit = self::MORE_VIEW_COUNT,
        $from_history = false,
        $force_get_again = false
    ) {
        if ( ! $force_get_again) {
            $message = $this->getMessageObject();
            if (Validate::isNotNull($message)) {
                return $message;
            }
        }
        $login = cb_get_login_user();
        $input = $this->getInput();
        $this->checkArgFromInput([self::ARG_RELATION_ID, self::ARG_MESSAGE_ID],
            $input);
        $message_id = $this->getMessageId();
        $relation_id = $this->getRelationId();

        // Check View right.
        require_once('message/message_logic.csp');
        $message_logic = new \GRN_Message_Logic();
        $my_message = $message_logic->hasPrivilege($login, $message_id,
            $relation_id);
        if ($my_message === false) {
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()]);
        }
        // Reset 'cid', 'rid' .
        $this->setCategoryId($my_message['cid']);
        $this->setRelationId($my_message['rid']);
        $relation_id = $my_message['rid'];
        $message = $message_logic->getMessage($login, $relation_id,
            $message_id, $offset, $limit, $from_history, true);
        //cache
        $this->setMessageObject($message);

        return $message;
    }

    protected function getFolderInfo($category_id)
    {
        if (is_null($this->_folderInfo)) {
            $login = cb_get_login_user();
            require_once('message/folder_logic.csp');
            $folder_logic = new \GRN_Message_FolderLogic();
            $this->_folderInfo = $folder_logic->getFolderInfo($login,
                $category_id);
        }

        return $this->_folderInfo;
    }

    protected function getFolderTree($category_id)
    {
        $login_user = cb_get_login_user();
        if ( ! $login_user) {
            require_once('grn/error_code.csp');
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }

        require_once('message/message_logic.csp');
        $message_logic = new \GRN_Message_Logic();

        require_once('grn/org_tree.csp');
        require_once('message/folder_tree.csp');

        $util = \GRN_OrgTreeUtil::getInstance();
        $page = 'message/mobile/index';
        $tree = new \GRN_Message_FolderTree(['cid' => $category_id]);
        $tree->setUID($login_user->getOID());
        $util->initTreeByUpdateSystem($page, $tree);
        if (is_null($category_id)) {
            $category_id = $tree->getSelectedNode();
        }
        $tree->setSelectedNode($category_id);

        $unread_mesg_info
            = $message_logic->getUnreadMessageNumForMobile($login_user);
        foreach (array_keys($unread_mesg_info) as $index) {
            $unread_mesg_info[$index] = (int)$unread_mesg_info[$index];
        }

        // Open path to nodes whose unread message numbers change
        foreach ($tree->_nodes as $nodeId => $node_info) {
            if ( ! isset($tree->_nodes[$nodeId]['unread'])) {
                $tree->_nodes[$nodeId]['unread'] = 0;
            }

            $latest_unread_num = array_key_exists($nodeId, $unread_mesg_info)
                ? $unread_mesg_info[$nodeId] : 0;
            if ($latest_unread_num > $tree->_nodes[$nodeId]['unread']) {
                $tree->showPathToNode($nodeId);
            }
            $tree->_nodes[$nodeId]['unread'] = $latest_unread_num;

            if (isset($tree->_nodes[$nodeId]['type'])) {
                $folder_code = $tree->_nodes[$nodeId]['type'];
            } else {
                $folder_code = null;
            }

            switch ($folder_code) {
                case GRN_MESSAGE_RECEIVINGFOLDER:
                    $folder_icon_class = "mobile_folderlist_icon_receives_grn";
                    break;
                case GRN_MESSAGE_SENDINGFOLDER:
                    $folder_icon_class = "mobile_folderlist_icon_sents_grn";
                    break;
                case GRN_MESSAGE_DRAFTFOLDER:
                    $folder_icon_class = "mobile_folderlist_icon_drafts_grn";
                    break;
                case GRN_MESSAGE_GARBAGEFOLDER:
                    $folder_icon_class = "mobile_folderlist_icon_trashs_grn";
                    break;
                default:
                    $folder_icon_class = null;
                    break;
            }
            $tree->_nodes[$nodeId]['folder_icon_class'] = $folder_icon_class;
        }
        // get trash
        require_once('message/personal_logic.csp');
        $personal_logic = \GRN_Message_PersonalLogic::getInstance();
        $trash_enable
            = $personal_logic->getUseGarbageBoxAttribute($login_user);
        require_once('message/folder_logic.csp');
        $folder_logic = new \GRN_Message_FolderLogic();
        $trash_id = $folder_logic->getSpecificFolderID($login_user,
            GRN_MESSAGE_GARBAGEFOLDER);

        $tree_for_view = [
            'page_name'    => cb_get_pagename(),
            'root'         => $tree->getRoot(),
            'async_url'    => 'message/mobile/ajax/get_sub_folder_list',
            'link_url'     => 'message/mobile/message_list',
            'selected_oid' => $category_id,
            'unread_num'   => $unread_mesg_info,
            'oid_key'      => 'cid',
            'trash_id'     => $trash_id,
            'trash_enable' => $trash_enable,
            'no_root'      => true,
        ];

        return $tree_for_view;
    }

    protected function getMessageApp()
    {
        if (is_null($this->_message_app)) {
            require_once('grn/application.csp');
            $locator = \GRN_ApplicationLocator::instance();

            if ( ! ($this->_message_app = $locator->getInstance('message'))) {
                throw new GrnException(E_GRN_MESSAGE_DEACTIVATED);
            }
        }

        return $this->_message_app;
    }

    protected function getMessageName()
    {
        if (is_null($this->_message_name)) {
            $this->_message_name = $this->getMessageApp()->getName();
        }

        return $this->_message_name;
    }

    protected function getUsersInfoType($users_info)
    {
        foreach ($users_info as $user_id => $user) {
            if (is_array($user) && Validate::isNotNull($user['col_valid'])) {
                $users_info[$user_id]['valid'] = 'invalid_user';
            } elseif (is_array($user)
                      && array_key_exists('col_using_app', $user)
                      && Validate::isNull($user['col_using_app'])
            ) {
                $users_info[$user_id]['valid'] = 'invalidApp_user';
            } elseif ($user_id == $this->getLoginUserId()) {
                $users_info[$user_id]['valid'] = 'login_user';
            } else {
                $users_info[$user_id]['valid'] = 'unlogin_user';
            }
        }

        return $users_info;
    }

    protected function checkFollowEnable()
    {
        $message = $this->getMessageForView();
        $input = $this->getInput();
        $category_id = cb_at($input, self::ARG_CATEGORY_ID);
        $login = cb_get_login_user();

        require_once('message/folder_logic.csp');
        $folder_logic = new \GRN_Message_FolderLogic();
        $folder_info = $folder_logic->getFolderInfo($login, $category_id);

        $can_follow = false;
        if ($message['is_snapshot'] != 1 && $folder_info['folder_type'] != 4) {
            if ($message['message_type'] == 1 || $message['need_confirm'] != 1
                || $message['confirmed'] == '1'
            ) {
                $can_follow = true;
            }
        }

        return $can_follow;
    }
}
