<?php

namespace grn\message\screen\mobile;


class MessageList extends MobileMessageScreenBase
{

    function __construct($input)
    {

        $operator = [];
        $this->setMobileApplicationId(GRN_MESSAGE_APPID);
        $this->setMobileFooterBar($operator);
        parent::__construct($input);
        $this->checkArgFromInput([
            self::ARG_CATEGORY_ID,
            self::ARG_NAVIGATION_SP
        ], $input);

    }

    public function fetch()
    {
        require_once("grn/smarty.csp");
        $t = new \GRN_Smarty();
        $input = $this->getInput();
        cb_require_role("LoginUser");
        $user = cb_get_login_user();
        //Message instance
        require_once("message/message_logic.csp");
        $message_logic = new \GRN_Message_Logic();
        $folder_logic = new \GRN_Message_FolderLogic();
        $category_id = $this->getCategoryId();
        $uids = [];
        if ( ! is_numeric($category_id)) {
            cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
        }
        $unread_mesg_info = $message_logic->getUnreadMessageNumForMobile($user);
        foreach ($unread_mesg_info as $key => $value) {
            $unread_mesg_info[$key] = (int)$unread_mesg_info;
        }
        $folder_info = $folder_logic->getFolderInfo($user, $category_id);
        if ( ! $folder_info) {
            cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
        }
        $folder_type = $this->getArrayValue('folder_type', $folder_info);
        if ($folder_type == GRN_MESSAGE_GARBAGEFOLDER) {
            require_once("message/personal_logic.csp");
            $personal_logic = \GRN_Message_PersonalLogic::getInstance();
            if ($personal_logic->getUseGarbageBoxAttribute($user) == 0) {
                cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
            }
            //$t->assign('savedays', $personal_logic->getStoredTermAttribute($user)); //todo: consider and debug this logic
        }
        $message_logic->receiveMessages($user);
        $limit = self::ARG_VIEW_COUNT;
        require_once("message/controller.csp");
        $utility = new \GRN_Message_ControllerUtil();

        $t->assign('cid', $category_id);
        $offset = $this->getSp();
        $order_column = $utility->getListOrderColumn(null, 'mtd');
        // sorting
        $sw_sort = 'last_mtime';
        $col = ($sw_sort == 'ctime') ? 'ct' : 'mt';
        if ($order_column['column'] == 'ctime'
            || $order_column['column'] == 'last_mtime'
        ) {
            $col .= $order_column['param'][2];
            $order_column = $utility->getListOrderColumn($col);
        } else {
            $col .= 'd';
            $order_column = $utility->getListOrderColumn($col);
        }

        /*if ($folder_info['folder_type'] === GRN_MESSAGE_SENDINGFOLDER) {
            if ($order_column['column'] === 'creator_name' && !array_key_exists('sort', $input)) {
                $col = ($sw_sort == 'ctime' ? 'ct' : 'mt');
                $col .= $order_column['param'][2];
                $order_column = $utility->getListOrderColumn($col);
                $utility->setListOrderParam($col);
            }
        } else {
            if ($order_column['column'] === 'addressee_name' && !array_key_exists('sort', $input)) {
                $col = 'cu' . $order_column['param'][2];
                $order_column = $utility->getListOrderColumn($col);
                $utility->setListOrderParam($col);
            }
        }
        */
        $t->assign('app_name', $this->getTitle());
        // page title
        $page_index = 'message/index';
        $page_outbox = 'message/outbox';
        $page_draftbox = 'message/draftbox';
        $page_garbagebox = 'message/garbagebox';
        $page_category_list = 'message/category_list';

        switch ($folder_info['folder_type']) {
            case GRN_MESSAGE_RECEIVINGFOLDER:
                $page_title = grn_get_page_display_name($page_index);
                $page_folder = 'message/inbox';
                break;
            case GRN_MESSAGE_SENDINGFOLDER:
                $page_title = grn_get_page_display_name($page_outbox);
                $page_folder = $page_outbox;
                break;
            case GRN_MESSAGE_DRAFTFOLDER:
                $page_title = grn_get_page_display_name($page_draftbox);
                $page_folder = $page_draftbox;
                break;
            case GRN_MESSAGE_GARBAGEFOLDER:
                $page_title = grn_get_page_display_name($page_garbagebox);
                $page_folder = $page_garbagebox;
                //$sort = 'mtime';
                if ($order_column['column'] === 'ctime'
                    || $order_column['column'] === 'last_mtime'
                ) {
                    $order_column['column'] = 'mtime';
                }
                break;
            default:
                $page_folder = $page_category_list;
                $page_title = grn_get_page_display_name($page_category_list);
        }
        if (isset($category_for_view['title'])) {
            $t->assign('page_title', $category_for_view['title']);
        } else {
            $t->assign('page_title', $page_title);
        }
        // site position

        $folder_page = [
            'page' => 'message/mobile/index',
            'name' => $page_folder != $page_category_list
                ? grn_get_page_display_name($page_folder)
                : $folder_info["folder_name"],
            'cid'  => $category_id,
            'sf'   => 1
        ];

        //set the navigation bar
        $this->assignBreadcrumbUpperPage($t,
            grn_get_page_display_name($page_index), 'message/mobile/index');
        $this->assignBreadcrumbCurrentPage($t, $folder_page['name']);

        $message_list = $message_logic->getMessageList(
            $user,
            $category_id,
            $folder_info['folder_type'],
            $order_column['column'], $order_column['order'], $offset,
            $limit + 1, $sw_sort,
            false);
        $isNextPageExists = (count($message_list) > $limit);
        if ($isNextPageExists) {
            array_pop($message_list);
        }

        $assign_messages_map = [
            'mid'               => 'message_id',
            'subject'           => 'subject',
            'creator_uid'       => 'user_id',
            'creator_name'      => 'user_name',
            'need_confirm'      => 'need_confirm',
            'confirmed'         => 'confirmed',
            'type'              => 'message_type',
            'attach_file'       => 'has_files',
            'is_subscribed'     => 'is_subscribed',
            'attach_files_size' => 'file_size',
        ];

        $user_id = $user->getOID();

        $messages_for_view = [];
        $messages_for_view['message'] = [];
        foreach ($message_list as $rid => $message) {
            $messages_for_view['message'][$rid] = [];
            foreach ($assign_messages_map as $view_name => $data_name) {
                $messages_for_view['message'][$rid][$view_name]
                    = $message[$data_name];
            }

            // user is sender
            // need for deleting messages
            if ($user_id == $message['creator_id']) {
                $messages_for_view['message'][$rid]['is_sender'] = 1;
            } else {
                $messages_for_view['message'][$rid]['is_sender'] = 0;
            }
            $uids[] = $message['creator_id'];
            if ($message['status'] == 0) // unread
            {
                $messages_for_view['message'][$rid]['unread'] = 1;
                $messages_for_view['message'][$rid]['update']
                    = $message['touched']
                    ? 1 : 0;
                $messages_for_view['message'][$rid]['ctime']
                    = $message['date'];
            } else {
                if ($message['status'] == 1) // update
                {
                    $messages_for_view['message'][$rid]['update'] = 1;
                }
                $messages_for_view['message'][$rid]['mtime'] = $message['date'];
            }

        }

        $t->assign('messages', $messages_for_view);

        require_once("grn/controller.csp");
        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($uids,
            $user);
        $t->assign('users_info', $users_info);

        // delete messages automatically
        require_once('message/personal_logic.csp');
        $personal_logic = \GRN_Message_PersonalLogic::getInstance();
        $personal_logic->autoDeleteMessages($user);

        $navi_info_for_view = $utility->makeSimpleNaviInformation($offset,
            $limit, count($message_list), $isNextPageExists);
        $params = [];
        $params['cid'] = $category_id;
        $navi_info_for_view['page'] = 'message/mobile/message_list';
        $navi_info_for_view['navi']['params'] = $params;
        $t->assign('navi_info', $navi_info_for_view);

        if (array_key_exists('sp', $input)) {
            $t->assign('sp', $input['sp']);
        }

        return $t->fetch('message/mobile/message_list.tpl');
    }

    public function getTitle()
    {
        require_once('message/application.csp');
        $app = new \GRN_Message_Application();
        $app_name = $app->getName();

        return $app_name;
    }
}
