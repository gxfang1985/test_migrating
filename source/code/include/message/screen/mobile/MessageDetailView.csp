<?php

namespace grn\message\screen\mobile;

use grn\grn\Validate;
use grn\favour\service\FavourService;
use grn\grn\mention\MentionController;
use grn\space\screen\mobile\MobileGenericScreenBase;
use grn\grn\MemberLogic;

require_once 'fw/i18n.csp';

class MessageDetailView extends MobileMessageScreenBase
{
    private $is_favour_active;
    private $is_favour_on;

    public function __construct($input)
    {
        parent::__construct($input);
        $message = $this->getMessageForView();
        $category_id = $this->getCategoryId();
        $folder_info = $this->getFolderInfo($category_id);

        require_once('message/system_logic.csp');
        $system_logic = \GRN_Message_SystemLogic::getInstance();
        $confirm_mode = $system_logic->getConfirmModeConfigAttribute();

        // footer bar
        if ($message['is_snapshot'] != '1'
            && $folder_info['folder_type'] != GRN_MESSAGE_GARBAGEFOLDER
        ) {
            if ($confirm_mode != 1 && $message['message_type'] != '1'
                && $message['need_confirm'] == '1'
                && $message['confirmed'] != '1'
            ) {
                $this->setMobileFooterBar();
            } else {
                $this->setMobileFooterBar(['comment' => []]);
            }
        } else {
            $this->setMobileFooterBar();
        }

        $favour_service = new FavourService();
        $this->is_favour_active = $favour_service->isFavourAppActive();
        $this->is_favour_on
            = $favour_service->isAppAllowedRespond('message');
    }

    public function fetch()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty;

        $login = cb_get_login_user();

        $category_id = $this->getCategoryId();
        $relation_id = $this->getRelationId();
        $message_id = $this->getMessageId();
        $smarty->assign('rid', $relation_id);

        // message instance
        require_once('message/message_logic.csp');
        $message_logic = new \GRN_Message_Logic();

        $message_logic->receiveMessages($login);

        $message = $this->getMessageForView();

        if ($message['message_type'] == '2') {
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()]);
        }

        require_once('message/system_logic.csp');
        $system_logic = \GRN_Message_SystemLogic::getInstance();
        $confirm_mode = $system_logic->getConfirmModeConfigAttribute();

        if ($confirm_mode == 1 && $message['need_confirm'] == 1
            && $message['confirmed'] == 0
            && $message['message_type'] != GRN_MESSAGE_TYPE_SENT
        ) {
            if ($category_id == '' || $relation_id == '' || $message_id == '') {
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                    ['app_name' => $this->getMessageName()],
                    ['app_name' => $this->getMessageName()],
                    ['app_name' => $this->getMessageName()]);
            }
            $ret = $message_logic->confirmMessage($login, $message_id);
            if ( ! $ret) {
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                    ['app_name' => $this->getMessageName()],
                    ['app_name' => $this->getMessageName()],
                    ['app_name' => $this->getMessageName()]);
            }
            $message['confirmed'] = 1;
        }

        $assign_message_map = [
            'mid'           => 'message_id',
            'data'          => 'data',
            'subscribe'     => 'subscription',
            'creator_uid'   => 'creator_id',
            'creator_name'  => 'creator_name',
            'ctime'         => 'ctime',
            'mtime'         => 'mtime',
            'update'        => 'read_flag',
            'cid'           => 'folder_id',
            'modifier_uid'  => 'modifier_id',
            'modifier_name' => 'modifier_name',
            'need_confirm'  => 'need_confirm',
            'confirmed'     => 'confirmed',
            'type'          => 'message_type',
            'is_snapshot'   => 'is_snapshot',
            'delete_time'   => 'delete_time',
            'format_type'   => 'format_type',
        ];


        $message_for_view = [];
        foreach ($assign_message_map as $view_name => $data_name) {
            $message_for_view[$view_name] =& $message[$data_name];
        }
        $message_for_view['subject'] = $message['subject'];

        $uids = [];
        if (count($message_for_view['creator_uid']) > 0) {
            $uids[] = $message_for_view['creator_uid'];
        }

        if (count($message_for_view['modifier_uid']) > 0) {
            $uids[] = $message_for_view['modifier_uid'];
        }

        // attached files
        $file_list =& $message['files'];
        if (count($file_list) > 0) {
            $file_info = _grn_message_attached_files($file_list);
            $message_for_view['attach_files'] = $file_info['files'];
            $message_for_view['del_file_num'] = $file_info['del_file_num'];
        }

        // addressees
        $addressee_list =& $message['addressees'];

        $addressees = [];
        $counter = 0;
        foreach ($addressee_list as $addressee) {
            if ($counter > 2) {
                if ($addressee['dtime']->unix_ts == 0
                    && $addressee['delete_flag'] == 0
                ) {
                    $counter++;
                }
            } else {
                if ($addressee['dtime']->unix_ts == 0
                    && $addressee['delete_flag'] == 0
                ) {
                    $counter++;
                    $_addressee = [];
                    $_addressee['id'] = $addressee['id'];
                    $uids[] = $addressee['id'];
                    $_addressee['name'] = $addressee['name'];
                    $addressees[] = $_addressee;
                }
            }
        }
        $message_for_view['addressee'] = $addressees;
        $message_for_view['addressee_num'] = $counter;

        $users_info = [];
        $message_for_view['follow']
            = $this->getFollowsDisplayInfo($message['follows'], $uids,
            $users_info);

        $folder_info = $this->getFolderInfo($category_id);

        //star
        require_once('star/logic.csp');
        $star_logic = \GRN_Star_StarLogic::getInstance();
        $use_star = $star_logic->isActive();
        $use_star = $use_star
                    && ($folder_info['folder_type']
                        != GRN_MESSAGE_GARBAGEFOLDER);
        $smarty->assign('use_star', $use_star);
        if ($use_star) {
            $smarty->assign('star_infos',
                $star_logic->getStatusByIDs($login, GRN_MESSAGE_MODULEID,
                    [$message['message_id']]));
        }

        $smarty->assign('offset', $this->getNewOffset());
        $smarty->assign('more_view_args', [
            self::ARG_CATEGORY_ID => cb_at($message_for_view,
                self::ARG_CATEGORY_ID, ''),
            self::ARG_MESSAGE_ID  => cb_at($message_for_view,
                self::ARG_MESSAGE_ID, ''),
            self::ARG_RELATION_ID => $relation_id
        ]);

        $input = $this->getInput();
        if (array_key_exists(self::ARG_NOTIFY_ID, $input)
            || array_key_exists(self::ARG_NOTIFY_HISTORY_ID, $input)
        ) {
            $this->assignBreadcrumbUpperPage($smarty, '', '', [], true);
        } else {
            $sp = 0;
            if (array_key_exists('sp', $input)) {
                $sp = $input['sp'];
            }
            $smarty->assign('sp', $sp);

            $this->assignBreadcrumbUpperPage($smarty,
                $folder_info["folder_name"],
                "message/mobile/message_list",
                [
                    self::ARG_CATEGORY_ID => $category_id,
                    self::ARG_RELATION_ID => $relation_id,
                    self::ARG_MESSAGE_ID  => $message_id,
                    'sp'                  => $sp
                ]);
        }
        $this->assignBreadcrumbCurrentPage($smarty,
            cb_msg('grn.mobile', 'detail_title'));

        // for favour
        $favour_service = new FavourService();
        $login_id = $login->getOID();
        if ($this->is_favour_active && $this->is_favour_on) {
            require_once('message/application.csp');
            $params = [
                self::ARG_CATEGORY_ID => $this->getCategoryId(),
                self::ARG_RELATION_ID => $this->getRelationId(),
                self::ARG_MESSAGE_ID  => $this->getMessageId()
            ];
            $favour_info
                = $favour_service->constructFavourInfo(\GRN_Message_Application::GRN_MESSAGE_MODULE_ID,
                \GRN_Message_Application::FAVOUR_MESSAGE_BODY,
                $message_for_view['mid'],
                $login_id,
                $params,
                \GRN_Message_Application::GRN_MESSAGE_SUB_MODULE_ID);
            $smarty->assign('favour_info', $favour_info);
        }

        $smarty->assign('is_favour_on', $this->is_favour_on);
        $smarty->assign('is_favour_active', $this->is_favour_active);
        $smarty->assign('message', $message_for_view);
        $smarty->assign('users_info', $users_info);
        $smarty->assign('folder_type', $folder_info['folder_type']);
        $can_follow = $this->checkFollowEnable();
        $smarty->assign('can_follow', $can_follow);

        require_once('fw/plugin.csp');
        $mention_access_plugin_encoded = \CB_PluginLoader::encodeParam(
            [
                'name'   => 'message',
                'params' => [
                    'app_id'      => 'message',
                    'message_id'  => $message_id,
                    'target'      => [MemberLogic::TYPE_USER],
                    'relation_id' => $relation_id,
                ]
            ]
        );
        $smarty->assign('mention_access_plugin_encoded',
            $mention_access_plugin_encoded);

        return $smarty->fetch(cb_get_pagename() . '.tpl');
    }

    public function post($input)
    {
        $login = cb_get_login_user();

        if ( ! $login) {
            require_once('grn/error_code.csp');
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }

        $category_id = $this->getCategoryId();
        $relation_id = $this->getRelationId();
        $message_id = $this->getMessageId();

        if ($category_id == '' || $relation_id == '' || $message_id == '') {
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()]);
        }

        require_once('message/message_logic.csp');
        $message_logic = new \GRN_Message_Logic();
        $ret = $message_logic->confirmMessage($login, $message_id);
        if ( ! $ret) {
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()],
                ['app_name' => $this->getMessageName()]);
        }

        cb_redirect('message/mobile/view', [
            'cid' => $category_id,
            'rid' => $relation_id,
            'mid' => $message_id
        ]);

    }

    public function fetchCommentForAjax()
    {
        require_once("grn/smarty.csp");
        $smarty = new \GRN_Smarty;

        $input = $this->getInput();

        $offset = $this->getArrayValue(self::ARG_NAVIGATION_SP, $input);
        if ( ! Validate::isNumber($offset)) {
            $offset = 0;
        }

        $message = $this->getMessageForView(0, $offset + self::MORE_VIEW_COUNT,
            false, true);

        $message_for_view = [
            'cid' => $message['folder_id'],
            'mid' => $message['message_id']
        ];

        $uids = [];
        if (count($message['creator_id']) > 0) {
            $uids[] = $message['creator_id'];
        }

        if (count($message['modifier_id']) > 0) {
            $uids[] = $message['modifier_id'];
        }

        $users_info = [];
        $message_for_view['follow']
            = $this->getFollowsDisplayInfo($message['follows'], $uids,
            $users_info, $offset);
        $can_follow = $this->checkFollowEnable();
        $smarty->assign('can_follow', $can_follow);

        $smarty->assign('is_favour_active', $this->is_favour_active);
        $smarty->assign('is_favour_on', $this->is_favour_on);
        $smarty->assign('rid', $this->getRelationId());
        $smarty->assign('message', $message_for_view);
        $smarty->assign('users_info', $users_info);

        return $smarty->fetch('message/mobile/comment_list.tpl');
    }

    /**
     * Get message follows display information.
     *
     * @param     object $user \CB_User
     * @param     array  & $users_info
     *
     * @return    array         $message_follows_for_view   article follows display information.
     */
    private function getFollowsDisplayInfo(
        $follows,
        $uids,
        &$users_info,
        $offset = 0
    ) {
        $login = cb_get_login_user();

        require_once('message/message_logic.csp');
        $message_logic = new \GRN_Message_Logic();

        $message_follows_for_view = [];
        if (count($follows) > 0) {
            $assign_follow_map = [
                'creator_uid'  => 'creator_id',
                'creator_name' => 'creator_name',
                'ctime'        => 'ctime',
                'data'         => 'data',
                'update'       => 'read_flag',
                'id'           => 'id',
                'format_type'  => 'format_type'
            ];

            foreach ($follows as $follow_id => $follow_data) {
                $follow = [];
                $follow['follow_id'] = $follow_id;
                foreach ($assign_follow_map as $view_name => $data_name) {
                    $follow[$view_name] =& $follow_data[$data_name];
                    if ($view_name == 'creator_uid') {
                        $uids[] = $follow_data[$data_name];
                    }
                }
                // attached files
                $file_list =& $follow_data['files'];
                if (count($file_list) > 0) {
                    $file_info = _grn_message_attached_files($file_list);
                    $follow['attach_files'] = $file_info['files'];
                    $follow['del_file_num'] = $file_info['del_file_num'];
                }
                if ($login->getOID() == $follow_data['creator_id']) {
                    $follow['deletable'] = true;
                } else {
                    $follow['deletable'] = false;
                }

                /** @var \grn\grn\mention\bean\MentionObjectCollection $mention */
                $mention = $message_logic->getMention($follow_id);
                $mention_count = $mention->count();
                if ($mention_count > 0) {
                    $mention_list = MentionController::createMemberListsForView(
                        [$mention],
                        MobileGenericScreenBase::DEFAULT_OFFSET_DISPLAY_MEMBER,
                        MobileGenericScreenBase::MAX_NUM_DISPLAY_MEMBER
                    );
                    $follow['mention'] = $mention_list[0] ?? [];
                    $follow['mention_count'] = $mention_count;
                }

                $message_follows_for_view[] = $follow;
            }
        }

        require_once('grn/controller.csp');
        $users_info = \GRN_ControllerUtil::getUserInfoToShowUserName($uids,
            $login);
        $users_info = $this->getUsersInfoType($users_info);

        if (is_array($users_info)) {
            foreach ($message_follows_for_view as $follow_id => $follow_info) {
                $uid = $follow_info['creator_uid'];
                if (array_key_exists($uid, $users_info)
                    && @ $users_info[$uid]['valid']
                ) {
                    $message_follows_for_view[$follow_id]['creator_type']
                        = $users_info[$uid]['valid'];
                }
            }
        }

        // for favour
        $favour_service = new FavourService();
        $login_id = $login->getOID();
        if ($this->is_favour_active && $this->is_favour_on) {
            require_once('message/application.csp');
            foreach ($message_follows_for_view as $comment_key => $comment) {
                $params = [
                    self::ARG_CATEGORY_ID => $this->getCategoryId(),
                    self::ARG_RELATION_ID => $this->getRelationId(),
                    self::ARG_MESSAGE_ID  => $this->getMessageId(),
                    self::ARG_FOLLOW_ID   => $comment['id']
                ];
                $favour_info
                    = $favour_service->constructFavourInfo(\GRN_Message_Application::GRN_MESSAGE_MODULE_ID,
                    \GRN_Message_Application::FAVOUR_MESSAGE_COMMENT,
                    $comment['follow_id'],
                    $login_id,
                    $params,
                    \GRN_Message_Application::GRN_MESSAGE_SUB_MODULE_ID);
                $message_follows_for_view[$comment_key]['favour_info']
                    = $favour_info;
            }
        }

        $followNum = $message_logic->getTotalFollowNum($login,
            $this->getRelationId(), $this->getMessageId());
        $this->setNewOffset($offset, self::MORE_VIEW_COUNT, $followNum);

        return $message_follows_for_view;
    }

    public function getTitle()
    {
        $message = $this->getMessageForView();

        return $message['subject'];
    }
}
