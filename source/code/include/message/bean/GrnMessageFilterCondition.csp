<?php

class GrnMessageFilterCondition
{
    private $id = null;
    private $condition = null;
    private $dataClass = null;
    private $filter = null;
    private $string = null;

    public static $CONDITION_INCLUDE = 1;
    public static $CONDITION_NOT_INCLUDE = 2;
    public static $CONDITION_SAME = 3;
    public static $CONDITION_NOT_SAME = 4;
    public static $CONDITION_BEGIN_WITH = 5;

    public static $DATATYPE_SUBJECT = 1;
    public static $DATATYPE_SENDER = 2;
    public static $DATATYPE_ADDRESSEE = 3;

    public function setId($id)
    {
        $this->id = $id;
    }

    public function getId()
    {
        return $this->id;
    }

    public function getCondition()
    {
        return $this->condition;
    }

    public function setCondition($condition)
    {
        $this->condition = $condition;
    }

    public function getDataClass()
    {
        return $this->dataClass;
    }

    public function setDataClass($dataClass)
    {
        $this->dataClass = $dataClass;
    }

    public function getFilter()
    {
        return $this->filter;
    }

    public function setFilter($filter)
    {
        $this->filter = $filter;
    }

    public function getString()
    {
        return $this->string;
    }

    public function setString($string)
    {
        $this->string = $string;
    }

    public function isMatchWith($subject, $senderNames, $addresseesNames)
    {
        switch ($this->getDataClass()) {
            case GrnMessageFilterCondition::$DATATYPE_SUBJECT:
                return $this->_isMatchWith($subject);

            case GrnMessageFilterCondition::$DATATYPE_ADDRESSEE:
                $andFlag = true;
                $orFlag = false;
                foreach ($addresseesNames as $addresseeNames) {
                    foreach ($addresseeNames as $addresseeName) {
                        $isMatch = $this->_isMatchWith($addresseeName);
                        $andFlag = $andFlag && $isMatch;
                        $orFlag = $orFlag || $isMatch;
                    }
                }
                if (
                    ($orFlag
                     && in_array($this->getCondition(), [
                            self::$CONDITION_INCLUDE,
                            self::$CONDITION_SAME,
                            self::$CONDITION_BEGIN_WITH
                        ]))
                    || ($andFlag
                        && in_array($this->getCondition(), [
                            self::$CONDITION_NOT_INCLUDE,
                            self::$CONDITION_NOT_SAME
                        ]))
                ) {
                    return true;
                }

                return false;

            case GrnMessageFilterCondition::$DATATYPE_SENDER:
                $andFlag = true;
                $orFlag = false;
                foreach ($senderNames as $senderName) {
                    $isMatch = $this->_isMatchWith($senderName);
                    $andFlag = $andFlag && $isMatch;
                    $orFlag = $orFlag || $isMatch;
                }
                if (
                    ($orFlag
                     && in_array($this->getCondition(), [
                            self::$CONDITION_INCLUDE,
                            self::$CONDITION_SAME,
                            self::$CONDITION_BEGIN_WITH
                        ]))
                    || ($andFlag
                        && in_array($this->getCondition(), [
                            self::$CONDITION_NOT_INCLUDE,
                            self::$CONDITION_NOT_SAME
                        ]))
                ) {
                    return true;
                } else {
                    return false;
                }
            default:
                assert(false);
        }

        return false;
    }

    private function _isMatchWith($targetString)
    {
        switch ($this->getCondition()) {
            case self::$CONDITION_INCLUDE: // included
                return $this->isInclude($targetString);

            case self::$CONDITION_NOT_INCLUDE: // excluded
                return $this->isNotInclude($targetString);

            case self::$CONDITION_SAME: // same as
                return $this->isSame($targetString);

            case self::$CONDITION_NOT_SAME: // different from
                return $this->isNotSame($targetString);

            case self::$CONDITION_BEGIN_WITH: // begin with
                return $this->isBeginWith($targetString);
        }
        assert(false);
    }

    private function isInclude($targetString)
    {
        return @ mb_strpos($targetString, $this->getString()) !== false;
    }

    private function isNotInclude($targetString)
    {
        return @ mb_strpos($targetString, $this->getString()) === false;
    }

    private function isSame($targetString)
    {
        return strcmp($targetString, $this->getString()) == 0;
    }

    private function isNotSame($targetString)
    {
        return strcmp($targetString, $this->getString()) != 0;
    }

    private function isBeginWith($targetString)
    {
        $pos = @ mb_strpos($targetString, $this->getString());

        return is_int($pos) && $pos == 0;
    }
}
