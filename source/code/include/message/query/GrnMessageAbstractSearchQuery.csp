<?php
require_once("message/table_utility.csp");
require_once("grn/GrnAbstractQuery.csp");

abstract class GrnMessageAbstractSearchQuery extends GrnAbstractQuery
{
    private $userId;

    /**
     * @param $userId
     */
    public function setUserId($userId)
    {
        $this->userId = $userId;
    }

    /**
     * @return mixed
     */
    public function getUserId()
    {
        return $this->userId;
    }

    /**
     *
     * @var boolean
     */
    private $searchSnapshot = false;

    public function setSearchSnapshot($searchSnapshot)
    {
        $this->searchSnapshot = $searchSnapshot;
    }

    protected function isSearchSnapshot()
    {
        return $this->searchSnapshot;
    }

    /**
     *
     *
     * @var string
     */
    private $keyword;

    public function setKeyword($keyword)
    {
        $this->keyword = $keyword;
    }

    public function getKeyword()
    {
        return $this->keyword;
    }

    /**
     *
     *
     * @var array<string>
     */
    private $categoryIdList = [];

    /**
     * @param $categoryIdList
     */
    public function setCategoryIdList($categoryIdList)
    {
        $this->categoryIdList = $categoryIdList;
    }

    /**
     * @return array
     */
    public function getCategoryIdList()
    {
        return $this->categoryIdList;
    }

    /**
     *
     * @reurn string
     */
    protected function getCategoryListCsv()
    {
        if (count($this->getCategoryIdList()) == 0) {
            return false;
        }
        $databaseConnection = $this->getDatabaseConnection();
        $escapedCateogryIdList = [];
        foreach ($this->getCategoryIdList() as $cateogryId) {
            $escapedCateogryIdList[] = "'"
                                       . $databaseConnection->escape($cateogryId)
                                       . "'";
        }

        return implode(",", $escapedCateogryIdList);
    }

    /** @var $startTimestamp string */
    private $startTimestamp = null;

    /**
     * @param $startTimestamp
     */
    public function setStartTimestamp($startTimestamp)
    {
        $this->startTimestamp = $startTimestamp;
    }

    public function getStartTimestamp()
    {
        return $this->startTimestamp;
    }

    /** @var $endTimestamp string */
    private $endTimestamp = null;

    /**
     * @param $endTimestamp
     */
    public function setEndTimestamp($endTimestamp)
    {
        $this->endTimestamp = $endTimestamp;
    }

    /**
     * @return null|string
     */
    public function getEndTimestamp()
    {
        return $this->endTimestamp;
    }
}
