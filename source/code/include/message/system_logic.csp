<?php

/**
 * メッセージアプリケーションシステム設定ロジック
 *
 * @author   Eiji TAEN
 * @date     2004.12.20
 * @package  grn.message
 */

define('GRN_MESSAGE_SYSTEM_CONFIRM', 'system_confirm');
define('GRN_MESSAGE_SYSTEM_USE_RE', 'system_use_re');
define('GRN_MESSAGE_SYSTEM_CONFIRM_MODE', 'system_confirm_mode');
define('GRN_MESSAGE_SYSTEM_ENABLE_FOLLOW_AUTOLINK', 'enable_follow_autolink');

/**
 * Message application system logic class
 *
 * @package  grn.message
 */
class GRN_Message_SystemLogic
{
    /**
     * message system profile
     *
     * @access   private
     */
    private $_profile = null;

    /**
     * constructor
     */
    function __construct()
    {
        //
    }


    /** @var self */
    private static $_instance = null;

    /**
     * @return GRN_Message_SystemLogic
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * get message application system profile
     *
     * @return   CB_Profile
     */
    function _getSystemProfile()
    {
        if (is_null($this->_profile)) {
            require_once('message/application.csp');
            $application = new GRN_Message_Application();
            $this->_profile = $application->getSystemProfile();
        }

        return $this->_profile;
    }

    /**
     * get specified attribute
     *
     * @access   private
     *
     * @param    $name      string   attribute name
     * @param    $default   string   default value
     *
     * @return   string              specified attribute. if it doesn't exist,
     *                               return $default
     */
    function _getAttribute($name, $default)
    {
        $profile = $this->_getSystemProfile();

        if ( ! $profile->getAttribute($name, $value)) {
            return $default;
        }

        return $value;
    }

    /**
     * set specified attribute
     *
     * @access   private
     *
     * @param    $name    string   attribute name
     * @param    $value   string   attribute value
     *
     * @return   boolean           TRUE: success setting attribute, FALSE: fail
     */
    function _setAttribute($name, $value)
    {
        $profile = $this->_getSystemProfile();

        if ( ! $profile->getAttribute($name, $dummy)) {
            if ( ! $profile->createAttribute($name, $value)) {
                return false;
            }
        } else {
            if ( ! $profile->updateAttribute($name, $value)) {
                return false;
            }
        }

        return true;
    }

    /**
     * get format configuration attribute
     *
     * @return   string   format configuration
     */
    function getFormatConfigAttribute()
    {
        // temporary. should get it from file management application
        return $this->_getAttribute('system_format', 0);
    }

    /**
     * get max attached file size
     *
     * @return   string   max attached file size
     */
    function getMaxAttachedFileSizeAttribute()
    {
        // temporary. should get it from grn base service
        return $this->_getAttribute('system_filesize', -1);
    }

    /**
     * get confirm configuration
     *
     * @return   string   confirm configuration (default: 0)
     */
    function getConfirmConfigAttribute()
    {
        return $this->_getAttribute(GRN_MESSAGE_SYSTEM_CONFIRM, 0);
    }

    /**
     * set confirm configuration
     *
     * @param    $confirm   string   1: use confirm function, 0: do not use it
     *
     * @return   boolean             TRUE: success setting attribute
     *                               FALSE: fail to set attribute
     */
    function setConfirmConfigAttribute($confirm)
    {
        return $this->_setAttribute(GRN_MESSAGE_SYSTEM_CONFIRM, $confirm);
    }

    function getUseREConfigAttribute()
    {
        return $this->_getAttribute(GRN_MESSAGE_SYSTEM_USE_RE, 1);
    }

    function setUseREConfigAttribute($value)
    {
        return $this->_setAttribute(GRN_MESSAGE_SYSTEM_USE_RE, $value);
    }

    function getConfirmModeConfigAttribute()
    {
        return $this->_getAttribute(GRN_MESSAGE_SYSTEM_CONFIRM_MODE, 0);
    }

    function setConfirmModeConfigAttribute($confirm_mode)
    {
        return $this->_setAttribute(GRN_MESSAGE_SYSTEM_CONFIRM_MODE,
            $confirm_mode);
    }

    function getEnableFollowAutoLink()
    {
        return $this->_getAttribute(GRN_MESSAGE_SYSTEM_ENABLE_FOLLOW_AUTOLINK,
            true);
    }

    function setEnableFollowAutoLink($setting)
    {
        return $this->_setAttribute(GRN_MESSAGE_SYSTEM_ENABLE_FOLLOW_AUTOLINK,
            $setting);
    }


    /**
     * bulk deleting messages which last modified time is older than $time
     *
     * @param string $timestamp unix time stamp
     *
     * @return  int      $count  number of deleting messages
     */
    function deleteMessages($timestamp)
    {
        require_once('message/message_logic.csp');
        require_once('message/file.csp');
        require_once('message/notification.csp');

        $message_logic = new GRN_Message_Logic();
        $fm = new GRN_Message_FileManager();
        $notification = new GRN_Message_NotificationListener();

        require_once('message/inspection.csp');
        $logger = GRN_Message_Logger_25::getInstance();

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');

        $messages_tbl = $manager->getTableInfo(GRN_MESSAGE_MESSAGES);

        $rowset = new CB_RowSet($messages_tbl);
        $rowset->addCondition($rowset->queryf("col_last_mtime < '@S' AND col_original_message IS NULL",
            $timestamp));

        $count = 0;
        while ( ! is_null($row = $rowset->iterate())) {
            $addressee_list
                = $message_logic->getAddresseesSkipUserCheck($row->getOID(),
                true);
            if ( ! is_array($addressee_list)) {
                continue;
            }

            $addressee_uid_list = [];
            $addressee_name_list = [];
            foreach ($addressee_list as $addressee) {
                $addressee_uid_list[] = $addressee['id'];
                $addressee_name_list[] = $addressee['name'];
            }

            $file_list = $message_logic->getMessageFiles($row->getOID());
            $file_name_list = [];
            foreach ($file_list as $file) {
                if (array_key_exists('name', $file)) {
                    $file_name_list[] = $file['name'];
                }
            }
            $creator = $row->get('creator');
            $creator_name = is_null($creator) ? $row->get('creator_name')
                : $creator->get('display_name');
            $params = [
                'mid'            => $row->getOID(),
                'creator_name'   => $creator_name,
                'subject'        => $row->get('subject'),
                'data'           => $row->get('data'),
                'file_name_'     => $file_name_list,
                'receiver_name_' => $addressee_name_list,
            ];

            $logger->notice('delete', 'message', $params);

            $message_logic->deleteMessageDataUsingRow_users($fm, $notification,
                $row, $addressee_uid_list);
            $count++;
        }

        return $count;
    }

}


