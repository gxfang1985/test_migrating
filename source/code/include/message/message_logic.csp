<?php

use grn\fts\Application as FtsApplication;
use grn\fts\message\IndexService;
use grn\grn\access\service\AppAccess;
use grn\message\dao\MessageMentionDAO;
use grn\grn\mention\bean\MentionObjectCollection;

/**
 * メッセージロジック
 *
 * @author   Eiji TAEN   2005/05
 * @package  grn.message
 */

require_once('message/folder_logic.csp');
require_once('message/resources.csp');
require_once('message/table.csp');
require_once('grn/application.csp');
require_once('grn/controller.csp');
require_once('message/notification.csp');
require_once('message/dao/GrnMessageAddresseeDAO.csp');


/**
 * メッセージロジッククラス
 *
 * @package  grn.message
 */
class GRN_Message_Logic
{
    /**
     * メッセージテーブル
     *
     * @access   protected
     */
    protected $_messages;

    /**
     * 宛先テーブル
     *
     * @access  protected
     */
    protected $_addressees;

    /**
     * フォルダメッセージリレーションテーブル
     *
     * @access   private
     */
    //var $_relations;

    /**
     * フォルダテーブル
     *
     * @access   protected
     */
    protected $_folders;

    /**
     * フォローテーブル
     *
     * @access   protected
     */
    protected $_follows;

    protected $_files;

    /**
     * Uumインスタンス
     *
     * @var GRN_Uum
     */
    protected $_uum;

    /**
     * フォルダロジッククラス
     */
    protected $_folderlogic;

    protected $_manager;

    protected $_articleTriggers;
    protected $_followTriggers;
    protected $_fileTriggers;
    protected $_aclTriggers;

    /**
     * コンストラクタ
     */
    function __construct()
    {
        global $G_container_base;

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');
        $this->_messages = $manager->getTableInfo(GRN_MESSAGE_MESSAGES);
        $this->_addressees = $manager->getTableInfo(GRN_MESSAGE_ADDRESSEES);
        $this->_folders = $manager->getTableInfo(GRN_MESSAGE_FOLDERS);
        $this->_follows = $manager->getTableInfo(GRN_MESSAGE_FOLLOWS);
        $this->_files = $manager->getTableInfo(GRN_MESSAGE_ATTACHEDFILES);

        $this->_uum = $G_container_base->getInstance('uum');
        $this->_folderlogic = new GRN_Message_FolderLogic();

        $this->_manager = $manager;
    }

    private $_dbconn = null;

    protected function _getDBConnection()
    {
        if (is_null($this->_dbconn)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->_dbconn = $app_locator->getConnection('message');
        }

        return $this->_dbconn;
    }

    /**
     * invoke article hooks on create, update or delete event
     *
     * @access public
     *
     * @param        $article
     * @param string $action action
     *
     */
    function runArticleHook(& $article, $action)
    {
        if (is_null($this->_articleTriggers)) {
            $loader = new CB_PluginLoader('grn.message.article');
            $this->_articleTriggers = $loader->loadHooks();
        }

        foreach ($this->_articleTriggers as $hook) {
            call_user_func($hook, $article, $action);
        }
    }

    /**
     * invoke follow hooks on create, update or delete event
     *
     * @access public
     *
     * @param        $follow
     * @param        $message
     * @param string $action action
     *
     */
    function runFollowHook(& $follow, & $message, $action)
    {
        if (is_null($this->_followTriggers)) {
            $loader = new CB_PluginLoader('grn.message.follow');
            $this->_followTriggers = $loader->loadHooks();
        }

        foreach ($this->_followTriggers as $hook) {
            call_user_func($hook, $follow, $message, $action);
        }
    }

    /**
     * invoke file hooks on create, update or delete event
     *
     * @access public
     *
     * @param        $file
     * @param        $message
     * @param string $action action
     *
     */
    function runFileHook(& $file, & $message, $action)
    {
        if (is_null($this->_fileTriggers)) {
            $loader = new CB_PluginLoader('grn.message.file');
            $this->_fileTriggers = $loader->loadHooks();
        }

        foreach ($this->_fileTriggers as $hook) {
            call_user_func($hook, $file, $message, $action);
        }
    }

    /**
     * invoke ACL hooks on create, update or delete event
     *
     * @access public
     *
     * @param        $message
     * @param string $action action
     *
     */
    function runAclHook(& $message, $action)
    {
        if (is_null($this->_aclTriggers)) {
            $loader = new CB_PluginLoader('grn.message.acl');
            $this->_aclTriggers = $loader->loadHooks();
        }

        foreach ($this->_aclTriggers as $hook) {
            call_user_func($hook, $message, $action);
        }
    }

    /**
     * メッセージを送信する
     *
     * @param    CB_User $creator    差出人 CB_User オブジェクト
     * @param    array   $message    メッセージ
     * @param    array   $addressees 宛先リスト
     * @param    array   $files      $_FILES
     *
     * @return   \GRN_Message_Messages|bool return FALSE if cannot send a message
     */
    function sendMessage($creator, & $message, & $addressees, & $files)
    {
        $fail = false;
        // ユーザーがシステム上に存在しない
        if ( ! $creator) {
            return $fail;
        }

        $user_id = $creator->getOID();

        // *****
        // initializeのタイミング
        // ・フォルダツリー参照
        // ・メッセージ送信画面オープン
        // ・メッセージ受信
        // ・ポートレット表示
        // *****
        $this->_folderlogic->initialize($creator);

        $message_row = $this->_insertMessage($creator, $message);

        //  添付ファイルを保存する
        //  通知を作る時にファイルが添付されているか知りたいので、ここで実行しておく
        $ret = $this->_addMessageFiles($creator, $message_row, $files);
        if ( ! $ret) {
            return $fail;
        }

        // 送信者の送信箱へメッセージを保存
        $rowset = new CB_RowSet($this->_folders);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_folder_type = '@S'",
            $user_id, GRN_MESSAGE_SENDINGFOLDER));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        $folder = $rowset->iterate();
        if (is_null($folder)) {
            return $fail;
        }
        /* @var GRN_Message_Folders $folder */
        $this->_insertRelations($message_row, $creator, $folder, 1);

        // 重複した宛先の削除
        $unique_addressees = [];
        foreach ($addressees as $addressee) {
            if ( ! array_key_exists($addressee['addressee_id'],
                $unique_addressees)
            ) {
                $unique_addressees[$addressee['addressee_id']] = $addressee;
            }
        }
        $addressees = $unique_addressees;

        // include the sender?
        $is_sender = false;
        foreach ($addressees as $addressee) {
            if ($user_id == $addressee['addressee_id']) {
                $is_sender = true;
                break;
            }
        }
        if ( ! $is_sender) // not included
        {
            $sender = [];
            $sender['addressee_id'] = $user_id;
            $sender['addressee_order'] = 0;
            $sender['addressee_is_operator'] = 1;
            $sender['is_sender'] = 1;

            $addressees[] = $sender;
        }

        $addressee_list = $this->_sendAddressees($message_row, $addressees);
        if ( ! $addressee_list) {
            return $fail;
        }
        $notification = new GRN_Message_NotificationListener();
        $notification->registerBackgroundNotification(
            "create",
            $message_row,
            $creator,
            $addressee_list,
            $message_row->get('subject'),
            $message_row->get('data'),
            $message_row->get('ctime')
        );


        // log
        require_once('message/inspection.csp');
        $logger = GRN_Message_Logger_25::getInstance();
        $addressee_name_list = [];
        $maintainer_name_list = [];
        foreach ($addressee_list as $addressee) {
            $addressee_name_list[] = $addressee->get('display_name');

            foreach ($addressees as $addressee_info) {
                if ($addressee->getOID() == $addressee_info['addressee_id']
                    && $addressee_info['addressee_is_operator']
                ) {
                    $maintainer_name_list[] = $addressee->get('display_name');
                }
            }
        }

        if ($message['format_type'] == 1) {
            require_once('grn/controller.csp');
            $data = grn_strip_tags($message['data']);
        } else {
            $data = $message['data'];
        }
        $file_name_list = [];
        foreach ($files as $file) {
            if (is_object($file)) {
                $file_name_list[] = $file->get('name');
            } else {
                $file_name_list[] = $file['name'];
            }
        }
        $params = [
            'mid'              => $message_row->getOID(),
            'creator_name'     => $creator->get('display_name'),
            'subject'          => $message['subject'],
            'data'             => $data,
            'file_name_'       => $file_name_list,
            'receiver_name_'   => $addressee_name_list,
            'maintainer_name_' => $maintainer_name_list,
        ];
        $logger->notice('create', 'message', $params);

        $this->indexEsFolderMessageRelation($message_row->getOID());

        return $message_row;
    }

    /**
     * メッセージをテーブルにinsertする
     *
     * @access   private
     *
     * @param    CB_User $creator_row  差出人CB_Rowオブジェクト
     * @param    array   $message
     * @param    string  $message_type message type (default: GRN_MESSAGE_TYPE_GENERAL)
     *
     * @return   GRN_Message_Messages     メッセージ行CB_Rowオブジェクト
     *
     * $message['subject']        表題
     *         ['data']           本文/HTML本文
     *         ['format_type']    書式指定フラグ(0: plain text, 1: HTML)
     *         ['confirm']        閲覧確認フラグ(0: 閲覧確認しない, 1: する)
     */
    function _insertMessage(
        $creator_row,
        & $message,
        $message_type = GRN_MESSAGE_TYPE_GENERAL
    ) {
        // Get message sequence number
        $message_id = $this->_getNextMessageID();

        // Create new message
        $time = new CB_TimeStamp();
        $time->unix_ts = cb_get_db_timestamp();

        $row = $this->_messages->newRow($message_id);

        $row->set('creator', $creator_row);
        $row->set('creator_name', $creator_row->get('display_name'));
        $row->set('ctime', $time);
        $row->set('subject', $message['subject']);
        if (array_key_exists('k', $message)) {
            $row->set('reserve_int3', $message['k']);
        }
        $data = $message['data'];
        if ($message['format_type'] == 1) {
            require_once('grn/controller.csp');
            $html = grn_wash_script_without_style_attribute($message['data']);
            $row->set('html_data', $html);
            $data = grn_strip_tags($html);
        }
        $row->set('data', $data);
        $row->set('confirm', $message['confirm']);
        $row->set('last_mtime', $time);
        $row->set('last_otime', $time);
        $row->set('last_modifier', $creator_row);
        $row->set('last_follow_id', 0);
        $row->set('file_num', 0);
        $row->set('file_size', 0);
        $row->set('message_type', $message_type);
        $row->registerNow();

        if ($message_type != 2) {
            $this->runArticleHook($row, 'create');
            if (FtsApplication::isAvailable()) {
                $indexService = new IndexService();
                $indexService->createMessageIndex($row);
            }
        }

        return $row;
    }

    function _getNextMessageID()
    {
        // Get message sequence number
        require_once('message/resources.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        // Select next id for new message.
        $query = 'SELECT col_next_id + 1 FROM '
                 . GRN_MESSAGE_MESSAGES_SEQUENCE . ' FOR UPDATE;';
        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $message_id = $row['col_next_id + 1'];
        $db->free_result($result);

        // Update message sequence number
        $query = cb_queryf($db, "UPDATE @S SET col_next_id = '@S';",
            GRN_MESSAGE_MESSAGES_SEQUENCE, $message_id);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on UPDATE: ' . $query]);
        }

        return $message_id;
    }

    /**
     * 宛先ユーザーへメッセージを送信する
     *
     * @access   private
     *
     * @param    GRN_Message_Messages $message_row メッセージCB_Rowオブジェクト
     * @param    array                $addressees  宛先リスト
     * @param    boolean              $update      TRUE: 要アップデート (default: FALSE)
     *
     * $addressees[]['addressee_id']    => 宛先ID
     *              ['addressee_order'] => 表示順序
     *              ['addressee_is_operator'] => 管理権限
     *              ['is_sender']       => 宛先に含まれて[いない/かった]差出人の場合は存在
     *
     * @return CB_Row[]
     */
    function &_sendAddressees($message_row, & $addressees, $update = false)
    {
        // ユーザ情報の事前取得
        $addressee_id = [];
        foreach ($addressees as $value) {
            $addressee_id[] = $value['addressee_id'];
        }
        $condition = $this->getDatabaseConnection()
                          ->format("_id in (@A) ", [$addressee_id]);
        $users = $this->_uum->getUsers(0, -1, '_id', $condition);

        if (empty($users)) {
            require_once('grn/application.csp');
            require_once('message/error_code.csp');
            $locator = GRN_ApplicationLocator::instance();
            $name = htmlspecialchars($locator->getName('message'));
            cb_throw_error(E_GRN_MESSAGE_ADDRESSEES_NOT_SELECTED,
                null,
                ['app_name' => $name]);
        }


        $this->insertMessageToEachUser($message_row, $users, $addressees,
            $update);

        return $users;
    }

    /**
     * @param GRN_Message_Messages $message
     * @param array                $users
     * @param array                $addressees
     * @param                      $update
     */
    private function insertMessageToEachUser(
        GRN_Message_Messages $message,
        array $users,
        array $addressees,
        $update
    ) {
        $this->_folderlogic->initializeFolders($users);
        $addresseesDao = new GrnMessageAddresseeDAO();
        $addresseesDao->insertAddressees($message, $addressees, $users,
            $update);

        $folders
            = $this->_folderlogic->decideMessageFolderHashByUserId($message,
            $users, $addressees);


        $usersToInsert = [];
        foreach ($addressees as $addressee) {
            if (array_key_exists('is_sender', $addressee) && ! $update) {
                continue;
            }

            if ( ! isset($users[$addressee['addressee_id']])) {
                continue;
            }

            $usersToInsert[$addressee['addressee_id']]
                = $users[$addressee['addressee_id']];
        }
        $dao = new \grn\message\dao\GrnMessageFolderMessageRelationsDAO();
        $dao->insertRelations($message, $usersToInsert, $folders, 0);

        $deleteMessageFlagUsers = [];
        foreach ($folders as $userId => $folder) {
            if ($folder["folderType"] !== GRN_MESSAGE_GARBAGEFOLDER) {
                continue;
            }
            $deleteMessageFlagUsers[] = $userId;
        }
        $addresseesDao->setDeleteFlag($message, $deleteMessageFlagUsers);

    }

    /**
     * 指定された宛先をテーブルにinsertする
     *
     * @access   private
     *
     * @param    GRN_Message_Messages $message_row   メッセージCB_Rowオブジェクト
     * @param    CB_User              $addressee_row 宛先CB_Rowオブジェクト
     * @param    string               $view_order    表示順序
     * @param    int                  $is_sender     0: 受信者, 1: 差出人 (default: 0)
     * @param    int                  $is_operator   0: 一般ユーザ, 1: 管理者 (default: 0)
     *
     * @return   GRN_Message_Addressees      addressee row
     */
    function _insertAddressees(
        $message_row,
        $addressee_row,
        $view_order,
        $is_sender = 0,
        $is_operator = 0
    ) {
        $row = $this->_addressees->newRow();

        $row->set('message', $message_row);
        $row->set('addressee', $addressee_row);
        $row->set('addressee_name', $addressee_row->get('display_name'));
        $row->set('delete_flag', '0');
        $row->set('view_flag', '0');
        $row->set('view_order', $view_order);
        $row->set('is_sender', $is_sender);
        $row->set('finish_view_flag', '0');
        $row->set('is_operator', $is_operator);

        $time = new CB_TimeStamp();
        $time->unix_ts = 0;
        $row->set('dtime', $time);

        return $row;
    }

    /**
     * フォルダメッセージリレーションテーブルへinsertする
     *
     * @access   private
     *
     * @param    GRN_Message_Messages $message      メッセージCB_Rowオブジェクト
     * @param    CB_User              $user         ユーザーCB_Rowオブジェクト
     * @param    GRN_Message_Folders  $folder       振り分け先フォルダCB_Rowオブジェクト
     * @param    int                  $message_type 0: 通常, 1: 送信, 2: ドラフト (default: 0)
     *
     * @return   GRN_Message_FolderMessageRelations   relation row
     */
    function _insertRelations($message, $user, $folder, $message_type = 0)
    {
        $user_id = $user->getOID();

        $table_name = grn_get_personal_tablename_message($user_id,
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);

        $row = $table->newRow();

        $original = $message->get('original_message');
        if ( ! $original) {
            $row->set('message', $message);
        } else {
            $row->set('message', $original);
            $row->set('snapshot_message', $message);
        }
        $this->_setSubscription($row,
            $this->_folderlogic->getSubscription($user, $folder->getOID()));

        $row->set('user', $user);
        $row->set('folder', $folder);

        $time = new CB_TimeStamp();
        switch ($message_type) {
            case 1: // sent message
            case 2: // draft message
                $time->unix_ts = cb_get_db_timestamp();
                break;
        }
        $row->set('sent_message_flag', $message_type);
        $row->set('last_vtime', $time);

        if ($message_type != GRN_MESSAGE_TYPE_DRAFT) {
            if (FtsApplication::isAvailable()) {
                $indexService = new IndexService();
                $indexService->createFolderMessageRelationIndex(
                    $message->getOID(), $row->getId('snapshot_message'),
                    $user_id, $message_type, $folder->getOID()
                );
            }
        }

        // *****
        // 備考欄処理
        // *****

        unset($table);

        $row->updateNow();

        return $row;
    }

    /**
     * @access   private
     *
     * @param CB_User              $user
     * @param GRN_Message_Messages $message
     */
    function _insertMessageBox($user, $message)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');
        $message_boxes = $manager->getTableInfo('GRN_Message_MessageBoxes');

        $row = $message_boxes->newRow();
        $row->set('user', $user);
        $row->set('message', $message);
    }


    /**
     *  送信メッセージを受信者の受信フォルダに保存する。
     *  受信者の設定している振り分け条件や、フォルダごとの通知設定も行う。
     *
     * @param    CB_User              $addressee       CB_Row addressee object
     * @param    GRN_Message_Messages $message         CB_Row message object
     * @param    array                $addressee_names Array of names of addressee list
     *
     * @return   boolean  TRUE:  success
     *                    FALSE: failed
     */
    function _insertMessageFolder2($addressee, $message, $addressee_names = [])
    {
        $folder = $this->_getDestinationFolder($addressee, $message,
            $addressee_names);
        if ($folder === false) {
            return false;
        }

        //  フォルダに入れる
        $relation = $this->_insertRelations($message, $addressee, $folder);
        if ($folder === false) {
            return false;
        }

        //  ごみばこに入れるときはちょっと処理が増える
        if ($folder->get('folder_type') == GRN_MESSAGE_GARBAGEFOLDER) {
            //  宛先ユーザーが送信者でなければ、addresseesに削除フラグを立てる
            $sender = $message->get('creator');
            $sender_id = is_null($sender) ? '' : $sender->getOID();
            if ($sender_id != $addressee->getOID()) {
                $addressee_rowset = new CB_Rowset($this->_addressees);
                $addressee_rowset->addCondition($addressee_rowset->queryf("col_message = '@S' AND col_user = '@S'",
                    $message->getOID(), $addressee->getOID()));
                $addressee_row = $addressee_rowset->iterate();
                $addressee_row->set('delete_flag', '1');
            }

            //  最終更新日時を削除時刻に
            $time = new CB_TimeStamp();
            $time->unix_ts = cb_get_db_timestamp();
            $relation->set('mtime', $time);

            $this->runACLHook($message, 'update');
        }
        $relation->registerNow();

        return true;
    }

    /**
     * @param CB_User $user
     *
     * @return bool
     */
    function receiveMessages($user)
    {
        //  1度pullしていれば、受信しない
        require_once('message/personal_logic.csp');
        $personal = GRN_Message_PersonalLogic::getInstance();
        if ($personal->isLastPulledMessageAttribute($user) === true) {
            return true;
        }

        // 受信処理を開始する
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');
        $message_boxes = $manager->getTableInfo('GRN_Message_MessageBoxes');

        $rowset = new CB_Rowset($message_boxes);
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        $rowset->addOrderColumn('_id');

        $indexService = new IndexService();
        while ( ! is_null($row = $rowset->iterate())) {
            $message_body = $row->get('message');
            if ( ! $this->_isExistMessage($user, $message_body->getOID())) {
                //  snapshotがあれば、そちらを受信する
                $message = $row->get('snapshot_message');
                if (is_null($message)) {
                    $message = $message_body;
                }
                //Make the the addressees list of this message as an array of CB_User objects.
                $user_list = [];
                $addresseeRowset = new CB_Rowset($this->_addressees);
                $addresseeRowset->addCondition($addresseeRowset->queryf("col_message = '@S' AND col_is_sender = '0'",
                    $message->getOID()));
                while ($addresseeRow = $addresseeRowset->iterate()) {
                    //tab_grn_message_addressee.col_addressee does not have NOT-NULL constraint so that it might be null.
                    if ($addresseeRow->get("addressee")) {
                        $user_list[] = $addresseeRow->get("addressee");
                    }
                }
                $folder = $this->_getDestinationFolder($user, $message,
                    $user_list);

                if ($folder === false) {
                    return false;
                }

                $relation = $this->_insertRelations($message, $user, $folder);

                // move to garbage folder
                if ($folder->get('folder_type') == GRN_MESSAGE_GARBAGEFOLDER) {
                    $sender = $message->get('creator');
                    $sender_id = is_null($sender) ? '' : $sender->getOID();
                    if ($sender_id != $user->getOID()) {
                        $addressee_rowset = new CB_Rowset($this->_addressees);
                        $addressee_rowset->addCondition($addressee_rowset->queryf("col_message = '@S' AND col_user = '@S'",
                            $message->getOID(), $user->getOID()));
                        $addressee_row = $addressee_rowset->iterate();
                        $addressee_row->set('delete_flag', '1');
                    }
                    // set moving time
                    $time = new CB_TimeStamp();
                    $time->unix_ts = cb_get_db_timestamp();
                    $relation->set('mtime', $time);

                    $this->runACLHook($message, 'update');
                }
                $relation->registerNow();

                $user_id_list = [$user->getOID()];
                $folder_id_list = [$folder->getOID()];

                $indexService->createEsFolderMessageRelationIndex(
                    $message->getOID(),
                    $user_id_list,
                    $folder_id_list
                );
            }
            $row->delete();
        }

        //  最後のpullを完了する
        $personal->setLastPulledMessageAttribute($user, true);

        return true;
    }

    /**
     * get message information (creator, subject)
     *
     * @param    CB_User $user        user CB_User object
     * @param    string  $relation_id relation id
     * @param    string  $message_id  message id
     *
     * @return   array|boolean           message information list
     *                                   if specified message doesn't exist, return FALSE.
     *
     * return['creator_id']   => creator id
     *       ['subject']      => subject
     *       ['abstract']     => abstract of the body
     *       ['is_snapshot']  => 1: a snapshot message, 0: an original one
     *       ['message_type'] => 0: general message, 1: sent message, 2: draft message
     *       ['delete_time']  => CB_TimeStamp deleted time from addressee list
     *       ['notification_status']  => 1: read, 0: unread
     */
    function &getMessageInfo($user, $relation_id, $message_id)
    {
        $fail = false;
        if ($relation_id == '') {
            return $fail;
        }

        //$relation_row = $this->_relations->getRow( $relation_id );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $relation_row = $table->getRow($relation_id);
        if ( ! $relation_row) {
            return $fail;
        }

        $relation_owner = $relation_row->get('user');
        if (is_null($relation_owner)) {
            return $fail;
        } else {
            if ($user->getOID() != $relation_owner->getOID()) {
                return $fail;
            }
        }

        $snapshot = $this->_getMessageRow($relation_row);
        /* @var GRN_Message_Messages $message_row */
        $message_row = $snapshot['message'];

        $message = [];
        $creator = $message_row->get('creator');
        if ($creator) {
            $message['creator_id'] = $creator->getOID();
            $message['creator_name'] = $creator->get('display_name');
        } else {
            $message['creator_id'] = null;
            $message['creator_name'] = $message_row->get('creator_name');
        }
        $message['creator_id'] = ! is_null($creator) ? $creator->getOID() : '';
        $message['subject'] = $message_row->get('subject');
        $message['abstract'] = mb_substr($message_row->get('data'), 0, 128);

        // get deleted time
        /* @var GRN_Message_Messages $original */
        $original = $snapshot['original'];
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_addressee = '@S'",
            $original->getOID(), $user->getOID()));
        $rowset->limit(0, 1);
        $addressee = $rowset->iterate();
        if ( ! is_null($addressee)) {
            $message['delete_time'] = $addressee->get('dtime');
        } else {
            $time = new CB_TimeStamp();
            $time->unix_ts = 0;
            $message['delete_time'] = $time;
        }
        $message['is_snapshot'] = $snapshot['is_snapshot'];
        $message['original_mid'] = $original->getOID();

        $message['message_type'] = $relation_row->get('sent_message_flag');

        // 既読情報の取得
        $message['notification_status'] = 1;

        $last_vtime = $relation_row->get('last_vtime');
        $last_mtime = $message_row->get('last_mtime');
        if ($last_mtime && $last_mtime->unix_ts > $last_vtime->unix_ts) {
            $message['notification_status'] = 0;
        }
        $message['last_mtime'] = $last_mtime;

        return $message;
    }

    /**
     * メッセージを取得する
     *
     * @param    CB_User $user         メッセージ閲覧者 CB_User オブジェクト
     * @param    string  $relation_id  リレーションID
     * @param    string  $message_id   メッセージID
     * @param    int     $offset       フォロー表示位置 (default:  0)
     * @param    int     $limit        フォロー表示件数 (default: 20)
     * @param    boolean $from_history 通知履歴からの参照フラグ(TRUE: Yes)
     *
     * @return   array|boolean             メッセージ
     *                                     if specified message doesn't exist, return FALSE.
     *
     * メッセージ['message_id']     メッセージID
     *           ['creator_id']     差出人ID
     *           ['creator_name']   差出人名
     *           ['ctime']          送信時間
     *           ['modifier_id']    最終更新者ID
     *           ['modified_name']  最終更新者名
     *           ['mtime']          最終更新日時
     *           ['delegator_name'] 権限被委譲者名
     *           ['dtime']          権限委譲日時
     *           ['subject']        表題
     *           ['data']           本文/HTML本文
     *           ['format_type']    書式タイプ(0: plain text, 1: HTML)
     *           ['subscription']   購読フラグ(0: 未購読, 1:購読)
     *           ['message_type']   0:受信メッセージ, 1: 送信メッセージ, 2: 下書き
     *           ['need_confirm']   要確認メッセージか否か(0:否, 1:要確認)
     *           ['read_flag']      本文閲覧フラグ(0: 未読, 1: 既読)
     *           ['confirmed']      確認フラグ(0: 未確認, 1: 確認済)
     *           ['conf_num']       確認人数
     *           ['total_conf_num'] 確認総数(未確認含む)
     *           ['is_snapshot']    スナップショットか否か(0: 否, 1:スナップショット)
     *           ['delete_time']    宛先から削除された日時
     *           ['files']          attached file list
     *           ['addressees']     宛先ユーザーリスト
     *           ['follows']        フォローリスト
     *           ['folder_id']      folder ID
     *
     * ['files'][file id]['name'] => file name
     *                   ['size'] => file size
     *                   ['mime'] => file mime type
     *
     * ['addressees'][ユーザーID]   宛先ユーザー名
     *
     * ['follows'][フォローID]['creator_id']   フォロー発言者ID
     *                        ['creator_name'] フォロー発言者名
     *                        ['ctime']        発言日時
     *                        ['id']           メッセージ単位に付与されるフォローID
     *                        ['data']         本文/HTML本文
     *                        ['format_type']  書式タイプ(0: plain text, 1: HTML)
     *                        ['read_flag']    フォロー閲覧フラグ(0: 未読, 1: 既読)
     *                        ['files']        attached file list
     */
    function getMessage(
        $user,
        $relation_id,
        $message_id,
        $offset = 0,
        $limit = 20,
        $from_history = false,
        $mobile_view = false
    ) {
        $message_row = $this->_getMessage($user, $relation_id, $message_id,
            $from_history,
            $message, $read, $last_vtime, $mobile_view);

        if ($message_row === false) {
            $ret = false;

            return $ret;
        }

        // フォロー取得
        $message['follows'] = $this->_getFollows($read, $last_vtime,
            $message_id, $message_row,
            $offset, $limit, $mobile_view);

        return $message;
    }

    /**
     * get a message using follow id
     *
     * @param      $user
     * @param      $relation_id
     * @param      $message_id
     * @param      $follow_id
     * @param int  $limit
     * @param bool $from_history
     *
     * @return array|bool
     */
    function getMessageByFID(
        $user,
        $relation_id,
        $message_id,
        $follow_id,
        $limit = 20,
        $from_history = false
    ) {
        $message_row = $this->_getMessage($user, $relation_id, $message_id,
            $from_history,
            $message, $read, $last_vtime);

        if ($message_row === false) {
            $ret = false;

            return $ret;
        }

        // get follows
        $message['follows'] = $this->_getFollowsByFID($read, $last_vtime,
            $message_id, $message_row,
            $follow_id, $limit);

        return $message;
    }

    /**
     * @param CB_User      $user
     * @param string       $relation_id
     * @param string       $message_id
     * @param boolean      $from_history
     * @param array        $message
     * @param boolean      $read
     * @param CB_TimeStamp $last_vtime
     *
     * @return GRN_Message_Messages|bool
     */
    function _getMessage(
        $user,
        $relation_id,
        $message_id,
        $from_history,
        & $message,
        & $read,
        & $last_vtime,
        $mobile_view = false
    ) {
        if ( ! $user) {
            $ret = false;

            return $ret;
        }

        $user_id = $user->getOID();

        $table_name = grn_get_personal_tablename_message($user_id,
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $relation_row = $table->getRow($relation_id);

        if ( ! $relation_row) {
            $ret = false;

            return $ret;
        }

        // check privilege
        $relation_owner = $relation_row->get('user');
        if (is_null($relation_owner)) {
            $ret = false;

            return $ret;
        } else {
            if ($user_id != $relation_owner->getOID()) {
                $ret = false;

                return $ret;
            }
        }

        // getting snapshot message
        $snapshot = $this->_getMessageRow($relation_row);
        /** @var GRN_Message_Messages $snapshot_row */
        $snapshot_row = $snapshot['message'];
        $snapshot_id = $snapshot_row->getOID();

        $message = [];
        $message['is_snapshot'] = $snapshot['is_snapshot'];

        // この後最終閲覧日時を更新するためここでは参照ではなくコピー
        $last_vtime = clone $relation_row->get('last_vtime');

        $last_modifier = $snapshot_row->get('last_modifier');
        if ( ! is_null($last_modifier)) {
            $last_modifier_id = $last_modifier->getOID();
        } else {
            $last_modifier_id = '';
        }
        $read = false;
        if ($last_vtime->unix_ts == 0 || $user_id == $last_modifier_id) {
            $read = true;
        }

        // access except from notification history
        if ( ! $from_history) {
            $has_unread_receiving_message = false;
            //  購読しているすべての foldermessagerelations を取り出す
            $rowset = new CB_RowSet($table);
            $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S'",
                $user_id, $message_id));
            //  $user は CB_User なので、UUMが削除フラグチェック済み。

            // 最終閲覧日時の更新
            $ctime = new CB_TimeStamp();
            $ctime->unix_ts = cb_get_db_timestamp();
            while ( ! is_null($r_row = $rowset->iterate())) {
                // 同一メッセージが最大2通存在する場合がある
                if ($r_row->getOID() != $relation_id) {
                    $another_last_vtime = $r_row->get('last_vtime');

                    if ($another_last_vtime->unix_ts != 0) {
                        //  もう一方の foldermessagerelations も、既読/更新既読の場合は既読にする
                        $r_row->set('last_vtime', $ctime);
                    } else {
                        //  未読で、かつ購読通知が設定されていなければ、通知を残しておく。
                        $f_row = $r_row->get('folder');
                        if (($r_row->get('subscription_flag') == 1)
                            && ($f_row->get('subscription_flag') == 1)
                        ) {
                            $has_unread_receiving_message = true;
                        }
                    }
                }
            }
            //  開いたほうの foldermessagerelations は、問答無用で更新する。
            $relation_row->set('last_vtime', $ctime);

            // update notification time
            if ( ! $has_unread_receiving_message) {
                $this->_confirmNotification($user, $snapshot_row, $ctime);
            }
        }

        $message['message_id'] = $snapshot_id;
        $creator = $snapshot_row->get('creator');
        if ( ! is_null($creator)) {
            $message['creator_id'] = $creator->getOID();
        } else {
            $message['creator_id'] = '';
        }
        $message['creator_name'] = $snapshot_row->get('creator_name');
        $message['ctime'] = $snapshot_row->get('ctime');
        $modifier = $snapshot_row->get('modifier');
        if ( ! is_null($modifier)) {
            $message['modifier_id'] = $modifier->getOID();
        } else {
            $message['modifier_id'] = '';
        }
        $message['modifier_name'] = $snapshot_row->get('modifier_name');
        $message['mtime'] = $snapshot_row->get('mtime');
        $message['delegator_name'] = $snapshot_row->get('delegator_name');
        $message['dtime'] = $snapshot_row->get('dtime');
        $message['subject'] = $snapshot_row->get('subject');

        // body
        if ($mobile_view) {
            $message['data'] = $snapshot_row->get('data');
            $message['format_type'] = 0;
        } else {
            $message['data'] = $snapshot_row->get('html_data');
            $message['format_type'] = 1;
            if ($message['data'] == '') {
                $message['data'] = $snapshot_row->get('data');
                $message['format_type'] = 0;
            }
        }

        // read or unread
        $message['read_flag'] = 1;
        $mtime = $snapshot_row->get('mtime');
        if ( ! $read && $mtime && $mtime->unix_ts > $last_vtime->unix_ts) {
            $message['read_flag'] = 0;
        }

        // notification status
        $message['notification_status'] = 1;
        $last_mtime = $snapshot_row->get('last_mtime');
        if ($last_mtime && $last_mtime->unix_ts > $last_vtime->unix_ts) {
            $message['notification_status'] = 0;
        }

        // get deleted time
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_addressee = '@S'",
            $snapshot['original']->getOID(), $user->getOID()));
        $rowset->limit(0, 1);
        $addressee = $rowset->iterate();
        if ( ! is_null($addressee)) {
            $message['delete_time'] = $addressee->get('dtime');
        } else {
            $time = new CB_TimeStamp();
            $time->unix_ts = cb_get_db_timestamp();
            $message['delete_time'] = $time;
        }

        $message['subscription'] = $relation_row->get('subscription_flag');

        $message['files'] = $this->getMessageFiles($snapshot_id);

        // 宛先取得
        $message['addressees'] = $this->getAddressees($user, $snapshot_id);

        // confirm
        $message['need_confirm'] = 0;
        $message['confirmed'] = 0;
        $message['need_confirm'] = $snapshot_row->get('confirm');
        foreach ($message['addressees'] as $addressee) {
            if ($user_id == $addressee['id']) // user is addressee
            {
                $message['confirmed'] = $addressee['confirmed'];
            }
        }

        $message['message_type'] = $relation_row->get('sent_message_flag');

        /*
        // フォロー取得
        $message['follows'] = $this->_getFollows( $read, $last_vtime,
                                                  $message_id, $snapshot_row,
                                                  $offset, $limit );
         */

        // get folder id
        // there's a possibility that folder id was changed.
        $folder = $relation_row->get('folder');
        $message['folder_id'] = $folder->getOID();

        // return $message;
        return $snapshot_row;
    }

    /**
     * get specified message for modify
     *
     * @param    CB_User $user
     * @param    string  $relation_id  relation id
     * @param    string  $message_id   message id
     * @param    boolean $require_text require plain text data (default: FALSE)
     *
     * @return   mixed    return array. if message doesn't exist, return FALSE.
     *
     * return_array['creator_id']   => sender id
     *             ['creator_name'] => sender name
     *             ['subject']      => subject
     *             ['data']         => text body/HTML body
     *             ['format_type']  => 0: plain text, 1: HTML
     *             ['confirm']      => 0: not use confirm, 1: use confirm
     */
    function getMessageBody(
        $user,
        $relation_id,
        $message_id,
        $require_text = false
    ) {
        // *****
        // check role
        // *****

        $relation_row = $this->_getPrimaryRelationRow($user, $relation_id,
            $message_id);
        if ( ! $relation_row) {
            return false;
        }

        /** @var GRN_Message_Messages $message_row */
        $message_row = $relation_row->get('message');

        $message = [];
        $message['creator_id'] = '';
        $creator = $message_row->get('creator');
        if ( ! is_null($creator)) {
            $message['creator_id'] = $creator->getOID();
        } else {
            $message['creator_id'] = '';
        }
        $message['creator_name'] = $message_row->get('creator_name');
        $message['subject'] = $message_row->get('subject');
        $message['confirm'] = $message_row->get('confirm');

        if ($require_text) {
            $message['data'] = $message_row->get('data');
            $message['format_type'] = 0;
        } else {
            $message['data'] = $message_row->get('html_data');
            $message['format_type'] = 1;
            if (is_null($message['data']) || strlen($message['data']) === 0) {
                $message['data'] = $message_row->get('data');
                $message['format_type'] = 0;
            }
        }

        // check snapshot message
        $snapshot = $this->_getMessageRow($relation_row);
        $message['is_snapshot'] = $snapshot['is_snapshot'];
        if ($message['is_snapshot']) {
            $message['subject'] = '';
            $message['data'] = '';
        }

        return $message;
    }

    /**
     * get message CB_Row
     *
     * @description   if relation data has a snapshot message, return it.
     * @access        private
     *
     * @param    GRN_Message_FolderMessageRelations $relation_row relation CB_Row object
     *
     * @return   array    snapshot array
     *
     * return_array[]['message']     => CB_Row snapshot message object
     *                                  if snapshot doesn't exist, set an original one
     *               ['original']    => CB_Row original message object
     *               ['is_snapshot'] => 1: snapshot, 0: not
     */
    function _getMessageRow($relation_row)
    {
        $snapshot = [];
        $snapshot['is_snapshot'] = 1;

        $row = $relation_row->get('snapshot_message');
        if ( ! $row) {
            $row = $relation_row->get('message');
            $snapshot['is_snapshot'] = 0;
        }
        $snapshot['message'] = $row;
        $snapshot['original'] = $relation_row->get('message');

        return $snapshot;
    }

    /**
     * get addressee info
     *
     * @param    CB_User $user
     * @param    string  $message_id         message id
     * @param    boolean $for_modifing       TRUE: get addressee information for modifing
     *                                       default: FALSE
     * @param    boolean $get_sender         TRUE: get sender information
     *                                       default: FALSE
     * @param    boolean $check_privilege
     *
     * @return   array|boolean               addressees array
     *                                       if login user cannot access specified message, return FALSE.
     *
     * $addressees[]['id']          => addressee id
     *              ['name']        => addressee name
     *              ['confirmed']   => 1: confirmed specified message
     *              ['dtime']       => CB_TimeStamp deleted time
     *              ['delete_flag'] => 1: message is deleted or moved to garbage box
     *              ['rtime']       => CB_TimeStamp confirmed time
     *              ['is_sender']   => 1: sender, 0: addressee
     *                                 if $get_sender == TRUE, can get this key
     */
    function getAddressees(
        $user,
        $message_id,
        $for_modifing = false,
        $get_sender = false,
        $check_privilege = true
    ) {
        $user_id = $user->getOID();

        $lock = $this->_messages->_lock;
        $this->_messages->setLock(CB_DATABASE_NO_LOCK);
        $message = $this->_messages->getRow($message_id);
        $this->_messages->setLock($lock);

        if ( ! $message) {
            return false;
        }
        $message_owner = $message->get('creator');
        $message_owner_id = '';
        if ( ! is_null($message_owner)) {
            $message_owner_id = $message_owner->getOID();
        }

        $has_privilege
            = false; // TRUE if $user is a sender or one of addressees.

        if ($user_id == $message_owner_id) {
            $has_privilege = true;
        }

        $addressees = [];
        $db = $this->_getDBConnection();

        //  宛先ユーザーのID一覧を取り出す
        $conditions = [];
        $query = cb_queryf($db,
            'SELECT ' .
            'a._id,a.col_message,' .
            'a.col_addressee,' .
            'a.col_addressee_name,' .
            'a.col_view_order,' .
            'a.col_dtime,' .
            'a.col_delete_flag,' .
            'a.col_view_flag,' .
            'a.col_rtime,' .
            'a.col_is_sender,' .
            'a.col_is_operator,' .
            'a.col_follow,' .
            'a.col_finish_view_flag,' .
            'u._id as u_id,' .
            'u.col_deleted ' .
            'FROM tab_grn_message_addressees as a ' .
            'LEFT JOIN tab_cb_user u ON a.col_addressee = u._id ' .
            "WHERE col_message = '@S' AND u.col_deleted IS NULL " .
            'ORDER BY col_view_order', $message_id);
        $result = $db->query($query);
        while ($row = $db->fetch_assoc($result)) {
            $addressee = [];

            if (is_null($row['u_id'])) {
                continue;
            }

            $addressee['id'] = $row['u_id'];
            if ($addressee['id'] == $user_id) {
                $has_privilege = true;
            }
            if ( ! $get_sender && $row['col_is_sender']) {
                continue;
            }

            $addressee['name'] = $row['col_addressee_name'];
            $addressee['confirmed'] = $row['col_view_flag'];
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $row['col_dtime'];
            $addressee['dtime'] = $ts;
            $addressee['delete_flag'] = $row['col_delete_flag'];
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $row['col_rtime'];
            $addressee['rtime'] = $ts;
            $addressee['is_operator'] = $row['col_is_operator'];
            if ($get_sender) {
                $addressee['is_sender'] = $row['col_is_sender'];
            }

            $addressees[] = $addressee;
        }
        $db->free_result($result);
        if ($check_privilege && ! $has_privilege) {
            return false;
        }

        if ($for_modifing
            && ! _grn_message_regard_operator($addressees, $message_owner_id)
        ) {
            return false;
        }

        return $addressees;
    }

    /**
     *  指定の社内メールの宛先ユーザーの配列を返す。
     *  配列の要素は、そのユーザーが削除されてなければ CB_User オブジェクトとして、
     *  そうでなければ コピーされていたユーザー名( tab_grn_message_addressees.col_addressee_name )となる。
     *  ただし、削除ユーザーについては、引数 $with_deleted_user にTRUEを指定した時のみ配列に含まれる。
     *
     * @param string  $message_id
     * @param boolean $with_deleted_user
     *
     * @return CB_User[]
     */
    function getAddresseeUsers($message_id, $with_deleted_user = false)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        //  宛先ユーザーのID一覧を取り出す
        $conditions = [];
        $query = cb_queryf($db,
            "SELECT col_addressee, col_addressee_name FROM tab_grn_message_addressees WHERE col_message = '@S' AND col_dtime = 0 ORDER BY col_view_order",
            $message_id);
        $result = $db->query($query);
        $addressees = [];
        while ($row = $db->fetch_assoc($result)) {
            $addressees[] = $row;
            if ( ! is_null($row['col_addressee'])) {
                $conditions[] = $row['col_addressee'];
            }
        }
        $db->free_result($result);

        //  ユーザーIDからCB_Userに変換する
        $condition = null;
        if (count($conditions) > 0) {
            $condition = $db->format('_id IN ( @A ) ', [$conditions]);
        }
        $users = $this->_uum->getUsers(0, -1, null, $condition,
            $with_deleted_user);

        $result = [];
        foreach ($addressees as $addressee) {
            $user_id = $addressee['col_addressee'];
            //  宛先ユーザーが、完全削除されている( col_addressee IS NULL )か、
            //  削除フラグが立っている( そもそもUUMのgetUsers()の結果に含まれない )なら、
            //  削除されたーザーとして扱う
            if (is_null($user_id) || ( ! array_key_exists($user_id, $users))) {
                //  削除されたユーザーはコピーされていたユーザー名を返す。
                if ($with_deleted_user) {
                    $result[] = $addressee['col_addressee_name'];
                }
            } else {
                //  削除されていないユーザーは CB_User として返す。
                $result[] = $users[$user_id];
            }
        }

        return $result;
    }

    /**
     * get addressee info(skip user check)
     *
     * @param    string  $message_id       message id
     * @param    boolean $get_sender       TRUE: get sender information
     *                                     default: FALSE
     *
     * @return   mixed     addressees array
     *                     if login user cannot access specified message, return FALSE.
     *
     * $addressees[]['id']          => addressee id
     *              ['name']        => addressee name
     *              ['confirmed']   => 1: confirmed specified message
     *              ['dtime']       => CB_TimeStamp deleted time
     *              ['delete_flag'] => 1: message is deleted or moved to garbage box
     *              ['rtime']       => CB_TimeStamp confirmed time
     *              ['is_sender']   => 1: sender, 0: addressee
     *                                 if $get_sender == TRUE, can get this key
     */
    function getAddresseesSkipUserCheck($message_id, $get_sender = false)
    {
        $lock = $this->_messages->_lock;
        $this->_messages->setLock(CB_DATABASE_NO_LOCK);
        $message = $this->_messages->getRow($message_id);
        $this->_messages->setLock($lock);

        if ( ! $message) {
            return false;
        }

        $addressees = [];
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S'",
            $message_id));
        $rowset->addOrderColumn('col_view_order');
        while ( ! is_null($row = $rowset->iterate())) {
            if ( ! $get_sender && $row->get('is_sender')) {
                continue;
            }

            $addressee = [];
            $addressee_row = $row->get('addressee');
            if ( ! is_null($addressee_row)) {
                $addressee['id'] = $addressee_row->getOID();
            } else {
                $addressee['id'] = '';
            }
            $addressee['name'] = $row->get('addressee_name');
            $addressee['confirmed'] = $row->get('view_flag');
            $addressee['dtime'] = $row->get('dtime');
            $addressee['delete_flag'] = $row->get('delete_flag');
            $addressee['rtime'] = $row->get('rtime');

            if ($get_sender) {
                $addressee['is_sender'] = $row->get('is_sender');
            }

            $addressees[] = $addressee;
        }

        return $addressees;
    }

    /**
     * get follows
     *
     * @access   private
     *
     * @param    boolean              $read                 TRUE: login user is last modifier or
     *                                                      first time login user read
     * @param    CB_TimeStamp         $last_vtime           last view time CB_TimeStamp
     * @param    string               $message_id           message id
     * @param    GRN_Message_Messages $message_row          message CB_Row object
     * @param    int                  $offset               start position
     * @param    int                  $limit                follow number you wanna get
     *
     * @return   array                                follow list
     */
    function _getFollows(
        $read,
        $last_vtime,
        $message_id,
        $message_row,
        $offset = 0,
        $limit = 20,
        $mobile_view = false
    ) {
        $follows = [];

        // get an original message
        $original_message_row = $this->_getOriginalMessage($message_row);
        $original_message_id = $original_message_row->getOID();

        // compare ctime and last_mtime for snapshot
        $rowset = new CB_RowSet($this->_follows);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_id <= '@S'",
            $original_message_id, $message_row->get('last_follow_id')));
        $rowset->addOrderColumn('col_id', true);
        $rowset->limit($offset, $limit);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        while ( ! is_null($row = $rowset->iterate())) {
            $id = $row->getOID();
            $follows[$id] = [];
            $creator_row = $row->get('creator');
            if ( ! is_null($creator_row)) {
                $creator_id = $creator_row->getOID();
            } else {
                $creator_id = '';
            }
            $follows[$id]['creator_id'] = $creator_id;
            $follows[$id]['creator_name'] = $row->get('creator_name');
            $follows[$id]['ctime'] = $row->get('ctime');
            if ($mobile_view) {
                $follows[$id]['data'] = $row->get('data');
                $follows[$id]['format_type'] = 0;
            } else {
                $follows[$id]['data'] = $row->get('html_data');
                $follows[$id]['format_type'] = 1;
                if ($follows[$id]['data'] == '') {
                    $follows[$id]['data'] = $row->get('data');
                    $follows[$id]['format_type'] = 0;
                }
            }
            $follows[$id]['id'] = $row->get('id');

            // attached files
            $follows[$id]['files'] = $this->getFollowFiles($message_id, $id);

            $follows[$id]['read_flag'] = 1;
            if ( ! $read
                 && $last_vtime->unix_ts < $follows[$id]['ctime']->unix_ts
            ) {
                $follows[$id]['read_flag'] = 0;
            }
        }

        return $follows;
    }

    /**
     * @access   private
     *
     * @param bool                 $read
     * @param CB_TimeStamp         $last_vtime
     * @param string               $message_id
     * @param GRN_Message_Messages $message_row
     * @param string               $follow_id
     * @param int                  $limit
     *
     * @return array
     */
    function _getFollowsByFID(
        $read,
        $last_vtime,
        $message_id,
        $message_row,
        $follow_id,
        $limit = 20
    ) {
        $follows = [];

        // get an original message
        $original_message_row = $this->_getOriginalMessage($message_row);
        $original_message_id = $original_message_row->getOID();

        $last_follow_id = $message_row->get('last_follow_id');
        if ($follow_id > $last_follow_id) {
            $follow_id = $last_follow_id;
        }

        // compare ctime and last_mtime for snapshot
        $rowset = new CB_RowSet($this->_follows);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_id <= '@S'",
            $original_message_id, $follow_id));
        $rowset->addOrderColumn('col_id', true);
        $rowset->limit(0, $limit);
        $rowset->setLock(CB_DATABASE_NO_LOCK);
        while ( ! is_null($row = $rowset->iterate())) {
            $id = $row->getOID();
            $follows[$id] = [];
            $creator_row = $row->get('creator');
            if ( ! is_null($creator_row)) {
                $creator_id = $creator_row->getOID();
            } else {
                $creator_id = '';
            }
            $follows[$id]['creator_id'] = $creator_id;
            $follows[$id]['creator_name'] = $row->get('creator_name');
            $follows[$id]['ctime'] = $row->get('ctime');
            $follows[$id]['data'] = $row->get('html_data');
            $follows[$id]['id'] = $row->get('id');
            $follows[$id]['format_type'] = 1;
            if ($follows[$id]['data'] == '') {
                $follows[$id]['data'] = $row->get('data');
                $follows[$id]['format_type'] = 0;
            }

            // attached files
            $follows[$id]['files'] = $this->getFollowFiles($message_id, $id);

            $follows[$id]['read_flag'] = 1;
            if ( ! $read
                 && $last_vtime->unix_ts < $follows[$id]['ctime']->unix_ts
            ) {
                $follows[$id]['read_flag'] = 0;
            }
        }

        return $follows;
    }

    /**
     * @param CB_User $user
     * @param string  $relation_id
     * @param string  $follow_id
     *
     * @return bool
     */
    function getFollowOffset($user, $relation_id, $follow_id)
    {
        if ($relation_id == '') {
            return false;
        }

        //$relation_row = $this->_relations->getRow( $relation_id );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $relation_row = $table->getRow($relation_id);

        if ( ! $relation_row) {
            return false;
        }

        $relation_owner = $relation_row->get('user');
        if (is_null($relation_owner)) {
            return false;
        } else {
            if ($user->getOID() != $relation_owner->getOID()) {
                return false;
            }
        }

        $message_row = $relation_row->get('message');

        $last_follow_id = $message_row->get('last_follow_id');
        if ($follow_id > $last_follow_id) {
            $follow_id = $last_follow_id;
        }

        // compare ctime and last_mtime for snapshot
        $rowset = new CB_RowSet($this->_follows);
        $rowset->addCondition($rowset->queryf('col_message = \'@S\' AND col_id <= \'@S\' AND col_id > \'@S\'',
            $message_row->getOID(), $last_follow_id, $follow_id));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * get a follow
     *
     * @param    CB_User $user      user CB_User object
     * @param    string  $follow_id follow id
     *
     * @return   array|bool              follow data array
     *                                   if specified follow doesn't exist, return FALSE.
     *
     * follow['data']        => string   format_type=0: plain text, format_type=1:html
     *       ['data2']       => strgin   plain text
     *       ['format_type'] => int      format type ( 0: plain text, 1: html )
     */
    function getFollow($user, $follow_id)
    {
        // *****
        // check role
        // *****

        $lock = $this->_follows->_lock;
        $this->_follows->setLock(CB_DATABASE_NO_LOCK);
        $row = $this->_follows->getRow($follow_id);
        $this->_follows->setLock($lock);
        if ( ! $row) {
            return false;
        }

        $follow_owner = $row->get('creator');
        if (is_null($follow_owner)) {
            return false;
        } else {
            if ($user->getOID() != $follow_owner->getOID()) {
                return false;
            }
        }

        $data = $row->get('html_data');
        $format_type = 1;
        $data2 = $row->get('data');
        if ($data == '') {
            $data = $row->get('data');
            $format_type = 0;
        }

        $follow = [];
        $follow['data'] = $data;
        $follow['data2'] = $data2;
        $follow['format_type'] = $format_type;

        return $follow;
    }

    /**
     * get follow data (for cell phone)
     *
     * @param    string  $message_id メッセージID
     * @param    string  $follow_id  フォローID
     * @param    boolean $get_html   HTMLデータを取得するか(default: FALSE)
     *
     * @return   array|bool             フォローデータ
     *                                  メッセージもしくはフォローが存在しない場合はFALSE
     *
     * return_array['creator_id']   => string   フォロー発言者ID
     *             ['creator_name'] => string   フォロー発言者名
     *             ['ctime']        => CB_TimeStamp   発言日時
     *             ['id']           => string   メッセージ単位に付与されるフォローID
     *             ['data']         => string   本文/HTML本文
     *             ['format_type']  => string   書式タイプ(0: plain text, 1: HTML)
     *             ['has_files']    => boolean  添付ファイルがあるか(TRUE: あり, FALSE: なし)
     *             ['prev_fid']     => 直前のフォローID (存在しない場合は-1)
     *             ['next_fid']     => 直後のフォローID (存在しない場合は-1)
     */
    function getFollowDetail($message_id, $follow_id, $get_html = false)
    {
        $follow = [];

        $db = $this->_follows->getDBConnection();
        $rowset = new CB_RowSet($this->_follows);
        $rowset->addCondition(cb_queryf($db, 'col_message = \'@S\'',
            $message_id));
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        if ($rowset->count() == 0) {
            return false;
        }

        $exists = false;
        $follow['prev_fid'] = -1;
        while ( ! is_null($row = $rowset->iterate())) {
            $fid = $row->getOID();
            if ($fid == $follow_id) {
                $creator = $row->get('creator');
                $creator_id = '';
                if ( ! is_null($creator)) {
                    $creator_id = $creator->getOID();
                }
                $follow['creator_id'] = $creator_id;
                $follow['creator_name'] = $row->get('creator_name');
                $follow['ctime'] = $row->get('ctime');
                $follow['id'] = $row->get('id');

                if ($get_html) {
                    $follow['format_type'] = 1;
                    $follow['data'] = $row->get('html_data');
                    if ($follow['data'] == '') {
                        $follow['data'] = $row->get('data');
                        $follow['format_type'] = 0;
                    }
                } else {
                    $follow['data'] = $row->get('data');
                    $follow['format_type'] = 0;
                }

                require_once('message/file.csp');
                $fm = new GRN_Message_FileManager();
                $file_list = $fm->getFollowFiles($message_id,
                    $follow_id);
                $follow['has_files'] = false;
                if (count($file_list) > 0) {
                    $follow['has_files'] = true;
                }

                $exists = true;
                break;
            } else {
                $follow['prev_fid'] = $fid;
            }
        }

        if ( ! $exists) {
            return false;
        }

        $follow['next_fid'] = -1;
        $row = $rowset->iterate();
        if ( ! is_null($row)) {
            $follow['next_fid'] = $row->getOID();
        }

        $rowset->destroy();

        return $follow;
    }

    /**
     * move messages to garbage box
     *
     * @param    CB_User $user
     * @param    string  $folder_id source folder ID
     * @param    array   $relations relation IDs list
     *
     * @return   boolean   TRUE: success moving messages to garbage box
     */
    function moveMessages2GarbageBox($user, $folder_id, $relations)
    {
        $d_folder_id = $this->_folderlogic->getSpecificFolderID($user,
            GRN_MESSAGE_GARBAGEFOLDER);
        if ( ! $d_folder_id) {
            return false;
        }

        return $this->moveMessages($user, $folder_id, $d_folder_id, $relations);
    }

    /**
     * move all messages in the folder to garbage box
     *
     * @param    CB_User             $user
     * @param    string              $folder_id
     * @param    GRN_Message_Folders $garbage garbage box CB_Row (default: null)
     *
     * @return   boolean                           TRUE: success moving all messages to garbage box
     */
    function moveAllMessages2GarbageBox($user, $folder_id, $garbage = null)
    {
        //$relation_rowset = new CB_RowSet( $this->_relations );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $relation_rowset = new CB_RowSet($table, 'f');
        $relation_rowset->addCondition($relation_rowset->queryf("f.col_folder = '@S'",
            $folder_id));
        $user_table = $this->_manager->getTableInfo('CB_User');
        $on = 'f.col_user = u._id AND u.col_deleted IS NULL';
        $relation_rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN,
            'u');

        $user_id = $user->getOID();

        if (is_null($garbage)) {
            $garbage = $this->_folderlogic->getSpecificFolderRow($user,
                GRN_MESSAGE_GARBAGEFOLDER);
            if ( ! $garbage) {
                return false;
            }
        }

        $indexService = new IndexService();

        while ( ! is_null($relation_row = $relation_rowset->iterate())) {
            /** @var GRN_Message_FolderMessageRelations $relation_row */
            $relation_row->set('folder', $garbage);

            // set moving time
            $time = new CB_TimeStamp();
            $time->unix_ts = cb_get_db_timestamp();
            $relation_row->set('mtime', $time);

            // 送信/受信メッセージ共にごみ箱に存在するか
            /** @var GRN_Message_Messages $message */
            $message = $relation_row->get('message');
            $message_id = $message->getOID();
            //$rowset = new CB_RowSet( $this->_relations );
            $rowset = new CB_RowSet($table);
            $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S'",
                $user_id, $message_id));
            //  $user は CB_User なので、UUMが削除フラグチェック済み。
            $garbage_flag = true;
            while ( ! is_null($row = $rowset->iterate())) {
                $folder_row = $row->get('folder');
                if ($folder_row->get('folder_type')
                    != GRN_MESSAGE_GARBAGEFOLDER
                ) {
                    $garbage_flag = false;
                    break;
                }
            }
            // 削除フラグ
            if ($garbage_flag) {
                $this->_updateDeleteFlag($user_id, $message_id, '1');
            }

            $relation_row->updateNow();

            //Logging
            require_once('message/inspection.csp');
            $logger = GRN_Message_Logger_25::getInstance();
            $params = ['mid' => $message_id];
            $creator = $message->get('creator');
            if ($creator) {
                $params['creator_name'] = $creator->get('display_name');
            }
            $params['folder_id'] = $garbage->getOID();
            $logger->notice('move', 'message', $params);
            //End

            if (FtsApplication::isAvailable()) {
                if ($message->get('message_type') != GRN_MESSAGE_TYPE_DRAFT) {
                    $indexService->updateFolderMessageRelationIndex(
                        $message_id, $relation_row->getId('snapshot_message'),
                        $user_id,
                        $relation_row->get('sent_message_flag'),
                        $relation_row->getId('folder')
                    );

                    $elasticsearch_params = [
                        'addUserIds'      => [$user_id],
                        'addFolderIds'    => [$relation_row->getId('folder')],
                        'removeFolderIds' => [$folder_id]
                    ];
                    $indexService->updateEsFolderMessageRelationIndex(
                        $message_id,
                        $relation_row->getId('snapshot_message'),
                        $elasticsearch_params
                    );
                }
            }

            $this->runACLHook($message, 'update');
        }

        return true;
    }

    /**
     * 複数メッセージの移動
     *
     * @param    CB_User $user        ユーザー CB_Row オブジェクト
     * @param    string  $s_folder_id 移動元フォルダID
     * @param    string  $d_folder_id 移動先フォルダID
     * @param    array   $relations   リレーションIDのリスト
     *
     * @return   boolean   TRUE: success moving messages
     */
    function moveMessages($user, $s_folder_id, $d_folder_id, $relations)
    {
        // *****
        // 権限 & 存在チェック
        // *****

        /*
        // 移動先が同じ場合は何もしない
        if( $s_folder_id == $d_folder_id )
        {
            return TRUE;
        }
         */
        if ( ! $user) {
            return false;
        }

        $user_id = $user->getOID();

        $s_folder_row = $this->_folders->getRow($s_folder_id);
        if ( ! $s_folder_row) {
            return false;
        }
        $s_folder_owner = $s_folder_row->get('user');
        if (is_null($s_folder_owner)) {
            return false;
        } else {
            if ($user_id != $s_folder_owner->getOID()) {
                return false;
            }
        }

        $d_folder_row = $this->_folders->getRow($d_folder_id);
        if ( ! $d_folder_row) {
            return false;
        }
        $d_folder_owner = $d_folder_row->get('user');
        if (is_null($d_folder_owner)) {
            return false;
        } else {
            if ($user_id != $d_folder_owner->getOID()) {
                return false;
            }
        }

        $table = $this->getUserRelationTable($user_id);
        foreach ($relations as $relation_id) {
            $relation_row = $this->getUserRelationRow($user_id, $relation_id);
            if ($relation_row == null) {
                return false;
            }

            // 移動先が同じ場合は何もしない
            if ($s_folder_id == $d_folder_id) {
                continue;
            }

            // メッセージ移動
            $relation_row->set('folder', $d_folder_row);

            $message_row = $relation_row->get('message');
            $message_id = $message_row->getOID();

            if (FtsApplication::isAvailable()) {
                if ($message_row->get('message_type')
                    != GRN_MESSAGE_TYPE_DRAFT
                ) {
                    $indexService = new Indexservice();
                    $indexService->updateFolderMessageRelationIndex(
                        $message_id, $relation_row->getId('snapshot_message'),
                        $user_id, $relation_row->get('sent_message_flag'),
                        $d_folder_id
                    );

                    $elasticsearch_params = [
                        'addFolderIds'    => [$d_folder_id],
                        'removeFolderIds' => [$s_folder_id]
                    ];
                    $indexService->updateEsFolderMessageRelationIndex(
                        $message_id,
                        $relation_row->getId('snapshot_message'),
                        $elasticsearch_params
                    );
                }
            }

            // ごみ箱チェック
            if ($d_folder_row->get('folder_type')
                == GRN_MESSAGE_GARBAGEFOLDER
            ) {
                // set moving time
                $time = new CB_TimeStamp();
                $time->unix_ts = cb_get_db_timestamp();
                $relation_row->set('mtime', $time);

                // ごみ箱への移動
                // 送信/受信メッセージ共にごみ箱に存在するか
                //$rowset = new CB_RowSet( $this->_relations );
                $rowset = new CB_RowSet($table);
                $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S' ",
                    $user_id, $message_id));
                //  $user は CB_User なので、UUMが削除フラグチェック済み。
                $garbage_flag = true;
                while ( ! is_null($row = $rowset->iterate())) {
                    $folder_row = $row->get('folder');
                    if ($folder_row->get('folder_type')
                        != GRN_MESSAGE_GARBAGEFOLDER
                    ) {
                        $garbage_flag = false;
                        break;
                    }
                }
                // 削除フラグ
                if ($garbage_flag) {
                    $this->_updateDeleteFlag($user_id, $message_id, '1');
                    // remove star item
                    $star_logic = $this->_getStarLogic();
                    $star_logic->remove($user, GRN_MESSAGE_MODULEID,
                        $message_id);
                }
                $this->runACLHook($message_row, 'update');
            } elseif ($s_folder_row->get('folder_type')
                      == GRN_MESSAGE_GARBAGEFOLDER
            ) {
                // ごみ箱からの移動
                $time = new CB_TimeStamp();
                $time->unix_ts = 0;
                $relation_row->set('mtime', $time);

                $this->_updateDeleteFlag($user_id, $message_id, '0');
                $this->runACLHook($message_row, 'update');
            } else {
                // update star item(if exist)
                $star_logic = $this->_getStarLogic();
                if ($star_data = $star_logic->getStar($user,
                    GRN_MESSAGE_MODULEID, $message_id)
                ) {
                    $org_data = $star_data->getOrgData();
                    $org_data['cid'] = $d_folder_row->getOID();
                    $star_data->setOrgData($org_data);
                    // update
                    $star_logic->modify($user, $star_data);
                }
            }

            //Logging
            $message_owner = $message_row->get('creator');
            $creator_name = is_null($message_owner)
                ? $message_row->get('creator_name')
                : $message_owner->get('display_name');
            require_once('message/inspection.csp');
            $logger = GRN_Message_Logger_25::getInstance();
            $params = [
                'mid'          => $message_id,
                'creator_name' => $creator_name,
                'folder_id'    => $d_folder_row->getOID()
            ];
            $logger->notice('move', 'message', $params);
            //End
        }

        return true;
    }

    /**
     * Mark as unread messages of User
     *
     * @param CB_User $user      User Object
     * @param array   $relations relation ID
     *
     * @return bool
     */
    function markAsUnreadMessages(\CB_User $user, array $relations): bool
    {
        $addressees_dao = new GrnMessageAddresseeDAO();
        $user_id = $user->getOID();
        $time = new CB_TimeStamp();
        $time->unix_ts = 0;
        $message_ids = [];
        foreach ($relations as $relation_id) {
            $relation_row = $this->getUserRelationRow($user_id, $relation_id);
            if ( ! $relation_row) {
                return false;
            }

            $relation_row->set('last_vtime', $time);
            $relation_row->updateNow();
            $message_row = $relation_row->get('message');
            $message_ids[] = $message_row->getOID();
        }
        $addressees_dao->resetMessageAcknowledgment($user_id, $message_ids);

        return true;
    }

    /**
     * Mark as read messages of user
     *
     * @param CB_User $user      User Object
     * @param array   $relations relation ID
     *
     * @return bool
     */
    function markAsReadMessages(\CB_User $user, array $relations): bool
    {
        $user_id = $user->getOID();
        $time = new CB_TimeStamp();
        $time->unix_ts = cb_get_db_timestamp();
        foreach ($relations as $relation_id) {
            $relation_row = $this->getUserRelationRow($user_id, $relation_id);
            if ( ! $relation_row) {
                return false;
            }
            $relation_row->set('last_vtime', $time);
            $relation_row->updateNow();
        }

        return true;
    }


    /**
     * Get User Relation Row
     *
     * @param int $user_id     User ID
     * @param int $relation_id Relation ID
     *
     * @return CB_Row|mixed|null
     */
    private function getUserRelationRow(int $user_id, int $relation_id)
    {

        $relation_row = $this->getUserRelationTable($user_id)->getRow($relation_id);
        if ( ! $relation_row || is_null($relation_row->get('user'))) {
            return null;
        }

        $relation_user = $relation_row->get('user');
        if ($relation_user->getOID() != $user_id) {
            return null;
        }

        return $relation_row;
    }

    /**
     * @param int $user_id User ID
     *
     * @return CB_TableInfo|GRN_TableInfo
     */
    private function getUserRelationTable(int $user_id)
    {
        $table_name = grn_get_personal_tablename_message($user_id, GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);

        return $table;
    }
    /**
     * メッセージを完全削除
     *
     * @param    CB_User $user         ユーザー CB_User object
     * @param    array   $message_list メッセージリスト
     *
     * @return   boolean   TRUE: success deleting messages
     *
     * $message_list[リレーションID] = メッセージID
     */
    function deleteMessages($user, $message_list)
    {
        // *****
        // 権限 & 存在チェック
        // *****

        $user_id = $user->getOID();

        foreach ($message_list as $relation_id => $message_id) {
            //$row = $this->_relations->getRow( $relation_id );
            $table_name = grn_get_personal_tablename_message($user->getOID(),
                GRN_MESSAGE_FOLDERMESSAGERELATIONS);
            $table = $this->_manager->getTableInfo($table_name);
            $row = $table->getRow($relation_id);
            if ( ! $row || is_null($row->get('user'))) {
                return false;
            }

            if ($row->getId('message') != $message_id) {
                return false;
            }

            $relation_user = $row->get('user');
            if ($relation_user->getOID() != $user_id) {
                return false;
            }
            unset($relation_user);

            $s_folder = $row->get('folder');
            $folder_is = $s_folder->getOID();
            $row->delete();

            if (FtsApplication::isAvailable()) {
                $indexService = new IndexService();
                $indexService->deleteFolderMessageRelationIndex(
                    $message_id, $user_id, $row->get('sent_message_flag')
                );

                $indexEsService = new IndexService();
                $elasticsearch_params = [
                    'removeUserIds'   => [$user_id],
                    'removeFolderIds' => [$folder_is]
                ];
                $indexEsService->updateIndexEsFolderMessageRelation($message_id,
                    $elasticsearch_params);
            }

            // (可能ならば)宛先の削除フラグ更新
            $this->_updateDeleteFlag($user->getOID(), $message_id, '1');

            // *****
            // delete original/snapshot
            // *****

            // delete notification data
            $notification = new GRN_Message_NotificationListener();
            $ret = $notification->deleteNotification($user,
                $message_id);
            if ( ! $ret) {
                return false;
            }

            // 送信者、受信者全てからメッセージが削除されたかチェック
            //$rowset = new CB_RowSet( $this->_relations );
            $message_users = [];

            $message_table
                = $this->_manager->getTableInfo('GRN_Message_Messages');
            $message_row = $message_table->getRow($message_id);
            $creator = $message_row->get('creator');
            $creator_id = null;
            if ($creator) {
                $creator_id = $creator->getOID();
                $message_users[] = $creator_id;
            }

            $message_addressees
                = $this->_manager->getTableInfo('GRN_Message_Addressees');
            $rowset = new CB_RowSet($message_addressees);
            $rowset->addCondition($rowset->queryf("col_message = '@S'",
                $message_id));
            while ( ! is_null($message_address_row = $rowset->iterate())) {
                //  削除されていない宛先ユーザーのリストを作る。
                //  ユーザーが削除されている場合は CB_Rowから CB_User はとれないので、ここでは削除フラグはみない
                $receiver = $message_address_row->get('addressee');
                if ($receiver) {
                    $receiver_id = $receiver->getOID();
                    if ( ! is_null($creator_id)
                         && $creator_id === $receiver_id
                    ) {
                        continue;
                    }
                    if ($receiver_id !== $user->getOID()) {
                        $message_users[] = $receiver->getOID();
                        //break;
                    }
                }
            }
            $rowset->destroy();

            $message = $this->_messages->getRow($message_id);
            if ( ! $message) {
                return false;
            }

            $count = 0;
            foreach ($message_users as $message_user_id) {
                $relation_table_name
                    = grn_get_personal_tablename_message($message_user_id,
                    GRN_MESSAGE_FOLDERMESSAGERELATIONS);
                $relation_table
                    = $this->_manager->getTableInfo($relation_table_name);
                $rowset = new CB_RowSet($relation_table);
                //メッセージがsnapshotならば、folderにsnapshotがあるかどうか
                if ($message->get('original_message')) {
                    $rowset->addCondition($rowset->queryf("col_snapshot_message = '@S' AND col_user = '@S'",
                        $message_id, $message_user_id));
                } //そうでなければ、folderに original があるかどうか
                else {
                    $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_user = '@S'",
                        $message_id, $message_user_id));
                }
                //  宛先ユーザーは、リストを作る段階で削除フラグチェック済み。
                $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
                $result = $rowset->iterate();
                $rowset->destroy();
                $count += $result['count'];
                if ($count > 0) {
                    break;
                }
            }

            if ($count == 0) {
                $message_boxes
                    = $this->_manager->getTableInfo('GRN_Message_MessageBoxes');
                $rowset = new CB_RowSet($message_boxes);
                //メッセージがsnapshotならば、folderにsnapshotがあるかどうか
                if ($message->get('original_message')) {
                    $rowset->addCondition($rowset->queryf("col_snapshot_message = '@S'",
                        $message_id));
                } //そうでなければ、folderに original があるかどうか
                else {
                    $rowset->addCondition($rowset->queryf("col_message = '@S'",
                        $message_id));
                }
                //  $message_id は UUMから取ってきた CB_User の id のリストなので、削除フラグチェック済み。
                $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
                $result = $rowset->iterate();
                $rowset->destroy();
                $count += $result['count'];
            }

            if ($count == 0) {
                // メッセージ本体を削除
                $ret = $this->deleteMessageData($user, [$message_id], false);
                if ( ! $ret) {
                    return false;
                }
            } else {
                //Logging
                require_once('message/inspection.csp');
                $logger = GRN_Message_Logger_25::getInstance();
                $params = ['mid' => $message_row->getOID()];
                if ($creator) {
                    $params['creator_name'] = $creator->get('display_name');
                }
                if ($s_folder) {
                    $params['source_folder_id'] = $s_folder->getOID();
                }
                $logger->notice('delete', 'message', $params);
                //End

                // 本体は削除されていないのでACLを更新する
                $this->runACLHook($message_row, 'update');
            }
        }

        return true;
    }

    /**
     * メッセージ本体を削除
     *
     * @param    CB_User $user            user CB_User object
     * @param    array   $message_list    message id list
     * @param    boolean $isCheckOperator check operator
     *
     * @return   boolean   TRUE: success deleting messages
     */
    function deleteMessageData($user, $message_list, $isCheckOperator = true)
    {
        // *****
        // check role
        // *****

        require_once('message/file.csp');
        require_once('message/inspection.csp');
        $fm = new GRN_Message_FileManager();
        $notification = new GRN_Message_NotificationListener();
        $logger = GRN_Message_Logger_25::getInstance();

        foreach ($message_list as $message_id) {
            $row = $this->_messages->getRow($message_id);
            if ( ! $row) {
                continue;
            }

            // log
            $addressee_list = $this->getAddressees($user, $message_id,
                $isCheckOperator);
            if ($addressee_list === false) {
                $app_name = cb_msg(GRN_MESSAGE_MODULEID, 'application_name');
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                    ['app_name' => $app_name],
                    ['app_name' => $app_name],
                    ['app_name' => $app_name]);
            }
            $addressee_name_list = [];
            $addresses_uid_list = [];
            foreach ($addressee_list as $addressee) {
                $addressee_name_list[] = $addressee['name'];
                $addresses_uid_list[] = $addressee['id'];
            }
            $file_list = $this->getMessageFiles($message_id);
            $file_name_list = [];
            foreach ($file_list as $file) {
                if (array_key_exists('name', $file)) {
                    $file_name_list[] = $file['name'];
                }
            }
            $creator = $row->get('creator');
            $creator_name = is_null($creator) ? $row->get('creator_name')
                : $creator->get('display_name');
            $params = [
                'mid'            => $row->getOID(),
                'creator_name'   => $creator_name,
                'subject'        => $row->get('subject'),
                'data'           => $row->get('data'),
                'file_name_'     => $file_name_list,
                'receiver_name_' => $addressee_name_list,
            ];
            $logger->notice('delete', 'message', $params);

            // delete message
            $addresses_uid_list[] = $user->getOID();
            $ret = $this->deleteMessageDataUsingRow_users($fm,
                $notification, $row, $addresses_uid_list);
            if ( ! $ret) {
                $ret = false;

                return $ret;
            }
        }
        $ret = true;

        return $ret;
    }

    /**
     * delete specified draft message
     *
     * @param    CB_User $user       CB_User
     * @param    string  $message_id draft id
     *
     * @return   boolean   TRUE: success deleting
     */
    function deleteDraft($user, $message_id)
    {
        $ret = false;
        $row = $this->_messages->getRow($message_id);
        if ( ! $row) {
            return $ret;
        }

        // check privilege
        $creator = $row->get('creator');
        if ($creator && $creator->getOID() != $user->getOID()) {
            $ret = false;

            return $ret;
        }

        require_once('message/file.csp');
        $fm = new GRN_Message_FileManager();
        $fm->deleteClosedFiles($message_id);

        $row->delete();

        // delete star
        $logic = $this->_getStarLogic();
        $logic->remove($user, GRN_MESSAGE_MODULEID, $message_id);  // end

        $ret = true;

        return $ret;
    }

    /**
     * @param GRN_Message_FileManager          $fm
     * @param GRN_Message_NotificationListener $notification
     * @param GRN_Message_Messages             $message_row
     * @param array                            $uid_list
     *
     * @return bool
     */
    function deleteMessageDataUsingRow_users(
        $fm,
        $notification,
        $message_row,
        $uid_list
    ) {
        if ( ! is_object($message_row)) {
            return false;
        }

        $message_id = $message_row->getOID();

        $original_message = $message_row->get('original_message');
        // Don't delete snapshot files.
        if ( ! $original_message) {
            // delete attached files
            $fm->deleteClosedFiles($message_id);
        }

        // delete notification data & star data
        $star = $this->_getStarLogic();
        foreach ($uid_list as $uid) {
            if ($uid > 0) //GTM-529
            {
                $user_tmp = $this->_uum->getUser($uid);
                $notification->deleteNotification($user_tmp, $message_id);
                $star->remove($user_tmp, GRN_MESSAGE_MODULEID, $message_id);
            }
        }

        if (FtsApplication::isAvailable()) {
            $indexService = new IndexService();
            $indexService->deleteMessageIndex($message_id);
        }

        // delete message data
        $message_row->delete();

        return true;
    }

    /**
     * メッセージ削除フラグを更新
     *
     * @param    string $user_id     ユーザーID
     * @param    string $message_id  メッセージID
     * @param    string $delete_flag 削除フラグ
     */
    function _updateDeleteFlag($user_id, $message_id, $delete_flag)
    {
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_addressee = '@S'",
            $message_id, $user_id));
        if ( ! is_null($row = $rowset->iterate())) {
            $row->set('delete_flag', $delete_flag);
        }
    }

    /**
     * 指定されたメッセージの前後のrelation id, message idを返す
     *
     * @param    CB_User $user        user CB_User object
     * @param    string  $folder_id   folder id
     * @param    string  $relation_id relation id
     * @param    string  $sort        sort parameter (default: ctime)
     * @param    bool    $reverse     TRUE: sort reverse (default: TRUE)
     *
     * @return   array    array['previous']['rid']  => previous message's rid
     *                                     ['mid']  => previous message's mid
     *                                     ['type'] => previous message's type
     *                                     ['sp']   => previous message's position
     *                         ['next']['rid']      => next message's rid
     *                                 ['mid']      => next message's mid
     *                                 ['type']     => next message's type
     *                                 ['sp']       => next message's position
     */
    function getPreviousNextIDs(
        $user,
        $folder_id,
        $relation_id,
        $sort = 'ctime',
        $reverse = true
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $columns = [
            'r._id rid',
            'col_message',
            'col_sent_message_flag'
        ];

        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        //$tables = array( 'tab_grn_message_foldermessagerelations r',
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $from = $table_name . ' r ';
        $tables = [
            $from,
            'tab_grn_message_messages m'
        ];
        //escape!
        $conditions = [
            'col_user = \'' . $db->escape($user->getOID()) . '\'',
            'col_folder = \'' . $db->escape($folder_id) . '\'',
            'col_message = m._id'
        ];

        $query = 'SELECT ' . implode(', ', $columns) . ' FROM ' . implode(', ',
                $tables) . ' WHERE ' . implode(' AND ', $conditions);
        $rev = $reverse ? ' DESC' : '';
        $query .= ' ORDER BY m.col_' . $sort . $rev;
        $query .= ', r._id' . $rev;

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $previous_rid = -1;
        $previous_mid = -1;
        $previous_type = '';
        $previous_sp = -1;
        while ($row = $db->fetch_assoc($result)) {
            $rid = $row['rid'];
            if ($rid == $relation_id) {
                break;
            }
            $previous_rid = $rid;
            $previous_mid = $row['col_message'];
            $previous_type = $row['col_sent_message_flag'];
            $previous_sp++;
        }

        $next_rid = -1;
        $next_mid = -1;
        $next_type = '';
        $next_sp = 0;
        if ($row = $db->fetch_assoc($result)) {
            $next_rid = $row['rid'];
            $next_mid = $row['col_message'];
            $next_type = $row['col_sent_message_flag'];
            $next_sp = $previous_sp + 2;
        }
        $db->free_result($result);

        $ids = [];
        $ids['previous'] = [];
        $ids['next'] = [];
        $ids['previous']['rid'] = $previous_rid;
        $ids['previous']['mid'] = $previous_mid;
        $ids['previous']['type'] = $previous_type;
        $ids['previous']['sp'] = $previous_sp;
        $ids['next']['rid'] = $next_rid;
        $ids['next']['mid'] = $next_mid;
        $ids['next']['type'] = $next_type;
        $ids['next']['sp'] = $next_sp;

        return $ids;
    }

    /**
     * フォルダ内メッセージ一覧取得
     *
     * @param    CB_User $user        ユーザー CB_Row オブジェクト
     * @param    string  $folder_id   フォルダID
     * @param    string  $folder_type folder type
     * @param    string  $sort        ソートキー(default: ctime)
     * @param    boolean $reverse     ソート方向(TRUE: 降順, FALSE: 昇順, default: TRUE)
     * @param    int     $offset      表示位置(default: 0)
     * @param    int     $limit       表示件数(default: 20)
     * @param    string  $col_time
     * @param    bool    $check_deleted_user
     *
     * @return   array     メッセージリスト
     *
     * メッセージリスト[リレーションID] メッセージリスト
     *
     * [リレーションID]['message_id']   メッセージID
     *                 ['subject']      表題
     *                 ['creator_id']   差出人ID
     *                 ['user_id']      差出人/受取人名ID
     *                 ['user_name']    差出人/受取人名
     *                 ['other_user']   他受取人がいるか(TRUE: いる, FALSE:いない)
     *                 ['date']         作成/更新/最終更新/削除日時
     *                 ['message_type'] 0: 受信メッセージ, 1: 送信メッセージ, 2: 下書き
     *                 ['note']         備考情報
     *                 ['status']       閲覧状況(0: 未読, 1:更新, 2:既読)
     *                 ['need_confirm'] 閲覧確認(1: 必要, 0:必要なし)
     *                 ['confirmed']    確認状況(0: 未確認, 1: 確認済み)
     *                 ['is_subscribed'] 購読状態(0: 未購読, 1: 購読)
     *                 ['has_files']    has attached files (0: no file)
     *                 ['file_size']    file size
     *                 ['touched']      メッセージ作成後に、メッセージが触られたかを示すフラグ
     */
    function getMessageList(
        $user,
        $folder_id,
        $folder_type,
        $sort = 'ctime',
        $reverse = true,
        $offset = 0,
        $limit = 20,
        $col_time = 'ctime',
        $check_deleted_user = true
    ) {
        // *****
        // 権限チェック
        // *****

        $user_id = $user->getOID();

        $sort_tab_name = 'm';
        if ($sort == 'mtime') {
            $sort_tab_name = 'r';
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $columns = [
            'm._id mid',
            's._id sid',
            'm.col_subject msubject',
            's.col_subject ssubject',
            'm.col_creator mcreator',
            's.col_creator screator',
            'm.col_creator_name mcreator_name',
            's.col_creator_name screator_name',
            'm.col_confirm mconfirm',
            's.col_confirm sconfirm',
            'm.col_ctime mctime',
            's.col_ctime sctime',
            'm.col_last_mtime mlast_mtime',
            's.col_last_mtime slast_mtime',
            'm.col_file_num mfile_num',
            's.col_file_num sfile_num',
            'm.col_file_size mfile_size',
            's.col_file_size sfile_size',
            'r._id rid',
            'r.col_mtime rmtime',
            'col_last_vtime',
            'col_subscription_flag',
            'col_sent_message_flag',
            $sort_tab_name . '.col_' . $sort . ' ' . $sort_tab_name . $sort,
        ];

        $table_name = grn_get_personal_tablename_message($user_id,
            'grn_message_foldermessagerelations');
        $tables = '(' . 'tab_' . $table_name
                  . ' r INNER JOIN tab_grn_message_messages m on r.col_message = m._id) LEFT JOIN tab_grn_message_messages s on r.col_snapshot_message = s._id';
        //  宛先/送信ユーザーは削除されていようが、いまいが表示しなければならないので、ここでは取りだすこと。
        //  また、削除ユーザーかどうかは、後で確認している

        $conditions[] = $db->format("r.col_user = '@S'", [$user_id]);
        $conditions[] = $db->format("r.col_folder = '@S'", [$folder_id]);

        $query = sprintf('SELECT %s FROM %s WHERE %s', implode(',', $columns),
            $tables,
            implode(' AND ', $conditions));
        $rev = $reverse ? ' DESC' : '';

        if ($sort == 'last_mtime') {
            $query .= ' ORDER BY  COALESCE( s.col_last_mtime, m.col_last_mtime ) '
                      . $rev . ' , m._id' . $rev;
        } else {
            $query .= ' ORDER BY ' . $sort_tab_name . '.col_' . $sort . $rev
                      . ', m._id' . $rev;
        }

        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);

        $ts = new CB_TimeStamp();

        $message_list = [];
        if (cb_is_db_result($result)) {
            while ($row = $db->fetch_assoc($result)) {
                $id = $row['rid'];
                $prefix = 'm';
                if ( ! is_null($row['sid'])) {
                    $prefix = 's';
                }
                $message_id = $row[$prefix . 'id'];
                $message_list[$id] = [
                    'message_id' => $row['mid'],
                    'subject'    => $row[$prefix . 'subject'],
                    'touched'    => $row[$prefix . 'last_mtime']
                                    !== $row[$prefix . 'ctime']
                ];

                $creator_id = '';
                if ( ! is_null($row[$prefix . 'creator'])) {
                    $creator_id = $row[$prefix . 'creator'];
                }
                $message_list[$id]['creator_id'] = $creator_id;

                if ($folder_type != GRN_MESSAGE_SENDINGFOLDER) {
                    $message_list[$id]['user_id'] = $creator_id;
                    $message_list[$id]['user_name'] = $row[$prefix
                                                           . 'creator_name'];
                } else // if outbox, use addressee's id and name
                {
                    //  2.5.4 までは宛先ユーザーを取りだす必要があったので、宛先から削除されたユーザー(col_dtime != 0)は除くが、削除ユーザーはとりだしていた。
                    // 3.0 からは宛先から削除されたユーザー(col_dtime != 0)だけでなく、自分で削除したユーザー(col_delete_flag IS NOT NULL )も除く
                    $query
                        = "SELECT col_addressee, col_addressee_name, col_dtime, col_delete_flag "
                          . "FROM tab_grn_message_addressees a "
                          . "WHERE "
                          . $db->format("col_message = '@S' ", [$message_id])
                          . "AND col_is_sender = 0 ORDER BY col_view_order";

                    $result_a = $db->query($query);

                    $addressee_id = '';
                    $addressee_name = '';
                    while ($row_a = $db->fetch_assoc($result_a)) {
                        if ( ! is_null($row_a['col_addressee'])) {
                            $addressee_id = $row_a['col_addressee'];
                        }

                        $addressee_name = $row_a['col_addressee_name'];

                        if ($addressee_id == $user_id
                            || $row_a['col_dtime'] != 0
                            || $row_a['col_delete_flag']
                        ) {
                            $addressee_name = null;
                            continue;
                        } else {
                            $db->free_result($result_a);
                            break;
                        }
                    }

                    // if all addressees're deleted, show user info
                    if (is_null($addressee_name)) {
                        $addressee_id = $user_id;
                        $addressee_name = $user->get('display_name');
                    }

                    $message_list[$id]['user_id'] = $addressee_id;
                    $message_list[$id]['user_name'] = $addressee_name;
                }

                $message_list[$id]['need_confirm'] = $row[$prefix . 'confirm'];

                $message_list[$id]['is_subscribed']
                    = $row['col_subscription_flag'];

                $ts->unix_ts = $row['col_last_vtime'];
                $last_vtime = clone $ts;
                $ts->unix_ts = $row[$prefix . 'last_mtime'];
                $last_mtime = clone $ts;

                // 未読チェック
                $message_list[$id]['status'] = 2;     // 既読

                if ($last_vtime->unix_ts == 0) {
                    $message_list[$id]['status'] = 0; // 未読
                } elseif ($last_vtime->unix_ts < $last_mtime->unix_ts) {
                    // 最終閲覧日時 < 最終更新日時
                    $message_list[$id]['status'] = 1; // 更新
                }

                if ($folder_type != GRN_MESSAGE_GARBAGEFOLDER) {
                    if ($sort == 'last_mtime') {
                        $ts->unix_ts = $row['slast_mtime'];
                        if (is_null($ts->unix_ts)) {
                            $ts->unix_ts = $row['mlast_mtime'];
                        }
                    } else {
                        $ts->unix_ts = $row[$sort_tab_name . $col_time];
                    }
                    $message_list[$id]['date'] = clone $ts;
                } else {
                    $ts->unix_ts = $row['rmtime'];
                    $message_list[$id]['date'] = clone $ts;
                }
                require_once('message/file.csp');
                $fm = new GRN_Message_FileManager();
                $message_list[$id]['has_files']
                    = $fm->getMessageFileNum($message_id, false);

                $message_list[$id]['file_size'] = $row[$prefix . 'file_size'];

                $message_list[$id]['message_type']
                    = $row['col_sent_message_flag'];
                $message_list[$id]['confirmed'] = 0;
                if ($message_list[$id]['message_type'] == 0) {

                    $query = "SELECT col_view_flag "
                             . "FROM tab_grn_message_addressees a "
                             . "WHERE "
                             . $db->format("col_message = '@S' AND col_addressee = '@S'",
                            [$message_id, $user_id]);
                    $query = $db->select_format($query, 0, 1,
                        CB_DATABASE_NO_LOCK);
                    $result_a = $db->query($query);
                    $row_a = $db->fetch_assoc($result_a);
                    $db->free_result($result_a);
                    $message_list[$id]['confirmed'] = $row_a['col_view_flag'];
                }
            }
        }

        //  削除ユーザーを確認する。送信ユーザーが削除されている場合は、そのユーザーIDをNULLに書き換える。
        if ($check_deleted_user) {
            $check_user_id_names = ['creator_id', 'user_id'];
            $user_id_map = [];
            foreach ($message_list as $message) {
                foreach ($check_user_id_names as $id_name) {
                    $user_id = $message[$id_name];
                    if (( ! is_null($user_id)) && (0 < strlen($user_id))) {
                        $user_id_map[$user_id] = true;
                    }
                }
            }

            $user_id_list = array_keys($user_id_map);
            if (0 < count($user_id_list)) {
                //  ユーザーが削除されているか確認する
                $users = $this->_uum->getUsersById($user_id_list);

                foreach ($message_list as $mid => $message) {
                    //  ユーザーが削除されていれば、IDをNULLに書き換える
                    foreach ($check_user_id_names as $id_name) {
                        $creator_id = $message[$id_name];
                        if (( ! is_null($creator_id))
                            && (0 < strlen($creator_id))
                            && ( ! array_key_exists($creator_id, $users))
                        ) {
                            $message_list[$mid][$id_name] = null;
                        }
                    }
                }
            }
        }

        return $message_list;
    }

    /**
     * get the number of message in the specified folder
     *
     * @access   private
     *
     * @param    CB_User $user      user CB_User object
     * @param    string  $folder_id folder id
     *
     * @return   string   the number of message
     */
    function getTotalMessageNum($user, $folder_id)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        //escape!
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'grn_message_foldermessagerelations');
        $query = 'SELECT COUNT(*) count FROM ' . 'tab_' . $table_name
                 . ' f WHERE col_user=\'' . $db->escape($user->getOID())
                 . '\' AND col_folder=\'' . $db->escape($folder_id) . '\'';
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row['count'];

    }

    /**
     * get total follow number
     *
     * @param    CB_User $user        user CB_User object
     * @param    string  $relation_id relation id
     * @param    string  $message_id  message id
     *
     * @return   string                 total follow number
     */
    function getTotalFollowNum($user, $relation_id, $message_id)
    {
        // *****
        // check role
        // *****

        // get primary relation and message
        //$relation_row =& $this->_relations->getRow( $relation_id );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $relation_row = $table->getRow($relation_id);

        $snapshot_array = $this->_getMessageRow($relation_row);
        /** @var GRN_Message_Messages $message_row */
        $message_row = $snapshot_array['message'];

        // get last modified time
        $last_mtime = $message_row->get('last_mtime');

        // get follows
        $rowset = new CB_RowSet($this->_follows);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_ctime <= '@S'",
            $message_id, $last_mtime->unix_ts));
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $result = $rowset->iterate();
        $rowset->destroy();

        return $result['count'];
    }

    /**
     * @access   private
     *
     * @param CB_User $user
     * @param string  $relation_id
     * @param string  $message_id
     *
     * @return GRN_Message_FolderMessageRelations|bool
     */
    function _getPrimaryRelationRow($user, $relation_id, $message_id)
    {
        //$row =& $this->_relations->getRow( $relation_id );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $row = $table->getRow($relation_id);
        $user_id = $user->getOID();
        if ( ! $row || is_null($row->get('user'))) {
            //$rowset = new CB_RowSet( $this->_relations );
            $rowset = new CB_RowSet($table);
            $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S'",
                $user_id, $message_id));
            //  $user は CB_User なので、UUMが削除フラグチェック済み。
            $row = $rowset->iterate();
            if (is_null($row)) {
                {
                    $___ret = false;

                    return $___ret;
                }
            }
        }

        // check privilege
        $relation_owner = $row->get('user');
        if (is_null($relation_owner)) {
            {
                $___ret = false;

                return $___ret;
            }
        } else {
            if ($user_id != $relation_owner->getOID()) {
                {
                    $___ret = false;

                    return $___ret;
                }
            }
        }

        return $row;
    }

    /**
     * get primary relation id
     *
     * @description   if $user doesn't have a message which has specified
     *                relation id, try to return an OID of a relation row
     *                which has a specified message id. if can't find a relation
     *                row which has a specified message id, return FALSE.
     *
     * @param    CB_User $user
     * @param    string  $relation_id relation id
     * @param    string  $message_id  message id
     *
     * @return   mixed    relation id. if the message was already deleted,
     *                    return FALSE
     */
    function getPrimaryRelationID($user, $relation_id, $message_id)
    {
        $row = $this->_getPrimaryRelationRow($user, $relation_id, $message_id);
        if ( ! $row) {
            return false;
        }

        return $row->getOID();
    }

    /**
     * 同じメッセージを複数(送信/受信)持っている場合にはもう一方の情報を返す
     *
     * @param CB_User $user
     * @param string  $relation_id
     * @param string  $message_id
     *
     * @return array|bool
     */
    function _getAnotherMessage($user, $relation_id, $message_id)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        //escape!
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $query = 'SELECT _id,col_folder,col_subscription_flag FROM '
                 . $table_name . ' WHERE col_user = \''
                 . $db->escape($user->getOID()) . '\' AND col_message = \''
                 . $db->escape($message_id) . '\'';

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $message = null;
        while ($row = $db->fetch_assoc($result)) {
            if ($row['_id'] != $relation_id) {
                $message = $row;
                break;
            }
        }
        $db->free_result($result);
        if (is_null($message)) {
            return false;
        }

        return $message;
    }

    /**
     * フォローを書き込む
     *
     * @param    CB_User $user
     * @param    string  $message_id メッセージID
     * @param    array   $follow     フォロー
     * @param    array   $files      $_FILES
     *
     * @return   boolean   TRUE: success writing a follow
     *
     * $follow['creator']     => 発言者 CB_User オブジェクト
     *        ['data']        => 本文/HTML本文
     *        ['format_type'] => フォーマットタイプ(0: plain text, 1: HTML)
     */
    function writeFollow($user, $message_id, & $follow, & $files)
    {
        $addressees = $this->getAddresseeUsers($message_id);

        //  check privilege
        //  宛先ユーザーに自分が宛先に含まれるか確認する
        $is_addressee = false;
        foreach ($addressees as $addressee) {
            if ($user->getOID() === $addressee->getOID()) {
                $is_addressee = true;
                break;
            }
        }
        if ($is_addressee === false) {
            return false;
        }

        //  フォローされるメッセージを取り出す
        $this->_messages->setLock(CB_DATABASE_EXCLUSIVE_LOCK);
        /** @var $message_row GRN_Message_Messages */
        $message_row = $this->_messages->getRow($message_id);
        $this->_messages->setLock(CB_DATABASE_DEFAULT_LOCK);
        if ( ! $message_row) {
            return false;
        }

        //  フォローを追加
        $follow_row = $this->_insertFollow($message_row, $follow);
        $ret = $this->_addFollowFiles($follow['creator'], $message_row,
            $follow_row,
            $files);
        if ( ! $ret) {
            return false;
        }

        $notification_to_me_user_ids = [];
        $mention_exists = array_key_exists('mention', $follow)
                          && count($follow['mention']) > 0;
        if ($mention_exists) {
            $mention_DAO = new MessageMentionDAO();
            $mention_DAO->insert($follow_row->getOID(), $follow['mention']);
            $notification_to_me_user_ids
                = $this->getMentionedNotificationUserIds($message_id,
                $follow['mention']);
        }

        $this->_updateVoice($follow['creator'], $message_row, $follow_row);

        // フォローを通知する
        $notification = new GRN_Message_NotificationListener();
        $notification->registerBackgroundNotification(
            "update",
            $message_row,
            $user,
            $addressees,
            $message_row->get('subject'),
            $follow_row->get('data'),
            $follow_row->get('ctime'),
            $follow_row->getOID(),
            $notification_to_me_user_ids
        );

        // log
        require_once('message/inspection.csp');
        $logger = GRN_Message_Logger_25::getInstance();
        $file_name_list = [];
        foreach ($files as $file) {
            if (array_key_exists('name', $file)) {
                $file_name_list[] = $file['name'];
            }
        }

        foreach ($file_name_list as $key => $value) {
            if ( ! strlen($value)) {
                unset($file_name_list[$key]);
            }
        }
        $params = [
            'mid'          => $message_row->getOID(),
            'fid'          => $follow_row->getOID(),
            'creator_name' => $user->get('display_name'),
            'subject'      => $message_row->get('subject'),
            'data'         => $follow_row->get('data'),
            'file_name_'   => $file_name_list,
        ];
        $logger->notice('create', 'follow', $params);

        return $follow_row;
    }

    /**
     * Get users that will be sent To-me notification
     *
     * @param int                     $message_id
     * @param MentionObjectCollection $mention_objects
     *
     * @return array
     */
    function getMentionedNotificationUserIds(
        int $message_id,
        MentionObjectCollection $mention_objects
    ): array {
        $mentioned_notification_users = [];
        if ($mention_objects->count() <= 0) {
            return $mentioned_notification_users;
        }

        $addressees = $this->getAddresseeUsers($message_id);
        $addressees_ids = [];
        foreach ($addressees as $addressee) {
            $addressees_ids[] = $addressee->getOID();
        }

        $folder_relation_dao
            = new \grn\message\dao\GrnMessageFolderMessageRelationsDAO();
        $can_receive_notification_users
            = $folder_relation_dao->getUserIdsCanReceiveMentionNotification($message_id,
            $addressees);
        $can_receive_notification_users
            = array_intersect($can_receive_notification_users, $addressees_ids);

        $all_mentioned_users = $mention_objects->getUserIds();
        $mentioned_notification_users
            = array_intersect($can_receive_notification_users,
            $all_mentioned_users);

        return $mentioned_notification_users;
    }

    /**
     * update voice data
     *
     * @access   private
     *
     * @param    CB_User              $user    CB_User
     * @param    GRN_Message_Messages $message CB_Row message object
     * @param    GRN_Message_Follows  $follow  CB_Row follow object
     *
     * @return   boolean   TRUE: success updating voice data
     */
    function _updateVoice($user, $message, $follow)
    {
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_addressee = '@S' AND col_message = '@S'",
            $user->getOID(), $message->getOID()));
        $rowset->limit(0, 1);

        $row = $rowset->iterate();
        if (is_null($row)) {
            return false;
        }

        $row->set('follow', $follow);

        return true;
    }

    /**
     * フォローを削除する
     *
     * @param    CB_User $user      user CB_User object
     * @param    string  $follow_id フォローOID
     *
     * @return   boolean   TRUE: success deleting specified follow
     */
    function deleteFollow($user, $follow_id)
    {
        // *****
        // 権限チェック
        // 宛先存在チェック
        // *****

        $row = $this->_follows->getRow($follow_id);
        if ( ! $row) {
            return false;
        }
        $follow_id = $row->getOID();

        $follow_owner = $row->get('creator');
        if (is_null($follow_owner)) {
            return false;
        } else {
            if ($user->getOID() != $follow_owner->getOID()) {
                return false;
            }
        }

        $this->_messages->setLock(CB_DATABASE_EXCLUSIVE_LOCK);
        $message = $row->get('message');
        $this->_messages->setLock(CB_DATABASE_DEFAULT_LOCK);

        // log
        $message_id = $message->getOID();
        $file_list = $this->getFollowFiles($message_id, $follow_id);
        $file_name_list = [];
        foreach ($file_list as $file) {
            if (array_key_exists('name', $file)) {
                $file_name_list[] = $file['name'];
            }
        }
        require_once('message/inspection.csp');
        $logger = GRN_Message_Logger_25::getInstance();
        $params = [
            'mid'          => $message_id,
            'fid'          => $follow_id,
            'creator_name' => $follow_owner->get('display_name'),
            'subject'      => $message->get('subject'),
            'data'         => $row->get('data'),
            'file_name_'   => $file_name_list,
        ];
        $logger->notice('delete', 'follow', $params);

        // 最終更新日時のロールバック
        $ctime = $message->get('ctime');
        $mtime = $message->get('mtime');
        if (is_null($mtime) || is_null($mtime->unix_ts)) {
            $mtime = $ctime;
        }


        // set modification timestamp
        $message->set('last_modifier', $user);
        $now = new CB_TimeStamp();
        $now->unix_ts = cb_get_db_timestamp();
        $message->set('last_mtime', $now);
        $message->set('last_otime', $now);

        // delete attached files
        require_once('message/file.csp');
        $fm = new GRN_Message_FileManager();
        $fm->deleteClosedFollowFiles($follow_id);

        // update voice data
        $rowset = new CB_RowSet($this->_follows);
        $rowset->addCondition($rowset->queryf("col_creator = '@S' AND col_message = '@S'",
            $user->getOID(), $message->getOID()));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        $rowset->addOrderColumn('col_ctime', true);

        /** @var GRN_Message_Follows $follow_row */
        $follow_row = $rowset->iterate();
        if ( ! is_null($follow_row) && $follow_row->getOID() == $follow_id) {
            $follow_row = $rowset->iterate();
            if ( ! is_null($follow_row)) {
                $this->_updateVoice($user, $message, $follow_row);
            }
        }

        if (FtsApplication::isAvailable()) {
            $indexService = new IndexService();
            $indexService->deleteFollowIndex($follow_id);
            $indexService->updateMessageIndex($message);
        }

        // delete a follow
        $row->delete();

        return true;
    }

    /**
     * フォローをテーブルにinsertする
     *
     * @access   private
     *
     * @param    GRN_Message_Messages $message message CB_Row object
     * @param    array                $follow
     *
     * @return   GRN_Message_Follows              follow CB_Row
     *
     * $follow['creator']      発言者 CB_User オブジェクト
     *        ['data']         本文/HTML本文
     *        ['format_type']  フォーマットタイプ(0: plain text, 1: HTML)
     */
    function _insertFollow($message, & $follow)
    {
        $row = $this->_follows->newRow();

        /** @var CB_User $creator */
        $creator = $follow['creator'];
        $row->set('message', $message);
        $row->set('creator', $creator);
        $row->set('creator_name', $creator->get('display_name'));
        $data = $follow['data'];
        if ($follow['format_type'] == 1) {
            require_once('grn/controller.csp');
            $html = grn_wash_script_without_style_attribute($follow['data']);
            $row->set('html_data', $html);
            $data = grn_strip_tags($html);
        }
        $row->set('data', $data);

        // update follow id
        $last_follow_id = $message->get('last_follow_id');
        $last_follow_id++;
        $row->set('id', $last_follow_id);
        $message->set('last_follow_id', $last_follow_id);

        // update last_mtime and last_follow on messages table
        $message->set('last_modifier', $creator);

        $time = new CB_TimeStamp();
        $time->unix_ts = cb_get_db_timestamp();
        $row->set('ctime', $time);
        $message->set('last_mtime', $time);
        $message->set('last_otime', $time);

        $this->runFollowHook($row, $message, 'create');
        if (FtsApplication::isAvailable()) {
            $indexService = new IndexService();
            $indexService->createFollowIndex($row);
            $indexService->updateMessageIndex($message);
        }

        return $row;
    }

    /**
     * modify message
     *
     * @param    CB_User $user       CB_User
     * @param    string  $message_id message id
     * @param    string  $subject    subject
     * @param    string  $data       text body/HTML body
     * @param    string  $format     0: plain text, 1: HTML
     * @param    array   $files      $_FILES
     * @param    bool    $log_disable
     *
     * @return   boolean                TRUE: success modifing message
     */
    function modifyMessage(
        $user,
        $message_id,
        $subject,
        $data,
        $format,
        & $files,
        $log_disable = false
    ) {
        $row = $this->_modifyMessage($user, $message_id, $subject, $data,
            $format, $files, null, $log_disable);
        if ($row === false) {
            return false;
        }

        return true;
    }

    /**
     * @access   private
     *
     * @param CB_User $user
     * @param string  $message_id
     * @param string  $subject
     * @param string  $data
     * @param string  $format
     * @param array   $files
     * @param null    $confirm
     * @param bool    $log_disable
     *
     * @return GRN_Message_Messages|bool
     */
    function _modifyMessage(
        $user,
        $message_id,
        $subject,
        $data,
        $format,
        & $files,
        $confirm = null,
        $log_disable = false
    ) {

        $row = $this->_messages->getRow($message_id);
        if ( ! $row) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        $addressees = $this->getAddressees($user, $message_id);

        $message_owner_id = '';
        $message_owner = $row->get('creator');
        if ( ! is_null($message_owner)
             && is_null($message_owner->get('deleted'))
        ) {
            $message_owner_id = $message_owner->getOID();
        }

        if ( ! _grn_message_regard_operator($addressees, $message_owner_id)) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        $this->addOperators([$user->getOID()], $message_id);

        // update message data
        $row->set('subject', $subject);
        if ($format == '0') {
            $row->set('data', $data);
            $row->set('html_data', null);
            $abstract = $data;
        } else {
            require_once('grn/controller.csp');
            $washed_data = grn_wash_script_without_style_attribute($data);
            $row->set('data', grn_strip_tags($washed_data));
            $row->set('html_data', $washed_data);
            $abstract = grn_strip_tags($washed_data);
        }

        $user_name = $user->get('display_name');
        $row->set('modifier', $user);
        $row->set('modifier_name', $user_name);
        $row->set('last_modifier', $user);

        $time = new CB_TimeStamp();
        $time->unix_ts = cb_get_db_timestamp();
        $row->set('mtime', $time);
        $row->set('last_mtime', $time);
        $row->set('last_otime', $time);

        if ( ! is_null($confirm)) {
            $row->set('confirm', $confirm);
        }

        //  attached files
        //  通知を作る時にファイルが添付されているか知りたいので、ここで実行しておく
        if ($this->_addMessageFiles($user, $row, $files) === false) {
            return false;
        }

        // update star item of login user(if exist)
        $star_logic = $this->_getStarLogic();
        if (($star_data = $star_logic->getStar($user, GRN_MESSAGE_MODULEID,
            $message_id))
        ) {
            $star_data->setSubjectData($subject);
            $star_data->setTimeStampData($time);
            // update
            $star_logic->modify($user, $star_data);
        }

        // Update notification
        $notification = new GRN_Message_NotificationListener();
        $addressees = $this->getAddresseeUsers($message_id, false);
        $addressee_name_list = [];
        $notification->registerBackgroundNotification(
            "update",
            $row,
            $user,
            $addressees,
            $subject,
            $abstract,
            $time
        );
        foreach ($addressees as $addressee) {
            if (is_object($addressee)) {
                // この配列はLoggingで使う
                $addressee_name_list[] = $addressee->get('display_name');
                // star proccess
                $is_addressee = ($addressee->getOID() == $user->getOID());
                if ( ! $is_addressee
                     && ($star_data
                        = $star_logic->getStar($addressee, GRN_MESSAGE_MODULEID,
                        $message_id))
                ) {
                    $star_data->setSubjectData($subject);
                    $star_data->setTimeStampData($time);
                    // update
                    $star_logic->modify($addressee, $star_data);
                }
                // end star proccess
            } else {
                // ログには削除されたユーザーも出力する
                $addressee_name_list[] = $addressee;
            }
        }

        if ( ! $log_disable)//log writting is disabled
        {

            require_once('message/inspection.csp');
            $logger = GRN_Message_Logger_25::getInstance();
            $params = [
                'mid'            => $message_id,
                'creator_name'   => $row->get('creator_name'),
                'subject'        => $subject,
                'data'           => $row->get('data'),
                'receiver_name_' => $addressee_name_list
            ];
            $logger->notice('modify', 'message', $params);
        }
        if ($row->get('message_type') != GRN_MESSAGE_TYPE_DRAFT) {
            $this->runArticleHook($row, 'update');
            if (FtsApplication::isAvailable()) {
                $indexService = new IndexService();
                $indexService->updateMessageIndex($row);
            }
        }

        return $row;
    }

    /**
     * @access   private
     *
     * @param CB_User              $user
     * @param GRN_Message_Messages $message
     * @param array                $files
     *
     * @return bool
     */
    function _addMessageFiles($user, $message, & $files)
    {
        require_once('message/file.csp');
        $fm = new GRN_Message_FileManager();

        foreach ($files as $file) {
            if (is_array($file) && $file['error'] != UPLOAD_ERR_OK) {
                continue;
            }

            $dbfile = $fm->addMessageFile($user, $message, $file);
            if ( ! $dbfile) {
                return false;
            }
            $this->runFileHook($dbfile, $message, 'create');
            if ($message->get('message_type') !== GRN_MESSAGE_TYPE_DRAFT
                && FtsApplication::isAvailable()
            ) {
                $messageFile = new GRN_Message_File($dbfile);
                $fileBody
                    = new GRN_Message_FileBody($dbfile->getCurrentBody());
                $indexService = new IndexService();
                $indexService->createFileIndex($messageFile, $fileBody,
                    $message->getOID());
            }
        }

        return true;
    }

    /**
     * @access   private
     *
     * @param CB_User              $user
     * @param GRN_Message_Messages $message
     * @param GRN_Message_Follows  $follow
     * @param array                $files
     *
     * @return bool
     */
    function _addFollowFiles($user, $message, $follow, & $files)
    {
        require_once('message/file.csp');
        $fm = new GRN_Message_FileManager();

        foreach ($files as $file) {
            if (is_array($file) && $file['error'] != UPLOAD_ERR_OK) {
                continue;
            }

            $dbfile = $fm->addFollowFile($user, $message, $follow, $file);
            if ( ! $dbfile) {
                return false;
            }
            $this->runFileHook($dbfile, $message, 'create');
            if (FtsApplication::isAvailable()) {
                $messageFile = new GRN_Message_File($dbfile);
                $fileBody
                    = new GRN_Message_FileBody($dbfile->getCurrentBody());
                $indexService = new IndexService();
                $indexService->createFileIndex($messageFile, $fileBody,
                    $message->getOID(), $follow->getOID());
            }
        }

        return true;
    }

    /**
     * @param $message_id
     *
     * @return   array   attached files information
     *
     * return_array[relation file id]['name'] => file name
     *                               ['size'] => file size
     *                               ['mime'] => mime type
     */
    function getMessageFiles($message_id)
    {
        require_once('message/file.csp');
        $fm = new GRN_Message_FileManager();
        $attached_files = $fm->getMessageFiles($message_id);

        return $this->_getAttachedFilesInfo($attached_files);
    }

    /**
     * @param $message_id
     * @param $follow_id
     *
     * @return array
     */
    function getFollowFiles($message_id, $follow_id)
    {
        require_once('message/file.csp');
        $fm = new GRN_Message_FileManager();
        $attached_files = $fm->getFollowFiles($message_id, $follow_id);

        return $this->_getAttachedFilesInfo($attached_files);
    }

    /**
     * @access   private
     *
     * @param $attached_files
     *
     * @return array
     */
    function _getAttachedFilesInfo($attached_files)
    {
        $files = [];

        $controller = new GRN_ControllerUtil();
        foreach ($attached_files as $frid => $attached_file) {
            if ( ! is_null($attached_file)) {
                $files[$frid] = $controller->getFileLinkView($attached_file);
            }
        }

        return $files;
    }

    /**
     * add addressees
     *
     * @param    CB_User $user       CB_User
     * @param    string  $message_id message id
     * @param    array   $new_addressees
     * @param    array   $modify_message
     *
     * @return   boolean   TRUE: success adding $new_addressees
     *
     * $new_addressees[addressee id]['order'] => addressee view order
     */
    function modifyAddressees(
        $user,
        $message_id,
        $new_addressees,
        $modify_message = []
    ) {
        $message = $this->_messages->getRow($message_id);
        if ( ! $message) {
            return false;
        }
        $message_id = $message->getOID();

        // 最終操作日時の更新
        $mtime = new CB_TimeStamp();
        $mtime->unix_ts = cb_get_db_timestamp();

        /**
         * messags whose creator has been deleted from Garoon may be exist.
         *
         */
        $message_owner = $message->get('creator');
        $message_owner_id = null;
        if ( ! is_null($message_owner)) {
            $message_owner_id = $message_owner->getOID();
        }

        // delete duplicate data
        $unique_new_addressees = [];
        foreach ($new_addressees as $new_addressee_id => $new_addressee) {
            if ( ! array_key_exists($new_addressee_id,
                $unique_new_addressees)
            ) {
                $unique_new_addressees[$new_addressee_id] = $new_addressee;
            }
        }
        $new_addressees = $unique_new_addressees;
        $new_addressees_log = $new_addressees;

        $time = new CB_TimeStamp();
        $time->unix_ts = 0;

        $rowset = new CB_MultiRowSet($this->_addressees);
        $rowset->addJoin($this->_uum->getUserTable(),
            "tab_cb_user._id=tab_grn_message_addressees.col_addressee",
            CB_DATABASE_LEFT_JOIN);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_is_sender = '0'",
            $message_id));
        /** @var GRN_Message_Addressees[] $old_addressees_row_array */
        $old_addressees_row_array = [];
        $old_addressees_cb_user_array = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $grn_message_addressees = $row["grn_message_addressees"];
            $cb_user
                = $row["cb_user"];
            $old_addressees_row_array[$grn_message_addressees->getOID()]
                = $grn_message_addressees;
            $old_addressees_cb_user_array[$grn_message_addressees->getOID()]
                = $cb_user;
        }

        $condition = $this->getDatabaseConnection()
                          ->format("_id in (@A) ",
                              [array_keys($new_addressees)]);
        $addressee_names = $this->_uum->getUsers(0, -1, '_id', $condition);
        unset($new_addressee_id, $new_addressee, $tmp_user_row);
        $relationsDao
            = new \grn\message\dao\GrnMessageFolderMessageRelationsDAO();
        $messageViewableUserIdHash
            = $relationsDao->getMessageViewableHashUserIds($message,
            $addressee_names);
        $old_addressees = [];
        // when user was used to be in a addressee list and add to addressee list once more, send notification
        // And user was used to be in a addressee list has delete flag user in tab_grn_messeage_addressee
        $revivalUsers = [];
        foreach ($old_addressees_row_array as $row_id => $row) {
            /** @var CB_User $addressee_row */
            $addressee_row = $old_addressees_cb_user_array[$row_id];

            $old_addressee = [];
            $old_addressee['id'] = '';
            if ( ! is_null($addressee_row)) {
                $old_addressee['id'] = $addressee_row->getOID();
            }
            $old_addressee['row'] = &$old_addressees_row_array[$row_id];
            $old_addressee['update'] = 0;
            $old_addressee['delete_flag'] = $row->get('delete_flag');
            $old_addressee['is_operator'] = $row->get('is_operator');
            foreach ($new_addressees as $new_addressee_id => $new_addressee) {
                // $new_addresseeは宛先リストに存在していたことがあった
                if ($new_addressee_id == $old_addressee['id']) {
                    // CAUTION! $new_addressee is copy. use original one!
                    $new_addressees[$new_addressee_id]['update'] = 1;
                    $dtime
                        = $row->get('dtime');
                    if ($dtime->unix_ts == 0
                        & isset($messageViewableUserIdHash[$addressee_row->getOID()])
                    ) {
                        if ($row->get('delete_flag')) {
                            $row->set('delete_flag', 0);
                            // 社内メールを受信箱へ移動
                            $users_message_params
                                = $this->hasPrivilege($addressee_row,
                                $message_id, '');
                            $this->moveMessages2Inbox($addressee_row,
                                $users_message_params['cid'],
                                [$users_message_params['rid']]);
                            $revivalUsers[] = $addressee_row;
                        }
                    } else {
                        $new_addressee_row = $addressee_row;

                        if ( ! is_null($new_addressee_row)) {
                            // re-send to deleted addressee

                            //  1度pullしていれば、受信しない
                            require_once('message/personal_logic.csp');
                            $personal
                                = GRN_Message_PersonalLogic::getInstance();
                            if (( ! isset($messageViewableUserIdHash[$new_addressee_row->getOID()]))
                                && ($personal->isLastPulledMessageAttribute($new_addressee_row)
                                    === true)
                            ) {
                                //  foldermessagerelations になく（受信していない or 削除されている)
                                $this->_insertMessageFolder2($new_addressee_row,
                                    $message, $addressee_names);
                            } else {
                                if ($this->isExistRelation($new_addressee_row->getOID(),
                                    $message_id)
                                ) {
                                    // replace a snapshot message to an original one
                                    $this->_replaceSnapshot($new_addressee_row,
                                        $message_id);
                                } else {
                                    $this->_insertMessageFolder2($new_addressee_row,
                                        $message, $addressee_names);
                                }
                            }

                            $row->set('dtime', $time);
                            $row->set('delete_flag', '0');
                            $row->set('is_operator',
                                $new_addressee['addressee_is_operator']);
                            $revivalUsers[] = $addressee_row;
                        }
                    }
                    if ($row->get('is_operator')
                        != $new_addressee['addressee_is_operator']
                    ) {
                        $row->set('is_operator',
                            $new_addressee['addressee_is_operator']);
                    }

                    break;
                }
            }

            $old_addressees[] = $old_addressee;
        }

        // update and delete addressees data
        $delete_user_list = [];
        $delete_time = new CB_TimeStamp();
        $delete_time->unix_ts = cb_get_db_timestamp();
        foreach ($old_addressees as $old_addressee) {
            if (array_key_exists($old_addressee['id'], $new_addressees)) {
                // update
                $old_addressee['row']->set(
                    'view_order',
                    $new_addressees[$old_addressee['id']]['order']
                );
            } else {
                /**
                 * the status of the users who are flagged as deleted should not be modified.
                 */
                /** @var GRN_Message_Addressees $tmp_addressee_row */
                $tmp_addressee_row = $old_addressee['row'];
                $tmp_user
                    = $old_addressees_cb_user_array[$tmp_addressee_row->getOID()];
                if (is_null($tmp_user) || $tmp_user->get('deleted')) {
                    continue;
                }
                unset($tmp_addressee_row);

                // delete
                $dtime = $old_addressee['row']->get('dtime');
                $delete_flag = $old_addressee['delete_flag'];
                if ($delete_flag == 0 && $dtime->unix_ts == 0) {

                    // delete new
                    $old_addressee['row']->set('dtime', $delete_time);
                    $old_addressee['row']->set('is_operator', 0);

                    /** @var CB_User $delete_user */
                    $delete_user = $tmp_user;
                    if ( ! is_null($delete_user)
                         && is_null($delete_user->get('deleted'))
                    ) {
                        $delete_user_list[] = $delete_user->getOID();
                    }
                }
            }
        }

        /**
         * Snapshot data has not been created since Garoon 2.6.0
         * When a user is removed from the addressees of the messages,
         * the message disappears from the user's folder.
         */
        $remove_folder_id_list = $this->getFolderMessageRelations($message_id,
            $delete_user_list);
        $this->_deleteFolderMessageRelations($delete_user_list, $message_id);

        // remove notification of deleted user
        $notification_tables = [
            'tab_grn_notification_notify',
            'tab_grn_notification_history',
            'tab_grn_notification_to_me',
            'tab_grn_notification_to_me_history',
        ];
        foreach ($notification_tables as $notification_table) {
            $this->_deleteNotification($delete_user_list, $message_id,
                $notification_table);
        }

        // remove star of deleted users
        $star_logic = $this->_getStarLogic();
        $star_logic->removeStarsByUsers(GRN_MESSAGE_MODULEID, $message_id,
            $delete_user_list);

        // add new addressees
        $addressee_list = [];
        foreach ($new_addressees as $new_addressee_id => $new_addressee) {
            if ( ! array_key_exists('update', $new_addressee)) {
                $addressee = [];
                $addressee['addressee_id'] = $new_addressee_id;
                $addressee['addressee_order'] = $new_addressee['order'];
                $addressee['addressee_is_operator']
                    = $new_addressee['addressee_is_operator'];
                if ($message_owner_id == $new_addressee_id) {
                    $addressee['is_sender'] = 1;
                    $addressee['addressee_is_operator'] = 1;
                }
                $addressee_list[] = $addressee;
            }
        }
        $addressee_cb_user_list = [];
        if (count($addressee_list) > 0) {
            $addressee_cb_user_list = $this->_sendAddressees($message,
                $addressee_list, true);
        }

        $notification = new GRN_Message_NotificationListener();
        //send notification revival user and newly added user
        $notification->registerBackgroundNotification(
            "create",
            $message,
            $user,
            array_merge($addressee_cb_user_list, $revivalUsers),
            $message->get("subject"),
            $message->get("data"),
            $mtime
        );

        if ($message->get('message_type') != GRN_MESSAGE_TYPE_DRAFT) {
            if (FtsApplication::isAvailable()) {
                $indexService = new IndexService();
                $indexService->updateMessageIndex($message);

                $new_addressee_id_list = array_keys($new_addressees_log);
                $add_folder_id_list
                    = $this->getFolderMessageRelations($message_id,
                    $new_addressee_id_list);

                $indexService->createEsFolderMessageRelationIndex(
                    $message_id,
                    $new_addressee_id_list,
                    $add_folder_id_list
                );
            }
        }

        unset($addressee_list, $addressee, $addressee_cb_user_list, $revivalUsers);


        //Logging
        $receiver_name_list = [];
        $maintainer_name_list = [];
        $users_info
            = $this->_uum->getUsersInfo(array_keys($new_addressees_log));
        foreach ($new_addressees_log as $key => $new_addressee) {
            $user_info = $users_info[$key];
            if ($user_info) {
                $receiver_name_list[] = $user_info['col_display_name'];
            }

            if ($new_addressee["addressee_is_operator"]) {
                $maintainer_name_list[] = $user_info['col_display_name'];
            }
        }

        require_once('message/inspection.csp');
        $logger = GRN_Message_Logger_25::getInstance();
        $params = [
            'mid'              => $message_id,
            'creator_name'     => $message->get('creator_name'),
            'subject'          => array_key_exists('title', $modify_message)
                ? $modify_message['title'] : $message->get('subject'),
            'data'             => array_key_exists('title', $modify_message)
                ? $modify_message['info'] : $message->get('data'),
            'receiver_name_'   => $receiver_name_list,
            'maintainer_name_' => $maintainer_name_list,
        ];
        $logger->notice('modify', 'message', $params);
        //End Logging

        $this->runACLHook($message, 'update');

        return true;
    }

    /**
     * confirming notification data
     *
     * @access   private
     *
     * @param    CB_User              $user    user
     * @param    GRN_Message_Messages $message message
     * @param    CB_TimeStamp         $time    confirmed time
     */
    function _confirmNotification($user, $message, $time)
    {
        $notification = new GRN_Message_NotificationListener();
        $notification->confirmNotification($user, $message, $time);
    }

    /**
     * set subscription flag
     *
     * @param    CB_User $user         user CB_User object
     * @param    string  $relation_id  relation id
     * @param    boolean $subscription TRUE: subscribe, FALSE: unsubscribe
     *
     * @return   boolean
     */
    function setSubscription($user, $relation_id, $subscription)
    {
        //$row = $this->_relations->getRow( $relation_id );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $row = $table->getRow($relation_id);
        if ( ! $row || is_null($row->get('user'))) {
            return false;
        }

        $relation_owner = $row->get('user');
        if (is_null($relation_owner)) {
            return false;
        } else {
            if ($user->getOID() != $relation_owner->getOID()) {
                return false;
            }
        }

        $this->_setSubscription($row, $subscription);

        return true;
    }

    /**
     * @access   private
     *
     * @param GRN_Message_FolderMessageRelations $relation
     * @param bool                               $subscription
     */
    function _setSubscription($relation, $subscription)
    {
        if ($subscription) {
            $relation->set('subscription_flag', '1');
        } else {
            $relation->set('subscription_flag', '0');
        }
    }

    /**
     * get a folder $message is classified
     *
     * @access   private
     *
     * @param    CB_User              $user       CB_User
     * @param    GRN_Message_Messages $message    CB_Row message object
     * @param    CB_User[]|CbUser[]   $cbUserList Array of CbUser in addressees of this message.
     *
     * @return   GRN_Message_Folders                 folder row
     */
    function _getDestinationFolder($user, $message, $cbUserList = [])
    {
        $messageFacade = $this->getMessageFacade();
        $addresseesNames = [];
        if (count($cbUserList)) {
            foreach ($cbUserList as $cbUser) {
                if ($cbUser instanceof CB_User) {
                    $addresseesNames[] = [
                        $cbUser->get('display_name'),
                        $cbUser->get('nickname')
                    ];
                } else {
                    $addresseesNames[] = [
                        $cbUser->getDisplayName(),
                        $cbUser->getNickname()
                    ];
                }
            }
        } else {
            $addresseesAndUsers
                = $messageFacade->selectAddresseeAndUserByMessageIdSenderIsZero([],
                $message->getOID());
            foreach ($addresseesAndUsers as $addresseeAndUser) {
                $addresseesNames[] = [
                    $addresseeAndUser[0]->getAddresseeName(),
                    $addresseeAndUser[1]->getDisplayName(),
                    $addresseeAndUser[1]->getNickname()
                ];
            }
        }
        $senderNames = [$message->get("creator_name")];
        $userObj = $message->get("creator");
        if ( ! is_null($userObj)) {
            $senderNames[] = $userObj->get("display_name");
            $senderNames[] = $userObj->get("nickname");
        }
        $filters
            = $messageFacade->selectFilterAndFilterConditionListByUserId([],
            $user->getOID());

        $targetFolder = null;
        foreach ($filters as $filter) {
            if ($filter->isMatchWith($message->get("subject"), $senderNames,
                $addresseesNames)
            ) {
                $targetFolder = $filter->getFolder();
                break;
            }
        }

        if ( ! is_null($targetFolder)) {
            return $this->_folders->getRow($targetFolder);
        } else {
            return $this->_folderlogic->getSpecificFolderRow($user,
                GRN_MESSAGE_RECEIVINGFOLDER);
        }
    }

    /**
     * match $haystack with $needle
     *
     * @access   private
     *
     * @param    string $condition      matching condition
     *                                  1: included, 2: excluded, 3: same as,
     *                                  4: different from, 5: begin with
     * @param    string $haystack
     * @param    string $needle
     *
     * @return   boolean                TRUE: matched
     */
    function _matchFilterString($condition, $haystack, $needle)
    {
        switch ($condition) {
            case 1: // included
                if (@ mb_strpos($haystack, $needle) !== false) {
                    return true;
                }
                break;
            case 2: // excluded
                if (@ mb_strpos($haystack, $needle) === false) {
                    return true;
                }
                break;
            case 3: // same as
                if (strcmp($haystack, $needle) == 0) {
                    return true;
                }
                break;
            case 4: // different from
                if (strcmp($haystack, $needle) != 0) {
                    return true;
                }
                break;
            case 5: // begin with
                $pos = @ mb_strpos($haystack, $needle);
                if (is_int($pos)) {
                    if ($pos == 0) {
                        return true;
                    }
                }
                break;
        }

        return false;
    }

    /**
     * confirm specified message
     *
     * @param    CB_User $user       CB_User
     * @param    string  $message_id message id
     *
     * @return   boolean   TRUE: success confirming specified message
     */
    function confirmMessage($user, $message_id)
    {
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_addressee = '@S'",
            $message_id, $user->getOID()));
        $row = $rowset->iterate();
        if (is_null($row)) {
            return false;
        }

        $dtime = $row->get('dtime');
        if ($dtime->unix_ts == 0) // if user is not deleted from addressee_list
        {
            $row->set('view_flag', '1');

            $time = new CB_TimeStamp();
            $time->unix_ts = cb_get_db_timestamp();
            $row->set('rtime', $time);

            $message = $row->get('message');
            require_once('message/inspection.csp');
            $logger = GRN_Message_Logger_25::getInstance();
            $params = ['user_id' => $user->getOID(), 'mid' => $message_id, 'subject' => $message->get('subject')];
            $logger->info('acknowledge', 'message', $params);
        }

        return true;
    }

    /**
     * get voice data
     *
     * @param    CB_User $user           CB_User
     * @param    string  $relation_id    relation id
     * @param    string  $message_id     message id
     * @param    string  $sort           sort key (default: ctime)
     * @param    boolean $reverse        TRUE: sort in descending order
     *                                   FALSE: sort in ascending order (default:FALSE)
     *
     * @return   array|bool              voice data array
     *                                   if cannot access the message, return FALSE.
     *
     * return_array[]['user_id']   => user id
     *               ['user_name'] => user name
     *               ['ctime']     => voicing time
     *               ['rtime']     => confirmed time
     *               ['data']      => voice
     *               ['dtime']     => deleted time from addressee list
     *               ['delete']    => 1: specified message was deleted in user folder
     */
    function getVoices(
        $user,
        $relation_id,
        $message_id,
        $sort = '',
        $reverse = true
    ) {
        // get primary relation
        $relation = $this->_getPrimaryRelationRow($user, $relation_id,
            $message_id);
        if ( ! $relation) {
            return false;
        }

        // get snapshot
        $snapshot_array = $this->_getMessageRow($relation);
        $message = $snapshot_array['message'];
        if ( ! $message) {
            return false;
        }
        /** @var GRN_Message_Messages $message */

        // sort key
        switch ($sort) {
            case 'voice':
                $reverse = $reverse ? ' DESC' : '';
                $orderBy
                    = "ORDER BY col_follow{$reverse}, a.col_is_sender DESC, a.col_view_order, a.col_dtime DESC, a._id";
                break;
            case 'confirmed':
                $reverse = $reverse ? ' DESC' : '';
                $orderBy
                    = "ORDER BY col_rtime{$reverse}, a.col_is_sender DESC, a.col_view_order, a.col_dtime DESC, a._id";
                break;
            case 'user':
                $reverse = $reverse ? ' DESC' : '';
                $orderBy
                    = "ORDER BY col_addressee{$reverse}, a.col_is_sender DESC, a.col_view_order, a.col_dtime DESC, a._id";
                break;
            default;
                $orderBy
                    = 'ORDER BY a.col_is_sender DESC, a.col_view_order, a.col_dtime DESC, a._id';
                break;
        }

        $user_id = $user->getOID();
        $has_privilege = false;
        $voices = [];
        $db = $this->_getDBConnection();

        $query = cb_queryf($db,
            'SELECT ' .
            'a._id,' .
            'a.col_message,' .
            'a.col_addressee,' .
            'a.col_addressee_name,' .
            'a.col_view_order,' .
            'a.col_dtime,' .
            'a.col_delete_flag,' .
            'a.col_view_flag,' .
            'a.col_rtime,' .
            'a.col_is_sender,' .
            'a.col_is_operator,' .
            'a.col_follow,' .
            'a.col_finish_view_flag,' .
            'u._id as u_id,' .
            'u.col_display_name as u_display_name,' .
            'f._id as f_id,' .
            'f.col_data as f_data,' .
            'f.col_ctime as f_ctime ' .
            'FROM tab_grn_message_addressees a ' .
            'LEFT JOIN tab_cb_user u ON u._id = a.col_addressee ' .
            'LEFT JOIN tab_grn_message_follows f ON f._id = a.col_follow ' .
            "WHERE (a.col_message = '@S') {$orderBy}", $message_id);
        $result = $db->query($query);
        while ($row = $db->fetch_assoc($result)) {
            $voice = [];
            $voice['user_id'] = '';
            if ( ! is_null($row['u_id'])) {
                $voice['user_id'] = $row['u_id'];
                $voice['user_name'] = $row['u_display_name'];
            } else {
                $voice['user_name'] = $row['col_addressee_name'];
            }
            if ($user_id == $voice['user_id']) {
                $has_privilege = true;
            }
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $row['col_rtime'];
            $voice['rtime'] = $ts;
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $row['col_dtime'];
            $voice['dtime'] = $ts;
            $voice['delete'] = $row['col_delete_flag'];
            if ( ! is_null($row['f_id'])) {
                $ts = new CB_TimeStamp();
                $ts->unix_ts = $row['f_ctime'];
                $voice['ctime'] = $ts;
                $voice['data'] = mb_substr($row['f_data'], 0, 128);
            }

            $voices[] = $voice;
        }
        $db->free_result($result);

        if ( ! $has_privilege) {
            return false;
        }

        return $voices;
    }

    /**
     * create snapshot
     *
     * @access   private
     *
     * @param    CB_User[]            $user_list deleted user list array
     * @param    GRN_Message_Messages $message   CB_Row
     *
     * $user_list[user id] => CB_User
     */
    function _createSnapshot($user_list, $message)
    {
        if (count($user_list) > 0) {
            $snapshot_message =& $this->_createSnapshotData($user_list,
                $message);

            // update folder-message relation
            foreach ($user_list as $user) {
                //$rowset = new CB_RowSet( $this->_relations );
                $table_name
                    = grn_get_personal_tablename_message($user->getOID(),
                    GRN_MESSAGE_FOLDERMESSAGERELATIONS);
                $table = $this->_manager->getTableInfo($table_name);
                $rowset = new CB_RowSet($table);
                $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S'",
                    $user->getOID(), $message->getOID()));
                //  $user は CB_User なので、UUMが削除フラグチェック済み。

                while ( ! is_null($row = $rowset->iterate())) {
                    $row->set('snapshot_message', $snapshot_message);
                }
            }

            // update message boxes
            $app_locator = GRN_ApplicationLocator::instance();
            $manager = $app_locator->getTableManager('message');
            $message_boxes = $manager->getTableInfo(GRN_MESSAGE_MESSAGEBOXES);
            foreach ($user_list as $user) {
                $rowset = new CB_RowSet($message_boxes);
                $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S'",
                    $user->getOID(), $message->getOID()));
                //  $user は CB_User なので、UUMが削除フラグチェック済み。
                while ( ! is_null($row = $rowset->iterate())) {
                    $row->set('snapshot_message', $snapshot_message);
                }
            }
        }
    }

    /**
     * create snapshot data
     *
     * @access   private
     *
     * @param    array                $user_list
     * @param    GRN_Message_Messages $message message object
     *
     * @return   GRN_Message_Messages snapshot message object
     */
    function _createSnapshotData($user_list, $message)
    {
        $message_id = $message->getOID();

        // create snapshot message
        $mapping_array = [
            'creator',
            'creator_name',
            'ctime',
            'modifier',
            'modifier_name',
            'mtime',
            'delegator',
            'delegator_name',
            'dtime',
            'subject',
            'data',
            'html_data',
            'confirm',
            'last_mtime',
            'last_otime',
            'last_modifier',
            'last_follow_id',
            'file_num',
            'file_size',
            'has_snapshot',
        ];

        // Get message sequence number
        $snapshot_id = $this->_getNextMessageID();

        $snapshot_message = $this->_messages->newRow($snapshot_id);
        foreach ($mapping_array as $key) {
            $snapshot_message->set($key, $message->get($key));
        }
        $snapshot_message->set('original_message', $message);

        // create snapshot addressees
        $mapping_array = [
            'addressee',
            'addressee_name',
            'view_order',
            'dtime',
            'delete_flag',
            'view_flag',
            'finish_view_flag',
            'rtime',
            'is_sender',
            'follow'
        ];

        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S'",
            $message_id));

        $time = new CB_TimeStamp();
        $time->unix_ts = 0;

        while ( ! is_null($row = $rowset->iterate())) {
            $snapshot_addressee = $this->_addressees->newRow();
            $snapshot_addressee->set('message', $snapshot_message);
            foreach ($mapping_array as $key) {
                $snapshot_addressee->set($key, $row->get($key));
            }

            $addressee = $row->get('addressee');
            if ( ! is_null($addressee)) {
                if (array_key_exists($addressee->getOID(), $user_list)) {
                    $snapshot_addressee->set('dtime', $time);
                }
            }
        }

        // create snapshot attached files
        $mapping_array = [
            'follow',
            'file',
            'publicly'
        ];

        $rowset = new CB_RowSet($this->_files);
        $rowset->addCondition($rowset->queryf("col_message = '@S'",
            $message_id));

        while ( ! is_null($row = $rowset->iterate())) {
            $snapshot_file = $this->_files->newRow();
            $snapshot_file->set('message', $snapshot_message);
            foreach ($mapping_array as $key) {
                $snapshot_file->set($key, $row->get($key));
            }
        }

        return $snapshot_message;
    }

    /**
     * replace a snapshot message to an original one
     *
     * @access   private
     *
     * @param    CB_User $user
     * @param    string  $message_id message id
     */
    function _replaceSnapshot($user, $message_id)
    {
        $user_id = $user->getOID();

        $message = $this->_messages->getRow($message_id);


        $table_name = grn_get_personal_tablename_message($user_id,
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S'",
            $user_id, $message_id));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。

        // update relation data
        $found_snapshot_in_relations = false;
        $snapshot = null;
        /** @var $row GRN_Message_FolderMessageRelations */
        while ( ! is_null($row = $rowset->iterate())) {
            if (is_null($snapshot)) {
                $snapshot = $row->get('snapshot_message');
            }
            $row->set('snapshot_message', null);

            // rollback last_vtime
            $addressee_rowset = new CB_RowSet($this->_addressees);
            $addressee_rowset->addCondition($rowset->queryf("col_message = '@S' AND col_addressee = '@S'",
                $message_id, $user_id));
            $addressee = $addressee_rowset->iterate();

            // 宛先より削除された日時が最終閲覧日時より古い場合は、最終閲覧日時を削除日時と
            // する。スナップショットの最終閲覧日時は更新されるため、これが必要。
            // $dtimeはこの後0となるためコピーを保持
            $dtime = $addressee->get('dtime');
            $last_vtime = $row->get('last_vtime');
            if ($dtime->unix_ts < $last_vtime) {
                $row->set('last_vtime', $dtime);
            }

            // ごみ箱にあった場合はフィルタリングし、新規のメッセージとする
            $folder = $row->get('folder');
            if ($folder->get('folder_type') == GRN_MESSAGE_GARBAGEFOLDER) {
                $garbage_folder_id = $folder->getOID();
                // filtering message
                $folder = $this->_getDestinationFolder($user, $message);
                $row->set('folder', $folder);

                if (FtsApplication::isAvailable()) {
                    $indexService = new IndexService();
                    $indexService->updateFolderMessageRelationIndex(
                        $message_id, $row->getId('snapshot_message'),
                        $user_id, $row->get('sent_message_flag'),
                        $folder->getOID()
                    );

                    $elasticsearch_params = [
                        'addUserIds'      => [$user_id],
                        'addFolderIds'    => [$folder->getOID()],
                        'removeFolderIds' => [$garbage_folder_id]
                    ];
                    $indexService->updateEsFolderMessageRelationIndex(
                        $message_id,
                        $row->getId('snapshot_message'),
                        $elasticsearch_params
                    );
                }

                // update last_vtime
                $time = new CB_TimeStamp();
                $time->unix_ts = 0;
                $row->set('last_vtime', $time);

                // delete mtime
                $row->set('mtime', null);

                // delete notification data
                $notification = new GRN_Message_NotificationListener();
                $notification->deleteNotification($user, $message_id);
            }
            // set subscription flag
            $this->_setSubscription($row,
                $this->_folderlogic->getSubscription($user, $folder->getOID()));

            $row->updateNow();
            $found_snapshot_in_relations = true;
        }

        $found_snapshot_in_messageboxes = false;
        // update message box data
        if ( ! $found_snapshot_in_relations) {
            $app_locator = GRN_ApplicationLocator::instance();
            $manager = $app_locator->getTableManager('message');
            $message_boxes = $manager->getTableInfo(GRN_MESSAGE_MESSAGEBOXES);
            $rowset = new CB_RowSet($message_boxes);
            $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_message = '@S'",
                $user_id, $message_id));
            //  $user は CB_User なので、UUMが削除フラグチェック済み。

            $snapshot = null;
            $row = $rowset->iterate();
            if ( ! is_null($row)) {
                if (is_null($snapshot)) {
                    $snapshot = $row->get('snapshot_message');
                }
                $row->set('snapshot_message', null);
                $row->updateNow();
                $found_snapshot_in_messageboxes = true;
            }
        }

        // スナップショットが削除されている
        if ( ! $found_snapshot_in_relations
             && ! $found_snapshot_in_messageboxes
        ) {
            $this->_insertMessageBox($user, $message);
        }

        // delete snapshot data
        if ( ! is_null($snapshot)) {
            $snapshot_id = $snapshot->getOID();
            // snapshot が削除されている場合は何も行わない
            if (is_null($snapshot_id)) {
                return;
            }
            //$rowset = new CB_RowSet( $this->_relations );

            //snapshotを共有していないかどうかのチェック
            //分割されているテーブルもきちんと見ること！

            $message_addressees
                = $this->_manager->getTableInfo('GRN_Message_Addressees');
            $rowset = new CB_RowSet($message_addressees);
            $rowset->addCondition($rowset->queryf("col_message = '@S'",
                $message_id));
            $message_users = [];
            while ( ! is_null($message_address_row = $rowset->iterate())) {
                $receiver = $message_address_row->get('addressee');
                if ($receiver) {
                    $receiver_id = $receiver->getOID();
                    /*if ( ! is_null($creator_id) && $creator_id === $receiver_id )
                        continue;*/
                    if ($receiver_id !== $user->getOID()) {
                        $message_users[] = $receiver->getOID();
                        //break;
                    }
                }
            }
            $rowset->destroy();

            $count = 0;
            foreach ($message_users as $message_user_id) {
                $relation_table_name
                    = grn_get_personal_tablename_message($message_user_id,
                    GRN_MESSAGE_FOLDERMESSAGERELATIONS);
                $relation_table
                    = $this->_manager->getTableInfo($relation_table_name);
                $rowset = new CB_RowSet($relation_table);
                $rowset->addCondition($rowset->queryf("col_snapshot_message = '@S' AND col_user = '@S'",
                    $snapshot_id, $message_user_id));
                $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
                $result = $rowset->iterate();
                $rowset->destroy();
                $count += $result['count'];
                if ($count > 0) {
                    break;
                }
            }

            if ($count == 0) {
                $app_locator = GRN_ApplicationLocator::instance();
                $manager = $app_locator->getTableManager('message');
                $message_boxes
                    = $manager->getTableInfo(GRN_MESSAGE_MESSAGEBOXES);
                $rowset = new CB_RowSet($message_boxes);
                $user_table_info = $this->_manager->getTableInfo('cb_user');
                $on = CB_DATABASE_TABLE_PREFIX
                      . strtolower(GRN_MESSAGE_MESSAGEBOXES)
                      . '.col_user = u._id '
                      . 'AND u.col_deleted IS NULL';
                $rowset->addJoin($user_table_info, $on, CB_DATABASE_INNER_JOIN,
                    'u');
                $rowset->addCondition($rowset->queryf("col_snapshot_message = '@S'",
                    $snapshot_id));
                $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
                $result = $rowset->iterate();
                $rowset->destroy();
                $count += $result['count'];
            }

            if ($count == 0) {
                $row = $this->_messages->getRow($snapshot_id);
                $row->delete();
            }
        }

    }

    /**
     * get message owner
     *
     * @description   if message owner is delegator, return it. otherwise return sender
     *
     * @param    string $message_id
     *
     * @return   mixed    CB_User message owner
     *                    if specified message doesn't exist, return FALSE.
     */
    function getMessageOwner($message_id)
    {
        $lock = $this->_messages->_lock;
        $this->_messages->setLock(CB_DATABASE_NO_LOCK);
        $row = $this->_messages->getRow($message_id);
        $this->_messages->setLock($lock);
        if ( ! $row) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        $owner = $row->get('delegator');
        if (is_null($owner)) {
            $owner = $row->get('creator');
        }

        return $owner;
    }

    /**
     * @access   private
     *
     * @param  GRN_Message_Messages $message
     *
     * @return GRN_Message_Messages
     */
    function _getOriginalMessage($message)
    {
        $original = $message->get('original_message');
        if (is_null($original)) {
            $original = $message;
        }

        return $original;
    }

    /**
     * @param CB_User $user
     *
     * @return array
     */
    function getMessageNum($user)
    {
        //$rowset = new CB_RowSet( $this->_relations );
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($rowset->queryf("col_user = '@S'",
            $user->getOID()));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)'],
            ['folder_id' => 'col_folder']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $folders = [];
        while ($result = $rowset->iterate()) {
            $folders[$result['folder_id']] = $result['count'];
        }
        $rowset->destroy();

        return $folders;
    }

    /**
     * @param CB_User $user
     *
     * @return array
     */
    function getUnreadMessageNum($user)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        //escape!
        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $query = 'SELECT COUNT(*) count, r.col_folder FROM ' . $table_name
                 . ' r, tab_grn_message_messages m WHERE r.col_user=\''
                 . $db->escape($user->getOID())
                 . '\' AND r.col_message=m._id AND r.col_last_vtime < m.col_ctime GROUP BY col_folder';
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $folders = [];
        while ($row = $db->fetch_assoc($result)) {
            $folders[$row['col_folder']] = $row['count'];
        }

        return $folders;
    }

    /**
     * @param CB_User $user
     *
     * @return array
     */
    function getUnreadMessageNumForMobile($user)
    {
        $app_locator = \GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        // 30days ago
        $time = time() - 30 * 24 * 60 * 60;

        //escape!
        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $query = 'SELECT COUNT(*) count, r.col_folder FROM ' . $table_name
                 . ' r, tab_grn_message_messages m WHERE r.col_user=\''
                 . $db->escape($user->getOID())
                 . '\' AND r.col_message=m._id AND r.col_last_vtime < m.col_last_mtime AND m.col_last_mtime > '
                 . $time . ' GROUP BY col_folder';
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $folders = [];
        while ($row = $db->fetch_assoc($result)) {
            $folders[$row['col_folder']] = $row['count'];
        }

        return $folders;
    }

    /**
     * @param $user
     * @param $folder_id
     * @param $subfolders
     *
     * @return bool
     */
    function moveAllMessages2GarbageBoxRec($user, $folder_id, $subfolders)
    {
        $folder_tree = $this->_getFolderTree($user, $folder_id, $subfolders);
        if ($folder_tree === false) {
            return false;
        }

        $garbage =& $this->_folderlogic->getSpecificFolderRow($user,
            GRN_MESSAGE_GARBAGEFOLDER);
        if ($garbage === false) {
            return false;
        }

        $ret = $this->_moveAllMessages2GarbageBoxRec($user, $folder_tree,
            $garbage);
        if ($ret === false) {
            return false;
        }

        return true;
    }

    /**
     * @access   private
     *
     * @param $user
     * @param $folder_tree
     * @param $garbage
     *
     * @return bool
     */
    function _moveAllMessages2GarbageBoxRec($user, $folder_tree, & $garbage)
    {
        foreach ($folder_tree as $folder_id => $subfolders) {
            $ret = $this->moveAllMessages2GarbageBox($user, $folder_id,
                $garbage);
            if ($ret === false) {
                return false;
            }

            if (array_key_exists('children', $subfolders)) {
                $ret = $this->_moveAllMessages2GarbageBoxRec($user,
                    $subfolders['children'],
                    $garbage);
                if ($ret === false) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @param $user
     * @param $folder_id
     * @param $subfolders
     *
     * @return bool
     */
    function deleteAllMessages($user, $folder_id, $subfolders)
    {
        $folder_tree = $this->_getFolderTree($user, $folder_id, $subfolders);
        if ($folder_tree === false) {
            return false;
        }

        $ret = $this->_deleteAllMessages($user, $folder_tree);
        if ($ret === false) {
            return false;
        }

        return true;
    }

    /**
     * @access   private
     *
     * @param CB_User $user
     * @param array   $folder_tree
     *
     * @return bool
     */
    function _deleteAllMessages($user, $folder_tree)
    {
        foreach ($folder_tree as $folder_id => $subfolders) {
            //$rowset = new CB_RowSet( $this->_relations );
            $table_name = grn_get_personal_tablename_message($user->getOID(),
                GRN_MESSAGE_FOLDERMESSAGERELATIONS);
            $table = $this->_manager->getTableInfo($table_name);
            $rowset = new CB_RowSet($table);
            $rowset->addCondition($rowset->queryf("col_folder = '@S'",
                $folder_id));

            $messages = [];
            while ( ! is_null($row = $rowset->iterate())) {
                $message = $row->get('message');
                $messages[$row->getOID()] = $message->getOID();
            }

            $ret = $this->deleteMessages($user, $messages);
            if ($ret === false) {
                return false;
            }

            if (array_key_exists('children', $subfolders)) {
                $ret = $this->_deleteAllMessages($user,
                    $subfolders['children']);
                if ($ret === false) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @access   private
     *
     * @param CB_User $user
     * @param string  $folder_id
     * @param bool    $subfolders
     *
     * @return array|bool
     */
    function _getFolderTree($user, $folder_id, $subfolders)
    {
        if ($subfolders) {
            $ret = $this->_folderlogic->getFolderTree($user, $folder_id,
                $folder_tree);
            if ($ret === false) {
                return false;
            }
        } else {
            $rowset = new CB_RowSet($this->_folders, 'f');
            $rowset->addCondition($rowset->queryf("f.col_user = '@S' AND f._id = '@S'",
                $user->getOID(), $folder_id));
            //  $user は CB_User なので、UUMが削除フラグチェック済み。
            $row = $rowset->iterate();

            if (is_null($row)) {
                return false;
            }

            $folder_tree = [];
            $folder_tree[$row->getOID()] = [];
        }

        return $folder_tree;
    }

    /**
     * @param CB_User $user
     * @param array   $message
     * @param array   $addressees
     * @param array   $files
     *
     * @return bool
     */
    function saveDraft($user, $message, $addressees, & $files)
    {
        // message
        $message_row = $this->_insertMessage($user, $message,
            GRN_MESSAGE_TYPE_DRAFT);

        $rowset = new CB_RowSet($this->_folders);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_folder_type = '@S'",
            $user->getOID(), GRN_MESSAGE_DRAFTFOLDER));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。

        /** @var GRN_Message_Folders $draft_folder */
        $draft_folder = $rowset->iterate();
        if (is_null($draft_folder)) {
            return false;
        }

        // relations
        $this->_insertRelations($message_row, $user, $draft_folder, 2);

        // addressees
        if (count($addressees) > 0) {
            foreach ($addressees as $addressee) {
                $user_row = $this->_uum->getUser($addressee['addressee_id']);
                if ($user_row !== false) {
                    $this->_insertAddressees($message_row, $user_row,
                        $addressee['addressee_order'], 0,
                        $addressee['addressee_is_operator']);
                }
            }
        }

        // attached files
        $ret = $this->_addMessageFiles($user, $message_row, $files);
        if ($ret === false) {
            return false;
        }

        return true;
    }

    /**
     * @param $user
     * @param $message_id
     * @param $message
     * @param $addressees
     * @param $files
     *
     * @return bool
     */
    function modifyDraft($user, $message_id, $message, $addressees, & $files)
    {
        //  get messsage data
        $message_row = $this->_messages->getRow($message_id);

        if ($message_row === false) {
            return false;
        }

        // current attached files
        $table_manager = GRN_Message_TableManager::getInstance();
        $files_tbl
            = $table_manager->getTableInfo('GRN_Message_AttachedFiles');

        $rowset = new CB_RowSet($files_tbl);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_follow IS NULL",
            $message_id));

        // delete attached files
        while ( ! is_null($row = $rowset->iterate())) {
            if ($row->get('publicly') == '0') // closed file
            {
                $file = $row->get('file');
                $file->delete();
                $row->delete();
            }
        }
        $message_row->set('file_num', 0);
        $message_row->set('file_size', 0);

        // update message data
        $message_row = $this->_modifyMessage(
            $user,
            $message_id,
            $message['subject'],
            $message['data'],
            $message['format_type'],
            $files,
            $message['confirm']
        );

        // addressees
        $addressees_tbl
            = $table_manager->getTableInfo('GRN_Message_Addressees');
        $rowset = new CB_RowSet($addressees_tbl);
        $rowset->addCondition($rowset->queryf("col_message = '@S'",
            $message_id));

        while ( ! is_null($row = $rowset->iterate())) {
            $addressee_row = $row->get('addressee');

            if (is_null($addressee_row)) {
                $row->delete();
                continue;
            }

            $addressee_id = $addressee_row->getOID();

            $delete = true;
            if (is_array($addressees)) {
                foreach ($addressees as $key => $addressee) {
                    if ($addressee_id == $addressee['addressee_id']) {
                        $row->set('view_order', $addressee['addressee_order']);
                        $row->set('is_operator',
                            $addressee['addressee_is_operator']);

                        $addressees[$key]['nochange'] = 1;
                        $delete = false;
                        break;
                    }
                }
            }

            if ($delete) {
                $row->delete();
            }
        }

        if (is_array($addressees)) {
            foreach ($addressees as $addressee) {
                if ( ! array_key_exists('nochange', $addressee)) {
                    $user_row
                        = $this->_uum->getUser($addressee['addressee_id']);
                    $this->_insertAddressees($message_row, $user_row,
                        $addressee['addressee_order'], 0,
                        $addressee['addressee_is_operator']);
                }
            }
        }

        return true;
    }

    /**
     * check having a privilege for accessing specified message
     *
     * @param    CB_User $user
     * @param    string  $message_id
     * @param    string  $relation_id
     * @param    bool    $strict_match
     *
     * @return   mixed    message information array
     *                    if cannot access specified message, return FALSE
     *
     * return_array['cid'] => folder id
     *             ['rid'] => relation id
     *             ['mid'] => message id
     */
    function hasPrivilege(
        $user,
        $message_id,
        $relation_id,
        $strict_match = false
    ) {
        $user_id = $user->getOID();

        // 受信メッセージ→送信メッセージの優先順位で返す
        //$rowset = new CB_RowSet( $this->_relations );
        $table_name = grn_get_personal_tablename_message($user_id,
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $rowset = new CB_MultiRowSet($table, 'relation');
        $rowset->addJoin(
            $this->_manager->getTableInfo(GRN_MESSAGE_FOLDERS),
            "relation.col_folder=folder._id",
            CB_DATABASE_INNER_JOIN,
            'folder'
        );
        $rowset->addJoin(
            $this->_manager->getTableInfo('cb_user'),
            "relation.col_user=u._id",
            CB_DATABASE_INNER_JOIN,
            'u'
        );

        $rowset->addCondition($rowset->queryf("relation.col_user = '@S' AND relation.col_message = '@S'",
            $user_id,
            $message_id));
        if ($strict_match) {
            $rowset->addCondition($rowset->queryf("relation.col_snapshot_message IS NULL"));
        }
        $rowset->addOrderColumn('relation.col_sent_message_flag', true);

        $message = [];
        $msgs = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $folder = $row['folder'];
            /** @var GRN_Message_FolderMessageRelations $relation */
            $relation = $row['relation'];
            $msg = [];

            $msg['cid'] = $folder->getOID();
            $msg['rid'] = $relation->getOID();
            $msg['mid'] = $message_id;

            $msgs[$folder->get('folder_type')] = $msg;
            if ($relation_id == $msg['rid']) {
                $message = $msg;
                break;
            }
        }
        $rowset->destroy();

        if (count($message) == 0) {
            $folder_type_order = [
                GRN_MESSAGE_GARBAGEFOLDER,
                GRN_MESSAGE_SENDINGFOLDER
            ];

            foreach ($folder_type_order as $folder_type) {
                if (array_key_exists($folder_type, $msgs)) {
                    $message = $msgs[$folder_type];
                    unset($msgs[$folder_type]);
                }
            }
            foreach ($msgs as $msg) {
                $message = $msg;
            }
        }

        if (count($message) > 0) {
            return $message;
        }

        // snapshotのIDも受理し、オリジナルに正規化
        $rowset = new CB_RowSet($table);
        $rowset->addCondition($rowset->queryf("col_user = '@S' AND col_snapshot_message = '@S'",
            $user_id,
            $message_id));
        //  $user は CB_User なので、UUMが削除フラグチェック済み。

        $message = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $folder = $row->get('folder');
            $original = $row->get('message');
            $message['cid'] = $folder->getOID();
            $message['rid'] = $row->getOID();
            $message['mid'] = $original->getOID();

            if ($relation_id == $message['rid']) {
                break;
            }
        }
        $rowset->destroy();

        if (count($message) > 0) {
            return $message;
        }

        return false;
    }

    /**
     * get unconfirmed message list
     *
     * @param    CB_User $user
     * @param    string  $sort        sort column
     * @param    boolean $reverse     TRUE: sort in descending order
     *                                FALSE: sort in ascending order
     * @param    int     $offset      start position
     * @param    int     $limit       message number you wanna get
     *
     * @return   array     unconfirmed message list
     *
     * return_array[]['cid']          => string    folder id
     *               ['rid']          => string    relation id
     *               ['mid']          => string    message id
     *               ['subject']      => string    subject
     *               ['creator_id']   => string    creator id
     *               ['creator_name'] => string    creator name
     *               ['time']         => object    CB_TimeStamp   last modified time
     *               ['folder_name']  => string    folder name
     *               ['has_files']    => boolean   TRUE: has files
     *               ['status']       => int       0: unread, 1: update, 2: read
     */
    function getUnconfirmedMessageList($user, $sort, $reverse, $offset, $limit)
    {
        //for escape!
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $columns = [
            'f._id fid',
            'r._id rid',
            'm._id mid',
            'col_subject',
            'col_creator',
            'col_deleted',
            'col_creator_name',
            'col_last_mtime',
            'col_file_num',
            'col_folder_name',
            'col_folder_type',
            'col_last_vtime',
            'm.col_ctime mctime'
        ];

        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $tables = [
            $table_name . ' r',
            'tab_grn_message_messages m LEFT JOIN tab_cb_user AS u ON m.col_creator = u._id',
            'tab_grn_message_addressees a',
            'tab_grn_message_folders f'
        ];

        $user_id = $user->getOID();
        $conditions = [
            'r.col_user=\'' . $db->escape($user_id) . '\'',
            'col_sent_message_flag=\'0\'',
            'r.col_message=m._id',
            'col_confirm=\'1\'',
            'r.col_message=a.col_message',
            'col_addressee=\'' . $db->escape($user_id) . '\'',
            'col_view_flag=\'0\'',
            'f._id=r.col_folder'
        ];

        $query = 'SELECT ' . implode(', ', $columns) . ' FROM ' . implode(', ',
                $tables) . ' WHERE ' . implode(' AND ', $conditions);

        $alias = '';
        switch ($sort) {
            case 'creator':
            case 'last_mtime':
                $alias = 'm';
                break;
            case 'folder':
                $alias = 'r';
                break;
            default:
                return false;
        }

        $query .= ' ORDER BY ' . $alias . '.col_' . $sort;
        $query .= $reverse ? ' DESC ' : '';
        $query .= ', r._id';

        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);
        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }


        require_once('fw/i18n.csp');
        $message_list = [];
        while ($row = $db->fetch_assoc($result)) {
            if ( ! is_null($row['col_deleted'])) {
                $row['col_creator'] = null;
            }
            unset($row['col_deleted']);
            $message = [];
            $message['cid'] = $row['fid'];
            $message['rid'] = $row['rid'];
            $message['mid'] = $row['mid'];
            $message['subject'] = $row['col_subject'];
            $message['creator_id'] = is_null($row['col_creator']) ? ''
                : $row['col_creator'];
            $message['creator_name'] = $row['col_creator_name'];
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $row['col_last_mtime'];
            $message['time'] = $ts;
            //$message['has_files']    = $row['col_file_num'] > 0 ? TRUE : FALSE;

            require_once('message/file.csp');
            $fm = new GRN_Message_FileManager();
            $message['has_files'] = $fm->getMessageFileNum($row['mid'], false)
                                    > 0 ? true : false;

            $folder_name = $row['col_folder_name'];
            if ($row['col_folder_type'] != GRN_MESSAGE_GENERALFOLDER) {
                $folder_name = cb_msg(GRN_MESSAGE_MODULEID, $folder_name);
            }
            $message['folder_name'] = $folder_name;

            $last_vtime = $row['col_last_vtime'];
            $last_mtime = $row['col_last_mtime'];
            if ($last_vtime >= $last_mtime) {
                $message['status'] = 2;     // read
            } else {
                $ctime = $row['mctime'];
                if ($last_vtime > $ctime) {
                    $message['status'] = 1; // update
                } else {
                    $message['status'] = 0; // unread
                }
            }

            $message_list[] = $message;
        }

        return $message_list;
    }

    /**
     * get the number of unconfirmed message
     *
     * @param    CB_User $user CB_User
     *
     * @return   int      unconfirmed message number
     */
    function getUnconfirmedMessageNum($user)
    {
        //for escape!
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $tables = [
            $table_name . ' r',
            'tab_grn_message_messages m',
            'tab_grn_message_addressees a'
        ];

        $user_id = $user->getOID();
        //escape!
        $conditions = [
            'col_user=\'' . $db->escape($user_id) . '\'',
            'col_sent_message_flag=\'0\'',
            'r.col_message=m._id',
            'col_confirm=\'1\'',
            'r.col_message=a.col_message',
            'col_addressee=\'' . $db->escape($user_id) . '\'',
            'col_view_flag=\'0\''
        ];

        $query = 'SELECT COUNT(*) count FROM ' . implode(', ', $tables)
                 . ' WHERE ' . implode(' AND ', $conditions);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        return $row['count'];
    }

    /**
     *  指定のメッセージについて、添付ファイルを削除する。
     *  ただし、GRN_Message_FileManager によるファイルの削除処理は doc_root下の command_XXXX で行い、
     *  ここでは社内メール本体と通知の更新のみ行う。
     *
     *  これは、社内メールはつくりとして cb_throw_error を doc_root 下から行うという慣習があるが、
     *  この関数で起こりうる例外( メッセージが見つからない )と、
     *  GRN_Message_FileManager の削除処理の例外( ファイルが見つからない )とを区別して投げなければならないため、
     *  この関数1つの中で両者を処理し、失敗した場合の結果をまとめることはできないため。
     *  ※ 処理中に起こりうる例外は2種だが、この関数が返せる結果は1つしかない。
     *
     * @param  CB_User $sender     メッセージの更新者 = メッセージの送信者。nullが指定された場合はここで取りだす。
     * @param  int     $message_id メッセージID
     *
     * @return GRN_Message_Messages
     */
    function deleteMessageFile($sender, $message_id)
    {
        //  該当のメッセージを取りだす
        $row = $this->_messages->getRow($message_id);
        if ( ! $row) {
            return false;
        }

        //  メッセージの更新時刻を更新する
        $time = new CB_TimeStamp();
        $time->unix_ts = cb_get_db_timestamp();

        //  メッセージのファイル数を減らす
        require_once('message/file.csp');
        $fm = new GRN_Message_FileManager();
        $files = $fm->getMessageFiles($message_id, false);
        $file_num = count($files);
        $row->set('file_num', $file_num);

        if ($row->get('message_type') != GRN_MESSAGE_TYPE_DRAFT) {
            if (FtsApplication::isAvailable()) {
                $indexService = new IndexService();
                $indexService->updateMessageIndex($row);
            }
        }

        return $row;
    }

    /**
     * @param CB_User $user
     * @param int     $offset
     * @param int     $limit
     *
     * @return array
     */
    function getConfirmRequestMessageList($user, $offset = 0, $limit = -1)
    {
        $message_list = [];
        $confirm_request_mid_list
            = $this->_getConfirmRequestMessageIdList($user, $offset,
            $limit);
        if ( ! is_array($confirm_request_mid_list)
             || 0 >= count($confirm_request_mid_list)
        ) {
            return $message_list;
        }

        $relation_ids = $this->getPriorityFolder($user,
            $confirm_request_mid_list);
        if ( ! is_array($relation_ids) || 0 >= count($relation_ids)) {
            return $message_list;
        }

        //for escape!
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $columns = [
            'f._id fid',
            'r._id rid',
            'm._id mid',
            'col_subject',
            'col_creator',
            'col_creator_name',
            'col_last_mtime',
            'col_file_num',
            'col_folder_name',
            'col_folder_type',
            'col_last_vtime',
            'm.col_ctime mctime'
        ];
        $columns[]
            = "(SELECT count( col_view_flag ) FROM tab_grn_message_addressees v WHERE v.col_message = m._id AND col_view_flag != '0' AND v.col_is_sender ='0') AS view_num";
        $columns[]
            = "(SELECT count( col_addressee ) FROM tab_grn_message_addressees v WHERE v.col_message = m._id AND v.col_is_sender ='0') AS addressees";

        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $join_table = $table_name
                      . ' r INNER JOIN tab_cb_user u ON r.col_user = u._id AND u.col_deleted IS NULL';
        $tables = [
            $join_table,
            'tab_grn_message_messages m',
            'tab_grn_message_folders f'
        ];

        //for escape!
        $conditions = ['r.col_message=m._id', 'f._id=r.col_folder'];
        $conditions[] = cb_queryf($db, "r._id IN (@A)", $relation_ids);


        $query = 'SELECT ' . implode(', ', $columns) . ' FROM ' . implode(', ',
                $tables) . ' WHERE ' . implode(' AND ', $conditions);
        $query .= ' ORDER BY m.col_ctime DESC';
        $query = $db->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }


        require_once('fw/i18n.csp');
        while ($row = $db->fetch_assoc($result)) {
            $message = [];
            $message['cid'] = $row['fid'];
            $message['rid'] = $row['rid'];
            $message['mid'] = $row['mid'];
            $message['subject'] = $row['col_subject'];
            $message['creator_id'] = is_null($row['col_creator']) ? ''
                : $row['col_creator'];
            $message['creator_name'] = $row['col_creator_name'];
            $ts = new CB_TimeStamp();
            $ts->unix_ts = $row['mctime'];
            $message['time'] = $ts;

            require_once('message/file.csp');
            $fm = new GRN_Message_FileManager();
            $message['has_files'] = $fm->getMessageFileNum($row['mid'], false)
                                    > 0 ? true : false;

            $folder_name = $row['col_folder_name'];
            if ($row['col_folder_type'] != GRN_MESSAGE_GENERALFOLDER) {
                $folder_name = cb_msg(GRN_MESSAGE_MODULEID, $folder_name);
            }
            $message['folder_name'] = $folder_name;

            $last_vtime = $row['col_last_vtime'];
            $last_mtime = $row['col_last_mtime'];
            if ($last_vtime >= $last_mtime) {
                $message['status'] = 2;     // read
            } else {
                $ctime = $row['mctime'];
                if ($last_vtime > $ctime) {
                    $message['status'] = 1; // update
                } else {
                    $message['status'] = 0; // unread
                }
            }

            $message['confirmed_num'] = $row['view_num'];
            $message['addressee_num'] = $row['addressees'];

            $message_list[] = $message;
        }

        return $message_list;
    }

    /**
     * @param CB_User $user
     * @param string  $message_id
     *
     * @return bool
     */
    function finishViewMessage($user, $message_id)
    {
        $rowset = new CB_RowSet($this->_addressees);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_addressee = '@S'",
            $message_id, $user->getOID()));
        $row = $rowset->iterate();
        if (is_null($row)) {
            return false;
        }

        $row->set('finish_view_flag', '1');

        return true;
    }

    /**
     * get list of relation id
     *
     * @param   CB_User $user
     * @param   array   $mid_list
     *
     * @return  array   list of relation id
     */
    function getPriorityFolder($user, $mid_list)
    {
        $relation_id_list = [];
        if ( ! is_array($mid_list) || count($mid_list) <= 0) {
            return $relation_id_list;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $message_id_list = [];
        foreach ($mid_list as $mid) {
            $message_id_list[] = "'" . $db->escape($mid) . "'";
        }

        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');

        // 指定したユーザーの指定されたmidのfoldermessagerelationを取得
        //  $user は CB_User なので、UUMが削除フラグチェック済み。
        $query
            = "SELECT relation._id AS rid, relation.col_message AS mid, folder.col_folder_type AS folder_type "
              .
              " FROM ( " . $table_name . " AS relation " .
              " INNER JOIN tab_grn_message_folders AS folder ) " .
              " WHERE " .
              " relation.col_user='" . $db->escape($user->getOID()) . "'" .
              " AND " .
              " relation.col_folder = folder._id " .
              " AND " .
              " relation.col_message IN (" . implode(',', $message_id_list)
              . ") " .
              " ORDER BY rid DESC;";

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        // フォルダタイプの優先度
        $folder_priority = [
            GRN_MESSAGE_RECEIVINGFOLDER => 5,
            GRN_MESSAGE_GENERALFOLDER   => 4,
            GRN_MESSAGE_SENDINGFOLDER   => 3,
            GRN_MESSAGE_DRAFTFOLDER     => 2,
            GRN_MESSAGE_GARBAGEFOLDER   => 1
        ];

        $relation_folder_map = [];
        while ($row = $db->fetch_assoc($result)) {
            $relation_id = $row['rid'];
            $message_id = $row['mid'];
            $folder_type = $row['folder_type'];
            // その社内メールの最初のrid
            if ( ! array_key_exists($message_id, $relation_id_list)) {
                $relation_folder_map[$relation_id] = $folder_type;
                $relation_id_list[$message_id] = $relation_id;
                continue;
            }

            $current_relation_id = $relation_id_list[$message_id];
            $current_folder_type = $relation_folder_map[$current_relation_id];

            $next_folder_priority = $folder_priority[$folder_type];
            $current_folder_priority = $folder_priority[$current_folder_type];

            // DESCのORDER BYなので次のリレーションのridは必ず小さくなるが、
            // そのリレーションの方が優先度の高いフォルダだったらそのridを採用
            if ($next_folder_priority > $current_folder_priority) {
                $relation_folder_map[$relation_id] = $folder_type;
                $relation_id_list[$message_id] = $relation_id;
                continue;
            }
        }

        return $relation_id_list;
    }

    /**
     * @param CB_User $user
     * @param int     $offset
     * @param         $limit
     *
     * @return array
     */
    function _getConfirmRequestMessageIdList($user, $offset = 0, $limit = -1)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $table_name = grn_get_personal_tablename_message($user->getOID(),
            'tab_grn_message_foldermessagerelations');
        $tables = [
            $table_name . ' r',
            'tab_grn_message_messages m',
            'tab_grn_message_addressees a',
            'tab_grn_message_folders f'
        ];
        //for escape!
        $user_id = $user->getOID();
        $conditions = [
            'r.col_user=\'' . $db->escape($user_id) . '\'',
            '((m.col_creator=\'' . $db->escape($user_id)
            . '\') OR (m.col_delegator=\'' . $db->escape($user_id) . '\'))',
            'm.col_message_type!=\'' . GRN_MESSAGE_TYPE_DRAFT . '\'',
            'r.col_message=m._id',
            'col_confirm=\'1\'',
            'r.col_message=a.col_message',
            'a.col_finish_view_flag=\'0\'',
            'col_addressee=\'' . $db->escape($user_id) . '\'',
            'f._id=r.col_folder',
        ];
        $columns = ["DISTINCT m._id mid", "m.col_ctime"];
        $columns[]
            = "(SELECT count( col_view_flag ) FROM tab_grn_message_addressees v WHERE v.col_message = m._id AND col_view_flag != '0' AND v.col_is_sender ='0') AS view_num";
        $columns[]
            = "(SELECT count( col_addressee ) FROM tab_grn_message_addressees v WHERE v.col_message = m._id AND v.col_is_sender ='0') AS addressees";

        $query = 'SELECT ' . implode(', ', $columns) . ' FROM ' . implode(', ',
                $tables) . ' WHERE ' . implode(' AND ', $conditions);
        $query .= ' HAVING (view_num < addressees) ORDER BY m.col_ctime DESC';
        $query = $db->select_format($query, $offset, $limit,
            CB_DATABASE_NO_LOCK);

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }

        $confirm_request_mid_list = [];
        while ($row = $db->fetch_assoc($result)) {
            $confirm_request_mid_list[$row['mid']] = $row['mid'];
        }
        $db->free_result($result);

        return $confirm_request_mid_list;
    }

    /**
     * @access private
     *
     * @param CB_User $user
     * @param string  $message_id
     *
     * @return bool
     */
    function _isExistMessage($user, $message_id)
    {
        $table_name = grn_get_personal_tablename_message($user->getOID(),
            GRN_MESSAGE_FOLDERMESSAGERELATIONS);
        $table = $this->_manager->getTableInfo($table_name);
        $rowset = new CB_RowSet($table, 'r');
        $rowset->addCondition($rowset->queryf("r.col_message = '@S' AND r.col_sent_message_flag= '0' AND r.col_user='@S'",
            $message_id, $user->getOID()));
        $user_table = $this->_manager->getTableInfo('CB_User');
        $on = 'r.col_user = u._id AND u.col_deleted IS NULL';
        $rowset->addJoin($user_table, $on, CB_DATABASE_INNER_JOIN, 'u');
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $rowset->setLock(CB_DATABASE_NO_LOCK);

        $result = $rowset->iterate();
        $rowset->destroy();

        return ($result['count'] > 0);
    }

    /**
     * Delete records from tab_grn_foldermessagerelation.
     *
     * @param array $delete_user_list keys of this array are IDs of the users.
     * @param array $message_id       string ID of the message
     *
     * @return bool
     * @access private
     */
    function _deleteFolderMessageRelations($delete_user_list, $message_id)
    {
        $table_names = [];
        foreach ($delete_user_list as $user_id) {
            $table_name = grn_get_personal_tablename_message($user_id,
                'tab_grn_message_foldermessagerelations');
            if ( ! array_key_exists($table_name, $table_names)) {
                $table_names[$table_name] = [];
            }
            $table_names[$table_name][] = $user_id;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        foreach ($table_names as $table_name => $user_ids) {
            $query = cb_queryf($db,
                "DELETE FROM @S WHERE col_user IN (@A) AND col_message='@S'",
                $table_name, $user_ids, $message_id);
            $ret = $db->query($query);
            if ($ret === false) {
                $db->throwError([
                    'query' => 'failed query on DELETE: ' . $query
                ]);
            }

            if (FtsApplication::isAvailable()) {
                $indexService = new IndexService();
                foreach ($user_ids as $user_id) {
                    $indexService->deleteFolderMessageRelationIndex($message_id,
                        $user_id);
                }
            }
        }

        return true;
    }

    /**
     * @param       $message_id
     * @param array $user_list
     *
     * @return array
     */
    function getFolderMessageRelations($message_id, array $user_list)
    {
        $table_names = [];
        foreach ($user_list as $user_id) {
            $table_name = grn_get_personal_tablename_message($user_id,
                'tab_grn_message_foldermessagerelations');
            if ( ! array_key_exists($table_name, $table_names)) {
                $table_names[$table_name] = [];
            }
            $table_names[$table_name][] = $user_id;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $folder_message_relations = [];
        foreach ($table_names as $table_name => $user_ids) {
            $query = cb_queryf($db,
                "SELECT col_folder FROM @S WHERE col_user IN (@A) AND col_message='@S'",
                $table_name,
                $user_ids,
                $message_id);

            $folder_list = $db->query($query);
            while ($row = $db->fetch_assoc($folder_list)) {
                $folder_message_relations[] = (int)$row['col_folder'];
            }
        }

        return $folder_message_relations;
    }

    /**
     * Delete notification of $delete_user_list which are related to the message whose ID is $message_id from
     *
     * @param array  $delete_user_list   keys of this array are IDs of the users.
     * @param array  $message_id         string ID of the message
     * @param string $notification_table notify or history
     *
     * @return bool
     * @access private
     */
    function _deleteNotification(
        $delete_user_list,
        $message_id,
        $notification_table = 'tab_grn_notification_notify'
    ) {
        $table_names = [];
        foreach ($delete_user_list as $user_id) {
            $table_name = grn_get_personal_tablename($user_id,
                $notification_table);
            if ( ! array_key_exists($table_name, $table_names)) {
                $table_names[$table_name] = [];
            }
            $table_names[$table_name][] = $user_id;
        }

        foreach ($table_names as $table_name => $user_ids) {
            require_once('grn/notification.csp');
            $db = grn_notification_get_connection($user_ids[0]);

            $query = cb_queryf($db,
                "DELETE FROM @S WHERE col_user IN (@A) AND col_module_id='grn.message' AND col_unique_id='@S'",
                $table_name, $user_ids, $message_id);
            $ret = $db->query($query);
            if ($ret === false) {
                $db->throwError([
                    'query' => 'failed query on DELETE: ' . $query
                ]);
            }
        }

        return true;
    }

    function getOffset($offset, $message_id)
    {
        $rowset = new CB_RowSet($this->_follows);
        $rowset->addCondition($rowset->queryf("col_message = '@S'",
            $message_id));
        $rowset->addCondition($rowset->queryf("col_id = '@S'", $offset));
        $result = $rowset->iterate();
        if ( ! is_null($result)) {
            return $result->getOID();
        }

        return -1;
    }

    function getUnsubscribeUsers($message_id, & $addressees)
    {
        $unsubscribe_users = [];

        if ( ! $addressees) {
            return $unsubscribe_users;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $union_tables = '';
        $id_2_name = [];
        foreach ($addressees as $addressee) {
            $id_2_name[$addressee['id']] = $addressee['name'];

            if ($union_tables) {
                $union_tables .= ' UNION ALL ';
            }

            $table_name = grn_get_personal_tablename_message($addressee['id'],
                'tab_grn_message_foldermessagerelations');
            $condition = cb_queryf($db,
                "col_message = '@S' AND col_user = '@S' AND col_subscription_flag = '0'",
                $message_id, $addressee['id']);
            $union_tables .= '(SELECT * FROM ' . $table_name . ' WHERE '
                             . $condition . ')';
        }

        $query = 'SELECT col_user FROM ( ' . $union_tables . ' ) AS uni';

        $result = $db->query($query);
        if ($result === false) {
            $db->throwError(['query' => 'failed query on SELECT: ' . $query]);
        }
        while ($row = $db->fetch_assoc($result)) {
            $unsubscribe_users[$row['col_user']]['id'] = $row['col_user'];
        }

        $db->free_result($result);

        foreach ($unsubscribe_users as $key => $user) {
            if (array_key_exists($user['id'], $id_2_name)) {
                $unsubscribe_users[$key]['name'] = $id_2_name[$user['id']];
            }
        }

        return $unsubscribe_users;
    }

    /**
     * Generate star data
     *
     * @param CB_User $user
     * @param array   $params
     *
     * @return GRN_Star_Data
     */
    function getStarData($user, $params = [])
    {
        assert('is_array($params) && count($params) > 0');
        $message_id = array_key_exists('mid', $params) ? $params['mid'] : null;
        $relation_id = array_key_exists('rid', $params) ? $params['rid'] : null;
        $message = $this->hasPrivilege($user, $message_id, $relation_id,
            true);
        if ($message === false) {
            $app_name = cb_msg(GRN_MESSAGE_MODULEID, 'application_name');
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $app_name],
                ['app_name' => $app_name],
                ['app_name' => $app_name]);
        }
        $relation_id = $message['rid'];
        $category_id = $message['cid'];

        $folder_type = $this->_folderlogic->getFolderType($user, $category_id);
        if ($folder_type == GRN_MESSAGE_GARBAGEFOLDER)     // folder is trash
        {
            $message = false;
        } else {
            $message = $this->getMessageInfo($user, $relation_id, $message_id);
        }
        if ($message === false) {
            $app_name = cb_msg(GRN_MESSAGE_MODULEID, 'application_name');
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $app_name],
                ['app_name' => $app_name],
                ['app_name' => $app_name]);
        }
        require_once('star/logic.csp');
        $data = new GRN_Star_Data();
        $data->setModuleId(GRN_MESSAGE_MODULEID);
        $data->setTimeStampData($message['last_mtime']);
        $data->setSenderData($message['creator_name'], $message['creator_id']);
        $data->setSubjectData($message['subject']);
        $org_data = [
            'mid' => $message_id,
            'rid' => $relation_id,
            'cid' => $category_id
        ];
        $data->setUniqueId($message_id);
        $org_data['mtype'] = $message['message_type'];
        $data->setOrgData($org_data);

        return $data;
    }

    /**
     * @access  private
     * @return GRN_Star_StarLogic
     */
    function _getStarLogic()
    {
        static $_star_logic = null;
        if (is_null($_star_logic)) {
            require_once('star/logic.csp');
            $_star_logic = GRN_Star_StarLogic::getInstance();
        }

        return $_star_logic;
    }

    /**
     * Get creator id of message
     *
     * @param      $message_id
     * @param bool $include_deleted Set TRUE in case want to get deleted user
     *
     * @return bool|string
     */
    function getMessageCreatorId($message_id, $include_deleted = false)
    {
        if ($include_deleted) {
            $db = $this->_getDBConnection();
            $query = cb_queryf($db,
                "SELECT col_creator FROM tab_grn_message_messages WHERE _id = '@S'",
                $message_id);

            $result = $db->query($query);
            $row = $db->fetch_assoc($result);
            $db->free_result($result);

            $creator_id = '';
            if ($row && isset($row['col_creator'])) {
                $creator_id = $row['col_creator'];
            }

            return $creator_id;
        }

        $lock = $this->_messages->_lock;
        $this->_messages->setLock(CB_DATABASE_NO_LOCK);
        $message = $this->_messages->getRow($message_id);
        $this->_messages->setLock($lock);

        if ( ! $message) {
            return false;
        }
        $message_owner = $message->get('creator');
        $message_owner_id = '';
        if ( ! is_null($message_owner)) {
            $message_owner_id = $message_owner->getOID();
        }

        return $message_owner_id;
    }

    /**
     * move messages to inbox
     *
     * @param    CB_User $user      user  object
     * @param    string  $folder_id source folder ID
     * @param    array   $relations relation IDs list
     *
     * @return   boolean   TRUE: success moving messages to garbage box
     */
    function moveMessages2Inbox($user, $folder_id, $relations)
    {
        $d_folder_id = $this->_folderlogic->getSpecificFolderID($user,
            GRN_MESSAGE_RECEIVINGFOLDER);
        if ( ! $d_folder_id) {
            return false;
        }

        return $this->moveMessages($user, $folder_id, $d_folder_id, $relations);
    }

    /**
     * make users maintainers.
     *
     * @param array  $user_ids   array of id of users.
     * @param string $message_id message id
     *
     * @return boolean TRUE: success
     */
    function addOperators($user_ids, $message_id)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $db = $app_locator->getConnection('message');

        $query
            = "UPDATE tab_grn_message_addressees SET col_is_operator='1' WHERE col_message = '@S' AND col_addressee IN ( @A )";
        $query = cb_queryf($db, $query, $message_id, $user_ids);

        return $db->query($query);
    }

    private $messageFacade = null;

    /**
     *
     * @return MessageFacade
     */
    public function getMessageFacade()
    {
        if (is_null($this->messageFacade)) {
            require_once("message/MessageFacade.csp");
            $this->setMessageFacade(new MessageFacade());
        }

        return $this->messageFacade;
    }

    public function setMessageFacade($messageFacade)
    {
        $this->messageFacade = $messageFacade;
    }

    private $fwFacade = null;

    public function getFwFacade()
    {
        if (is_null($this->fwFacade)) {
            require_once("fw/FwFacade.csp");
            $this->setFwFacade(new FwFacade());
        }

        return $this->fwFacade;
    }

    public function setFwFacade($fwFacade)
    {
        $this->fwFacade = $fwFacade;
    }

    private $databaseConnection = null;

    /**
     *
     * @return CB_DatabaseConnection
     */
    public function getDatabaseConnection()
    {
        if (is_null($this->databaseConnection)) {
            $app_locator = GRN_ApplicationLocator::instance();
            $this->setDatabaseConnection($app_locator->getConnection('message'));
        }

        return $this->databaseConnection;
    }

    public function setDatabaseConnection($databaseConnection)
    {
        $this->databaseConnection = $databaseConnection;
    }

    /**
     * @param $messageId
     *
     * @return GRN_Message_Messages|bool
     */
    public function getMessageById($messageId)
    {
        return $this->_messages->getRow($messageId);
    }

    /**
     * @param string $userId
     * @param string $messageId
     *
     * @return GRN_Message_FolderMessageRelations[]
     */
    public function getRelation($userId, $messageId)
    {
        require_once('fw/database.csp');
        $tableName = grn_get_personal_tablename_message($userId,
            'grn_message_foldermessagerelations');
        $tableInfo = $this->_manager->getTableInfo($tableName);
        $rowSet = new CB_RowSet($tableInfo);
        $rowSet->addCondition($rowSet->queryf("col_user = '@S'", $userId));
        $rowSet->addCondition($rowSet->queryf("col_message = '@S' OR col_snapshot_message = '@S'",
            $messageId, $messageId));
        $relation = [];
        while ($row = $rowSet->iterate()) {
            $relation[] = new GRN_Message_FolderMessageRelations($row);
        }

        return $relation;
    }

    public function isExistRelation($userId, $messageId)
    {
        $tableName = 'tab_'
                     . strtolower(grn_get_personal_tablename_message($userId,
                GRN_MESSAGE_FOLDERMESSAGERELATIONS));
        $db = $this->_getDBConnection();
        $query = cb_queryf(
            $db,
            'SELECT COUNT(_id) AS count_result FROM @S WHERE col_user = \'@S\' AND (col_message = \'@S\' OR col_snapshot_message = \'@S\')',
            $tableName,
            $userId,
            $messageId,
            $messageId
        );
        $result = $db->query($query);
        $data = $db->fetch_assoc($result);
        $db->free_result($result);
        if ($data['count_result'] > 0) {
            return true;
        }

        return false;
    }

    public function getSnapshotID($userId, $messageId)
    {
        $tableName = 'tab_'
                     . strtolower(grn_get_personal_tablename_message($userId,
                GRN_MESSAGE_FOLDERMESSAGERELATIONS));
        $db = $this->_getDBConnection();
        $query = cb_queryf(
            $db,
            'SELECT col_snapshot_message FROM @S WHERE col_user = \'@S\' AND col_message = \'@S\' AND col_snapshot_message IS NOT NULL',
            $tableName,
            $userId,
            $messageId
        );
        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);
        $ret = false;
        if ($row && isset($row['col_snapshot_message'])) {
            $ret = $row['col_snapshot_message'];
        }

        return $ret;
    }

    /**
     * @param string $followId
     *
     * @return GRN_Message_Follows|null
     */
    public function getFollowObj($followId)
    {
        return $this->_follows->getRow($followId);
    }

    /**
     * Get creator id of comment which including deleted user
     *
     * @param string $follow_id
     *
     * @return string $creator_id
     */
    public function getCommentCreatorId($follow_id)
    {
        $db = $this->_getDBConnection();
        $query = cb_queryf($db,
            "SELECT col_creator FROM tab_grn_message_follows WHERE _id = '@S'",
            $follow_id);

        $result = $db->query($query);
        $row = $db->fetch_assoc($result);
        $db->free_result($result);

        $creator_id = '';
        if ($row && isset($row['col_creator'])) {
            $creator_id = $row['col_creator'];
        }

        return $creator_id;
    }

    /**
     * @param string $message_id
     */
    private function indexEsFolderMessageRelation($message_id)
    {
        if (FtsApplication::isAvailable()) {
            $query_format
                = "SELECT col_addressee, col_dtime FROM tab_grn_message_addressees WHERE col_message = '@S' LOCK IN SHARE MODE";
            $db = cb_get_app_db('message');
            $query = $db->format($query_format, [$message_id]);
            $ret = $db->query($query);
            $user_ids = [];
            while ($row = $db->fetch_assoc($ret)) {
                $user_ids[] = $row['col_addressee'];
            }
            $db->free_result($ret);

            $table_names = [];
            foreach ($user_ids as $user_id) {
                $table_name = grn_get_personal_tablename_message($user_id,
                    'tab_grn_message_foldermessagerelations');
                if ( ! array_key_exists($table_name, $table_names)) {
                    $table_names[$table_name] = [];
                }
                $table_names[$table_name][] = $user_id;
            }

            $message_map = [];
            $message_map[$message_id] = ['folder_ids' => [], 'user_ids' => []];
            foreach ($table_names as $table_name => $user_ids_in_the_table) {
                $query_format
                    = "SELECT col_folder, col_user FROM $table_name WHERE col_message = '@S'";

                $query = $db->format($query_format, [$message_id]);
                $ret = $db->query($query);
                while ($row = $db->fetch_assoc($ret)) {
                    $message_map[$message_id]['folder_ids'][]
                        = $row['col_folder'];
                    $message_map[$message_id]['user_ids'][] = $row['col_user'];
                }
                $db->free_result($ret);
            }

            $indexService = new IndexService();

            foreach ($message_map as $mid => $message) {
                $user_id_list = array_values($message['user_ids']);
                $folder_id_list = array_values($message['folder_ids']);

                $indexService->createEsFolderMessageRelationIndex($mid,
                    $user_id_list, $folder_id_list);
            }
        }
    }

    /**
     * @param array $follow_id_list
     *
     * @return array
     */
    public function getMentionByFollowIdList(array $follow_id_list): array
    {
        $mention_DAO = new MessageMentionDAO();

        return $mention_DAO->getByCommentIdList($follow_id_list);
    }

    /**
     * @param $follow_id
     *
     * @return MentionObjectCollection
     */
    public function getMention(string $follow_id): MentionObjectCollection
    {
        if ($follow_id === '-1') {
            return new MentionObjectCollection();
        }

        $mention = $this->getMentionByFollowIdList([$follow_id]);

        return count($mention) > 0 ? $mention[$follow_id]
            : new MentionObjectCollection();
    }

    /** Get list user id have not permission
     *
     * @param int   $message_id
     * @param array $mention_user_ids
     *
     * @return array
     */
    public function filterUsersNotHavingPermission(
        int $message_id,
        array $mention_user_ids
    ): array {
        if (count($mention_user_ids) == 0) {
            return $mention_user_ids;
        }

        $addressees_user_ids = [];
        $user = cb_get_login_user();
        $addressees = $this->getAddressees($user, $message_id);
        if ($addressees) {
            foreach ($addressees as $addressee) {
                if ($addressee['dtime']->unix_ts == 0
                    && $addressee['delete_flag'] == 0
                ) {
                    $addressees_user_ids[] = $addressee['id'];
                }
            }
        }

        $creator_id = $this->getMessageCreatorId($message_id);
        $addressees_user_ids[] = $creator_id;

        $mention_user_ids_has_permission
            = AppAccess::filterUserIdsInternalAccessByAppId($mention_user_ids,
            GRN_Message_Application::GRN_MESSAGE_APPLICATION_ID);
        $mention_user_ids_filtered
            = array_intersect($mention_user_ids_has_permission,
            $addressees_user_ids);

        return array_diff($mention_user_ids, $mention_user_ids_filtered);
    }
}

/**
 * @param array       $operators
 * @param int         $operator_set
 * @param string|null $sender_id
 *
 * @return array ( user_id => 1 )
 */
function grn_message_form_operators(
    $operators,
    $operator_set,
    $sender_id = null
) {
    $operators = array_flip($operators);
    // select "only sender as operator" or no operators were selected.
    if ($operator_set != 1 || count($operators) == 0) {
        if (is_null($sender_id)) {
            // use login user as sender
            global $G_container_base;
            /** @var GRN_Uum $uum */
            $uum = $G_container_base->getInstance('uum');
            $user = $uum->getLoginUser();
            $sender_id = $user->getOID();
        }
        $operators = [$sender_id => 1];
    }

    return $operators;
}

/**
 * @param array $sUIDs
 * @param array $operators
 *
 * @return array
 */
function grn_message_sUIDs2addressees($sUIDs, $operators)
{
    $addressees = [];
    foreach ($sUIDs as $key => $sUID) {
        $addressee = [];
        $addressee['addressee_id'] = $sUID;
        $addressee['addressee_order'] = $key;
        if (array_key_exists($sUID, $operators)) {
            $addressee['addressee_is_operator'] = 1;
        } else {
            $addressee['addressee_is_operator'] = 0;
        }
        $addressees[] = $addressee;
    }

    return $addressees;
}

/**
 * 自分が差出人か管理者、あるいは自分が宛先にいて管理者が誰もいない場合に TRUE
 *
 * @param array  $addressee_list
 * @param string $creator_id
 *
 * @return bool
 */
function _grn_message_regard_operator($addressee_list, $creator_id = '')
{
    // ユーザー情報
    global $G_container_base;
    /** @var GRN_Uum $uum */
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getLoginUser();

    $user_id = $user->getOID();

    if ( ! is_null($creator_id) && $user_id == $creator_id) {
        return true;
    }
    $login_user_exists = false;
    $operator_flag = false;
    foreach ($addressee_list as $addressee) {
        if ($addressee['id'] == $user_id) {
            $login_user_exists = true;
        }
        if ($addressee['is_operator'] && $addressee['dtime']->unix_ts == 0
            && $addressee['delete_flag'] == 0
            && $uum->isActiveUser($addressee['id'])
        ) {
            if ($addressee['id'] == $user_id) {
                return true;
            }
            $operator_flag = true;
        }
    }
    if ($login_user_exists && $operator_flag == false
        && ($creator_id == ''
            || ! $uum->isActiveUser($creator_id))
    ) {
        return true;
    }

    return false;
}

function _grn_message_attached_files($file_list)
{
    $file_info = [];
    $file_info['files'] = [];
    $file_info['del_file_num'] = 0;

    $assign_file_map = [
        'name' => 'name',
        'size' => 'size',
        'mime' => 'mime',
        'hash' => 'hash',
    ];

    foreach ($file_list as $file_id => $file_data) {
        $file = [];
        if (count($file_data) > 0) {
            foreach ($assign_file_map as $view_name => $data_name) {
                $file[$view_name] = $file_data[$data_name];
            }
            $file['rfid'] = $file_id;
            $file_info['files'][] = $file;
        } else {
            $file_info['del_file_num']++;
        }
    }

    return $file_info;
}

function _grn_message_get_pn_navi_params($pn_name, $pn_ids)
{
    if ( ! array_key_exists($pn_name, $pn_ids)
         || $pn_ids[$pn_name]['rid'] == -1
    ) {
        return false;
    }

    $navi_params = [];
    if ($pn_ids[$pn_name]['type'] == 2) // draft
    {
        $navi_params['page'] = 'message/draft_view';
    } else {
        $navi_params['page'] = 'message/view';
    }
    $navi_params['page_params'] = [];
    $navi_params['page_params']['rid'] = $pn_ids[$pn_name]['rid'];
    $navi_params['page_params']['mid'] = $pn_ids[$pn_name]['mid'];

    return $navi_params;
}
