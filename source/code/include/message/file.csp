<?php

use grn\fts\Application as FtsApplication;
use grn\fts\message\IndexService;
use grn\message\dao\GrnMessageFolderMessageRelationsDAO;

/**
 * attached file manager for message application
 *
 * @author  Eiji TAEN   2005/03
 * @package grn.message
 */

require_once('grn/file.csp');
require_once('message/resources.csp');
require_once('message/table.csp');

class GRN_Message_FileBody extends GRN_FileBody
{
    var $_app_id = 'message';

    var $col_file
        = [
            'type' => 'weak_relation',
            'to'   => 'GRN_Message_File',
            'lazy' => true
        ];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

class GRN_Message_FileLog extends GRN_FileLog
{
    var $_app_id = 'message';

    var $col_file
        = [
            'type' => 'relation',
            'to'   => 'GRN_Message_File',
            'lazy' => true
        ];
    var $col_body = ['type' => 'weak_relation', 'to' => 'GRN_Message_FileBody'];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

class GRN_Message_FileLock extends GRN_FileLock
{
    var $_app_id = 'message';

    var $col_file
        = [
            'type'   => 'relation',
            'to'     => 'GRN_Message_File',
            'unique' => true
        ];

    function __construct($row)
    {
        parent::__construct($row);
    }
}

class GRN_Message_File extends GRN_File
{
    var $_app_id = 'message';
    var $_body_table_name = 'GRN_Message_FileBody';
    var $_log_table_name = 'GRN_Message_FileLog';
    var $_lock_table_name = 'GRN_Message_FileLock';

    /**
     * @access private
     */
    private $_triggers = null;

    function __construct($row)
    {
        parent::__construct($row, 'grn.message');
    }

    /**
     * invoke hooks on create, update or delete event
     *
     * @access public
     *
     * @param string $action action
     */
    function runHook($action)
    {
        if (is_null($this->_triggers)) {
            $loader = new CB_PluginLoader('grn.message.file');
            $this->_triggers = $loader->loadHooks();
        }

        foreach ($this->_triggers as $hook) {
            call_user_func($hook, $this, null, $action);
        }
    }

    /**
     * @see GRN_File::setTitile
     *
     * @param $title
     */
    function setTitle($title)
    {
        parent::setTitle($title);
        $this->runHook('update');
    }


    /**
     * @see GRN_File::update
     *
     * @param mixed  $user
     * @param mixed  $file
     * @param string $comment
     *
     * @return bool|void
     */
    function update($user, $file, $comment)
    {
        parent::update($user, $file, $comment);
        $this->runHook('update');
    }

    /**
     * @see GRN_File::restore
     *
     * @param mixed  $user
     * @param int    $restore_version
     * @param string $comment
     *
     * @return bool|void
     */
    function restore($user, $restore_version, $comment)
    {
        parent::restore($user, $restore_version, $comment);
        $this->runHook('update');
    }

    /**
     * @param    CB_User $user user is a CB_User object
     *
     * @return   bool
     */
    function isCreator($user)
    {
        return $user && $user->getOID() == $this->getId('creator');
    }
}

class GRN_Message_FileManager_Core extends GRN_FileManager
{
    function __construct()
    {
        $this->_file_table = cb_class2table('GRN_Message_File');
        $this->_body_table = cb_class2table('GRN_Message_FileBody');
    }
}

/**
 * attached file manager class
 *
 * @package grn.message
 */
class GRN_Message_FileManager
{
    /**
     * @access private
     * @var CB_TableInfo
     */
    private $_files = null;

    function __construct()
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');
        $this->_files = $manager->getTableInfo(GRN_MESSAGE_ATTACHEDFILES);
    }

    /**
     * add attached files on message
     *
     * @param    object  $user     user CB_User object
     * @param    object  $message  message CB_Row object
     * @param    mixed   $file     an element of $_FILES or GRN_File object
     * @param    boolean $publicly TRUE: a publicly file (default: FALSE)
     *
     * @return   object   GRN_File   if fail, return FALSE
     */
    function addMessageFile($user, $message, & $file, $publicly = false)
    {
        if ( ! $user || ! $message) {
            $___ret = false;

            return $___ret;
        }

        $fm = new GRN_Message_FileManager_Core();

        $dbfile = null;
        if (is_a($file, 'GRN_File')) {
            if ( ! ($dbfile =& $fm->duplicateFile($user, $file, null))) {
                $___ret = false;

                return $___ret;
            }
        } else {
            if ( ! ($dbfile = $fm->createFile($user, $file, null))) {
                $___ret = false;

                return $___ret;
            }
        }

        $row = $this->_files->newRow();

        $row->set('message', $message);
        $row->set('file', $dbfile);

        $publicly ? $row->set('publicly', '1') : $row->set('publicly', '0');
        $row->registerNow();

        $file_num = $message->get('file_num');
        $message->set('file_num', ++$file_num);

        $file_body = $dbfile->getCurrentBody();
        $message->set('file_size',
            $message->get('file_size') + $file_body->get('size'));

        return $dbfile;
    }

    /**
     * add attached files on follow
     *
     * @param    CB_User              $user    user CB_User object
     * @param    GRN_Message_Messages $message message CB_Row object
     * @param    GRN_Message_Follows  $follow  follow CB_Row object
     * @param    mixed                $file    an element of $_FILES or GRN_File object
     * @param    bool                 $publicly
     *
     * @option   boolean               $publicly  TRUE: a publicly file (default: FALSE)
     * @return   object   GRN_File   if fail, return FALSE
     */
    function addFollowFile($user, $message, $follow, & $file, $publicly = false)
    {
        if ( ! $user || ! $follow) {
            $___ret = false;

            return $___ret;
        }

        $follow_owner = $follow->get('creator');
        if (is_null($follow_owner)) {
            {
                $___ret = false;

                return $___ret;
            }
        } else {
            if ($user->getOID() != $follow_owner->getOID()) {
                {
                    $___ret = false;

                    return $___ret;
                }
            }
        }

        $fm = new GRN_Message_FileManager_Core();

        $dbfile = null;
        if (is_a($file, 'GRN_File')) {
            if ( ! ($dbfile =& $fm->duplicateFile($user, $file, null))) {
                $___ret = false;

                return $___ret;
            }
        } else {
            if ( ! ($dbfile = $fm->createFile($user, $file, null))) {
                $___ret = false;

                return $___ret;
            }
        }

        $row = $this->_files->newRow();

        $row->set('message', $message);
        $row->set('follow', $follow);
        $row->set('file', $dbfile);

        $publicly ? $row->set('publicly', '1') : $row->set('publicly', '0');
        $row->registerNow();

        return $dbfile;
    }

    /**
     * get attached files on message
     *
     * @param    int     $message_id        message id
     * @param    boolean $get_deleted_files TRUE: get deleted files info (default: TRUE)
     *
     * @return   GRN_File[]|bool[]   if attached file doesn't exist,
     *                                return FALSE
     */
    function getMessageFiles($message_id, $get_deleted_files = true)
    {
        $rowset = new CB_RowSet($this->_files);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_follow IS NULL",
            $message_id));

        if ($get_deleted_files === false) {
            $rowset->addCondition('col_file IS NOT NULL');
        }

        $rowset->addOrderColumn('_id');

        $files = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $files[$row->getOID()] = $row->get('file');
        }

        return $files;
    }

    /**
     * get attached files on follow
     *
     * @param    string $message_id message id
     * @param    string $follow_id  follow id
     *
     * @return   GRN_File[]|bool[]    if attached file doesn't exist,
     *                                return FALSE
     */
    function getFollowFiles($message_id, $follow_id)
    {
        $rowset = new CB_RowSet($this->_files);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_follow = '@S'",
            $message_id, $follow_id));
        $rowset->addOrderColumn('_id');

        $files = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $files[$row->getOID()] = $row->get('file');
        }

        return $files;
    }

    /**
     * get attached file using file id
     *
     * @param    string $file_id attachedfile id
     *
     * @return   GRN_Message_File    if attached file does not exist,
     *                               return FALSE
     */
    function getFile($file_id)
    {
        $file_relation = $this->getAttachedFileObject($file_id);
        if ( ! $file_relation) {
            {
                $___ret = false;

                return $___ret;
            }
        }

        $ret = $file_relation->get('file');

        return $ret;
    }

    /**
     * @param CB_User $user
     * @param string  $attachedFileId
     *
     * @return bool
     */
    public function hasPrivilege(CB_User $user, $attachedFileId)
    {
        if ( ! is_numeric($attachedFileId)) {
            return false;
        }
        $fileRelation = $this->getAttachedFileObject($attachedFileId);
        if ($fileRelation === false) {
            return false;
        }
        /** @var GRN_Message_Messages $message */
        $message = $fileRelation->get('message');
        $message_id = $message->getOID();

        require_once('message/message_logic.csp');
        $message_logic = new GRN_Message_Logic();
        $snapshot = $message_logic->getSnapshotID($user->getOID(),
            $message_id);
        if ($snapshot) {
            $rowSet = new CB_RowSet($this->_files);
            $rowSet->addCondition($rowSet->queryf("col_file = '@S'",
                $fileRelation->getId('file')));
            $rowSet->addCondition($rowSet->queryf("col_message = '@S'",
                $snapshot));
            $followId = $fileRelation->getId('follow');
            if ($followId) {
                $rowSet->addCondition($rowSet->queryf("col_follow = '@S'",
                    $followId));
            } else {
                $rowSet->addCondition('col_follow IS NULL');
            }
            $rowSet->setLock(CB_DATABASE_NO_LOCK);
            $row = $rowSet->iterate();
            $rowSet->destroy();
            if ( ! $row) {
                return false;
            }

            return true;
        }

        $dao = $this->createMessageRelationDAO();
        if ($dao->hasMessageFolder($user->getOID(), $message_id)) {
            return true;
        } elseif ($dao->hasSnapshotMessageFolder($user->getOID(),
            $message_id)
        ) {
            return true;
        }

        return false;
    }

    /**
     * @param    object $user
     * @param    string $file_id
     * @param    string $relation_id
     *
     * @return   mixed    message information array
     *                    if cannot access specified message, return FALSE
     *
     * return_array['cid'] => folder id
     *             ['rid'] => relation id
     *             ['mid'] => message id
     *             ['rfid'] => file id
     */
    public function getMyMessageInfo($user, $file_id, $relation_id)
    {
        if ( ! is_numeric($file_id)) {
            return false;
        }

        require_once('message/message_logic.csp');
        $message_logic = new GRN_Message_Logic();

        $file_relation = $this->getAttachedFileObject($file_id);
        if ($file_relation === false) {
            return false;
        }

        $message = $file_relation->get('message');
        $message_id = $message->getOID();
        $info = $message_logic->hasPrivilege($user, $message_id,
            $relation_id, true);
        if (is_array($info)) {
            //本人の社内メールの添付ファイル
            $info['rfid'] = $file_id;

            return $info;
        }

        //同じファイル実体を持つものを検索（実体とSnapshotの関係しかないはず）
        $file_entity = $file_relation->get('file');
        if ($file_entity === null || $file_entity === false) {
            return false;
        }

        $file_table = $this->_files;
        $file_table_name = CB_DATABASE_TABLE_PREFIX
                           . $file_table->getTableName();
        $dbconn = $file_table->getDBConnection();
        $query = 'SELECT _id, col_message from ' . $file_table_name
                 . ' WHERE col_file = \'' .
                 $dbconn->escape($file_entity->getOID()) . '\';';
        $ret = $dbconn->query($query);

        //指定されたものでないのがあればチェックを行い、アクセス可能ならそのIDを返す
        $to_return = false;
        while ($row = $dbconn->fetch_row($ret)) {
            if ($row[0] !== $file_id) {
                $alt_file_id = $row[0];
                $alt_message_id = $row[1];
                $info = $message_logic->hasPrivilege($user,
                    $alt_message_id, $relation_id);
                if (is_array($info)) {
                    $info['rfid'] = $alt_file_id;
                    $to_return = $info;
                    break;
                }
            }
        }
        $dbconn->free_result($ret);

        return $to_return;
    }

    /**
     * get all attached file CB_RowSet
     *
     * @param    string  $message_id    message id
     * @param    boolean $reverse       TRUE: sort in descending order (default)
     *                                  FALSE: sort in ascending order
     * @param    string  $sort_key
     *
     * @return   object   CB_RowSet
     */
    function getAllFiles($message_id, $reverse = true, $sort_key = 'ctime')
    {
        switch ($sort_key) {
            case 'mtime':
                $sort_key = 'f.col_mtime';
                break;
            case 'fnd':
                $sort_key = 'b.col_name';
                break;
            case 'ftd':
                $sort_key = 'f.col_title_sort_key';
                break;
            default:
                $sort_key = 'f.col_ctime';
                break;
        }

        $tbl_grn_file = cb_class2table('GRN_Message_File');
        $tbl_grn_filebody = cb_class2table('GRN_Message_FileBody');
        $db = $this->_files->getDBConnection();

        $rowset = new CB_MultiRowSet($this->_files, 'r');
        $rowset->addJoin($tbl_grn_file,
            cb_queryf($db, 'col_message = \'@S\' AND r.col_file = f._id',
                $message_id),
            CB_DATABASE_INNER_JOIN,
            'f'
        );
        $rowset->addJoin($tbl_grn_filebody,
            'f._id = b.col_file AND f.col_version = b.col_version',
            CB_DATABASE_INNER_JOIN,
            'b'
        );
        $rowset->addOrderColumn($sort_key, $reverse);
        $rowset->addOrderColumn('r.col_follow, b._id');

        return $rowset;
    }

    /**
     * get attached file number on specified message
     *
     * @param    string $message_id message id
     * @param    bool   $get_deleted_files
     *
     * @return   int      attached file number
     */
    function getMessageFileNum($message_id, $get_deleted_files = true)
    {
        $rowset = new CB_RowSet($this->_files);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_follow IS NULL",
            $message_id));
        if ($get_deleted_files === false) {
            $rowset->addCondition('col_file IS NOT NULL');
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $files = $rowset->iterate();
        $rowset->destroy();

        return $files['count'];
    }

    /**
     * delete specified attached file
     *
     * @param    string  $file_id      file id
     * @param    boolean $complete     delete both a relation and a file if $complete = TRUE,
     *                                 delete a file if $complete = FALSE (default: FALSE)
     *
     * @return   boolean   if specified file doesn't exist, return FALSE
     */
    function deleteFile($file_id, $complete = false)
    {
        $file_relation = $this->getAttachedFileObject($file_id);
        if ( ! $file_relation) {
            return false;
        }

        if ($file_relation->get('publicly') == '0') {
            /** @var GRN_Message_Messages $message */
            $message = $file_relation->get('message');
            /** @var GRN_File $file */
            $file = $file_relation->get('file');
            if (is_null($file)) {
                return false;
            }

            if ($complete) {
                // ファイル数を減らすのは下書きからの削除のみ
                $file_num = $message->get('file_num');
                $message->set('file_num', --$file_num);
            }

            $file_size = $message->get('file_size');
            $body = $file->getCurrentBody();
            $message->set('file_size', $file_size - $body->get('size'));

            $file->delete();
            if (FtsApplication::isAvailable()) {
                $searchService = new IndexService();
                $searchService->deleteFileIndex($file->getOID());
            }
        }

        if ($complete) {
            $file_relation->delete();
        }

        return true;
    }

    /**
     * delete attached files specified message has
     *
     * @description   if specified attached file is closed, delete it.
     *                THIS FUNCTION DO NOT DELETE A RELATION.
     *
     * @param   string $message_id message id
     */
    function deleteClosedFiles($message_id)
    {
        $rowset = new CB_RowSet($this->_files);
        $rowset->addCondition($rowset->queryf("col_message = '@S' AND col_publicly = '0'",
            $message_id));

        $file_info = $this->_deleteClosedFiles($rowset);

        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');
        $tab_messages = $manager->getTableInfo(GRN_MESSAGE_MESSAGES);
        $message = $tab_messages->getRow($message_id);
        if ($message) {
            $message->set('file_size',
                $message->get('file_size') - $file_info['size']);
        }
    }

    /**
     * delete attached files specified follow has
     *
     * @description   if specified attached file is closed, delete it.
     *                THIS FUNCTION DO NOT DELETE A RELATION.
     *
     * @param   string $follow_id follow id
     */
    function deleteClosedFollowFiles($follow_id)
    {
        $rowset = new CB_RowSet($this->_files);
        $rowset->addCondition($rowset->queryf("col_follow = '@S' AND col_publicly = '0'",
            $follow_id));

        $this->_deleteClosedFiles($rowset);
    }

    /**
     * @access   private
     *
     * @param CB_RowSet $rowset
     *
     * @return array
     */
    function _deleteClosedFiles($rowset)
    {
        $file_info = [];
        $file_info['num'] = 0;
        $file_info['size'] = 0;

        while ( ! is_null($row = $rowset->iterate())) {
            /** @var GRN_File $file */
            $file = $row->get('file');
            if ( ! is_null($file)) {
                $file_info['num']++;
                $body = $file->getCurrentBody();
                $file_info['size'] += $body->get('size');

                // force unlock
                $lock = $file->getLockObject();
                $lock->releaseLock(true);

                $file->delete();
            }
        }

        return $file_info;
    }

    /**
     * @param                      $user
     * @param                      $file_ids
     * @param GRN_Message_Messages $message
     *
     * @return bool
     */
    function copyFiles($user, $file_ids, $message)
    {
        $file_num = 0;
        $file_size = 0;

        if (count($file_ids) > 0) {
            $rowset = new CB_RowSet($this->_files);
            $condition = "_id IN (";
            foreach ($file_ids as $file_id) {
                $condition .= $rowset->queryf("'@S',", $file_id);
            }
            $pos = strlen($condition) - 1;
            $condition = substr_replace($condition, ")", $pos);
            $rowset->addCondition($condition);

            $fm = new GRN_Message_FileManager_Core();
            while ( ! is_null($row = $rowset->iterate())) {
                $new_row = $this->_files->newRow();
                $new_row->set('message', $message);

                $publicly = $row->get('publicly');
                $new_row->set('publicly', $publicly);
                /** @var GRN_File $file */
                $file = $row->get('file');
                if ($publicly != '1') // closed file
                {
                    // use copy
                    if ( ! ($file = $fm->duplicateFile($user, $file, null))) {
                        return false;
                    }
                }
                $new_row->set('file', $file);

                $file_num++;
                $body = $file->getCurrentBody();
                $file_size += $body->get('size');
            }
        }

        $message->set('file_num', $file_num);
        $message->set('file_size', $file_size);

        return true;
    }

    /**
     * @param string      $fileId
     * @param string      $messageId
     * @param string|null $followId
     *
     * @return GRN_Message_AttachedFiles
     */
    public function getFileRelation($fileId, $messageId, $followId)
    {
        require_once('fw/database.csp');
        $rowSet = new CB_RowSet($this->_files);
        $rowSet->addCondition($rowSet->queryf("col_file = '@S'", $fileId));
        $rowSet->addCondition($rowSet->queryf("col_message = '@S'",
            $messageId));
        if ($followId) {
            $rowSet->addCondition($rowSet->queryf("col_follow = '@S'",
                $followId));
        } else {
            $rowSet->addCondition('col_follow IS NULL');
        }
        $row = $rowSet->iterate();
        require_once('message/table.csp');

        return new GRN_Message_AttachedFiles($row);
    }

    /**
     *
     * @param GRN_File $file
     * @param string   $message_id
     */
    public function updateFileIndexForFts(GRN_File $file, $message_id)
    {
        $rowSet = new CB_RowSet($this->_files);
        $condition = $rowSet->queryf("col_file='@S'", $file->getOID());
        $rowSet->addCondition($condition);
        $followId = null;
        $relation = $rowSet->iterate();
        $follow = $relation->get('follow');
        if ( ! is_null($follow)) {
            $followId = $follow->getOID();
        }
        $fileBody = new GRN_Message_FileBody($file->getCurrentBody());
        $searchService = new IndexService();
        $searchService->updateFileIndex($file, $fileBody, $message_id,
            $followId);
    }

    /**
     * @param string $fileId
     *
     * @return CB_Row|mixed
     */
    public function getFileById($fileId)
    {
        $app_locator = GRN_ApplicationLocator::instance();
        $manager = $app_locator->getTableManager('message');
        $tableInfo = $manager->getTableInfo(GRN_MESSAGE_FILE);

        return $tableInfo->getRow($fileId);
    }

    /**
     * @param $attachedFileId
     *
     * @return CB_Row|mixed
     */
    protected function getAttachedFileObject($attachedFileId)
    {
        return $this->_files->getRow($attachedFileId);
    }

    /**
     * @return grn\message\dao\GrnMessageFolderMessageRelationsDAO
     */
    protected function createMessageRelationDAO()
    {
        return new GrnMessageFolderMessageRelationsDAO();
    }
}
