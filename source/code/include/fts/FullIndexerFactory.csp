<?php

namespace grn\fts;


use grn\fts\exception\FullIndexerException;

class FullIndexerFactory
{
    /** @var array */
    private $input;
    /** @var \grn\fts\IndexerLogger */
    private $logger;

    /**
     * @param array $input
     */
    public function __construct($input)
    {
        $this->input = $input;
        $this->logger = new IndexerLogger($this->input);
    }

    /**
     * @return FullIndexer
     */
    public function createFullIndexer()
    {
        $parser = $this->getParser();
        try {
            $parser->validate();
            $builder = $parser->assign();
        } catch (FullIndexerException $e) {
            $this->logger->log($e->getMessage());
            cb_safe_exit(1);
            die; // to avoid the IDE warning
        }
        $this->validate($builder);
        $ftsArgValue = $builder->build();

        return new FullIndexer($ftsArgValue, $this->logger);
    }

    /**
     * @return ParameterParserInterface
     */
    private function getParser()
    {
        return ( ! defined('ON_FOREST') && $this->isReadableToResumeInfoFiles())
            ? new ResumeFileParser() : new CommandLineParser($this->input);
    }

    /**
     * @return boolean
     */
    private function isReadableToResumeInfoFiles()
    {
        return is_readable(FullIndexerArgValue::getResumeFilePath())
               && is_readable(FullIndexerArgValue::getArgumentsFilePath());
    }

    /**
     * @param FullIndexerArgumentBuilder $builder
     */
    private function validate(FullIndexerArgumentBuilder $builder)
    {
        $validator = new ArgumentValidator();
        $builder->validate($validator, $this->logger);
    }
}
