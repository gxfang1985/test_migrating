<?php

namespace grn\fts\message;

use grn\fts\AccessControllerInterface;
use grn\fts\SearchDocumentInterface;
use grn\fts\SearchConstants;

class AccessController implements AccessControllerInterface
{

    /**
     * Get if a searched document is accessible for a user.
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param \CB_User                         $user
     *
     * @return bool
     */
    public function isAccessible(
        SearchDocumentInterface $document,
        \CB_User $user
    ) {
        $util = $this->getSearchUtil();
        $message = $util->getMessage($document, $user);
        if (is_null($message) || ! $message) {
            return false;
        }

        $follow = null;
        if ($this->isFollowOrFileOfFollowDocument($document->getId())) {
            $follow = $util->getFollow($document);
            if (is_null($follow) || ! $follow) {
                return false;
            }
        }

        if ($document->isFile()) {
            $file = $util->getFile($document);
            if (is_null($file) || ! $file) {
                return false;
            }
        }

        if (is_null($message->getId('original_message'))) {
            return true;
        }

        return $this->isAccessibleSnapshotMessage($document, $message, $follow);
    }

    /**
     * @param SearchDocumentInterface   $document
     * @param \GRN_Message_Messages     $message
     * @param \GRN_Message_Follows|null $follow
     *
     * @return bool
     */
    private function isAccessibleSnapshotMessage(
        SearchDocumentInterface $document,
        \GRN_Message_Messages $message,
        \GRN_Message_Follows $follow = null
    ) {
        $snapshotMessageId = $message->getOID();

        if ($this->isMessageDocument($document->getId())) {
            $documentMessageId = $this->getSearchUtil()
                                      ->getMessageId($document->getId());
            if ($documentMessageId !== $snapshotMessageId) {
                // Can't access original message of the snapshot message.
                return false;
            }
        }

        if ($this->isFollowOrFileOfFollowDocument($document->getId())) {
            if ($message->get('last_follow_id') < $follow->get('id')) {
                // Can't access follow or follow's file which is newer than last follow id of the snapshot message.
                return false;
            }
        }

        if ($this->isFileOfMessageDocument($document->getId())) {
            $documentMessageId = $this->getSearchUtil()
                                      ->getMessageId($document->getId());
            if ($documentMessageId === $snapshotMessageId) {
                // Ignore a file which is related to the snapshot message.
                // The file is duplicated and may be old.
                return false;
            }

            if ( ! $this->isAttachedToSnapshotMessage($snapshotMessageId,
                $document->getFileId())
            ) {
                return false;
            }
        }

        if ($this->isFileOfFollowDocument($document->getId())) {
            $documentMessageId = $this->getSearchUtil()
                                      ->getMessageId($document->getId());
            if ($documentMessageId === $snapshotMessageId) {
                // Ignore a file which is related to the follow of snapshot message.
                // The file is duplicated and may be old.
                return false;
            }
        }

        return true;
    }

    private function getSearchUtil()
    {
        return new MessageUtil();
    }

    private function isMessageDocument($documentId)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER, $documentId);

        return count($tokens) === 3;
    }

    private function isFileOfMessageDocument($documentId)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER, $documentId);

        return count($tokens) > 3
               && substr($tokens[3], 0, 1) === IndexService::FILE_PREFIX;
    }

    private function isFileOfFollowDocument($documentId)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER, $documentId);

        return count($tokens) > 4
               && substr($tokens[4], 0, 1) === IndexService::FILE_PREFIX;
    }

    private function isFollowOrFileOfFollowDocument($documentId)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER, $documentId);

        return count($tokens) > 3
               && substr($tokens[3], 0, 1) === IndexService::FOLLOW_PREFIX;
    }

    /**
     * @param string $snapshotMessageId
     * @param int    $fileId
     *
     * @return bool
     */
    private function isAttachedToSnapshotMessage($snapshotMessageId, $fileId)
    {
        require_once('message/file.csp');
        $fm = new \GRN_Message_FileManager();
        $files = $fm->getMessageFiles($snapshotMessageId, false);
        foreach ($files as $file) {
            if ((int)$file->getOID() === $fileId) {
                return true;
            }
        }

        return false;
    }

}
