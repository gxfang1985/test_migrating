<?php

namespace grn\fts\message;

use grn\fts\DocumentConverterInterface;
use grn\fts\SearchDocumentInterface;
use grn\fts\DocumentView;
use grn\fts\SearchUtil;
use grn\fts\FileView;
use grn\fts\FileIcon;

class FileConverter implements DocumentConverterInterface
{
    /**
     * Convert a search result to view data of Garoon.
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\fts\DocumentView
     */
    public function convert(SearchDocumentInterface $document)
    {
        $messageUtil = new MessageUtil();
        $file = $messageUtil->getFile($document);
        $message = $messageUtil->getMessage($document, cb_get_login_user());

        $snippet = $this->getSnippet($document);
        $title = $message->get('subject');
        $titleIcon = $messageUtil->getMessageIconUrl();
        $url = $this->getUrl($document);
        $modifierView = $this->getModifierView($file);
        $modifiedTime = $file->get('mtime')->unix_ts;
        $fileView = $this->getFileView($file, $document);

        $highlights = $document->getFileNameHighlights();
        if ( ! is_null($highlights)) {
            $fileView->setSnippetTitle($highlights[0]);
        }

        $documentView = new DocumentView($snippet, $title, $titleIcon, $url,
            $modifiedTime);
        $documentView->setModifierView($modifierView);
        $documentView->setFileView($fileView);

        return $documentView;
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getSnippet(SearchDocumentInterface $document)
    {
        $util = $this->getSearchUtil();

        return $util->getSnippet($document);
    }

    /**
     * @return \grn\fts\SearchUtil
     */
    private function getSearchUtil()
    {
        return new SearchUtil();
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getUrl(SearchDocumentInterface $document)
    {
        $util = new MessageUtil();
        $fileRelation = $util->getFileRelation($document);
        $message = $fileRelation->get('message');
        $follow = $fileRelation->get('follow');

        $mid = $message->getId('original_message');
        if (is_null($mid)) {
            $mid = $message->getOID();
        }

        if (is_null($follow)) {
            $params = [
                'mid' => $mid
            ];

            return cb_format_url("message/view", $params);
        } else {
            $params = [
                'mid'       => $mid,
                'follow_id' => $follow->get('id')
            ];
            $fragment = 'follow';

            return cb_format_url("message/view", $params, $fragment);
        }
    }

    /**
     * @param \GRN_Message_File $file
     *
     * @return \grn\fts\ModifierView
     */
    private function getModifierView(\GRN_Message_File $file)
    {
        $modifier = $file->get('modifier');
        $util = $this->getSearchUtil();

        return $util->getModifierView($modifier, $file->get('modifier_name'));
    }

    /**
     * @param \GRN_Message_File                $file
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\fts\FileView
     */
    private function getFileView(
        \GRN_Message_File $file,
        SearchDocumentInterface $document
    ) {
        /** @var \GRN_Message_FileBody $fileBody */
        $fileBody = $file->getCurrentBody();
        $downloadUrl = $this->getDownloadUrl($fileBody, $document);

        return new FileView($fileBody->get('name'),
            FileIcon::getIconUrl($fileBody), $downloadUrl,
            $fileBody->get('size'));
    }

    /**
     *
     * @param \GRN_Message_FileBody            $fileBody
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getDownloadUrl(
        \GRN_Message_FileBody $fileBody,
        SearchDocumentInterface $document
    ) {
        $messageUtil = new MessageUtil();
        $fileRelation = $messageUtil->getFileRelation($document);
        $params = ['rfid' => $fileRelation->getOID()];

        return cb_format_url('message/file_download', $params, null,
            $fileBody->get('name'));
    }
}
