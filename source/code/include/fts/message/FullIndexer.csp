<?php

namespace grn\fts\message;

use grn\fts\BulkCommandKeys;
use grn\fts\FtsProduct;
use grn\fts\FullIndexer as Indexer;
use grn\fts\FullIndexerArgValue;
use grn\fts\FullIndexTarget;
use grn\fts\IndexerLoggerInterface;

require_once('message/resources.csp');

class FullIndexer
{
    /** @var \grn\fts\FullIndexer */
    private $indexer;
    /** @var \CB_DatabaseConnection */
    private $db;
    /** @var \grn\fts\IndexerLoggerInterface */
    private $logger;

    /**
     * @param \grn\fts\FullIndexer $indexer
     */
    public function __construct(Indexer $indexer)
    {
        $this->indexer = $indexer;
        $this->db = cb_get_app_db('message');
    }

    /**
     * @param \grn\fts\IndexerLoggerInterface $logger
     * @param \grn\fts\FullIndexerArgValue    $value
     */
    public function execute(
        IndexerLoggerInterface $logger,
        FullIndexerArgValue $value
    ) {
        $this->logger = $logger;

        if ($value->shouldCreateIndexes(BulkCommandKeys::MESSAGE_FOLDER_RELATION)) {
            $logger->log("Start indexing of relations of message to folder.");
            if ($value->getSearchEngine() === FtsProduct::solr()
                                                        ->getProduct()
            ) {
                $this->createUserFolderIndexes($value);
            } else {
                $this->createUserFolderIndexesForEs($value);
            }
            $logger->log("Finish indexing of relations of message to folder.");
            gc_collect_cycles();
        }

        if ($value->shouldCreateIndexes(BulkCommandKeys::MESSAGE_MESSAGE)) {
            $logger->log("Start indexing of messages.");
            $this->createMessageIndexes();
            $logger->log("Finish indexing of messages.");
            gc_collect_cycles();
        }

        if ($value->shouldCreateIndexes(BulkCommandKeys::MESSAGE_FOLLOW)) {
            $logger->log("Start indexing of follows.");
            $this->createFollowIndexes();
            $logger->log("Finish indexing of follows.");
            gc_collect_cycles();
        }

        if ($value->shouldCreateIndexes(BulkCommandKeys::MESSAGE_FILE)) {
            $logger->log("Start indexing of files.");
            $this->createFileIndexes();
            $logger->log("Finish indexing of files.");
            gc_collect_cycles();
        }
    }

    private function createMessageIndexes()
    {
        $this->indexer->getHandler()->handle(BulkCommandKeys::MESSAGE_MESSAGE,
            new FullIndexTarget(new MessageIndexTarget()));
    }

    private function createFollowIndexes()
    {
        $this->indexer->getHandler()->handle(BulkCommandKeys::MESSAGE_FOLLOW,
            new FullIndexTarget(new FollowIndexTarget()));
    }

    private function createFileIndexes()
    {
        $this->indexer->getHandler()->handle(BulkCommandKeys::MESSAGE_FILE,
            new FullIndexTarget(new FileIndexTarget()));
    }

    private function createUserFolderIndexes(FullIndexerArgValue $value)
    {
        $resumeInfo = $value->getProgressInfo();
        $userTables = cb_get_user_tables();
        for ($i = 0; $i < $userTables; $i++) {
            if ( ! is_null($resumeInfo->getUserTableNum())
                 && $resumeInfo->getUserTableNum() > $i
            ) {
                continue;
            }
            $this->logger->log("Start indexing of relations of message to folder, tab_grn_message_foldermessagerelations___p{$i}");
            $this->indexer->getHandler()
                          ->handle(BulkCommandKeys::MESSAGE_FOLDER_RELATION,
                              new FullIndexTarget(new FolderMessageRelationIndexTarget($i)),
                              $i);
            $this->logger->log("Finish indexing of relations of message to folder, tab_grn_message_foldermessagerelations___p{$i}");
        }
        $resumeInfo->setUserTableNum(null);
    }

    private function createUserFolderIndexesForEs(FullIndexerArgValue $value)
    {
        $resumeInfo = $value->getProgressInfo();
        $this->indexer->getHandler()
                      ->handle(BulkCommandKeys::MESSAGE_FOLDER_RELATION,
                          new FullIndexTarget(new MessageIndexTarget()));
        $resumeInfo->setUserTableNum(null);
    }
}
