<?php

namespace grn\fts\message;

use grn\fts\SearchConstants;
use grn\fts\SearchDocumentInterface;

class MessageUtil
{
    /**
     * @param \CB_User                  $user
     * @param \GRN_Message_Messages     $message
     * @param \GRN_Message_Follows|null $follow
     *
     * @return bool
     */
    public function isAccessible(
        \CB_User $user,
        \GRN_Message_Messages $message,
        \GRN_Message_follows $follow
    ) {
        require_once('message/message_logic.csp');
        $messageLogic = new \GRN_Message_Logic();
        $relations = $messageLogic->getRelation($user->getOID(),
            $message->getOID());

        return (count($relations) > 0);
    }

    /**
     * @param string $documentId
     *
     * @return string
     */
    public function getMessageId($documentId)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER, $documentId);
        assert('count($tokens) > 2');

        return substr($tokens[2], 1);
    }

    /**
     * Get a message object from a document.
     * If the user has a snapshot, get the snapshot instead of an original message.
     * If the user has no right to access the message, return null.
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param \CB_User                         $user
     *
     * @return \GRN_Message_Messages|null
     */
    public function getMessage(
        SearchDocumentInterface $document,
        \CB_User $user
    ) {
        $messageId = $this->getMessageId($document->getId());

        require_once('message/message_logic.csp');
        $messageLogic = new \GRN_Message_Logic();
        $message = $messageLogic->getMessageById($messageId);

        if ($message === false) {
            return null;
        }

        $relations = $messageLogic->getRelation($user->getOID(),
            $message->getOID());

        if (count($relations) === 0) {
            return null;
        }

        foreach ($relations as $relation) {
            $snapshot = $relation->get('snapshot_message');
            if ( ! is_null($snapshot)) {
                return $snapshot;
            }
        }

        return $message;
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \GRN_Message_Follows|null
     */
    public function getFollow(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        assert('count($tokens) > 3');

        $followId = substr($tokens[3], 1);

        require_once('message/message_logic.csp');
        $messageLogic = new \GRN_Message_Logic();

        return $messageLogic->getFollowObj($followId);
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \GRN_Message_File|null
     */
    public function getFile(SearchDocumentInterface $document)
    {
        assert('$document->isFile()');

        $fileId = $document->getFileId();
        require_once('message/file.csp');
        $fileManager = new \GRN_Message_FileManager();

        return $fileManager->getFileById($fileId);
    }

    /**
     * @return string
     */
    public function getMessageIconUrl()
    {
        return cb_get_app_path() . '/grn/image/cybozu/msg16.png';
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \GRN_Message_AttachedFiles|void
     */
    public function getFileRelation(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        $messageId = substr($tokens[2], 1);
        if (count($tokens) === 5) {
            $followId = substr($tokens[3], 1);
            $params['follow_id'] = $followId;
        } else {
            $followId = null;
        }
        $fileId = $document->getFileId();

        require_once('message/file.csp');
        $fileManager = new \GRN_Message_FileManager();

        return $fileManager->getFileRelation($fileId, $messageId, $followId);
    }
}
