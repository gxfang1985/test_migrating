<?php

namespace grn\fts;

class SortOrder
{
    const SCORE = 'SCORE';
    const DATETIME = 'DATETIME';
    const ATTRIBUTE_NAME = 'sort_type';

    /**
     * @return array
     */
    public static function getSortEnum()
    {
        return [self::SCORE, self::DATETIME];
    }

    /**
     * @static
     *
     * @param string $sortOrder
     *
     * @return Field
     */
    public static function getField($sortOrder)
    {
        switch ($sortOrder) {
            case self::DATETIME:
                return Fields::mtime();
            default:
                assert('FALSE');

                return Fields::mtime();
        }
    }

    /**
     * @return string
     */
    public function getSortType()
    {
        /** @var $sortByTime string */
        $profile = $this->getUserProfile();
        if ($profile->getAttribute(self::ATTRIBUTE_NAME, $sortByTime)) {
            return $sortByTime;
        } else {
            // 値が無いので初期値
            return self::SCORE;
        }
    }

    /**
     * @param string $sortType
     */
    public function setSortType($sortType)
    {
        /** @var $sortByTime bool */
        $profile = $this->getUserProfile();
        if ($profile->getAttribute(self::ATTRIBUTE_NAME, $value)) {
            if ($value !== $sortType) {
                // 既に値が存在していて、今回の値と違う場合
                $profile->updateAttribute(self::ATTRIBUTE_NAME, $sortType);
            }
        } else {
            // 値がないので新しく作成する
            $profile->createAttribute(self::ATTRIBUTE_NAME, $sortType);
        }
    }

    /**
     * @return \CB_Profile
     */
    private function getUserProfile()
    {
        $app = new Application();

        return $app->getUserProfile(cb_get_login_user());
    }
}
