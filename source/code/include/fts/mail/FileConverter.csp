<?php

namespace grn\fts\mail;

use grn\fts\AddressView;
use grn\fts\DocumentConverterInterface;
use grn\fts\DocumentView;
use grn\fts\FileView;
use grn\fts\FileIcon;
use grn\fts\SearchDocumentInterface;
use grn\fts\SearchUtil;

class FileConverter implements DocumentConverterInterface
{
    public function convert(SearchDocumentInterface $document)
    {
        $util = new MailUtil();
        $mail = $util->getMailMessage($document);
        $fileId = $util->getFileId($document);

        $snippet = $this->getSnippet($document);
        $title = $mail->get('subject');
        $titleIcon = $util->getMailIconUrl();
        $url = $this->getUrl($mail);
        $modifiedTime = $mail->get('timestamp')->unix_ts;
        $fileView = $this->getFileView($mail, $fileId);

        $highlights = $document->getFileNameHighlights();
        if ( ! is_null($highlights)) {
            $fileView->setSnippetTitle($highlights[0]);
        }

        $documentView = new DocumentView($snippet, $title, $titleIcon, $url,
            $modifiedTime);

        $from = $mail->get('from');
        if (is_string($from) && strlen($from) > 0) {
            $addressView = new AddressView($from, $mail->getOID());
            $documentView->setAddressView($addressView);
        }

        $documentView->setFileView($fileView);

        return $documentView;
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getSnippet(SearchDocumentInterface $document)
    {
        $util = new SearchUtil();

        return $util->getSnippet($document);
    }

    /**
     * @param \GRN_Mail_Message $mail
     *
     * @return string
     */
    private function getUrl(\GRN_Mail_Message $mail)
    {
        $params = [
            'mid' => $mail->getOID(),
        ];

        return cb_format_url("mail/view", $params);
    }

    /**
     *
     * @param \GRN_Mail_Message $mail
     * @param string            $fileId
     *
     * @return \grn\fts\FileView
     */
    private function getFileView(\GRN_Mail_Message $mail, $fileId)
    {
        if ($mail->isUseFileBodyTable()) {
            return $this->getSendFileView($mail, $fileId);
        } else {
            return $this->getReceiveFileView($mail, $fileId);
        }
    }

    /**
     *
     * @param \GRN_Mail_Message $mail
     * @param string            $fileId
     *
     * @return \grn\fts\FileView
     */
    private function getSendFileView(\GRN_Mail_Message $mail, $fileId)
    {
        require_once('mail/mail.csp');
        $mailLogic = new \GRN_Mail_MailLogic();
        /* @var \CB_ServerFile $fileBody */
        $fileBody = $mailLogic->getMailFileBody($mail->getOID(), $fileId);
        $downloadUrl = $this->getFileDownloadUrl($mail->getOID(), $fileId,
            $fileBody->get('name'));

        return new FileView($fileBody->get('name'),
            FileIcon::getIconUrl($fileBody), $downloadUrl,
            $fileBody->get('size'));
    }

    /**
     *
     * @param \GRN_Mail_Message $mail
     * @param string            $fileId
     *
     * @return \grn\fts\FileView
     */
    private function getReceiveFileView(\GRN_Mail_Message $mail, $fileId)
    {
        require_once('mail/mail.csp');
        require_once('mail/resources.csp');
        $mailLogic = \GRN_Mail_MailLogic::getInstance();
        $fileInfoTable
            = $mailLogic->_utility->getTableInfo(grn_mail_get_personal_tablename($mail->get('user')
                                                                                      ->getOID(),
            GRN_MAIL_FILEINFO_TABLE));
        $fileInfo = $fileInfoTable->getRow($fileId);
        $partNo = $fileInfo->get('part_no');
        /* @var \CB_MailSinglePart $fileBody */
        $fileBody = $mailLogic->getMailFileBody($mail->getOID(), $partNo);
        $downloadUrl = $this->getFileDownloadUrl($mail->getOID(), $partNo,
            $fileBody->getFileName());

        return new FileView($fileBody->getFileName(),
            FileIcon::getIconUrlForMailFile($fileBody), $downloadUrl,
            strlen($fileBody->getContent()));
    }

    /**
     *
     * @param string $mailId
     * @param string $fileId
     * @param string $fileName
     *
     * @return string
     */
    private function getFileDownloadUrl($mailId, $fileId, $fileName)
    {
        $params = [
            "mid" => $mailId,
            "fid" => $fileId,
        ];

        return cb_format_url('mail/file_download', $params, null, $fileName);
    }
}

