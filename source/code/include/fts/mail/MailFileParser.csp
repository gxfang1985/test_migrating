<?php

namespace grn\fts\mail;

use grn\mail\dao\GrnMailReceivedFileRelationDAO;
use grn\fts\IndexerLogger;

require_once('mail/table.csp');
require_once('fw/mail_message.csp');

class MailFileParser
{
    /** @var IndexerLogger $logger */
    private $logger;
    /** @var int */
    const INTERVAL = 10000;
    /** @var int */
    private $target;

    public function __construct($input, IndexerLogger $logger)
    {
        $this->logger = $logger;
        $this->parseInput($input);
    }

    public function parseFileNotRelatedMails()
    {
        $this->log("Start parsing of received mail's files.");
        $dao = $this->getReceivedFileRelationDao();
        $target = $this->getTarget();

        // ------子プロセス実行準備------
        $basedir = cb_basedir();
        chdir($basedir);
        $appfile = cb_get_cli_path();
        // ------ここまで------

        $fileInfoTableName = "tab_grn_mail_fileinfo___p{$target}";
        $this->log("Start parsing {$fileInfoTableName}.");
        $count = $missCount = $skipCount = 0;
        $skipMailIds = [];
        do {
            $mailIds = $dao->getNotRelatedMailIds($fileInfoTableName,
                self::INTERVAL, $skipMailIds);
            $command = cb_get_fopen_execute_path($appfile,
                "code/command/fts/inprocess_mail_parse.csp");
            foreach ($mailIds as $mailId) {
                $processHandler
                    = popen("{$command} mailId={$mailId} target={$target}",
                    "r");
                if ($processHandler === false) {
                    $this->log("Failed to open process: mailId = {$mailId}");
                    $skipCount++;
                    $skipMailIds[] = $mailId;
                    continue;
                }
                $out = '';
                while ( ! feof($processHandler)) {
                    $out .= fread($processHandler, 2096);
                }
                $ret = pclose($processHandler);
                if ($ret !== 0) {
                    $dao->insertDeletedByMailId($mailId, $fileInfoTableName);
                    $this->log("Failed to parse a mail: mailId = {$mailId}");
                    $this->log($out);
                    $missCount++;
                } else {
                    if (strlen($out) > 0) {
                        $this->log($out);
                    }
                    $count++;
                }
            }
        } while (count($mailIds) === self::INTERVAL);

        $this->log("{$count} mails parsed.");
        $this->log("{$missCount} mails were invalid.");
        $this->log("{$skipCount} mails were skipped.");
        $this->log("Finish parsing {$fileInfoTableName}.");
        if ($skipCount === 0) {
            $this->log("Complete parsing all mails of {$fileInfoTableName}");
        } else {
            $this->log("The several mails have not been parsed yet.");
            cb_safe_exit(1);
        }
    }

    private function parseInput(array $input)
    {
        if (isset($input['target']) && 0 <= (int)$input['target']
            && (int)$input['target'] <= 49
        ) {
            $this->setTarget((int)$input['target']);
        } else {
            $this->invalidError();
        }
    }

    private function invalidError()
    {
        $this->log("[Error] Processing has been cancelled.");
        $this->log("[Error] Processing cannot be completed because the value is invalid.");
        $this->log("[Error] Enter the valid parameters and try again.");
        cb_safe_exit(1);
    }

    /**
     * @param string $message
     */
    private function log($message)
    {
        $this->logger->log($message);
    }

    /**
     * @return \grn\mail\dao\GrnMailReceivedFileRelationDAO
     */
    private function getReceivedFileRelationDao()
    {
        return new GrnMailReceivedFileRelationDAO();
    }

    /**
     * @return int
     */
    public function getTarget()
    {
        return $this->target;
    }

    /**
     * @param int $target
     */
    public function setTarget($target)
    {
        $this->target = $target;
    }
}
