<?php

namespace grn\fts\mail;

use grn\fts\BulkIndexerChildProcessInterface;
use grn\fts\ChildProcessArgValue;
use grn\fts\FtsProduct;
use grn\fts\FullIndexer as Indexer;

class BulkMessageIndexer implements BulkIndexerChildProcessInterface
{
    /** @var \grn\fts\ChildProcessArgValue */
    private $value;

    /**
     * @param array $input
     */
    public function __construct(array $input)
    {
        $this->value = new ChildProcessArgValue();
        $this->value->parseInput($input);
    }

    /**
     * @return string[]
     */
    public function getConnectAppIds()
    {
        return ["mail"];
    }

    /**
     */
    public function execute()
    {
        $service = new IndexService($this->value->getSearchEngine());
        $db = cb_get_app_db('mail');
        $query
            = "SELECT m._id, " .
              "m.col_user, " .
              "m.col_subject, " .
              "CASE WHEN CHAR_LENGTH(m.col_data) > "
              . Indexer::LONGTEXT_MAX_LENGTH .
              " THEN 1 ELSE 0 END AS truncated," .
              " LEFT(m.col_data, " . Indexer::LONGTEXT_MAX_LENGTH
              . ") AS col_data, " .
              "m.col_from, " .
              "m.col_to, " .
              "m.col_cc, " .
              "m.col_bcc, " .
              "m.col_send_ts, " .
              "m.col_folder, " .
              "f.col_account " .
              "FROM tab_grn_mail_message___p{$db->escape($this->value->getUserTableNum())} AS m, "
              .
              "tab_grn_mail_folder AS f " .
              "WHERE m._id >= {$db->escape($this->value->getStartId())} " .
              "AND {$db->escape($this->value->getEndId())} >= m._id " .
              "AND m.col_folder=f._id " .
              "AND col_draft IS NULL " .
              "AND col_dtime IS NULL " .
              "FOR UPDATE";
        $result = $db->query($query);
        $rows = [];
        while ($row = $db->fetch_assoc($result)) {
            $rows[] = $row;
            if ($row['truncated'] === '1') {
                echo "mail truncated: tab_grn_mail_message___p{$this->value->getUserTableNum()}, {$row['_id']}.";
            }
        }
        $db->free_result($result);
        $service->bulkCreateMessageIndex($rows, $this->value->getForward());
        $rowsCount = count($rows);
        echo "{$rowsCount} mails indexed";
        gc_collect_cycles();
    }
}
