<?php

namespace grn\fts\mail;

use grn\fts\BulkCommandKeys;
use grn\fts\FullIndexerArgValue;
use grn\fts\FullIndexTarget;
use grn\fts\IndexerLoggerInterface;
use grn\fts\FullIndexer as Indexer;

class FullIndexer
{
    /** @var \grn\fts\FullIndexer */
    private $indexer;
    /** @var \CB_DatabaseConnection */
    private $db;
    /** @var \grn\fts\IndexerLoggerInterface */
    private $logger;
    /** @var array */
    private $startLog
        = [
            BulkCommandKeys::MAIL_MESSAGE      => "Start indexing of mails, tab_grn_mail_message___p%s.",
            BulkCommandKeys::MAIL_SEND_FILE    => "Start indexing of sent files, tab_grn_mail_filebody___p%s.",
            BulkCommandKeys::MAIL_RECEIVE_FILE => "Start indexing of received files, tab_grn_mail_fileinfo___p%s."
        ];
    /** @var array */
    private $endLog
        = [
            BulkCommandKeys::MAIL_MESSAGE      => "Finish indexing of mails, tab_grn_mail_message___p%s.",
            BulkCommandKeys::MAIL_SEND_FILE    => "Finish indexing of sent files, tab_grn_mail_filebody___p%s.",
            BulkCommandKeys::MAIL_RECEIVE_FILE => "Finish indexing of received files, tab_grn_mail_fileinfo___p%s."
        ];

    /**
     * @param \grn\fts\FullIndexer $indexer
     */
    public function __construct(Indexer $indexer)
    {
        $this->indexer = $indexer;
        $this->db = cb_get_app_db('mail');
    }

    /**
     * @param \grn\fts\IndexerLoggerInterface $logger
     * @param \grn\fts\FullIndexerArgValue    $value
     */
    public function execute(
        IndexerLoggerInterface $logger,
        FullIndexerArgValue $value
    ) {
        $this->logger = $logger;
        if ($value->shouldCreateIndexes(BulkCommandKeys::MAIL_MESSAGE)) {
            $logger->log("Start indexing of mails.");
            // for memory exhausted, set a small interval.
            $this->createMailIndexes(BulkCommandKeys::MAIL_MESSAGE, $value);
            $logger->log("Finish indexing of mails.");
        }

        if ($value->shouldCreateIndexes(BulkCommandKeys::MAIL_SEND_FILE)) {
            $logger->log("Start indexing of send files.");
            $this->createMailIndexes(BulkCommandKeys::MAIL_SEND_FILE, $value);
            $logger->log("Finish indexing of send files.");
        }

        if ($value->shouldCreateIndexes(BulkCommandKeys::MAIL_RECEIVE_FILE)) {
            $logger->log("Start indexing of received files.");
            $this->createMailIndexes(BulkCommandKeys::MAIL_RECEIVE_FILE,
                $value);
            $logger->log("Finish indexing of received files.");
        }
    }

    /**
     * @param string              $commandKey
     * @param FullIndexerArgValue $value
     */
    private function createMailIndexes($commandKey, FullIndexerArgValue $value)
    {
        $resumeInfo = $value->getProgressInfo();
        $userTables = cb_get_user_tables();
        for ($i = 0; $i < $userTables; $i++) {
            if ( ! is_null($resumeInfo->getUserTableNum())
                 && $resumeInfo->getUserTableNum() > $i
            ) {
                continue;
            }
            $this->logger->log(str_replace("%s", $i,
                $this->startLog[$commandKey]));
            $this->indexer->getHandler()->handle($commandKey,
                $this->getIndexTarget($commandKey, $i), $i);
            $this->logger->log(str_replace("%s", $i,
                $this->endLog[$commandKey]));
        }
        $resumeInfo->setUserTableNum(null);
    }

    /**
     * @param $command
     * @param $tableNum
     *
     * @return FullIndexTarget
     */
    private function getIndexTarget($command, $tableNum)
    {
        $indexTarget = null;
        switch ($command) {
            case BulkCommandKeys::MAIL_MESSAGE:
                $indexTarget
                    = new FullIndexTarget(new MessageIndexTarget($tableNum));
                break;
            case BulkCommandKeys::MAIL_SEND_FILE:
                $indexTarget
                    = new FullIndexTarget(new SendFileIndexTarget($tableNum));
                break;
            case BulkCommandKeys::MAIL_RECEIVE_FILE:
                $indexTarget
                    = new FullIndexTarget(new ReceiveFileIndexTarget($tableNum));
                break;
            default:
                cb_throw_error(); // invalid value
        }

        return $indexTarget;
    }
}
