<?php

namespace grn\fts\mail;

use grn\fts\Fields;
use grn\fts\filter\AndFilter;
use grn\fts\filter\TermFilter;
use grn\fts\FtsProduct;
use grn\fts\mail\cleanup\service\DeleteTempFileRegisterService;
use grn\fts\SearchConstants;
use grn\fts\SearchEntry;
use grn\fts\SearchUtil;
use grn\fts\UpdateServiceContainer;

require_once('fw/cydec.csp');

class IndexService
{
    const ID_PREFIX = 'G.Amail.';
    const USER_PREFIX = 'U';
    const MESSAGE_PREFIX = 'M';
    const FILE_PREFIX = 'F';

    /** @var UpdateServiceContainer */
    private $updateServiceContainer = null;

    /**
     * IndexService constructor.
     *
     * @param FtsProduct|NULL $fts_product
     */
    public function __construct(FtsProduct $fts_product = null)
    {
        $this->updateServiceContainer
            = new UpdateServiceContainer($fts_product);
    }

    /**
     * @param \GRN_Mail_Message $mail
     */
    public function createMessageIndex(\GRN_Mail_Message $mail)
    {
        $userId = $mail->get('user')->getOID();
        $id = $this->createMailDocumentId($userId,
            $mail->getOID());
        $folder = $mail->get('folder');
        $data
            = SearchUtil::truncateLongText($mail->get('data'));
        $searchEntry = $this->createMessageSearchEntry($id,
            (string)$mail->get('subject'),
            (string)$data,
            (string)$mail->get('from'),
            (string)$mail->get('to'),
            (string)$mail->get('cc'),
            (string)$mail->get('bcc'),
            (int)$mail->get('send_ts')->unix_ts,
            (int)$folder->get('account')->getOID(),
            (int)$folder->getOID(),
            (int)$mail->getOID(),
            (int)$userId);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @return \grn\fts\UpdateServiceContainer
     */
    protected function getUpdateServiceContainer()
    {
        return $this->updateServiceContainer;
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_mail_message.
     * @param string $forward
     */
    public function bulkCreateMessageIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = $this->createMailDocumentId($row['col_user'],
                $row['_id']);
            $entries[] = $this->createMessageSearchEntry($id,
                (string)$row['col_subject'], (string)$row['col_data'],
                (string)$row['col_from'], (string)$row['col_to'],
                (string)$row['col_cc'], (string)$row['col_bcc'],
                (int)$row['col_send_ts'], (int)$row['col_account'],
                (int)$row['col_folder'], (int)$row['_id'],
                (int)$row['col_user']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \GRN_Mail_FileBody $file
     */
    public function createSendFileIndex(\GRN_Mail_FileBody $file)
    {
        $mail = $file->get('mail');
        if ( ! $mail) {
            return;
        }
        $mailId = $mail->getOID();
        $fileId = $file->getOID();
        $userId = $mail->get('user')->getOID();
        $id = $this->createFileDocumentId($userId, $mailId,
            $fileId);
        $folder = $mail->get('folder');
        $fileName = $file->get('name');
        $fileIdentifier = defined('ON_FOREST') ? $file->get('blob')
            : $file->getPath();
        $searchEntry = $this->createFileSearchEntry(
            $id,
            (string)$fileName,
            $fileIdentifier,
            (string)$mail->get('from'),
            (string)$mail->get('to'),
            (string)$mail->get('cc'),
            (string)$mail->get('bcc'),
            (int)$mail->get('send_ts')->unix_ts,
            (int)$folder->get('account')->getOID(),
            (int)$folder->getOID(),
            (int)$mailId,
            (int)$fileId,
            (int)$userId,
            'mail.sendFile'
        );
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_mail_message_file and tab_grn_mail_message_filebody.
     * @param string $forward
     * @param string $type
     */
    public function bulkCreateFileIndex(array $rows, $forward, $type)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = $this->createFileDocumentId($row['col_user'],
                $row['col_mail'], $row['_id']);
            $entries[] = $this->createFileSearchEntry(
                $id,
                (string)$row['col_name'],
                $row['col_blob'],
                (string)$row['col_from'],
                (string)$row['col_to'],
                (string)$row['col_cc'],
                (string)$row['col_bcc'],
                (int)$row['col_send_ts'],
                (int)$row['col_account'],
                (int)$row['col_folder'],
                (int)$row['col_mail'],
                (int)$row['_id'],
                (int)$row['col_user'],
                $type
            );
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * This function is used only on-premise.
     *
     * @param array  $rows
     * @param string $tableName
     * @param string $forward
     */
    public function bulkCreateSendFileIndex(array $rows, $tableName, $forward)
    {
        assert('!defined("ON_FOREST")');
        $entries = [];
        foreach ($rows as $row) {
            $id = $this->createFileDocumentId($row['col_user'],
                $row['col_mail'], $row['_id']);
            $entries[] = $this->createFileSearchEntry(
                $id,
                (string)$row['col_name'],
                SearchUtil::getFilePath('mail', $tableName, $row['_id']),
                (string)$row['col_from'],
                (string)$row['col_to'],
                (string)$row['col_cc'],
                (string)$row['col_bcc'],
                (int)$row['col_send_ts'],
                (int)$row['col_account'],
                (int)$row['col_folder'],
                (int)$row['col_mail'],
                (int)$row['_id'],
                (int)$row['col_user'],
                'mail.sendFile'
            );
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * This function is used only on-premise.
     *
     * This method is used by full_indexer.
     * But job_name is set 'fts-indexer' because this method use same internal logic.
     *
     * @param array $rows
     * @param       $userTableNum
     */
    public function bulkCreateReceiveFileIndex(array $rows, $userTableNum)
    {
        require_once('mail/table.csp');
        $suffix = 'p' . $userTableNum;
        $tableInfo = cb_class2table(GRN_MAIL_MESSAGE_TABLE, $suffix);
        foreach ($rows as $row) {
            $messageRow = $tableInfo->getRow($row['col_mail']);
            $this->createReceiveFileIndexByMail($messageRow);

            unset($messageRow);
            gc_collect_cycles();
        }
    }

    /**
     * @param \GRN_Mail_FileInfo $file
     * @param string             $fileIdentifier
     */
    public function createReceiveFileIndex(
        \GRN_Mail_FileInfo $file,
        $fileIdentifier
    ) {
        $mail = $file->get('mail');
        $userId = $mail->get('user')->getOID();
        $mailId = $mail->getOID();
        $fileId = $file->getOID();
        $id = $this->createFileDocumentId($userId, $mailId,
            $fileId);
        $folder = $mail->get('folder');
        $searchEntry = $this->createFileSearchEntry(
            $id,
            (string)$file->get('name'),
            (string)$fileIdentifier,
            (string)$mail->get('from'),
            (string)$mail->get('to'),
            (string)$mail->get('cc'),
            (string)$mail->get('bcc'),
            (int)$mail->get('send_ts')->unix_ts,
            (int)$folder->get('account')->getOID(),
            (int)$folder->getOID(),
            (int)$mailId,
            (int)$fileId,
            (int)$userId,
            'mail.receiveFile'
        );
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
        if ( ! defined('ON_FOREST')) {
            $registerService = DeleteTempFileRegisterService::getInstance();
            $registerService->addFilePath($fileIdentifier);
        }
    }

    /**
     * for on-premise
     *
     * @param \GRN_Mail_Message $mail
     */
    public function createReceiveFileIndexByMail(\GRN_Mail_Message $mail)
    {
        if (is_null($mail->get('user'))) {
            return;
        }
        SearchUtil::loginSpecifiedUser($mail->get('user'));
        $fileInfoRowSet = $mail->getFileInfoRowSet();
        $attachments = $mail->getAttachedPartsFromSource();
        if (is_null($attachments)) {
            // mail source does not exist
            return;
        }
        $userId = $mail->get('user')->getOID();
        $mailId = $mail->getOID();
        $folder = $mail->get('folder');
        $dir = MailUtil::getTmpDirectoryPath();
        while ($fileInfoRow = $fileInfoRowSet->iterate()) {
            /** @var  $fileId \GRN_Mail_FileInfo */
            $fileId = $fileInfoRow->getOID();
            $id = $this->createFileDocumentId($userId, $mailId, $fileId);
            $part = cb_at($attachments, $fileInfoRow->get('part_no'), false);
            if ( ! is_a($part, 'CB_MailSinglePart')) {
                continue;
            }

            $content = $part->getContent();
            $path = MailUtil::makeTmpFile($dir, $content);
            if ($path === false) {
                continue;
            }
            $searchEntry = $this->createFileSearchEntry(
                $id,
                (string)$fileInfoRow->get('name'),
                (string)$path,
                (string)$mail->get('from'),
                (string)$mail->get('to'),
                (string)$mail->get('cc'),
                (string)$mail->get('bcc'),
                (int)$mail->get('send_ts')->unix_ts,
                (int)$folder->get('account')->getOID(),
                (int)$folder->getOID(),
                (int)$mailId,
                (int)$fileId,
                (int)$userId,
                'mail.receiveFile'
            );
            $updateServiceContainer = $this->getUpdateServiceContainer();
            $updateServiceContainer->updateIndex($searchEntry);
            /**
             * @see BulkReceiveFileIndexer::execute
             */
            $registerService = DeleteTempFileRegisterService::getInstance();
            $registerService->addFilePath($path);
        }
    }

    /**
     * @param string $userId
     * @param string $mailId
     * @param string $fileId
     *
     * @return string
     */
    private function createFileDocumentId($userId, $mailId, $fileId)
    {
        // G.Amail.U{$userId}.M{$mailId}.F{fileId}
        return $this->createMailDocumentId($userId, $mailId) .
               sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                   self::FILE_PREFIX, $fileId);
    }

    /**
     * @param string $userId
     * @param string $mailId
     *
     * @return string
     */
    private function createMailDocumentId($userId, $mailId)
    {
        // G.Amail.U{$userId}.M{$mailId}
        return $this->createUserIndexId($userId) .
               sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                   self::MESSAGE_PREFIX, $mailId);
    }

    /**
     * @param string $userId
     *
     * @return string
     */
    private function createUserIndexId($userId)
    {
        // G.Amail.U{$userId}
        return sprintf("%s%s%u", self::ID_PREFIX, self::USER_PREFIX, $userId);
    }

    /**
     * @param \GRN_Mail_Message $mail
     */
    public function updateMessageIndex(\GRN_Mail_Message $mail)
    {
        $this->createMessageIndex($mail);
    }

    /**
     * @param string $userId
     * @param string $mailId
     */
    public function deleteMailIndexById($userId, $mailId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_MAIL),
            new TermFilter(Fields::userId(), $userId),
            new TermFilter(Fields::mailId(), $mailId),
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $userId
     */
    public function deleteMailIndexByUser($userId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_MAIL),
            new TermFilter(Fields::userId(), $userId),
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * "app.s:mail userId.i:{$userId} mailId.i:{$mailId} fileId.i:*"
     * @param string $userId
     * @param string $mailId
     */
    public function deleteFileIndex($userId, $mailId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_MAIL),
            new TermFilter(Fields::userId(), $userId),
            new TermFilter(Fields::mailId(), $mailId),
            new TermFilter(Fields::fileId(), '*'),
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $id
     * @param string $title
     * @param string $data
     * @param string $from
     * @param string $to
     * @param string $cc
     * @param string $bcc
     * @param int    $mtime
     * @param int    $accountId
     * @param int    $folderId
     * @param int    $mailId
     * @param int    $userId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createMessageSearchEntry(
        $id,
        $title,
        $data,
        $from,
        $to,
        $cc,
        $bcc,
        $mtime,
        $accountId,
        $folderId,
        $mailId,
        $userId
    ) {
        $searchEntry = new SearchEntry($id);
        $searchEntry->addValue(Fields::title(), $title);
        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::from(), $from);
        $searchEntry->addValue(Fields::to(), $to);
        $searchEntry->addValue(Fields::cc(), $cc);
        $searchEntry->addValue(Fields::bcc(), $bcc);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::accountId(), $accountId);
        $searchEntry->addValue(Fields::folderId(), $folderId);
        $searchEntry->addValue(Fields::mailId(), $mailId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_MAIL);
        $searchEntry->addValue(Fields::userId(), $userId);
        $searchEntry->setType('mail.message');

        return $searchEntry;
    }

    /**
     * @param string $id
     * @param string $name
     * @param string $fileIdentifier
     * @param string $from
     * @param string $to
     * @param string $cc
     * @param string $bcc
     * @param int    $mtime
     * @param int    $accountId
     * @param int    $folderId
     * @param int    $mailId
     * @param int    $fileId
     * @param int    $userId
     * @param string $type
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createFileSearchEntry(
        $id,
        $name,
        $fileIdentifier,
        $from,
        $to,
        $cc,
        $bcc,
        $mtime,
        $accountId,
        $folderId,
        $mailId,
        $fileId,
        $userId,
        $type
    ) {
        $searchEntry = SearchUtil::createBaseFileEntry($id, $name,
            $fileIdentifier);
        $searchEntry->addValue(Fields::from(), $from);
        $searchEntry->addValue(Fields::to(), $to);
        $searchEntry->addValue(Fields::cc(), $cc);
        $searchEntry->addValue(Fields::bcc(), $bcc);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::accountId(), $accountId);
        $searchEntry->addValue(Fields::folderId(), $folderId);
        $searchEntry->addValue(Fields::mailId(), $mailId);
        $searchEntry->addValue(Fields::fileId(), $fileId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_MAIL);
        $searchEntry->addValue(Fields::userId(), $userId);
        $searchEntry->setType($type);

        return $searchEntry;
    }
}
