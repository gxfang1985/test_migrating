<?php

namespace grn\fts\mail;

use grn\fts\api\SearchApiParameter;
use grn\fts\Fields;
use grn\fts\filter\AndFilter;
use grn\fts\filter\NotExistsFilter;
use grn\fts\filter\OrFilter;
use grn\fts\filter\PhraseFilter;
use grn\fts\filter\SearchFilterInterface;
use grn\fts\filter\TermFilter;
use grn\fts\filter\TermsFilter;
use grn\fts\FtsProduct;
use grn\fts\SearchConstants;
use grn\mail\dao\GrnMailFolderDAO;

class MailFilter implements SearchFilterInterface
{
    /** @var string */
    private $accountId;
    /** @var string */
    private $folderId;
    /** @var string */
    private $sender;
    /** @var string */
    private $receiver;
    /** @var bool */
    private $messageOnly;

    /**
     * @param \grn\fts\api\SearchApiParameter $parameter
     */
    public function __construct(SearchApiParameter $parameter)
    {
        $this->setAccountId($parameter->getAccountId());
        $this->setFolderId($parameter->getMailFolderId());
        $this->setSender($parameter->getSender());
        $this->setReceiver($parameter->getReceiver());
        $this->setMessageOnly($parameter->getMessageOnly());
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return array|string
     */
    public function getQuery(FtsProduct $fts_product)
    {
        $accountId = $this->getAccountId();
        $folderId = $this->getFolderId();

        $filter = new AndFilter();
        $filter->addFilter(new TermFilter(Fields::appName(),
            SearchConstants::APPLICATION_MAIL));

        // ユーザー絞り込み
        $loginId = $this->getLoginUserId();

        $filter->addFilter(new TermFilter(Fields::userId(), $loginId));

        if ( ! is_null($accountId)) {
            // アカウントIDを指定したときは、アカウント絞り込み
            $accountId = (int)$accountId;
            // accountId.i:{$accountId}
            $filter->addFilter(new TermFilter(Fields::accountId(), $accountId));
        }


        if ( ! is_null($accountId) && ! is_null($folderId)) {
            require_once('mail/folder.csp');
            $folderLogic = \GRN_Mail_FolderLogic::getInstance();
            $folderInfo = $folderLogic->getFolderInfo(cb_get_login_user(),
                $accountId, $folderId);
            if ($folderInfo['code'] !== GRN_MAIL_FOLDER_CODE_ROOT) {
                // ルート以外のフォルダIDを指定したときは、フォルダ絞り込みを加える
                $folderIds = array_merge([$folderId],
                    $this->getSubFolderIdsRecursively([(int)$folderId]));
                $filter->addFilter(new TermsFilter(Fields::folderId(),
                    $folderIds));
            }
        }

        $sender = $this->getSender();
        if (strlen($sender) > 0) {
            $filter->addFilter(new PhraseFilter(Fields::from(), $sender));
        }

        $receiver = $this->getReceiver();
        if (strlen($receiver) > 0) {
            $filter->addFilter(
                new OrFilter([
                    new PhraseFilter(Fields::to(), $receiver),
                    new PhraseFilter(Fields::cc(), $receiver),
                    new PhraseFilter(Fields::bcc(), $receiver),
                ])
            );
        }

        if ($this->getMessageOnly()) {
            $filter->addFilter(new NotExistsFilter(Fields::fileId()));
        }

        return $filter->getQuery($fts_product);
    }

    /**
     * @param array $parentIds
     *
     * @return array
     */
    protected function getSubFolderIdsRecursively(array $parentIds)
    {
        $dao = $this->getMailFolderDAO();
        $ids = $dao->getSubFolderIds($parentIds);
        if (count($ids) > 0) {
            $ids = array_merge($ids, $this->getSubFolderIdsRecursively($ids));
        }

        return $ids;
    }

    /**
     * @return \grn\mail\dao\GrnMailFolderDAO
     */
    private function getMailFolderDAO()
    {
        return new GrnMailFolderDAO();
    }

    /**
     * @return string
     */
    protected function getLoginUserId()
    {
        $loginUser = cb_get_login_user();
        assert('$loginUser');

        return $loginUser->getOID();
    }

    /**
     * @param string $accountId
     */
    private function setAccountId($accountId)
    {
        $this->accountId = $accountId;
    }

    /**
     * @return string
     */
    private function getAccountId()
    {
        return $this->accountId;
    }

    /**
     * @param string $folderId
     */
    private function setFolderId($folderId)
    {
        $this->folderId = $folderId;
    }

    /**
     * @return string
     */
    private function getFolderId()
    {
        return $this->folderId;
    }

    /**
     * @param string $receiver
     */
    private function setReceiver($receiver)
    {
        $this->receiver = $receiver;
    }

    /**
     * @return string
     */
    private function getReceiver()
    {
        return $this->receiver;
    }

    /**
     * @param string $sender
     */
    private function setSender($sender)
    {
        $this->sender = $sender;
    }

    /**
     * @return string
     */
    private function getSender()
    {
        return $this->sender;
    }

    /**
     * @return boolean
     */
    public function getMessageOnly()
    {
        return $this->messageOnly;
    }

    /**
     * @param boolean $messageOnly
     */
    public function setMessageOnly($messageOnly)
    {
        $this->messageOnly = $messageOnly;
    }
}
