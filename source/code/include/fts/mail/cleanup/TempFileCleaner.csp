<?php

namespace grn\fts\mail\cleanup;

use grn\cydec\mq\MessageQueue;
use grn\fts\Application as FtsApplication;
use grn\fts\mail\cleanup\dao\DeleteTempFileDao;

class TempFileCleaner
{
    const CLEANUP_LIMIT_MAX = 200000;

    /** @var \GRN_CleanupLogger */
    var $logger;

    public function __construct()
    {
        global $G_container_base;
        $this->logger = $G_container_base->getInstance('cleanup_logger');
    }

    public function clean()
    {
        if (defined('ON_FOREST') || ! FtsApplication::isAvailable()) {
            return;
        }

        $dao = new DeleteTempFileDao();
        $fileRows = $dao->getList(self::CLEANUP_LIMIT_MAX);

        $mq = new MessageQueue();

        $completedList = [];

        foreach ($fileRows as $fileRow) {
            $queueId = $fileRow['col_queue_id'];
            $filePathList = $fileRow['col_file_path_list'];

            if ( ! $mq->isFinished($queueId)) {
                $this->logger->log("[info] Remained fts-indexer in _queue");
                break;
            }

            if ( ! $this->deleteFiles($filePathList)) {
                // failed to remove
                break;
            }

            $completedList[] = $queueId;
        }

        $dao->remove($completedList);
    }

    /**
     * @param string[] $filePathList
     *
     * @return boolean
     */
    private function deleteFiles($filePathList)
    {
        foreach ($filePathList as $filePath) {
            if ( ! file_exists($filePath)) {
                // assume that this file already deleted
                continue;
            }

            if ( ! @unlink($filePath)) {
                $this->logger->log("[error] Failed to remove: {$filePath}");

                return false;
            }
        }

        return true;
    }
}
