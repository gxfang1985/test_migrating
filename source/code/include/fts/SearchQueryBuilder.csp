<?php

namespace grn\fts;

use grn\fts\api\SearchApiParameter;
use grn\fts\filter\ApplicationFilter;
use grn\fts\filter\FileFilter;
use grn\fts\filter\LanguageFilter;
use grn\fts\filter\TitleFilter;

class SearchQueryBuilder
{
    const ONEDAY_SECONDS = 86400;

    /**
     * @param SearchApiParameter $parameter
     * @param FtsProduct         $fts_product
     *
     * @return SearchQuery
     */
    static public function build(
        SearchApiParameter $parameter,
        FtsProduct $fts_product
    ) {
        $query = new SearchQuery(
            $parameter->getKeyword(),
            (int)$parameter->getStart(),
            $parameter->getSortOrder(),
            self::getDateLowerTimestampByString($parameter->getDateLower()),
            self::getDateUpperTimestampByString($parameter->getDateUpper())
        );

        if ($parameter->getLanguage() !== LanguageFilter::ALL) {
            $query->addFilter(new LanguageFilter($parameter->getLanguage()));
        }

        if ($parameter->getTitleFilter()) {
            $query->setTitleOnly(true);
            if ($fts_product->isSolr()) {
                $query->addFilter(new TitleFilter($parameter->getKeyword()));
            }
        }

        $query->addFilter(self::getApplicationFilter($parameter));

        if ($parameter->getFileOnly()) {
            $fileType = $parameter->getFileType();
            $query->addFilter(new FileFilter($parameter->getFileOnly(),
                $fileType));
        }

        return $query;
    }

    /**
     * @param string $dateUpper
     *
     * @return int|null
     */
    static private function getDateUpperTimestampByString($dateUpper)
    {
        $timestamp = self::timeStringToTimestamp($dateUpper);
        if ($timestamp !== SearchQueryInterface::DATE_NOT_SPECIFIED) {
            // add 1 day to convert to the end of the date.
            $timestamp = $timestamp + self::ONEDAY_SECONDS;
        }

        return $timestamp;
    }

    /**
     * @param string $dateLower
     *
     * @return int|null
     */
    static private function getDateLowerTimestampByString($dateLower)
    {
        return self::timeStringToTimestamp($dateLower);
    }

    /**
     * @param string $time
     *
     * @return int|null
     */
    static private function timeStringToTimestamp($time)
    {
        if (is_null($time)) {
            return SearchQueryInterface::DATE_NOT_SPECIFIED;
        }

        return cb_timestring_to_timestamp($time)
            ?: SearchQueryInterface::DATE_NOT_SPECIFIED;
    }

    /**
     * @param api\SearchApiParameter $parameter
     *
     * @return \grn\fts\filter\SearchFilterInterface
     */
    static private function getApplicationFilter(SearchApiParameter $parameter)
    {
        return new ApplicationFilter($parameter);
    }
}
