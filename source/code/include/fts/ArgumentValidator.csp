<?php

namespace grn\fts;

use grn\fts\exception\FullIndexerException;

class ArgumentValidator
{
    const TIME_ERR_MSG = "[ERROR] The value of startTime or stopTime is incorrect!! Please confirm input values.";
    const NUMBER_ERR_MSG = "[ERROR] Invalid argument: number";
    const MAX_JOB_NUM_ERR_MSG = "[ERROR] Invalid argument: maxJobNum";
    const SLEEP_ERR_MSG = "[ERROR] Invalid argument: sleep";
    const TARGET_ERR_MSG = "[ERROR] The document and application options can't be specified at a time.";
    const APPLICATION_ERR_MSG = "[ERROR] Invalid argument: application";
    const DOCUMENT_ERR_MSG = "[ERROR] Invalid argument: document";
    const SEARCH_ENGINE_ERR_MSG = "[ERROR] Invalid argument: searchEngine";

    /**
     * @param $number
     *
     * @throws FullIndexerException
     */
    public function validateNumber($number)
    {
        if ( ! (is_numeric($number) && $number > 0 && 5000 >= $number)) {
            throw new FullIndexerException(self::NUMBER_ERR_MSG);
        }
    }

    /**
     * @param string|int|null $startTime
     * @param string|int|null $stopTime
     *
     * @throws FullIndexerException
     * @return void
     */
    public function validateRunTime($startTime, $stopTime)
    {
        if (is_null($startTime) && is_null($stopTime)) {
            // no setting for indexing time.
            return;
        }
        if (isset($startTime) ^ isset($stopTime)) {
            // If the value is set to only one or the other, it's invalid.
            throw new FullIndexerException(self::TIME_ERR_MSG);
        }
        if ( ! (is_numeric($startTime) && is_numeric($stopTime))) {
            // If either or both of these are not numeric, it's invalid.
            throw new FullIndexerException(self::TIME_ERR_MSG);
        }

        $startTime = (int)$startTime;
        $stopTime = (int)$stopTime;

        if ($startTime < 0 || 23 < $startTime || $stopTime < 0 || 23 < $stopTime
            || $startTime === $stopTime
        ) {
            // startTime and stopTime must be in between 0 and 23.
            // In addition, these must not be same.
            throw new FullIndexerException(self::TIME_ERR_MSG);
        }
    }

    /**
     * @param string|int|null $maxJobNum
     *
     * @throws FullIndexerException
     * @return void
     */
    public function validateMaxJobNum($maxJobNum)
    {
        if ( ! is_numeric($maxJobNum) || $maxJobNum < 0 || $maxJobNum > 5000) {
            throw new FullIndexerException(self::MAX_JOB_NUM_ERR_MSG);
        }
    }

    /**
     * @param string|int $sleep
     */
    public function validateSleep($sleep)
    {
        if ( ! is_numeric($sleep) || $sleep < 0 || $sleep > 3600000) {
            throw new FullIndexerException(self::SLEEP_ERR_MSG);
        }
    }

    /**
     * @param string|null $application
     * @param string|null $document
     */
    public function validateTarget($application, $document)
    {
        if ( ! is_null($application) && ! is_null($document)) {
            throw new FullIndexerException(self::TARGET_ERR_MSG);
        }

        if ( ! is_null($application)) {
            if (count(BulkCommandKeys::getAppCommands($application)) === 0) {
                throw new FullIndexerException(self::APPLICATION_ERR_MSG);
            }
        }

        if ( ! is_null($document)) {
            $documents = explode(',', $document);
            $commands = BulkCommandKeys::getDocumentsCommands($documents);
            if (count($commands) !== count($documents)) {
                throw new FullIndexerException(self::DOCUMENT_ERR_MSG);
            }
        }
    }

    /**
     * @param string $search_engine
     */
    public function validateSearchEngine($search_engine)
    {
        if (strlen($search_engine) > 0
            && ! in_array($search_engine, ['es', 'solr'])
        ) {
            throw new FullIndexerException(self::SEARCH_ENGINE_ERR_MSG);
        }
    }
}
