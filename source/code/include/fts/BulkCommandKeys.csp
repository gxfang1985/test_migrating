<?php

namespace grn\fts;


class BulkCommandKeys
{
    const BULLETIN_ARTICLE = "grn.fts.bulletin.BulkArticleIndexer";
    const BULLETIN_FOLLOW = "grn.fts.bulletin.BulkFollowIndexer";
    const BULLETIN_FILE = "grn.fts.bulletin.BulkFileIndexer";
    const MESSAGE_MESSAGE = "grn.fts.message.BulkMessageIndexer";
    const MESSAGE_FOLLOW = "grn.fts.message.BulkFollowIndexer";
    const MESSAGE_FILE = "grn.fts.message.BulkFileIndexer";
    const MESSAGE_FOLDER_RELATION = "grn.fts.message.BulkFolderMessageRelationIndexer";
    const CABINET_FILE = "grn.fts.cabinet.BulkFileIndexer";
    const SPACE_SPACE = "grn.fts.space.BulkSpaceIndexer";
    const SPACE_DISCUSSION = "grn.fts.space.BulkDiscussionIndexer";
    const SPACE_TODO = "grn.fts.space.BulkTodoIndexer";
    const SPACE_DISCUSSION_COMMENT = "grn.fts.space.BulkDiscussionCommentIndexer";
    const SPACE_TODO_COMMENT = "grn.fts.space.BulkTodoCommentIndexer";
    const SPACE_FILE = "grn.fts.space.BulkFileIndexer";
    const MAIL_MESSAGE = "grn.fts.mail.BulkMessageIndexer";
    const MAIL_SEND_FILE = "grn.fts.mail.BulkSendFileIndexer";
    const MAIL_RECEIVE_FILE = "grn.fts.mail.BulkReceiveFileIndexer";

    private static $commandKeys
        = [
            self::BULLETIN_ARTICLE,
            self::BULLETIN_FOLLOW,
            self::BULLETIN_FILE,
            self::MESSAGE_FOLDER_RELATION,
            self::MESSAGE_MESSAGE,
            self::MESSAGE_FOLLOW,
            self::MESSAGE_FILE,
            self::CABINET_FILE,
            self::SPACE_SPACE,
            self::SPACE_DISCUSSION,
            self::SPACE_TODO,
            self::SPACE_DISCUSSION_COMMENT,
            self::SPACE_TODO_COMMENT,
            self::SPACE_FILE,
            self::MAIL_MESSAGE,
            self::MAIL_SEND_FILE,
            self::MAIL_RECEIVE_FILE
        ];

    /** @var array */
    private static $eachAppCommandMap
        = [
            'bulletin' => [
                'bulletin.article' => self::BULLETIN_ARTICLE,
                'bulletin.follow'  => self::BULLETIN_FOLLOW,
                'bulletin.file'    => self::BULLETIN_FILE
            ],
            'message'  => [
                'message.folderRelation' => self::MESSAGE_FOLDER_RELATION,
                'message.message'        => self::MESSAGE_MESSAGE,
                'message.follow'         => self::MESSAGE_FOLLOW,
                'message.file'           => self::MESSAGE_FILE
            ],
            'cabinet'  => [
                'cabinet.file' => self::CABINET_FILE
            ],
            'space'    => [
                'space.space'             => self::SPACE_SPACE,
                'space.discussion'        => self::SPACE_DISCUSSION,
                'space.todo'              => self::SPACE_TODO,
                'space.discussionComment' => self::SPACE_DISCUSSION_COMMENT,
                'space.todoComment'       => self::SPACE_TODO_COMMENT,
                'space.file'              => self::SPACE_FILE
            ],
            'mail'     => [
                'mail.message'     => self::MAIL_MESSAGE,
                'mail.sendFile'    => self::MAIL_SEND_FILE,
                'mail.receiveFile' => self::MAIL_RECEIVE_FILE
            ]
        ];

    /** @var array */
    private static $fileIndexer
        = [
            self::BULLETIN_FILE,
            self::MESSAGE_FILE,
            self::CABINET_FILE,
            self::SPACE_FILE,
            self::MAIL_SEND_FILE,
            self::MAIL_RECEIVE_FILE
        ];

    /**
     * This function returns the list of command in full indexing execution order.
     *
     * @return array
     */
    public static function getArrayInOrder()
    {
        return self::$commandKeys;
    }

    /**
     * @param string $applicationName
     *
     * @return array
     */
    public static function getAppCommands($applicationName)
    {
        return in_array($applicationName, self::getApplicationNameInOrder())
            ? array_values(self::$eachAppCommandMap[$applicationName]) : [];
    }

    /**
     * @param $documents
     *
     * @return string[]
     */
    public static function getDocumentsCommands($documents)
    {
        $commands = [];
        foreach (self::$eachAppCommandMap as $appCommands) {
            foreach ($appCommands as $document => $command) {
                if (in_array($document, $documents)) {
                    $commands[] = $command;
                }
            }
        }

        return $commands;
    }

    /**
     * This function returns the list of application in full indexing execution order.
     *
     * @return array
     */
    public static function getApplicationNameInOrder()
    {
        return array_keys(self::$eachAppCommandMap);
    }

    /**
     * @param string $command
     *
     * @return bool
     */
    public static function isTypeOfFileIndexer($command)
    {
        assert('in_array($command, self::$commandKeys)');

        return in_array($command, self::$fileIndexer);
    }
}
