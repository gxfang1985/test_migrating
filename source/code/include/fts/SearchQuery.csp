<?php

namespace grn\fts;

use grn\fts\filter\SearchFilterInterface;

require_once('fw/string_util.csp');

class SearchQuery implements SearchQueryInterface
{
    const DEFAULT_SIZE = 20;
    const DEFAULT_START = 0;

    /** @var string */
    private $keyword;

    /** @var int */
    private $size;

    /** @var int */
    private $start;

    /** @var string */
    private $sortOrder;

    /** @var int|null */
    private $dateLower;

    /** @var int|null */
    private $dateUpper;

    /** @var SearchFilterInterface[] */
    private $filters = [];

    /** @var bool */
    private $titleOnly = false;

    /**
     * @param string   $keyword
     * @param int      $start
     * @param string   $sortOrder
     * @param int|null $dateLower
     * @param int|null $dateUpper
     *
     * @return \grn\fts\SearchQuery
     */
    public function __construct(
        $keyword,
        $start,
        $sortOrder,
        $dateLower,
        $dateUpper
    ) {
        $this->keyword = $keyword;
        $this->start = (int)$start;
        $this->sortOrder = $sortOrder;
        $this->dateLower = $dateLower;
        $this->dateUpper = $dateUpper;
        $this->size = SearchQuery::DEFAULT_SIZE;
    }

    /**
     * @return string
     */
    public function getKeyword()
    {
        return $this->keyword;
    }

    /**
     * @param int $size
     */
    public function setSize($size)
    {
        $this->size = (int)$size;
    }

    /**
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * @param int $start
     */
    public function setStart($start)
    {
        $this->start = (int)$start;
    }

    /**
     * @return int
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * @return string
     */
    public function getSortOrder()
    {
        return $this->sortOrder;
    }

    /**
     * @return int|null  return unix timestamp. return SearchQueryInterface::DATE_NOT_SPECIFIED if not specified.
     */
    public function getDateLower()
    {
        return $this->dateLower;
    }

    /**
     * @return int|null  return unix timestamp. return SearchQueryInterface::DATE_NOT_SPECIFIED if not specified.
     */
    public function getDateUpper()
    {
        return $this->dateUpper;
    }

    /**
     * @param SearchFilterInterface $filter
     */
    public function addFilter(SearchFilterInterface $filter)
    {
        $this->filters[] = $filter;
    }

    /**
     * @return SearchFilterInterface[]
     */
    public function getFilters()
    {
        return $this->filters;
    }

    /**
     * @param bool $titleOnly
     */
    public function setTitleOnly($titleOnly)
    {
        $this->titleOnly = $titleOnly;
    }

    /**
     * @return bool
     */
    public function isTitleOnly()
    {
        return $this->titleOnly;
    }
}
