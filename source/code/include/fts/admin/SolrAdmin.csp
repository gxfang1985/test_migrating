<?php

namespace grn\fts\admin;

use grn\cydec\common\ShardLogic;
use grn\fts\IndexerLogger;
use grn\fts\IndexerLoggerInterface;

require_once('fw/http.csp');

class SolrAdmin
{
    /** @var  string */
    private $solrUrl;
    /** @var  IndexerLogger */
    private $logger;

    public function __construct(IndexerLoggerInterface $logger)
    {
        $this->logger = $logger;
        $logic = new ShardLogic();
        $util = \CB_CyDECUtil::getInstance();
        $location = $logic->getShardLocation($util->getConfig('fts.json'),
            0);
        $this->solrUrl
            = "http://{$location->getHost()}:{$location->getPort()}/";
    }

    /**
     * @param string $coreName
     *
     * @return bool
     */
    public function initializeCore($coreName)
    {
        if ( ! $this->deleteCore($coreName)) {
            $this->logger->log("[ERROR] Can't connect to Solr server!!");

            return false;
        }
        if ( ! $this->createCore($coreName)) {
            $this->logger->log("[ERROR] Can't connect to Solr server!!");

            return false;
        }

        return true;
    }

    /**
     * @param $coreName
     *
     * @return bool
     */
    public function hasCore($coreName)
    {
        return $this->postRequest("{$this->solrUrl}solr/{$coreName}/select");
    }

    /**
     * @param $coreName
     *
     * @return bool
     */
    private function deleteCore($coreName)
    {
        if ( ! $this->hasCore($coreName)) {
            return true;
        }

        $this->logger->log("Delete core: {$coreName}");
        if ($this->postRequest("{$this->solrUrl}admin/delete?core={$coreName}")) {
            $this->logger->log("Success to delete core: {$coreName}");

            return true;
        } else {
            $this->logger->log("[ERROR] Failed to delete core: {$coreName}");

            return false;
        }
    }

    /**
     * @param $coreName
     *
     * @return bool
     */
    private function createCore($coreName)
    {
        $this->logger->log("Create core: {$coreName}");
        if ($this->postRequest("{$this->solrUrl}admin/create?core={$coreName}")) {
            $this->logger->log("Success to create core: {$coreName}");

            return true;
        } else {
            $this->logger->log("[ERROR] Failed to create core: {$coreName}");

            return false;
        }
    }

    /**
     * @param string $uri
     *
     * @return bool
     */
    private function postRequest($uri)
    {
        $httpClient = $this->getHttpClient();

        if ( ! $httpClient->execute($uri)) {
            return false;
        }
        if ($httpClient->getStatusLine()['status-code'] != 200) {
            return false;
        }

        return true;
    }

    /**
     * @return \CB_HttpClient
     */
    private function getHttpClient()
    {
        $httpClient = new \CB_HttpClient();
        $httpClient->boot();

        return $httpClient;
    }
}
