<?php

namespace grn\fts;

use grn\fts\filter\SearchFilterInterface;

/**
 * UpdateServiceContainer class holds enabled UpdateServiceInterface instances of FTS products(Solr and Elasticsearch).
 */
class UpdateServiceContainer
{
    /** @var UpdateServiceInterface[] */
    private $updateServices = [];

    /**
     * @param FtsProduct|NULL $target_fts_product
     */
    public function __construct(FtsProduct $target_fts_product = null)
    {
        if ( ! Application::isAvailable()) {
            return;
        }

        if ( ! is_null($target_fts_product)) {
            if ($target_fts_product->isSolr()) {
                $this->updateServices[$target_fts_product->getProduct()]
                    = cb_lwc_fts_update_service();
            }

            if ($target_fts_product->isElasticsearch()) {
                $this->updateServices[$target_fts_product->getProduct()]
                    = cb_lwc_es_fts_update_service();
            }
        } else {
            if ($this->isSolrEnabled()) {
                $this->updateServices[FtsProduct::solr()->getProduct()]
                    = cb_lwc_fts_update_service();
            }

            if ($this->isElasticsearchEnabled()) {
                $this->updateServices[FtsProduct::elasticsearch()->getProduct()]
                    = cb_lwc_es_fts_update_service();
            }
        }
    }

    /**
     * @param FtsProduct|NULL $target_fts_product
     *
     * @return UpdateServiceInterface[]
     */
    private function getTargetUpdateServices(
        FtsProduct $target_fts_product = null
    ) {
        if ( ! is_null($target_fts_product)) {
            if (array_key_exists($target_fts_product->getProduct(),
                $this->updateServices)
            ) {
                return [$this->updateServices[$target_fts_product->getProduct()]];
            }

            return [];
        } else {
            return $this->updateServices;
        }
    }

    /**
     * @param SearchEntryInterface $search_entry
     * @param FtsProduct|null      $target_fts_product
     */
    public function updateIndex(
        SearchEntryInterface $search_entry,
        FtsProduct $target_fts_product = null
    ) {
        foreach (
            $this->getTargetUpdateServices($target_fts_product) as
            $update_service
        ) {
            $update_service->updateIndex($search_entry);
        }
    }

    /**
     * @param string          $id
     * @param FtsProduct|null $target_fts_product
     */
    public function deleteById($id, FtsProduct $target_fts_product = null)
    {
        foreach (
            $this->getTargetUpdateServices($target_fts_product) as
            $update_service
        ) {
            $update_service->deleteById($id);
        }
    }

    /**
     * @param SearchFilterInterface $query
     * @param FtsProduct|null       $target_fts_product
     */
    public function deleteByQuery(
        SearchFilterInterface $query,
        FtsProduct $target_fts_product = null
    ) {
        foreach (
            $this->getTargetUpdateServices($target_fts_product) as
            $update_service
        ) {
            $update_service->deleteByQuery($query);
        }
    }

    /**
     * @param array           $entries
     * @param                 $forward
     * @param FtsProduct|null $target_fts_product
     */
    public function bulkUpdateIndex(
        array $entries,
        $forward,
        FtsProduct $target_fts_product = null
    ) {
        foreach (
            $this->getTargetUpdateServices($target_fts_product) as
            $update_service
        ) {
            $update_service->bulkUpdateIndex($entries, $forward);
        }
    }

    /**
     * @return bool
     */
    private function isSolrEnabled()
    {
        $util = \CB_CyDECUtil::getInstance();

        return is_file($util->getConfig('fts.json'));
    }

    /**
     * @return bool
     */
    private function isElasticsearchEnabled()
    {
        $elasticsearch_config = Application::getElasticsearchConfig();

        if ( ! isset($elasticsearch_config['appConfig']['garoon']['index'])) {
            return false;
        }

        return $elasticsearch_config['appConfig']['garoon']['index'];
    }
}
