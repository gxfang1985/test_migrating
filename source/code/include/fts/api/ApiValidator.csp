<?php

namespace grn\fts\api;

use DateTime;
use grn\fts\exception\SearchException;
use grn\fts\FileType;
use grn\fts\filter\LanguageFilter;
use grn\fts\SearchTarget;
use grn\fts\SortOrder;
use grn\fts\space\SpaceFilter;

class ApiValidator
{
    const START_MAX = 10000;

    /**
     * @throws \grn\fts\exception\SearchException
     */
    public function validateHeader()
    {
        // check request header for security
        if ( ! isset($_SERVER['HTTP_X_REQUESTED_WITH'])
             || $_SERVER['HTTP_X_REQUESTED_WITH'] !== 'XMLHttpRequest'
        ) {
            throw new SearchException('invalid HTTP_X_REQUESTED_WITH header');
        }
    }

    /**
     * @return array
     * @throws \grn\fts\exception\SearchException
     */
    public function validateInput()
    {
        $json = file_get_contents('php://input');
        $input = json_decode($json, true);
        if (is_null($input)) {
            // json must be posted
            throw new SearchException('json_decode returns null {$json}');
        }

        return $input;
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    public function validateParameter(SearchApiParameter $parameter)
    {
        $this->validateIds($parameter);
        $this->validateStart($parameter);
        $this->validateSortOrder($parameter);
        $this->validateFileType($parameter);
        $this->validateUser($parameter);
        $this->validateDate($parameter);
        $this->validateLanguage($parameter);
        $this->validateSearchRange($parameter);
        $this->validateSpaceApps($parameter);
        $this->validateTarget($parameter);
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    protected function validateIds(SearchApiParameter $parameter)
    {
        $idParameters = [
            "spaceCategoryId"    => $parameter->getSpaceCategoryId(),
            "bulletinCategoryId" => $parameter->getBulletinCategoryId(),
            "messageFolderId"    => $parameter->getMessageFolderId(),
            "cabinetFolderId"    => $parameter->getCabinetFolderId(),
            "mailFolderId"       => $parameter->getMailFolderId(),
            "spaceId"            => $parameter->getSpaceId(),
            "accountId"          => $parameter->getAccountId()
        ];
        foreach ($idParameters as $parameterName => $id) {
            if (is_null($id)) {
                // default value
                continue;
            }
            if ( ! (is_numeric($id) && $id > 0)) {
                throw new SearchException("{$parameterName} is invalid: {$id}");
            }
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    protected function validateStart(SearchApiParameter $parameter)
    {
        $start = $parameter->getStart();
        if ( ! (is_numeric($start) && $start >= 0
                && $start <= self::START_MAX)
        ) {
            throw new SearchException("start is invalid: {$start}");
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    private function validateSortOrder(SearchApiParameter $parameter)
    {
        if ( ! in_array($parameter->getSortOrder(), SortOrder::getSortEnum())) {
            throw new SearchException("sortOrder is invalid: {$parameter->getSortOrder()}");
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    private function validateFileType(SearchApiParameter $parameter)
    {
        if ( ! in_array($parameter->getFileType(),
            FileType::getFileTypeEnum())
        ) {
            throw new SearchException("fileType is invalid: {$parameter->getFileType()}");
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    private function validateUser(SearchApiParameter $parameter)
    {
        $userParameters = [
            "modifier" => $parameter->getModifier(),
            "sender"   => $parameter->getSender(),
            "receiver" => $parameter->getReceiver()
        ];
        foreach ($userParameters as $parameterName => $user) {
            if ( ! is_string($user)) {
                throw new SearchException("{$parameterName} is invalid: {$user}");
            }
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    private function validateDate(SearchApiParameter $parameter)
    {
        $dateList = [
            "dateUpper" => $parameter->getDateUpper(),
            "dateLower" => $parameter->getDateLower()
        ];
        foreach ($dateList as $dateType => $date) {
            if (is_null($date)) {
                // default value
                continue;
            }
            if ( ! is_string($date)) {
                throw new SearchException("{$dateType} is invalid: {$date}");
            }
            try {
                // DateTime throws exception if it gets invalid argument.
                // http://www.php.net/manual/en/datetime.construct.php
                new DateTime($date);
            } catch (\Exception $e) {
                throw new SearchException("{$dateType} is invalid: {$date}");
            }
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    private function validateLanguage(SearchApiParameter $parameter)
    {
        if ( ! in_array($parameter->getLanguage(),
            LanguageFilter::getLanguageEnum())
        ) {
            throw new SearchException("language is invalid: {$parameter->getLanguage()}");
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    private function validateSearchRange(SearchApiParameter $parameter)
    {
        $searchRange = $parameter->getSearchRange();
        if (is_null($searchRange)) {
            // default value
            return;
        }
        if ( ! in_array($searchRange, SearchTarget::getSearchRangeEnum())) {
            throw new SearchException("searchRange is invalid: {$searchRange}");
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    private function validateSpaceApps(SearchApiParameter $parameter)
    {
        $apps = $parameter->getSpaceApps();
        $spaceApp = [SpaceFilter::APP_DISCUSSION, SpaceFilter::APP_TODO];
        if ( ! is_array($apps)) {
            throw new SearchException("spaceApps is invalid: spaceApps is not array");
        }
        foreach ($apps as $app) {
            if ( ! in_array($app, $spaceApp)) {
                throw new SearchException("spaceApps is invalid: {$app} is not space application");
            }
        }
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @throws \grn\fts\exception\SearchException
     */
    protected function validateTarget(SearchApiParameter $parameter)
    {
        if ( ! in_array($parameter->getTarget(),
            SearchTarget::getTargetEnum())
        ) {
            throw new SearchException("target is invalid: {$parameter->getTarget()}");
        }
    }
}
