<?php

namespace grn\fts\api;

use grn\bulletin\FtsSQLSearchLogic as BulletinSearchLogic;
use grn\cabinet\FtsSQLSearchLogic as CabinetSearchLogic;
use grn\fts\SearchQuery;
use grn\fts\SQLSearchLogicInterface;
use grn\mail\dao\SQLSearchDAO as MailSearchLogic;
use grn\message\dao\SQLSearchDAO as MessageSearchLogic;

class SQLSearchApi extends SearchApi
{
    const MESSAGE = "message";
    const MAIL = "mail";
    const BULLETIN = "bulletin";
    const CABINET = "cabinet";

    const CONTINUABLE = "continuable";
    const NUM_CHECKED = "numChecked";
    const NUM_FETCHED = "numFetched";

    /**
     * @param ApiValidator $validator
     */
    public function __construct($validator = null)
    {
        if (is_null($validator)) {
            $validator = new SQLApiValidator();
        }
        parent::__construct($validator);
    }

    /**
     * @return SQLSearchLogicInterface
     */
    private function getSearchLogic()
    {
        $app = $this->parameter->getApps();
        $appName = $app[0];

        if ($appName == self::MAIL) {
            return MailSearchLogic::create($this->parameter);
        } elseif ($appName == self::MESSAGE) {
            return MessageSearchLogic::create($this->parameter);
        } elseif ($appName == self::BULLETIN) {
            return BulletinSearchLogic::create($this->parameter);
        } elseif ($appName == self::CABINET) {
            return CabinetSearchLogic::create($this->parameter);
        }
    }

    /**
     * @return SQLSearchLogicInterface
     */
    private function buildSearchLogic()
    {
        $dao = $this->getSearchLogic();
        $dao->setOptionalCondition($this->parameter);

        return $dao;
    }

    public function run($run_background_search = false)
    {
        $dao = $this->buildSearchLogic();
        assert($dao instanceof SQLSearchLogicInterface);

        $iterator = $dao->iterator();
        $this->json
            = json_encode([
            "result"  => $this->convertJSONDocument($iterator),
            "success" => true
        ],
            JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);
        parent::display();
    }

    /**
     * @param \Iterator $iterator
     *
     * @return array
     */
    public function convertJSONDocument(\Iterator $iterator)
    {
        $numOfChecked = 0;
        $searchResult = ["docs" => []];
        $size = SearchQuery::DEFAULT_SIZE;

        foreach ($iterator as $value) {
            $numOfChecked += 1;
            if ($numOfChecked > $size) {
                break;
            }
            $searchResult["docs"][] = $value;
        }

        $searchResult[self::CONTINUABLE] = $numOfChecked > $size;
        $searchResult[self::NUM_CHECKED]
            = $this->parameter->getStart()
              + ($numOfChecked > $size ? $size
                : $numOfChecked);
        $searchResult[self::NUM_FETCHED] = $numOfChecked > $size ? $size
            : $numOfChecked;

        return $searchResult;
    }
}
