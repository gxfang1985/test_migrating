<?php

namespace grn\fts;


use grn\fts\exception\FullIndexerException;

class FullIndexerArgumentBuilder
{
    const DEFAULT_NUMBER = '50';
    const DEFAULT_SLEEP = '5000';

    /** @var array */
    private $indexApplication
        = [
            'bulletin' => false,
            'message'  => false,
            'cabinet'  => false,
            'space'    => false,
            'mail'     => false
        ];
    /** @var bool */
    private $fileOnly = false;
    /** @var string|int */
    private $number = self::DEFAULT_NUMBER;
    /** @var string */
    private $forward = '';
    /** @var string|int */
    private $sleep = self::DEFAULT_SLEEP;
    /** @var string|int|null */
    private $startTime = null;
    /** @var string|int|null */
    private $stopTime = null;
    /** @var FullIndexProgressInfo */
    private $progressInfo = null;
    /** @var string|int */
    private $maxJobNum = 0;
    /** @var string|null */
    private $searchEngine = null;

    /**
     * @return FullIndexerArgValue
     */
    public function build()
    {
        return new FullIndexerArgValue(
            $this->indexApplication['bulletin'],
            $this->indexApplication['message'],
            $this->indexApplication['cabinet'],
            $this->indexApplication['space'],
            $this->indexApplication['mail'],
            $this->fileOnly,
            (int)$this->number,
            $this->forward,
            (int)$this->sleep,
            is_null($this->startTime) ? null : (int)$this->startTime,
            is_null($this->stopTime) ? null : (int)$this->stopTime,
            $this->progressInfo,
            (int)$this->maxJobNum,
            is_null($this->searchEngine) || strlen($this->searchEngine) == 0
                ? 'solr' : $this->searchEngine
        );
    }

    /**
     * @param FullIndexProgressInfo $progressInfo
     */
    public function setIndexApplicationInfo(FullIndexProgressInfo $progressInfo)
    {
        foreach (
            BulkCommandKeys::getApplicationNameInOrder() as $applicationName
        ) {
            $this->indexApplication[$applicationName]
                = $progressInfo->getPermissionOfIndexingApplication($applicationName);
        }
    }

    /**
     * @param boolean $fileOnly
     */
    public function setFileOnly($fileOnly)
    {
        $this->fileOnly = $fileOnly;
    }

    /**
     * @param string|int $number
     */
    public function setNumber($number)
    {
        $this->number = $number;
    }

    /**
     * @param string $forward
     */
    public function setForward($forward)
    {
        $this->forward = $forward;
    }

    /**
     * @param string|int $sleep
     */
    public function setSleep($sleep)
    {
        $this->sleep = $sleep;
    }

    /**
     * @param string|int $startTime
     */
    public function setStartTime($startTime)
    {
        $this->startTime = $startTime;
    }

    /**
     * @param string|int $stopTime
     */
    public function setStopTime($stopTime)
    {
        $this->stopTime = $stopTime;
    }

    /**
     * @param string|int $maxJobNum
     */
    public function setMaxJobNum($maxJobNum)
    {
        $this->maxJobNum = $maxJobNum;
    }

    /**
     * @param \grn\fts\FullIndexProgressInfo $progressInfo
     */
    public function setProgressInfo($progressInfo)
    {
        $this->progressInfo = $progressInfo;
    }

    /**
     * @param string $searchEngine
     */
    public function setSearchEngine($searchEngine)
    {
        $this->searchEngine = $searchEngine;
    }

    /**
     * @param ArgumentValidator               $validator
     * @param \grn\fts\IndexerLoggerInterface $logger
     */
    public function validate(
        ArgumentValidator $validator,
        IndexerLoggerInterface $logger
    ) {
        try {
            $validator->validateSearchEngine($this->searchEngine);
            $validator->validateNumber($this->number);
            $validator->validateRunTime($this->startTime, $this->stopTime);
            $validator->validateMaxJobNum($this->maxJobNum);
            $validator->validateSleep($this->sleep);
        } catch (FullIndexerException $e) {
            $logger->log($e->getMessage());
            cb_safe_exit(1);
        }
    }
}
