<?php
declare(strict_types=1);

namespace grn\fts;

class Normalizer
{
    private static $LUCENE_RESERVED_CHARACTERS
        = [
            "\\",
            "+",
            "-",
            "=",
            "&&",
            "||",
            "<",
            ">",
            "!",
            "(",
            ")",
            "{",
            "}",
            "[",
            "]",
            "^",
            "\"",
            "~",
            "*",
            "?",
            ":",
            "/"
        ];
    private static $MAX_INPUT_LENGTH = 100;

    /**
     * @param $keyword
     *
     * @return string
     */
    public function normalizeKeyword($keyword)
    {
        return $this->sanitize($keyword);
    }

    /**
     * @param string $string
     * @param int    $length
     *
     * @return string
     */
    public function substring(string $string, int $length): string
    {
        return mb_substr($string, 0, $length);
    }

    /**
     * @param string $input
     * @param array  $targets
     *
     * @return string
     */
    public function escape(string $input, array $targets): string
    {
        foreach ($targets as $target) {
            $input = str_replace($target, "\\" . $target, $input);
        }

        return $input;
    }

    /**
     * Split the input into phrase which means quoted string and non phrase.
     *
     * splitPhrases('This is "a phrase".') // => ['This is ', '"a phrase", '.'];
     *
     * @param string $input
     *
     * @return array
     */
    private function splitPhrases(string $input): array
    {
        $pattern = '/("(?:[^"]*)")/';

        return preg_split($pattern, $input, -1, PREG_SPLIT_DELIM_CAPTURE);
    }

    /**
     * @param string $carry
     * @param string $string
     *
     * @return string
     */
    private function escapeOnlyNonPhrase(string $carry, string $string): string
    {
        if ( ! $this->isPhrase($string)) {
            $string = $this->escape($string, self::$LUCENE_RESERVED_CHARACTERS);
        }

        return $carry . $string;
    }

    /**
     * @param string $string
     *
     * @return bool
     */
    private function isPhrase(string $string): bool
    {
        if (strlen($string) <= 1) {
            return false;
        }

        return (mb_substr($string, 0, 1) === '"'
                && mb_substr($string, -1) === '"');
    }

    /**
     * @param string $input
     *
     * @return string
     */
    public function sanitize(string $input): string
    {
        $input = $this->substring($input, $this::$MAX_INPUT_LENGTH);
        $input = \Normalizer::normalize($input, \Normalizer::FORM_KC);
        $phrases = $this->splitPhrases($input);

        return array_reduce($phrases, [$this, "escapeOnlyNonPhrase"], '');
    }
}
