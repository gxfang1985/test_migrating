<?php

namespace grn\fts;

use grn\grn\access\service\AppAccess;

require_once('grn/application.csp');

class Application extends \GRN_ApplicationBase
{
    const APPLICATION_ID = 'fts';
    const VIEWABLE_FLAG = '1';
    const AVAILABLE_FLAG = '2';
    const LATEST_SCHEMA_VERSION = 3;
    const SCHEMA_VERSION_KEY = 'schema_version';
    const DEFAULT_CLIENT_TIMEOUT = 240;

    private static $available = null;
    private static $viewable = null;

    /** @var string[] */
    private static $SEARCHABLE_APPLICATIONS
        = [
            SearchConstants::APPLICATION_BULLETIN,
            SearchConstants::APPLICATION_CABINET,
            SearchConstants::APPLICATION_MAIL,
            SearchConstants::APPLICATION_MESSAGE,
            SearchConstants::APPLICATION_SPACE,
        ];
    /** @var string[]|null */
    private static $availableSearcheableApplications = null;

    public function __construct()
    {
        parent::__construct(self::APPLICATION_ID);
    }

    /**
     * @static
     * @return bool
     */
    public static function isAvailable()
    {
        if (is_null(self::$available)) {
            self::$available = in_array(self::getFtsFlag(),
                [self::AVAILABLE_FLAG, self::VIEWABLE_FLAG]);
        }

        return self::$available;
    }

    /**
     * @static
     * @return bool
     */
    public static function isViewable()
    {
        if (is_null(self::$viewable)) {
            require_once('grn/license.csp');
            $licenseManager = \GRN_LicenseManager::getInstance();
            self::$viewable = (self::getFtsFlag() == self::VIEWABLE_FLAG)
                              && ($licenseManager->hasEffectiveLicense(30));
        }

        return self::$viewable;
    }

    /**
     * @static
     * @return string|bool
     */
    private static function getFtsFlag()
    {
        global $G_config_common;

        return $G_config_common->get('FTS', 'enable_fts');
    }

    /**
     * Return the value of FTS client(using curl) timeout.
     *
     * @return int
     */
    public static function getClientTimeout()
    {
        global $G_config_common;
        $timeout = intval($G_config_common->get('FTS', 'client_timeout'));
        if ($timeout < 1) {
            $timeout = self::DEFAULT_CLIENT_TIMEOUT;
        }

        return $timeout;
    }

    /**
     * @static
     * @return string[]
     */
    public static function getSearchableApplications()
    {
        return self::$SEARCHABLE_APPLICATIONS;
    }

    /**
     * @static
     * @return string[]
     */
    public static function getAvailableSearcheableApplications()
    {
        if (is_null(self::$availableSearcheableApplications)) {
            self::$availableSearcheableApplications = [];
            foreach (self::getSearchableApplications() as $app) {
                if (AppAccess::isAppAvailable($app)) {
                    self::$availableSearcheableApplications[$app] = $app;
                }
            }
        }

        return self::$availableSearcheableApplications;
    }

    /**
     * @param string $appId
     *
     * @return bool
     */
    public static function isSearchableApplication($appId)
    {
        return in_array($appId, self::$SEARCHABLE_APPLICATIONS);
    }

    /**
     * @return int
     */
    public static function getSchemaVersion()
    {
        $profile = cb_get_system_profile("grn.fts");
        if ($profile->getAttribute(self::SCHEMA_VERSION_KEY, $schema_version)) {
            return (int)$schema_version;
        } else {
            return 1;
        }
    }

    /**
     */
    public static function updateSchemaVersionToLatest()
    {
        $profile = cb_get_system_profile("grn.fts");
        $profile->createAttribute(self::SCHEMA_VERSION_KEY,
            self::LATEST_SCHEMA_VERSION);
    }

    /**
     * @static
     * @return FtsProduct
     */
    public static function getFtsEngine()
    {
        $elasticsearch_config = self::getElasticsearchConfig();
        if ($elasticsearch_config === false) {
            return FtsProduct::solr();
        }

        if (isset($elasticsearch_config['appConfig']['garoon']['search'])
            && $elasticsearch_config['appConfig']['garoon']['search']
            && isset($elasticsearch_config['appConfig']['garoon']['background'])
            && ! $elasticsearch_config['appConfig']['garoon']['background']
        ) {
            return FtsProduct::elasticsearch();
        }

        return FtsProduct::solr();
    }

    /**
     * @static
     * @return array|false
     */
    public static function getElasticsearchConfig()
    {
        $util = \CB_CyDECUtil::getInstance();
        $elasticsearch_config_file_path = $util->getConfigDir()
                                          . DIRECTORY_SEPARATOR
                                          . 'elasticsearch.json';

        if ( ! is_readable($elasticsearch_config_file_path)) {
            return false;
        }

        $elasticsearch_json
            = file_get_contents($elasticsearch_config_file_path);
        if ($elasticsearch_json === false) {
            return false;
        }

        $elasticsearch_config = json_decode($elasticsearch_json, true);
        if ($elasticsearch_config === null) {
            return false;
        }

        return $elasticsearch_config;
    }

    /**
     * @bool
     */
    public static function isBackgroundSearchModeEnabled()
    {
        $elasticsearch_config = self::getElasticsearchConfig();
        if ( ! isset($elasticsearch_config['appConfig']['garoon']['search'])
             || ! isset($elasticsearch_config['appConfig']['garoon']['background'])
        ) {
            return false;
        }

        return $elasticsearch_config['appConfig']['garoon']['search']
               && $elasticsearch_config['appConfig']['garoon']['background'];
    }
}
