<?php

namespace grn\fts\filter;

use grn\fts\api\SearchApiParameter;
use grn\fts\Application;
use grn\fts\bulletin\BulletinFilter;
use grn\fts\cabinet\CabinetFilter;
use grn\fts\FtsProduct;
use grn\fts\mail\MailFilter;
use grn\fts\message\MessageFilter;
use grn\fts\SearchConstants;
use grn\fts\space\SpaceFilter;

class ApplicationFilter implements SearchFilterInterface
{
    /** @var SearchFilterInterface */
    private $filter;

    /**
     * @param SearchApiParameter $parameter
     */
    public function __construct(SearchApiParameter $parameter)
    {
        $this->filter = $this->buildFilters($parameter);
    }

    /**
     * @param SearchApiParameter $parameter
     *
     * @return SearchFilterInterface
     */
    private function buildFilters(SearchApiParameter $parameter)
    {
        $apps = $parameter->getApps();
        $available_searchable_applications
            = Application::getAvailableSearcheableApplications();
        if ( ! is_array($apps) || count($apps) === 0) {
            $apps = $available_searchable_applications;
        } else {
            $apps = array_filter($apps,
                function ($app) use ($available_searchable_applications) {
                    return in_array($app, $available_searchable_applications);
                });
        }

        $apps_filter = new OrFilter();
        if (in_array(SearchConstants::APPLICATION_BULLETIN, $apps)) {
            $apps_filter->addFilter(new BulletinFilter($parameter));
        }

        if (in_array(SearchConstants::APPLICATION_MESSAGE, $apps)) {
            $apps_filter->addFilter(new MessageFilter($parameter));
        }

        if (in_array(SearchConstants::APPLICATION_CABINET, $apps)) {
            $apps_filter->addFilter(new CabinetFilter($parameter));
        }

        if (in_array(SearchConstants::APPLICATION_SPACE, $apps)) {
            $apps_filter->addFilter(new SpaceFilter($parameter));
        }

        $modifier_filter = new ModifierFilter($parameter->getModifier());

        $modifier_and_apps_filter = new AndFilter();
        $modifier_and_apps_filter->addFilter($apps_filter);
        $modifier_and_apps_filter->addFilter($modifier_filter);

        $filter = new OrFilter();
        $filter->addFilter($modifier_and_apps_filter);

        if (in_array(SearchConstants::APPLICATION_MAIL, $apps)) {
            $filter->addFilter(new MailFilter($parameter));
        }

        return $filter;
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return string|array
     * @throws \grn\fts\exception\NoResultException  throws when no documents are matched with this condition.
     * @throws \grn\fts\exception\AllResultException  throws when all documents are matched with this condition.
     */
    public function getQuery(FtsProduct $fts_product)
    {
        return $this->filter->getQuery($fts_product);
    }
}
