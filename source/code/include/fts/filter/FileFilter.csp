<?php

namespace grn\fts\filter;

use grn\fts\exception\AllResultException;
use grn\fts\Fields;
use grn\fts\FileType;
use grn\fts\FtsProduct;

class FileFilter implements SearchFilterInterface
{
    /** @var bool */
    private $fileOnly;
    /** @var string */
    private $fileType;

    /**
     * @param bool   $fileOnly
     * @param string $fileType
     */
    public function __construct($fileOnly, $fileType = FileType::ALL)
    {
        $this->setFileOnly($fileOnly);
        $this->setFileType($fileType);
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return string
     * @throws AllResultException  Throws when not file only.
     */
    public function getQuery(FtsProduct $fts_product)
    {
        if ($this->getFileOnly()) {
            $fileOnlyFilter = new ExistsFilter(Fields::fileId());

            $fileTypeFilter = $this->getFileTypeQuery($this->getFileType());

            if (is_null($fileTypeFilter)) {
                return $fileOnlyFilter->getQuery($fts_product);
            } else {
                $filter = new AndFilter([$fileOnlyFilter, $fileTypeFilter]);

                return $filter->getQuery($fts_product);
            }
        }
        throw new AllResultException();
    }

    /**
     * @param string $fileType
     *
     * @return SearchFilterInterface|null
     */
    private function getFileTypeQuery($fileType)
    {
        if ($fileType == FileType::OTHER) {
            return $this->makeOtherFileTypeQuery();
        } else {
            $extensions = FileType::getFileTypeExtensions($fileType);
            if (count($extensions) === 0) {
                return null;
            }

            return $this->makeQuery($extensions);
        }

    }

    /**
     * @return SearchFilterInterface
     */
    private function makeOtherFileTypeQuery()
    {
        return new NotFilter(
            new TermsFilter(Fields::fileExtension(),
                FileType::getAllExtensions())
        );
    }

    /**
     * @param string[] $extensions
     *
     * @return SearchFilterInterface
     */
    private function makeQuery($extensions)
    {
        return new TermsFilter(Fields::fileExtension(), $extensions);
    }

    /**
     * @param boolean $fileOnly
     */
    private function setFileOnly($fileOnly)
    {
        $this->fileOnly = $fileOnly;
    }

    /**
     * @return boolean
     */
    private function getFileOnly()
    {
        return $this->fileOnly;
    }

    /**
     * @param string $fileType
     */
    private function setFileType($fileType)
    {
        $this->fileType = $fileType;
    }

    /**
     * @return string
     */
    private function getFileType()
    {
        return $this->fileType;
    }
}
