<?php

namespace grn\fts\filter;

use grn\fts\CyDECNormalizer;
use grn\fts\exception\NoServerConnectionException;
use grn\fts\Field;
use grn\fts\FtsProduct;
use grn\fts\Normalizer;
use RuntimeException;

class QueryStringFilter implements SearchFilterInterface
{
    /**
     * @var Field[]
     */
    private $fields;

    /**
     * @var string
     */
    private $value;

    /**
     * @param Field[]    $fields
     * @param string|int $value
     *
     * @throws NoServerConnectionException
     *
     */
    public function __construct(array $fields, $value)
    {
        $this->fields = $fields;

        if (defined('ON_FOREST')) {
            $this->value = (new CyDECNormalizer())->normalizeKeyword($value);
        } else {
            $this->value = (new Normalizer())->normalizeKeyword($value);
        }
    }


    /**
     * @param FtsProduct $fts_product
     *
     * @return string|array
     * @throws \grn\fts\exception\NoResultException  throws when no documents are matched with this condition.
     * @throws \grn\fts\exception\AllResultException  throws when all documents are matched with this condition.
     */
    public function getQuery(FtsProduct $fts_product)
    {
        if ($fts_product->isSolr()) {
            if (count($this->fields) > 1) {
                throw new RuntimeException('Multiple fields is not supported.');
            }
            $field = $this->fields[0];

            return $field->solr() . ':' . $this->value;
        } else {
            $fields = array_map(function (Field $field) {
                return $field->es();
            }, $this->fields);

            return [
                'query_string' => [
                    'query'                        => $this->value,
                    'fields'                       => $fields,
                    'default_operator'             => 'and',
                    'auto_generate_phrase_queries' => true,
                ]
            ];
        }
    }
}
