<?php

namespace grn\fts\filter;

use grn\fts\exception\AllResultException;
use grn\fts\exception\NoResultException;
use grn\fts\FtsProduct;

class OrFilter implements SearchFilterInterface
{
    /** @var SearchFilterInterface[] */
    private $filters;

    /**
     * @param SearchFilterInterface[] $filters
     */
    public function __construct(array $filters = [])
    {
        $this->filters = $filters;
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return string
     * @throws NoResultException
     * @throws AllResultException
     */
    public function getQuery(FtsProduct $fts_product)
    {
        $filters = $this->getFilters();

        $queries = [];
        foreach ($filters as $filter) {
            try {
                $queries[] = $filter->getQuery($fts_product);
            } catch (NoResultException $e) {
                continue;
            } catch (AllResultException $e) {
                throw new AllResultException('', 0, $e);
            }
        }

        if (count($queries) === 0) {
            throw new NoResultException();
        }

        if ($fts_product->isSolr()) {
            return '(' . implode(' OR ', $queries) . ')';
        } else {
            return [
                'bool' => [
                    'should'               => $queries,
                    'minimum_should_match' => 1
                ]
            ];
        }
    }

    /**
     * @param SearchFilterInterface $filter
     */
    public function addFilter(SearchFilterInterface $filter)
    {
        $this->filters[] = $filter;
    }

    /**
     * @return SearchFilterInterface[]
     */
    private function getFilters()
    {
        return $this->filters;
    }
}
