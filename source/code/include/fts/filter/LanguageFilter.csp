<?php

namespace grn\fts\filter;

use grn\fts\exception;
use grn\fts\exception\AllResultException;
use grn\fts\Fields;
use grn\fts\FtsProduct;

class LanguageFilter implements SearchFilterInterface
{
    const ALL = 'all';
    const JAPANESE = 'ja';
    const ENGLISH = 'en';
    const ALL_CHINESE = 'zh';
    const TRADITIONAL_CHINESE = 'zh-tw';
    const SIMPLIFIED_CHINESE = 'zh-cn';

    /**
     * @var string
     */
    private $code;

    public static function getLanguageEnum()
    {
        return [
            self::ALL,
            self::JAPANESE,
            self::ENGLISH,
            self::ALL_CHINESE,
            self::TRADITIONAL_CHINESE,
            self::SIMPLIFIED_CHINESE
        ];
    }

    /**
     * @param string $code
     */
    public function __construct($code)
    {
        $this->code = $code;
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @throws exception\AllResultException
     * @return string
     */
    public function getQuery(FtsProduct $fts_product)
    {
        switch ($this->code) {
            case self::ALL_CHINESE:
                return (new TermsFilter(
                    Fields::language(),
                    [self::TRADITIONAL_CHINESE, self::SIMPLIFIED_CHINESE]
                ))->getQuery($fts_product);
                break;
            case self::JAPANESE:
            case self::ENGLISH:
            case self::TRADITIONAL_CHINESE:
            case self::SIMPLIFIED_CHINESE:
                return (new TermFilter(Fields::language(),
                    $this->code))->getQuery($fts_product);
            default:
                throw new AllResultException();
        }
    }
}
