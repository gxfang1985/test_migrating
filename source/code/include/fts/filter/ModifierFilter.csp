<?php

namespace grn\fts\filter;

use grn\fts\exception\AllResultException;
use grn\fts\exception\NoResultException;
use grn\fts\Fields;
use grn\fts\FtsProduct;

class ModifierFilter implements SearchFilterInterface
{
    /** @var string */
    private $modifier;

    /**
     * @param string $modifier
     */
    public function __construct($modifier)
    {
        $this->setModifier($modifier);
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return string
     * @throws AllResultException  Throws when a searched string is an empty string.
     * @throws NoResultException
     */
    public function getQuery(FtsProduct $fts_product)
    {
        $modifier = cb_trim($this->getModifier());
        if (strlen($modifier) === 0) {
            throw new AllResultException();
        }

        $modifier_ids = $this->getModifierIds($modifier);
        $manually_enter_sender_ids
            = $this->getManuallyEnterSenderIds($modifier);
        if (count($modifier_ids) === 0
            && count($manually_enter_sender_ids) === 0
        ) {
            throw new NoResultException();
        }

        foreach ($modifier_ids as $k => $id) {
            $modifier_ids[$k] = (int)$id;
        }

        foreach ($manually_enter_sender_ids as $k => $id) {
            $manually_enter_sender_ids[$k] = (int)$id;
        }

        if (count($modifier_ids) > 0 && count($manually_enter_sender_ids) > 0) {
            $filter = new OrFilter([
                new TermsFilter(Fields::manuallyEnterSender(),
                    $manually_enter_sender_ids),
                new AndFilter([
                    new NotExistsFilter(Fields::manuallyEnterSender()),
                    new TermsFilter(Fields::modifierId(), $modifier_ids)
                ])
            ]);
        } elseif (count($manually_enter_sender_ids) > 0) {
            $filter = new TermsFilter(Fields::manuallyEnterSender(),
                $manually_enter_sender_ids);
        } else {
            $filter = new AndFilter([
                new NotExistsFilter(Fields::manuallyEnterSender()),
                new TermsFilter(Fields::modifierId(), $modifier_ids)
            ]);
        }

        return $filter->getQuery($fts_product);
    }

    /**
     * @param string $modifier
     *
     * @return string[]
     */
    protected function getModifierIds($modifier)
    {
        require_once('grn/uum_util_search.csp');
        $util = \GRN_UumUtil_Search::getInstance();
        $members = $util->searchUsersInfo($modifier, false, []);
        $ids = [];
        foreach ($members as $member) {
            $ids[] = $member['_id'];
        }

        return $ids;
    }

    /**
     * @param string $modifier
     *
     * @return string[]
     */
    protected function getManuallyEnterSenderIds($modifier)
    {
        require_once('bulletin/BulletinFacade.csp');
        $facade = new \ BulletinFacade();
        $manually_enter_sender_ids
            = $facade->searchManuallyEnterSenderIdsBySenderName($modifier);

        return $manually_enter_sender_ids;
    }

    /**
     * @param string $modifier
     */
    private function setModifier($modifier)
    {
        $this->modifier = $modifier;
    }

    /**
     * @return string
     */
    private function getModifier()
    {
        return $this->modifier;
    }
}
