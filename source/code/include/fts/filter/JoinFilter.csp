<?php

namespace grn\fts\filter;

use grn\fts\Field;
use grn\fts\FtsProduct;

class JoinFilter implements SearchFilterInterface
{
    /**
     * @var Field
     */
    private $joinFromField;

    /**
     * @var Field
     */
    private $joinToField;

    /**
     * @var Field
     */
    private $filterField;

    /**
     * @var array|\string[]
     */
    private $values;

    /**
     * @param Field    $join_from_field
     * @param Field    $join_to_field
     * @param Field    $filter_field
     * @param string[] $values
     */
    public function __construct(
        Field $join_from_field,
        Field $join_to_field,
        Field $filter_field,
        array $values
    ) {
        $this->joinFromField = $join_from_field;
        $this->joinToField = $join_to_field;
        $this->filterField = $filter_field;
        $this->values = $values;
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return string
     * @throws \grn\fts\exception\NoResultException  throws when no documents are matched with this condition.
     * @throws \grn\fts\exception\AllResultException  throws when all documents are matched with this condition.
     */
    public function getQuery(FtsProduct $fts_product)
    {
        return sprintf(
            '{!join from=%s to=%s v="%s:(%s)"}',
            $this->joinFromField->solr(),
            $this->joinToField->solr(),
            $this->filterField->solr(),
            join(' OR ', $this->values)
        );
    }
}
