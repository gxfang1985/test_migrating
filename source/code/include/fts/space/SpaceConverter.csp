<?php

namespace grn\fts\space;

use grn\fts\DocumentConverterInterface;
use grn\fts\DocumentView;
use grn\fts\SearchDocumentInterface;
use grn\fts\SearchUtil;
use grn\space\data\bean\Space;
use grn\space\common\utility\IconUtility;

class SpaceConverter implements DocumentConverterInterface
{
    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\fts\DocumentView
     */
    public function convert(SearchDocumentInterface $document)
    {
        $spaceUtil = new SpaceUtil();
        $space = $spaceUtil->getSpace($document);
        IconUtility::constructionSpaceIconPath($space);

        $snippet = $this->getSnippet($document);
        $title = $space->getSpaceName();
        $titleIcon = $space->getDisplayIconPath();
        $url = $this->getUrl($space);
        $modifierView = $this->getModifierView($space);
        $modifiedTime = $space->getComponentModifyTimestamp();

        $documentView = new DocumentView($snippet, $title, $titleIcon, $url,
            $modifiedTime);
        $documentView->setModifierView($modifierView);

        return $documentView;
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getSnippet(SearchDocumentInterface $document)
    {
        $searchUtil = new SearchUtil();

        return $searchUtil->getSnippet($document);
    }

    /**
     *
     * @param \grn\space\data\bean\Space $space
     *
     * @return string
     */
    private function getUrl(Space $space)
    {
        $params = ['spid' => $space->getId()];

        return cb_format_url("space/top", $params);
    }

    /**
     *
     * @global \CB_LWContainer           $G_container_base ;
     *
     * @param \grn\space\data\bean\Space $space
     *
     * @return \grn\fts\ModifierView
     */
    private function getModifierView(Space $space)
    {
        $searchUtil = new SearchUtil();
        $spaceUser = $space->getModifier();
        $modifier = $this->getUser($spaceUser->getMemberID());

        return $searchUtil->getModifierView($modifier,
            $space->getModifierDisplayName());
    }

    /**
     * @param string $userId
     *
     * @return \CB_User
     */
    protected function getUser($userId)
    {
        global $G_container_base;
        /** @var \GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        return $uum->getUser($userId);
    }
}

