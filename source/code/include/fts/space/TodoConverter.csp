<?php

namespace grn\fts\space;

use grn\fts\DocumentConverterInterface;
use grn\fts\DocumentView;
use grn\fts\SearchDocumentInterface;
use grn\fts\SearchUtil;
use grn\fts\SearchConstants;
use grn\space\data\bean\Todo;

class TodoConverter implements DocumentConverterInterface
{
    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\fts\DocumentView
     */
    public function convert(SearchDocumentInterface $document)
    {
        $spaceUtil = new SpaceUtil();
        $space = $spaceUtil->getSpace($document);
        $todo = $spaceUtil->getTodo($document);

        $snippet = $this->getSnippet($document);
        $title = $todo->getTitle();
        $titleIcon = $spaceUtil->getTodoIconUrl();
        $url = $this->getUrl($document, $todo);
        $modifierView = $this->getModifierView($todo);
        $modifiedTime = $todo->getModifyTimestamp();
        $spaceView = $spaceUtil->getSpaceView($space);

        $documentView = new DocumentView($snippet, $title, $titleIcon, $url,
            $modifiedTime);
        $documentView->setModifierView($modifierView);
        $documentView->setSpaceView($spaceView);

        return $documentView;
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getSnippet(SearchDocumentInterface $document)
    {
        $searchUtil = new SearchUtil();

        return $searchUtil->getSnippet($document);
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param \grn\space\data\bean\Todo        $todo
     *
     * @return string
     */
    private function getUrl(SearchDocumentInterface $document, Todo $todo)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        $spaceId = substr($tokens[2], 1);
        $params = ['spid' => $spaceId, 'tdid' => $todo->getId()];

        return cb_format_url('space/application/todo/view', $params);
    }

    /**
     *
     * @global \CB_LWContainer          $G_container_base
     *
     * @param \grn\space\data\bean\Todo $todo
     *
     * @return \grn\fts\ModifierView
     */
    private function getModifierView(Todo $todo)
    {
        $searchUtil = new SearchUtil();
        $spaceUser = $todo->getModifier();
        $modifier = $this->getUser($spaceUser->getMemberID());

        return $searchUtil->getModifierView($modifier,
            $todo->getModifierDisplayName());
    }

    /**
     * @param string $userId
     *
     * @return \CB_User
     */
    protected function getUser($userId)
    {
        global $G_container_base;
        /** @var \GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        return $uum->getUser($userId);
    }
}
