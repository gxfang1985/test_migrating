<?php

namespace grn\fts\space;

use grn\fts\SearchConstants;
use grn\fts\SearchDocumentInterface;
use grn\fts\SpaceView;
use grn\space\data\bean\Space;
use grn\space\data\condition\SpaceSearchCondition;
use grn\space\logic\SpaceLogic;
use grn\space\logic\ThreadLogic;
use grn\space\logic\TodoLogic;
use grn\space\common\logic\CommentLogic;
use grn\space\common\logic\SpaceFileLogic;
use grn\space\common\utility\IconUtility;

require_once('fw/i18n.csp');

class SpaceUtil
{
    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\space\data\bean\Space
     */
    public function getSpace(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        assert('count($tokens) > 2');

        $spaceId = substr($tokens[2], 1);
        $spaceLogic = SpaceLogic::getInstance();

        return $spaceLogic->getSpace($spaceId,
            \CB_I18N::getInstance()->getCurrentLanguage());
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\space\data\bean\Thread
     */
    public function getThread(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        // The document ID is expected to this template "G.Aspace.S{SapceID}.D{DiscussionID}*"
        assert('count($tokens) > 3');

        $threadId = substr($tokens[3], 1);
        $threadLogic = ThreadLogic::getInstance();

        return $threadLogic->getThread($threadId);
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\space\data\bean\Todo
     */
    public function getTodo(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        // The document ID is expected to this template "G.Aspace.S{SapceID}.D{DiscussionID}.T{TodoID}*"
        assert('count($tokens) > 4');
        assert('substr($tokens[4], 0, 1) == "T"');

        $todoId = substr($tokens[4], 1);
        $todoLogic = TodoLogic::getInstance();

        return $todoLogic->getTodo($todoId);
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\space\common\data\bean\Comment
     */
    public function getComment(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        /*
         * The document ID exists 2 kinds.
         * 1. Discussion comments -> G.Aspace.S{SpaceID}.D{DiscussionID}.C{CommentID}*
         * 2. Todo comments       -> G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.C{CommentID}*
         */
        assert('count($tokens) > 4');

        $commentId = (substr($tokens[4], 0, 1) === 'C') ? substr($tokens[4],
            1) : substr($tokens[5], 1);
        $commentLogic = CommentLogic::getInstance();

        return $commentLogic->getComment($commentId);
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\space\common\data\bean\SpaceFile
     */
    public function getFile(SearchDocumentInterface $document)
    {
        assert('$document->isFile()');
        $fileId = $document->getFileId();
        $spaceFileLogic = SpaceFileLogic::getInstance();

        return $spaceFileLogic->getSpaceFile($fileId);
    }

    /**
     *
     * @return string
     */
    public function getDiscussionIconUrl()
    {
        return cb_get_app_path() . '/grn/image/cybozu/spaceDiscussion16.png';
    }

    /**
     *
     * @return string
     */
    public function getTodoIconUrl()
    {
        return cb_get_app_path() . '/grn/image/cybozu/spaceTodo16.png';
    }

    /**
     *
     * @param \grn\space\data\bean\Space $space
     *
     * @return \grn\fts\SpaceView
     */
    public function getSpaceView(Space $space)
    {
        $name = $space->getSpaceName();
        IconUtility::constructionSpaceIconPath($space);
        $iconUrl = $space->getDisplayIconPath();
        $spaceUrl = cb_format_url('space/top', ['spid' => $space->getId()]);

        return new SpaceView($name, $iconUrl, $spaceUrl);
    }

    /**
     *
     * @param int|null $expiration_type accepts three values
     *                                  NULL: Don't filter
     *                                  1: SpaceSearchCondition::SEARCH_SPACE_NOT_EXPIRED - Space is not expired
     *                                  2: SpaceSearchCondition::SEARCH_SPACE_EXPIRED - Space is expired
     *
     * @return array
     */
    public function getMySpaceIdList($expiration_type = null)
    {
        $spaceLogic = SpaceLogic::getInstance();

        $spaceSearchCondition = new SpaceSearchCondition();
        $spaceSearchCondition->setSearchParticipantUserId(cb_get_login_user()->getOID());
        $spaceSearchCondition->setOffset('0');
        $spaceSearchCondition->setLimit('18446744073709551615');
        $spaceSearchCondition->setLanguageCode(\CB_I18N::getInstance()
                                                       ->getCurrentLanguage());
        $spaceSearchCondition->setOrderSortArray([SpaceSearchCondition::SORT_COMPONENT_MODIFY_TIME_DESC]);
        if ($expiration_type) {
            $spaceSearchCondition->setSearchSpaceExpirationDate($expiration_type);
        }
        $spaceCollection = $spaceLogic->searchSpace($spaceSearchCondition);

        $spaceIds = [];
        foreach ($spaceCollection as $space) {
            /** @var \grn\space\data\bean\Space $space */
            $spaceIds[] = $space->getId();
        }

        return $spaceIds;
    }
}

