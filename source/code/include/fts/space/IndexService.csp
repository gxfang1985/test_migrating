<?php

namespace grn\fts\space;

use grn\fts\Fields;
use grn\fts\filter\AndFilter;
use grn\fts\filter\TermFilter;
use grn\fts\FtsProduct;
use grn\fts\SearchConstants;
use grn\fts\SearchEntry;
use grn\fts\SearchUtil;
use grn\fts\UpdateServiceContainer;
use grn\space\common\data\bean\Comment;
use grn\space\common\data\bean\SpaceFile;
use grn\space\data\bean\Space;
use grn\space\data\bean\SpaceMemo;
use grn\space\data\bean\Thread;
use grn\space\data\bean\Todo;
use grn\space\service\SpaceService;

class IndexService
{
    const ID_PREFIX = 'G.Aspace.';
    const SPACE_PREFIX = 'S';
    const DISCUSSION_PREFIX = 'D';
    const TODO_PREFIX = 'T';
    const COMMENT_PREFIX = 'C';
    const FILE_PREFIX = 'F';

    /** @var UpdateServiceContainer */
    private $updateServiceContainer = null;

    /**
     * IndexService constructor.
     *
     * @param FtsProduct|NULL $fts_product
     */
    public function __construct(FtsProduct $fts_product = null)
    {
        $this->updateServiceContainer
            = new UpdateServiceContainer($fts_product);
    }

    /**
     * @param \grn\space\data\bean\Space     $space
     * @param \grn\space\data\bean\SpaceMemo $spaceMemo
     */
    public function createSpaceIndex(Space $space, SpaceMemo $spaceMemo)
    {
        $id = self::createSpaceDocumentId($space->getId());
        $memo = SearchUtil::truncateLongText($spaceMemo->getMemo());
        if ($spaceMemo->isRichText()) {
            $memo = htmlspecialchars_decode(preg_replace('/&nbsp;/', ' ',
                strip_tags($memo)));
        }
        $searchEntry = $this->createSpaceSearchEntry($id,
            $memo,
            (int)$space->getModifierId(),
            (int)$space->getComponentModifyTimestamp(),
            (int)$space->getId());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @return \grn\fts\UpdateServiceContainer
     */
    protected function getUpdateServiceContainer()
    {
        return $this->updateServiceContainer;
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_space_space_memo and tab_grn_space_space.
     * @param string $forward
     */
    public function bulkCreateSpaceIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createSpaceDocumentId($row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $entries[] = $this->createSpaceSearchEntry($id, $row['col_memo'],
                (int)$modifierId, (int)$row['col_component_modify_timestamp'],
                (int)$row['_id']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \grn\space\data\bean\Space  $space
     * @param \grn\space\data\bean\Thread $thread
     *
     * @return void
     */
    public function createDiscussionIndex(Space $space, Thread $thread)
    {
        $id = self::createDiscussionDocumentId($space->getId(),
            $thread->getId());
        $content = SearchUtil::truncateLongText($thread->getContent());
        if ($thread->isRichText()) {
            $content = htmlspecialchars_decode(preg_replace('/&nbsp;/', ' ',
                strip_tags($content)));
        }
        $searchEntry = $this->createDiscussionSearchEntry($id,
            $thread->getTitle(),
            $content,
            (int)$thread->getModifierId(),
            (int)$thread->getComponentModifyTimestamp(),
            (int)$space->getId(),
            (int)$thread->getId());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_space_thread, tab_grn_space_category_hierarchy, tab_grn_space_category and tab_grn_space_application.
     * @param string $forward
     */
    public function bulkCreateDiscussionIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createDiscussionDocumentId($row['col_space'],
                $row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $entries[] = $this->createDiscussionSearchEntry($id,
                $row['col_title'], $row['col_content'], (int)$modifierId,
                (int)$row['col_component_modify_timestamp'],
                (int)$row['col_space'], (int)$row['_id']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \grn\space\data\bean\Space          $space
     * @param \grn\space\data\bean\Thread         $thread
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @return void
     */
    public function createDiscussionCommentIndex(
        Space $space,
        Thread $thread,
        Comment $comment
    ) {
        $id = self::createDiscussionCommentDocumentId($space->getId(),
            $thread->getId(), $comment->getId());
        $content = SearchUtil::truncateLongText($comment->getContent());
        if ($comment->isRichText()) {
            $content = htmlspecialchars_decode(preg_replace('/&nbsp;/', ' ',
                strip_tags($content)));
        }
        $searchEntry = $this->createDiscussionCommentSearchEntry($id,
            $content,
            (int)$comment->getModifierId(),
            (int)$comment->getModifyTimestamp(),
            (int)$space->getId(),
            (int)$thread->getId(),
            (int)$comment->getId());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_space_comment, tab_grn_space_thread_comment, tab_grn_space_thread, tab_grn_space_category_hierarchy, tab_grn_space_category and tab_grn_space_application.
     * @param string $forward
     */
    public function bulkCreateDiscussionCommentIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createDiscussionCommentDocumentId($row['col_space'],
                $row['col_thread'], $row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $entries[] = $this->createDiscussionCommentSearchEntry($id,
                $row['col_content'], (int)$modifierId,
                (int)$row['col_modify_timestamp'], (int)$row['col_space'],
                (int)$row['col_thread'], (int)$row['_id']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \grn\space\data\bean\Space  $space
     * @param \grn\space\data\bean\Thread $thread
     * @param \grn\space\data\bean\Todo   $todo
     *
     * @return void
     */
    public function createTodoIndex(Space $space, Thread $thread, Todo $todo)
    {
        $id = self::createTodoDocumentId($space->getId(),
            $thread->getId(), $todo->getId());
        $content
            = SearchUtil::truncateLongText($todo->getContent());
        $searchEntry = $this->createTodoSearchEntry($id,
            $todo->getTitle(),
            $content,
            (int)$todo->getModifierId(),
            (int)$todo->getModifyTimestamp(),
            (int)$space->getId(),
            (int)$thread->getId(),
            (int)$todo->getId());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_space_todo, tab_grn_space_todo_thread, tab_grn_space_thread, tab_grn_space_category_hierarchy, tab_grn_space_category and tab_grn_space_space_application.
     * @param string $forward
     */
    public function bulkCreateTodoIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createTodoDocumentId($row['col_space'],
                $row['col_thread'], $row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $entries[] = $this->createTodoSearchEntry($id, $row['col_title'],
                $row['col_content'], (int)$modifierId,
                (int)$row['col_modify_timestamp'], (int)$row['col_space'],
                (int)$row['col_thread'], (int)$row['_id']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \grn\space\data\bean\Space          $space
     * @param \grn\space\data\bean\Thread         $thread
     * @param \grn\space\data\bean\Todo           $todo
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @return void
     */
    public function createTodoCommentIndex(
        Space $space,
        Thread $thread,
        Todo $todo,
        Comment $comment
    ) {
        $id = self::createTodoCommentDocumentId($space->getId(),
            $thread->getId(), $todo->getId(), $comment->getId());
        $content = SearchUtil::truncateLongText($comment->getContent());
        if ($comment->isRichText()) {
            $content = htmlspecialchars_decode(preg_replace('/&nbsp;/', ' ',
                strip_tags($content)));
        }
        $searchEntry = $this->createTodoCommentSearchEntry($id,
            $content,
            (int)$comment->getModifierId(),
            (int)$comment->getModifyTimestamp(),
            (int)$space->getId(),
            (int)$thread->getId(),
            (int)$todo->getId(),
            (int)$comment->getId());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc tab_grn_space_comment, tab_grn_space_todo_comment, tab_grn_space_todo,  tab_grn_space_todo_thread, tab_grn_space_thread, tab_grn_space_category_hierarchy, tab_grn_space_category and tab_grn_space_space_application.
     * @param string $forward
     */
    public function bulkCreateTodoCommentIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createTodoCommentDocumentId($row['col_space'],
                $row['col_thread'], $row['col_todo'], $row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $entries[] = $this->createTodoCommentSearchEntry($id,
                $row['col_content'], (int)$modifierId,
                (int)$row['col_modify_timestamp'], (int)$row['col_space'],
                (int)$row['col_thread'], (int)$row['col_todo'],
                (int)$row['_id']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \grn\space\data\bean\Space               $space
     * @param \grn\space\common\data\bean\SpaceFile    $spaceFile
     * @param \grn\space\data\bean\Thread              $thread
     * @param \grn\space\data\bean\Todo|null           $todo
     * @param \grn\space\common\data\bean\Comment|null $comment
     *
     * @return void
     */
    public function createFileIndex(
        Space $space,
        SpaceFile $spaceFile,
        Thread $thread,
        Todo $todo = null,
        Comment $comment = null
    ) {
        $todoId = (is_null($todo)) ? null : (int)$todo->getId();
        $commentId = (is_null($comment)) ? null
            : (int)$comment->getId();
        $id = self::createFileDocumentId($space->getId(),
            $thread->getId(), $todoId, $commentId, $spaceFile->getId());
        $spaceFileObj = $spaceFile->getGrnSpaceFileObject();
        $spaceFileBody = $spaceFileObj->getCurrentBody();
        $modifier = $spaceFileObj->get('modifier');
        $modifierId = $modifier ? $modifier->getOID()
            : SearchConstants::DELETED_USER_ID;
        $fileIdentifier = defined('ON_FOREST')
            ? $spaceFileBody->get('blob') : $spaceFileBody->getPath();
        $searchEntry = $this->createFileSearchEntry($id,
            $fileIdentifier,
            $spaceFileBody->get('name'),
            (int)$modifierId,
            (int)$spaceFileObj->get('mtime')->unix_ts,
            (int)$space->getId(),
            (int)$thread->getId(),
            $todoId,
            $commentId,
            (int)$spaceFileObj->getOID());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from space tables.
     * @param string $forward
     */
    public function bulkCreateFileIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $todoId = is_null($row['col_todo']) ? null
                : (int)$row['col_todo'];
            $commentId = is_null($row['col_comment']) ? null
                : (int)$row['col_comment'];
            $id = self::createFileDocumentId($row['col_space'],
                $row['col_thread'], $todoId, $commentId, $row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $fileIdentifier = defined('ON_FOREST')
                ? $row['col_blob']
                : SearchUtil::getFilePath('space', 'grn_space_filebody',
                    $row['fileId']);
            $entries[] = $this->createFileSearchEntry($id, $fileIdentifier,
                $row['col_name'], (int)$modifierId, (int)$row['col_mtime'],
                (int)$row['col_space'], (int)$row['col_thread'], $todoId,
                $commentId, (int)$row['_id']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \grn\space\data\bean\Space $space
     * @param string                     $operationUserId
     *
     * @return void
     */
    public function updateSpaceIndex(Space $space, $operationUserId)
    {
        $spaceService = SpaceService::getInstance();
        $spaceMemo = $spaceService->getSpaceMemo($space->getId(),
            $operationUserId);
        $this->createSpaceIndex($space, $spaceMemo);
    }

    /**
     * @param \grn\space\data\bean\Space  $space
     * @param \grn\space\data\bean\Thread $thread
     */
    public function updateDiscussionIndex(Space $space, Thread $thread)
    {
        $this->createDiscussionIndex($space, $thread);
    }

    /**
     * @param \grn\space\data\bean\Space  $space
     * @param \grn\space\data\bean\Thread $thread
     * @param \grn\space\data\bean\Todo   $todo
     */
    public function updateTodoIndex(Space $space, Thread $thread, Todo $todo)
    {
        $this->createTodoIndex($space, $thread, $todo);
    }

    /**
     * @param string                                $spaceId
     * @param string                                $threadId
     * @param string|null                           $todoId
     * @param \grn\space\common\data\bean\SpaceFile $spaceFile
     */
    public function updateFileIndex(
        $spaceId,
        $threadId,
        $todoId,
        SpaceFile $spaceFile
    ) {
        SearchUtil::validateIds([$spaceId, $threadId, $todoId]);
        $id = self::createFileDocumentId($spaceId,
            $threadId, $todoId, null, $spaceFile->getId());
        $spaceFileObj = $spaceFile->getGrnSpaceFileObject();
        $spaceFileBody = $spaceFileObj->getCurrentBody();
        $todoId = (is_null($todoId)) ? null : (int)$todoId;
        $commentId = null;
        $modifier = $spaceFileObj->get('modifier');
        $modifierId = $modifier ? $modifier->getOID()
            : SearchConstants::DELETED_USER_ID;
        $fileIdentifier = defined('ON_FOREST')
            ? $spaceFileBody->get('blob') : $spaceFileBody->getPath();
        $searchEntry = $this->createFileSearchEntry($id,
            $fileIdentifier,
            $spaceFileBody->get('name'),
            (int)$modifierId,
            (int)$spaceFileObj->get('mtime')->unix_ts,
            (int)$spaceId,
            (int)$threadId,
            $todoId,
            $commentId,
            (int)$spaceFileObj->getOID());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param string $spaceId
     */
    public function deleteIndexBySpaceId($spaceId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_SPACE),
            new TermFilter(Fields::spaceId(), $spaceId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $discussionId
     */
    public function deleteIndexByDiscussionId($discussionId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_SPACE),
            new TermFilter(Fields::discussionId(), $discussionId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $todoId
     */
    public function deleteIndexByTodoId($todoId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_SPACE),
            new TermFilter(Fields::todoId(), $todoId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $commentId
     */
    public function deleteIndexByCommentId($commentId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_SPACE),
            new TermFilter(Fields::commentId(), $commentId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $fileId
     */
    public function deleteIndexByFileId($fileId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_SPACE),
            new TermFilter(Fields::fileId(), $fileId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $id
     * @param string $data
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $spaceId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createSpaceSearchEntry(
        $id,
        $data,
        $modifierId,
        $mtime,
        $spaceId
    ) {
        $searchEntry = new SearchEntry($id);
        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::spaceId(), $spaceId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_SPACE);
        $searchEntry->setType('space.space');

        return $searchEntry;
    }

    /**
     * @param string $id
     * @param string $title
     * @param string $data
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $spaceId
     * @param int    $discussionId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createDiscussionSearchEntry(
        $id,
        $title,
        $data,
        $modifierId,
        $mtime,
        $spaceId,
        $discussionId
    ) {
        $searchEntry = new SearchEntry($id);
        $searchEntry->addValue(Fields::title(), $title);
        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::spaceId(), $spaceId);
        $searchEntry->addValue(Fields::discussionId(), $discussionId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_SPACE);
        $searchEntry->setType('space.discussion');

        return $searchEntry;
    }

    /**
     * @param string $id
     * @param string $data
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $spaceId
     * @param int    $discussionId
     * @param int    $commentId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createDiscussionCommentSearchEntry(
        $id,
        $data,
        $modifierId,
        $mtime,
        $spaceId,
        $discussionId,
        $commentId
    ) {
        $searchEntry = new SearchEntry($id);
        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::spaceId(), $spaceId);
        $searchEntry->addValue(Fields::discussionId(), $discussionId);
        $searchEntry->addValue(Fields::commentId(), $commentId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_SPACE);
        $searchEntry->setType('space.discussionComment');

        return $searchEntry;
    }

    /**
     * @param string $id
     * @param string $title
     * @param string $data
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $spaceId
     * @param int    $discussionId
     * @param int    $todoId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createTodoSearchEntry(
        $id,
        $title,
        $data,
        $modifierId,
        $mtime,
        $spaceId,
        $discussionId,
        $todoId
    ) {
        $searchEntry = new SearchEntry($id);
        $searchEntry->addValue(Fields::title(), $title);
        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::spaceId(), $spaceId);
        $searchEntry->addValue(Fields::discussionId(), $discussionId);
        $searchEntry->addValue(Fields::todoId(), $todoId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_SPACE);
        $searchEntry->setType('space.todo');

        return $searchEntry;
    }

    /**
     * @param string $id
     * @param string $data
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $spaceId
     * @param int    $discussionId
     * @param int    $todoId
     * @param int    $commentId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createTodoCommentSearchEntry(
        $id,
        $data,
        $modifierId,
        $mtime,
        $spaceId,
        $discussionId,
        $todoId,
        $commentId
    ) {
        $searchEntry = new SearchEntry($id);
        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::spaceId(), $spaceId);
        $searchEntry->addValue(Fields::discussionId(), $discussionId);
        $searchEntry->addValue(Fields::todoId(), $todoId);
        $searchEntry->addValue(Fields::commentId(), $commentId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_SPACE);
        $searchEntry->setType('space.todoComment');

        return $searchEntry;
    }

    /**
     * @param string   $id
     * @param string   $fileIdentifier
     * @param string   $name
     * @param int      $modifierId
     * @param int      $mtime
     * @param int      $spaceId
     * @param int      $discussionId
     * @param int|null $todoId
     * @param int|null $commentId
     * @param int      $fileId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createFileSearchEntry(
        $id,
        $fileIdentifier,
        $name,
        $modifierId,
        $mtime,
        $spaceId,
        $discussionId,
        $todoId,
        $commentId,
        $fileId
    ) {
        $searchEntry = SearchUtil::createBaseFileEntry($id, $name,
            $fileIdentifier);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::spaceId(), $spaceId);
        $searchEntry->addValue(Fields::discussionId(), $discussionId);
        if ( ! is_null($todoId)) {
            $searchEntry->addValue(Fields::todoId(), $todoId);
        }
        if ( ! is_null($commentId)) {
            $searchEntry->addValue(Fields::commentId(), $commentId);
        }
        $searchEntry->addValue(Fields::fileId(), $fileId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_SPACE);
        $searchEntry->setType('space.file');

        return $searchEntry;
    }

    /**
     * @param $spaceId
     *
     * @return string   "G.Aspace.S{$spaceId}"
     */
    private static function createSpaceDocumentId($spaceId)
    {
        return sprintf("%s%s%u", self::ID_PREFIX, self::SPACE_PREFIX, $spaceId);
    }

    /**
     * @param $spaceId
     * @param $discussionId
     *
     * @return string   "G.Aspace.S{$spaceId}.D{$discussionId}"
     */
    private static function createDiscussionDocumentId($spaceId, $discussionId)
    {
        return self::createSpaceDocumentId($spaceId) .
               sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                   self::DISCUSSION_PREFIX, $discussionId);
    }

    /**
     * @param $spaceId
     * @param $discussionId
     * @param $commentId
     *
     * @return string   "G.Aspace.S{$spaceId}.D{$discussionId}.C{$commentId}"
     */
    private static function createDiscussionCommentDocumentId(
        $spaceId,
        $discussionId,
        $commentId
    ) {
        return self::createDiscussionDocumentId($spaceId, $discussionId) .
               sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                   self::COMMENT_PREFIX, $commentId);
    }

    /**
     * @param $spaceId
     * @param $discussionId
     * @param $todoId
     *
     * @return string   "G.Aspace.S{$spaceId}.D{$discussionId}.T{$todoId}"
     */
    private static function createTodoDocumentId(
        $spaceId,
        $discussionId,
        $todoId
    ) {
        return self::createDiscussionDocumentId($spaceId, $discussionId) .
               sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                   self::TODO_PREFIX, $todoId);
    }

    /**
     * @param $spaceId
     * @param $discussionId
     * @param $todoId
     * @param $commentId
     *
     * @return string   "G.Aspace.S{$spaceId}.D{$discussionId}.T{$todoId}.C{$commentId}"
     */
    private static function createTodoCommentDocumentId(
        $spaceId,
        $discussionId,
        $todoId,
        $commentId
    ) {
        return self::createTodoDocumentId($spaceId, $discussionId, $todoId) .
               sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                   self::COMMENT_PREFIX, $commentId);
    }

    /**
     * @param $spaceId
     * @param $discussionId
     * @param $todoId
     * @param $commentId
     * @param $fileId
     *
     * @return string
     * "G.Aspace.S{$spaceId}.D{$discussionId}.T{$todoId}.C{$commentId}.F{$fileId}" or
     * "G.Aspace.S{$spaceId}.D{$discussionId}.T{$todoId}.F{$fileId}" or
     * "G.Aspace.S{$spaceId}.D{$discussionId}.C{$commentId}.F{$fileId}" or
     * "G.Aspace.S{$spaceId}.D{$discussionId}.F{$fileId}"
     */
    private static function createFileDocumentId(
        $spaceId,
        $discussionId,
        $todoId,
        $commentId,
        $fileId
    ) {
        if (is_null($todoId) && is_null($commentId)) {
            $id = self::createDiscussionDocumentId($spaceId, $discussionId);
        } elseif (is_null($todoId) && ! is_null($commentId)) {
            $id = self::createDiscussionCommentDocumentId($spaceId,
                $discussionId, $commentId);
        } elseif ( ! is_null($todoId) && is_null($commentId)) {
            $id = self::createTodoDocumentId($spaceId, $discussionId, $todoId);
        } else {
            $id = self::createTodoCommentDocumentId($spaceId, $discussionId,
                $todoId, $commentId);
        }

        return $id . sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                self::FILE_PREFIX, $fileId);
    }
}
