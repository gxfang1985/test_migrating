<?php

namespace grn\fts\space;

use grn\fts\DocumentConverterInterface;
use grn\fts\DocumentView;
use grn\fts\SearchDocumentInterface;
use grn\fts\SearchUtil;
use grn\fts\SearchConstants;
use grn\space\common\data\bean\Comment;

class CommentConverter implements DocumentConverterInterface
{
    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\fts\DocumentView
     */
    public function convert(SearchDocumentInterface $document)
    {
        $spaceUtil = new SpaceUtil();
        $space = $spaceUtil->getSpace($document);
        $comment = $spaceUtil->getComment($document);

        $snippet = $this->getSnippet($document);
        $title = $this->getCommentTitle($document, $spaceUtil);
        $titleIcon = $this->getCommentIconUrl($document, $spaceUtil);
        $url = $this->getUrl($document, $comment);
        $modifierView = $this->getModifierView($comment);
        $modifiedTime = $comment->getModifyTimestamp();
        $spaceView = $spaceUtil->getSpaceView($space);

        $documentView = new DocumentView($snippet, $title, $titleIcon, $url,
            $modifiedTime);
        $documentView->setModifierView($modifierView);
        $documentView->setSpaceView($spaceView);

        return $documentView;
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getSnippet(SearchDocumentInterface $document)
    {
        $searchUtil = new SearchUtil();

        return $searchUtil->getSnippet($document);
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param SpaceUtil                        $spaceUtil
     *
     * @return string
     */
    private function getCommentTitle(
        SearchDocumentInterface $document,
        SpaceUtil $spaceUtil
    ) {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        /*
         * The document ID exists 2 kinds.
         * 1. Discussion comments -> G.Aspace.S{SpaceID}.D{DiscussionID}.C{CommentID}
         * 2. Todo comments       -> G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.C{CommentID}
         */
        if (count($tokens) === 5) {
            $thread = $spaceUtil->getThread($document);

            return $thread->getTitle();
        } else {
            $todo = $spaceUtil->getTodo($document);

            return $todo->getTitle();
        }
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param SpaceUtil                        $spaceUtil
     *
     * @return string
     */
    private function getCommentIconUrl(
        SearchDocumentInterface $document,
        SpaceUtil $spaceUtil
    ) {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());

        /*
         * The document ID exists 2 kinds.
         * 1. Discussion comments -> G.Aspace.S{SpaceID}.D{DiscussionID}.C{CommentID}
         * 2. Todo comments       -> G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.C{CommentID}
         */

        return (count($tokens) === 5) ? $spaceUtil->getDiscussionIconUrl()
            : $spaceUtil->getTodoIconUrl();
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface    $document
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @return string
     */
    private function getUrl(SearchDocumentInterface $document, Comment $comment)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        $spaceId = substr($tokens[2], 1);
        if (count($tokens) === 5) {
            $threadId = substr($tokens[3], 1);
            $params = ['spid' => $spaceId];
            $fragments = "tid={$threadId}&cmno={$comment->getCommentNo()}";

            return cb_format_url('space/application/discussion/index', $params,
                $fragments);
        } else {
            $todoId = substr($tokens[4], 1);
            $params = [
                'spid' => $spaceId,
                'tdid' => $todoId,
                'cmno' => $comment->getCommentNo()
            ];

            return cb_format_url('space/application/todo/view', $params);
        }
    }

    /**
     *
     * @global \CB_LWContainer                    $G_container_base
     *
     * @param \grn\space\common\data\bean\Comment $comment
     *
     * @return \grn\fts\ModifierView
     */
    private function getModifierView(Comment $comment)
    {
        $searchUtil = new SearchUtil();
        $spaceUser = $comment->getModifier();
        $modifier = $this->getUser($spaceUser->getMemberID());

        return $searchUtil->getModifierView($modifier,
            $comment->getModifierDisplayName());
    }

    /**
     * @param string $userId
     *
     * @return \CB_User
     */
    protected function getUser($userId)
    {
        global $G_container_base;
        /** @var \GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        return $uum->getUser($userId);
    }
}
