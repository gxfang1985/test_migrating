<?php

namespace grn\fts\space;

use grn\fts\AccessControllerInterface;
use grn\fts\SearchConstants;
use grn\fts\SearchDocumentInterface;
use grn\space\common\data\bean\Authority;
use grn\space\service\SpaceService;
use grn\space\common\exception\GrnDataNotFoundException;

class AccessController implements AccessControllerInterface
{
    /** @var string */
    private $accessMode = Authority::AUTHORITY_CODE_READ_SUMMARY;

    /**
     * @param $accessMode
     */
    public function __construct($accessMode)
    {
        // $accessMode is Authority::AUTHORITY_CODE_READ_SUMMARY or Authority::AUTHORITY_CODE_READ_DETAIL
        if (strlen($accessMode) > 0) {
            $this->setAccessMode($accessMode);
        }
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param \CB_User                         $user
     *
     * @return bool
     */
    public function isAccessible(
        SearchDocumentInterface $document,
        \CB_User $user
    ) {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        $spaceId = substr($tokens[2], 1);
        // 実体のチェック
        $util = new SpaceUtil();
        try {
            $space = $util->getSpace($document);
        } catch (GrnDataNotFoundException $e) {
            // スペースがない
            return false;
        }

        if ($space->isExpired()) {
            return false;
        }

        if (count($tokens) > 3 && substr($tokens[3], 0, 1) === 'D') {
            try {
                $util->getThread($document);
            } catch (GrnDataNotFoundException $e) {
                // スレッドがない
                return false;
            }
            if (count($tokens) > 4 && substr($tokens[4], 0, 1) === 'C') {
                try {
                    $util->getComment($document);
                } catch (GrnDataNotFoundException $e) {
                    // コメントがない
                    return false;
                }
            }
        }
        if (count($tokens) > 4 && substr($tokens[4], 0, 1) === 'T') {
            try {
                $util->getTodo($document);
            } catch (GrnDataNotFoundException $e) {
                // Todoがない
                return false;
            }
            if (count($tokens) > 5 && substr($tokens[5], 0, 1) === 'C') {
                try {
                    $util->getComment($document);
                } catch (GrnDataNotFoundException $e) {
                    // コメントがない
                    return false;
                }
            }
        }
        if ($document->isFile()) {
            try {
                $util->getFile($document);
            } catch (GrnDataNotFoundException $e) {
                // ファイルがない
                return false;
            }
        }
        // スペースのアクセス権評価
        $spaceService = SpaceService::getInstance();

        return $spaceService->hasSpaceAccessControl($this->getAccessMode(),
            $spaceId, $user->getOID());
    }

    /**
     * @return string
     */
    public function getAccessMode()
    {
        assert('$this->accessMode === "read_summary" || $this->accessMode === "read_detail"');

        return $this->accessMode;
    }

    /**
     * @param string $accessMode
     */
    public function setAccessMode($accessMode)
    {
        $this->accessMode = $accessMode;
    }
}

