<?php

namespace grn\fts\space;

use grn\fts\DocumentConverterInterface;
use grn\fts\DocumentView;
use grn\fts\SearchDocumentInterface;
use grn\fts\SearchUtil;
use grn\fts\SearchConstants;
use grn\fts\FileView;
use grn\fts\FileIcon;
use grn\space\common\data\bean\SpaceFile;
use grn\space\common\logic\CommentLogic;

require_once('grn/file.csp');

class FileConverter implements DocumentConverterInterface
{
    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\fts\DocumentView
     */
    public function convert(SearchDocumentInterface $document)
    {
        $spaceUtil = new SpaceUtil();
        $space = $spaceUtil->getSpace($document);
        $spaceFile = $spaceUtil->getFile($document);

        $snippet = $this->getSnippet($document);
        $title = $this->getTitle($document, $spaceUtil);
        $titleIcon = $this->getTitleIcon($document, $spaceUtil);
        $url = $this->getUrl($document);
        $modifierView = $this->getModifierView($spaceFile);
        $modifiedTime = $spaceFile->getModifyTimestamp();
        $fileView = $this->getFileView($document, $spaceFile);
        $spaceView = $spaceUtil->getSpaceView($space);

        $highlights = $document->getFileNameHighlights();
        if ( ! is_null($highlights)) {
            $fileView->setSnippetTitle($highlights[0]);
        }

        $documentView = new DocumentView($snippet, $title, $titleIcon, $url,
            $modifiedTime);
        $documentView->setModifierView($modifierView);
        $documentView->setFileView($fileView);
        $documentView->setSpaceView($spaceView);

        return $documentView;
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getSnippet(SearchDocumentInterface $document)
    {
        $util = new SearchUtil();

        return $util->getSnippet($document);
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param SpaceUtil                        $spaceUtil
     *
     * @return string
     */
    private function getTitle(
        SearchDocumentInterface $document,
        SpaceUtil $spaceUtil
    ) {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        /*
         * The document ID exists 4 kinds.
         * 1. G.Aspace.S{SpaceID}.D{DiscussionID}.F{FileID}
         * 2. G.Aspace.S{SpaceID}.D{DiscussionID}.C{CommentID}.F{FileID}
         * 3. G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.F{FileID}
         * 4. G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.C{CommentID}.F{FileID}
         */
        if (count($tokens) === 5
            || (count($tokens) === 6
                && substr($tokens[4], 0, 1) === 'C')
        ) {
            // attached to Discussion
            $thread = $spaceUtil->getThread($document);

            return $thread->getTitle();
        } elseif ((count($tokens) === 6 && substr($tokens[4], 0, 1) === 'T')
                  || count($tokens) === 7
        ) {
            // attached to Todo
            $todo = $spaceUtil->getTodo($document);

            return $todo->getTitle();
        } else {
            // Invalid ID
            assert('FALSE');
        }
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param SpaceUtil                        $spaceUtil
     *
     * @return string
     */
    private function getTitleIcon(
        SearchDocumentInterface $document,
        SpaceUtil $spaceUtil
    ) {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        /*
         * The document ID exists 4 kinds.
         * 1. G.Aspace.S{SpaceID}.D{DiscussionID}.F{FileID}
         * 2. G.Aspace.S{SpaceID}.D{DiscussionID}.C{CommentID}.F{FileID}
         * 3. G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.F{FileID}
         * 4. G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.C{CommentID}.F{FileID}
         */
        if (count($tokens) === 5
            || (count($tokens) === 6
                && substr($tokens[4], 0, 1) === 'C')
        ) {
            // attached to Discussion
            return $spaceUtil->getDiscussionIconUrl();
        } elseif ((count($tokens) === 6 && substr($tokens[4], 0, 1) === 'T')
                  || count($tokens) === 7
        ) {
            // attached to Todo
            return $spaceUtil->getTodoIconUrl();
        } else {
            // Invalid ID
            assert('FALSE');
        }
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getUrl(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        /*
         * The document ID exists 4 kinds.
         * 1. G.Aspace.S{SpaceID}.D{DiscussionID}.F{FileID}
         * 2. G.Aspace.S{SpaceID}.D{DiscussionID}.C{CommentID}.F{FileID}
         * 3. G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.F{FileID}
         * 4. G.Aspace.S{SpaceID}.D{DiscussionID}.T{TodoID}.C{CommentID}.F{FileID}
         */
        assert('count($tokens) > 4');
        $spaceId = substr($tokens[2], 1);
        if (count($tokens) === 5) {
            $threadId = substr($tokens[3], 1);
            $params = ['spid' => $spaceId];
            $fragment = "tid={$threadId}";

            return cb_format_url("space/application/discussion/index", $params,
                $fragment);
        } elseif (count($tokens) === 6) {
            if (substr($tokens[4], 0, 1) === 'C') {
                $threadId = substr($tokens[3], 1);
                $commentId = substr($tokens[4], 1);
                $commentLogic = CommentLogic::getInstance();
                $comment = $commentLogic->getComment($commentId);
                $params = ['spid' => $spaceId];
                $fragments
                    = "tid={$threadId}&cmno={$comment->getCommentNo()}";

                return cb_format_url('space/application/discussion/index',
                    $params, $fragments);
            } else {
                $todoId = substr($tokens[4], 1);
                $params = ['spid' => $spaceId, 'tdid' => $todoId];

                return cb_format_url('space/application/todo/view', $params);
            }
        } elseif (count($tokens) === 7) {
            $todoId = substr($tokens[4], 1);
            $commentId = substr($tokens[5], 1);
            $commentLogic = CommentLogic::getInstance();
            $comment = $commentLogic->getComment($commentId);
            $params = [
                'spid' => $spaceId,
                'tdid' => $todoId,
                'cmno' => $comment->getCommentNo()
            ];

            return cb_format_url('space/application/todo/view', $params);
        } else {
            // Invalid ID
            assert('FALSE');
        }
    }

    /**
     *
     * @param \grn\space\common\data\bean\SpaceFile $spaceFile
     *
     * @return \grn\fts\ModifierView
     */
    private function getModifierView(SpaceFile $spaceFile)
    {
        $searchUtil = new SearchUtil();
        $spaceUser = $spaceFile->getModifier();
        $modifier = $this->getUser($spaceUser->getMemberID());

        return $searchUtil->getModifierView($modifier,
            $spaceFile->getModifierDisplayName());
    }

    /**
     * @param string $userId
     *
     * @return \CB_User
     */
    protected function getUser($userId)
    {
        global $G_container_base;
        /** @var \GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');

        return $uum->getUser($userId);
    }

    /**
     *
     * @param \grn\fts\SearchDocumentInterface      $document
     * @param \grn\space\common\data\bean\SpaceFile $spaceFile
     *
     * @return \grn\fts\FileView
     */
    private function getFileView(
        SearchDocumentInterface $document,
        SpaceFile $spaceFile
    ) {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        $spaceId = substr($tokens[2], 1);
        $threadId = substr($tokens[3], 1);
        $file = $spaceFile->getGrnSpaceFileObject();
        $fileBody = $file->getCurrentBody();
        $downloadUrl = $this->getDownloadUrl($file, $fileBody, $spaceId,
            $threadId);

        return new FileView($fileBody->get('name'),
            FileIcon::getIconUrl($fileBody), $downloadUrl,
            $fileBody->get('size'));
    }

    /**
     *
     * @param \GRN_File     $file
     * @param \GRN_FileBody $fileBody
     * @param string        $spaceId
     * @param string        $threadId
     *
     * @return string
     */
    private function getDownloadUrl(
        \GRN_File $file,
        \GRN_FileBody $fileBody,
        $spaceId,
        $threadId
    ) {
        return cb_format_url('space/file_download', [
            'fid'  => $file->getOID(),
            'spid' => $spaceId,
            'tid'  => $threadId
        ], null, $fileBody->get('name'));
    }
}

