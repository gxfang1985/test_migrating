<?php

namespace grn\fts;


class FullIndexProgressInfo
{
    const COMMAND_INFO = "commandInfo";
    const START_ID = "startId";
    const USER_TABLE_NUM = "userTableNum";
    const INITIAL_START_ID = 1;

    /** @var array */
    private $commandInfo;
    /** @var int */
    private $startId;
    /** @var int|null */
    private $userTableNum;

    private function __construct($commandInfo, $startId, $userTableNum)
    {
        $this->commandInfo = $commandInfo;
        $this->startId = $startId;
        $this->userTableNum = $userTableNum;
    }

    /**
     * @param array    $commandInfo
     * @param int      $startId
     * @param int|null $userTableNum
     *
     * @return FullIndexProgressInfo
     */
    public static function valueOf($commandInfo, $startId, $userTableNum)
    {
        return new self(
            $commandInfo,
            $startId,
            $userTableNum
        );
    }

    /**
     * @return FullIndexProgressInfo
     */
    public static function init()
    {
        return new self(
            [
                BulkCommandKeys::BULLETIN_ARTICLE         => true,
                BulkCommandKeys::BULLETIN_FOLLOW          => true,
                BulkCommandKeys::BULLETIN_FILE            => true,
                BulkCommandKeys::MESSAGE_FOLDER_RELATION  => true,
                BulkCommandKeys::MESSAGE_MESSAGE          => true,
                BulkCommandKeys::MESSAGE_FOLLOW           => true,
                BulkCommandKeys::MESSAGE_FILE             => true,
                BulkCommandKeys::CABINET_FILE             => true,
                BulkCommandKeys::SPACE_SPACE              => true,
                BulkCommandKeys::SPACE_DISCUSSION         => true,
                BulkCommandKeys::SPACE_TODO               => true,
                BulkCommandKeys::SPACE_DISCUSSION_COMMENT => true,
                BulkCommandKeys::SPACE_TODO_COMMENT       => true,
                BulkCommandKeys::SPACE_FILE               => true,
                BulkCommandKeys::MAIL_MESSAGE             => true,
                BulkCommandKeys::MAIL_SEND_FILE           => true,
                BulkCommandKeys::MAIL_RECEIVE_FILE        => true
            ],
            self::INITIAL_START_ID,
            null
        );
    }

    /**
     * @param string $applicationName
     *
     * @return FullIndexProgressInfo
     */
    public static function initWithTargetApplication($applicationName)
    {
        $commandInfo = [];
        $commandListOfApp = BulkCommandKeys::getAppCommands($applicationName);
        foreach (BulkCommandKeys::getArrayInOrder() as $command) {
            $commandInfo[$command] = in_array($command, $commandListOfApp);
        }

        return new self($commandInfo, self::INITIAL_START_ID, null);
    }

    /**
     * @param string[] $documents
     *
     * @return FullIndexProgressInfo
     */
    public static function initWithTargetDocuments(array $documents)
    {
        $commandInfo = [];
        $commandListOfDocuments
            = BulkCommandKeys::getDocumentsCommands($documents);
        foreach (BulkCommandKeys::getArrayInOrder() as $command) {
            $commandInfo[$command] = in_array($command,
                $commandListOfDocuments);
        }

        return new self($commandInfo, self::INITIAL_START_ID, null);
    }

    /**
     * @param $command
     *
     * @return boolean
     */
    public function isCreateIndexes($command)
    {
        return $this->commandInfo[$command];
    }

    /**
     * If all bulk commands are true and the start id is 1, it is initial state.
     *
     * @return bool
     */
    public function isInitialState()
    {
        if ($this->startId !== self::INITIAL_START_ID) {
            return false;
        }
        foreach ($this->commandInfo as $isIndexing) {
            if ($isIndexing === false) {
                return false;
            }
        }

        return true;
    }

    /**
     * Updates states of commands which are executed (or skipped) before specified command.
     *
     * @param string $command
     *
     * @return void
     */
    public function updateCommandInfo($command)
    {
        if ( ! in_array($command, BulkCommandKeys::getArrayInOrder())) {
            return;
        }
        foreach ($this->commandInfo as $commandKey => $value) {
            if ($commandKey === $command) {
                break;
            }
            $this->commandInfo[$commandKey] = false;
        }
    }

    /**
     * @return bool
     */
    public function validate()
    {
        return
            is_array($this->commandInfo) && $this->isExistAllCommandKeys()
            && is_int($this->startId)
            && (is_int($this->userTableNum) || is_null($this->userTableNum));
    }

    /**
     * @return boolean
     */
    private function isExistAllCommandKeys()
    {
        foreach (BulkCommandKeys::getArrayInOrder() as $key) {
            if ( ! isset($this->commandInfo[$key])
                 || ! is_bool($this->commandInfo[$key])
            ) {
                return false;
            }
        }

        return true;
    }

    /**
     * @param string $appId
     *
     * @return bool
     */
    public function getPermissionOfIndexingApplication($appId)
    {
        $commandMap = BulkCommandKeys::getAppCommands($appId);
        foreach ($commandMap as $command) {
            if ($this->commandInfo[$command] === true) {
                return true;
            }
        }

        return false;
    }

    /**
     * @return array
     */
    public function getCommandInfo()
    {
        return $this->commandInfo;
    }

    /**
     * @return int
     */
    public function getStartId()
    {
        return $this->startId;
    }

    /**
     * @param int $startId
     */
    public function setStartId($startId)
    {
        $this->startId = $startId;
    }

    /**
     * @return int|null
     */
    public function getUserTableNum()
    {
        return $this->userTableNum;
    }

    /**
     * @param int|null $userTableNum
     */
    public function setUserTableNum($userTableNum)
    {
        $this->userTableNum = $userTableNum;
    }
}
