<?php

namespace grn\fts;

use grn\cydec\common\ShardLogic;
use grn\fts\exception\NoServerConnectionException;

require_once('fw/cookie.csp');
require_once('fw/http.csp');

class CyDECNormalizer
{
    /** @var  string */
    private $solrUrl;

    public function __construct()
    {
        $logic = new ShardLogic();
        $util = \CB_CyDECUtil::getInstance();
        $location = $logic->getShardLocation($util->getConfig('fts.json'), 0);
        $this->solrUrl
            = "http://{$location->getHost()}:{$location->getPort()}/";
    }

    /**
     * @param string $keyword
     *
     * @throws NoServerConnectionException
     *
     * @return string
     */
    public function normalizeKeyword($keyword)
    {
        $keyword = cb_trim($keyword);
        if (strlen($keyword) !== 0) {
            $keyword = $this->sanitize($keyword);
        }

        return $keyword;
    }

    /**
     * @param $keyword
     *
     * @throws NoServerConnectionException
     *
     * @return string
     */
    private function sanitize($keyword)
    {
        $post_data = ['message' => $keyword];

        $response_data = $this->postRequest("{$this->solrUrl}api/sanitize.json",
            json_encode($post_data));
        if ( ! $response_data) {
            throw new NoServerConnectionException("Failed to sanitize keyword: "
                                                  . $keyword);
        } else {
            $data = json_decode($response_data, true);
            if ( ! isset($data['result']['message'])) {
                throw new NoServerConnectionException("Failed to sanitize keyword: "
                                                      . $keyword);
            }

            return $data['result']['message'];
        }
    }

    /**
     * @param string $uri
     * @param string $post_params
     *
     * @return bool|string
     */
    private function postRequest($uri, $post_params)
    {
        $http_client = cb_lwc_http_client();

        // set request method : POST
        $http_client->setCurlOption(CURLOPT_POST, 1);
        $http_client->setCurlOption(CURLOPT_POSTFIELDS, $post_params);

        $data = $http_client->execute($uri);
        if ( ! $data) {
            return false;
        }
        if ($http_client->getStatusLine()['status-code'] != 200) {
            return false;
        }

        return $http_client->getBody();
    }
}
