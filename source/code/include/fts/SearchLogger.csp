<?php

namespace grn\fts;


class SearchLogger
{
    const LOG_QUERY = 1;
    const LOG_RESPONSE = 2;
    /** @var int */
    private $flag = 0;
    /** @var string */
    private $path = '';

    public function __construct()
    {
        global $G_config_common;
        $this->flag = (int)$G_config_common->get('FTS', 'fts_log');
        $this->path = $G_config_common->get('FTS', 'log_file_path')
            ?: cb_basedir() . DIRECTORY_SEPARATOR . "fts.log";
    }

    /**
     * @return bool
     */
    public function isLoggingQuery()
    {
        return $this->flag === self::LOG_QUERY
               || $this->flag === self::LOG_RESPONSE;
    }

    /**
     * @return bool
     */
    public function isLoggingResponse()
    {
        return $this->flag === self::LOG_RESPONSE;
    }

    /**
     * @param string $query
     */
    public function logQuery($query)
    {
        $message = $this->printLoginUserId() . "Query: {$query}";
        $this->log($message);
    }

    /**
     * @param string $responseText
     * @param int    $processingTime
     */
    public function logResponse($responseText, $processingTime)
    {
        $message = $this->printLoginUserId()
                   . "[Processing time: {$processingTime}ms] Response: "
                   . $responseText;
        $this->log($message);
    }

    /**
     * @param string $message
     */
    private function log($message)
    {
        // avoiding the error unable to write into the log file
        @file_put_contents($this->path, $this->getDate() . $message . PHP_EOL,
            FILE_APPEND);
    }

    /**
     * @return bool|string
     */
    private function getDate()
    {
        return "[" . date('r') . "] ";
    }

    /**
     * @return string
     */
    private function printLoginUserId()
    {
        $login = cb_get_login_user();

        return $login ? "[userID: {$login->getOID()}] " : "";
    }
}
