<?php

namespace grn\fts;


class FullIndexerArgValue
{
    const APPLICATION = 'application';
    const DOCUMENT = 'document';
    const FILE_ONLY = 'fileOnly';
    const NUMBER = 'number';
    const FORWARD = 'forward';
    const SLEEP = 'sleep';
    const START_TIME = 'startTime';
    const STOP_TIME = 'stopTime';
    const MAX_JOB_NUM = 'maxJobNum';
    const SEARCH_ENGINE = 'searchEngine';
    /** @var bool */
    private $indexBulletin;
    /** @var bool */
    private $indexMessage;
    /** @var bool */
    private $indexCabinet;
    /** @var bool */
    private $indexSpace;
    /** @var bool */
    private $indexMail;
    /** @var bool */
    private $fileOnly;
    /** @var int */
    private $number;
    /** @var string */
    private $forward;
    /** @var int */
    private $sleep;
    /** @var int|null */
    private $startTime;
    /** @var int|null */
    private $stopTime;
    /** @var FullIndexProgressInfo */
    private $progressInfo;
    /** @var int */
    private $maxJobNum;
    /** @var string */
    private $searchEngine;

    /**
     * @param bool                  $indexBulletin
     * @param bool                  $indexMessage
     * @param bool                  $indexCabinet
     * @param bool                  $indexSpace
     * @param bool                  $indexMail
     * @param bool                  $fileOnly
     * @param int                   $number
     * @param string                $forward
     * @param int                   $sleep
     * @param int|null              $startTime
     * @param int|null              $stopTime
     * @param FullIndexProgressInfo $progressInfo
     * @param int                   $maxJobNum
     * @param string                $searchEngine
     */
    public function __construct(
        $indexBulletin,
        $indexMessage,
        $indexCabinet,
        $indexSpace,
        $indexMail,
        $fileOnly,
        $number,
        $forward,
        $sleep,
        $startTime,
        $stopTime,
        FullIndexProgressInfo $progressInfo,
        $maxJobNum,
        $searchEngine
    ) {
        $this->indexBulletin = $indexBulletin;
        $this->indexMessage = $indexMessage;
        $this->indexCabinet = $indexCabinet;
        $this->indexSpace = $indexSpace;
        $this->indexMail = $indexMail;
        $this->fileOnly = $fileOnly;
        $this->number = $number;
        $this->forward = $forward;
        $this->sleep = $sleep;
        $this->startTime = $startTime;
        $this->stopTime = $stopTime;
        $this->progressInfo = $progressInfo;
        $this->maxJobNum = $maxJobNum;
        $this->searchEngine = $searchEngine;
    }

    /**
     * @return boolean
     */
    public function shouldIndexBulletin()
    {
        return $this->indexBulletin;
    }

    /**
     * @return boolean
     */
    public function shouldIndexMessage()
    {
        return $this->indexMessage;
    }

    /**
     * @return boolean
     */
    public function shouldIndexCabinet()
    {
        return $this->indexCabinet;
    }

    /**
     * @return boolean
     */
    public function shouldIndexSpace()
    {
        return $this->indexSpace;
    }

    /**
     * @return boolean
     */
    public function shouldIndexMail()
    {
        return $this->indexMail;
    }

    /**
     * @return boolean
     */
    public function isFileOnly()
    {
        return $this->fileOnly;
    }

    /**
     * @return int
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * @return string
     */
    public function getForward()
    {
        return $this->forward;
    }

    /**
     * @return int
     */
    public function getSleep()
    {
        return $this->sleep;
    }

    /**
     * @return int
     */
    public function getStartTime()
    {
        return $this->startTime;
    }

    /**
     * @return int
     */
    public function getStopTime()
    {
        return $this->stopTime;
    }

    /**
     * @param FullIndexProgressInfo $progressInfo
     */
    public function setProgressInfo(FullIndexProgressInfo $progressInfo)
    {
        $this->progressInfo = $progressInfo;
    }

    /**
     * @return \grn\fts\FullIndexProgressInfo|null
     */
    public function getProgressInfo()
    {
        return $this->progressInfo;
    }

    /**
     * @return int
     */
    public function getMaxJobNum()
    {
        return $this->maxJobNum;
    }

    /**
     * @return string
     */
    public function getSearchEngine()
    {
        return $this->searchEngine;
    }

    /**
     * @param string $command
     *
     * @return bool
     */
    public function shouldCreateIndexes($command)
    {
        assert('! is_null($this->progressInfo)');

        return BulkCommandKeys::isTypeOfFileIndexer($command)
            ?
            $this->progressInfo->isCreateIndexes($command)
            :
            ( ! $this->fileOnly
              && $this->progressInfo->isCreateIndexes($command));
    }

    /**
     * @param IndexerLoggerInterface $logger
     *
     * @return void
     */
    public function exportArgumentFile(IndexerLoggerInterface $logger)
    {
        if (defined('ON_FOREST')) {
            return;
        }
        $exportArray = [
            self::NUMBER      => $this->number,
            self::FILE_ONLY   => $this->fileOnly,
            self::FORWARD     => $this->forward,
            self::SLEEP       => $this->sleep,
            self::START_TIME  => $this->startTime,
            self::STOP_TIME   => $this->stopTime,
            self::MAX_JOB_NUM => $this->maxJobNum
        ];
        $exportJSON = json_encode($exportArray);
        $filePath = self::getArgumentsFilePath();
        $dir = dirname($filePath);
        if ( ! is_dir($dir)) {
            @mkdir($dir, 0755, true);
        }
        $ret = @file_put_contents($filePath, $exportJSON, LOCK_EX);
        if ($ret === false) {
            $logger->log(
                "[WARNING] Failed to export the information files to resume the full indexing. "
                .
                "If the full indexing will be stopped, you cannot resume it."
            );
        }
    }

    /**
     * @param IndexerLoggerInterface $logger
     */
    public function exportResumeInfoFile(IndexerLoggerInterface $logger)
    {
        if (defined('ON_FOREST')) {
            return;
        }
        $exportArray = [
            FullIndexProgressInfo::COMMAND_INFO   => $this->progressInfo->getCommandInfo(),
            FullIndexProgressInfo::START_ID       => $this->progressInfo->getStartId(),
            FullIndexProgressInfo::USER_TABLE_NUM => $this->progressInfo->getUserTableNum()
        ];
        $exportJSON = json_encode($exportArray);
        $filePath = self::getResumeFilePath();
        $dir = dirname($filePath);
        if ( ! is_dir($dir)) {
            @mkdir($dir, 0755, true);
        }
        $ret = @file_put_contents($filePath, $exportJSON, LOCK_EX);
        if ($ret === false) {
            $logger->log(
                "[WARNING] Failed to export the information files to resume the full indexing. "
                .
                "If the full indexing will be stopped, you cannot resume it."
            );
        }
    }

    /**
     * @return string
     */
    public static function getResumeFilePath()
    {
        global $G_config_common;

        return $G_config_common->get('Files', 'dir') . DIRECTORY_SEPARATOR
               . "fts" . DIRECTORY_SEPARATOR . "full_index_resume.json";
    }

    /**
     * @return string
     */
    public static function getArgumentsFilePath()
    {
        global $G_config_common;

        return $G_config_common->get('Files', 'dir') . DIRECTORY_SEPARATOR
               . "fts" . DIRECTORY_SEPARATOR . "full_index_argument.json";
    }
}
