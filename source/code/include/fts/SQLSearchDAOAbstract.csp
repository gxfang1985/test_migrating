<?php

namespace grn\fts;

use grn\fts\api\SearchApiParameter;


/**
 *
 */
abstract class SQLSearchDAOAbstract implements SQLSearchLogicInterface
{
    const ONEDAY_SECONDS = 86400;
    protected $userId;

    protected $sender;
    protected $folder_id;
    protected $search_util;

    protected $search_folder = false;
    protected $start_time_condition = false;
    protected $end_time_condition = false;

    protected $start;
    protected $end;

    abstract protected function getSearchFilterModifiedTime();

    /**
     * @param api\SearchApiParameter $parameter
     *
     * @return
     */
    abstract protected function setFolderId(SearchApiParameter $parameter);

    /**
     * @var \grn\message\dao\GrnMessageFoldersDAO | \grn\mail\dao\GrnMailFolderDAO
     */
    protected $foldersDao;
    protected $offset = 0;

    abstract public function buildQuery();

    /**
     * @return \CB_DatabaseConnection
     */
    abstract protected function db();

    abstract protected function getFolderColumn();

    /**
     * @return mixed "\grn\mail\SQLSearchResultDocument" or "\grn\message\SQLSearchResultDocument"
     */
    abstract protected function getDocument();

    /**
     * @return string
     */
    public function buildFolderCondition()
    {
        if ($this->search_folder === false) {
            return "";
        }
        assert(is_null($this->foldersDao) === false);
        $ids
            = $this->foldersDao->getChildFolderIdsRecursively([$this->folder_id],
            true);
        $ids = array_merge([$this->folder_id], $ids);

        return $this->db()
                    ->format("{$this->getFolderColumn()} IN (@A)", [$ids]);
    }

    /**
     * @return \Iterator
     */
    public function iterator()
    {
        $result = $this->db()->query($this->buildQuery());
        $data = [];
        $numFetched = 0;
        while (false !== ($row_data = $this->db()->fetch_assoc($result))) {
            $data[] = $row_data;
            $numFetched += 1;
            if (SearchQuery::DEFAULT_SIZE < $numFetched) {
                break;
            }

        }

        return new SQLSearchResultDocumentIterator($data, $this->getDocument());
    }

    /**
     * @param $start
     */
    public function setStartTimestamp($start)
    {
        $start_timestamp = $this->convertTimeStringToTimeStamp($start);
        if ($start_timestamp === false) {
            return;
        }

        assert(is_numeric($start_timestamp));
        $this->start = $start_timestamp;
        $this->start_time_condition = true;
    }

    /**
     * @param $time
     *
     * @return bool|int
     */
    private function convertTimeStringToTimeStamp($time)
    {

        if (is_null($time)) {
            return false;
        }

        $timestamp = cb_timestring_to_timestamp($time);
        if ($timestamp === false) {
            return false;
        }

        return $timestamp;

    }

    /**
     * @param $end
     */
    public function setEndTimestamp($end)
    {
        $end_timestamp = $this->convertTimeStringToTimeStamp($end);
        if ($end_timestamp === false) {
            return;
        }
        assert(is_numeric($end_timestamp));
        $this->end = $end_timestamp
                     + self::ONEDAY_SECONDS;// add 1 day to convert to the end of the date.
        $this->end_time_condition = true;
    }

    /**
     * @return string
     */
    public function buildStartTimestampCondition()
    {
        if ($this->start_time_condition === false) {
            return "";
        }

        return $this->db()
                    ->format("'@S' < {$this->getSearchFilterModifiedTime()}",
                        [$this->start]);
    }

    /**
     * @return string
     */
    public function buildEndTimestampCondition()
    {
        if ($this->end_time_condition === false) {
            return "";
        }

        return $this->db()
                    ->format("{$this->getSearchFilterModifiedTime()} < '@S'",
                        [$this->end]);
    }

    /**
     * @return string
     */
    protected function getOptionalFilter()
    {
        $query = "";
        if (($parent = $this->buildFolderCondition()) !== "") {
            $query .= " AND {$parent} ";
        }

        if (($start = $this->buildStartTimestampCondition()) !== "") {
            $query .= " AND {$start} ";
        }

        if (($end = $this->buildEndTimestampCondition()) !== "") {
            $query .= " AND {$end} ";
        }

        return $query;
    }

    /**
     * @return int
     */
    protected function getLimit()
    {
        return SearchQuery::DEFAULT_SIZE + 1;
    }

    /**
     * @param $string
     *
     * @return string
     */
    protected function htmlEscape($string)
    {
        return htmlspecialchars($string);
    }

    /**
     * @param $parameter \grn\fts\api\SearchApiParameter
     */
    public function setOptionalCondition($parameter)
    {
        $this->setFolderId($parameter);
        $this->offset = $parameter->getStart();
        $this->setStartTimestamp($parameter->getDateLower());
        $this->setEndTimestamp($parameter->getDateUpper());
    }

    /**
     * @var $user \CB_Row
     * @return mixed
     */
    protected function getLoginUserId()
    {
        global $G_container_base;
        /** @var \GRN_Uum $uum */
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();
        assert($user instanceof \CB_User);

        return $user->getOID();
    }
}
