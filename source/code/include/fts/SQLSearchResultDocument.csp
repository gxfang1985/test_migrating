<?php

namespace grn\fts;

use \CB_User;

/**
 * Abstract class for classes to convert SQL search results into
 * the documents which can be used in fts search page.
 */
abstract class SQLSearchResultDocument
{

    const ICON = "titleIcon";
    const URL = "url";
    const SNIPPET = "snippet";
    const MODIFIER = "modifier";
    const DISPLAY_NAME = "displayName";
    const MODIFIED_TIME = "modifiedTime";
    const TITLE = "title";

    const PROFILE = "profileUrl";

    /**
     * @param $mid
     *
     * @return mixed
     */
    abstract public function getMessageUrl($mid);

    abstract public function getIconUrl();

    /**
     * @param array $data
     *
     * @return mixed
     */
    abstract public function createDocument(array $data);

    private $search_util;

    /**
     * @var $search_util SearchUtil
     */
    public function __construct()
    {
        $this->search_util = new SearchUtil();
    }


    /**
     * @param $string
     *
     * @return string
     */
    public function htmlEscape($string)
    {
        return htmlspecialchars($string);
    }

    /**
     * @param $timestamp
     *
     * @return mixed
     */
    public function getFormatTimestamp($timestamp)
    {
        $time = new \CB_TimeStamp();
        $time->unix_ts = $timestamp;

        return cb_date_format('DateTimeFull_YMD_HM', $time);
    }

    /**
     * @param $user_id
     *
     * @return null|string
     */
    public function getProfileUrl($user_id)
    {
        return $this->search_util->getModifierProfileUrl($this->getUser($user_id));
    }

    /**
     * @param $user_id     Integer
     * @param $displayName String
     *
     * @return string
     */
    public function getDisplayName($user_id, $displayName)
    {
        $user = $this->getUser($user_id);
        if (false === $user) {
            return $this->htmlEscape($displayName);
        }

        $name = $this->search_util->getDisplayName($user);
        if (false === $name) {
            return $this->htmlEscape($name);
        }

        return $this->htmlEscape($name);
    }

    /**
     * @param $user_id Integer
     *
     * @return \CB_User | boolean
     */
    private function getUser($user_id)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance("uum");

        return $uum->getUser($user_id);
    }


}
