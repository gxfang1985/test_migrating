<?php

namespace grn\fts\bulletin;

use grn\fts\DocumentConverterInterface;
use grn\fts\SearchDocumentInterface;
use grn\fts\DocumentView;
use grn\fts\SearchUtil;
use grn\fts\SearchConstants;
use grn\fts\FileView;
use grn\fts\FileIcon;

class FileConverter implements DocumentConverterInterface
{
    /**
     * Convert a search result to view data of Garoon.
     *
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return \grn\fts\DocumentView
     */
    public function convert(SearchDocumentInterface $document)
    {
        $util = new BulletinUtil();
        $file = $util->getFile($document);
        $article = $util->getArticle($document);

        $snippet = $this->getSnippet($document);
        $title = $article->get('subject');
        $titleIcon = $util->getArticleIconUrl();
        $url = $this->getUrl($document);
        $modifierView = $this->getModifierView($file);
        $modifiedTime = $file->get('mtime')->unix_ts;
        $fileView = $this->getFileView($file);

        $highlights = $document->getFileNameHighlights();
        if ( ! is_null($highlights)) {
            $fileView->setSnippetTitle($highlights[0]);
        }

        $documentView = new DocumentView($snippet, $title, $titleIcon, $url,
            $modifiedTime);
        $documentView->setModifierView($modifierView);
        $documentView->setFileView($fileView);

        return $documentView;
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getSnippet(SearchDocumentInterface $document)
    {
        $util = $this->getSearchUtil();

        return $util->getSnippet($document);
    }

    /**
     * @return \grn\fts\SearchUtil
     */
    private function getSearchUtil()
    {
        return new SearchUtil();
    }

    /**
     * @param \grn\fts\SearchDocumentInterface $document
     *
     * @return string
     */
    private function getUrl(SearchDocumentInterface $document)
    {
        $tokens = explode(SearchConstants::DOCUMENT_ID_DELIMITER,
            $document->getId());
        $articleId = substr($tokens[2], 1);

        $params = ['aid' => $articleId];

        $fragment = null;
        if (count($tokens) === 5) {
            $util = new BulletinUtil();
            $follow = $util->getFollow($document);
            if ($follow) {
                $params['follow_id_autolink'] = $follow->get('follow_id');
                $fragment = "follow";
            }
        }

        return cb_format_url("bulletin/view", $params, $fragment);
    }

    /**
     * @param \GRN_Bulletin_File $file
     *
     * @return \grn\fts\ModifierView
     */
    private function getModifierView(\GRN_Bulletin_File $file)
    {
        $modifier = $file->get('modifier');
        $util = $this->getSearchUtil();

        return $util->getModifierView($modifier, $file->get('modifier_name'));
    }

    private function getFileView(\GRN_Bulletin_File $file)
    {
        /** @var \GRN_Bulletin_FileBody $fileBody */
        $fileBody = $file->getCurrentBody();
        $downloadUrl = $this->getDownloadUrl($file, $fileBody);

        return new FileView($fileBody->get('name'),
            FileIcon::getIconUrl($fileBody), $downloadUrl,
            $fileBody->get('size'));
    }

    private function getDownloadUrl(
        \GRN_Bulletin_File $file,
        \GRN_Bulletin_FileBody $fileBody
    ) {
        return cb_format_url('bulletin/file_download',
            ['fid' => $file->getOID()], null, $fileBody->get('name'));
    }
}
