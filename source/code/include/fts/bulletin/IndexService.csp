<?php

namespace grn\fts\bulletin;

use grn\fts\Fields;
use grn\fts\filter\AndFilter;
use grn\fts\filter\TermFilter;
use grn\fts\FtsProduct;
use grn\fts\SearchConstants;
use grn\fts\SearchEntry;
use grn\fts\SearchUtil;
use grn\fts\UpdateServiceContainer;

class IndexService
{
    const ID_PREFIX = 'G.Abulletin.';
    const ARTICLE_PREFIX = 'A'; // article
    const FOLLOW_PREFIX = 'C'; // comment
    const FILE_PREFIX = 'F'; // file

    /** @var UpdateServiceContainer */
    private $updateServiceContainer = null;

    /**
     * IndexService constructor.
     *
     * @param FtsProduct|NULL $fts_product
     */
    public function __construct(FtsProduct $fts_product = null)
    {
        $this->updateServiceContainer
            = new UpdateServiceContainer($fts_product);
    }

    /**
     * @param \GRN_Bulletin_Article $article
     */
    public function createArticleIndex(\GRN_Bulletin_Article $article)
    {
        $articleId = $article->getOID();
        $id = self::createArticleDocumentId($articleId);

        $startTimestamp = $article->get('start_timestamp');
        $startTime = (is_null($startTimestamp)) ? null
            : (int)$startTimestamp->unix_ts;
        $endTimestamp = $article->get('end_timestamp');
        $endTime = (is_null($endTimestamp)) ? null
            : (int)$endTimestamp->unix_ts;
        $modifier = $article->get('modifier');
        $modifierId = $modifier ? $modifier->getOID()
            : SearchConstants::DELETED_USER_ID;
        $manually_enter_sender = $article->getId('manually_enter_sender');
        $data
            = SearchUtil::truncateLongText($article->get('data'));

        $searchEntry = $this->createArticleSearchEntry($id,
            $article->get('subject'),
            $data,
            (int)$modifierId,
            (int)$article->get('mtime')->unix_ts,
            (int)$articleId,
            (int)$article->get('category')->getOID(),
            $startTime,
            $endTime,
            $manually_enter_sender);

        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param \GRN_Bulletin_Article $article
     */
    public function updateArticleIndex(\GRN_Bulletin_Article $article)
    {
        $this->createArticleIndex($article);
    }

    /**
     * @return \grn\fts\UpdateServiceContainer
     */
    protected function getUpdateServiceContainer()
    {
        return $this->updateServiceContainer;
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_bulletin_articleentity.
     * @param string $forward
     */
    public function bulkCreateArticleIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createArticleDocumentId($row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $startTime = (is_null($row['col_start_timestamp']))
                ? null : (int)$row['col_start_timestamp'];
            $endTime = (is_null($row['col_end_timestamp'])) ? null
                : (int)$row['col_end_timestamp'];
            $manually_enter_sender = $row['col_manually_enter_sender'];
            $entries[] = $this->createArticleSearchEntry($id,
                $row['col_subject'], $row['col_data'], (int)$modifierId,
                (int)$row['col_mtime'], (int)$row['_id'],
                (int)$row['col_category'], $startTime, $endTime,
                $manually_enter_sender);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \GRN_Bulletin_Follow $follow
     */
    public function createFollowIndex(\GRN_Bulletin_Follow $follow)
    {
        $article = $follow->get('article');
        $articleId = $article->getOID();
        $categoryId = $article->get('category')->getOID();
        $this->createFollowIndexCommon($follow, $articleId, $categoryId);
    }

    /**
     * @param \GRN_Bulletin_Follow $follow
     * @param                      $articleId
     * @param                      $categoryId
     */
    private function createFollowIndexCommon(
        \GRN_Bulletin_Follow $follow,
        $articleId,
        $categoryId
    ) {
        $id = self::createFollowDocumentId($follow->get('article')
                                                  ->getOID(),
            $follow->getOID());
        $modifier = $follow->get('modifier');
        $modifierId = $modifier ? $modifier->getOID()
            : SearchConstants::DELETED_USER_ID;
        $data
            = SearchUtil::truncateLongText($follow->get('data'));
        $searchEntry = $this->createFollowSearchEntry(
            $id,
            $data,
            (int)$modifierId,
            (int)$follow->get('mtime')->unix_ts,
            (int)$follow->getOID(),
            (int)$articleId,
            (int)$categoryId
        );
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_bulletin_followentity.
     * @param string $forward
     */
    public function bulkCreateFollowIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createFollowDocumentId($row['col_article'],
                $row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $entries[] = $this->createFollowSearchEntry($id, $row['col_data'],
                (int)$modifierId, (int)$row['col_mtime'], (int)$row['_id'],
                (int)$row['col_article'], (int)$row['col_category']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \GRN_Bulletin_File         $file
     * @param \GRN_Bulletin_FileBody     $fileBody
     * @param \GRN_Bulletin_FileRelation $fileRelation
     *
     */
    public function createFileIndex(
        \GRN_Bulletin_File $file,
        \GRN_Bulletin_FileBody $fileBody,
        \GRN_Bulletin_FileRelation $fileRelation
    ) {
        /* @var \GRN_Bulletin_Article $article */
        $article = $fileRelation->get('article');
        /* @var \GRN_Bulletin_Category $category */
        $category = $article->get('category');
        /* @var \GRN_Bulletin_Follow $follow */
        $follow = $fileRelation->get('follow');
        $followId = (is_null($follow)) ? null : (int)$follow->getOID();

        $this->createFileIndexCommon($file, $fileBody, $article->getOID(),
            $category->getOID(), $followId);
    }

    /**
     * @param \GRN_Bulletin_File     $file
     * @param \GRN_Bulletin_FileBody $fileBody
     * @param string                 $articleId
     * @param string                 $categoryId
     * @param string|null            $followId
     */
    private function createFileIndexCommon(
        \GRN_Bulletin_File $file,
        \GRN_Bulletin_FileBody $fileBody,
        $articleId,
        $categoryId,
        $followId
    ) {
        SearchUtil::validateIds([$articleId, $followId]);
        $id = self::createFileDocumentId($articleId, $followId,
            $file->getOID());
        $modifier = $file->get('modifier');
        $modifierId = $modifier ? $modifier->getOID()
            : SearchConstants::DELETED_USER_ID;
        $fileIdentifier = defined('ON_FOREST') ? $fileBody->get('blob')
            : $fileBody->getPath();

        $searchEntry = $this->createFileSearchEntry(
            $id,
            $fileBody->get('name'),
            $fileIdentifier,
            (int)$modifierId,
            (int)$file->get('mtime')->unix_ts,
            (int)$file->getOID(),
            is_null($followId) ? null : (int)$followId,
            (int)$articleId,
            (int)$categoryId
        );

        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @param \GRN_Bulletin_File $file
     * @param string             $categoryId
     * @param string             $articleId
     * @param string|null        $followId
     */
    public function updateFileIndex(
        \GRN_Bulletin_File $file,
        $articleId,
        $categoryId,
        $followId
    ) {
        /** @var \GRN_Bulletin_FileBody $fileBody */
        $fileBody = $file->getBody($file->get('version'));
        $followId = ($followId) ?: null; // replace empty string with null
        $this->createFileIndexCommon($file, $fileBody, $articleId, $categoryId,
            $followId);
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_bulletin_file, tab_grn_bulletin_filebody, tab_grn_bulletin_filerelation and tab_grn_bulletin_articleentity.
     * @param string $forward
     */
    public function bulkCreateFileIndex(array $rows, $forward)
    {
        $entries = [];
        foreach ($rows as $row) {
            $id = self::createFileDocumentId($row['col_article'],
                $row['col_follow'], $row['_id']);
            $followId = (is_null($row['col_follow'])) ? null
                : (int)$row['col_follow'];
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $fileIdentifier = defined('ON_FOREST')
                ? $row['col_blob']
                : SearchUtil::getFilePath('bulletin', 'grn_bulletin_filebody',
                    $row['fileId']);
            $entries[] = $this->createFileSearchEntry($id,
                $row['col_name'], $fileIdentifier, (int)$modifierId,
                (int)$row['col_mtime'], (int)$row['_id'], $followId,
                (int)$row['col_article'], (int)$row['col_category']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entries, $forward);
    }

    /**
     * @param \GRN_Bulletin_Article $article
     *
     */
    public function updateArticleIndexWithMove(\GRN_Bulletin_Article $article)
    {
        $this->updateArticleIndex($article);
        $this->updateFileIndexWithMove($article->getFiles(), $article->getOID(),
            $article->get('category')->getOID());
        $this->updateFollowIndexWithMove($article->getFollows(),
            $article->getOID(), $article->get('category')->getOID());
    }

    /**
     * @param \GRN_Bulletin_Follow[] $follows
     * @param string                 $articleId
     * @param string                 $categoryId
     */
    private function updateFollowIndexWithMove(
        $follows,
        $articleId,
        $categoryId
    ) {
        assert('is_array($follows)');

        foreach ($follows as $follow) {
            $this->createFollowIndexCommon($follow, $articleId, $categoryId);
            $this->updateFileIndexWithMove($follow->getFiles(), $articleId,
                $categoryId, $follow);
        }
    }

    /**
     * @param \GRN_Bulletin_File[] $files
     * @param string               $articleId
     * @param string               $categoryId
     * @param \GRN_Bulletin_Follow $follow
     */
    private function updateFileIndexWithMove(
        $files,
        $articleId,
        $categoryId,
        $follow = null
    ) {
        assert('is_array($files)');

        foreach ($files as $file) {
            /** @var \GRN_Bulletin_FileBody $fileBody */
            $fileBody = $file->getBody($file->get('version'));
            $followId = is_null($follow) ? null : (int)$follow->getOID();
            $this->createFileIndexCommon($file, $fileBody, $articleId,
                $categoryId, $followId);
        }
    }

    /**
     * @param string $articleId
     */
    public function deleteIndexByArticleId($articleId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_BULLETIN),
            new TermFilter(Fields::articleId(), $articleId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $followId
     */
    public function deleteIndexByFollowId($followId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_BULLETIN),
            new TermFilter(Fields::followId(), $followId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $fileId
     */
    public function deleteIndexByFileId($fileId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_BULLETIN),
            new TermFilter(Fields::fileId(), $fileId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string   $id
     * @param string   $subject
     * @param string   $data
     * @param int      $modifierId
     * @param int      $mtime
     * @param int      $articleId
     * @param int      $categoryId
     * @param mixed    $startTime
     * @param mixed    $endTime
     * @param int|null $manually_enter_sender
     *
     * @return \grn\fts\SearchEntryInterface $searchEntry
     */
    private function createArticleSearchEntry(
        $id,
        $subject,
        $data,
        $modifierId,
        $mtime,
        $articleId,
        $categoryId,
        $startTime,
        $endTime,
        $manually_enter_sender = null
    ) {
        $searchEntry = new SearchEntry($id);

        $searchEntry->addValue(Fields::title(), $subject);
        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        if ( ! is_null($manually_enter_sender)) {
            $searchEntry->addValue(Fields::manuallyEnterSender(),
                (int)$manually_enter_sender);
        }
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::articleId(), $articleId);
        $searchEntry->addValue(Fields::categoryId(), $categoryId);
        if ( ! is_null($startTime) && ! is_null($endTime)) {
            $searchEntry->addValue(Fields::startTime(), $startTime);
            $searchEntry->addValue(Fields::endTime(), $endTime);
        }
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_BULLETIN);
        $searchEntry->setType('bulletin.article');

        return $searchEntry;
    }

    /**
     * @param string $id
     * @param string $data
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $followId
     * @param int    $articleId
     * @param int    $categoryId
     *
     * @return \grn\fts\SearchEntryInterface $searchEntry
     */
    private function createFollowSearchEntry(
        $id,
        $data,
        $modifierId,
        $mtime,
        $followId,
        $articleId,
        $categoryId
    ) {
        $searchEntry = new SearchEntry($id);

        $searchEntry->addValue(Fields::data(), $data);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::followId(), $followId);
        $searchEntry->addValue(Fields::articleId(), $articleId);
        $searchEntry->addValue(Fields::categoryId(), $categoryId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_BULLETIN);
        $searchEntry->setType('bulletin.follow');

        return $searchEntry;
    }

    /**
     * @param string $id
     * @param string $name
     * @param string $blobId
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $fileId
     * @param mixed  $followId
     * @param int    $articleId
     * @param int    $categoryId
     *
     * @return \grn\fts\SearchEntryInterface $searchEntry
     */
    private function createFileSearchEntry(
        $id,
        $name,
        $blobId,
        $modifierId,
        $mtime,
        $fileId,
        $followId,
        $articleId,
        $categoryId
    ) {
        $searchEntry = SearchUtil::createBaseFileEntry($id, $name, $blobId);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::fileId(), $fileId);
        if ( ! is_null($followId)) {
            $searchEntry->addValue(Fields::followId(), $followId);
        }
        $searchEntry->addValue(Fields::articleId(), $articleId);
        $searchEntry->addValue(Fields::categoryId(), $categoryId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_BULLETIN);
        $searchEntry->setType('bulletin.file');

        return $searchEntry;
    }

    /**
     * @param $articleId
     *
     * @return string    "G.Abulletin.A{$articleId}"
     */
    private static function createArticleDocumentId($articleId)
    {
        return sprintf("%s%s%u", self::ID_PREFIX, self::ARTICLE_PREFIX,
            $articleId);
    }

    /**
     * @param $articleId
     * @param $followId
     *
     * @return string    "G.Abulletin.A{$articleId}.C{$followId}"
     */
    private static function createFollowDocumentId($articleId, $followId)
    {
        return self::createArticleDocumentId($articleId) .
               sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                   self::FOLLOW_PREFIX, $followId);
    }

    /**
     * @param $articleId
     * @param $followId
     * @param $fileId
     *
     * @return string "G.Abulletin.A{$articleId}.C{$followId}.F{$fileId}" OR "G.Abulletin.A{$articleId}.F{$fileId}"
     */
    private static function createFileDocumentId($articleId, $followId, $fileId)
    {
        $id = (is_null($followId)) ? self::createArticleDocumentId($articleId)
            : self::createFollowDocumentId($articleId, $followId);

        return $id . sprintf("%s%s%u", SearchConstants::DOCUMENT_ID_DELIMITER,
                self::FILE_PREFIX, $fileId);
    }
}
