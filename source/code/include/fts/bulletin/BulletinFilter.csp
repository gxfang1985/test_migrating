<?php

namespace grn\fts\bulletin;

use grn\fts\api\SearchApi;
use grn\fts\api\SearchApiParameter;
use grn\fts\Fields;
use grn\fts\filter\AndFilter;
use grn\fts\filter\SearchFilterInterface;
use grn\fts\filter\TermFilter;
use grn\fts\filter\TermsFilter;
use grn\fts\FtsProduct;
use grn\fts\SearchConstants;
use grn\fts\SearchTarget;

require_once('bulletin/category.csp');

class BulletinFilter implements SearchFilterInterface
{
    const DEFAULT_LIMIT_FILTER_NUM = 10000;

    /** @var string|null */
    private $categoryId;

    /** @var string */
    private $target;

    /** @var int */
    private $maxFilterNum;

    /**
     * @param \grn\fts\api\SearchApiParameter $parameter
     */
    public function __construct(SearchApiParameter $parameter)
    {
        $categoryId = $parameter->getBulletinCategoryId();
        if ( ! is_null($categoryId)) {
            $categoryId = (int)$categoryId;
        }
        $this->setCategoryId($categoryId);
        $this->setTarget($parameter->getTarget());

        /** @global \CB_ConfigManager */
        global $G_config_common;
        $limit = ($G_config_common->get('FTS', 'bulletin_max_category'))
            ?: self::DEFAULT_LIMIT_FILTER_NUM;
        $this->setMaxFilterNum((int)$limit);
    }

    /**
     * @param string $categoryId
     *
     * @return int[]
     */
    protected function getSubCategoryIdsRecursively($categoryId)
    {
        $manager = \GRN_Bulletin_CategoryManager::getInstance();

        return $manager->getSubCategoryIdsRecursively($categoryId,
            $this->getLoginUserId());
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return array|string
     */
    public function getQuery(FtsProduct $fts_product)
    {
        $target = $this->getTarget();
        require_once('bulletin/table.csp');
        $categoryId = ($target === SearchTarget::ALL
            ? GRN_BULLETIN_ROOT_CATEGORY_ID : $this->getCategoryId());

        $filter = new AndFilter();
        $filter->addFilter(new TermFilter(Fields::appName(),
            SearchConstants::APPLICATION_BULLETIN));

        if ( ! is_null($categoryId)) {
            $subCategoryIds = array_merge([$categoryId],
                $this->getSubCategoryIdsRecursively($categoryId));
            if (count($subCategoryIds) > $this->getMaxFilterNum()) {
                SearchApi::setLimitFlag(true);
                $subCategoryIds = array_slice($subCategoryIds, 0,
                    $this->getMaxFilterNum());
            }
            $filter->addFilter(new TermsFilter(Fields::categoryId(),
                $subCategoryIds));
        }

        return $filter->getQuery($fts_product);
    }

    /**
     * @return string
     */
    protected function getLoginUserId()
    {
        $loginUser = cb_get_login_user();
        assert('$loginUser');

        return $loginUser->getOID();
    }

    /**
     * @param string|null $categoryId
     */
    private function setCategoryId($categoryId)
    {
        $this->categoryId = $categoryId;
    }

    /**
     * @return string|null
     */
    private function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * @return string
     */
    public function getTarget()
    {
        return $this->target;
    }

    /**
     * @param string $target
     */
    public function setTarget($target)
    {
        $this->target = $target;
    }

    /**
     * @return int
     */
    public function getMaxFilterNum()
    {
        return $this->maxFilterNum;
    }

    /**
     * @param int $maxFilterNum
     */
    public function setMaxFilterNum($maxFilterNum)
    {
        $this->maxFilterNum = $maxFilterNum;
    }
}
