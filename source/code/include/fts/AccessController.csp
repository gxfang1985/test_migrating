<?php

namespace grn\fts;

use grn\fts\bulletin\AccessController as BulletinAccessController;
use grn\fts\message\AccessController as MessageAccessController;
use grn\fts\cabinet\AccessController as CabinetAccessController;
use grn\fts\space\AccessController as SpaceAccessController;
use grn\fts\mail\AccessController as MailAccessController;
use grn\grn\access\service\AppAccess;

class AccessController implements AccessControllerInterface
{
    /** @var string $spaceAccessMode */
    private $spaceAccessMode = '';

    /**
     * Get if a searched document is accessible for a user.
     *
     * @param \grn\fts\SearchDocumentInterface $document
     * @param \CB_User                         $user
     *
     * @return bool
     */
    public function isAccessible(
        SearchDocumentInterface $document,
        \CB_User $user
    ) {
        if ( ! AppAccess::isAppAvailableInternalAccess($document->getApplication(),
            $user->getOID())
        ) {
            return false;
        }
        $controller = $this->getApplicationAccessController($document);

        return $controller->isAccessible($document, $user);
    }

    /**
     * @param SearchDocumentInterface $document
     *
     * @return AccessControllerInterface
     */
    public function getApplicationAccessController(
        SearchDocumentInterface $document
    ) {
        switch ($document->getApplication()) {
            case SearchConstants::APPLICATION_BULLETIN:
                $controller = new BulletinAccessController();
                break;
            case SearchConstants::APPLICATION_MESSAGE:
                $controller = new MessageAccessController();
                break;
            case SearchConstants::APPLICATION_CABINET:
                $controller = new CabinetAccessController();
                break;
            case SearchConstants::APPLICATION_SPACE:
                $controller
                    = new SpaceAccessController($this->getSpaceAccessMode());
                break;
            case SearchConstants::APPLICATION_MAIL:
                $controller = new MailAccessController();
                break;
            default:
                assert('FALSE');
                break;
        }

        /* @var \grn\fts\AccessControllerInterface $controller */

        return $controller;
    }

    /**
     * @return string
     */
    public function getSpaceAccessMode()
    {
        return $this->spaceAccessMode;
    }

    /**
     * @param string $spaceAccessMode
     */
    public function setSpaceAccessMode($spaceAccessMode)
    {
        $this->spaceAccessMode = $spaceAccessMode;
    }
}
