<?php

namespace grn\fts;

require_once('fw/server_file.csp');

class SearchEntry implements SearchEntryInterface
{
    const DOC_ARG_KEY = 'doc';
    const FILE_ARG_KEY = 'file';

    /* @var string $id */
    private $id;
    /* @var array $values */
    private $values = [];
    /** @var string $fileIdentifier */
    private $fileIdentifier = null;
    /** @var string */
    private $type = null;
    /** @var string */
    private $parentId = null;
    /* @var array $script */
    private $script = [];
    /** @var bool */
    private $upsert = null;

    public function __construct($id)
    {
        assert('is_string($id)');
        $this->setId($id);
    }

    /**
     * @param FtsProduct $ftsProduct
     *
     * @return array
     */
    public function getMessage(FtsProduct $ftsProduct)
    {
        if ($ftsProduct->isElasticsearch()) {
            return $this->getMessageForEs();
        }

        return $this->getMessageSolr();
    }

    /**
     * @return array
     */
    private function getMessageSolr()
    {
        $doc = [];
        $arg = [];
        $doc[Fields::id()->solr()] = $this->getId();
        foreach ($this->getValues() as $pair) {
            /** @var Field $field */
            $field = $pair[0];
            $key = $field->solr();
            $value = $pair[1];

            //assert( '$this->validate($key, $value)' );
            $doc[$key] = $value;
        }

        $arg[self::DOC_ARG_KEY] = $doc;

        $fileIdentifier = $this->getFileIdentifier();
        if ( ! is_null($fileIdentifier)) {
            $file = [
                Fields::fileData()->solr() => $fileIdentifier
            ];
            $arg[self::FILE_ARG_KEY] = $file;
        }

        return $arg;
    }

    /**
     * @return array
     */
    private function getMessageForEs()
    {
        if ( ! isset($this->type)) {
            throw new \RuntimeException('type is required');
        }

        $doc = [];
        $doc[Fields::id()->es()] = $this->getId();
        $doc['type'] = $this->getType();

        if ($this->parentId !== null) {
            $doc['parent'] = $this->parentId;
        }

        if (is_array($this->script) && count($this->script) > 0) {
            $doc['script'] = $this->script;
        }

        if ($this->upsert !== null) {
            $doc['upsert'] = $this->upsert;
        }

        $doc['fields'] = [];
        foreach ($this->getValues() as $pair) {
            /** @var Field $field */
            $field = $pair[0];
            $key = $field->es();
            $value = $pair[1];
            $doc['fields'][$key] = $value;
        }

        $fileIdentifier = $this->getFileIdentifier();
        if ( ! is_null($fileIdentifier)) {
            $doc['files'] = [Fields::fileData()->es() => $fileIdentifier];
        }

        return $doc;
    }

    /**
     * @param Field $field field name
     * @param mixed $value field value (*.t:string, *.i:int)
     */
    public function addValue($field, $value)
    {
        $this->values[] = [$field, $value];
    }

    /**
     * @param \CB_ServerFile $file
     */
    public function addFile(\CB_ServerFile $file)
    {
        $this->setFileIdentifier($file->get('blob'));
    }

    /**
     * used in assert
     *
     * @param $key
     * @param $value
     *
     * @return bool
     */
    private function validate($key, $value)
    {
        $suffix = substr($key, -2);
        switch ($suffix) {
            case SearchFields::INTEGER_SUFFIX:
                return is_int($value);
                break;
            case SearchFields::TEXT_SUFFIX:
            case SearchFields::STRING_SUFFIX:
                return is_string($value);
                break;
            case SearchFields::BOOLEAN_SUFFIX:
                return is_bool($value);
                break;
            default:
                return false;
                break;
        }
    }

    /**
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * @return string
     */
    private function getId()
    {
        return $this->id;
    }

    /**
     * @return array
     */
    private function getValues()
    {
        return $this->values;
    }

    /**
     * @param string $fileIdentifier
     */
    public function setFileIdentifier($fileIdentifier)
    {
        $this->fileIdentifier = $fileIdentifier;
    }

    /**
     * @return string
     */
    private function getFileIdentifier()
    {
        return $this->fileIdentifier;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * @param string $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }

    /**
     * @param string $parent_id
     */
    public function setParentId($parent_id)
    {
        $this->parentId = $parent_id;
    }

    /**
     * @return array
     */
    public function getScript()
    {
        return $this->script;
    }

    /**
     * @param array $script
     */
    public function setScript($script)
    {
        $this->script = $script;
    }

    /**
     * @param boolean $upsert
     */
    public function setUpsert($upsert)
    {
        $this->upsert = $upsert;
    }
}
