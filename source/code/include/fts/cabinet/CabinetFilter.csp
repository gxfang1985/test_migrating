<?php

namespace grn\fts\cabinet;

use grn\fts\api\SearchApi;
use grn\fts\api\SearchApiParameter;
use grn\fts\Fields;
use grn\fts\filter\AndFilter;
use grn\fts\filter\SearchFilterInterface;
use grn\fts\filter\TermFilter;
use grn\fts\filter\TermsFilter;
use grn\fts\FtsProduct;
use grn\fts\SearchConstants;
use grn\fts\SearchTarget;

class CabinetFilter implements SearchFilterInterface
{
    const DEFAULT_LIMIT_FILTER_NUM = 10000;

    /** @var string */
    private $folderId;
    /** @var string */
    private $target;
    /** @var int */
    private $maxFilterNum;

    /**
     * @param \grn\fts\api\SearchApiParameter $parameter
     */
    public function __construct(SearchApiParameter $parameter)
    {
        $folderId = $parameter->getCabinetFolderId();
        if ( ! is_null($folderId)) {
            $folderId = (int)$folderId;
        }
        $this->setFolderId($folderId);
        $this->setTarget($parameter->getTarget());

        /** @global \CB_ConfigManager */
        global $G_config_common;
        $limit = ($G_config_common->get('FTS', 'cabinet_max_folder'))
            ?: self::DEFAULT_LIMIT_FILTER_NUM;
        $this->setMaxFilterNum((int)$limit);
    }

    /**
     * @param FtsProduct $fts_product
     *
     * @return array|string
     */
    public function getQuery(FtsProduct $fts_product)
    {
        $target = $this->getTarget();
        require_once('cabinet/table.csp');
        $folderId = ($target === SearchTarget::ALL ? GRN_CABINET_ROOT_FOLDER_ID
            : $this->getFolderId());

        $filter = new AndFilter();
        $filter->addFilter(new TermFilter(Fields::appName(),
            SearchConstants::APPLICATION_CABINET));

        if ( ! is_null($folderId)) {
            $folderIds = array_merge([$folderId],
                $this->getSubFolderIdsRecursively([$folderId]));
            if (count($folderIds) > 0) {
                if (count($folderIds) > $this->getMaxFilterNum()) {
                    SearchApi::setLimitFlag(true);
                    $folderIds = array_slice($folderIds, 0,
                        $this->getMaxFilterNum());
                }
                $filter->addFilter(new TermsFilter(Fields::folderId(),
                    $folderIds));
            }
        }

        return $filter->getQuery($fts_product);
    }

    /**
     * @param array $parentIds
     *
     * @return array
     */
    protected function getSubFolderIdsRecursively(array $parentIds)
    {
        $dao = $this->getCabinetFolderDAO();
        $ids = $dao->getSubFolderIdsWithEvaluateAccess($parentIds,
            $this->getLoginUserId());
        if (count($ids) > 0) {
            $ids = array_merge($ids, $this->getSubFolderIdsRecursively($ids));
        }

        return $ids;
    }

    /**
     * @return string
     */
    protected function getLoginUserId()
    {
        $loginUser = cb_get_login_user();
        assert('$loginUser');

        return $loginUser->getOID();
    }

    /**
     * @return \GrnCabinetFolderDAO
     */
    private function getCabinetFolderDAO()
    {
        require_once('cabinet/dao/GrnCabinetFolderDAO.csp');

        return new \GrnCabinetFolderDAO();
    }

    /**
     * @param string $folderId
     */
    private function setFolderId($folderId)
    {
        $this->folderId = $folderId;
    }

    /**
     * @return string
     */
    private function getFolderId()
    {
        return $this->folderId;
    }

    /**
     * @return string
     */
    public function getTarget()
    {
        return $this->target;
    }

    /**
     * @param string $target
     */
    public function setTarget($target)
    {
        $this->target = $target;
    }

    /**
     * @return int
     */
    public function getMaxFilterNum()
    {
        return $this->maxFilterNum;
    }

    /**
     * @param int $maxFilterNum
     */
    public function setMaxFilterNum($maxFilterNum)
    {
        $this->maxFilterNum = $maxFilterNum;
    }
}
