<?php

namespace grn\fts\cabinet;

use grn\fts\Fields;
use grn\fts\filter\AndFilter;
use grn\fts\filter\TermFilter;
use grn\fts\FtsProduct;
use grn\fts\SearchConstants;
use grn\fts\SearchUtil;
use grn\fts\UpdateServiceContainer;

class IndexService
{
    const ID_PREFIX = 'G.Acabinet.';
    const FILE_PREFIX = 'F'; // file

    /** @var UpdateServiceContainer */
    private $updateServiceContainer = null;

    /**
     * IndexService constructor.
     *
     * @param FtsProduct|NULL $fts_product
     */
    public function __construct(FtsProduct $fts_product = null)
    {
        $this->updateServiceContainer
            = new UpdateServiceContainer($fts_product);
    }

    /**
     * @param \GRN_File $file
     *
     * @return \GRN_Cabinet_Folder
     */
    protected function getFolderOfFile(\GRN_File $file)
    {
        $fm = new \GRN_Cabinet_FileManager();

        return $fm->getFolder($file);
    }

    /**
     * @param \GRN_File $file
     *
     * @return void
     */
    public function createFileIndex(\GRN_File $file)
    {
        $id = self::createFileDocumentId($file->getOID());
        $fileBody = $file->getCurrentBody();
        require_once('cabinet/file.csp');
        $folder = $this->getFolderOfFile($file);
        $modifier = $file->get('modifier');
        $modifierId = $modifier ? $modifier->getOID()
            : SearchConstants::DELETED_USER_ID;
        $fileIdentifier = defined('ON_FOREST') ? $fileBody->get('blob')
            : $fileBody->getPath();
        $searchEntry = $this->createFileSearchEntry($id,
            $fileBody->get('name'),
            $fileIdentifier,
            (string)$file->getTitle(),
            (string)$file->getDescription(),
            (int)$modifierId,
            (int)$file->get('mtime')->unix_ts,
            (int)$file->getOID(),
            (int)$folder->getOID());
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->updateIndex($searchEntry);
    }

    /**
     * @return \grn\fts\UpdateServiceContainer
     */
    protected function getUpdateServiceContainer()
    {
        return $this->updateServiceContainer;
    }

    /**
     * @param array  $rows Rows gotten by fetch_assoc from tab_grn_file, tab_grn_filebody and tab_grn_filerelation.
     * @param string $forward
     */
    public function bulkCreateFileIndex(array $rows, $forward)
    {
        $entry = [];
        foreach ($rows as $row) {
            $id = self::createFileDocumentId($row['_id']);
            $modifierId = $row['col_modifier']
                ?: SearchConstants::DELETED_USER_ID;
            $fileIdentifier = defined('ON_FOREST')
                ? $row['col_blob']
                : SearchUtil::getFilePath('cabinet', 'grn_cabinet_filebody',
                    $row['fileId']);
            $entry[] = $this->createFileSearchEntry($id,
                $row['col_name'], $fileIdentifier, (string)$row['col_title'],
                (string)$row['col_description'], (int)$modifierId,
                (int)$row['col_mtime'], (int)$row['_id'],
                (int)$row['col_folder']);
        }
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->bulkUpdateIndex($entry, $forward);
    }

    /**
     * @param \GRN_File $file
     *
     * @return void
     */
    public function updateFileIndex(\GRN_File $file)
    {
        $this->createFileIndex($file);
    }

    /**
     * @param string $fileId
     *
     * @return void
     */
    public function deleteFileIndex($fileId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_CABINET),
            new TermFilter(Fields::fileId(), $fileId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param $folderId
     */
    public function deleteFolderIndex($folderId)
    {
        $query = new AndFilter([
            new TermFilter(Fields::appName(),
                SearchConstants::APPLICATION_CABINET),
            new TermFilter(Fields::folderId(), $folderId)
        ]);
        $updateServiceContainer = $this->getUpdateServiceContainer();
        $updateServiceContainer->deleteByQuery($query);
    }

    /**
     * @param string $id
     * @param string $name
     * @param string $fileIdentifier
     * @param string $title
     * @param string $description
     * @param int    $modifierId
     * @param int    $mtime
     * @param int    $fileId
     * @param int    $folderId
     *
     * @return \grn\fts\SearchEntryInterface
     */
    private function createFileSearchEntry(
        $id,
        $name,
        $fileIdentifier,
        $title,
        $description,
        $modifierId,
        $mtime,
        $fileId,
        $folderId
    ) {
        $searchEntry = SearchUtil::createBaseFileEntry($id, $name,
            $fileIdentifier);
        $searchEntry->addValue(Fields::title(), $title);
        $searchEntry->addValue(Fields::description(), $description);
        $searchEntry->addValue(Fields::modifierId(), $modifierId);
        $searchEntry->addValue(Fields::mtime(), $mtime);
        $searchEntry->addValue(Fields::fileId(), $fileId);
        $searchEntry->addValue(Fields::folderId(), $folderId);
        $searchEntry->addValue(Fields::appName(),
            SearchConstants::APPLICATION_CABINET);
        $searchEntry->setType('cabinet.file');

        return $searchEntry;
    }

    /**
     * @param $fileId
     *
     * @return string "G.Acabinet.F{$fileId}"
     */
    private static function createFileDocumentId($fileId)
    {
        return sprintf("%s%s%u", self::ID_PREFIX, self::FILE_PREFIX, $fileId);
    }
}
