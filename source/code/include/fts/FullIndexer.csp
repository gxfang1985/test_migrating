<?php

namespace grn\fts;

use grn\fts\admin\SolrAdmin;
use grn\fts\bulletin\FullIndexer as BulletinFullIndexer;
use grn\fts\message\FullIndexer as MessageFullIndexer;
use grn\fts\cabinet\FullIndexer as CabinetFullIndexer;
use grn\fts\space\FullIndexer as SpaceFullIndexer;
use grn\fts\mail\FullIndexer as MailFullIndexer;

class FullIndexer
{
    const LONGTEXT_MAX_LENGTH = 100000;

    /** @var \grn\fts\FullIndexerArgValue */
    private $value = null;
    /** @var \grn\fts\ChildProcessHandler */
    private $handler = null;
    /** @var \grn\fts\IndexerLogger */
    private $logger = null;

    /**
     * @param FullIndexerArgValue $ftsArgValue
     * @param IndexerLogger       $logger
     */
    public function __construct(
        FullIndexerArgValue $ftsArgValue,
        IndexerLogger $logger
    ) {
        $this->value = $ftsArgValue;
        $this->logger = $logger;

        // ------Preparing to run a child process------
        $basedir = cb_basedir();
        chdir($basedir);
        $this->handler = new ChildProcessHandler($this->logger, $this->value);
    }

    /**
     */
    public function execute()
    {
        $this->value->exportArgumentFile($this->logger);
        if ( ! defined('ON_FOREST')
             && $this->value->getSearchEngine() == 'solr'
        ) {
            if ($this->value->getProgressInfo()->isInitialState()) {
                $this->initializeSolrCore();
            } else {
                $this->checkInitialized();
            }
        }
        if ($this->value->shouldIndexBulletin()) {
            $this->logger->log("Start indexing of bulletin data.");
            $bulletinIndexer = $this->getBulletinIndexer();
            $bulletinIndexer->execute($this->logger, $this->value);
            $this->logger->log("Finish indexing of bulletin data.");
        }

        if ($this->value->shouldIndexMessage()) {
            $this->logger->log("Start indexing of message data.");
            $messageIndexer = $this->getMessageIndexer();
            $messageIndexer->execute($this->logger, $this->value);
            $this->logger->log("Finish indexing of message data.");
        }

        if ($this->value->shouldIndexCabinet()) {
            $this->logger->log("Start indexing of cabinet data.");
            $cabinetIndexer = $this->getCabinetIndexer();
            $cabinetIndexer->execute($this->logger, $this->value);
            $this->logger->log("Finish indexing of cabinet data.");
        }

        if ($this->value->shouldIndexSpace()) {
            $this->logger->log("Start indexing of space data.");
            $spaceIndexer = $this->getSpaceIndexer();
            $spaceIndexer->execute($this->logger, $this->value);
            $this->logger->log("Finish indexing of space data.");
        }

        if ($this->value->shouldIndexMail()) {
            $this->logger->log("Start indexing of mail data.");
            $mailIndexer = $this->getMailIndexer();
            $mailIndexer->execute($this->logger, $this->value);
            $this->logger->log("Finish indexing of mail data.");
        }
        $this->removeResumeInfoFiles();

        $this->updateSchemaVersion();
    }

    /**
     */
    private function initializeSolrCore()
    {
        $admin = new SolrAdmin($this->logger);
        if ( ! $admin->initializeCore($this->getCoreName())) {
            $this->logger->log("Interrupt full-indexing process.");
            cb_safe_exit(1);
        }
    }

    private function checkInitialized()
    {
        $admin = new SolrAdmin($this->logger);
        if ( ! $admin->hasCore($this->getCoreName())) {
            $this->logger->log("[ERROR] Solr core is not initialized.");
            cb_safe_exit(1);
        }
    }

    private function getCoreName()
    {
        global $G_config_common;
        $appName = $G_config_common->get('Global', 'app_name');
        $util = \CB_CyDECUtil::getInstance();
        $domainId = $util->getDomainID();

        return "{$domainId}_{$appName}";
    }

    private function removeResumeInfoFiles()
    {
        $this->removeFile(FullIndexerArgValue::getArgumentsFilePath());
        $this->removeFile(FullIndexerArgValue::getResumeFilePath());
    }

    /**
     * @param string $filePath
     */
    private function removeFile($filePath)
    {
        if ( ! is_file($filePath)) {
            return;
        }
        if (@unlink($filePath) === false) {
            $this->logger->log("[WARNING] Failed to remove the information files to resume the full indexing.");
            $this->logger->log("Please remove the file by yourself: {$filePath}");
        }
    }

    /**
     * @return mail\FullIndexer
     */
    protected function getMailIndexer()
    {
        return new MailFullIndexer($this);
    }

    /**
     * @return space\FullIndexer
     */
    protected function getSpaceIndexer()
    {
        return new SpaceFullIndexer($this);
    }

    /**
     * @return cabinet\FullIndexer
     */
    protected function getCabinetIndexer()
    {
        return new CabinetFullIndexer($this);
    }

    /**
     * @return message\FullIndexer
     */
    protected function getMessageIndexer()
    {
        return new MessageFullIndexer($this);
    }

    /**
     * @return bulletin\FullIndexer
     */
    protected function getBulletinIndexer()
    {
        return new BulletinFullIndexer($this);
    }

    /**
     * @return \grn\fts\ChildProcessHandler
     */
    public function getHandler()
    {
        return $this->handler;
    }

    /**
     */
    private function updateSchemaVersion()
    {
        $db = cb_get_master_db();
        $db->reconnect(); // avoiding the connection timeout caused by mysql long sleep
        Application::updateSchemaVersionToLatest();
    }
}
