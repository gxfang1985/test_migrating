<?php

require_once('developer/azunit.csp');
require_once('address/application.csp');
require_once(cb_basedir() . '/code/plugin/grn/address/cyde.csp');

class test_grn_address_cyde_book extends CB_TestCase
{
    var $_uum = null;
    var $_table_manager = null;
    var $_unique_text = null;

    function test_grn_address_cyde_book($test_method)
    {
        parent::CB_TestCase($test_method);

        global $G_container_base;
        $this->_uum =& $G_container_base->getInstance('uum');
        $this->_table_manager
            =& $G_container_base->getInstance('table_manager');
        $this->_unique_text = $test_method . time();
        mt_srand(time());
    }

    var $_children
        = [
            GRN_ADDRESS_DATA_SHARED  => [],
            GRN_ADDRESS_DATA_PRIVATE => []
        ];

    function _newBook($data_type, $unique_text, & $properties)
    {
        if (GRN_ADDRESS_DATA_SHARED == $data_type) {
            $properties['display_name'] = $unique_text;
            $properties['id'] = $unique_text;
        } elseif (GRN_ADDRESS_DATA_PRIVATE == $data_type) {
            $user =& $this->_addUser($unique_text);

            $properties['display_name'] = $unique_text;
            $properties['user'] =& $user;
        } else {
            assert('FALSE');
        }

        $class_name = 'GRN_Address_' . $data_type . 'Book';
        $table_info =& $this->_table_manager->getTableInfo($class_name);

        $row =& $table_info->newRow();
        foreach (array_keys($properties) as $key) {
            $row->set($key, $properties[$key]);
        }
        $row->registerNow();

        return new GRN_Address_Cyde_Book($data_type,
            $this->_children[$data_type], $row);
    }

    function _removeBook(& $book)
    {
        $book->delete();
    }

    var $_users = [];

    function &_addUser($unique_text)
    {
        $unique_text = md5($unique_text);
        $properties = [
            'display_name' => $unique_text,
            'foreign_key'  => $unique_text
        ];

        $user =& $this->_uum->addUser($properties);
        $this->_users[$user->getOID()] =& $user;

        return $user;
    }

    function _removeUser(& $user)
    {
        $this->_uum->removeUser($user->getOID());
    }

    function _validateObject(& $object, $properties, $class_name = null)
    {
        if ( ! is_null($class_name)) {
            assert('is_object( $object ) && is_a( $object, $class_name )');
        }

        foreach (array_keys($properties) as $key) {
            $value1 =& $properties[$key];
            $value2 =& $object->getProperty($key);

            if (is_object($value1) && is_object($value2)) {
                assert('$value1->getOID() == $value2->getOID()');
            } else {
                assert('$value1 == $value2');
            }
        }
    }

    function _validateModelObject(& $object, $properties, $class_name = null)
    {
        if ( ! is_null($class_name)) {
            assert('is_object( $object ) && is_a( $object, $class_name )');
        }

        foreach (array_keys($properties) as $key) {
            $value1 =& $properties[$key];
            $value2 =& $object->get($key);

            if (is_object($value1) && is_object($value2)) {
                assert('$value1->getOID() == $value2->getOID()');
            } else {
                assert('$value1 == $value2');
            }
        }
    }

    function _validateProperties($properties1, $properties2)
    {
        foreach (array_keys($properties1) as $key) {
            $value1 =& $properties1[$key];
            $value2 =& $properties2[$key];

            if (is_object($value1) && is_object($value2)) {
                assert('$value1->getOID() == $value2->getOID()');
            } else {
                assert('$value1 == $value2');
            }
        }
    }

    function test_setProperty1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->setProperty(null, 'hoge');

        $this->_removeBook($book);
    }

    function test_setProperty2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->setProperty('', 'hoge');

        $this->_removeBook($book);
    }

    function test_setProperty3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $retval = $book->setProperty('hoge', 'hoge');
        assert('FALSE === $retval');

        $this->_removeBook($book);
    }

    function test_setProperty4()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $properties = [];
        foreach ($arg3 as $key => $value) {
            $properties[$key] = strrev($value);
            $book->setProperty($key, $properties[$key]);
        }
        $this->_validateObject($book, $properties);

        $this->_removeBook($book);
    }

    function test_setProperties1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->setProperties(null);

        $this->_removeBook($book);
    }

    function test_setProperties2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->setProperties([]);

        $this->_removeBook($book);
    }

    function test_setProperties3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $properties = [];
        foreach ($arg3 as $key => $value) {
            $properties[$key] = strrev($value);
        }
        $book->setProperties($properties);
        $this->_validateObject($book, $properties);

        $this->_removeBook($book);
    }

    function test_getProperty1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->getProperty(null);

        $this->_removeBook($book);
    }

    function test_getProperty2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->getProperty('');

        $this->_removeBook($book);
    }

    function test_getProperty3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $value = $book->getProperty('hoge');
        assert('FALSE === $value');

        $this->_removeBook($book);
    }

    function test_getProperty4()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        foreach (array_keys($arg3) as $key) {
            $value1 =& $arg3[$key];
            $value2 =& $book->getProperty($key);

            assert('$value1 == $value2');
        }

        $this->_removeBook($book);
    }

    function test_getProperties()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $properties = $book->getProperties();
        $this->_validateProperties($arg3, $properties);

        $this->_removeBook($book);
    }

    function test_getOID()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $book->getOID();

        $this->_removeBook($book);
    }

    function test_delete()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $retval = $book->delete();
        assert('TRUE === $retval');
        $retval = $book->delete();
        assert('FALSE === $retval');

        $this->_removeBook($book);
    }

    function test_addData1()
    {
        $args = [null];
        $values = [false, null, '', 'hoge'];

        $arg = [];
        foreach ($values as $company_name) {
            foreach ($values as $company_sort_key) {
                foreach ($values as $personal_name) {
                    foreach ($values as $personal_sort_key) {
                        if (0 == @ strlen($company_name)
                            || 0 == @ strlen($company_sort_key)
                            || 0 == @ strlen($personal_name)
                            || 0 == @ strlen($personal_sort_key)
                        ) {
                            $arg = [];
                            if (false !== $company_name) {
                                $arg['company_name'] = $company_name;
                            }
                            if (false !== $company_sort_key) {
                                $arg['company_sort_key'] = $company_sort_key;
                            }
                            if (false !== $personal_name) {
                                $arg['personal_name'] = $personal_name;
                            }
                            if (false !== $personal_sort_key) {
                                $arg['personal_sort_key'] = $personal_sort_key;
                            }
                            $args[] = $arg;
                        }
                    }
                }
            }
        }

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        foreach ($args as $arg) {
            $this->expectError('PHP99999');
            $book->addData($arg);
        }

        $this->_removeBook($book);
    }

    function test_addData2()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'company_name'      => $unique_text,
            'company_sort_key'  => $unique_text,
            'personal_name'     => $unique_text,
            'personal_sort_key' => $unique_text
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $data =& $book->addData($properties);
        $this->_validateObject($data, $properties, 'GRN_Address_Cyde_Data');
        $data->delete();

        $this->_removeBook($book);
    }

    function test_getData1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->getData(null);

        $this->_removeBook($book);
    }

    function test_getData2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->getData('');

        $this->_removeBook($book);
    }

    function test_getData3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $data =& $book->getData(19741229);
        assert('FALSE === $data');

        $this->_removeBook($book);
    }

    function test_getData4()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'company_name'      => $unique_text,
            'company_sort_key'  => $unique_text,
            'personal_name'     => $unique_text,
            'personal_sort_key' => $unique_text
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $data =& $book->addData($properties);
        $data =& $book->getData($data->getOID());
        $this->_validateObject($data, $properties);
        $data->delete();

        $this->_removeBook($book);
    }

    function test_listDatas()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $data_count = mt_rand(5, 10);
        $properties_list = [];
        for ($i = 0; $i < $data_count; $i++) {
            $unique_text = md5($this->_unique_text . $i);
            $properties = [
                'company_name'      => $unique_text,
                'company_sort_key'  => $unique_text,
                'personal_name'     => $unique_text,
                'personal_sort_key' => $unique_text
            ];
            $data =& $book->addData($properties);
            $properties_list[$data->getOID()] = $properties;
        }

        $datas = $book->listDatas();

        foreach (array_keys($datas) as $data_id) {
            $data =& $datas[$data_id];
            $properties = $properties_list[$data_id];
            $this->_validateObject($data, $properties);
            $data->delete();
        }

        $this->_removeBook($book);
    }

    function test_addItem1()
    {
        $args = [];
        $values = [false, null, '', 'Hoge'];
        foreach ($values as $id) {
            foreach ($values as $display_name) {
                if (0 == @ strlen($id) || 0 == @ strlen($display_name)) {
                    $arg = [];
                    if (false !== $id) {
                        $arg['id'] = $id;
                    }
                    if (false !== $display_name) {
                        $arg['display_name'] = $display_name;
                    }
                    $args[] = $arg;
                }
            }
        }

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        foreach ($args as $arg) {
            $this->expectError('PHP99999');
            $book->addItem($arg);
        }

        $this->_removeBook($book);
    }

    function test_addItem2()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $item =& $book->addItem($properties);

        $this->expectError('PHP99999');
        $book->addItem($properties);

        $book->removeItem($item->getOID());

        $this->_removeBook($book);
    }

    function test_addItem3()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $item =& $book->addItem($properties);
        $this->_validateModelObject($item, $properties,
            'GRN_Address_' . $arg1 . 'Item');
        $book->removeItem($item->getOID());

        $this->_removeBook($book);
    }

    function test_getItem1()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->getItem(null);

        $this->_removeBook($book);
    }

    function test_getItem2()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->getItem('');

        $this->_removeBook($book);
    }

    function test_getItem3()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $item = $book->getItem(19741229);
        assert('FALSE === $item');

        $this->_removeBook($book);
    }

    function test_getItem4()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $item =& $book->addItem($properties);

        $item =& $book->getItem($item->getOID());
        $this->_validateModelObject($item, $properties,
            'GRN_Address_' . $arg1 . 'Item');

        $book->removeItem($item->getOID());

        $this->_removeBook($book);
    }

    function test_setItemProperties1()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $args1 = [null, '', 19741229];
        $args2 = [null, [], ['hoge' => 'fuga']];

        foreach ($args1 as $arg1) {
            foreach ($args2 as $arg2) {
                if (0 == @ strlen($arg1) || 0 == @ count($arg2)) {
                    $this->expectError('PHP99999');
                    $book->setItemProperties($arg1, $arg2);
                }
            }
        }

        $this->_removeBook($book);
    }

    function test_setItemProperties2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $item_count = mt_rand(5, 10);
        $items = [];
        $properties_list = [];
        for ($i = 0; $i < $item_count; $i++) {
            $unique_text = md5($this->_unique_text . $i);
            $properties = [
                'display_name' => $unique_text,
                'id'           => $unique_text,
                'type'         => GRN_ADDRESS_ITEM_STRING,
                'setting'      => $unique_text,
                'necessary'    => true
            ];

            $item =& $book->addItem($properties);

            $item_id = $item->getOID();
            $items[$item_id] =& $item;
            $properties_list[$item_id] = $properties;
        }

        $item_ids = array_keys($items);

        $id1 = $item_ids[0];
        $id2 = $item_ids[1];

        $item =& $items[$id1];
        $properties = ['id' => $item->get('id')];

        $this->expectError('PHP99999');
        $book->setItemProperties($id2, $properties);

        $this->_removeBook($book);
    }

    function test_setItemProperties3()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $retval = $book->setItemProperties(19741229, $properties);
        assert('FALSE === $retval');

        $this->_removeBook($book);
    }

    function test_setItemProperties4()
    {
        $unique_text = md5($this->_unique_text);
        $properties1 = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $properties2 = [];
        foreach ($properties1 as $key => $value) {
            $properties2[$key] = strrev($value);
        }

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $item =& $book->addItem($properties1);
        $retval = $book->setItemProperties($item->getOID(), $properties2);
        assert('TRUE === $retval');

        $this->_validateModelObject($item, $properties2,
            'GRN_Address_SharedItem');

        $book->removeItem($item->getOID());
        $this->_removeBook($book);
    }

    function test_removeItem1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->removeItem(null);

        $this->_removeBook($book);
    }

    function test_removeItem2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $this->expectError('PHP99999');
        $book->removeItem('');

        $this->_removeBook($book);
    }

    function test_removeItem3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $retval = $book->removeItem(19741229);
        assert('FALSE === $retval');

        $this->_removeBook($book);
    }

    function test_removeItem4()
    {
        $unique_text = md5($this->_unique_text);
        $properties = [
            'display_name' => $unique_text,
            'id'           => $unique_text,
            'type'         => GRN_ADDRESS_ITEM_STRING,
            'setting'      => $unique_text,
            'necessary'    => true
        ];

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = md5($this->_unique_text);
        $arg3 = [];
        $book =& $this->_newBook($arg1, $arg2, $arg3);

        $item =& $book->addItem($properties);
        $item_id = $item->getOID();
        $retval = $book->removeItem($item_id);
        assert('TRUE === $retval');
        $item =& $book->getItem($item_id);
        assert('FALSE === $item');

        $this->_removeBook($book);
    }

}

cb_test_run();

?>
