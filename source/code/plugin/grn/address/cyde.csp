<?php

/**
 * Implements for CyDE.
 *
 * @package grn.address
 * @author  YOSHIDA, Hideyasu 2005/01
 * @version 1.0
 */

require_once('address/interface.csp');
require_once('address/table.csp');
require_once('grn/application.csp');
require_once('grn/controller.csp');

/**
 * The factory class to create instances of GRN_Address_Cyde_Book class.
 *
 * @package grn.address
 * @abstract
 */
class plugin_grn_address_cyde extends GRN_Address_BookFactoryBase
{
    /**
     * コンストラクタ
     */
    function __construct()
    {
    }

    /**
     * Create an instance of GRN_Address_Cyde_Book class
     *
     * @param string           $data_type 'Private' or 'Shared'
     * @param array            $children  unused
     * @param GRN_Address_Book $row
     *
     * @return GRN_Address_Cyde_Book
     */
    function newBook($data_type, & $children, $row)
    {
        assert('is_string( $data_type ) && 0 < strlen( $data_type )');
        assert('is_array( $children )');
        assert('is_object( $row ) && is_a( $row, \'GRN_Address_Book\' )');
        $ret = new GRN_Address_Cyde_Book($data_type, $this->_books, $row);

        return $ret;
    }

}

/**
 * アドレスブッククラス for CyDE
 *
 * @package grn.address
 */
class GRN_Address_Cyde_Book extends GRN_Address_BookBase
{
    /**
     * @access private
     * @var GRN_TableManager
     */
    var $_table_manager = null;
    /**
     * @access private
     * @var CB_DatabaseConnection
     */
    var $_dbconn = null;
    /**
     * @access private
     * @var GRN_Uum
     */
    var $_uum = null;
    /**
     * @access private
     * @var string 'Private' or 'Shared'
     */
    var $_data_type = null;
    /**
     * @access private
     * @var null always NULL
     */
    var $_children = null;
    /**
     * @access private
     * @var GRN_Address_Book
     */
    var $_row = null;

    /**
     * @param string           $data_type 'Private' or 'Shared'
     * @param null             $children
     * @param GRN_Address_Book $row
     */
    function __construct($data_type, & $children, $row)
    {
        global $G_container_base;
        $app_locator = GRN_ApplicationLocator::instance();
        $this->_dbconn = $app_locator->getConnection('address');
        $this->_table_manager = $app_locator->getTableManager('address');
        $this->_uum = $G_container_base->getInstance('uum');

        $this->_data_type = $data_type;
        $this->_children =& $children;
        $this->_row = $row;
    }

    /**
     * カラム一覧を取得する
     *
     * @access private
     */
    function listColumns()
    {
        $columns = [];
        if (GRN_ADDRESS_DATA_PRIVATE == $this->_data_type) {
            $columns = [
                'display_name',
                'type',
                'user'
            ];
        } else {
            $columns = [
                'display_name',
                'type',
                'id'
            ];
        }
        $columns[] = 'creator';
        $columns[] = 'creator_name';
        $columns[] = 'ctime';
        $columns[] = 'modifier';
        $columns[] = 'modifier_name';
        $columns[] = 'mtime';

        return $columns;
    }

    /**
     * プロパティを設定する
     */
    function setProperty($key, $value, $command = 'modify')
    {
        assert('is_string( $key ) && 0 < strlen( $key )');

        if ($this->_row->set($key, $value)) {
            $this->_row->inspect($command, $this->_uum->getLoginUser());
            $this->_row->updateNow();

            // 監査する
            require_once('address/inspection.csp');
            $inspection = GRN_Address_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $value =& $this->_row->get($key);

                switch ($command) {
                    case 'create':
                        $section = GRN_ADDRESS_INSPECTION_CREATE;
                        break;
                    case 'modify':
                        $section = GRN_ADDRESS_INSPECTION_ORDER;
                        break;
                    default:
                        cb_throw_error();
                }
                switch ($this->_data_type) {
                    case GRN_ADDRESS_DATA_PRIVATE:
                        $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_BOOK;
                        break;
                    case GRN_ADDRESS_DATA_SHARED:
                        $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_BOOK;
                        break;
                    default:
                        cb_throw_error();
                }
                $params = ['bid' => $this->_row->getOID()];
                $informations = [$key => & $value];

                $inspection->record($section, $message, $params, $informations);
            }

            return true;
        }

        return false;
    }

    /**
     * プロパティ一覧を設定する
     */
    function setProperties($properties, $command = 'modify')
    {
        assert('is_array( $properties ) && 0 < count( $properties )');

        $columns = $this->listColumns();

        $is_update = false;
        $informations = [];
        foreach ($columns as $column) {
            if (array_key_exists($column, $properties)) {
                if ($this->_row->set($column, $properties[$column])) {
                    $is_update = true;
                    $informations[$column] = $this->_row->get($column);
                }
            }
        }

        if ($is_update) {
            $this->_row->inspect($command, $this->_uum->getLoginUser());
            $this->_row->updateNow();

            if (GRN_ADDRESS_DATA_SHARED == $this->_data_type) {
                // 監査する
                require_once('address/inspection.csp');
                $inspection = GRN_Address_Inspection::getInstance();
                if ($inspection->isEnabled()) {
                    switch ($command) {
                        case 'create':
                            $section = GRN_ADDRESS_INSPECTION_CREATE;
                            break;
                        case 'modify':
                            $section = GRN_ADDRESS_INSPECTION_MODIFY;
                            break;
                        default:
                            cb_throw_error();
                    }
                    $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_BOOK;
                    $params = ['bid' => $this->_row->getOID()];

                    $inspection->record($section, $message, $params,
                        $informations);
                }
            }
        }
    }

    /**
     * プロパティを取得する
     */
    function &getProperty($key)
    {
        assert('! is_null( $key ) && 0 < strlen( $key )');
        $ret = $this->_row->get($key);

        return $ret;
    }

    /**
     * プロパティ一覧を取得する
     */
    function getProperties()
    {
        $columns = $this->listColumns();

        $properties = [];
        foreach ($columns as $column) {
            $properties[$column] =& $this->_row->get($column);
        }

        return $properties;
    }

    /**
     * ブックタイプを取得する
     */
    function getBookType()
    {
        return 'cyde';
    }

    /**
     * データタイプを取得する
     */
    function getDataType()
    {
        return $this->_data_type;
    }

    /**
     * オブジェクトIDを取得する
     */
    function getOID()
    {
        return $this->_row->getOID();
    }

    /**
     * テーブル行を取得する
     */
    function getRow()
    {
        return $this->_row;
    }

    /**
     * 破棄する
     */
    function delete()
    {
        if (is_null($this->_row)) {
            return false;
        }
        unset($this->_children[$this->_row->getOID()]);

        // 監査する
        require_once('address/inspection.csp');
        $inspection = GRN_Address_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $section = GRN_ADDRESS_INSPECTION_DELETE;
            switch ($this->_data_type) {
                case GRN_ADDRESS_DATA_PRIVATE:
                    $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_BOOK;
                    break;
                case GRN_ADDRESS_DATA_SHARED:
                    $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_BOOK;
                    break;
                default:
                    cb_throw_error();
            }
            $params = ['bid' => $this->_row->getOID()];

            $inspection->record($section, $message, $params);
        }

        $data_table_info = $this->_getDataTableInfo();
        $rowset = new CB_MultiRowSet($data_table_info, 'd');

        $itemdata_table_info = $this->_getItemDataRelationTableInfo();
        $rowset->addJoin($itemdata_table_info, 'd._id = r.col_data',
            CB_DATABASE_LEFT_JOIN, 'r');

        $rowset->addCondition('d.col_book = \'' . $this->_row->getOID()
                              . '\' AND ( ( d.col_image IS NOT NULL ) OR ( r.col_file IS NOT NULL ) )');
        while ( ! is_null($rows =& $rowset->iterate())) {
            if ($row = $rows['d']) {
                $file = $row->get('image');
                if (is_object($file)) {
                    $file->delete();
                }
            }
            if ($row = $rows['r']) {
                $file = $row->get('file');
                if (is_object($file)) {
                    $file->delete();
                }
            }
        }

        if ($this->_data_type == GRN_ADDRESS_DATA_SHARED) {
            $rowset = new CB_MultiRowSet($data_table_info, 'd');
            $rowset->addCondition('d.col_book = \'' . $this->_row->getOID()
                                  . '\'');

            require_once('report/partner_logic.csp');
            while ( ! is_null($rows =& $rowset->iterate())) {
                $row = $rows['d'];
                GRN_Report_Partner_Logic::getInstance()
                                        ->deleteAllByAddressId($row->getOID());
            }
        }

        $this->_row->delete();
        $this->_row = null;

        return true;
    }

    /**
     * アドレスデータテーブル情報を取得する
     *
     * @access private
     *
     * @return GRN_TableInfo
     */
    function _getDataTableInfo()
    {
        $class_name = 'GRN_Address_' . $this->_data_type . 'Data';
        $ret = $this->_getTableInfo($class_name);

        return $ret;
    }

    /**
     * アドレス拡張項目とアドレスデータの関連付けテーブル情報を取得する
     *
     * @access private
     *
     * @return GRN_TableInfo
     */
    function _getItemDataRelationTableInfo()
    {
        $class_name = 'GRN_Address_Item' . $this->_data_type . 'DataRelation';
        $ret = $this->_getTableInfo($class_name);

        return $ret;
    }

    /**
     * アドレス拡張項目テーブル情報を取得する
     *
     * @access private
     *
     * @return GRN_TableInfo
     */
    function _getItemTableInfo()
    {
        $class_name = 'GRN_Address_' . $this->_data_type . 'Item';
        $ret = $this->_getTableInfo($class_name);

        return $ret;
    }

    /**
     * @access private
     * @var GRN_TableInfo[]
     */
    var $_table_infos = [];

    /**
     * テーブル情報を取得する
     *
     * @access private
     *
     * @param string $class_name
     *
     * @return GRN_TableInfo
     */
    function _getTableInfo($class_name)
    {
        if ( ! array_key_exists($class_name, $this->_table_infos)) {
            $this->_table_infos[$class_name]
                = $this->_table_manager->getTableInfo($class_name);
        }

        return $this->_table_infos[$class_name];
    }

    /**
     * @access private
     */
    var $_datas = [];

    /**
     * アドレスデータを新規作成する
     *
     * @access private
     * @return GRN_Address_Cyde_Data
     */
    function _newData($row)
    {
        $ret = new GRN_Address_Cyde_Data($this->_data_type, $this,
            $this->_datas, $row);

        return $ret;
    }

    /**
     * アドレスデータを取得する
     *
     * @return GRN_Address_Cyde_Data
     */
    function getData($data_id)
    {
        assert('0 < strlen( $data_id )');

        if ( ! array_key_exists($data_id, $this->_datas)) {
            $table_info = $this->_getDataTableInfo();
            $rowset = new CB_RowSet($table_info);
            $rowset->addCondition('col_book = ' . $this->getOID());
            $condition = $rowset->queryf('_id = \'@S\' AND col_book = \'@S\'',
                $data_id, $this->getOID());
            $rowset->addCondition($condition);
            if ( ! ($row = $rowset->iterate())) {
                $ret = false;

                return $ret;
            }
            $data = $this->_newData($row);
            $data_id = $data->getOID();

            $datas = [];
            $datas[$data_id] = $data;
            $this->_datas[$data_id] = $data;

            $this->_setItems($datas);
            $this->_setItemDatas($datas);
        }

        return $this->_datas[$data_id];
    }

    /**
     * アドレスデータ一覧を取得する
     */
    function listDatas(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_subject, _id',
        $additional_condition = null
    ) {
        $table_info = $this->_getDataTableInfo();
        $rowset = new CB_RowSet($table_info);

        $rowset->addCondition('col_book = ' . $this->_row->getOID());
        if ( ! is_null($additional_condition)) {
            $rowset->addCondition($additional_condition);
        }
        if ( ! is_string($order_by) || 0 == strlen($order_by)) {
            $order_by = '_id';
        }
        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);

        $datas = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $data_id = $row->getOID();
            if ( ! array_key_exists($data_id, $this->_datas)) {
                $this->_datas[$data_id] = $this->_newData($row);
            }
            $datas[$data_id] = $this->_datas[$data_id];
        }

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        return $datas;
    }

    function listDatas_nocache(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_subject, _id',
        $additional_condition = null
    ) {
        $data_table = $this->_getDataTableInfo();
        $item_table = $this->_getItemTableInfo();
        $item_data_table = $this->_getItemDataRelationTableInfo();

        //disable persistent layer cache
        $tmp_data_cache_limit = $data_table->_cache_limit;
        $tmp_item_cache_limit = $item_table->_cache_limit;
        $tmp_item_data_cache_limit = $item_data_table->_cache_limit;
        $data_table->_cache_limit = 0;
        $item_table->_cache_limit = 0;
        $item_data_table->_cache_limit = 0;

        $rowset = new CB_RowSet($data_table);

        $rowset->addCondition('col_book = ' . $this->_row->getOID());
        if ( ! is_null($additional_condition)) {
            $rowset->addCondition($additional_condition);
        }
        if ( ! is_string($order_by) || 0 == strlen($order_by)) {
            $order_by = '_id';
        }
        $rowset->addOrderColumn($order_by);
        $rowset->limit($offset, $limit);

        $datas = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $data_id = $row->getOID();
            $datas[$data_id] = $this->_newData($row);
        }

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        //recover cache setting
        $data_table->_cache_limit = $tmp_data_cache_limit;
        $item_table->_cache_limit = $tmp_item_cache_limit;
        $item_data_table->_cache_limit = $tmp_item_data_cache_limit;

        return $datas;
    }

    function _listItemDatasFast(& $datas, & $files)
    {
        if ( ! is_array($datas) || 0 == count($datas)) {
            return;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('address');

        $table_name = strtolower('tab_grn_address_item' . $this->_data_type
                                 . 'datarelation');
        $join_table_name = strtolower('tab_grn_address_' . $this->_data_type
                                      . 'item');
        $columns = [
            $table_name . '._id',
            'col_data',
            'col_item',
            'col_string',
            'col_file',
            'col_type'
        ];

        $table_name = $table_name . ' INNER JOIN ' . $join_table_name . ' ON ' .
                      $table_name . '.col_item = ' . $join_table_name . '._id';

        $condition = $dbconn->format('WHERE col_data IN (@A)',
            [array_keys($datas)]);

        $query_format = 'SELECT %s FROM %s %s';
        $query = sprintf($query_format, implode(', ', $columns),
            $table_name,
            $condition);

        $query = $dbconn->select_format($query, 0, -1);
        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row_count = $dbconn->num_rows($result);

            for ($i = 0; $i < $row_count; $i++) {
                $row = $dbconn->fetch_assoc($result);
                if (is_array($row) && 0 < count($row)) {
                    $data_id = $row['col_data'];
                    $item_id = $row['col_item'];
                    if (GRN_ADDRESS_ITEM_FILE == $row['col_type']) {
                        if ( ! is_null($file_id = $row['col_file'])) {
                            $datas[$data_id][$item_id] = null;
                            $files[$file_id]
                                =& $datas[$data_id][$item_id];
                        }
                    } else {
                        $datas[$data_id][$item_id] = $row['col_string'];
                    }
                }
            }
        }
    }

    function _listFileFast(& $files)
    {
        if ( ! is_array($files) || 0 == count($files)) {
            return;
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('address');

        $table_name = 'tab_grn_address_filebody';
        $columns = [
            'col_file',
            'col_name',
            'col_mime'
        ];

        $conditions = [];
        foreach (array_keys($files) as $file_id) {
            $conditions[] = '( col_file = ' . $file_id . ' )';
        }
        $condition = null;
        if (0 < count($conditions)) {
            $condition = 'WHERE ' . implode(' OR ', $conditions);
        }

        $query_format = 'SELECT %s FROM %s %s ORDER BY _id';
        $query = sprintf($query_format, implode(', ', $columns),
            $table_name,
            $condition);

        $query = $dbconn->select_format($query, 0, -1);
        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row_count = $dbconn->num_rows($result);

            $datas = [];
            for ($i = 0; $i < $row_count; $i++) {
                $row = $dbconn->fetch_assoc($result);
                if (is_array($row) && 0 < count($row)) {
                    $file_id = $row['col_file'];
                    $files[$file_id] = [
                        'oid'  => $file_id,
                        'name' => $row['col_name'],
                        'mime' => $row['col_mime']
                    ];
                }
            }
        }
    }

    /**
     * アドレスデータ一覧を取得する（高速化バージョン）
     */
    function listDatasFast(
        $offset = 0,
        $limit = -1,
        $order_by = 'col_subject, _id',
        $add_condition = null
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('address');

        $table_name = strtolower('tab_grn_address_' . $this->_data_type
                                 . 'data');
        $columns = [
            '_id',
            'col_company_name',
            'col_company_sort_key',
            'col_company_telephone_number',
            'col_description',
            'col_email_address',
            'col_facsimile_number',
            'col_family_name',
            'col_family_sort_key',
            'col_given_name',
            'col_given_sort_key',
            'col_image',
            'col_map',
            'col_personal_telephone_number',
            'col_physical_address',
            'col_post_name',
            'col_route',
            'col_route_fare',
            'col_route_time',
            'col_section_name',
            'col_subject',
            'col_url',
            'col_zip_code'
        ];

        $book_id = $this->_row->getOID();

        if (0 < strlen($add_condition)) {
            $add_condition = '( ' . $add_condition . ' ) AND ';
        } else {
            $add_condition = '';
        }
        $add_condition .= '( col_book = ' . $book_id . ' )';

        if (0 < strlen($order_by)) {
            $order_by = 'ORDER BY ' . $order_by;
        }
        $query_format = 'SELECT %s FROM %s WHERE %s %s';
        $query = sprintf($query_format, implode(', ', $columns),
            $table_name,
            $add_condition,
            $order_by);

        if (GRN_ADDRESS_DATA_PRIVATE == $this->_data_type) {
            $book_id = -1;
        }

        $query = $dbconn->select_format($query, $offset, $limit);
        if (cb_is_db_result($result = $dbconn->query($query))) {
            $row_count = $dbconn->num_rows($result);

            $datas = [];
            $files = [];
            for ($i = 0; $i < $row_count; $i++) {
                $row = $dbconn->fetch_assoc($result);
                if (is_array($row) && 0 < count($row)) {
                    $card_id = $row['_id'];
                    $datas[$card_id] = [
                        '_id'                       => $card_id,
                        'company_name'              => $row['col_company_name'],
                        'company_sort_key'          => $row['col_company_sort_key'],
                        'company_telephone_number'  => $row['col_company_telephone_number'],
                        'description'               => $row['col_description'],
                        'email_address'             => $row['col_email_address'],
                        'facsimile_number'          => $row['col_facsimile_number'],
                        'family_name'               => $row['col_family_name'],
                        'family_sort_key'           => $row['col_family_sort_key'],
                        'given_name'                => $row['col_given_name'],
                        'given_sort_key'            => $row['col_given_sort_key'],
                        'image'                     => null,
                        'map'                       => $row['col_map'],
                        'personal_telephone_number' => $row['col_personal_telephone_number'],
                        'physical_address'          => $row['col_physical_address'],
                        'post_name'                 => $row['col_post_name'],
                        'route'                     => $row['col_route'],
                        'route_fare'                => $row['col_route_fare'],
                        'route_time'                => $row['col_route_time'],
                        'section_name'              => $row['col_section_name'],
                        'subject'                   => $row['col_subject'],
                        'url'                       => $row['col_url'],
                        'zip_code'                  => $row['col_zip_code'],
                        'sso'                       => [
                            'bid' => $book_id,
                            'cid' => $card_id
                        ]
                    ];

                    if ( ! is_null($file_id = $row['col_image'])) {
                        $files[$file_id] =& $datas[$card_id]['image'];
                    }
                }
            }

            $this->_listItemDatasFast($datas, $files);
            $this->_listFileFast($files);

            return $datas;
        }

        return null;
    }

    /**
     * @param int         $offset
     * @param int         $limit
     * @param string|null $additional_condition
     *
     * @return array
     */
    public function listDatasByPronunciationFast(
        $offset = 0,
        $limit = -1,
        $additional_condition
    ) {
        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('address');

        $table_name = strtolower('tab_grn_address_' . $this->_data_type
                                 . 'data');
        $columns = [
            '_id',
            'col_company_name',
            'col_company_sort_key',
            'col_company_telephone_number',
            'col_description',
            'col_email_address',
            'col_facsimile_number',
            'col_family_name',
            'col_family_sort_key',
            'col_given_name',
            'col_given_sort_key',
            'col_image',
            'col_map',
            'col_personal_telephone_number',
            'col_physical_address',
            'col_post_name',
            'col_route',
            'col_route_fare',
            'col_route_time',
            'col_section_name',
            'col_subject',
            'col_url',
            'col_zip_code'
        ];

        $book_id = $this->_row->getOID();

        $condition = "col_book = '@S'";
        if (strlen($additional_condition) !== 0) {
            $condition = "( ${additional_condition} ) AND ( $condition )";
        }

        $condition = $dbconn->format($condition, [$book_id]);
        $column_list = join(', ', $columns);

        $query
            = <<<SQL
SELECT ${column_list} FROM ${table_name}
WHERE ${condition}
SQL;
        $query .= $this->getOrderClauseForListDatasFast();

        if (GRN_ADDRESS_DATA_PRIVATE == $this->_data_type) {
            $book_id = -1;
        }

        $query = $dbconn->select_format($query, $offset, $limit);
        $result = $dbconn->query($query);
        $row_count = $dbconn->num_rows($result);

        $datas = [];
        $files = [];
        for ($i = 0; $i < $row_count; $i++) {
            $row = $dbconn->fetch_assoc($result);
            if (is_array($row) && 0 < count($row)) {
                $card_id = $row['_id'];
                $datas[$card_id] = [
                    '_id'                       => $card_id,
                    'company_name'              => $row['col_company_name'],
                    'company_sort_key'          => $row['col_company_sort_key'],
                    'company_telephone_number'  => $row['col_company_telephone_number'],
                    'description'               => $row['col_description'],
                    'email_address'             => $row['col_email_address'],
                    'facsimile_number'          => $row['col_facsimile_number'],
                    'family_name'               => $row['col_family_name'],
                    'family_sort_key'           => $row['col_family_sort_key'],
                    'given_name'                => $row['col_given_name'],
                    'given_sort_key'            => $row['col_given_sort_key'],
                    'image'                     => null,
                    'map'                       => $row['col_map'],
                    'personal_telephone_number' => $row['col_personal_telephone_number'],
                    'physical_address'          => $row['col_physical_address'],
                    'post_name'                 => $row['col_post_name'],
                    'route'                     => $row['col_route'],
                    'route_fare'                => $row['col_route_fare'],
                    'route_time'                => $row['col_route_time'],
                    'section_name'              => $row['col_section_name'],
                    'subject'                   => $row['col_subject'],
                    'url'                       => $row['col_url'],
                    'zip_code'                  => $row['col_zip_code'],
                    'sso'                       => [
                        'bid' => $book_id,
                        'cid' => $card_id
                    ]
                ];

                if ( ! is_null($file_id = $row['col_image'])) {
                    $files[$file_id] =& $datas[$card_id]['image'];
                }
            }
        }

        $this->_listItemDatasFast($datas, $files);
        $this->_listFileFast($files);

        return $datas;
    }

    /**
     * Search addresses by specified texts and sort them by pronunciation.
     *
     * @param int   $offset
     * @param int   $limit
     * @param array $texts        list of text to search
     * @param bool  $is_sensitive case sensitive matching or not
     * @param array $builtin_items
     *
     * @return array
     */
    function listFTSDatasByPronunciationFast(
        $offset = 0,
        $limit = -1,
        array $texts,
        $is_sensitive,
        array $builtin_items
    ) {
        $addressDatabase = new GRN_Address_DataBase();
        $columns = $addressDatabase->listColumns(true);

        unset($columns[22]);  // image

        $builtin_items['given_name'] = $builtin_items['personal_name'];
        $builtin_items['family_name'] = $builtin_items['personal_name'];
        $builtin_items['given_sort_key'] = $builtin_items['personal_sort_key'];
        $builtin_items['family_sort_key'] = $builtin_items['personal_sort_key'];

        $operate = 'LIKE ';
        if ($is_sensitive) {
            $operate .= 'BINARY ';
        }

        $data_format = '( d.col_%s ' . $operate . ' \'%%%s%%\' )';
        $extended_format = '( r.col_string ' . $operate . ' \'%%%s%%\' )' .
                           " AND ( ( i.col_use IS NOT NULL OR i.col_use <> 0 ) AND ( i.col_type <> 'file' ) ) ";

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn = $app_locator->getConnection('address');

        $condition = '';
        foreach ($texts as $text) {
            $text = $dbconn->escapeLike($text);
            if (strlen($condition) > 0) {
                $condition .= ' AND ';
            }
            $conditions = [];
            foreach ($columns as $column) {
                if (isset($builtin_items[$column])
                    && $builtin_items[$column]['use']
                ) {
                    $conditions[] = sprintf($data_format, $column, $text);
                }
            }
            $conditions[] = sprintf($extended_format, $text);
            $condition .= '(' . implode(' OR ', $conditions) . ')' . PHP_EOL;
        }

        $table_name_data = strtolower('tab_grn_address_'
                                      . $this->_data_type . 'data');
        $table_name_itemdatarelation = strtolower('tab_grn_address_item'
                                                  . $this->_data_type
                                                  . 'datarelation');
        $table_name_item = strtolower('tab_grn_address_'
                                      . $this->_data_type . 'item');

        $columns_table = [
            'DISTINCT d._id',
            'd.col_company_name',
            'd.col_company_sort_key',
            'd.col_company_telephone_number',
            'd.col_description',
            'd.col_email_address',
            'd.col_facsimile_number',
            'd.col_family_name',
            'd.col_family_sort_key',
            'd.col_given_name',
            'd.col_given_sort_key',
            'd.col_image',
            'd.col_map',
            'd.col_personal_telephone_number',
            'd.col_physical_address',
            'd.col_post_name',
            'd.col_route',
            'd.col_route_fare',
            'd.col_route_time',
            'd.col_section_name',
            'd.col_subject',
            'd.col_url',
            'd.col_zip_code'
        ];

        $book_id = $this->_row->getOID();

        $condition = "( d.col_book = '@S' ) AND ${condition}";
        $condition = $dbconn->format($condition, [$book_id]);

        $column_list = join(', ', $columns_table);

        $query
            = <<<SQL
SELECT ${column_list}
FROM (${table_name_data} AS d LEFT JOIN ${table_name_itemdatarelation} AS r ON d._id = r.col_data)
LEFT JOIN ${table_name_item} AS i ON r.col_item = i._id
WHERE ${condition}
SQL;
        $query .= $this->getOrderClauseForListDatasFast();

        if (GRN_ADDRESS_DATA_PRIVATE == $this->_data_type) {
            $book_id = -1;
        }

        $query = $dbconn->select_format($query, $offset, $limit);
        $result = $dbconn->query($query);
        $row_count = $dbconn->num_rows($result);

        $datas = [];
        $files = [];
        for ($i = 0; $i < $row_count; $i++) {
            $row = $dbconn->fetch_assoc($result);
            if (is_array($row) && 0 < count($row)) {
                $card_id = $row['_id'];
                $datas[$card_id] = [
                    '_id'                       => $card_id,
                    'company_name'              => $row['col_company_name'],
                    'company_sort_key'          => $row['col_company_sort_key'],
                    'company_telephone_number'  => $row['col_company_telephone_number'],
                    'description'               => $row['col_description'],
                    'email_address'             => $row['col_email_address'],
                    'facsimile_number'          => $row['col_facsimile_number'],
                    'family_name'               => $row['col_family_name'],
                    'family_sort_key'           => $row['col_family_sort_key'],
                    'given_name'                => $row['col_given_name'],
                    'given_sort_key'            => $row['col_given_sort_key'],
                    'image'                     => null,
                    'map'                       => $row['col_map'],
                    'personal_telephone_number' => $row['col_personal_telephone_number'],
                    'physical_address'          => $row['col_physical_address'],
                    'post_name'                 => $row['col_post_name'],
                    'route'                     => $row['col_route'],
                    'route_fare'                => $row['col_route_fare'],
                    'route_time'                => $row['col_route_time'],
                    'section_name'              => $row['col_section_name'],
                    'subject'                   => $row['col_subject'],
                    'url'                       => $row['col_url'],
                    'zip_code'                  => $row['col_zip_code'],
                    'sso'                       => [
                        'bid' => $book_id,
                        'cid' => $card_id
                    ]
                ];

                if ( ! is_null($file_id = $row['col_image'])) {
                    $files[$file_id] =& $datas[$card_id]['image'];
                }
            }
        }

        $this->_listItemDatasFast($datas, $files);
        $this->_listFileFast($files);

        return $datas;
    }

    /**
     * @return string
     */
    private function getOrderClauseForListDatasFast()
    {
        return <<<SQL
ORDER BY CASE WHEN ( col_family_sort_key LIKE '' OR col_family_sort_key IS NULL )
                   AND
                   ( col_given_sort_key LIKE '' OR col_given_sort_key IS NULL )
              THEN 2
              ELSE 1
         END
       , concat(ltrim(col_family_sort_key), ltrim(col_given_sort_key))
       , col_subject
       , _id
SQL;
    }

    /**
     * @return CB_RowSet
     */
    function _getFullTextSearchDataRowSet(
        $order_by,
        $texts,
        $is_sensitive,
        $builtin_items
    ) {
        $addressDatabase = new GRN_Address_DataBase();
        $columns = $addressDatabase->listColumns(true);

        unset($columns[22]);  // image

        $builtin_items['given_name'] = $builtin_items['personal_name'];
        $builtin_items['family_name'] = $builtin_items['personal_name'];
        $builtin_items['given_sort_key'] = $builtin_items['personal_sort_key'];
        $builtin_items['family_sort_key'] = $builtin_items['personal_sort_key'];

        $table_info = $this->_getDataTableInfo();
        $rowset = new CB_RowSet($table_info, 'd');
        $table_info = $this->_getItemDataRelationTableInfo();
        $condition = 'd._id = r.col_data';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_LEFT_JOIN, 'r');
        $table_info = $this->_getItemTableInfo();
        $condition = 'r.col_item = i._id';
        $rowset->addJoin($table_info, $condition, CB_DATABASE_LEFT_JOIN, 'i');

        $query = 'LIKE ';
        if ($is_sensitive) {
            $query .= 'BINARY ';
        }

        $data_format = '( d.col_@S ' . $query . ' \'%@L%\' )';
        $extended_format = '( r.col_string ' . $query . ' \'%@L%\' )' .
                           " AND ( ( i.col_use IS NOT NULL OR i.col_use <> 0 ) AND ( i.col_type <> 'file' ) ) ";
        foreach ($texts as $text) {
            $conditions = [];
            foreach ($columns as $column) {
                if (isset($builtin_items[$column])
                    && $builtin_items[$column]['use']
                ) {
                    $conditions[] = $rowset->queryf($data_format, $column,
                        $text);
                }
            }
            $conditions[] = $rowset->queryf($extended_format, $text);
            $rowset->addCondition(implode(' OR ', $conditions));
        }

        $rowset->addCondition('d.col_book = ' . $this->_row->getOID());
        if ( ! is_string($order_by) || 0 == strlen($order_by)) {
            $order_by = 'd._id';
        }
        $rowset->addOrderColumn($order_by);

        return $rowset;
    }

    /**
     * 全文検索した結果のアドレスデータ一覧を取得する
     */
    function listFullTextSearchDatas(
        $offset = 0,
        $limit = -1,
        $order_by = 'd.col_subject, d._id',
        $texts = null,
        $is_sensitive = false,
        $builtin_items = null
    ) {
        $rowset = $this->_getFullTextSearchDataRowSet($order_by, $texts,
            $is_sensitive, $builtin_items);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)'],
            [
                'col_subject' => 'd.col_subject',
                '_id'         => 'd._id'
            ]);
        $rowset->limit($offset, $limit);

        $conditions = [];
        while ( ! is_null($row =& $rowset->iterate())) {
            if (0 < $row['count']) {
                $conditions[] = '_id = ' . $row['_id'];
            }
        }
        $condition = implode(' OR ', $conditions);

        if (0 == strlen($condition)) {
            return [];
        }

        $offset = 0;
        $limit = -1;
        $order_by = 'col_subject, _id';

        return $this->listDatas($offset, $limit, $order_by, $condition);
    }

    function getFullTextSearchDataCount(
        $texts = null,
        $is_sensitive = false,
        $builtin_items = null
    ) {
        $rowset = $this->_getFullTextSearchDataRowSet(null, $texts,
            $is_sensitive, $builtin_items);
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)'],
            ['_id' => 'd._id']);

        return $rowset->count();
    }

    /**
     * アドレスデータを追加する
     *
     * @return GRN_Address_CydeData
     */
    function addData($properties = null)
    {
        if (is_null($properties)) {
            $properties = [];
        }
        $properties['book'] = $this->_row;

        $table_info = $this->_getDataTableInfo();
        $row = $table_info->newRow();
        $data_id = $row->getOID();

        $data = $this->_newData($row);

        $datas = [];
        $datas[$data_id] = $data;
        $this->_datas[$data_id] = $data;

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        $data->setProperties($properties, 'create');

        return $data;
    }

    /**
     * アドレスデータを追加する
     *
     * @return GRN_Address_Cyde_Data
     */
    function addData_nocache($properties = null)
    {
        $data_table = $this->_getDataTableInfo();
        $item_table = $this->_getItemTableInfo();
        $item_data_table = $this->_getItemDataRelationTableInfo();

        //disable persistent layer cache
        $tmp_data_cache_limit = $data_table->_cache_limit;
        $tmp_item_cache_limit = $item_table->_cache_limit;
        $tmp_item_data_cache_limit = $item_data_table->_cache_limit;
        $data_table->_cache_limit = 0;
        $item_table->_cache_limit = 0;
        $item_data_table->_cache_limit = 0;

        if (is_null($properties)) {
            $properties = [];
        }
        $properties['book'] = $this->_row;

        $row = $data_table->newRow();
        $data_id = $row->getOID();

        $data = $this->_newData($row);

        $datas = [];
        $datas[$data_id] = $data;

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        $data->setProperties_nocache($properties, 'create');

        //clear register and update cache
        $row->updateNow();
        foreach (array_keys($data->_itemdatas) as $id) {
            $itemdata = $data->_itemdatas[$id];
            $itemdata->updateNow();
        }

        //recover cache setting
        $data_table->_cache_limit = $tmp_data_cache_limit;
        $item_table->_cache_limit = $tmp_item_cache_limit;
        $item_data_table->_cache_limit = $tmp_item_data_cache_limit;

        return $data;
    }

    /**
     * アドレスデータをコピーする
     */
    function copyData($properties)
    {
        if ( ! $properties) {
            return false;
        }
        $properties['book'] = $this->_row;

        $table_info = $this->_getDataTableInfo();
        $row = $table_info->newRow();
        $data_id = $row->getOID();

        $data = $this->_newData($row);

        $datas = [];
        $datas[$data_id] = $data;
        $this->_datas[$data_id] = $data;

        $this->listItems();

        $property_ids = [];
        foreach (array_keys($this->_items) as $id) {
            $item = $this->_items[$id];
            $item_id = $item->get('id');

            $property_ids[$id] = $item->get('id');
        }

        //コードの付け替え
        foreach ($property_ids as $id => $code) {
            if (array_key_exists($code, $properties)) {
                $properties[$id] = $properties[$code];
                unset($properties[$code]);
            }
        }

        $this->_setItems($datas);
        $this->_setItemDatas($datas);

        $data->setProperties($properties, 'create');

        return $data;
    }

    /**
     * アドレスデータの総数を取得する
     */
    function countDatas($add_condition = null)
    {
        $table_info = $this->_getDataTableInfo();
        $rowset = new CB_RowSet($table_info);

        $rowset->addCondition('col_book = ' . $this->_row->getOID());
        if (0 < strlen($add_condition)) {
            $rowset->addCondition($add_condition);
        }
        $rowset->applyGroupFunctions(['count' => 'COUNT(*)']);
        $retval = $rowset->iterate();
        $rowset->destroy();

        return $retval['count'];
    }

    /**
     * 複数のアドレスデータを削除する
     */
    function removeDatas($cid = null)
    {
        $condition = null;
        if (is_array($cid) && 0 < count($cid)) {
            $condition = $this->_dbconn->format("_id IN (@A)", [$cid]);
        }

        $datas = $this->listDatas(0, -1, null, $condition);
        foreach (array_keys($datas) as $card_id) {
            $data = $datas[$card_id];
            $data->delete();
        }
    }

    /**
     * @access private
     */
    var $_items = [];

    /**
     * アドレス拡張項目を設定する
     *
     * @param GRN_Address_Cyde_Data[] $datas
     *
     * @access private
     */
    function _setItems($datas)
    {
        $this->listItems();

        foreach (array_keys($datas) as $data_id) {
            $data = $datas[$data_id];
            $data->setItems($this->_items);
        }
    }

    /**
     * アドレス拡張項目とアドレスデータの関連付け一覧を設定する
     *
     * @param GRN_Address_Cyde_Data[] $datas
     *
     * @access private
     */
    function _setItemDatas($datas)
    {
        if (0 < count($datas)) {
            $rowset = new CB_RowSet($this->_getItemDataRelationTableInfo(),
                'r');
            $rowset->addJoin($this->_getItemTableInfo(), 'r.col_item = i._id',
                CB_DATABASE_INNER_JOIN, 'i');
            $condition = $this->_dbconn->format("r.col_data IN (@A)",
                [array_keys($datas)]);
            $rowset->addCondition($condition);
            if (GRN_ADDRESS_DATA_SHARED == $this->_data_type) {
                $rowset->addCondition('i.col_book = ' . $this->_row->getOID());
            }

            while ( ! is_null($row = $rowset->iterate())) {
                if (false === ($data = $row->get('data'))) {
                    continue;
                }
                $data_id = $data->getOID();
                $data = $datas[$data_id];
                $data->setItemData($row);
            }
        }
    }

    /**
     * アドレス拡張項目を取得する
     */
    function getItem($item_id)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        if (array_key_exists($item_id, $this->_items)) {
            return $this->_items[$item_id];
        }

        $table_info = $this->_getItemTableInfo();
        if (false === ($row = $table_info->getRow($item_id))) {
            $ret = false;

            return $ret;
        }
        $this->_items[$item_id] = $row;

        return $row;
    }

    function getItemById($id)
    {
        assert('! is_null( $id ) && 0 < strlen( $id )');

        $addressDatabase = new GRN_Address_DataBase();
        $columns = $addressDatabase->listColumns();
        if (array_key_exists($id, $columns)) {
            $ret = true;

            return $ret;
        }

        $table_info = $this->_getItemTableInfo();
        $rowset = new CB_RowSet($table_info);
        if (GRN_ADDRESS_DATA_SHARED == $this->_data_type) {
            $rowset->addCondition('col_book = ' . $this->_row->getOID());
        }
        $rowset->addCondition($rowset->queryf("col_id = '@S'", $id));
        if (false === ($row = $rowset->iterate())) {
            $ret = false;

            return $ret;
        }

        return $row;
    }

    /**
     * アドレス拡張項目一覧を取得する
     */
    function listItems($id = null)
    {
        $table_info = $this->_getItemTableInfo();
        $rowset = new CB_RowSet($table_info);
        if ( ! is_null($id)) {
            $condition = $rowset->queryf('col_id = \'@S\'', $id);
            $rowset->addCondition($condition);
        }
        if (GRN_ADDRESS_DATA_SHARED == $this->_data_type) {
            $condition = 'col_book = ' . $this->_row->getOID();
            $rowset->addCondition($condition);
        }
        $rowset->addOrderColumn('col_list_index, _id');

        $items = [];
        $this->_items = [];
        while ( ! is_null($row = $rowset->iterate())) {
            $item_id = $row->getOID();
            $items[$item_id] = $row;
            $this->_items[$item_id] = $row;
        }

        return $items;
    }

    /**
     * アドレス拡張項目を追加する
     */
    function addItem($properties)
    {
        assert('is_array( $properties ) && 0 < count( $properties )');
        assert('array_key_exists( \'display_name\', $properties )');
        assert('! is_null( $properties[\'display_name\'] ) && 0 < strlen( $properties[\'display_name\'] )');
        assert('array_key_exists( \'id\', $properties )');
        assert('! is_null( $properties[\'id\'] ) && 0 < strlen( $properties[\'id\'] )');

        $addressDatabase = new GRN_Address_DataBase();
        $columns = $addressDatabase->listColumns();
        if (false !== array_search($properties['id'], $columns)) {
            $ret = false;

            return $ret;
        }

        $item = $this->getItemById($properties['id']);
        if (is_object($item) && is_a($item, 'GRN_ItemBase')) {
            $ret = false;

            return $ret;
        }

        if (GRN_ADDRESS_DATA_SHARED == $this->_data_type) {
            $properties['book'] = $this->_row;
        }

        $table_info = $this->_getItemTableInfo();
        $row = $table_info->newRow();
        $informations = [];
        foreach ($properties as $key => $value) {
            if ($row->set($key, $value)) {
                $informations[$key] =& $row->get($key);
            }
        }
        $row->registerNow();

        $this->_items[$row->getOID()] = $row;

        // 監査する
        require_once('address/inspection.csp');
        $inspection = GRN_Address_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $section = GRN_ADDRESS_INSPECTION_CREATE;
            $params = [];
            switch ($this->_data_type) {
                case GRN_ADDRESS_DATA_PRIVATE:
                    $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD_ITEM;
                    // no write log item "display_name"
                    if (array_key_exists('display_name', $informations)) {
                        unset($informations['display_name']);
                    }
                    break;
                case GRN_ADDRESS_DATA_SHARED:
                    $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD_ITEM;
                    $params['bid'] = $this->_row->getOID();
                    break;
                default:
                    cb_throw_error();
            }
            $params['iid'] = $row->getOID();
            if (array_key_exists('not_modify', $informations)) {
                if (is_null($informations['not_modify'])) {
                    $informations['not_modify'] = '0';
                }
            }
            if (array_key_exists('necessary', $informations)) {
                if (is_null($informations['necessary'])) {
                    $informations['necessary'] = '0';
                }
            }
            if (array_key_exists('use', $informations)) {
                if (is_null($informations['use'])) {
                    $informations['use'] = '0';
                }
            }
            if (array_key_exists('display', $informations)) {
                if (is_null($informations['display'])) {
                    $informations['display'] = '0';
                }
            }
            if (array_key_exists('sso', $informations)) {
                if ($informations['sso'] === '-1') {
                    $informations['sso'] = 0;
                }
            }
            $inspection->record($section, $message, $params, $informations);
        }

        return $row;
    }

    /**
     * アドレス拡張項目のプロパティを設定する
     */
    function setItemProperties(
        $item_id,
        $properties,
        $section = GRN_ADDRESS_INSPECTION_MODIFY
    ) {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');
        assert('is_array( $properties ) && 0 < count( $properties )');

        if (array_key_exists($item_id, $this->_items)) {
            $row = $this->_items[$item_id];
        } else {
            $table_info = $this->_getItemTableInfo();
            if (false === ($row = $table_info->getRow($item_id))) {
                cb_throw_error(E_GRN_ADDRESS_EXTENDED_ITEM_NOT_FOUND);
            }
        }

        if (array_key_exists('id', $properties)) {
            if ($properties['id'] != $row->get('id')) {
                $addressDatabase = new GRN_Address_DataBase();
                $columns = $addressDatabase->listColumns();
                if (false !== array_search($properties['id'], $columns)) {
                    return false;
                }

                $item = $this->getItemById($properties['id']);
                if (is_object($item) && is_a($item, 'GRN_ItemBase')) {
                    return false;
                }
            }
        }

        $informations = [];
        foreach ($properties as $key => $value) {
            if ($row->set($key, $value)) {
                $informations[$key] =& $row->get($key);
            }
        }
        $row->updateNow();

        // 監査する
        require_once('address/inspection.csp');
        $inspection = GRN_Address_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $params = [];
            switch ($this->_data_type) {
                case GRN_ADDRESS_DATA_PRIVATE:
                    $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD_ITEM;
                    break;
                case GRN_ADDRESS_DATA_SHARED:
                    $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD_ITEM;
                    $book = $row->get('book');
                    $params['bid'] = $book->getOID();
                    break;
                default:
                    cb_throw_error();
            }
            $params['iid'] = $row->getOID();
            if (array_key_exists('not_modify', $informations)) {
                if (is_null($informations['not_modify'])) {
                    $informations['not_modify'] = '0';
                }
            }
            if (array_key_exists('necessary', $informations)) {
                if (is_null($informations['necessary'])) {
                    $informations['necessary'] = '0';
                }
            }
            if (array_key_exists('use', $informations)) {
                if (is_null($informations['use'])) {
                    $informations['use'] = '0';
                }
            }
            if (array_key_exists('display', $informations)) {
                if (is_null($informations['display'])) {
                    $informations['display'] = '0';
                }
            }
            if (array_key_exists('sso', $informations)) {
                if ($informations['sso'] === '-1') {
                    $informations['sso'] = 0;
                }
            }
            $inspection->record($section, $message, $params, $informations);
        }

        return true;
    }

    /**
     * アドレス拡張項目を削除する
     */
    function removeItem($item_id)
    {
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        $item = $this->getItem($item_id);
        if ( ! is_object($item)
             || ! is_a($item, 'GRN_Address_' . $this->_data_type . 'Item')
        ) {
            return false;
        }
        $item->delete();
        unset($this->_items[$item_id]);

        // 監査する
        require_once('address/inspection.csp');
        $inspection = GRN_Address_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $section = GRN_ADDRESS_INSPECTION_DELETE;
            $params = [];
            switch ($this->_data_type) {
                case GRN_ADDRESS_DATA_PRIVATE:
                    $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD_ITEM;
                    break;
                case GRN_ADDRESS_DATA_SHARED:
                    $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD_ITEM;
                    $book = $item->get('book');
                    $params['bid'] = $book->getOID();
                    break;
                default:
                    cb_throw_error();
            }
            $params['iid'] = $item->getOID();

            $inspection->record($section, $message, $params);
        }

        return true;
    }

    /**
     * アドレス拡張項目とアドレスデータの関連づけを追加する
     */
    function addDataItem($data, $item_id, $properties = null)
    {
        assert('is_object( $data ) && is_a( $data, \'GRN_Address_Data\' )');
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        $item = $this->getItem($item_id);

        $table = $this->_getItemDataRelationTableInfo();
        $row = $table->newRow();
        $row->set('item', $item);
        $row->set('data', $data);
        if ( ! is_null($properties)) {
            foreach ($properties as $key => $value) {
                $row->set($key, $value);
            }
        }
        $row->registerNow();

        $data_id = $data->getOID();
        $data = $this->_datas[$data_id];
        $data->setItemData($row);

        return $row;
    }

    /**
     * アドレス拡張項目とアドレスデータの関連づけを追加する
     */
    function addDataItem_nocache(
        $data,
        $item_id,
        $properties = null,
        $cyde_data_obj
    ) {
        assert('is_object( $data ) && is_a( $data, \'GRN_Address_Data\' )');
        assert('! is_null( $item_id ) && 0 < strlen( $item_id )');

        $item = $this->getItem($item_id);

        $table = $this->_getItemDataRelationTableInfo();
        $row = $table->newRow();
        $row->set('item', $item);
        $row->set('data', $data);
        if ( ! is_null($properties)) {
            foreach ($properties as $key => $value) {
                $row->set($key, $value);
            }
        }
        $row->registerNow();

        $data = $cyde_data_obj;
        $data->setItemData($row);

        return $row;
    }

}

/**
 * アドレスデータクラス for CyDE
 *
 * @package grn.address
 */
class GRN_Address_Cyde_Data extends GRN_Address_DataBase
{
    /**
     * @access private
     */
    var $_uum = null;
    /**
     * @access private
     */
    var $_data_type = null;
    /**
     * @access private
     */
    var $_parent = null;
    /**
     * @access private
     */
    var $_children = null;
    /**
     * @access private
     */
    var $_row = null;

    /**
     * コンストラクタ
     */
    function __construct($data_type, $parent, & $children, $row)
    {
        global $G_container_base;
        $this->_uum = $G_container_base->getInstance('uum');

        $this->_data_type = $data_type;
        $this->_parent = $parent;
        $this->_children =& $children;
        $this->_row = $row;
    }

    function _createFile($file)
    {
        if (UPLOAD_ERR_OK != $file['error']) {
            if (0 < strlen($file['name'])) {
                cb_throw_error(E_GRN_UPLOADING_FAILED);
            } else {
                $ret = null;

                return $ret;
            }
        }

        require_once('address/file.csp');
        $file_manager = new GRN_Address_FileManager_Core();
        $login = $this->_uum->getLoginUser();
        $_file = $file_manager->createFile($login, $file, null);

        return $_file;
    }

    function _duplicateFile($file)
    {
        if ( ! is_object($file) || ! is_a($file, 'GRN_File')) {
            $ret = null;

            return $ret;
        }

        require_once('address/file.csp');
        $file_manager = new GRN_Address_FileManager_Core();
        $login = $this->_uum->getLoginUser();
        $_file = $file_manager->duplicateFile($login, $file, null);

        return $_file;
    }

    /**
     * @access private
     */
    var $_items = [];

    /**
     * アドレス拡張項目一覧を設定する
     */
    function setItems(& $items)
    {
        assert('is_array( $items )');

        $this->_items =& $items;
    }

    /**
     * @access private
     */
    var $_itemdatas = [];

    /**
     * アドレス拡張項目とアドレスデータの関連付けを設定する
     */
    function setItemData($itemdata)
    {
        assert('is_object( $itemdata ) && is_a( $itemdata, \'GRN_Address_Item\'.$this->_data_type.\'DataRelation\' )');

        if (false === ($item = $itemdata->get('item'))) {
            return false;
        }

        assert('is_object( $item ) && is_a( $item, \'GRN_Address_\'.$this->_data_type.\'Item\' )');

        $id = $item->getOID();
        $this->_itemdatas[$id] = $itemdata;

        return true;
    }

    /**
     * プロパティを設定する
     */
    function setProperty($key, $value, $command = 'modify')
    {
        assert('! is_null( $key ) && 0 < strlen( $key )');

        $columns = $this->listColumns();
        $columns[] = 'book';

        if (false !== array_search($key, $columns)) {
            if ('image' == $key) {
                if (is_array($value)) {
                    $file = $this->_row->get($key);
                    $value = $this->_createFile($value);
                    if (is_object($file) && is_a($file, 'GRN_File')) {
                        if (@ $properties['file_delete'][$key]) {
                            $file->delete();
                        } else {
                            $value = $file;
                        }
                    } else {
                        $file->delete();
                    }
                } elseif (is_object($value) && is_a($value, 'GRN_File')) {
                    $value = $this->_duplicateFile($value);
                }
            }
            if ($this->_row->set($key, $value)) {
                $this->_row->inspect($command, $this->_uum->getLoginUser());
                $this->_row->updateNow();

                // 監査する
                require_once('address/inspection.csp');
                $inspection = GRN_Address_Inspection::getInstance();
                if ($inspection->isEnabled()) {
                    $card = $this->_row;
                    $book = $card->get('book');
                    $value = $this->_row->get($key);

                    switch ($command) {
                        case 'create':
                            $message = GRN_ADDRESS_INSPECTION_CREATE;
                            break;
                        case 'modify':
                            $message = GRN_ADDRESS_INSPECTION_MODIFY;
                            break;
                        default:
                            cb_throw_error();
                    }

                    $params = [];
                    switch ($this->_data_type) {
                        case GRN_ADDRESS_DATA_PRIVATE:
                            $message
                                = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD;
                            break;
                        case GRN_ADDRESS_DATA_SHARED:
                            $message
                                = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD;
                            $params['bid'] = $book->getOID();
                            break;
                        default:
                            cb_throw_error();
                    }
                    $params['cid'] = $card->getOID();

                    $informations = [$key => $value];

                    $inspection->record($section, $message, $params,
                        $informations);
                }

                return true;
            }
        } else {
            if (array_key_exists($key, $this->_itemdatas)) {
                $itemdata = $this->_itemdatas[$key];
                $item = $itemdata->get('item');
            } elseif (array_key_exists($key, $this->_items)) {
                $item = $this->_items[$key];
                if (false === ($itemdata
                        = $this->_parent->addDataItem($this->_row, $key))
                ) {
                    assert('FALSE');
                }
                $this->_itemdatas[$key] = $itemdata;
            }

            if (GRN_ADDRESS_ITEM_FILE == $item->get('type')) {
                if (is_array($value)) {
                    $value = $this->_createFile($value);
                    $file = $itemdata->get('file');
                    if (is_object($file) && is_a($file, 'GRN_File')) {
                        if (@ $properties['file_delete'][$id]) {
                            $file->delete();
                        } else {
                            $value = $file;
                        }
                    } else {
                        $file->delete();
                    }
                } elseif (is_object($value) && is_a($value, 'GRN_File')) {
                    $value = $this->_duplicateFile($value);
                }
                $key = 'file';
            } else {
                $key = 'string';
            }

            if ($itemdata->set($key, $value)) {
                $this->_row->inspect($command, $this->_uum->getLoginUser());
                $this->_row->updateNow();
                $itemdata->updateNow();

                // 監査する
                require_once('address/inspection.csp');
                $inspection = GRN_Address_Inspection::getInstance();
                if ($inspection->isEnabled()) {
                    $card = $this->_row;
                    $book = $card->get('book');
                    $key = $item->get('id');
                    $value = $itemdata->get($key);

                    switch ($command) {
                        case 'create':
                            $message = GRN_ADDRESS_INSPECTION_CREATE;
                            break;
                        case 'modify':
                            $message = GRN_ADDRESS_INSPECTION_MODIFY;
                            break;
                        default:
                            cb_throw_error();
                    }

                    $params = [];
                    switch ($this->_data_type) {
                        case GRN_ADDRESS_DATA_PRIVATE:
                            $message
                                = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD;
                            break;
                        case GRN_ADDRESS_DATA_SHARED:
                            $message
                                = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD;
                            $params['bid'] = $book->getOID();
                            break;
                        default:
                            assert('FALSE');
                    }
                    $params['cid'] = $card->getOID();

                    $informations = [$key => $value];

                    $inspection->record($section, $message, $params,
                        $informations);
                }

                return true;
            }
        }

        return false;
    }

    /**
     * プロパティ一覧を設定する
     */
    function setProperties($properties, $command = 'modify')
    {
        assert('is_array( $properties ) && 0 < count( $properties )');

        $informations = [];

        $columns = $this->listColumns();
        $columns[] = 'book';

        $is_builtin_update = false;
        foreach ($columns as $column) {
            if (array_key_exists($column, $properties)) {
                if ('image' == $column) {
                    if (is_array($properties[$column])) {
                        $file = $this->_row->get($column);
                        $properties[$column]
                            = $this->_createFile($properties[$column]);
                        if (is_object($file) && is_a($file, 'GRN_File')) {
                            if (is_null($properties[$column])) {
                                if (@ $properties['file_delete'][$column]
                                    || ! $file->getCurrentBody()->exists()
                                ) {
                                    $file->delete();
                                } else {
                                    $properties[$column] = $file;
                                }
                            } else {
                                $file->delete();
                            }
                        }
                    } elseif (is_object($properties[$column])
                              && is_a($properties[$column], 'GRN_File')
                    ) {
                        if (@ $properties['file_delete'][$column]) {
                            $properties[$column] = null;
                        } else {
                            $properties[$column]
                                = $this->_duplicateFile($properties[$column]);
                        }
                    }
                }
                if ($this->_row->set($column, $properties[$column])) {
                    $is_builtin_update = true;
                    $informations[$column] = $this->_row->get($column);
                }
            }
            unset($file);
            unset($properties[$column]);
        }

        $is_extended_update = false;
        foreach (array_keys($properties) as $id) {
            if (array_key_exists($id, $this->_itemdatas)) {
                $itemdata = $this->_itemdatas[$id];
                $item = $itemdata->get('item');
            } elseif (array_key_exists($id, $this->_items)) {
                $item = $this->_items[$id];
                if (false === ($itemdata
                        = $this->_parent->addDataItem($this->_row, $id))
                ) {
                    assert('FALSE');
                }
                $this->_itemdatas[$id] = $itemdata;
            } else {
                continue;
            }
            $value =& $properties[$id];

            if (GRN_ADDRESS_ITEM_FILE == $item->get('type')) {
                if (is_array($value)) {
                    $file = $itemdata->get('file');
                    $value = $this->_createFile($value);
                    if (is_object($file) && is_a($file, 'GRN_File')) {
                        if (is_null($value)) {
                            if (@ $properties['file_delete'][$id]
                                || ! $file->getCurrentBody()->exists()
                            ) {
                                $file->delete();
                            } else {
                                $value = $file;
                            }
                        } else {
                            $file->delete();
                        }
                    }
                } elseif (is_object($value) && is_a($value, 'GRN_File')) {
                    if (@ $properties['file_delete'][$id]) {
                        $value = null;
                    } else {
                        $value = $this->_duplicateFile($value);
                    }
                }
                $key = 'file';
            } else {
                $key = 'string';
            }

            if ($itemdata->set($key, $value)) {
                $is_extended_update = true;
                $informations[$item->get('id')] =& $itemdata->get($key);
//                $itemdata->updateNow();
            }
            unset($file);
            unset($properties[$id]);
        }

        if ($is_builtin_update || $is_extended_update) {
            $this->_row->inspect($command, $this->_uum->getLoginUser());
//            $this->_row->updateNow();

            // 監査する
            require_once('address/inspection.csp');
            $inspection = GRN_Address_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $card = $this->_row;
                $book = $card->get('book');

                $params = [];
                switch ($command) {
                    case 'create':
                        $section = GRN_ADDRESS_INSPECTION_CREATE;
                        break;
                    case 'modify':
                        $section = GRN_ADDRESS_INSPECTION_MODIFY;
                        break;
                    default:
                        cb_throw_error();
                }

                $params['cid'] = $card->getOID();

                switch ($this->_data_type) {
                    case GRN_ADDRESS_DATA_PRIVATE:
                        $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD;
                        $user = $book->get('user');
                        $params['uid'] = $user->getOID();
                        break;
                    case GRN_ADDRESS_DATA_SHARED:
                        $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD;
                        $params['bid'] = $book->getOID();
                        break;
                    default:
                        cb_throw_error();
                }
                if (isset($informations['map']) && $command != 'modify') {
                    unset($informations['map']); // remove log map item
                }
                $inspection->record($section, $message, $params, $informations);
            }
        }
    }

    /**
     * プロパティ一覧を設定する
     */
    function setProperties_nocache($properties, $command = 'modify')
    {
        assert('is_array( $properties ) && 0 < count( $properties )');

        $informations = [];

        $columns = $this->listColumns();
        $columns[] = 'book';

        $is_builtin_update = false;
        foreach ($columns as $column) {
            if (array_key_exists($column, $properties)) {
                if ('image' == $column) {
                    if (is_array($properties[$column])) {
                        $file = $this->_row->get($column);
                        $properties[$column]
                            = $this->_createFile($properties[$column]);
                        if (is_object($file) && is_a($file, 'GRN_File')) {
                            if (is_null($properties[$column])) {
                                if (@ $properties['file_delete'][$column]) {
                                    $file->delete();
                                } else {
                                    $properties[$column] = $file;
                                }
                            } else {
                                $file->delete();
                            }
                        }
                    } elseif (is_object($properties[$column])
                              && is_a($properties[$column], 'GRN_File')
                    ) {
                        if (@ $properties['file_delete'][$column]) {
                            $properties[$column] = null;
                        } else {
                            $properties[$column]
                                = $this->_duplicateFile($properties[$column]);
                        }
                    }
                }
                if ($this->_row->set($column, $properties[$column])) {
                    $is_builtin_update = true;
                    $informations[$column] = $this->_row->get($column);
                }
            }
            unset($file);
            unset($properties[$column]);
        }

        $is_extended_update = false;
        foreach (array_keys($properties) as $id) {
            if (array_key_exists($id, $this->_itemdatas)) {
                $itemdata = $this->_itemdatas[$id];
                $item = $itemdata->get('item');
            } elseif (array_key_exists($id, $this->_items)) {
                $item = $this->_items[$id];
                if (false === ($itemdata
                        = $this->_parent->addDataItem_nocache($this->_row, $id,
                        null, $this))
                ) {
                    assert('FALSE');
                }
                $this->_itemdatas[$id] = $itemdata;
            } else {
                continue;
            }
            $value =& $properties[$id];

            if (GRN_ADDRESS_ITEM_FILE == $item->get('type')) {
                if (is_array($value)) {
                    $file = $itemdata->get('file');
                    $value = $this->_createFile($value);
                    if (is_object($file) && is_a($file, 'GRN_File')) {
                        if (is_null($value)) {
                            if (@ $properties['file_delete'][$id]) {
                                $file->delete();
                            } else {
                                $value = $file;
                            }
                        } else {
                            $file->delete();
                        }
                    }
                } elseif (is_object($value) && is_a($value, 'GRN_File')) {
                    if (@ $properties['file_delete'][$id]) {
                        $value = null;
                    } else {
                        $value = $this->_duplicateFile($value);
                    }
                }
                $key = 'file';
            } else {
                $key = 'string';
            }

            if ($itemdata->set($key, $value)) {
                $is_extended_update = true;
                $informations[$item->get('id')] =& $itemdata->get($key);
//                $itemdata->updateNow();
            }
            unset($file);
            unset($properties[$id]);
        }

        if ($is_builtin_update || $is_extended_update) {
            $this->_row->inspect($command, $this->_uum->getLoginUser());
//            $this->_row->updateNow();

            // 監査する
            require_once('address/inspection.csp');
            $inspection = GRN_Address_Inspection::getInstance();
            if ($inspection->isEnabled()) {
                $card = $this->_row;
                $book = $card->get('book');

                $params = [];
                switch ($command) {
                    case 'create':
                        $section = GRN_ADDRESS_INSPECTION_CREATE;
                        break;
                    case 'modify':
                        $section = GRN_ADDRESS_INSPECTION_MODIFY;
                        break;
                    default:
                        cb_throw_error();
                }

                $params['cid'] = $card->getOID();

                switch ($this->_data_type) {
                    case GRN_ADDRESS_DATA_PRIVATE:
                        $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD;
                        $user = $book->get('user');
                        $params['uid'] = $user->getOID();
                        break;
                    case GRN_ADDRESS_DATA_SHARED:
                        $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD;
                        $params['bid'] = $book->getOID();
                        break;
                    default:
                        cb_throw_error();
                }

                $inspection->record($section, $message, $params, $informations);
            }
        }
    }

    /**
     * プロパティの値を取得する
     */
    function &getProperty($key, $file_status = null)
    {
        assert('! is_null( $key ) && 0 < strlen( $key )');

        $columns = $this->listColumns();

        if (false !== array_search($key, $columns)) {
            if ('image' == $key) {
                $file = $this->_row->get($key);
                if (is_object($file) && is_a($file, 'GRN_File')) {
                    $body = $file->getCurrentBody();
                    if ('copy' == $file_status) {
                        return $file;
                    } else {
                        $body = $file->getCurrentBody();
                        if ('sso' == $file_status) {
                            $ret =& $body->get('name');

                            return $ret;
                        } else {
                            $ret = [
                                'oid'  => $file->getOID(),
                                'name' => $body->get('name'),
                                'mime' => $body->get('mime')
                            ];

                            return $ret;
                        }
                    }
                }
            } else {
                $ret =& $this->_row->get($key);

                return $ret;
            }
        }

        if (array_key_exists($key, $this->_itemdatas)) {
            $itemdata = $this->_itemdatas[$id];
            $item = $itemdata->get('item');
            $item_type = $item->get('type');
            if (GRN_ADDRESS_ITEM_FILE == $item_type) {
                $file = $itemdata->get('file');
                if (is_object($file) && is_a($file, 'GRN_File')) {
                    $body = $file->getCurrentBody();
                    if ('copy' == $file_status) {
                        return $file;
                    } else {
                        $body = $file->getCurrentBody();
                        if ('sso' == $file_status) {
                            $ret =& $body->get('name');

                            return $ret;
                        } else {
                            $ret = [
                                'oid'  => $file->getOID(),
                                'name' => $body->get('name'),
                                'mime' => $body->get('mime')
                            ];

                            return $ret;
                        }
                    }
                }
            } else {
                $ret =& $itemdata->get('string');

                return $ret;
            }
        }
        $ret = false;

        return $ret;
    }

    /**
     * プロパティ一覧を取得する
     */
    function getProperties(
        $file_status = null,
        $id_name = 'id',
        $for_view = true
    ) {
        $columns = $this->listColumns();

        $properties = [];
        foreach ($columns as $column) {
            $value = null;
            if ('image' == $column) {
                $file = $this->_row->get($column);
                if (is_object($file) && is_a($file, 'GRN_File')) {
                    if ('copy' == $file_status) {
                        $value = $file;
                    } else {
                        $body = $file->getCurrentBody();
                        if ('sso' == $file_status) {
                            $value = $body->get('name');
                        } else {
                            if ($for_view || $body->exists()) {
                                $value = $this->getFileLinkView($file);
                            }
                        }
                    }
                }
            } elseif ('map' == $column) {
                // used grn_safe_url to trip the image url of field map to avoid xss
                require_once('grn/controller.csp');
                $value = grn_safe_url($this->_row->get($column));
            } else {
                $value = $this->_row->get($column);
            }
            $properties[$column] = $value;
        }

        foreach (array_keys($this->_items) as $id) {
            if (array_key_exists($id, $this->_itemdatas)) {
                $itemdata = $this->_itemdatas[$id];
                $item = $itemdata->get('item');
                $item_type = $item->get('type');
                $item_id = $item->get('id');

                if (GRN_ADDRESS_ITEM_FILE == $item_type) {
                    $file = $itemdata->get('file');
                    if (is_object($file) && is_a($file, 'GRN_File')) {
                        if ('copy' == $file_status) {
                            $properties[$$id_name] = $file;
                        } else {
                            $body = $file->getCurrentBody();
                            if ('sso' == $file_status) {
                                $properties[$$id_name] = $body->get('name');
                            } else {
                                if ($for_view || $body->exists()) {
                                    $properties[$$id_name]
                                        = $this->getFileLinkView($file);
                                }
                            }
                        }
                    }
                } else {
                    $properties[$$id_name] = $itemdata->get('string');
                }
            }
        }

        return $properties;
    }

    /**
     * オブジェクトIDを取得する
     */
    function getOID()
    {
        return $this->_row->getOID();
    }

    /**
     * 破棄する
     */
    function delete()
    {
        if (is_null($this->_row)) {
            return false;
        }
        unset($this->_children[$this->_row->getOID()]);

        // 監査する
        require_once('address/inspection.csp');
        $inspection = GRN_Address_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $card = $this->_row;
            $book = $card->get('book');

            $section = GRN_ADDRESS_INSPECTION_DELETE;
            $params = [];
            switch ($this->_data_type) {
                case GRN_ADDRESS_DATA_PRIVATE:
                    $message = GRN_ADDRESS_INSPECTION_PRIVATE_ADDRESS_CARD;
                    break;
                case GRN_ADDRESS_DATA_SHARED:
                    $message = GRN_ADDRESS_INSPECTION_SHARED_ADDRESS_CARD;
                    $params['bid'] = $book->getOID();
                    break;
                default:
                    assert('FALSE');
            }
            $params['cid'] = $card->getOID();

            $inspection->record($section, $message, $params);
        }

        $file = $this->_row->get('image');
        if (is_object($file) && is_a($file, 'GRN_File')) {
            $file->delete();
        }

        foreach (array_keys($this->_items) as $id) {
            if (array_key_exists($id, $this->_itemdatas)) {
                $itemdata = $this->_itemdatas[$id];
                $item = $itemdata->get('item');
                $item_type = $item->get('type');
                if (GRN_ADDRESS_ITEM_FILE == $item_type) {
                    $file = $itemdata->get('file');
                    if (is_object($file) && is_a($file, 'GRN_File')) {
                        $file->delete();
                    }
                }
            }
        }

        if ($this->_data_type == GRN_ADDRESS_DATA_SHARED) {
            require_once('report/partner_logic.csp');
            GRN_Report_Partner_Logic::getInstance()
                                    ->deleteAllByAddressId($this->_row->getOID());
        }

        $this->_row->delete();
        $this->_row = null;

        return true;
    }

    private function getFileLinkView($file)
    {
        $body = $file->getCurrentBody();
        $controller = new GRN_ControllerUtil();
        $value = $controller->getFileBodyLinkView($body);
        $value['oid'] = $file->getOID();
        $value['version'] = $body->get('version');

        return $value;
    }
}


