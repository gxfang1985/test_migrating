<?php

require_once('developer/azunit.csp');
require_once('address/application.csp');
require_once(cb_basedir() . '/code/plugin/grn/address/cyde.csp');

class test_grn_address_cyde_data extends CB_TestCase
{
    var $_uum = null;
    var $_table_manager = null;
    var $_data_types = [GRN_ADDRESS_DATA_SHARED, GRN_ADDRESS_DATA_PRIVATE];
    var $_book_managers = [];
    var $_unique_text = null;
    var $_properties = [];

    function test_grn_address_cyde_data($test_method)
    {
        parent::CB_TestCase($test_method);

        global $G_container_base;
        $this->_uum =& $G_container_base->getInstance('uum');
        $this->_table_manager
            =& $G_container_base->getInstance('table_manager');
        $this->_unique_text = $test_method . time();
        mt_srand(time());
    }

    var $_users = [];

    function &_addUser($unique_text)
    {
        $unique_text = md5($unique_text);
        $properties = [
            'display_name' => $unique_text,
            'foreign_key'  => $unique_text
        ];

        $user =& $this->_uum->addUser($properties);
        $this->_users[$user->getOID()] =& $user;

        return $user;
    }

    function _removeUser(& $user)
    {
        $this->_uum->removeUser($user->getOID());
    }

    var $_books
        = [
            GRN_ADDRESS_DATA_SHARED  => [],
            GRN_ADDRESS_DATA_PRIVATE => []
        ];

    function _newBook($data_type, $unique_text, & $properties)
    {
        if (GRN_ADDRESS_DATA_SHARED == $data_type) {
            $properties['display_name'] = $unique_text;
            $properties['id'] = $unique_text;
        } elseif (GRN_ADDRESS_DATA_PRIVATE == $data_type) {
            $user =& $this->_addUser($unique_text);

            $properties['display_name'] = $unique_text;
            $properties['user'] =& $user;
        } else {
            assert('FALSE');
        }

        $class_name = 'GRN_Address_' . $data_type . 'Book';
        $table_info =& $this->_table_manager->getTableInfo($class_name);

        $row =& $table_info->newRow();
        foreach (array_keys($properties) as $key) {
            $row->set($key, $properties[$key]);
        }
        $row->registerNow();

        return new GRN_Address_Cyde_Book($data_type, $this->_books[$data_type],
            $row);
    }

    function _removeBook(& $book)
    {
        if (is_a($book, 'GRN_Address_PrivateBook')) {
            $user =& $book->getProperty('user');
            $this->_removeUser($user);
        }
        $book->delete();
    }

    var $_datas
        = [
            GRN_ADDRESS_DATA_SHARED  => [],
            GRN_ADDRESS_DATA_PRIVATE => []
        ];

    function &_newData($data_type, & $book, $unique_text, & $properties)
    {
        if (GRN_ADDRESS_DATA_SHARED == $data_type
            || GRN_ADDRESS_DATA_PRIVATE == $data_type
        ) {
            $properties['company_name'] = $unique_text;
            $properties['company_sort_key'] = $unique_text;
            $properties['personal_name'] = $unique_text;
            $properties['personal_sort_key'] = $unique_text;
            $properties['book'] =& $book;
        } else {
            assert('FALSE');
        }

        $class_name = 'GRN_Address_' . $data_type . 'Data';
        $table_info =& $this->_table_manager->getTableInfo($class_name);

        $row =& $table_info->newRow();
        foreach (array_keys($properties) as $key) {
            $row->set($key, $properties[$key]);
        }
        $row->registerNow();

        return new GRN_Address_Cyde_Data($data_type,
            $this->_children[$data_type], $row);
    }

    function _removeData(& $data)
    {
        $data->delete();
    }

    var $_items
        = [
            GRN_ADDRESS_DATA_SHARED  => [],
            GRN_ADDRESS_DATA_PRIVATE => []
        ];

    function &_newItem($data_type, & $book, $unique_text, & $properties)
    {
        $properties['display_name'] = $unique_text;
        $properties['id'] = $unique_text;
        $properties['type'] = GRN_ADDRESS_ITEM_STRING;
        $properties['setting'] = $unique_text;
        $properties['book'] =& $book;

        $class_name = 'GRN_Address_' . $data_type . 'Item';
        $table_info =& $this->_table_manager->getTableInfo($class_name);

        $row =& $table_info->newRow();
        foreach (array_keys($properties) as $key) {
            $row->set($key, $properties[$key]);
        }
        $row->registerNow();

        return $row;
    }

    function _removeItem(& $item)
    {
        $item->delete();
    }

    var $_itemdatas
        = [
            GRN_ADDRESS_DATA_SHARED  => [],
            GRN_ADDRESS_DATA_PRIVATE => []
        ];

    function &_newItemData(
        $data_type,
        & $item,
        & $data,
        $unique_text,
        & $properties
    ) {
        $properties['string'] = $unique_text;
        $properties['item'] =& $item;
        $properties['data'] =& $data;

        $class_name = 'GRN_Address_Item' . $data_type . 'DataRelation';
        $table_info =& $this->_table_manager->getTableInfo($class_name);

        $row =& $table_info->newRow();
        foreach (array_keys($properties) as $key) {
            $row->set($key, $properties[$key]);
        }
        $row->registerNow();

        return $row;
    }

    function _removeItemData(& $data)
    {
        $data->delete();
    }

    function _validateObject(& $object, $properties, $class_name = null)
    {
        if ( ! is_null($class_name)) {
            assert('is_object( $object ) && is_a( $object, $class_name )');
        }

        foreach (array_keys($properties) as $key) {
            $value1 =& $properties[$key];
            $value2 =& $object->getProperty($key);

            if (is_object($value1) && is_object($value2)) {
                assert('$value1->getOID() == $value2->getOID()');
            } else {
                assert('$value1 == $value2');
            }
        }
    }

    function _validateProperties($properties1, $properties2)
    {
        foreach (array_keys($properties1) as $key) {
            $value1 =& $properties1[$key];
            $value2 =& $properties2[$key];

            assert('$value1 == $value2');
        }
    }

    function test_setItemData1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $arg1 = null;
        $this->expectError('PHP99999');
        $data->setItemData($arg1);

        $this->_removeData($data);
    }

    function test_setItemData2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 =& $data->_row;
        $arg4 = md5($this->_unique_text);
        $arg5 = [];
        $itemdata =& $this->_newItemData($arg1, $arg2, $arg3, $arg4, $arg5);

        $this->expectError('PHP99999');
        $data->setItemData($itemdata);

        $this->_removeItemData($itemdata);
        $this->_removeData($data);
    }

    function test_setItemData3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $item =& $this->_newItem($arg1, $arg2, $arg3, $arg4);

        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 =& $item;
        $arg3 =& $data->_row;
        $arg4 = md5($this->_unique_text);
        $arg5 = [];
        $itemdata =& $this->_newItemData($arg1, $arg2, $arg3, $arg4, $arg5);

        $data->setItemData($itemdata);

        $this->_removeItemData($itemdata);
        $this->_removeItem($item);
        $this->_removeData($data);
    }

    function test_setProperty1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $this->expectError('PHP99999');
        $data->setProperty(null, 'Hoge');

        $this->_removeData($data);
    }

    function test_setProperty2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $this->expectError('PHP99999');
        $data->setProperty('', 'Hoge');

        $this->_removeData($data);
    }

    function test_setProperty3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $properties = [];
        foreach ($arg4 as $key => $value) {
            if (is_string($value) && strlen($value)) {
                $properties[$key] = strrev($value);
            }
        }

        foreach ($properties as $key => $value) {
            $data->setProperty($key, $value);
        }
        $this->_validateObject($data, $properties);

        $this->_removeData($data);
    }

    function test_setProperties1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $this->expectError('PHP99999');
        $data->setProperties(null);

        $this->_removeData($data);
    }

    function test_setProperties2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $this->expectError('PHP99999');
        $data->setProperties([]);

        $this->_removeData($data);
    }

    function test_setProperties3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $properties = [];
        foreach ($arg4 as $key => $value) {
            if (is_string($value) && strlen($value)) {
                $properties[$key] = strrev($value);
            }
        }

        $data->setProperties($properties);
        $this->_validateObject($data, $properties);

        $this->_removeData($data);
    }

    function test_getProperty1()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $this->expectError('PHP99999');
        $data->getProperty(null);

        $this->_removeData($data);
    }

    function test_getProperty2()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $this->expectError('PHP99999');
        $data->getProperty('');

        $this->_removeData($data);
    }

    function test_getProperty3()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $retval = $data->getProperty('hoge');
        assert('FALSE === $retval');

        $this->_removeData($data);
    }

    function test_getProperty4()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        foreach (array_keys($arg4) as $key) {
            $value1 =& $arg4[$key];
            $value2 = $data->getProperty($key);

            assert('$value1 == $value2');
        }

        $this->_removeData($data);
    }

    function test_getProperties()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $properties = $data->getProperties();
        $this->_validateProperties($arg4, $properties);

        $this->_removeData($data);
    }

    function test_getOID()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $data->getOID();

        $this->_removeData($data);
    }

    function test_delete()
    {
        $arg1 = GRN_ADDRESS_DATA_SHARED;
        $arg2 = null;
        $arg3 = md5($this->_unique_text);
        $arg4 = [];
        $data =& $this->_newData($arg1, $arg2, $arg3, $arg4);

        $retval = $data->delete();
        assert('TRUE === $retval');
        $retval = $data->delete();
        assert('FALSE === $retval');

        $this->_removeData($data);
    }

}

cb_test_run();

?>
