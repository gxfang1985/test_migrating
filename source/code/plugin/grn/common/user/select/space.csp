<?php
declare(strict_types=1);

use grn\grn\access\service\AppAccess;
use grn\space\common\data\bean\LanguageStatus;
use grn\space\logic\SpaceLogic;
use grn\space\service\SpaceService;
use grn\space\common\data\bean\Authority;
use grn\space\data\bean\Space;

class plugin_grn_common_user_select_space
{
    /**
     * Evaluate User
     *
     * @param array $user_ids User ID list
     * @param array $params   plugin params
     *
     * @return array user ID after evaluate
     * @throws \grn\space\common\exception\GrnDatabaseException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     */
    function evalUsers(array $user_ids, array $params)
    {
        $space_id = $params['space_id'] ?? null;
        $app_id = $params['app_id'] ?? null;

        if ( ! $user_ids || ! $space_id || ! $app_id) {
            return $user_ids;
        }

        $space_logic = SpaceLogic::getInstance();
        $space = $space_logic->getSpace($space_id, LanguageStatus::STANDARD_LANGUAGE_CODE);
        if ( ! $this->canAccess($space)) {
            return [];
        }
        
        $app_id = $params["app_id"];
        $user_ids = AppAccess::filterUserIdsInternalAccessByAppId($user_ids, $app_id);

        $is_public = $space->isPublic();
        if ( ! $is_public) {
            /**
             * @var \grn\space\data\collection\SpaceUserCollection
             */
            $space_members = $space_logic->getSpaceMembers($space);
            $space_user_ids = $space_members->getUserIds();
            $user_ids = array_intersect($user_ids, $space_user_ids);
        }

        return $user_ids;
    }

    /**
     * Evaluate Group
     *
     * @param array $group_ids group ID list
     * @param array $params    plugin params
     *
     * @return array group ID list after evaluate
     * @throws \grn\space\common\exception\GrnDatabaseException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     */
    public function evalGroups(array $group_ids, array $params)
    {
        $space_id = $params['space_id'] ?? null;
        if ( ! $group_ids || ! $space_id) {
            return $group_ids;
        }

        $space_logic = SpaceLogic::getInstance();
        $space = $space_logic->getSpace($space_id, LanguageStatus::STANDARD_LANGUAGE_CODE);
        if ( ! $this->canAccess($space)) {
            return [];
        }

        $is_public = $space->isPublic();
        if ( ! $is_public) {
            $group_ids = $space_logic->getSpaceOrganizationIds($space);
        }

        return $group_ids;
    }

    /**
     * Evaluate Role
     *
     * @param array $role_ids role ID list
     * @param array $params   plugin params
     *
     * @return array role ID after evaluate
     * @throws \grn\space\common\exception\GrnDatabaseException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     * @throws \grn\space\common\exception\GrnDataNotFoundException
     */
    public function evalRoles(array $role_ids, array $params)
    {
        $space_id = $params['space_id'] ?? null;
        if ( ! $role_ids || ! $space_id) {
            return $role_ids;
        }

        $space_logic = SpaceLogic::getInstance();
        $space = $space_logic->getSpace($space_id, LanguageStatus::STANDARD_LANGUAGE_CODE);
        if ( ! $this->canAccess($space)) {
            return [];
        }

        $is_public = $space->isPublic();
        if ( ! $is_public) {
            $role_ids = $space_logic->getSpaceRolesArray($space);
        }

        return $role_ids;
    }

    /**
     * Check can access space
     *
     * @param Space|null $space
     *
     * @return bool
     * @throws \grn\space\common\exception\GrnDatabaseException
     * @throws \grn\space\common\exception\GrnInvalidArgumentException
     */
    private function canAccess(Space $space = null)
    {
        if ($space == null) {
            return false;
        }

        $login_id = cb_get_login_user()->getOID();
        $spaceService = SpaceService::getInstance();

        if ($space->isExpired()) {
            return false;
        }

        $space_id = $space->getId();
        if ( ! $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL, $space_id, $login_id)) {
            return false;
        }

        return true;
    }
}


