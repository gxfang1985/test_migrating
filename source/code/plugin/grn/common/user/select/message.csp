<?php
declare(strict_types=1);

use grn\grn\access\service\AppAccess;

require_once('message/message_logic.csp');

class plugin_grn_common_user_select_message
{
    private static $cache_has_privilege = [];
    /**
     * Evaluate User
     *
     * @param array $user_ids User ID list
     * @param array $params   plugin params
     *
     * @return array user ID after evaluate
     */
    function evalUsers(array $user_ids, array $params)
    {
        $message_id = $params['message_id'] ?? null;
        $app_id = $params['app_id'] ?? null;
        $missing_param = ! $user_ids || ! $message_id || ! $app_id;
        if ($missing_param) {
            return $user_ids;
        }

        if ( ! $this->canAccess($params)) {
            return [];
        }

        $mention_user_ids_has_permission = AppAccess::filterUserIdsInternalAccessByAppId($user_ids, $app_id);
        $addressees_user_ids = [];
        $user = cb_get_login_user();
        $message_logic = new GRN_Message_Logic();
        $addressees = $message_logic->getAddressees($user, $message_id);
        if ($addressees) {
            foreach ($addressees as $addressee) {
                if ($addressee['dtime']->unix_ts == 0
                    && $addressee['delete_flag'] == 0
                ) {
                    $addressees_user_ids[] = $addressee['id'];
                }
            }
        }

        $creator_id = $message_logic->getMessageCreatorId($message_id);
        $addressees_user_ids[] = $creator_id;

        return array_intersect($mention_user_ids_has_permission, $addressees_user_ids);
    }

    /**
     * Evaluate Group. Currently, it's does not have any evaluation for group.
     * We will update it when the requirement will be updated in the future
     *
     * @param array $group_ids group ID list
     * @param array $params    plugin params
     *
     * @return array group ID list after evaluate
     */
    public function evalGroups(array $group_ids, array $params)
    {
        return $group_ids;
    }

    /**
     * Evaluate Role. Currently, it's does not have any evaluation for role.
     * We will update it when the requirement will be updated in the future
     *
     * @param array $role_ids role ID list
     * @param array $params   plugin params
     *
     * @return array role ID after evaluate
     */
    public function evalRoles(array $role_ids, array $params)
    {
        return $role_ids;
    }

    /**
     * Check access message by user
     *
     * @param array $params Plugin param
     *
     * @return bool TRUE if user can access, otherwise FALSE
     */
    private function canAccess(array $params = [])
    {
        $message_id = $params['message_id'] ?? null;
        $relation_id = $params['relation_id'] ?? null;
        $user = cb_get_login_user();
        $cache_key = sprintf('%s.%s.%s', $message_id, $relation_id, $user->getOID());
        if (isset(self::$cache_has_privilege[$cache_key])) {
            return self::$cache_has_privilege[$cache_key];
        }

        $message_logic = new GRN_Message_Logic();
        $has_privilege = $message_logic->hasPrivilege($user, $message_id, $relation_id) ? true : false;
        self::$cache_has_privilege[$cache_key] = $has_privilege;

        return $has_privilege;
    }
}


