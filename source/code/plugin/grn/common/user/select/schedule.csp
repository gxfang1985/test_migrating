<?php

require_once('schedule/application.csp');
require_once('schedule/access_logic.csp');

use grn\grn\access\service\AppAccess;

class plugin_grn_common_user_select_schedule
{
    function isSystem()
    {
        return false;
    }

    function isSchedule()
    {
        return true;
    }

    /**
     * @access private
     */
    var $_login = null;

    /**
     * @access private
     */
    var $_dynamic_roles = null;

    const LAX_EVALUATE = 'lax_evaluate';

    function _initialize()
    {
        if (is_null($this->_login)) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $this->_login = $uum->getLoginUser();
            $this->_dynamic_roles = $uum->listGrantedRoles();
        }
    }

    /**
     * 指定されたグループのリストに対しアクセス権制御を行い
     * グループのリストを返す。
     */
    function evalGroups($groups, $params, $user_pulldown = false)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        if ( ! array_key_exists('session_name', $params)) {
            return $this->_evaluateGroups($groups, $params);
        }

        $action = $this->_getAction($params);
        if ( ! is_array($action) || count($action) == 0) {
            return $groups;
        }

        $session_name = $params['session_name'];

        // パラメータの保存先を取得
        require_once('fw/session_manager.csp');
        $sm = CB_SessionManager::getInstance();
        $session = $sm->getSession($session_name);
        $cannotselected_ogrs = $session->get('cannotselected_ogrs');
        $canselected_ogrs = $session->get('canselected_ogrs');

        if ( ! is_array($cannotselected_ogrs)) {
            $cannotselected_ogrs = [];
        }
        if ( ! is_array($canselected_ogrs)) {
            $canselected_ogrs = [];
        }

        // ロールなどの値の初期化
        $this->_initialize();

        static $_acc_logic = null;
        if ( ! $_acc_logic) {
            $_acc_logic = GRN_Schedule_Access_Logic::getInstance();
        }

        $infos = [];
        foreach (array_keys($groups) as $group_id) {
            if (array_key_exists($group_id, $canselected_ogrs)) {
                //アクセス可
            } elseif (array_key_exists($group_id, $cannotselected_ogrs)) {
                //アクセス不可
                unset($groups[$group_id]);
            } else {
                //未評価
                $infos[$group_id] = $group_id;
            }
        }

        $lax_evaluate = cb_at($params, self::LAX_EVALUATE, false);

        // 利用できるIDのみを取得
        $evaluated = $_acc_logic->evaluateAccessesById($this->_login, $infos,
            $action, $this->_dynamic_roles, 'group', false, $lax_evaluate);

        foreach (array_keys($infos) as $group_id) {
            if (array_key_exists($group_id, $evaluated)) {
                //アクセス可
                $canselected_ogrs[$group_id] = $group_id;
            } else {
                //アクセス不可
                unset($groups[$group_id]);
                $cannotselected_ogrs[$group_id] = $group_id;
            }
        }

        // セッションに保存
        $session->set('cannotselected_ogrs', $cannotselected_ogrs);
        $session->set('canselected_ogrs', $canselected_ogrs);

        // そのまま返す
        return $groups;
    }

    /**
     * 単純なグループの評価
     */
    function _evaluateGroups(& $groups, $params)
    {
        $action = $this->_getAction($params);
        if ( ! is_array($action) || count($action) == 0) {
            return $groups;
        }

        if ( ! is_array($groups) || count($groups) == 0) {
            return $groups;
        }

        // ロールなどの値の初期化
        $this->_initialize();

        static $_acc_logic = null;
        if ( ! $_acc_logic) {
            $_acc_logic = GRN_Schedule_Access_Logic::getInstance();
        }

        $lax_evaluate = cb_at($params, self::LAX_EVALUATE, false);
        $groups = $_acc_logic->evaluateAccessesById($this->_login,
            $groups, $action, $this->_dynamic_roles, 'group', false,
            $lax_evaluate);

        return $groups;

    }

    /**
     * 指定されたロールのリストに対しアクセス権制御を行い
     * ロールのリストを返す。
     */
    function evalRoles($roles, $params)
    {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        if ( ! array_key_exists('session_name', $params)) {
            return $this->_evaluateRoles($roles, $params);
        }

        $action = $this->_getAction($params);
        if ( ! is_array($action) || count($action) == 0) {
            return $roles;
        }

        $session_name = $params['session_name'];

        // パラメータの保存先を取得
        require_once('fw/session_manager.csp');
        $sm = CB_SessionManager::getInstance();
        $session = $sm->getSession($session_name);
        $cannotselected_roles = $session->get('cannotselected_roles');
        $canselected_roles = $session->get('canselected_roles');

        if ( ! is_array($cannotselected_roles)) {
            $cannotselected_roles = [];
        }
        if ( ! is_array($canselected_roles)) {
            $canselected_roles = [];
        }

        // ロールなどの値の初期化
        $this->_initialize();

        static $_acc_logic = null;
        if ( ! $_acc_logic) {
            $_acc_logic = GRN_Schedule_Access_Logic::getInstance();
        }

        $infos = [];
        foreach (array_keys($roles) as $role_id) {
            if (array_key_exists($role_id, $canselected_roles)) {
                //アクセス可
            } elseif (array_key_exists($role_id, $cannotselected_roles)) {
                //アクセス不可
                unset($roles[$role_id]);
            } else {
                //未評価
                $infos[$role_id] = $role_id;
            }
        }

        // 利用できるIDのみを取得
        $evaluated = $_acc_logic->evaluateAccessesById($this->_login, $infos,
            $action, $this->_dynamic_roles, 'role');

        foreach (array_keys($infos) as $role_id) {
            if (array_key_exists($role_id, $evaluated)) {
                //アクセス可
                $canselected_roles[$role_id] = $role_id;
            } else {
                //アクセス不可
                unset($roles[$role_id]);
                $cannotselected_roles[$role_id] = $role_id;
            }
        }

        // セッションに保存
        $session->set('cannotselected_roles', $cannotselected_roles);
        $session->set('canselected_roles', $canselected_roles);

        // そのまま返す
        return $roles;
    }

    /**
     * 単純なロールの評価
     */
    function _evaluateRoles(& $roles, $params)
    {
        $action = $this->_getAction($params);
        if ( ! is_array($action) || count($action) == 0) {
            return $roles;
        }

        if ( ! is_array($roles) || count($roles) == 0) {
            return $roles;
        }

        // ロールなどの値の初期化
        $this->_initialize();

        static $_acc_logic = null;
        if ( ! $_acc_logic) {
            $_acc_logic = GRN_Schedule_Access_Logic::getInstance();
        }

        $roles = $_acc_logic->evaluateAccessesById($this->_login, $roles,
            $action, $this->_dynamic_roles, 'role');

        return $roles;

    }

    /**
     * 指定されたユーザーのリストに対しアクセス権制御を行い
     * ユーザーのリストを返す。
     */
    function evalUsers($users, $params)
    {
        if ( ! is_array($users) || count($users) == 0) {
            return $users;
        }
        $users = AppAccess::filterUserIdsInternalAccessByAppId($users,
            'schedule');
        $users = array_values($users);

        $action = $this->_getAction($params);
        if ( ! is_array($action) || count($action) == 0) {
            return $users;
        }

        static $_acc_logic = null;
        if (is_null($_acc_logic)) {
            $_acc_logic = GRN_Schedule_Access_Logic::getInstance();
        }

        $this->_initialize();

        $lax_evaluate = cb_at($params, self::LAX_EVALUATE, false);
        $users = $_acc_logic->evaluateAccessesById($this->_login, $users,
            $action, $this->_dynamic_roles, 'user', true, $lax_evaluate);

        return $users;
    }

    private function _getAction($params)
    {
        $action = cb_at($params, 'action', false);
        if (is_array($action)) {
            return array_intersect(['read', 'add', 'modify', 'delete'],
                $action);
        } else {
            return false;
        }
    }
}


