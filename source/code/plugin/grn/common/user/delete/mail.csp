<?php

use grn\fts\Application as FtsApplication;
use grn\fts\mail\IndexService;
use grn\mail\dao\GrnMailReceivedFileRelationDAO;
use grn\mail\dao\GrnMailFileInfoDAO;

function plugin_grn_common_user_delete_mail($user_info)
{
    /*
     *  DELETE するテーブル名とカラム名を定義する。
     *  いずれも重複する可能性があるため、
     *  両者を含む連想配列を要素とする配列の構造をとる。
     */
    $cascade_tables = [
        ['table' => 'account', 'column' => 'user'],
        ['table' => 'confirmationrequest', 'column' => 'user'],
        ['table' => 'confirmationresponse', 'column' => 'user'],
        ['table' => 'pop3erroruids', 'column' => 'ogre_user'],
    ];

    /*
     *  SET NULL するテーブル名とカラム名を定義する。
     *  いずれも重複する可能性があるため、
     *  両者を含む連想配列を要素とする配列の構造をとる。
     */
    $setnull_tables = [
        ['table' => 'account', 'column' => 'creator'],
        ['table' => 'account', 'column' => 'modifier'],
        ['table' => 'server', 'column' => 'creator'],
        ['table' => 'server', 'column' => 'modifier'],
        ['table' => 'status', 'column' => 'user'],
        ['table' => 'folder', 'column' => 'user'],
    ];

    $locator = GRN_ApplicationLocator::instance();
    $manager = $locator->getTableManager('mail');
    $table_prefix = 'grn_mail_';

    $uid = $user_info['uid'];
    require_once('mail/table.csp');
    $fileIds = [];
    if (defined('ON_FOREST')) {
        $fileInfoDao = new GrnMailFileInfoDAO();
        $tableName = 'tab_' . grn_mail_get_personal_tablename($uid,
                GRN_MAIL_FILEINFO_TABLE);
        $fileIds = $fileInfoDao->getFileIdsByUserId($uid, $tableName);
    }
    foreach ($cascade_tables as $t) {
        $table = $manager->getTableInfo($table_prefix . $t['table']);
        $table->deleteMatchedRows($t['column'], $uid);
    }

    foreach ($setnull_tables as $t) {
        $table = $manager->getTableInfo($table_prefix . $t['table']);
        $table->setNullMatchedColumns($t['column'], $uid);
    }

    grn_mail_drop_personal_table($uid, true);

    //Full Text Search
    if (FtsApplication::isAvailable()) {
        $searchService = new IndexService();
        $searchService->deleteMailIndexByUser($uid);
        cb_lwc_fts_update_service()->commit();
    }

    if (defined('ON_FOREST')) {
        $relationDao = new GrnMailReceivedFileRelationDAO();
        global $G_container_base;
        /** @var CB_BlobFileManager $fm */
        $fm = $G_container_base->getInstance('file_manager');
        foreach ($fileIds as $fileId) {
            $fm->addToRemoveByBlobId($relationDao->getBlobId($fileId, $uid));
            $relationDao->deleteRecord($fileId, $uid);
        }
        $fm->commit();
    }

    $db = $manager->getDBConnection();
    $db->commit();

    require_once('grn/delete_user_logger.csp');
    $logger = GRN_DeleteUserLogger::getInstance();
    $logger->log('Deleted mail data of user "' . $user_info['login_name']
                 . '"');
}

