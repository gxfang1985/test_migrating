<?php

require_once('grn/information.csp');

class plugin_grn_common_information_10message
    extends GRN_SystemInformationLogicBase
{
    function __construct()
    {
        parent::__construct('message');
    }

    function getContents()
    {
        global $G_container_base;
        /** @var $uum GRN_Uum */
        $uum = $G_container_base->getInstance('uum');
        $user = $uum->getLoginUser();

        require_once('grn/ui.csp');
        $cm = GRN_UIConfigManager::getInstance();
        $user_config = $cm->getUserConfig($user);
        $limit = $user_config->getListMax();

        require_once('grn/rss.csp');
        $manager = GRN_RSS_Manager::getInstance();
        $cybozu = new GRN_RSS_CybozuInfo();
        $channel_id = $cybozu->getFeedURL();

        require_once('grn/controller.csp');
        $utility = new GRN_ControllerUtil();
        $offset = $utility->getNaviStartPosition();
        $utility->setNaviStartPosition($offset);
        $navi_for_view = $utility->makeNaviInformation($offset,
            $limit,
            $manager->getItemNum($channel_id));
        $navi_for_view['navi']['params'] = ['id' => 'message'];

        $item_list = $manager->getItemList($channel_id, $offset, $limit);

        $items_for_view = [];
        foreach ($item_list as $item_id => $item_data) {
            $item = [];
            $item['title'] = $item_data['title'];
            $item['link'] = cb_pageurl('system/information/view_cybozu',
                ['id' => $item_data['oid']]);
            $item['date'] = $item_data['ptime'];

            $items_for_view[$item_id] = $item;
        }

        require_once('grn/smarty.csp');
        $t = new GRN_Smarty;

        // ---------------------------
        // for license
        require_once('grn/license.csp');
        $lm = GRN_LicenseManager::getInstance();
        $license_infos = [];
        $license_info = $lm->getLicense(GRN_LICENSE_BASESYSTEM);

        $license_info['file'] = 'grn/information_license.tpl';

        $is_demo_license = $lm->isDemoLicense($license_info['type']);
        $license_info['is_demo_license'] = $is_demo_license;
        if ($is_demo_license) {
            // 試用期間を不正に延ばそうとした場合（試用開始日時 > 現在日時）
            if (time() < $license_info['register']->unix_ts) {
                $license_info['remind_days'] = -1;
            } else {
                $license_info['remind_days']
                    = $lm->getRemindDays($license_info['limit']);
            }
            $license_infos[] = $license_info;
        } else {
            $license_info['remind_days']
                = $lm->getRemindDays($license_info['service_limit']);
            $license_infos[] = $license_info;
        }

        $t->assign('licenses', $license_infos);

        //-------------
        global $G_container_base;
        $active_count = $uum->getActiveUserCount();
        $all_count = $uum->getUserCount();
        $stop_count = $all_count - $active_count;
        $regist_count = $active_count - 1;

        $user_count = [
            'all'    => $all_count,
            'stop'   => $stop_count,
            'regist' => $regist_count
        ];

        $t->assign('user_count', $user_count);

        if (defined('ON_SAAS')) {
            $saas_limit_user = $uum->checkSaasLincense();
            $t->assign('saas_license_user', $saas_limit_user);

            // saas disk size
            define("DBCONN_OTHER", "dbconn");
            $db_other = $G_container_base->getInstance(DBCONN_OTHER);
            $grn_table = "SHOW TABLES LIKE 'tab_saas_disk'";
            $grn_table_query = $db_other->query($grn_table);
            $grn_table_check = $db_other->fetch_row($grn_table_query);
            if ($grn_table_check[0]) {
                $saas_disk = 1;
                $grn_disk_query1
                    = 'SELECT _id,disk_value FROM tab_saas_disk ORDER BY _id';
                $grn_disk = $db_other->query($grn_disk_query1);
                while ($grn_disk_rows = $db_other->fetch_row($grn_disk)) {
                    switch ($grn_disk_rows[0]) {
                        case '1':
                            $saas_disk_max_size = $grn_disk_rows[1];
                            break;
                        case '2':
                            $saas_disk_data_size = $grn_disk_rows[1];
                            break;
                        case '3':
                            $saas_disk_files_size = $grn_disk_rows[1];
                            break;
                    }
                }
                $saas_disk_usage_size = $saas_disk_data_size
                                        + $saas_disk_files_size;
                $saas_disk_rest_size = $saas_disk_max_size
                                       - $saas_disk_usage_size;

                $t->assign('saas_disk_max_size', $saas_disk_max_size);
                $t->assign('saas_disk_usage_size', $saas_disk_usage_size);
                $t->assign('saas_disk_rest_size', $saas_disk_rest_size);
            } else {
                $saas_disk = 0;
            }
            $t->assign('saas_disk', $saas_disk);
        }
        //------------

        require_once('grn/customer.csp');
        $c = GRN_Customer::getInstance();
        $customer_id = $c->getProperty('customer_id');
        $t->assign('customer_id', $customer_id);
        // ----------------------------

        $t->assign('items', $items_for_view);
        $t->assign('navi', $navi_for_view);

        return $t->fetch('grn/information_message.tpl');
    }
}
