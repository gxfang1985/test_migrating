<?php

require_once('grn/rss.csp');

define('GRN_RSS_PARSER_ATOM0_3', 'atom0.3');
define('GRN_RSS_TAG_ATOM0_3', 'FEED');

class plugin_grn_common_rss_25atom0_3 extends GRN_RSS_ParserBase
{
    /**
     * top level tag
     *
     * @access   protected
     */
    var $__Tag
        = [
            '' => ['children' => ['' => ['FEED']]]
        ];

    var $_FEED_Tag
        = [
            '' => [
                'children' => [
                    ''   => [
                        'TITLE',
                        'UPDATED',
                        'MODIFIED',
                        'LINK',
                        'TAGLINE',
                        'ENTRY'
                    ],
                    'DC' => ['DATE']
                ]
            ]
        ];

    var $_ENTRY_Tag
        = [
            '' => [
                'children' => [
                    ''   => [
                        'TITLE',
                        'ID',
                        'LINK',
                        'UPDATED',
                        'MODIFIED',
                        'PUBLISHED',
                        'ISSUED',
                        'CREATED',
                        'SUMMARY',
                        'CONTENT',
                        'CATEGORY',
                        'AUTHOR'
                    ],
                    'DC' => ['SUBJECT', 'DATE', 'CREATOR']
                ]
            ]
        ];

    var $_AUTHOR_Tag
        = [
            '' => ['children' => ['' => ['NAME', 'EMAIL']]]
        ];

    var $_openResource = false;

    function __construct()
    {
        parent::__construct(GRN_RSS_PARSER_ATOM0_3);
    }

    /**
     * @param object $cache GRN_RSS_Cache
     * @param array  $error error information
     * @param string $tag   identification tag (e.g. 'rss')
     *
     * @return bool
     */
    function checkFormat(& $cache, & $error, $tag = null)
    {
        $tag = GRN_RSS_TAG_ATOM0_3;

        return parent::checkFormat($cache, $error, $tag);
    }

    /**
     * get channel information
     * you must override this function in the inherited class.
     *
     * @param    resource $file_path file handler
     * @param    array    $error     error information
     *
     * @return   mixed      channel info array
     *                      return FALSE if the channel info doesn't exist in the RSS data
     *
     * return['title']       => string   channel title
     *       ['channel_url'] => string   channel URL
     *       ['description'] => string   channel description
     *       ['ptime']       => string   channel published time
     */
    function getChannelInfo($file_path, & $error)
    {
        $this->_elementInfo = [];

        $this->setStartConditionFunc('channelStartCondition');
        $this->setEndConditionFunc('channelEndCondition');
        $this->setParseFunc('parseChannel');

        $this->open($file_path);

        if ($this->_openResource) {
            $ret = parent::_parse();
            $error = libxml_get_errors();
            if ( ! $ret) {
                $this->close();

                return false;
            }
        }

        if ( ! array_key_exists('ptime', $this->_elementInfo)) {
            $ptime = new CB_TimeStamp();
            $ptime->unix_ts = time();
            $this->_elementInfo['ptime'] = $ptime;
        }

        return $this->_elementInfo;
    }

    function channelStartCondition()
    {
        return $this->_condition(XMLReader::ELEMENT, '', 'FEED');
    }

    function channelEndCondition()
    {
        return $this->_condition(XMLReader::END_ELEMENT, '', 'FEED');
    }

    function parseChannel()
    {
        end($this->_node_stack);
        $parent = prev($this->_node_stack);

        switch ($parent['tag']) {
            case 'FEED':
                $node = strtoupper($this->_reader->name);

                if (strcmp($node, 'TITLE') === 0
                    || strcmp($node, 'UPDATED') === 0
                    || strcmp($node, 'MODIFIED') === 0
                    || strcmp($node, 'DC:DATE') === 0
                    || strcmp($node, 'TAGLINE') === 0
                ) {
                    @$this->_reader->read();

                    if ($this->_reader->nodeType === XMLReader::ELEMENT) {
                        // <content ...><div>...</div></content>のような場合がある
                        $this->_parseElement();
                    } elseif ($this->_reader->nodeType
                              === XMLReader::END_ELEMENT
                    ) {
                        // 値が空の場合があるので
                        $this->_parseEndElement();
                    } else {
                        switch ($node) {
                            case 'TITLE':
                                $this->_elementInfo['title']
                                    = $this->_reader->value;
                                break;
                            case 'UPDATED':
                            case 'MODIFIED':
                            case 'DC:DATE':
                                $val
                                    =& grn_rss_w3cdtf2unix_ts($this->_reader->value);
                                if ($val) {
                                    if (array_key_exists('ptime',
                                        $this->_elementInfo)
                                    ) {
                                        $date = $this->_elementInfo['ptime'];
                                        if ($val->unix_ts < $date->unix_ts) {
                                            // use new date
                                            $val = $date;
                                        }
                                    }
                                    $this->_elementInfo['ptime'] = $val;
                                }
                                break;
                            case 'TAGLINE':
                                $this->_elementInfo['description']
                                    = $this->_reader->value;
                                break;
                        }
                    }
                }

                break;

            case '':
                // link は node_stack に stack されない
                if (strcmp($this->_reader->name, 'link') === 0
                    && strcmp($this->_reader->getAttribute('rel'), 'alternate')
                       === 0
                ) {
                    if ($url = $this->_reader->getAttribute('href')) {
                        $this->_elementInfo['channel_url'] = $url;
                    }
                }
                break;
        }

        return true;

    }

    function getNextItemInfo($file_path, & $error)
    {
        $this->_elementInfo = [];

        $this->setStartConditionFunc('itemStartCondition');
        $this->setEndConditionFunc('itemEndCondition');
        $this->setParseFunc('parseItem');

        $this->open($file_path);

        if ($this->_openResource) {
            $ret = parent::_parse();
            $error = libxml_get_errors();
            if ( ! $ret) {
                $this->close();

                return false;
            }
        }

        if ( ! array_key_exists('id', $this->_elementInfo)) {
            if (array_key_exists('url', $this->_elementInfo)) {
                $this->_elementInfo['id'] = $this->_elementInfo['url'];
            } else {
                return false;
            }
        }

        return $this->_elementInfo;
    }

    function itemStartCondition()
    {
        return $this->_condition(XMLReader::ELEMENT, 'FEED', 'ENTRY');
    }

    function itemEndCondition()
    {
        return $this->_condition(XMLReader::END_ELEMENT, 'FEED', 'ENTRY');
    }

    function parseItem()
    {
        end($this->_node_stack);
        $parent = prev($this->_node_stack);

        switch ($parent['tag']) {
            case 'FEED':
                // link は node_stack に stack されない
                if (strcmp($this->_reader->name, 'link') === 0
                    && strcmp($this->_reader->getAttribute('rel'), 'alternate')
                       === 0
                ) {
                    if ($url = $this->_reader->getAttribute('href')) {
                        $this->_elementInfo['url'] = $url;
                    }
                }
                break;

            case 'ENTRY':
                $node = strtoupper($this->_reader->name);

                switch ($node) {
                    case 'TITLE':
                    case 'ID':
                    case 'UPDATED':
                    case 'MODIFIED':
                    case 'PUBLISHED':
                    case 'ISSUED':
                    case 'CREATED':
                    case 'DC:DATE':
                    case 'SUMMARY':
                    case 'CONTENT':
                    case 'CATEGORY':
                    case 'DC:SUBJECT':
                    case 'DC:CREATOR':

                        @$this->_reader->read();

                        if ($this->_reader->nodeType === XMLReader::ELEMENT) {
                            // <content ...><div>...</div></content>のような場合がある
                            $this->_parseElement();
                        } elseif ($this->_reader->nodeType
                                  === XMLReader::END_ELEMENT
                        ) {
                            // 値が空の場合があるので
                            $this->_parseEndElement();
                        } else {
                            switch ($node) {
                                case 'TITLE':
                                    $this->_elementInfo['title']
                                        = $this->_reader->value;
                                    break;
                                case 'ID':
                                    $this->_elementInfo['id']
                                        = $this->_reader->value;
                                    break;
                                case 'UPDATED':
                                case 'MODIFIED':
                                case 'PUBLISHED':
                                case 'ISSUED':
                                case 'CREATED':
                                case 'DC:DATE':
                                    if ($date
                                        = grn_rss_w3cdtf2unix_ts($this->_reader->value)
                                    ) {
                                        if (array_key_exists('ptime',
                                            $this->_elementInfo)
                                        ) {
                                            $ts = $this->_elementInfo['ptime'];
                                            // use new date
                                            if ($ts->unix_ts > $date->unix_ts) {
                                                $date = $ts;
                                            }
                                        }
                                        $this->_elementInfo['ptime'] = $date;
                                    }
                                    break;
                                case 'SUMMARY':
                                    $this->_elementInfo['description']
                                        = $this->_reader->value;
                                    break;
                                case 'CONTENT':
                                    if ( ! array_key_exists('description',
                                        $this->_elementInfo)
                                    ) {
                                        $this->_elementInfo['description']
                                            = $this->_reader->value;
                                    }
                                    break;
                                case 'CATEGORY':
                                case 'DC:SUBJECT':
                                    $this->_elementInfo['category']
                                        = $this->_reader->value;
                                    break;
                                case 'DC:CREATOR':
                                    $this->_elementInfo['author']
                                        = $this->_reader->value;
                                    break;
                            }
                        }

                        break;
                }

                break;

            case 'AUTHOR':
                $node = strtoupper($this->_reader->name);

                @$this->_reader->read();

                // 値が空の場合があるので
                if ($this->_reader->nodeType === XMLReader::END_ELEMENT) {
                    if ($this->_parsing) {
                        if (call_user_func([$this, $this->_endConditionFunc])) {
                            array_pop($this->_node_stack);

                            return false;
                        }
                    }

                    array_pop($this->_node_stack);

                } else {
                    switch ($node) {
                        case 'NAME':
                            $this->_elementInfo['author']
                                = $this->_reader->value;
                            break;
                        case 'EMAIL':
                            if ( ! array_key_exists('author',
                                $this->_elementInfo)
                            ) {
                                $this->_elementInfo['author']
                                    = $this->_reader->value;
                            }
                            break;
                    }
                    break;
                }

                break;
        }

        return true;

    }

    function _condition($type, $parent_tag, $tag)
    {
        end($this->_node_stack);
        $parent = prev($this->_node_stack);

        if (strcmp($parent['tag'], $parent_tag) == 0
            && $this->_reader->nodeType == $type
            && strcmp(strtoupper($this->_reader->name), $tag) == 0
        ) {
            return true;
        }

        return false;
    }

}


