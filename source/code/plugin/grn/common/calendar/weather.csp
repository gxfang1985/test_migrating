<?php

use grn\grn\CalendarExtensionPluginInterface;

require_once('grn/calendar.csp');
require_once('cbwebsrv/common.csp');
require_once('cbwebsrv/tool_define.csp');
require_once('cbwebsrv/weather.csp');

class plugin_grn_common_calendar_weather
    implements CalendarExtensionPluginInterface
{
    var $_ws;

    function __construct()
    {
        $this->_ws = GRN_CBWebSrv_WeatherService::getInstance();
    }

    /**
     * @return bool
     */
    public function isAvailable(): bool
    {
        if ( ! grn_cbwebsrv_is_available_service(GRN_CBWEBSRV_SERVICE_WEATHER)) {
            return false;
        }
        require_once('cbwebsrv/weather.csp');
        $web_srv = new GRN_CBWebSrv_WeatherService();

        return $web_srv->isExistEventProperties(GRN_CBWEBSRV_EVENT_WEATHER);
    }

    /**
     * @param CB_Date $start
     * @param CB_Date $end
     * @param array   $config
     *
     * @return array
     */
    function &getDaysInfo($start, $end, $config)
    {
        if ( ! grn_cbwebsrv_is_available_service(GRN_CBWEBSRV_SERVICE_WEATHER)) {
            $ret = [];

            return $ret;
        }

        $location_list = [];
        if (isset($config['location_list'])
            && is_array($config['location_list'])
        ) {
            $location_list = $config['location_list'];
        }

        if (count($location_list) <= 0) {
            $ret = [];

            return $ret;
        }

        require_once('fw/date.csp');
        $endx = new CB_DateEx($end);
        $interval = $endx->getInterval($start);
        $days = (int)$interval->toDays();

        $ret = $this->_format($this->_ws->getWeather($location_list, $start,
            $days));

        return $ret;
    }

    /**
     * format weather forecast data for UI
     *
     * @access   private
     *
     * @param    $weather   array   weather forecast information
     *
     * @return   array
     *
     * $weather[location id]                => array    key: location id
     *             ['name']                 => string   location name
     *             ['date_list']            => array    weather info
     *                  [date]              => array    key: yyyy-mm-dd
     *                     ['weather']      => string   weather name
     *                     ['weather_code'] => string   weather code
     *                     ['url']          => string   weather information page URL
     *
     * return array [date]                  => array    key: yyyy-mm-dd
     *                 [location id]        => array    key: location id
     *                     ['data']         => string   formatted weather forecast data
     *                     ['icon']         => string   weather icon
     *                     ['type']         => string   calendar type (dummy)
     */
    function _format($weather)
    {
        // temporary
        $daysinfo = [];

        if (is_array($weather)) {
            foreach ($weather as $location_id => $location) {
                foreach ($location['date_list'] as $fdate => $w) {
                    $weather_info = [];

                    $location_name = json_decode($location['name'], true);
                    $item_info['location_name']
                        = $location_name[GRN_CBWEBSRV_WEATHER_POINT_NAME];
                    $item_info['info'] = $w;

                    $weather_info['data'] = $item_info;
                    $weather_info['icon'] = $w['image'];
                    $weather_info['type'] = 'weather';

                    if ( ! array_key_exists($fdate, $daysinfo)) {
                        $daysinfo[$fdate] = [];
                    }
                    $daysinfo[$fdate][$location_id] = $weather_info;
                }
            }
        }

        return $daysinfo;
    }

    /**
     * @param array $current_info location list contain existing settings
     *
     * @return array    $location_list
     *
     * array $location_list [location_list]             => array
     *                         [prefectureCode]         => string   prefecture code
     *                             [prefectureName]     => string   prefecture name
     *                             [display]            => bool     being in setting or not
     *                             [point_list]         => array    list of location
     *                                 [pointCode]      => string   point code
     *                                     [pointName]  => string   point name
     *                                     [display]    => bool     being in setting or not
     *                                     ...
     *                          ...
     */
    function getDisplayItemInfo($current_info)
    {
        if ( ! grn_cbwebsrv_is_available_service(GRN_CBWEBSRV_SERVICE_WEATHER)) {
            $current_info['disable'] = true;

            return $current_info;
        }
        $location_list_setting = $current_info['location_list'] ?? [];
        $location_list
            = $this->_ws->getLocationTree($location_list_setting);

        return ['location_list' => $location_list];
    }
}
