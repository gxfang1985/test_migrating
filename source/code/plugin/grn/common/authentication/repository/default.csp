<?php
/**
 * Default (MySQL) User Repository Driver
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */

//Include Files
require_once('grn/authentication.csp');

class plugin_grn_common_authentication_repository_default
    extends GRN_Authentication_Repository_DriverBase
{
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_REPOSITORY_DEFAULT, 'name'),
            GRN_AUTH_REPOSITORY_DEFAULT,
            $driver_page
        );
    }

    /**
     * Set Driver Config
     *
     * @param  array $driver_settings //Driver Settings
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings)
    {
        //Always TRUE (No Configuration)
        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings    //Driver Settings
     */
    function &getConfig()
    {
        //Always null (No Configuration)
        $ret = null;

        return $ret;
    }

    /**
     * Authenticate
     *
     * @param  string $account  User Acount
     * @param  string $password User Password
     *
     * @return bool    $result
     */
    function authenticate($account, $password = null, $check_password = true)
    {
        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get User by Account
        $user = $grn_uum->getUserByForeignKey($account);
        if ( ! $user) {
            //Authenticate Failed
            return false;
        }

        //Check Password
        if ($check_password) {
            if ( ! $grn_uum->_sp->authenticate($user, $password)) {
                //Authenticate Failed
                return false;
            }
        }

        //Authenticate Success
        return true;
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid
     *
     * @return int|true $result
     */
    function getPasswordExpirationDays($uid)
    {
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');

        $expired = $grn_uum->getPasswordExpired($uid);
        if (is_null($expired)) {
            return true;
        }

        require_once('fw/date.csp');
        $ts1 = new CB_TimeStampEx($expired);
        $date1 = $ts1->getDate();
        $ts2 = new CB_TimeStampEx();
        $date2 = $ts2->getDate();

        $span = $date1->getInterval($date2);

        return ((int)$span->toDays());
    }
}


