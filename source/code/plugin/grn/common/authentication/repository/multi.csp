<?php
/**
 * Multi Repository Driver
 */

//Include Files
require_once('grn/authentication.csp');

class plugin_grn_common_authentication_repository_multi
    extends GRN_Authentication_Repository_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings
        = [
            'id' => null, // Repository Method ID
        ];

    /** Configuration Complete Flag **/
    var $_configured = false;

    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
        ];

        //Initialize Parent Class
        parent::__construct(
            cb_msg(GRN_AUTH_REPOSITORY_MULTI, 'name'),
            GRN_AUTH_REPOSITORY_MULTI,
            $driver_page
        );
    }

    /**
     * Set Driver Config
     *
     * @param  array $driver_settings //Driver Settings
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings)
    {
        //Check Arguments
        if ( ! is_array($driver_settings)) {
            //Driver Configuration Failed
            return false;
        }

        $id = cb_at($driver_settings, 'id');
        if ( ! is_numeric($id)) {
            //Driver Configuration Failed
            return false;
        }

        $this->_driver_settings['id'] = $id;

        //Set Configuration Complete Flag
        $this->_configured = true;

        //Driver Configuration Success
        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings    //Driver Settings
     */
    function &getConfig()
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            $ret = false;

            return $ret;
        }

        return $this->_driver_settings;
    }

    /**
     * Authenticate
     *
     * @param  string $account  User Acount
     * @param  string $password User Password
     *
     * @return bool    $result
     */
    function authenticate($account, $password = null, $check_password = true)
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            return false;
        }

        $repository_driver = $this->getRepositoryDriverByUserAccount($account);
        if ( ! $repository_driver) {
            return false;
        }

        return $repository_driver->authenticate($account, $password,
            $check_password);
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid
     *
     * @return int $result
     */
    function getPasswordExpirationDays($uid)
    {
        global $G_container_base;
        /** @var GRN_Uum $grn_uum */
        $grn_uum = $G_container_base->getInstance('uum');
        $user = $grn_uum->getUser($uid);
        $account = $user->get('foreign_key');

        $repository_driver = $this->getRepositoryDriverByUserAccount($account);

        if ( ! $repository_driver) {
            return parent::getPasswordExpirationDays($uid);
        }

        return $repository_driver->getPasswordExpirationDays($uid);
    }

    /**
     * @param $account
     *
     * @return false
     */
    public function accountIsMatched($account)
    {
        return false;
    }

    /**
     * @param $account
     *
     * @return GRN_Authentication_Repository_DriverBase|false
     */
    protected function getRepositoryDriverByUserAccount($account)
    {
        $authentication_service = GRN_Authentication_Service::getInstance();
        $repository_methods
            = $authentication_service->getChildRepositoryMethodsByParentId(
            $this->_driver_settings['id']
        );

        $repository_loader = new GRN_Authentication_Repository_Loader();
        foreach ($repository_methods as $repository_method) {
            // Load Repository Driver
            $driver_settings
                = cb_unserialize($repository_method->get('driver_settings'),
                ["allowed_classes" => false]);
            $repository_driver = $repository_loader->loadDriver(
                $repository_method->get('driver_type'), $driver_settings
            );

            if ($repository_driver->accountIsMatched($account)) {
                return $repository_driver;
            }
        }

        return false;
    }
}
