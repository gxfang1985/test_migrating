<?php
/**
 * CBApi Login Driver
 *
 * @author  Eiji TAEN   2006/08
 * @version 1.0
 */

//Include Files
require_once('grn/authentication.csp');

class plugin_grn_common_authentication_login_cbapi
    extends GRN_Authentication_Login_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings = null;

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;

        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_LOGIN           => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
            GRN_AUTH_PAGE_TYPE_PWD_EXPIRED     => $noPage,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_LOGIN_CBAPI, 'name'),
            GRN_AUTH_LOGIN_CBAPI,
            $driver_page
        );
    }

    /**
     * Set Driver Config
     *
     * @param  array  $driver_settings //Driver Settings
     * @param  object $repository      //User Repository Driver Object
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings    //Driver Settings
     */
    function &getConfig()
    {
        //Always NULL
        return $this->_driver_settings;
    }

    /**
     * Login
     *
     * @return bool    $result
     */
    function login()
    {
        global $G_INPUT;
        if (array_key_exists('uid', $G_INPUT) === false) {
            require_once('cbapi/error_code.csp');
            grn_cbapi_throw_error(E_GRN_CBAPI_NO_PARAMETER);
        }
        $uid = $G_INPUT['uid'];

        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get User Object from User ID
        $user = $grn_uum->getUser($uid);
        if ( ! $user) {
            require_once('cbapi/logic.csp');
            require_once('cbapi/error_code.csp');
            grn_cbapi_throw_error(E_GRN_CBAPI_NO_USER);
        }

        $api_id = array_key_exists('api_id', $G_INPUT)
            ? $G_INPUT['api_id'] : '';
        $browser_type = array_key_exists('typ', $G_INPUT) ? $G_INPUT['typ']
            : '';

        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();

        //check admin role
        if (strcmp($api_id, 'admin_auth') === 0) {
            if ($system->adminSubSystem('user', $user) === false) {
                require_once('cbapi/logic.csp');
                require_once('cbapi/error_code.csp');
                grn_cbapi_throw_error(E_GRN_CBAPI_NO_ADMINISTATOR_ROLE);
            }
        }

        //Authenticate Only Account
        $account =& $user->get('foreign_key');
        $password = array_key_exists('pwd', $G_INPUT) ? $G_INPUT['pwd'] : '';
        $repository = $this->_user_repository;

        if ( ! $system->getPasswordEmptyLogin()) {
            if (is_null($password) || strlen($password) === 0) {
                require_once('cbapi/logic.csp');
                require_once('cbapi/error_code.csp');
                grn_cbapi_throw_error(E_GRN_CBAPI_INVALID_PASSWORD);
            }
        }

        // 一般ユーザーでのログインはドライバが指定されているとレポジトリ設定されている
        // 認証データベースが利用できないので、一旦ドライバ名をリセットして本体ログイン時の
        // ドライバを利用する
        if (strcmp($api_id, 'user_auth') === 0) {
            $service = GRN_Authentication_Service::getInstance();

            if (strcmp($browser_type, '1') === 0) // 本体
            {
                if ( ! $this->_repositoryAuthenticate($service, null, $account,
                    $password)
                ) {
                    //Authenticate Failed
                    require_once('cbapi/logic.csp');
                    require_once('cbapi/error_code.csp');
                    grn_cbapi_throw_error(E_GRN_CBAPI_INVALID_PASSWORD);
                }
            } elseif (strcmp($browser_type, '2')
                      === 0
            ) // ケータイ/ワークフローケータイ/報告書ケータイ
            {
                if ( ! $this->_repositoryAuthenticate($service, 'cellular',
                    $account, $password)
                ) {
                    //Authenticate Failed
                    require_once('cbapi/logic.csp');
                    require_once('cbapi/error_code.csp');
                    grn_cbapi_throw_error(E_GRN_CBAPI_INVALID_PASSWORD);
                }
            }
        } else {
            if ( ! $repository->authenticate($account, $password)) {
                //Authenticate Failed
                require_once('cbapi/logic.csp');
                require_once('cbapi/error_code.csp');
                grn_cbapi_throw_error(E_GRN_CBAPI_INVALID_PASSWORD);
            }
        }

        //Save Authenticated Account and Password
        parent::setAccount($account);
        parent::setPassword($password);

        //Authenticate Success
        return true;
    }

    function _repositoryAuthenticate($service, $driver, $account, $password)
    {
        global $G_authentication_force_driver;
        $backup_driver = $G_authentication_force_driver;
        $G_authentication_force_driver = $driver;

        $loader = $service->getCurrentLoginLoader();
        $repository = $loader->_getCurrentRepositoryDriver();

        $result = $repository->authenticate($account, $password);

        $G_authentication_force_driver =& $backup_driver;

        return $result;
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid
     *
     * @return int $result
     */
    function getPasswordExpirationDays($uid)
    {
        $repository = $this->_user_repository;

        return $repository->getPasswordExpirationDays($uid);

    }

    /**
     * Return whether the login driver can use multiple repository or not.
     *
     * @return bool
     */
    public function canUseMultipleRepository()
    {
        return false;
    }
}


