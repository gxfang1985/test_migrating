<?php
/**
 * Emviroment Valiable Login Driver
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */

//Include Files
require_once('grn/authentication.csp');

//String Resources
define('GRN_AUTH_LOGIN_ENVIRONMENT_LOGIN',
    'login.csp');                                               //Driver Login Page
define('GRN_AUTH_LOGIN_ENVIRONMENT_VIEW_SYSTEM',
    'system/authentication/login/view_environment.csp');        //Driver System View Page
define('GRN_AUTH_LOGIN_ENVIRONMENT_ADD_SYSTEM',
    'system/authentication/login/add_environment.csp');         //Driver System Add Page
define('GRN_AUTH_LOGIN_ENVIRONMENT_MODIFY_SYSTEM',
    'system/authentication/login/modify_environment.csp');      //Driver System Modify Page
define('GRN_AUTH_LOGIN_ENVIRONMENT_PWD_EXPIRED',
    null);                                                      //Driver Password Expired Page

class plugin_grn_common_authentication_login_environment
    extends GRN_Authentication_Login_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings
        = [
            'variable_name'     => null,    //Environment Variable Name
            'credential_format' => null,    //Credential Format
            'credential_prefix' => null,    //Credential Prefix String
            'credential_suffix' => null     //Credential Suffix String
        ];

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_LOGIN           => GRN_AUTH_LOGIN_ENVIRONMENT_LOGIN,
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => GRN_AUTH_LOGIN_ENVIRONMENT_VIEW_SYSTEM,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => GRN_AUTH_LOGIN_ENVIRONMENT_ADD_SYSTEM,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => GRN_AUTH_LOGIN_ENVIRONMENT_MODIFY_SYSTEM,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
            GRN_AUTH_PAGE_TYPE_PWD_EXPIRED     => GRN_AUTH_LOGIN_ENVIRONMENT_PWD_EXPIRED,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_LOGIN_ENVIRONMENT, 'name'),
            GRN_AUTH_LOGIN_ENVIRONMENT,
            $driver_page
        );
    }

    /**
     * Set Driver Config
     *
     * @param  array  $driver_settings //Driver Settings
     * @param  object $repository      //User Repository Driver Object
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check Arguments
        if ( ! is_array($driver_settings)) {
            //Driver Configuration Failed
            return false;
        }
        if ( ! array_key_exists('variable_name', $driver_settings)
             ||
             ! array_key_exists('credential_format', $driver_settings)
        ) {
            //Driver Configuration Failed
            return false;
        }

        //Check User Repository Driver
        if ( ! is_object($repository)) {

            return false;
        }

        //Set Driver Configuration
        $this->_driver_settings['variable_name']
            = $driver_settings['variable_name'];
        $this->_driver_settings['credential_format']
            = $driver_settings['credential_format'];
        $this->_driver_settings['credential_prefix']
            = @$driver_settings['credential_prefix'];
        $this->_driver_settings['credential_suffix']
            = @$driver_settings['credential_suffix'];

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        //Driver Configuration Success
        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings    //Driver Settings
     */
    function &getConfig()
    {
        //Check Configuration Complete Flag
        return $this->_driver_settings;
    }

    /**
     * Login
     *
     * @return bool    $result
     */
    function login()
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            //Login Failed
            return false;
        }

        //Get Environment Variable
        $environment_value = $this->getEnvironmentValue();
        if (strlen($environment_value) === 0) {
            //Login Failed
            return false;
        }

        //Process Prefix and Suffix String
        $prefix =& $this->_driver_settings['credential_prefix'];
        $suffix =& $this->_driver_settings['credential_suffix'];
        if (strlen($prefix) > 0) {
            $prefix_pos = mb_strpos($environment_value, $prefix);
            if (is_numeric($prefix_pos)) {
                $environment_value = mb_substr($environment_value,
                    $prefix_pos + mb_strlen($prefix));
            }
        }
        if (strlen($suffix) > 0) {
            $suffix_pos = mb_strrpos($environment_value, $suffix);
            if (is_numeric($suffix_pos)) {
                $environment_value = mb_substr($environment_value, 0,
                    $suffix_pos);
            }
        }

        //Preccess Credential Format
        $account = null;
        $password = null;
        $format =& $this->_driver_settings['credential_format'];
        switch ($format) {
            case 'account':
                $account = $environment_value;
                break;
            case 'account:password':
                $values = explode(':', $environment_value);
                $account = $values[0];
                $password = $values[1];
            default:
                $account = $environment_value;
                break;
        }

        //Authenticate
        $repository = $this->_user_repository;
        if ( ! $repository->authenticate($account, $password, false)) {
            //Login Failed
            return false;
        }

        //Save Login Account and Password
        parent::setAccount($account);
        parent::setPassword($password);

        //Login Success
        return true;
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid
     *
     * @return int $result
     */
    function getPasswordExpirationDays($uid)
    {
        return true;
    }

    /**
     * Visible for testing
     *
     * @return string
     */
    protected function getEnvironmentValue()
    {
        return getenv($this->_driver_settings['variable_name']);
    }

    /**
     * Return whether the login driver can use multiple repository or not.
     *
     * @return bool
     */
    public function canUseMultipleRepository()
    {
        return false;
    }
}

