<?php

use grn\grn\authentication\policy\LoginUserFindPolicyDefault;
use grn\grn\authentication\policy\LoginUserFindPolicyDefaultForest;
use grn\grn\authentication\policy\LoginUserFindPolicyInterface;

/**
 * System Login Driver
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */

//Include Files
require_once('grn/authentication.csp');

//String Resources
define('GRN_AUTH_LOGIN_SYSTEM_LOGIN', 'system_login.csp');  //Driver Login Page
define('GRN_AUTH_LOGIN_SYSTEM_PWD_EXPIRED',
    'system_pwd_expired.csp');  //Driver Password Expired Page

class plugin_grn_common_authentication_login_system
    extends GRN_Authentication_Login_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings = null;

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_LOGIN           => GRN_AUTH_LOGIN_SYSTEM_LOGIN,
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
            GRN_AUTH_PAGE_TYPE_PWD_EXPIRED     => GRN_AUTH_LOGIN_SYSTEM_PWD_EXPIRED,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_LOGIN_SYSTEM, 'name'),
            GRN_AUTH_LOGIN_SYSTEM,
            $driver_page
        );
    }

    /**
     * Set Driver Config
     *
     * @param  array  $driver_settings //Driver Settings
     * @param  object $repository      //User Repository Driver Object
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings    //Driver Settings
     */
    function &getConfig()
    {
        //Always NULL
        return $this->_driver_settings;
    }

    /**
     * Login
     *
     * @return bool    $result
     */
    function login()
    {
        $userFindPolicy = $this->getUserFindPolicy();
        $user = $userFindPolicy->findUser();
        if ( ! $user) {
            return false;//Login Failed
        }

        $account = $user->get('foreign_key');
        $password = $userFindPolicy->getPasswordToken();

        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();
        if ( ! $system->getPasswordEmptyLogin()) {
            if (is_null($password) || strlen($password) === 0) {
                cb_throw_error(E_GRN_CMMN_AUTH_LOGIN_EMPTY_PASSWORD);
            }
        }

        //Authenticate
        $repository = $this->_user_repository;
        if ( ! $repository->authenticate($account, $password)) {
            return false;//Login Failed
        }

        //Save Login Account and Password
        parent::setAccount($account);
        parent::setPassword($password);

        return true; //Login Success
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid
     *
     * @return int $result
     */
    function getPasswordExpirationDays($uid)
    {
        $repository = $this->_user_repository;

        return $repository->getPasswordExpirationDays($uid);
    }

    /**
     * @return LoginUserFindPolicyInterface
     */
    protected function getUserFindPolicy()
    {
        if (defined("ON_FOREST")) {
            return LoginUserFindPolicyDefaultForest::getInstance();
        }

        return LoginUserFindPolicyDefault::getInstance();
    }

    /**
     * Return whether the login driver can use multiple repository or not.
     *
     * @return bool
     */
    public function canUseMultipleRepository()
    {
        return false;
    }
}


