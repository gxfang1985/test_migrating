<?php

use grn\grn\authentication\policy\LoginUserFindPolicyInterface;
use grn\grn\authentication\policy\LoginUserFindPolicyUtilAPI;
use grn\grn\authentication\policy\slash\SlashSessionManagementAPIRunner;
use grn\cydec\slash\session\api\SlashSessionManagementAPI;

/**
 * Util_Api Login Driver
 *
 * @version 1.0
 */

//Include Files
require_once('grn/authentication.csp');
require_once('fw/i18n/locale.csp');

class plugin_grn_common_authentication_login_util_api
    extends GRN_Authentication_Login_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings = null;

    /** /** @var GRN_Authentication_Repository_DriverBase */
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_LOGIN           => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
            GRN_AUTH_PAGE_TYPE_PWD_EXPIRED     => $noPage,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_LOGIN_UTIL_API, 'name'),
            GRN_AUTH_LOGIN_UTIL_API,
            $driver_page
        );
    }

    /**
     * Set Driver Config
     *
     * @param  array $driver_settings //Driver Settings
     * @param object $repository      //User Repository Driver Object
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings    //Driver Settings
     */
    function &getConfig()
    {
        return $this->_driver_settings;//Always NULL
    }

    /**
     * Login
     *
     * @return bool    $result
     */
    function login()
    {
        //read raw POST data
        $post_data = file_get_contents('php://input');
        if ( ! $post_data) {
            require_once('util_api/error_code.csp');
            cb_throw_error(E_GRN_UTIL_API_REQUEST_PARSE_FAILED);
        }

        require_once('util_api/logic.csp');
        $apiService = GRN_Util_Api_Service::getInstance();
        $apiService->import($post_data);
        $userFindPolicy = $this->getUserFindPolicy($apiService);

        // get login info
        $user = $userFindPolicy->findUser();
        if ( ! $user) {
            return false;//Login Failed
        }
        $account = $user->get('foreign_key');
        $password = $userFindPolicy->getPasswordToken();


        //Authenticate
        if ( ! $this->_user_repository->authenticate($account, $password)) {
            return false;
        }

        //GRN2-1610
        //limited password
        $days = $this->getPasswordExpirationDays($user->getOID());
        if (is_numeric($days) && $days <= 0) {
            require_once('util_api/error_code.csp');
            cb_throw_error(E_GRN_UTIL_API_PASSWORD_EXPIRED);

            return false;
        }
        //end GRN2-1610

        //Save Login Account and Password
        parent::setAccount($account);
        parent::setPassword($password);

        //Login Success
        return true;
    }

    /**
     * getPasswordExpirationDays
     *
     * @param  int $uid
     *
     * @return int $result
     */
    function getPasswordExpirationDays($uid)
    {
        $repository = $this->_user_repository;
        $days = $repository->getPasswordExpirationDays($uid);
        if ($days > 0) {
            return true;
        } else {
            return $days;
        }
    }

    /**
     * cybozu.com環境では、Slashのsession管理をおこなうレイヤーを追加する
     *
     * @param GRN_Util_Api_Service $apiService
     *
     * @return LoginUserFindPolicyInterface
     */
    private function getUserFindPolicy(GRN_Util_Api_Service $apiService)
    {
        $corePolicy = new LoginUserFindPolicyUtilAPI($apiService);
        if ( ! defined('ON_FOREST')) {
            return $corePolicy;
        }
        $locale = $this->getLocale($apiService);
        $slashSessionManagementAPI
            = SlashSessionManagementAPI::getInstance($locale);

        return new SlashSessionManagementAPIRunner($corePolicy,
            $slashSessionManagementAPI);
    }

    /**
     * @param GRN_Util_Api_Service $apiService
     *
     * @return null|string
     */
    private function getLocale(GRN_Util_Api_Service $apiService)
    {
        $locale = $apiService->getLocale();
        if (in_array($locale, CB_LanguageManager::getAvailableLanguages())) {
            return $locale;
        }

        return \CB_LocaleManager::getDefaultLanguage();
    }

    /**
     * @return void
     */
    public function logout()
    {
        $this->executeLogoutAPI();
    }

    /**
     * Return whether the login driver can use multiple repository or not.
     *
     * @return bool
     */
    public function canUseMultipleRepository()
    {
        return true;
    }
}


