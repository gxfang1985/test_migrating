<?php

use grn\grn\authentication\SessionAuthenticationService;

/**
 * v1用の認証ドライバークラス. セッション認証は、デフォルトの認証ドライバー同じ
 *
 * @see code/doc_root/v1/auth/login
 * $G_authentication_force_driverをつかってインスタンス化するために使われる
 */
require_once('grn/authentication.csp');

class plugin_grn_common_authentication_authenticate_v1
    extends GRN_Authentication_Authenticate_DriverBase
{
    /** @var SessionAuthenticationService */
    private $sessionAuthenticationService;
    /** Configuration Parameters **/
    var $_driver_settings = null;

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
        ];
        $this->sessionAuthenticationService
            = new SessionAuthenticationService();
        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_AUTHENTICATE_DESKTOP_API_V1,
            'name'),
            GRN_AUTH_AUTHENTICATE_DESKTOP_API_V1,
            $driver_page
        );

    }

    /**
     * Set Driver Config
     *
     * @param array  $driver_settings Driver Settings
     * @param object $repository      User Repository Driver Object
     *
     * @return bool
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings        //Driver Settings
     */
    function &getConfig()
    {
        //Always NULL
        return $this->_driver_settings;
    }

    /**
     * Authenticate
     *
     * @return bool    $result
     */
    function authenticate()
    {
        $user
            = $this->sessionAuthenticationService->authenticateBySession($this->_user_repository);
        if ($user === false) {
            return false;
        }

        parent::setAccount($user->get('foreign_key'));

        //Authenticate Success
        return true;
    }

    /**
     * Set Credential
     *
     * @param  string $account  //Account
     * @param  string $password //Password
     *
     * @return bool    $result
     */
    function setCredential($account, $password)
    {
        return $this->sessionAuthenticationService->setCredentialToSession($account);
    }

    /**
     * Update Credential
     *
     * @param CB_User $login_user
     *
     * @return bool
     */
    function updateCredential($login_user)
    {
        //Get Login User Account
        $account = $login_user->get('foreign_key');

        return $this->setCredential($account, null);
    }

    /**
     * Get Credential
     *
     * @param  int $user_id
     *
     * @return bool|string $credential               //Credential
     */
    function getCredential($user_id = null)
    {
        return true;
    }

    /**
     * Reset Credential
     *
     * @return bool
     */
    function resetCredential()
    {
        return $this->sessionAuthenticationService->resetCredentialInSession();
    }
}
