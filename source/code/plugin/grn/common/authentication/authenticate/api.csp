<?php
declare(strict_types=1);

use grn\api\exception\authentication\InactiveUserException;
use grn\api\exception\authentication\NoRequestedWithHeaderException;
use grn\grn\authentication\SessionAuthenticationService;

require_once('grn/authentication.csp');

class plugin_grn_common_authentication_authenticate_api
    extends GRN_Authentication_Authenticate_DriverBase
{
    /** @var SessionAuthenticationService */
    private $sessionAuthenticationService;

    /** @var array */
    private $driverSettings = null;

    /** @var \GRN_Authentication_Repository_DriverBase */
    private $userRepository = null;

    /** @var bool */
    private $configured = false;

    function __construct()
    {
        $no_page = null;
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $no_page,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $no_page,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $no_page,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $no_page,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $no_page,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $no_page,
        ];

        $this->sessionAuthenticationService
            = new SessionAuthenticationService();
        parent::__construct(cb_msg(GRN_AUTH_AUTHENTICATE_REST_API_V1, 'name'),
            GRN_AUTH_AUTHENTICATE_REST_API_V1,
            $driver_page
        );

    }

    /**
     * @param array                                     $driver_settings
     * @param \GRN_Authentication_Repository_DriverBase $repository
     *
     * @return bool
     */
    public function setConfig(&$driver_settings, $repository): bool
    {
        if ( ! is_object($repository)) {
            return false;
        }

        $this->userRepository = $repository;
        $this->configured = true;

        return true;
    }

    /**
     * @return array
     */
    public function &getConfig(): array
    {
        return $this->driverSettings;
    }

    /**
     * @return bool
     */
    public function authenticate(): bool
    {
        return $this->sessionAuthenticate();
    }

    /**
     * @return bool
     */
    private function sessionAuthenticate(): bool
    {
        $login_user
            = $this->sessionAuthenticationService->authenticateBySession($this->userRepository);
        if ($login_user === false) {
            return false;
        }
        $this->checkUserStatus($login_user);
        $this->checkServerParameter();

        parent::setAccount($login_user->get('foreign_key'));

        return true;
    }

    /**
     * @throws NoRequestedWithHeaderException
     */
    private function checkServerParameter()
    {
        if ( ! array_key_exists('HTTP_X_REQUESTED_WITH', $_SERVER)
             || empty($_SERVER['HTTP_X_REQUESTED_WITH'])
        ) {
            throw new NoRequestedWithHeaderException();
        }

        if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'GET') !== 0) {
            $this->validateCsrfToken();
        }
    }

    /**
     * @param CB_User $login_user
     *
     * @throws InactiveUserException
     */
    private function checkUserStatus(CB_User $login_user)
    {
        if ( ! $login_user->isActive()) {
            throw new InactiveUserException();
        }
    }

    private function validateCsrfToken()
    {
        $json = json_decode(file_get_contents('php://input'), false);
        $csrf_token = $json->__REQUEST_TOKEN__ ?? "";
        require_once('fw/csrf.csp');
        cb_csrf_validate_token($csrf_token);
    }

    /**
     * @param  string $account
     * @param  string $password
     *
     * @return bool
     */
    public function setCredential($account, $password): bool
    {
        return $this->sessionAuthenticationService->setCredentialToSession($account);
    }

    /**
     * @param \CB_User $login_user
     *
     * @return bool
     */
    public function updateCredential($login_user): bool
    {
        $account = $login_user->get('foreign_key');

        return $this->setCredential($account, null);
    }

    /**
     * @param  int|NULL $user_id
     *
     * @return bool
     */
    public function getCredential($user_id = null): bool
    {
        return true;
    }

    /**
     * @return bool
     */
    public function resetCredential(): bool
    {
        return $this->sessionAuthenticationService->resetCredentialInSession();
    }
}
