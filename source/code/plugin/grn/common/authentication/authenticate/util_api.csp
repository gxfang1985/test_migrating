<?php

use grn\grn\authentication\SessionAuthenticationService;

/**
 * A common authenticate driver to be used by cbpapi and sysapi
 *
 * @author  Vu Minh 2010/01
 * @version 1.0
 */

//Include Files
require_once('grn/authentication.csp');
require_once('util_api/error_code.csp');

//String Resources
define('GRN_AUTH_AUTHENTICATE_UTIL_API_LOGIN_ACTION',
    'UtilLogin'); // Name of login action
define('GRN_AUTH_AUTHENTICATE_UTIL_API_LOGOUT_ACTION',
    'UtilLogout'); // Name of login action

class plugin_grn_common_authentication_authenticate_util_api
    extends GRN_Authentication_Authenticate_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings = null;

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;
    /** @var  SessionAuthenticationService */
    private $sessionAuthenticateService;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
        ];
        $this->sessionAuthenticateService = new SessionAuthenticationService();
        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_AUTHENTICATE_UTIL_API, 'name'),
            GRN_AUTH_AUTHENTICATE_UTIL_API,
            $driver_page
        );

    }

    /**
     * Set Driver Config
     *
     * @param array  $driver_settings Driver Settings
     * @param object $repository      User Repository Driver Object
     *
     * @return bool
     */
    function setConfig(&$driver_settings, $repository)
    {
        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings        //Driver Settings
     */
    function &getConfig()
    {
        //Always NULL
        return $this->_driver_settings;
    }

    /**
     * Authenticate
     *
     * @return bool    $result
     */
    function authenticate()
    {
        require_once('util_api/logic.csp');
        $util_api_service = GRN_Util_Api_Service::getInstance();


        //Read raw POST data
        $post_data = file_get_contents('php://input');
        if ( ! $post_data) {
            require_once('util_api/error_code.csp');
            cb_throw_error(E_GRN_UTIL_API_REQUEST_PARSE_FAILED);

            return false;
        }

        //Parse Request
        $util_api_service->import($post_data);

        // authentication fails when UtilLogin
        $action = $util_api_service->getAction();
        if ($action === GRN_Util_Api_Service::UTIL_LOGIN) {
            return false;
        }

        // Get locale setting in the packet and set Grn to that locale
        $locale = $util_api_service->getLocale();

        if ( ! is_null($locale)) {
            require_once('fw/i18n.csp');
            require_once('fw/i18n/locale.csp');
            $available_languages = CB_LanguageManager::getAvailableLanguages();
            if (in_array($locale, $available_languages)) {
                $i18n = CB_I18N::getInstance();
                $i18n->forceLocale($locale);
            }
        }

        // Check CSRF when using session authentication
        include('fw/csrf_list.csp');
        /**
         * @var $G_csrf_white_list_for_PAPI array
         * it is defined in fw/csrf_list.csp
         */
        if ( ! in_array($action, $G_csrf_white_list_for_PAPI)) {
            $parameters = $util_api_service->getRequestParameters();
            $values = $util_api_service->selectNodesValue($parameters,
                'request_token', false, false);
            if (count($values) === 0
                || ! cb_csrf_validate_token($values[0], false)
            ) {
                return false;
            }
        }

        $user
            = $this->sessionAuthenticateService->authenticateBySession($this->_user_repository);

        if ( ! $user) {
            return false;
        }

        $foreign_key = $user->get('foreign_key');

        //Authenticate Success
        parent::setAccount($foreign_key);

        //Authenticate success
        return true;
    }

    /**
     * Set Credential
     *
     * @param  string $account  //Account
     * @param  string $password //Password
     *
     * @return bool    $result
     */
    function setCredential($account, $password)
    {
        return $this->sessionAuthenticateService->setCredentialToSession($account,
            $password);
    }

    /**
     * Get Credential
     *
     * @param  int $user_id
     *
     * @return bool|string $credential               //Credential
     */
    function getCredential($user_id = null)
    {
        return true;
    }

    /**
     * Reset Credential
     *
     * @return bool    $result
     */
    function resetCredential()
    {
        return $this->sessionAuthenticateService->resetCredentialInSession();
    }


}

