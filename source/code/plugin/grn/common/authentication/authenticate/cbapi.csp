<?php
/**
 * Smart CBApi Authenticate Driver
 *
 * @author  Eiji TAEN   2006/08
 * @version 1.0
 */

//Include Files
require_once('grn/uum_spi.csp');
require_once('grn/authentication.csp');

class plugin_grn_common_authentication_authenticate_cbapi
    extends GRN_Authentication_Authenticate_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings = null;

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;

        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => $noPage,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_AUTHENTICATE_CBAPI, 'name'),
            GRN_AUTH_AUTHENTICATE_CBAPI,
            $driver_page
        );

    }

    /**
     * Set Driver Config
     *
     * @param  array  $driver_settings //Driver Settings
     * @param  object $repository      //User Repository Driver Object
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings        //Driver Settings
     */
    function &getConfig()
    {
        //Always NULL
        return $this->_driver_settings;
    }

    /**
     * Authenticate
     *
     * @return bool    $result
     */
    function authenticate()
    {
        require_once('cbapi/logic.csp');

        if (array_key_exists(GRN_CBAPI_AUTH_COOKIE, $_COOKIE) === false) {
            require_once('cbapi/error_code.csp');
            grn_cbapi_throw_error(E_GRN_CBAPI_FAILED_SESSION_AUTHENTICATION);
        }

        $cookie = grn_cbapi_decrypt(urldecode($_COOKIE[GRN_CBAPI_AUTH_COOKIE]));
        $cookie_elements = explode(':', $cookie);
        if (count($cookie_elements) != 2) {
            require_once('cbapi/error_code.csp');
            grn_cbapi_throw_error(E_GRN_CBAPI_FAILED_SESSION_AUTHENTICATION);
        }

        $expire = $cookie_elements[0];
        $server_sig = $cookie_elements[1];

        // get the product ID
        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();
        $product_id = $system->getProductId();

        // auth key
        $auth_key = '9Co4mb';

        // cookie authentication
        if (strcmp($server_sig,
                md5($expire . ':' . $product_id . ':' . $auth_key)) !== 0
        ) {
            require_once('cbapi/error_code.csp');
            grn_cbapi_throw_error(E_GRN_CBAPI_FAILED_SESSION_AUTHENTICATION);
        }

        $now = time();

        // validate time
        if (intval($expire) < $now) {
            require_once('cbapi/error_code.csp');
            grn_cbapi_throw_error(E_GRN_CBAPI_FAILED_SESSION_AUTHENTICATION);
        }

        if (intval($expire) < ($now + intval(GRN_CBAPI_COOKIE_LIFETIME) / 2)) {
            $expire = $now + intval(GRN_CBAPI_COOKIE_LIFETIME);
            $cookie = grn_cbapi_get_cookie($expire, $product_id, $auth_key);
            grn_cbapi_set_cookie($cookie);
        }

        // ユーザー認証が通っているわけではないのでFALSEを返す
        return false;
    }

    /**
     * Set Credential
     *
     * @param  string $account  //Account
     * @param  string $password //Password
     *
     * @return bool    $result
     */
    function setCredential($account, $password)
    {
        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Get User Object from Account        
        $user = $grn_uum->getUserByForeignKey($account);
        if ( ! $user) {
            //Set Credential Failed
            return false;
        }

        //Set Credential By Session Cookie
        $session = $grn_uum->_sp->getSession();
        $session->set(CB_UUMSPI_LOGIN_ID, $user->getOID());

        return true;
    }

    /**
     * Get Credential
     *
     * @param  int $user_id
     *
     * @return bool|string $credential               //Credential
     */
    function getCredential($user_id = null)
    {
        return true;
    }

    /**
     * Reset Credential
     *
     * @return bool    $result
     */
    function resetCredential()
    {
        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Reset Credential By Session Cookie
        $session = $grn_uum->_sp->getSession();
        $session->unset_by(CB_UUMSPI_LOGIN_ID);

        return true;
    }
}

