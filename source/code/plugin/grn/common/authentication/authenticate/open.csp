<?php
/**
 * Get Authenticate Driver
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */

//Include Files
require_once('grn/uum_spi.csp');
require_once('grn/authentication.csp');

//String Resources
define('GRN_AUTH_AUTHENTICATE_OPEN_VIEW_SYSTEM',
    'system/authentication/authenticate/view_open.csp');     //Driver System View Page
define('GRN_AUTH_AUTHENTICATE_OPEN_ADD_SYSTEM',
    'system/authentication/authenticate/add_open.csp');      //Driver System Add Page
define('GRN_AUTH_AUTHENTICATE_OPEN_MODIFY_SYSTEM',
    'system/authentication/authenticate/modify_open.csp');   //Driver System Modify Page

//Cookie Name
define('GRN_AUTH_AUTHENTICATE_OPEN_COOKIE', 'CB_PLOGIN');

//Magic Word
//define('GRN_AUTH_AUTHENTICATE_OPEN_MAGIC',           'RCOP4TNV98NYGVHC');

class plugin_grn_common_authentication_authenticate_open
    extends GRN_Authentication_Authenticate_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings
        = [
            'cookie_domain' => null,    //Cookie Domain
            'cookie_path'   => null,    //Cookie Path
            'password'      => null,    //Password
            'expire_time'   => null,    //Expire Time
        ];

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => GRN_AUTH_AUTHENTICATE_OPEN_VIEW_SYSTEM,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => GRN_AUTH_AUTHENTICATE_OPEN_ADD_SYSTEM,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => GRN_AUTH_AUTHENTICATE_OPEN_MODIFY_SYSTEM,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_AUTHENTICATE_OPEN, 'name'),
            GRN_AUTH_AUTHENTICATE_OPEN,
            $driver_page
        );

    }

    /**
     * Set Driver Config
     *
     * @param  array  $driver_settings //Driver Settings
     * @param  object $repository      //User Repository Driver Object
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check Arguments
        if ( ! is_array($driver_settings)) {
            //Driver Configuration Failed
            return false;
        }
        if (strlen($driver_settings['password']) === 0) {
            //Driver Configuration Failed
            return false;
        }

        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set Driver Configuration
        $this->_driver_settings['cookie_domain']
            = $driver_settings['cookie_domain'];
        $this->_driver_settings['cookie_path']
            = $driver_settings['cookie_path'];
        $this->_driver_settings['password'] = $driver_settings['password'];
        $this->_driver_settings['expire_time']
            = $driver_settings['expire_time'];

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings        //Driver Settings
     */
    function &getConfig()
    {
        //Always NULL
        return $this->_driver_settings;
    }

    /**
     * Authenticate
     *
     * @return bool    $result
     */
    function authenticate()
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            return false;
        }

        //Get Open Common Cookie
        if ( ! array_key_exists(GRN_AUTH_AUTHENTICATE_OPEN_COOKIE, $_COOKIE)) {
            return false;
        }
        $cookie = $_COOKIE[GRN_AUTH_AUTHENTICATE_OPEN_COOKIE];

        //URL Decode
        $url_cookie = urldecode($cookie);
        $cookie = $url_cookie;

        //Right Shift
        $shift_cookie = '';
        for ($i = 0; $i < strlen($cookie); $i++) {
            $shift_cookie = $shift_cookie . chr(ord($cookie{$i}) >> 1);
        }
        $cookie = $shift_cookie;

        //Base64 Decode
        $base64_cookie = base64_decode($cookie);
        $cookie = $base64_cookie;

        //Parse Cookie
        $decrypted_cookie_elements = explode(':', $cookie);
        $account = @$decrypted_cookie_elements[0];
        $password = @$decrypted_cookie_elements[1];
        $expire = @$decrypted_cookie_elements[2];
        $md5_string = @$decrypted_cookie_elements[3];

        //Security setting for cookie
        require_once('fw/miscFunctions.csp');
        $cookie_httponly = cb_is_cookie_httponly();
        $cookie_secure = cb_is_cookie_secure();

        //Validate MD5 String
        $test_string = md5($account . ':' . $password . ':' . $expire . ':'
                           . 'RCOP4TNV98NYGVHC');
        if ($test_string !== $md5_string) {
            //Reset Open Common Cookie
            setcookie(GRN_AUTH_AUTHENTICATE_OPEN_COOKIE, '', 0,
                $this->_driver_settings['cookie_path'],
                $this->_driver_settings['cookie_domain'], $cookie_secure,
                $cookie_httponly);

            return false;
        }

        //Check Open Common Cookie Password
        if ($this->_driver_settings['password'] !== $password) {
            //Reset Cybozu Common Cookie
            setcookie(GRN_AUTH_AUTHENTICATE_OPEN_COOKIE, '', 0,
                $this->_driver_settings['cookie_path'],
                $this->_driver_settings['cookie_domain'], $cookie_secure,
                $cookie_httponly);

            return false;
        }

        //Check Open Common Cookie Expire Time
        if ($expire < time()) {
            //Reset Open Common Cookie
            setcookie(GRN_AUTH_AUTHENTICATE_OPEN_COOKIE, '', 0,
                $this->_driver_settings['cookie_path'],
                $this->_driver_settings['cookie_domain'], $cookie_secure,
                $cookie_httponly);

            return false;
        }

        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');

        //Check Account
        $user = $grn_uum->getUserByForeignKey($account);
        if ( ! $user) {
            return false;
        }

        //Check Administrator
        $uid = $user->getOID();
        if ($uid == GRN_UUM_ADMINISTRATION_USER) {
            return false;
        }

        //Authenticate
        $password = null;
        $repository = $this->_user_repository;
        if ( ! $repository->authenticate($account, $password, false)) {
            //Authenticate Failed
            return false;
        }

        //Save Authenticated Account and Password
        parent::setAccount($account);
        parent::setPassword($password);

        //Authenticate Success
        return true;
    }

    /**
     * Set Credential
     *
     * @param  string $account  //Account
     * @param  string $password //Password
     *
     * @return bool    $result
     */
    function setCredential($account, $password)
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            return false;
        }

        //Create Open Common Cookie
        $cookie_password = $this->_driver_settings['password'];
        $expire_time = $this->_driver_settings['expire_time'];
        $limit_time = time() + intval($expire_time) * 60;
        $cookie_element_1 = $account . ':' . $cookie_password . ':'
                            . $limit_time;
        $cookie_element_2 = md5($account . ':' . $cookie_password . ':'
                                . $limit_time . ':' . 'RCOP4TNV98NYGVHC');
        $cookie = $cookie_element_1 . ':' . $cookie_element_2;

        //Base64 Encode
        $base64_cookie = base64_encode($cookie);
        $cookie = $base64_cookie;

        //Left Shift
        $shift_cookie = '';
        for ($i = 0; $i < strlen($cookie); $i++) {
            $shift_cookie = $shift_cookie . chr(ord($cookie{$i}) << 1);
        }
        $cookie = $shift_cookie;

        //URL Encode
        $url_cookie = urlencode($cookie);
        $cookie = $url_cookie;

        //Set Open Common Cookie
        $cookie_domain = $this->_driver_settings['cookie_domain'];
        $cookie_path = $this->_driver_settings['cookie_path'];

        //Security setting for cookie
        require_once('fw/miscFunctions.csp');
        $cookie_httponly = cb_is_cookie_httponly();
        $cookie_secure = cb_is_cookie_secure();

        setcookie(GRN_AUTH_AUTHENTICATE_OPEN_COOKIE, $cookie, null,
            $cookie_path, $cookie_domain, $cookie_secure, $cookie_httponly);

        return true;
    }

    /**
     * Update Credential
     *
     * @param CB_User $login_user
     *
     * @return bool    $result
     */
    function updateCredential($login_user)
    {
        //Get Login User Account
        $account =& $login_user->get('foreign_key');

        //Create Open Common Cookie
        $cookie_password = $this->_driver_settings['password'];
        $expire_time = $this->_driver_settings['expire_time'];
        $limit_time = time() + intval($expire_time) * 60;
        $cookie_element_1 = $account . ':' . $cookie_password . ':'
                            . $limit_time;
        $cookie_element_2 = md5($account . ':' . $cookie_password . ':'
                                . $limit_time . ':' . 'RCOP4TNV98NYGVHC');
        $cookie = $cookie_element_1 . ':' . $cookie_element_2;

        //Base64 Encode
        $base64_cookie = base64_encode($cookie);
        $cookie = $base64_cookie;

        //Left Shift
        $shift_cookie = '';
        for ($i = 0; $i < strlen($cookie); $i++) {
            $shift_cookie = $shift_cookie . chr(ord($cookie{$i}) << 1);
        }
        $cookie = $shift_cookie;

        //URL Encode
        $url_cookie = urlencode($cookie);
        $cookie = $url_cookie;

        //Set Open Common Cookie
        $cookie_domain = $this->_driver_settings['cookie_domain'];
        $cookie_path = $this->_driver_settings['cookie_path'];

        //Security setting for cookie
        require_once('fw/miscFunctions.csp');
        $cookie_httponly = cb_is_cookie_httponly();
        $cookie_secure = cb_is_cookie_secure();

        setcookie(GRN_AUTH_AUTHENTICATE_OPEN_COOKIE, $cookie, null,
            $cookie_path, $cookie_domain, $cookie_secure, $cookie_httponly);

        return true;
    }

    /**
     * Get Credential
     *
     * @param  int $user_id
     *
     * @return bool|string $credential               //Credential
     */
    function getCredential($user_id = null)
    {
        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        if ($user_id != null) {
            $login_user = $grn_uum->getUser($user_id);
        } else {
            $login_user = $grn_uum->getLoginUser();
        }
        if ( ! $login_user) {
            //Get Credential Failed
            return false;
        }
        $account =& $login_user->get('foreign_key');

        //Create Open Common Cookie
        $cookie_password = $this->_driver_settings['password'];
        $expire_time = $this->_driver_settings['expire_time'];
        $limit_time = time() + intval($expire_time) * 60;
        $cookie_element_1 = $account . ':' . $cookie_password . ':'
                            . $limit_time;
        $cookie_element_2 = md5($account . ':' . $cookie_password . ':'
                                . $limit_time . ':' . 'RCOP4TNV98NYGVHC');
        $cookie = $cookie_element_1 . ':' . $cookie_element_2;

        //Base64 Encode
        $base64_cookie = base64_encode($cookie);
        $cookie = $base64_cookie;

        //Left Shift
        $shift_cookie = '';
        for ($i = 0; $i < strlen($cookie); $i++) {
            $shift_cookie = $shift_cookie . chr(ord($cookie{$i}) << 1);
        }
        $cookie = $shift_cookie;

        //URL Encode
        $url_cookie = urlencode($cookie);
        $cookie = $url_cookie;

        //Return Cookie
        return $cookie;
    }

    /**
     * Reset Credential
     *
     * @return bool    $result
     */
    function resetCredential()
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            return false;
        }

        //Reset Open Common Cookie
        $cookie_domain = $this->_driver_settings['cookie_domain'];
        $cookie_path = $this->_driver_settings['cookie_path'];

        //Security setting for cookie
        require_once('fw/miscFunctions.csp');
        $cookie_httponly = cb_is_cookie_httponly();
        $cookie_secure = cb_is_cookie_secure();

        setcookie(GRN_AUTH_AUTHENTICATE_OPEN_COOKIE, '', 0, $cookie_path,
            $cookie_domain, $cookie_secure, $cookie_httponly);

        return true;
    }
}

