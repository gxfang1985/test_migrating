<?php
/**
 * Get Authenticate Driver
 *
 * @author  Yuichi, Nakamura 2005/02
 * @version 1.0
 */

//Include Files
require_once('grn/uum_spi.csp');
require_once('grn/authentication.csp');

//String Resources
define('GRN_AUTH_AUTHENTICATE_CYBOZU_VIEW_SYSTEM',
    'system/authentication/authenticate/view_cybozu.csp');     //Driver System View Page
define('GRN_AUTH_AUTHENTICATE_CYBOZU_ADD_SYSTEM',
    'system/authentication/authenticate/add_cybozu.csp');      //Driver System Add Page
define('GRN_AUTH_AUTHENTICATE_CYBOZU_MODIFY_SYSTEM',
    'system/authentication/authenticate/modify_cybozu.csp');   //Driver System Modify Page

//Cookie Name
define('GRN_AUTH_AUTHENTICATE_CYBOZU_COOKIE', 'CB_CLOGIN');

//Magic Word
//define('GRN_AUTH_AUTHENTICATE_CYBOZU_MAGIC',           'RCOP4TNV98NYGVHC');

// V2 Session
define('GRN_AUTH_AUTHENTICATE_CYBOZU_V2_LOGIN_USER', 'v2_logined_user');

class plugin_grn_common_authentication_authenticate_cybozu
    extends GRN_Authentication_Authenticate_DriverBase
{
    /** Configuration Parameters **/
    var $_driver_settings
        = [
            'cookie_name'   => null,    //Cookie Name
            'cookie_domain' => null,    //Cookie Domain
            'cookie_path'   => null,    //Cookie Path
            'cookie_mode'   => null,    //Cookie Mode: [1] open2, [2] cybozu
            'password'      => null,    //Password
            'raw_password'  => null,    //Is raw password
            'expire_time'   => null,    //Expire Time
        ];

    /** User Repository Driver **/
    var $_user_repository = null;

    /** Configuration Complete Flag **/
    var $_configured = false;

    /**
     * Constructor
     *
     */
    function __construct()
    {
        $noPage = null;
        //Create Driver Page Setting
        $driver_page = [
            GRN_AUTH_PAGE_TYPE_VIEW_SYSTEM     => GRN_AUTH_AUTHENTICATE_CYBOZU_VIEW_SYSTEM,
            GRN_AUTH_PAGE_TYPE_ADD_SYSTEM      => GRN_AUTH_AUTHENTICATE_CYBOZU_ADD_SYSTEM,
            GRN_AUTH_PAGE_TYPE_MODIFY_SYSTEM   => GRN_AUTH_AUTHENTICATE_CYBOZU_MODIFY_SYSTEM,
            GRN_AUTH_PAGE_TYPE_VIEW_PERSONAL   => $noPage,
            GRN_AUTH_PAGE_TYPE_ADD_PERSONAL    => $noPage,
            GRN_AUTH_PAGE_TYPE_MODIFY_PERSONAL => $noPage,
        ];

        //Initialize Parent Class
        parent::__construct(cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'name'),
            GRN_AUTH_AUTHENTICATE_CYBOZU,
            $driver_page
        );

    }

    /**
     * Set Driver Config
     *
     * @param  array  $driver_settings //Driver Settings
     * @param  object $repository      //User Repository Driver Object
     *
     * @return bool     $result
     */
    function setConfig(& $driver_settings, $repository)
    {
        //Check Arguments
        if ( ! is_array($driver_settings)) {
            //Driver Configuration Failed
            return false;
        }
        if (strlen($driver_settings['password']) === 0) {
            //Driver Configuration Failed
            return false;
        }
        if (strlen($driver_settings['expire_time']) === 0) {
            //Driver Configuration Failed
            return false;
        }

        //Check User Repository Driver
        if ( ! is_object($repository)) {
            return false;
        }

        //Set Driver Configuration
        $this->_driver_settings['cookie_domain']
            = $driver_settings['cookie_domain'];
        $this->_driver_settings['cookie_path']
            = $driver_settings['cookie_path'];
        $this->_driver_settings['password'] = $driver_settings['password'];
        $this->_driver_settings['expire_time']
            = $driver_settings['expire_time'];

        if (isset($driver_settings['cookie_name'])) {
            $this->_driver_settings['cookie_name']
                = $driver_settings['cookie_name'];
        } else {
            $this->_driver_settings['cookie_name'] = "";
        }

        if (isset($driver_settings['cookie_mode'])) {
            $this->_driver_settings['cookie_mode']
                = $driver_settings['cookie_mode'];
        } else {
            $this->_driver_settings['cookie_mode'] = "2";
        }

        if (isset($driver_settings['raw_password'])) {
            $this->_driver_settings['raw_password']
                = $driver_settings['raw_password'];
        } else {
            $this->_driver_settings['raw_password'] = false;
        }

        //Set User Repository Driver
        $this->_user_repository = $repository;

        //Set Configuration Complete Flag
        $this->_configured = true;

        return true;
    }

    /**
     * Get Driver Config
     *
     * @return array    $driver_settings        //Driver Settings
     */
    function &getConfig()
    {
        //Always NULL
        return $this->_driver_settings;
    }

    /**
     * Authenticate
     *
     * @return bool    $result
     */
    function authenticate()
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            return false;
        }

        //Check OPEN Ver.2 Cookie Value
        if ($this->_driver_settings['cookie_mode'] == "1") {
            global $G_container_base;
            /** @var GRN_Uum $grn_uum */
            $grn_uum = $G_container_base->getInstance('uum');
            $uum_spi = $grn_uum->_sp;

            //  extract open v2 cookie
            if (( ! $this->_extractFromOpen2Cookie($account, $action, $expire))
                || ((strcmp($action, 'login') !== 0)
                    && (strcmp($action, 'logout') !== 0))
            ) {
                return false;
            }
            $login_user = $grn_uum->getUserByForeignKey($account);

            //  When there is a logout cookie, logout immediately
            if (strcmp($action, 'logout') === 0) {
                //  make logout cookie
                $grn_uum->logout();

                return false;
            }

            //  When the user-id inside cookie is invalid, logout immediately.
            $password = null;
            $repository = $this->_user_repository;
            if (( ! $login_user)
                || ( ! $repository->authenticate($account, $password, false))
            ) {
                //  without making logout cookie
                $uum_spi->logout();
                cb_switch_page('login.csp');
            }

            // cookie expired
            if ($expire < time()) {
                //  without making logout cookie
                $uum_spi->logout();
                cb_switch_page('login.csp');
            }

            //Authenticate
            if ($login_user->getOID() == GRN_UUM_ADMINISTRATION_USER) {
                //  Administrator ignore open v2 authentication and do not logout.
                return false;
            }

            //  When the user-id was changed, logout old user.
            $old_user_id
                = plugin_grn_common_authentication_authenticate_cybozu::static_getLoginUser();
            if ($old_user_id) {
                $old_user = $grn_uum->getUser($old_user_id);
                if (($old_user)
                    && ($old_user->getOID() != $login_user->getOID())
                ) {
                    $uum_spi = $grn_uum->_sp;
                    $uum_spi->logoutAs($old_user);

                    // To resolve session file reusing problem.
                    // session_regenerate_id(true) is effective on Windows, but it is not effective on Linux.
                    // So I destory the session.
                    require_once('fw/session_manager.csp');
                    $session_manager = CB_SessionManager::getInstance();
                    $session_manager->destroy();
                }
            }

            //Save Authenticated Account and Password
            parent::setAccount($account);
            parent::setPassword($password);

            //Authenticate Success
            return true;
        } //Check Cybozu Common Cookie Value
        else {
            //Get Cybozu Common Cookie
            if ( ! array_key_exists(GRN_AUTH_AUTHENTICATE_CYBOZU_COOKIE,
                $_COOKIE)
            ) {
                return false;
            }
            $cookie = $_COOKIE[GRN_AUTH_AUTHENTICATE_CYBOZU_COOKIE];


            //Decrypt Cookie
            $utility = GRN_Authentication_Crypt_Utility::getInstance();
            $decrypted_cookie = $utility->decrypt2($cookie);

            //Parse Cookie
            $decrypted_cookie_elements = explode(':', $decrypted_cookie);
            $account = @$decrypted_cookie_elements[0];
            $password = @$decrypted_cookie_elements[1];
            $expire = @$decrypted_cookie_elements[2];
            $md5_string = @$decrypted_cookie_elements[3];

            //Validate MD5 String
            $test_string = md5($account . ':' . $password . ':' . $expire . ':'
                               . 'RCOP4TNV98NYGVHC');
            if ($test_string !== $md5_string) {
                //Reset Cybozu Common Cookie
                $this->resetCredential();

                return false;
            }

            //Check Cybozu Common Cookie Password
            $cookie_password = $this->_driver_settings['password'];
            if ($this->_driver_settings['raw_password']) {
                //MD5 Encode Password
                $cookie_password = md5($cookie_password);
            }
            if ($cookie_password !== $password) {
                //Reset Cybozu Common Cookie
                $this->resetCredential();

                return false;
            }

            //Check Cybozu Common Cookie Expire Time
            if ($expire < time()) {
                //Reset Cybozu Common Cookie
                $this->resetCredential();

                return false;
            }

            //Get GRN_UUM Instance
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');

            //Check Account
            $user = $grn_uum->getUserByForeignKey($account);
            if ( ! $user) {
                return false;
            }

            //Check Administrator
            $uid = $user->getOID();
            if ($uid == GRN_UUM_ADMINISTRATION_USER) {
                return false;
            }

            //Authenticate
            $password = null;
            $repository = $this->_user_repository;
            if ( ! $repository->authenticate($account, $password, false)) {
                //Authenticate Failed
                return false;
            }

            //Save Authenticated Account and Password
            parent::setAccount($account);
            parent::setPassword($password);

            //Authenticate Success
            return true;
        }

        return false;
    }

    /**
     * Set Credential
     *
     * @param  string $account  //Account
     * @param  string $password //Password
     *
     * @return bool    $result
     */
    function setCredential($account, $password)
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            return false;
        }

        //Get Cookie Path and Domain
        $cookie_path = $this->_driver_settings['cookie_path'];
        $cookie_domain = $this->_driver_settings['cookie_domain'];
        if (strlen($cookie_path) === 0) {
            $cookie_path = "/";
        }
        if (strlen($cookie_domain) > 0 && $cookie_domain[0] != '.') {
            $cookie_domain = '.' . $cookie_domain;
        }

        //Security setting for cookie
        require_once('fw/miscFunctions.csp');
        $cookie_httponly = cb_is_cookie_httponly();
        $cookie_secure = cb_is_cookie_secure();

        //Set OPEN ver.2 Cookie
        if ($this->_driver_settings['cookie_mode'] == "1") {
            if ( ! cb_at($_SERVER, CB_SESSION_NO_PROLONGING_HEADER)) {
                //Get Parameters
                $cookie_name = $this->_driver_settings['cookie_name'];
                $cookie_value = $this->_createOpen2CookieValue('login',
                    $account);

                if (strlen($cookie_name) === 0) {
                    $cookie_name = GRN_AUTH_OPEN2_COOKIE;
                }

                //GRN2-6355
                setcookie($cookie_name, $cookie_value, null, $cookie_path,
                    $cookie_domain, $cookie_secure,
                    $cookie_httponly);
            }
        } //Set Cybozu Common Cookie
        else {
            $cookie_password = $this->_driver_settings['password'];
            if ($this->_driver_settings['raw_password']) {
                //MD5 Encode Password
                $cookie_password = md5($cookie_password);
            }
            $expire_time = $this->_driver_settings['expire_time'];
            $limit_time = time() + intval($expire_time) * 60;
            $cookie_element_1 = $account . ':' . $cookie_password . ':'
                                . $limit_time;
            $cookie_element_2 = md5($account . ':' . $cookie_password . ':'
                                    . $limit_time . ':' . 'RCOP4TNV98NYGVHC');
            $cookie = $cookie_element_1 . ':' . $cookie_element_2;

            //Encrypt Cookie
            $utility = GRN_Authentication_Crypt_Utility::getInstance();
            $encrypted_cookie = $utility->encrypt2($cookie);

            //Set Cybozu Common Cookie
            setcookie(GRN_AUTH_AUTHENTICATE_CYBOZU_COOKIE, $encrypted_cookie,
                null, $cookie_path, $cookie_domain, $cookie_secure,
                $cookie_httponly);
        }

        return true;
    }

    /**
     * Update Credential
     *
     * @param CB_User $login_user
     *
     * @return bool    $result
     */
    function updateCredential($login_user)
    {
        //Get Login User Account
        $account = $login_user->get('foreign_key');

        return $this->setCredential($account, null);
    }

    /**
     * Get Credential
     *
     * @param  int $user_id
     *
     * @return bool|string $credential               //Credential
     */
    function getCredential($user_id = null)
    {
        //Get GRN_UUM Instance
        global $G_container_base;
        $grn_uum = $G_container_base->getInstance('uum');
        if ($user_id != null) {
            $login_user = $grn_uum->getUser($user_id);
        } else {
            $login_user = $grn_uum->getLoginUser();
        }
        if ( ! $login_user) {
            //Get Credential Failed
            return false;
        }
        $account =& $login_user->get('foreign_key');

        //Get OPEN ver.2 Cookie Value
        if ($this->_driver_settings['cookie_mode'] == "1") {
            $cookie_value = $this->_createOpen2CookieValue('login', $account);
            if (strlen($cookie_value) === 0) {
                return false;
            }

            return $cookie_value;
        } //Get Cybozu Common Cookie Value
        else {
            $cookie_password = $this->_driver_settings['password'];
            if ($this->_driver_settings['raw_password']) {
                //MD5 Encode Password
                $cookie_password = md5($cookie_password);
            }
            $expire_time = $this->_driver_settings['expire_time'];
            $limit_time = time() + intval($expire_time) * 60;
            $cookie_element_1 = $account . ':' . $cookie_password . ':'
                                . $limit_time;
            $cookie_element_2 = md5($account . ':' . $cookie_password . ':'
                                    . $limit_time . ':' . 'RCOP4TNV98NYGVHC');
            $cookie = $cookie_element_1 . ':' . $cookie_element_2;

            //Encrypt Cookie
            $utility = GRN_Authentication_Crypt_Utility::getInstance();
            $encrypted_cookie = $utility->encrypt2($cookie);

            //Return Cookie
            return $encrypted_cookie;
        }

        return false;
    }

    /**
     * Reset Credential
     *
     * @return bool    $result
     */
    function resetCredential()
    {
        //Check Configuration Complete Flag
        if ( ! $this->_configured) {
            return false;
        }

        //Get Cookie Path and Domain
        $cookie_path = $this->_driver_settings['cookie_path'];
        $cookie_domain = $this->_driver_settings['cookie_domain'];
        if (strlen($cookie_path) === 0) {
            $cookie_path = "/";
        }
        if (strlen($cookie_domain) > 0 && $cookie_domain[0] != '.') {
            $cookie_domain = '.' . $cookie_domain;
        }

        //Security setting for cookie
        require_once('fw/miscFunctions.csp');
        $cookie_httponly = cb_is_cookie_httponly();
        $cookie_secure = cb_is_cookie_secure();

        //Reset OPEN ver.2 Cookie
        if ($this->_driver_settings['cookie_mode'] == "1") {
            //Get Parameters
            $cookie_name = $this->_driver_settings['cookie_name'];
            $cookie_value = $this->_createOpen2CookieValue('logout');

            if (strlen($cookie_name) === 0) {
                $cookie_name = GRN_AUTH_OPEN2_COOKIE;
            }

            setcookie($cookie_name, $cookie_value, null, $cookie_path,
                $cookie_domain, $cookie_secure, $cookie_httponly);
        } //Reset Cybozu Common Cookie
        else {
            setcookie(GRN_AUTH_AUTHENTICATE_CYBOZU_COOKIE, '', 0, $cookie_path,
                $cookie_domain, $cookie_secure, $cookie_httponly);
        }

        return true;
    }

    /**
     * Get OPEN ver.2 Cookie Value
     *
     * @return string $cookie_value
     */
    function _getOpen2CookieValue()
    {
        //Get OPEN ver.2 Cookie Name
        $cookie_name = $this->_driver_settings['cookie_name'];
        if (strlen($cookie_name) === 0) {
            $cookie_name = GRN_AUTH_OPEN2_COOKIE;
        }

        //Get OPEN ver.2 Cookie Value
        if (array_key_exists($cookie_name, $_COOKIE)) {
            return $_COOKIE[$cookie_name];
        }

        return null;
    }

    /**
     * Create OPEN ver.2 Cookie Value
     *
     * @param  string $action ('login' or 'logout')
     * @param  string $account
     *
     * @return string $cookie_value
     */
    function _createOpen2CookieValue($action = 'login', $account = null)
    {
        if (is_null($account)) {
            //Get GRN_UUM Instance
            global $G_container_base;
            $grn_uum = $G_container_base->getInstance('uum');

            //Get Login User Account
            $login_user = $grn_uum->getLoginUser();
            if ($login_user) {
                $account =& $login_user->get('foreign_key');
            } else {
                //Get User Account From Open ver.2 Cookie
                if ( ! $this->_extractFromOpen2Cookie($account, $_action,
                    $_expire)
                ) {
                    return "";
                }
            }

            if (is_null($account)) {
                return "";
            }
        }

        //Get Parameter
        $password = $this->_driver_settings['password'];
        $domain = $this->_driver_settings['cookie_domain'];
        $expire_time = $this->_driver_settings['expire_time'];
        $limit_time = time() + intval($expire_time) * 60;

        if (strlen($domain) > 0 && $domain[0] != '.') {
            $domain = '.' . $domain;
        }

        //Create OPEN ver.2 Cookie
        $text = base64_encode($account) . ":" . $domain . ":" . $action
                . ":" . $limit_time;
        $hmac = hash_hmac("sha256", $text, $password);
        $cookie_value = base64_encode($text) . ":" . $hmac;

        return $cookie_value;
    }

    /**
     * Extract From OPEN ver.2 Cookie
     *
     * @param  string $account
     * @param  string $action
     * @param  string $expire_time
     *
     * @return bool
     */
    function _extractFromOpen2Cookie(&$account, &$action, &$expire_time)
    {
        $cookie_value = $this->_getOpen2CookieValue();
        if (is_null($cookie_value)) {
            return false;
        }

        //Parse Cookie
        $cookie_elements = explode(':', $cookie_value);
        if (count($cookie_elements) != 2) {
            return false;
        }
        $text = base64_decode($cookie_elements[0]);
        $hmac = $cookie_elements[1];

        //Check HMAC
        $cookie_password = $this->_driver_settings['password'];
        if ($hmac != hash_hmac("sha256", $text, $cookie_password)) {
            return false;
        }

        //Parse text
        $text_elements = explode(':', $text);
        if (count($text_elements) != 4) {
            return false;
        }
        $account = base64_decode($text_elements[0]);
        $domain = $text_elements[1];
        $action = $text_elements[2];
        $expire_time = $text_elements[3];

        //Check Domain
        $cookie_domain = $this->_driver_settings['cookie_domain'];
        if (strlen($cookie_domain) > 0 && $cookie_domain[0] != '.') {
            $cookie_domain = '.' . $cookie_domain;
        }
        if ($domain != $cookie_domain) {
            return false;
        }

        return true;
    }

    /**
     *  オープン統合認証v2モードかを返す
     */
    function isOpen2Mode()
    {
        return ($this->_driver_settings['cookie_mode']
                == GRN_AUTH_OPEN2_COOKIE_MODE);
    }

    /**
     *  V2CookieのActionを返す
     */
    function getAction()
    {
        if ( ! $this->_extractFromOpen2Cookie($account, $_action, $_expire)) {
            return null;
        }

        return $_action;
    }

    /**
     *  オープン統合認証v2が登録されていればそれを、なければnullを返す。
     *  認証は GRN_Authentication_Login_Authenticate インスタンスで返す。
     */
    public static function static_getV2AuthMethod($isActiveOnly = false)
    {
        require_once('grn/authentication.csp');
        $authentication_service = GRN_Authentication_Service::getInstance();
        $_authenticate_method_list
            = $authentication_service->getAuthenticateMethodList();
        if ( ! $_authenticate_method_list) {
            $_authenticate_method_list = [];
        }

        foreach ($_authenticate_method_list as $authenticate_method) {
            if ($isActiveOnly) {
                //  使用中の認証のみを取り出す
                if (strcmp($authenticate_method->get('is_active'), '1') !== 0) {
                    continue;
                }
            }

            //  オープン統合認証のv2のみ取り出す
            if (strcmp($authenticate_method->get('driver_type'),
                    'grn.common.authentication.authenticate.cybozu') !== 0
            ) {
                continue;
            }

            //  オープン統合認証のv2モードのみとりだす
            $config
                = cb_unserialize($authenticate_method->get('driver_settings'),
                ["allowed_classes" => false]);
            if (isset($config['cookie_mode'])
                && strcmp($config['cookie_mode'], GRN_AUTH_OPEN2_COOKIE_MODE)
                   === 0
            ) {
                return $authenticate_method;
            }
        }

        $authenticate_method = null;

        return $authenticate_method;
    }

    /**
     *  オープン統合認証v2が登録されていればそれを、なければnullを返す。
     *  認証は plugin_grn_common_authentication_authenticate_cybozu インスタンスで返す。
     */
    public static function static_getV2AuthDriver($isActiveOnly = false)
    {
        $authenticate_driver = null;
        require_once('grn/authentication.csp');
        $v2_auth_method
            = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthMethod($isActiveOnly);
        if (is_null($v2_auth_method)) {
            return $authenticate_driver;
        }

        //Get Authenticate Driver Settings
        $driver_type = $v2_auth_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
        $driver_settings
            = cb_unserialize($v2_auth_method->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
            ["allowed_classes" => false]);
        $repository = $v2_auth_method->get(GRN_AUTH_PROPERTY_REPOSITORY);

        //Get Repository Driver Settings
        $repository_driver_type
            = $repository->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
        $repository_driver_settings
            = cb_unserialize($repository->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
            ["allowed_classes" => false]);

        //Load Repository Driver
        $repository_loader = new GRN_Authentication_Repository_Loader();
        $repository_driver
            = $repository_loader->loadDriver($repository_driver_type,
            $repository_driver_settings);

        //Create Authenticate Loader
        $current_authenticate_loader
            = new GRN_Authentication_Authenticate_Loader();
        $current_authenticate_loader->loadDriver($driver_type, $driver_settings,
            $repository_driver);

        //Add Authenticate Loader List
        $authenticate_driver
            = $current_authenticate_loader->_getCurrentDriver();

        return $authenticate_driver;
    }

    /**
     *  認証を通過し、ログインしたユーザーをV2用のセッションに載せる
     *  実際に配置されるのは、$_SESSION[ '__cybozu' ][ 'grn.common.authentication' ][ 'v2_logined_user' ]
     */
    public static function static_storeLoginUser($user)
    {
        $session
            = plugin_grn_common_authentication_authenticate_cybozu::static_getSession();
        $session->set(GRN_AUTH_AUTHENTICATE_CYBOZU_V2_LOGIN_USER,
            $user->getOID());
    }

    /**
     *  v2用のセッションからログイン済みしたユーザーをかえす
     */
    public static function static_getLoginUser()
    {
        $session
            = plugin_grn_common_authentication_authenticate_cybozu::static_getSession();

        return $session->get(GRN_AUTH_AUTHENTICATE_CYBOZU_V2_LOGIN_USER);
    }

    public static function static_getSession()

    {
        require_once('fw/session_manager.csp');
        $sessionManager = CB_SessionManager::getInstance();

        return $sessionManager->getSession(GRN_AUTH);
    }

}

