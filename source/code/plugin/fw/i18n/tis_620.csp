<?php

/**
 * Windows-874 <-> UTF-8 converter
 * see http://msdn.microsoft.com/en-us/goglobal/cc305142.aspx (Windows-874)
 * see http://en.wikipedia.org/wiki/Thai_Industrial_Standard_620-2533
 *
 * @auther Eiji TAEN
 */

require_once('fw/i18n.csp');

define('PLUGIN_FW_I18N_WINDOWS874_INTERNAL_ENCODING', 'UTF-8');

class plugin_fw_i18n_tis_620 extends CB_I18N_EncoderBase
{

    var $_windows874_table
        = [
            //  0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 0
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 1
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 2
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 3
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 4
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 5
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 6
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1, // 7
            3,
            0,
            0,
            0,
            0,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0, // 8
            0,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0, // 9
            1,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2, // A
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2, // B
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2, // C
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            2, // D
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2, // E
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            0,
            0,
            0,
            0, // F
        ];

    function __construct()
    {
        parent::__construct(PLUGIN_FW_I18N_WINDOWS874_INTERNAL_ENCODING);
    }

    /**
     * return internal used charset name
     */
    function getCharset()
    {
        return $this->_charset;
    }

    /**
     * UTF-8 -> UTF-16 -> Windows-874
     */
    function convFromUTF8($utf8)
    {
        // UTF-8 -> UTF-16
        $utf16 = mb_convert_encoding($utf8, "UTF-16", "UTF-8");
        $utf16_len = mb_strlen($utf16, "UTF-16");
        $windows874 = '';
        for ($i = 0; $i < $utf16_len; $i++) {
            $sub_utf16 = mb_substr($utf16, $i, 1, "UTF-16");
            // UTF-16 binary -> decimal
            $sub_utf16_dec = hexdec(bin2hex($sub_utf16));

            // UTF-16 -> Windows-874
            $windows874_dec = 0; // Windows-874 decimal
            $sub_utf16_lb = ($sub_utf16_dec >> 8) & 0xff; // leader byte
            switch ($sub_utf16_lb) {
                case 0x0:
                    $windows874_dec = $sub_utf16_dec
                                      & 0xff;  // mask leader byte
                    break;
                case 0x20:
                    switch ($sub_utf16_dec) {
                        case 0x20ac:
                            $windows874_dec = 0x80;
                            break;
                        case 0x2026:
                            $windows874_dec = 0x85;
                            break;
                        case 0x2018:
                            $windows874_dec = 0x91;
                            break;
                        case 0x2019:
                            $windows874_dec = 0x92;
                            break;
                        case 0x201c:
                            $windows874_dec = 0x93;
                            break;
                        case 0x201d:
                            $windows874_dec = 0x94;
                            break;
                        case 0x2022:
                            $windows874_dec = 0x95;
                            break;
                        case 0x2013:
                            $windows874_dec = 0x96;
                            break;
                        case 0x2014:
                            $windows874_dec = 0x97;
                            break;
                        default:
                            $windows874_dec = mb_substitute_character();
                    }
                    break;
                case 0xe:
                    $windows874_dec = ($sub_utf16_dec & 0xff) + 0xa0;
                    break;
                default: // out of Windows-874 character encoding range. use '?' instead.
                    $windows874_dec = mb_substitute_character();
            }

            // Windows-874 character encoding range validation
            if ($this->_getCharType($windows874_dec) === 0) {
                // out of Windows-874 character encoding range. use '?' instead.
                $windows874_dec = mb_substitute_character();
            }
            $windows874 .= pack("C", $windows874_dec);
        }

        return $windows874;
    }

    /**
     * Windows-874 -> UTF-16 -> UTF-8
     */
    function convToUTF8($windows874)
    {
        $windows874_hex = bin2hex($windows874);
        $windows874_hex_len = strlen($windows874_hex);

        $utf16 = '';
        for ($i = 0; $i < $windows874_hex_len; $i += 2) {
            $sub_windows874_hex = substr($windows874_hex, $i, 2);
            $sub_windows874_dec = hexdec($sub_windows874_hex);

            // Windows-874 -> UTF-16
            switch ($this->_getCharType($sub_windows874_dec)) {
                case 0: // out of Windows-874 character encoding range. use '?' instead.
                    $sub_utf16_dec = mb_substitute_character();
                    break;
                case 1: // ASCII
                    $sub_utf16_dec = $sub_windows874_dec;
                    break;
                case 2: // Thai
                    $sub_utf16_dec = (0x0e00 | $sub_windows874_dec) - 0xa0;
                    break;
                case 3: // Windows-874 extend range.
                    switch ($sub_windows874_dec) {
                        case 0x80:
                            $sub_utf16_dec = 0x20ac;
                            break;
                        case 0x85:
                            $sub_utf16_dec = 0x2026;
                            break;
                        case 0x91:
                            $sub_utf16_dec = 0x2018;
                            break;
                        case 0x92:
                            $sub_utf16_dec = 0x2019;
                            break;
                        case 0x93:
                            $sub_utf16_dec = 0x201c;
                            break;
                        case 0x94:
                            $sub_utf16_dec = 0x201d;
                            break;
                        case 0x95:
                            $sub_utf16_dec = 0x2022;
                            break;
                        case 0x96:
                            $sub_utf16_dec = 0x2013;
                            break;
                        case 0x97:
                            $sub_utf16_dec = 0x2014;
                    }
            }
            $utf16 .= pack("n", $sub_utf16_dec);
        }

        // UTF-16 -> UTF-8
        $utf8 = mb_convert_encoding($utf16, "UTF-8", "UTF-16");

        return $utf8;
    }

    /**
     * @access private
     */
    function _getCharType($char)
    {
        $ret = 0;

        $index = (($char >> 4) & 0xf) * 0x10 + ($char & 0xf);
        if ($index >= 0 && $index <= 0xff) {
            $ret = $this->_windows874_table[$index];
        }

        return $ret;
    }

}


