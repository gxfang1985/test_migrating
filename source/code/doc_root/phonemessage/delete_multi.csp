<?php

require_once('grn/application.csp');

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

//for escape
$app_locator = GRN_ApplicationLocator::instance();
$dbconn =& $app_locator->getConnection('phonemessage');

////////////////////////////////////////////////////////////////

// GET/POSTされたパラメータを取得する
$cid = null;
if (array_key_exists('cid', $G_INPUT)) {
    $cid = $G_INPUT['cid'];
}
$gid = null;
if (array_key_exists('gid', $G_INPUT)) {
    $gid = $G_INPUT['gid'];
}
$uid = null;
if (array_key_exists('uid', $G_INPUT)) {
    $uid = $G_INPUT['uid'];
}
if (0 == strlen($uid)) {
    cb_throw_error(E_GRN_PHONEMESSAGE_INVALID_USER_ID);
}
$mids = null;
if (array_key_exists('mids', $G_INPUT)) {
    $mids = $G_INPUT['mids'];
}
if ( ! is_array($mids) || 0 == count($mids)) {
    cb_throw_error(E_GRN_PHONEMESSAGE_INVALID_MESSAGE_ID);
}
// 電話メモを取得する
require_once('phonemessage/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
/** @var GRN_PhoneMessage_Application $app */
$app =& $app_locator->getInstance(GRN_PHONEMESSAGE_APPLICATION_ID);
if ( ! is_object($app) || ! is_a($app, 'GRN_PhoneMessage_Application')) {
    cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
}
$message_manager =& $app->getMessageManager();

// ログインユーザーを取得する
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}
$login_id = $login->getOID();

// ユーザーを取得する
$user =& $uum->getUser($uid);
if ( ! is_object($user) || ! is_a($user, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

// ユーザー情報を取得する
require_once('phonemessage/controller.csp');
$controller_util = new GRN_PhoneMessage_ControllerUtil();
$user_for_view = $controller_util->getUser($user);

// ダイナミックロール一覧を取得する
$dynamic_roles = $uum->listGrantedRoles();

// ユーザーのアクセス権を評価する
require_once('phonemessage/access.csp');
$access_manager = GRN_PhoneMessage_AccessManager::getInstance();
$users = [$uid => & $user];
$user_info = $access_manager->getObjectInfo($users);
$authorities = ['browse', 'add'];
if (0 < count($user_info['objects'])) {
    $user_info['accesses']
        = $access_manager->evaluateAccesses($user_info['objects'], $login,
        $dynamic_roles, $authorities);
} else {
    $user_info['accesses'] = [];
}

// 組織一覧を取得する
$groups = $uum->getGroupList();

// 組織一覧のアクセス権を評価する
$group_info = $access_manager->getObjectInfo($groups);
if (0 < count($group_info['objects'])) {
    $group_info['accesses']
        = $access_manager->evaluateAccesses($group_info['objects'], $login,
        $dynamic_roles, $authorities);
} else {
    $group_info['accesses'] = [];
}

// スタティックロール一覧を取得する
$roles = $uum->listStaticRoles();

// スタティックロール一覧のアクセス権を評価する
$role_info = $access_manager->getObjectInfo($roles);
if (0 < count($role_info['objects'])) {
    $role_info['accesses']
        = $access_manager->evaluateAccesses($role_info['objects'], $login,
        $dynamic_roles, $authorities);
} else {
    $role_info['accesses'] = [];
}

// 組織、スタティックロールを考慮し、ユーザーのアクセス権を再評価する
$accesses_for_view = $controller_util->evaluateAccesses($users, $user_info,
    $group_info, $role_info);
// 自分自身のアクセス権は無視する
if (array_key_exists($login_id, $accesses_for_view)) {
    $accesses_for_view[$login_id] = [];
}
if (array_key_exists($uid, $accesses_for_view)) {
    if (array_key_exists('browse', $accesses_for_view[$uid])) {
        cb_throw_error(E_GRN_PHONEMESSAGE_ACCESS_DENY_BROWSE);
    }
} else {
    assert('FALSE');
}

// _idが削除フラグ対応で重複してしまうのでテーブル名を取得
$real_table_name = $message_manager->getRealTableName();

// メッセージの送信者、受信者がログインユーザーか判定する
$offset = 0;
$limit = -1;
$order_by = $real_table_name . '._id';
$conditions = [];
foreach ($mids as $message_id) {
    $conditions[] = cb_queryf($dbconn, $real_table_name . "._id = '@S'",
        $message_id);
}
$condition = implode(' OR ', $conditions);

$messages = $message_manager->getList($offset, $limit, $order_by, $condition);

foreach (array_keys($messages) as $message_id) {
    $message =& $messages[$message_id];

    $receiver =& $message->get('receiver');
    $sender =& $message->get('sender');
    $confirm_time =& $message->get('confirm_time');
    if ($login_id != $receiver->getOID()) {
        if ($login_id != $sender->getOID()) {
            cb_throw_error(E_GRN_PHONEMESSAGE_INVALID_DELETE);
        }
        if ($login_id == $sender->getOID() && is_object($confirm_time)
            && is_a($confirm_time, 'CB_TimeStamp')
        ) {
            cb_throw_error(E_GRN_PHONEMESSAGE_INVALID_DELETE);
        }
    }
}

$t->assign('category_id', $cid);
$t->assign('group_id', $gid);
$t->assign('user_id', $uid);
$t->assign('message_ids', $mids);
$t->assign('message_count', count($mids));

////////////////////////////////////////////////////////////////

// Smartyにページタイトルを割り当てる
$page_title = grn_get_page_display_name('phonemessage/delete_multi');
$t->assign('page_title', $page_title);

// Smartyにサイトポジションを割り当てる
$page_info = [
    'index'        => ['sf' => 1, 'gid' => $gid],
    'history'      => ['sf' => 1, 'cid' => $cid, 'gid' => $gid, 'uid' => $uid],
    'delete_multi' => null
];
$site_position = $controller_util->makeSitePosition('phonemessage/',
    $page_info);
$t->assign('site_position', $site_position);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');


