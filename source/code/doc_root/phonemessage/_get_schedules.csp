<?php

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\bean\AttendanceStatus;
use grn\grn\access\service\AppAccess;

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

// 日付の準備
$tsex = new CB_TimeStampEx();
$timestamp = $in_time = $tsex->unix_ts;
$dateex = $tsex->getDate();
$date_info = [
    'format'    => $dateex->format(),
    'timestamp' => $timestamp,
    'type'      => $util->getDayType($dateex),
    'date'      => $dateex
];
$date_info_e = [
    'format'    => $date_info['format'],
    'timestamp' => $timestamp + 10
];

require_once('schedule/system_logic.csp');
$logic = GRN_Schedule_SystemLogic::getInstance();
$allowfacilitiesname = $logic->getAllowFacilitiesName() == '1';
$nameonright = $logic->getAllowFacilitiesNameOnRight() == '1';

$hiddenprivate = $logic->getHiddenPrivate();

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
$showendtime = $personallogic->getShowEndTime($login);

require_once('schedule/eventfactory.csp');
$factory = GRN_Schedule_EventFactory::getInstance();

$dynamic_roles = $uum->listGrantedRoles();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_logic::getInstance();

require_once('schedule/application.csp');
$app_schedule = GRN_Schedule_Application::getInstance();

$users_event = [];
if (is_array($users_for_view) && count($users_for_view) > 0) {
    $user_ids_allow
        = AppAccess::filterUserIdsInternalAccessByAppId(array_keys($users_for_view),
        'schedule');
    foreach ($users_for_view as $key => $value) {
        if ( ! in_array($key, $user_ids_allow)) {
            unset($users_for_view[$key]);
        }
    }

    $attendanceStatusLogic = new AttendanceStatusLogic();
    $isEnableAttendanceStatus
        = $attendanceStatusLogic->isEnableAttendanceCheck();

    // メンバーのアクセス権の取得
    $acc_lists = $acc_logic->getEvaluateAccessesListById($login,
        $users_for_view, 'user', ['read', 'add'], $dynamic_roles);
    $factory->loadAndCacheUserEventRelation(array_keys($users_for_view), 'user',
        $date_info, $date_info_e, false, false, $isEnableAttendanceStatus,
        "phone_message");
    foreach (array_keys($users_for_view) as $uid) {
        if ($acc_lists[$uid]['read'] == GRN_SCHD_ACCESS_DENY) {
            $users_event[] = [];
            continue;
        }
        $day_event = [];
        $events = $factory->getNormalEventsAndConvertToDisplay(
            $uid, 'user', $date_info['timestamp'], $date_info_e['timestamp'],
            $login_id, $hiddenprivate, false, $isEnableAttendanceStatus, true,
            "phone_message"
        );
        foreach ($events as $event) {
            //GTM-1645
            if ($event[AttendanceStatus::ATTENDANCE_CHECK_USING]
                && $event[AttendanceStatus::ATTENDANCE_CHECK_STATUS]
                   == AttendanceStatus::STATUS_ABSENT
            ) {
                continue;
            }

            if ($event['setdatetime_timestamp'] > $in_time
                || $event['enddatetime_timestamp'] < $in_time
            ) {
                continue;
            }

            $temp = [];
            $temp['id'] = $event['id'];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            if ($allowfacilitiesname) {
                $app_schedule->addFacilityNameToEventTitle($event, $factory,
                    $event['id'], $nameonright);
            }

            $temp['data'] = '';
            if (isset($porlet) && $porlet) {
                $temp['time_schedule'] = $util->getViewHour($date_info['date'],
                    $event['setdatetime'],
                    $event['enddatetime'],
                    $event['event_type'], $showendtime);
            } else {
                $temp['data'] = $util->getViewHour($date_info['date'],
                    $event['setdatetime'],
                    $event['enddatetime'],
                    $event['event_type'], $showendtime);
            }

            $sh_title = '';
            if (strlen($temp['data']) > 0) {
                $temp['data'] .= ' ';
                $sh_title .= ' ';
            }

            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['data'] .= cb_msg('grn.schedule', 'event_hidden');
                $sh_title .= cb_msg('grn.schedule', 'event_hidden');
                $temp['type'] = 'normal';
                $temp['private'] = true;
            } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['data'] .= $event['title'];
                $sh_title .= $event['title'] . cb_msg('grn.schedule',
                        'event_private');
                $temp['is_private'] = true;
            } else {
                $temp['data'] .= $event['title'];
                $sh_title .= $event['title'];
            }
            $day_event[] = $temp;
        }
        // スケジュールの入れ込み
        $schedule_event = ['event' => $day_event];
        $users_event[$uid] = [
            'user_id'        => $uid,
            'schedule_event' => $schedule_event
        ];
    }
}
