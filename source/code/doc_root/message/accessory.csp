<?php

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------

$category_id = @ $G_INPUT['cid'];
$relation_id = @ $G_INPUT['rid'];
$message_id = @ $G_INPUT['mid'];

if ($category_id == '' || $relation_id == '' || $message_id == '') {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

$t->assign('cid', $category_id);
$t->assign('rid', $relation_id);
$t->assign('mid', $message_id);

require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();

$my_message = $message_logic->hasPrivilege($G_message_login, $message_id,
    $relation_id);
if ($my_message === false) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}
unset($my_message);

$message = $message_logic->getMessageInfo($G_message_login, $relation_id,
    $message_id);
if ($message === false) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
$page_index = 'message/index';

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

require_once('message/folder_logic.csp');
$folder_logic = new GRN_Message_FolderLogic();
$folder_info = $folder_logic->getFolderInfo($user, $category_id);

if ( ! $folder_info) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
}

$sf = 0;
switch ($folder_info['folder_type']) {
    case GRN_MESSAGE_RECEIVINGFOLDER:
        $page_folder = 'message/inbox';
        $sf = 1;
        break;
    case GRN_MESSAGE_SENDINGFOLDER:
        $page_folder = 'message/outbox';
        break;
    case GRN_MESSAGE_DRAFTFOLDER:
        $page_folder = 'message/draftbox';
        break;
    case GRN_MESSAGE_GARBAGEFOLDER:
        $page_folder = 'message/garbagebox';
        break;
    default:
        $page_folder = 'message/category_list';
}

switch ($message['message_type']) {
    case '0': // general message
    case '1': // sent message
        $page_view = 'message/view';
        break;
    case '2': // draft message
        $page_view = 'message/draft_view';
        break;
}

$t->assign(
    'site_position',
    [
        [
            'page' => $page_index,
            'name' => grn_get_page_display_name($page_index),
            'sf'   => $sf
        ],
        [
            'page' => $page_index,
            'name' => grn_get_page_display_name($page_folder),
            'cid'  => $category_id,
            'sf'   => 1
        ],
        [
            'page' => $page_view,
            'name' => grn_get_page_display_name($page_view,
                ['app_name' => $G_message_name]),
            'cid'  => $category_id,
            'rid'  => $relation_id,
            'mid'  => $message_id,
        ],
        [
            'page' => '',
            'name' => $page_title,
        ],
    ]
);


$t->assign('name_width', $G_message_ui_config->getNameWidth());
$t->assign('truncate_width', $G_message_ui_config->getTruncateWidth());

require_once('grn/controller.csp');
$utility = new GRN_ControllerUtil();

require_once('message/application.csp');
$message_app = new GRN_Message_Application();
$profile = $message_app->getUserProfile($user);
$default_time_sort = null;
if ( ! $profile->getAttribute('accessory_time_sort', $default_time_sort)) {
    $default_time_sort = 'ctime';
}
$reverse = array_key_exists('reverse', $G_INPUT) ? $G_INPUT['reverse'] : '1';
if (is_string($reverse) && strlen($reverse) === 0) {
    $reverse = '1';
}
$sort = array_key_exists('sort', $G_INPUT) ? $G_INPUT['sort']
    : $default_time_sort;
if ($sort != 'ctime' && $sort != 'mtime' && $sort != 'fnd' && $sort != 'ftd') {
    $sort = $default_time_sort;
}

$default_sort_params = [
    'accessory_sort_key'  => 'ctime',
    'accessory_reverse'   => $reverse,
    'accessory_time_sort' => 'ctime'
];
$sort_params = [
    'fnd'  => ['disable' => true],
    'ftd'  => ['disable' => true],
    'time' => ['disable' => true]
];
// ソートの状態の取得
foreach (array_keys($default_sort_params) as $key) {
    if ( ! $profile->getAttribute($key, $value)) {
        $value = $default_sort_params[$key];
    }

    $sort_params[$key] = $value;
}

switch ($sort) {
    case 'fnd':
        $sort_params['fnd']['disable'] = false;
        $sort_params['fnd']['reverse'] = $reverse == '0' ? '1' : '0';
        break;
    case 'ftd':
        $sort_params['ftd']['disable'] = false;
        $sort_params['ftd']['reverse'] = $reverse == '0' ? '1' : '0';
        break;
    case 'mtime':
    default:
        $sort_params['time']['disable'] = false;
        $sort_params['time']['reverse'] = $reverse == '0' ? '1' : '0';
        if ($sort != $sort_params['accessory_time_sort']) {
            // 時間のソートの変更
            grn_message_updateAttribute($profile, 'accessory_time_sort', $sort);
        }
        $sort_params['accessory_time_sort'] = $sort;
        break;
}
$time_sort = $sort_params['accessory_time_sort'] == 'ctime' ? 'mtime' : 'ctime';

$t->assign('button_params', [
    'cid'     => $category_id,
    'rid'     => $relation_id,
    'mid'     => $message_id,
    'sort'    => $time_sort,
    'reverse' => $sort_params['time']['disable'] ? '' : $reverse
]);
$t->assign('switch_params', [
    'cid'     => $category_id,
    'rid'     => $relation_id,
    'mid'     => $message_id,
    'sort'    => $sort_params['accessory_time_sort'],
    'reverse' => $sort_params['time']['disable'] ? ''
        : $sort_params['time']['reverse']
]);
$t->assign('sort_params', $sort_params);

$message = $message_logic->getMessageInfo($user, $relation_id, $message_id);

if ( ! $message) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

$message_for_view = [];
$message_for_view['cid'] = $category_id;
$message_for_view['rid'] = $relation_id;
$message_for_view['mid'] = $message_id;
$message_for_view['subject'] = $message['subject'];
$message_for_view['frm'] = 'ac';

require_once('message/file.csp');
$fm = new GRN_Message_FileManager();
$files = $fm->getAllFiles($message_id, (strcmp($reverse, '1') === 0), $sort);

$uids = [];
$files_for_view = [];
while ( ! is_null(($data = $files->iterate()))) {
    $result = $fm->getMyMessageInfo($user, $data['r']->getOID(), $relation_id);
    if ( ! $result) {
        continue;
    }
    $title = $data['f']->getTitle();
    if (is_null($title) || strlen($title) < 1) {
        $title = $data['b']->get('name');
    }
    $follow =& $data['r']->get('follow');
    $creator =& $data['f']->get('creator');


    $files_for_view[$data['f']->getOID()] = [
        'title'        => $title,
        'filename'     => $data['b']->get('name'),
        'abstract'     => $follow ? $follow->get('data') : $message['abstract'],
        'follow_id'    => $follow ? $follow->get('id') : null,
        'ctime'        => $data['f']->get($sort_params['accessory_time_sort']),
        'creator_uid'  => $creator ? $creator->getOID() : 0,
        'creator_name' => $creator ? $creator->get('display_name')
            : $data['f']->get('creator_name'),
        'rfid'         => $data['r']->getOID(),
        'mime'         => $data['b']->getMIMEType()
    ];

    $uids[] = $files_for_view[$data['f']->getOID()]['creator_uid'];
}

$message_for_view['all_attach_files'] = $files_for_view;

$message_for_view['from_draft'] = @ $G_INPUT['draft'];
$t->assign('message', $message_for_view);

require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $user);
$t->assign('users_info', $users_info);
// Smarty実行
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

/**
 * @param CB_Profile $profile
 * @param            $name
 * @param            $value
 */
function grn_message_updateAttribute(& $profile, $name, $value)
{
    $default_value = null;
    if ( ! $profile->getAttribute($name, $default_value)) {
        $profile->createAttribute($name, $value);
    } else {
        $profile->updateAttribute($name, $value);
    }
}


