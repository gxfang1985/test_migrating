<?php

use \grn\grn\mention\MentionController;
use grn\grn\MemberLogic;

/**
 * 詳細画面のサイトポジションを生成する
 */
function __make_site_position(& $user, $category_id, $app_name)
{
    $page_title = grn_get_page_display_name('message/view',
        ['app_name' => $app_name]);

    $page_index = 'message/index';
    $page_inbox = 'message/inbox';
    $page_outbox = 'message/outbox';
    $page_draftbox = 'message/draftbox';
    $page_garbagebox = 'message/garbagebox';
    $page_category_list = 'message/category_list';

    require_once('message/folder_logic.csp');
    $folder_logic = new GRN_Message_FolderLogic();
    $folder_info = $folder_logic->getFolderInfo($user, $category_id);

    if ( ! $folder_info) {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
    }

    $sf = 0;
    switch ($folder_info['folder_type']) {
        case GRN_MESSAGE_RECEIVINGFOLDER:
            $page_folder = $page_inbox;
            $sf = 1;
            break;
        case GRN_MESSAGE_SENDINGFOLDER:
            $page_folder = $page_outbox;
            break;
        case GRN_MESSAGE_DRAFTFOLDER:
            $page_folder = $page_draftbox;
            break;
        case GRN_MESSAGE_GARBAGEFOLDER:
            $page_folder = $page_garbagebox;
            break;
        default:
            $page_folder = $page_category_list;
    }

    $top_page = [
        'page' => $page_index,
        'name' => grn_get_page_display_name($page_index),
        'sf'   => $sf
    ];
    $folder_page = [
        'page' => $page_index,
        'name' => grn_get_page_display_name($page_folder),
        'cid'  => $category_id,
        'sf'   => 1
    ];

    return [
        $top_page,
        $folder_page,
        [
            'page' => '',
            'name' => $page_title
        ]
    ];
}

function getUserInfoForView($message)
{
    $type = 'user';
    $all_users = [];
    if ($message['creator_id'] != "") {
        $all_users[$message['creator_id']] = [
            'id'   => $message['creator_id'],
            'type' => $type
        ];
    }

    if (is_array($message['addressees'])) {
        foreach ($message['addressees'] as $addressee) {
            $all_users[$addressee['id']] = [
                'id'   => $addressee['id'],
                'type' => $type
            ];
        }
    }

    $users_info = MemberLogic::getInstance()->getDisplayMemberList($all_users);

    return $users_info;
}

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}


// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------

$relation_id = @ $G_INPUT['rid'];
$message_id = @ $G_INPUT['mid'];

if ($relation_id == '' || $message_id == '') {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();

$relation_id = $message_logic->getPrimaryRelationID($user, $relation_id,
    $message_id);
if ( ! $relation_id) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

$message = $message_logic->getMessage($user, $relation_id, $message_id, 0, -1,
    false);
if ( ! $message) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}
$users_info_for_view = getUserInfoForView($message);

// 出力文字コードを選択する

$position = __make_site_position($user, @ $G_INPUT['cid'], $G_message_name);

require_once('grn/ui.csp');
$charset = grn_ui_export_charset($user, 'message/view', $position);
assert('!is_null($charset)');


$message_for_view = [];
$message_for_view['subject'] = $message['subject'];
$message_for_view['creator']
    = $users_info_for_view[$message['creator_id']]['displayName'] ?? $message['creator_name'];
$message_for_view['ctime'] = $message['ctime'];

// available addressees
$addressee_names = '';
$delete_addressee_names = '';
$deleted_addressee_names = '';

if (is_array($message['addressees'])) {
    foreach ($message['addressees'] as $addressee) {
        if ($addressee['dtime']->unix_ts == 0
            && $addressee['delete_flag'] == 0
        ) {
            if ($addressee_names == '') {
                $addressee_names .= $users_info_for_view[$addressee['id']]['displayName'];
            } else {
                $addressee_names .= ', '
                                    . $users_info_for_view[$addressee['id']]['displayName'];
            }
        } elseif ($addressee['dtime']->unix_ts > 0) {
            if ($delete_addressee_names == '') {
                $delete_addressee_names .= $users_info_for_view[$addressee['id']]['displayName'];
            } else {
                $delete_addressee_names .= ', '
                                           . $users_info_for_view[$addressee['id']]['displayName'];
            }
        } else {
            if ($deleted_addressee_names == '') {
                $deleted_addressee_names .= $users_info_for_view[$addressee['id']]['displayName'];
            } else {
                $deleted_addressee_names .= ', '
                                            . $users_info_for_view[$addressee['id']]['displayName'];
            }
        }
    }
}
$message_for_view['addressees'] = $addressee_names;
$message_for_view['delete_addressees'] = $delete_addressee_names;
$message_for_view['deleted_addressees'] = $deleted_addressee_names;

// unsubscribe users
$unsubscribe_users = $message_logic->getUnsubscribeUsers($message_id,
    $message['addressees']);
$unsubscribe_names = '';
if (is_array($unsubscribe_users)) {
    foreach ($unsubscribe_users as $user) {
        if ($unsubscribe_names == '') {
            $unsubscribe_names .= $users_info_for_view[$user['id']]['displayName'];
        } else {
            $unsubscribe_names .= ', '
                                  . $users_info_for_view[$user['id']]['displayName'];
        }
    }
}
$message_for_view['unsubscribe'] = $unsubscribe_names;

// modified time
if ($message['mtime'] > $message['ctime']) {
    $message_for_view['mtime'] = $message['mtime'];
}

// body
if ($message['format_type'] == 0) // plain text
{
    $message_for_view['data'] = $message['data'];
} else                               // html
{
    require_once('grn/controller.csp');
    $message_for_view['data'] = grn_strip_tags($message['data']);
}

// attached files
$files_for_view = [];
foreach ($message['files'] as $file) {
    if (array_key_exists('name', $file)) {
        $file_for_view = [];
        $file_for_view['name'] = $file['name'];
        $files_for_view[] = $file_for_view;
    }
}
$message_for_view['attach_files'] = $files_for_view;

// follows
$follows = array_reverse($message['follows'], true);
$follow_id_list = array_keys($follows);
$mention_collection
    = $message_logic->getMentionByFollowIdList($follow_id_list);
$mention_member_list
    = MentionController::createMemberListsForView($mention_collection);

$follows_for_view = [];
$mention_symbol = '@:';
foreach ($follows as $follow_id => $follow) {
    $follow_for_view = [];
    $follow_for_view['creator']
        = $users_info_for_view[$follow['creator_id']]['displayName'] ?? $follow['creator_name'];
    $follow_for_view['ctime'] = $follow['ctime'];

    if (array_key_exists('id', $follow)) {
        $follow_for_view['id'] = $follow['id'];

        $mentions = $mention_member_list[$follow_id] ?? [];
        if ($mentions) {
            $mention_names = [];
            foreach ($mentions as $mention) {
                $mention_names[] = $mention['displayName'];
            }

            $follow_for_view['mention_name'] = $mention_symbol . implode(', ',
                    $mention_names);
        }
    }

    // follow body
    if ($follow['format_type'] == 0) // plain text
    {
        $follow_for_view['data'] = $follow['data'];
    } else                              // html
    {
        require_once('grn/controller.csp');
        $follow_for_view['data'] = grn_strip_tags($follow['data']);
    }

    // attached files
    $files_for_view = [];
    foreach ($follow['files'] as $file) {
        if (array_key_exists('name', $file)) {
            $file_for_view = [];
            $file_for_view['name'] = $file['name'];
            $files_for_view[] = $file_for_view;
        }
    }
    $follow_for_view['attach_files'] = $files_for_view;

    $follows_for_view[] = $follow_for_view;
}
$message_for_view['follows'] = $follows_for_view;

$t->assign('message', $message_for_view);
$t->assign('app_name', $G_message_name);

cb_prepare_download('notitle.txt', 'text/plain', false);

echo grn_ui_export_content($t, cb_get_pagename(), $charset);

cb_safe_exit();


