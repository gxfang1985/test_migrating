<?php

use grn\fts\Application as FtsApplication;

global $G_INPUT;

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------

// message instance
require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();
$folder_logic = new GRN_Message_FolderLogic();

$category_id = @ $G_INPUT['cid'];
if ( ! is_numeric($category_id)) {
    $category_id = null;
}

// --- folder tree
require_once('grn/org_tree.csp');
require_once('message/folder_tree.csp');

$util = GRN_OrgTreeUtil::getInstance();
$tree = $util->getTree(cb_get_pagename(), 'GRN_Message_FolderTree');

$tree_for_view = [];
if (is_null($tree->getRoot()) || array_key_exists('top', $G_INPUT)) {
    $tree->initialize();
    if ( ! array_key_exists('cid', $G_INPUT)) {
        $category_id = null;
    }
}

if (is_null($category_id)) {
    $category_id = $tree->getSelectedNode();
}
if ( ! is_numeric($category_id)) {
    $category_id = null;
}

$unread_mesg_info = $message_logic->getUnreadMessageNum($user);
foreach (array_keys($unread_mesg_info) as $index) {
    $unread_mesg_info[$index] = (int)$unread_mesg_info[$index];
}

// Open path to nodes whose unread message numbers change
foreach ($tree->_nodes as $nodeId => $node_info) {
    if ( ! isset($tree->_nodes[$nodeId]['unread'])) {
        $tree->_nodes[$nodeId]['unread'] = 0;
    }

    $latest_unread_num = array_key_exists($nodeId, $unread_mesg_info)
        ? $unread_mesg_info[$nodeId] : 0;
    if ($latest_unread_num > $tree->_nodes[$nodeId]['unread']) {
        $tree->showPathToNode($nodeId);
    }
    $tree->_nodes[$nodeId]['unread'] = $latest_unread_num;
}
// get trash
require_once('message/personal_logic.csp');
$personal_logic = GRN_Message_PersonalLogic::getInstance();
$trash_enable = $personal_logic->getUseGarbageBoxAttribute($user);
require_once('message/folder_logic.csp');
$folder_logic = new GRN_Message_FolderLogic();
$trash_id = $folder_logic->getSpecificFolderID($user,
    GRN_MESSAGE_GARBAGEFOLDER);

$tree_for_view = [
    'page_name'    => cb_get_pagename(),
    'root'         => $tree->getRoot(),
    'async_url'    => 'message/folder_json',
    'link_url'     => 'message/index',
    'selected_oid' => $category_id,
    'unread_num'   => $unread_mesg_info,
    'oid_key'      => 'cid',
    'trash_id'     => $trash_id,
    'trash_enable' => $trash_enable,
    'no_root'      => true,
];
$t->assign('folder_tree', $tree_for_view);

$tree->setSelectedNode($category_id);
$util->setTree(cb_get_pagename(), $tree);
// --- end: folder tree

if ($category_id == '') {
    $category_id = $folder_logic->getSpecificFolderID($user,
        GRN_MESSAGE_RECEIVINGFOLDER);
    if ( ! $category_id) {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
    }
}

$folder_info = $folder_logic->getFolderInfo($user, $category_id);
if ( ! $folder_info) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
}
$folder_type = $folder_info['folder_type'];

if ($folder_type == GRN_MESSAGE_GARBAGEFOLDER) {
    require_once('message/personal_logic.csp');
    $personal_logic = GRN_Message_PersonalLogic::getInstance();
    if ($personal_logic->getUseGarbageBoxAttribute($user) == '0') {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
    }

    $t->assign('savedays', $personal_logic->getStoredTermAttribute($user));
}

// get folder for combobox
$message_select_folders = [];
$folder_logic->getFolderTree($user, 0, $message_select_folders);
$message_select_folders = render_message_select_folder($message_select_folders);
$t->assign('message_select_folders', $message_select_folders);

// メッセージ受信
$message_logic->receiveMessages($user);

global $G_message_ui_config;
$limit = $G_message_ui_config->getListMax();

require_once('message/controller.csp');
$utility = new GRN_Message_ControllerUtil();

$t->assign('cid', $category_id);
$offset = $utility->getNaviStartPosition();
$utility->setNaviStartPosition($offset);

$order_column = $utility->getListOrderColumn(null, 'mtd');
// sorting
$sw_sort = @$G_INPUT['sw_sort'];
if (is_null($sw_sort)) {
    $sw_sort = $utility->getSwitchOrderColumn();
    $t->assign('sw_sort', $sw_sort);
} else {
    $col = ($sw_sort == 'ctime') ? 'ct' : 'mt';
    if ($order_column['column'] == 'ctime'
        || $order_column['column'] == 'last_mtime'
    ) {
        $col .= $order_column['param'][2];
        $order_column = $utility->getListOrderColumn($col);
    } else {
        $col .= 'd';
        $order_column = $utility->getListOrderColumn($col);
    }
    $t->assign('sw_sort', $sw_sort);
    $utility->setListOrderParam($col);
    $utility->setSwitchOrderColumn($sw_sort);
}

if ($folder_info['folder_type'] === GRN_MESSAGE_SENDINGFOLDER) {
    if ($order_column['column'] === 'creator_name'
        && ! array_key_exists('sort', $G_INPUT)
    ) {
        $col = ($sw_sort == 'ctime' ? 'ct' : 'mt');
        $col .= $order_column['param'][2];
        $order_column = $utility->getListOrderColumn($col);
        $utility->setListOrderParam($col);
    }
} else {
    if ($order_column['column'] === 'addressee_name'
        && ! array_key_exists('sort', $G_INPUT)
    ) {
        $col = 'cu' . $order_column['param'][2];
        $order_column = $utility->getListOrderColumn($col);
        $utility->setListOrderParam($col);
    }
}

$t->assign('sort', $order_column['param']);


// folder properties
$category_for_view = [];
$category_for_view['title'] = $folder_info['folder_name'];
$category_for_view['memo'] = $folder_info['memo'];
$category_for_view['type'] = $folder_info['folder_type'];
$category_for_view['is_subscribed'] = $folder_info['subscription_flag'];
$t->assign('category', $category_for_view);


$sibling_folders = $folder_logic->getSiblingFolders($user, $category_id);
if ($sibling_folders === false) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
}
$has_sibling_folders_for_view = false;
if (count($sibling_folders) > 1) {
    $has_sibling_folders_for_view = true;
}
$t->assign('has_sibling_folders', $has_sibling_folders_for_view);

$t->assign('app_name', $G_message_name);

// page title
$page_index = 'message/index';
$page_outbox = 'message/outbox';
$page_draftbox = 'message/draftbox';
$page_garbagebox = 'message/garbagebox';
$page_category_list = 'message/category_list';

switch ($folder_info['folder_type']) {
    case GRN_MESSAGE_RECEIVINGFOLDER:
        $page_title = grn_get_page_display_name($page_index);
        break;
    case GRN_MESSAGE_SENDINGFOLDER:
        $page_title = grn_get_page_display_name($page_outbox);
        break;
    case GRN_MESSAGE_DRAFTFOLDER:
        $page_title = grn_get_page_display_name($page_draftbox);
        break;
    case GRN_MESSAGE_GARBAGEFOLDER:
        $page_title = grn_get_page_display_name($page_garbagebox);
        //$sort = 'mtime';
        if ($order_column['column'] === 'ctime'
            || $order_column['column'] === 'last_mtime'
        ) {
            $order_column['column'] = 'mtime';
        }
        break;
    default:
        $page_title = grn_get_page_display_name($page_category_list);
}
if (isset($category_for_view['title'])) {
    $t->assign('page_title', $category_for_view['title']);
} else {
    $t->assign('page_title', $page_title);
}
// site position
$site_position = [];
if ($folder_info['folder_type'] != GRN_MESSAGE_RECEIVINGFOLDER) {
    $site_position[] = [
        'page' => $page_index,
        'name' => grn_get_page_display_name($page_index)
    ];
}
$site_position[] = [
    'page' => '',
    'name' => $page_title,
];
$t->assign('site_position', $site_position);


// 一覧メッセージ
$t->assign('subject_width', $G_message_ui_config->getSubjectWidth());
$t->assign('name_width', $G_message_ui_config->getNameWidth());

//  送信ユーザーが削除されているかはあとで確認するので、ここではチェックしない
$message_list = $message_logic->getMessageList($user, $category_id,// Huy
    $folder_info['folder_type'],
    $order_column['column'], $order_column['order'], $offset, $limit + 1,
    $sw_sort,
    false);
$isNextPageExists = (count($message_list) > $limit);
if ($isNextPageExists) {
    array_pop($message_list);
}

$assign_messages_map = [
    'mid'               => 'message_id',
    'subject'           => 'subject',
    'creator_uid'       => 'user_id',
    'creator_name'      => 'user_name',
    'need_confirm'      => 'need_confirm',
    'confirmed'         => 'confirmed',
    'type'              => 'message_type',
    'attach_file'       => 'has_files',
    'is_subscribed'     => 'is_subscribed',
    'attach_files_size' => 'file_size',
];

$user_id = $user->getOID();

require_once('message/file.csp');
$fm = new GRN_Message_FileManager();

$messages_for_view = [];
$messages_for_view['message'] = [];
$star_unique_ids = [];
foreach ($message_list as $rid => $message) {
    $messages_for_view['message'][$rid] = [];
    foreach ($assign_messages_map as $view_name => $data_name) {
        $messages_for_view['message'][$rid][$view_name] = $message[$data_name];
    }

    // user is sender
    // need for deleting messages
    if ($user_id == $message['creator_id']) {
        $messages_for_view['message'][$rid]['is_sender'] = 1;
    } else {
        $messages_for_view['message'][$rid]['is_sender'] = 0;
    }

    if ($message['status'] == 0)      // unread
    {
        $messages_for_view['message'][$rid]['unread'] = 1;
        $messages_for_view['message'][$rid]['update'] = $message['touched'] ? 1
            : 0;
        $messages_for_view['message'][$rid]['ctime'] = $message['date'];
    } else {
        if ($message['status'] == 1) // update
        {
            $messages_for_view['message'][$rid]['update'] = 1;
        }
        $messages_for_view['message'][$rid]['mtime'] = $message['date'];
    }
    // star infos
    $star_unique_ids[$rid] = $message['message_id'];
}

$t->assign('messages', $messages_for_view);

require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$t->assign('use_star', ($use_star = $star_logic->isActive()));
if ($use_star) {
    $t->assign('star_infos',
        $star_logic->getStatusByIDs($user, GRN_MESSAGE_MODULEID,
            $star_unique_ids));
}

$uids = [];
foreach ($messages_for_view['message'] as $m) {
    $uids[] = $m['creator_uid'];
}

require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $user);
$t->assign('users_info', $users_info);

// delete messages automatically
require_once('message/personal_logic.csp');
$personal_logic = GRN_Message_PersonalLogic::getInstance();
$personal_logic->autoDeleteMessages($user);

$navi_info_for_view = $utility->makeSimpleNaviInformation($offset,
    $limit, count($message_list), $isNextPageExists);
$params = [];
$params['cid'] = $category_id;
$navi_info_for_view['navi']['params'] = $params;
$t->assign('navi_info', $navi_info_for_view);

//delete all info
$category_child = $folder_logic->hasChildFolders($category_id);
$use_garbagebox = $personal_logic->getUseGarbageBoxAttribute($user);
$no_confirm_all = false;
$delete_all_info = [
    'title'      => grn_get_page_display_name('message/delete_all'),
    'page'       => 'message/delete_all.tpl',
    'no_confirm' => $no_confirm_all,
    'data'       => [
        'category_id'    => $category_id,
        'use_garbagebox' => $use_garbagebox,
        'category_type'  => $folder_type,
        'category_child' => $category_child,
    ],
    'handler'    => 'lnk_delete_all'
];
$t->assign('delete_all_info', $delete_all_info);

//delete multi info
$no_confirm_multi = false;
$delete_multi_info = [
    'title'         => grn_get_page_display_name('message/delete_multi'),
    'page'          => 'message/delete_multi.tpl',
    'no_confirm'    => $no_confirm_multi,
    'data'          => [
        'search'      => false,
        'category_id' => $category_id,
        'messages'    => [
            'category_type'  => $folder_type,
            'use_garbagebox' => $use_garbagebox
        ],
    ],
    'handler'       => ['btn_delete_multi1', 'btn_delete_multi2'],
    'multi_target'  => 'ids[]',
    'form_target'   => 'message/index',
    'before_delete' => 'on_before_show_popup',
];
$t->assign('delete_multi_info', $delete_multi_info);

if (FtsApplication::isViewable()) {
    $t->assign('use_fts', true);
}

// Smarty実行
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");
