<?php

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

//-- get parameters from URL parameters
$category_id = @ $G_INPUT['cid'];
$relation_id = @ $G_INPUT['rid'];
$message_id = @ $G_INPUT['mid'];

if ($category_id == '' || $relation_id == '' || $message_id == '') {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

//-- instantiate Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------

require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();

$message = $message_logic->getMessageInfo($user, $relation_id, $message_id);
if ( ! $message) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

$omid = $message['is_snapshot'] ? $message['original_mid'] : $message_id;

$t->assign('message', [
    'subject'     => $message['subject'],
    'is_snapshot' => $message['is_snapshot'],
    'delete_time' => $message['delete_time']
]);

$sort = @ $G_INPUT['sort'];

$reverse = true;
$user_rev = true;
$voice_rev = true;
$user_disable_for_view = true;
$voice_disable_for_view = true;
switch ($sort) {
    case 'user':
        $reverse = @ $G_INPUT['user_rev'];
        $user_rev =& $reverse;
        $user_disable_for_view = false;
        break;
    case 'voice':
        $reverse = @ $G_INPUT['voice_rev'];
        $voice_rev =& $reverse;
        $voice_disable_for_view = false;
        break;
}
$t->assign('user_disable', $user_disable_for_view);
$t->assign('voice_disable', $voice_disable_for_view);

if ($reverse == '' || $reverse == '1') {
    $reverse = true;
} else {
    $reverse = false;
}

$voices = $message_logic->getVoices($user, $relation_id, $message_id, $sort,
    $reverse);
if ( ! $voices) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

$user_info_for_view = [];
$delete_user_info_for_view = [];

$uids = [];
foreach ($voices as $voice) {
    $voice_for_view = [];
    if ($voice['user_id'] && $message['creator_id'] == $voice['user_id']) {
        $voice_for_view['creator_uid'] = $voice['user_id'];
        $voice_for_view['creator_name'] = $voice['user_name'];
    } else {
        $voice_for_view['uid'] = $voice['user_id'];
        $voice_for_view['name'] = $voice['user_name'];
    }
    if (array_key_exists('data', $voice)) {
        $voice_for_view['mtime'] = $voice['ctime'];
        $voice_for_view['data'] = $voice['data'];
    }

    if ($voice['delete'] == '1') {
        $voice_for_view['delete'] = 1;
    }

    if ($voice['dtime']->unix_ts == 0) {
        $user_info_for_view[] = $voice_for_view;
    } else {
        $voice_for_view['dtime'] = $voice['dtime'];
        $delete_user_info_for_view[] = $voice_for_view;
    }
    $uids[] = $voice['user_id'];
}
require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $user);
$t->assign('users_info', $users_info);

$t->assign('user_info', $user_info_for_view);
$t->assign('delete_user_info', $delete_user_info_for_view);

// sort parameters
$sort_params = [
    'cid' => $category_id,
    'rid' => $relation_id,
    'mid' => $message_id
];

$addressee_sort_params_for_view = $sort_params;
$addressee_sort_params_for_view['sort'] = 'user';
$addressee_sort_params_for_view['user_rev'] = $user_rev ? '0' : '1';

$voice_sort_params_for_view = $sort_params;
$voice_sort_params_for_view['sort'] = 'voice';
$voice_sort_params_for_view['voice_rev'] = $voice_rev ? '0' : '1';

$t->assign('addressee_sort_params', $addressee_sort_params_for_view);
$t->assign('voice_sort_params', $voice_sort_params_for_view);

/*
// メッセージ
$t->assign(
    'message',array(
        'mid' => '001', //記事ID
        'subject' => '社員旅行のお知らせ', //標題
    )
);

// ユーザー情報
$t->assign(
    'user_info',array(
        '001' => array(
            'creator_uid' => '001', //作成者ID
            'mtime' => '2004-12-12', //更新日時
            'data' => 'あああああ',
        ),
        '002' => array(
            'uid' => '002', //ユーザーID
            'mtime' => '2004-12-12', //更新日時
            'data' => 'もぎゃもぎゅあ',
        ),
        '003' => array(
            'uid' => '003', //ユーザーID
            'mtime' => '2004-12-12', //更新日時
            'data' => '',
            'delete' => 1,
        ),
    )
);

// 削除されたユーザー情報
$t->assign(
    'delete_user_info',array(
        '001' => array(
            'creator_uid' => '001', //作成者ID
            'mtime' => '2004-12-12', //更新日時
            'dtime' => '2004-12-21', //削除日時
            'data' => 'あああああ',
        ),
        '002' => array(
            'editor_uid' => '002', //更新者ID
            'mtime' => '2004-12-12', //更新日時
            'dtime' => '2004-12-21', //削除日時
            'data' => 'もぎゃもぎゅあ',
        ),
        '003' => array(
            'uid' => '003', //ユーザーID
            'mtime' => '2004-12-12', //更新日時
            'dtime' => '2004-12-21', //削除日時
            'data' => '',
            'delete' => 1,
        ),
    )
);

$t->assign( 'editor_uid', 1 ); //メッセージ更新者がいる場合
$t->assign( 'delete_date', '2004-12-21' ); //削除日時
 */

//------------------

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
$t->assign('app_name', $G_message_name);
// site position
$page_index = 'message/index';
$page_inbox = 'message/inbox';
$page_outbox = 'message/outbox';
$page_draftbox = 'message/draftbox';
$page_garbagebox = 'message/garbagebox';
$page_category_list = 'message/category_list';

require_once('message/folder_logic.csp');

$folder_logic = new GRN_Message_FolderLogic();
$folder_info = $folder_logic->getFolderInfo($user, $category_id);

$sf = 0;
switch ($folder_info['folder_type']) {
    case GRN_MESSAGE_RECEIVINGFOLDER:
        $page_folder = $page_inbox;
        $sf = 1;
        break;
    case GRN_MESSAGE_SENDINGFOLDER:
        $page_folder = $page_outbox;
        break;
    case GRN_MESSAGE_DRAFTFOLDER:
        $page_folder = $page_draftbox;
        break;
    case GRN_MESSAGE_GARBAGEFOLDER:
        $page_folder = $page_garbagebox;
        break;
    default:
        $page_folder = $page_category_list;
}

$t->assign(
    'site_position',
    [
        [
            'page' => $page_index,
            'name' => grn_get_page_display_name($page_index),
            'sf'   => $sf
        ],
        [
            'page' => $page_index,
            'name' => grn_get_page_display_name($page_folder),
            'cid'  => $category_id,
            'sf'   => 1
        ],
        [
            'page' => 'message/view',
            'name' => grn_get_page_display_name('message/view',
                ['app_name' => $G_message_name]),
            'cid'  => $category_id,
            'rid'  => $relation_id,
            'mid'  => $omid
        ],
        [
            'page' => '',
            'name' => $page_title
        ]
    ]
);

// Smarty実行
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

