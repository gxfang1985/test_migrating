<?php

use grn\grn\access\service\AppAccess;
use grn\favour\service\FavourService;
use grn\grn\MemberLogic;
use grn\grn\mention\MentionController;
use grn\grn\GrnGenericScreenBase;

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------

$category_id = array_key_exists('cid', $G_INPUT) ? $G_INPUT['cid'] : '';
$relation_id = array_key_exists('rid', $G_INPUT) ? $G_INPUT['rid'] : '';
$message_id = array_key_exists('mid', $G_INPUT) ? $G_INPUT['mid'] : '';
$follow_id = array_key_exists('follow_id', $G_INPUT) ? $G_INPUT['follow_id']
    : '';

// message instance
require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();

// 受信処理
$message_logic->receiveMessages($user);

$my_message = $message_logic->hasPrivilege($user, $message_id, $relation_id);
if ($my_message === false) {
    $notify_id = cb_at($G_INPUT, 'nid');
    $notify_hid = cb_at($G_INPUT, 'nhid');
    $notify_fnid = cb_at($G_INPUT, 'fnid');
    if ($notify_id || $notify_hid || $notify_fnid) {
        $t->assign(
            'site_position', [
                [
                    'page' => "message/index",
                    'name' => grn_get_page_display_name('message/index')
                ],
                [
                    'page' => '',
                    'name' => grn_get_current_page_display_name(
                        ['app_name' => $G_message_name]
                    )
                ]
            ]
        );
        $t->display('message/deleted_screen.tpl');
        cb_safe_exit();
    }
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

$category_id = $my_message['cid'];
$relation_id = $my_message['rid'];
$message_id = $my_message['mid'];

$t->assign('rid', $relation_id);

$limit = $G_message_ui_config->getFollowMax();

// for word navi
require_once('message/controller.csp');
$utility = new GRN_Message_ControllerUtil('message/view');

if (strlen($follow_id) > 0 && is_numeric($follow_id)) {
    $is_exist_follow = $message_logic->getOffset($follow_id, $message_id);
    if ($is_exist_follow == -1) {
        $follow_id = "";
        $offset = 0;
    } else {
        $offset = $message_logic->getFollowOffset($user, $relation_id,
            $follow_id);
    }
} else {
    $offset = $utility->getNaviStartPosition();
}
$utility->setNaviStartPosition($offset);
$navi_info_for_view = $utility->makeNaviInformation($offset, $limit,
    $message_logic->getTotalFollowNum($user, $relation_id, $message_id));

$params = [];
$params['cid'] = $category_id;
$params['rid'] = $relation_id;
$params['mid'] = $message_id;
$navi_info_for_view['navi']['params'] = $params;
$t->assign('navi_info', $navi_info_for_view);

$t->assign('user_id', $user->getOID());

$order_column = $utility->getListOrderColumn(null, 'mtd');

$pn_ids = $message_logic->getPreviousNextIDs($user, $category_id, $relation_id,
    $order_column['column'], $order_column['order']);
// previous navi
$previous_navi_params_for_view = _grn_message_get_pn_navi_params('previous',
    $pn_ids);
if ($previous_navi_params_for_view) {
    $previous_navi_params_for_view['page_params']['cid'] = $category_id;
    $t->assign('previous_navi_params', $previous_navi_params_for_view);
}

// next navi
$next_navi_params_for_view = _grn_message_get_pn_navi_params('next',
    $pn_ids);
if ($next_navi_params_for_view) {
    $next_navi_params_for_view['page_params']['cid'] = $category_id;
    $t->assign('next_navi_params', $next_navi_params_for_view);
}

// inline
$t->assign('inline', $G_message_ui_config->getInlineSetting());

// page title
$page_title
    = grn_get_current_page_display_name(['app_name' => $G_message_name]);
$t->assign('app_name', $G_message_name);
$t->assign('page_title', $page_title);

// site position
$page_index = 'message/index';
$page_inbox = 'message/inbox';
$page_outbox = 'message/outbox';
$page_draftbox = 'message/draftbox';
$page_garbagebox = 'message/garbagebox';
$page_category_list = 'message/category_list';

require_once('message/folder_logic.csp');
$folder_logic = new GRN_Message_FolderLogic();
$folder_info = $folder_logic->getFolderInfo($user, $category_id);

if ( ! $folder_info) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
}

$sf = 0;
switch ($folder_info['folder_type']) {
    case GRN_MESSAGE_RECEIVINGFOLDER:
        $page_folder = $page_inbox;
        $sf = 1;
        break;
    case GRN_MESSAGE_SENDINGFOLDER:
        $page_folder = $page_outbox;
        break;
    case GRN_MESSAGE_DRAFTFOLDER:
        $page_folder = $page_draftbox;
        break;
    case GRN_MESSAGE_GARBAGEFOLDER:
        $page_folder = $page_garbagebox;
        break;
    default:
        $page_folder = $page_category_list;
}

$top_page = [
    'page' => $page_index,
    'name' => grn_get_page_display_name($page_index),
    'sf'   => $sf
];
$folder_page = [
    'page' => $page_index,
    'name' => $page_folder != $page_category_list
        ? grn_get_page_display_name($page_folder)
        : $folder_info["folder_name"],
    'cid'  => $category_id,
    'sf'   => 1
];

$t->assign(
    'site_position',
    [
        $top_page,
        $folder_page,
        [
            'page' => '',
            'name' => $page_title
        ]
    ]
);

if (@ $G_INPUT['nhid'] == '') {
    $from_history = false;
} else {
    $from_history = true;
}

if (strlen($follow_id) > 0 && is_numeric($follow_id)) {
    $message = $message_logic->getMessageByFID($user, $relation_id, $message_id,
        $follow_id, $limit, $from_history);
} else {
    $message = $message_logic->getMessage($user, $relation_id, $message_id,
        $offset, $limit, $from_history);
}

if ( ! $message) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

if ($message['message_type'] == '2') {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

require_once('message/system_logic.csp');
$system_logic = GRN_Message_SystemLogic::getInstance();
$confirm_mode = $system_logic->getConfirmModeConfigAttribute();

if ($confirm_mode == 1 && $message['need_confirm'] == 1
    && $message['confirmed'] == 0
    && $message['message_type'] != GRN_MESSAGE_TYPE_SENT
) {
    if ($category_id == '' || $relation_id == '' || $message_id == '') {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
            ['app_name' => $G_message_name],
            ['app_name' => $G_message_name],
            ['app_name' => $G_message_name]);
    }
    $ret = $message_logic->confirmMessage($user, $message_id);
    if ( ! $ret) {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
            ['app_name' => $G_message_name],
            ['app_name' => $G_message_name],
            ['app_name' => $G_message_name]);
    }
    if (strlen($follow_id) > 0 && is_numeric($follow_id)) {
        $message = $message_logic->getMessageByFID($user, $relation_id,
            $message_id,
            $follow_id, $limit, $from_history);
    } else {
        $message = $message_logic->getMessage($user, $relation_id, $message_id,
            $offset, $limit, $from_history);
    }
    $message['confirmed'] = 1;
}

$t->assign('name_width', $G_message_ui_config->getNameWidth());

$t->assign('use_editor', $system_logic->getUseREConfigAttribute());

// メッセージ本文
$assign_message_map = [
    'mid'           => 'message_id',
    'data'          => 'data',
    'subscribe'     => 'subscription',
    'creator_uid'   => 'creator_id',
    'creator_name'  => 'creator_name',
    'ctime'         => 'ctime',
    'mtime'         => 'mtime',
    'update'        => 'read_flag',
    'cid'           => 'folder_id',
    'modifier_uid'  => 'modifier_id',
    'modifier_name' => 'modifier_name',
    'need_confirm'  => 'need_confirm',
    'confirmed'     => 'confirmed',
    'type'          => 'message_type',
    'is_snapshot'   => 'is_snapshot',
    'delete_time'   => 'delete_time',
    'format_type'   => 'format_type',
];

$uids = [];
$message_for_view = [];
foreach ($assign_message_map as $view_name => $data_name) {
    $message_for_view[$view_name] =& $message[$data_name];
}
$message_for_view['subject'] = $message['subject'];
$t->assign('page_title', $message['subject']);

$uids[] = @$message_for_view['creator_uid'];
$uids[] = @$message_for_view['modifier_id'];

// attached files
$file_list =& $message['files'];
if (count($file_list) > 0) {
    $file_info = _grn_message_attached_files($file_list);
    $message_for_view['attach_files'] = $file_info['files'];
    $message_for_view['del_file_num'] = $file_info['del_file_num'];
}

// addressees
$addressee_list =& $message['addressees'];
$addressee_num = 0;
$confirmed_num = 0;
$all_addressees = count($addressee_list);

$is_sender = false;
$addressees = [];
foreach ($addressee_list as $addressee) {
    $_addressee = [];
    $_addressee['id'] = $addressee['id'];
    $_addressee['name'] = $addressee['name'];
    if ($addressee['dtime']->unix_ts == 0 && $addressee['delete_flag'] == 0) {
        $addressee_num++;
        $addressees[$_addressee['id']] = $_addressee;
    }

    if ($addressee['confirmed'] == '1') {
        $confirmed_num++;
    }

    if ($message['creator_id'] == $addressee['id']) {
        $is_sender = true;
    }

}
$message_for_view['addressee'] = $addressees;
$message_for_view['addressee_num'] = $addressee_num;
$message_for_view['all_addressees'] = $all_addressees;

$voices = $message_logic->getVoices($user, $relation_id, $message_id);
$voice_num = 0;
foreach ($voices as $voice) {
    if ( ! $is_sender && $voice['user_id'] == $message['creator_id']) {
        continue;
    }

    if (array_key_exists('data', $voice)) {
        $voice_num++;
    }
}

$message_for_view['follow_write_num'] = $voice_num;
$message_for_view['confirmed_num'] = $confirmed_num;

$is_operator = false;
if ( ! $message_for_view['is_snapshot']) {
    $is_operator = _grn_message_regard_operator($addressee_list,
        $message['creator_id']);
}

$mention_collection = [];
$mention_count = [];
// フォロー
$follow_list =& $message['follows'];
if (count($follow_list) > 0) {
    $assign_follow_map = [
        'creator_uid'  => 'creator_id',
        'creator_name' => 'creator_name',
        'ctime'        => 'ctime',
        'data'         => 'data',
        'update'       => 'read_flag',
        'id'           => 'id',
        'format_type'  => 'format_type'
    ];

    $message_for_view['follow'] = [];
    require_once('message/system_logic.csp');
    $system_logic = GRN_Message_SystemLogic::getInstance();
    $enable_follow_autolink = $system_logic->getEnableFollowAutoLink();
    $mask_symbol
        = htmlspecialchars(GRN_MESSAGE_FOLLOW_AUTOLINK_SYMBOL);
    $baseUrl = cb_pageurl('message/view',
        [
            'cid'       => $message_for_view['cid'],
            'rid'       => $relation_id,
            'mid'       => $message_for_view['mid'],
            'follow_id' => ''
        ]);

    $follow_id_list = array_keys($follow_list);
    $mention_collection
        = $message_logic->getMentionByFollowIdList($follow_id_list);

    foreach ($follow_list as $follow_id => $follow_data) {
        $follow = [];
        $follow['follow_id'] = $follow_id;
        foreach ($assign_follow_map as $view_name => $data_name) {
            $follow[$view_name] =& $follow_data[$data_name];
        }
        // attached files
        $file_list =& $follow_data['files'];
        if (count($file_list) > 0) {
            $file_info = _grn_message_attached_files($file_list);
            $follow['attach_files'] = $file_info['files'];
            $follow['del_file_num'] = $file_info['del_file_num'];
        }
        //if comment by Rich editor
        if ($enable_follow_autolink && isset($follow['data'])
            && isset($follow['format_type'])
            && $follow['format_type'] != 0
        ) {
            $follow['data'] = makeAutoLinkForHtmlEditor($follow['data'],
                $mask_symbol, $baseUrl);
        }

        //GRN35-34
        $follow['full_url'] = cb_get_full_url('message/view', [
            'cid'       => $category_id,
            'rid'       => $relation_id,
            'mid'       => $message_id,
            'follow_id' => $follow_data['id']
        ]);
        $follow['full_url'] = $follow['full_url'] . '#follow';
        //GRN35-34
        $message_for_view['follow'][$follow_id] = $follow;

        $mention_exists = count($mention_collection) > 0
                          && array_key_exists($follow_id, $mention_collection);
        if ($mention_exists) {
            $follow['mention'] = $mention_collection[$follow_id];
            $mention_count[$follow_id] = $follow['mention']->count();
        }

        $uids[] = $follow['creator_uid'];
    }
    $t->assign('enable_follow_autolink', $enable_follow_autolink);
    $t->assign('mention_count', $mention_count);
}

// star app is on
require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$use_star = $star_logic->isActive();
$use_star = $use_star
            && ($folder_info['folder_type'] != GRN_MESSAGE_GARBAGEFOLDER);
$t->assign('use_star', $use_star);
if ($use_star) {
    $t->assign('star_infos',
        $star_logic->getStatusByIDs($user, GRN_MESSAGE_MODULEID,
            [$message['message_id']]));
}
// end star

// for favour
$favour_service = new FavourService();
$is_favour_active = $favour_service->isFavourAppActive();
$is_favour_on = $favour_service->isAppAllowedRespond('message');
if ($is_favour_active && $is_favour_on) {
    $params = [
        'cid' => $category_id,
        'rid' => $relation_id,
        'mid' => $message_id
    ];
    $favour_info = $favour_service->constructFavourInfo(
        GRN_Message_Application::GRN_MESSAGE_MODULE_ID,
        GRN_Message_Application::FAVOUR_MESSAGE_BODY,
        $message_id,
        $user->getOID(),
        $params
    );
    $t->assign('favour_info', $favour_info);

    if (isset($message_for_view['follow'])
        && count($message_for_view['follow']) > 0
    ) {
        $follow_list = &$message_for_view['follow'];

        $params_for_follow = [
            'cid' => $category_id,
            'rid' => $relation_id,
            'mid' => $message_id
        ];
        $favours_list = $favour_service->getFavourersCount($user->getOID(),
            GRN_Message_Application::GRN_MESSAGE_MODULE_ID,
            GRN_Message_Application::FAVOUR_MESSAGE_COMMENT,
            array_keys($follow_list)
        );

        foreach ($follow_list as $follow_id => $follow_data) {
            if (isset($favours_list[$follow_id])) {
                $favour_info = $favours_list[$follow_id];
            } else {
                $favour_info = ['type_value' => $follow_id];
            }
            $favour_info['module_id']
                = GRN_Message_Application::GRN_MESSAGE_MODULE_ID;
            $favour_info['sub_module_id']
                = GRN_Message_Application::GRN_MESSAGE_SUB_MODULE_ID;
            $favour_info['type']
                = GRN_Message_Application::FAVOUR_MESSAGE_COMMENT;
            $params_for_follow['follow_id'] = $follow_data['id'];
            $favour_info['params'] = $params_for_follow;
            $follow_list[$follow_id]['favour_info'] = $favour_info;
        }
    }
}
$t->assign('is_favour_active', $is_favour_active);
$t->assign('message', $message_for_view);
$t->assign('is_favour_on', $is_favour_on);

$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $user,
    "message");

// User icon setting
$imageIcon = GRN_ControllerUtil::getUserIconFormat($user);
$t->assign('imageIcon', $imageIcon);

// for user image icon
if ($imageIcon) {
    $users_info = GRN_ControllerUtil::addPhotoUrlForUsersInfo($users_info,
        GRN_ControllerUtil::getUserProfilePhotoSmallSize());
    $t->assign('iconSize', GRN_ControllerUtil::ICON_SIZE_SMALL);
}
$t->assign('users_info', $users_info);

$t->assign('regard_operator', $is_operator);
$t->assign('is_folder_subscribed', $folder_info['subscription_flag']);
$t->assign('folder_type', $folder_info['folder_type']);

require_once('fw/ui.csp');
$browser = cb_ui_get_browser();
$t->assign('browser', $browser);

// use garbage box or not
require_once('message/personal_logic.csp');
$personal_logic = GRN_Message_PersonalLogic::getInstance();
$use_garbage = $personal_logic->getUseGarbageBoxAttribute($user);
$no_confirm = false;

//delete
$delete_info = [
    'title'      => grn_get_page_display_name('message/delete'),
    'page'       => 'message/delete.tpl',
    'no_confirm' => $no_confirm,
    'data'       => [
        'folder_type' => $folder_info['folder_type'],
        'use_garbage' => $use_garbage,
        'message'     => $message_for_view,
        'is_operator' => $is_operator,
        'category_id' => $category_id,
        'rid'         => $relation_id,
        'mid'         => $message_id,
    ],
    'handler'    => 'lnk_delete',
];
$t->assign('delete_info', $delete_info);
//delete follow
$handler = [];
if (array_key_exists('follow', $message_for_view)) {
    foreach ($message_for_view['follow'] as $follow) {
        $handler[] = 'lnk_delete_follow_' . $follow['follow_id'];
    }
}

$delete_follow = [
    'title'         => grn_get_page_display_name('message/follow_delete'),
    'page'          => 'message/follow_delete.tpl',
    'no_confirm'    => false,
    'data'          => [
        'cid' => $category_id,
        'rid' => $relation_id,
        'mid' => $message_id
    ],
    'handler'       => $handler,
    'before_delete' => [
        'on_before_delete_follow',
        [
            'follow_prefix' => 'follow_content_',
            'follow_id'     => 'fid'
        ]
    ],
];
$t->assign('delete_follow', $delete_follow);

$t->assign('message_id', $message_id);
$t->assign('mention_params', ['message_id' => $message_id]);

require_once('fw/plugin.csp');
$mention_access_plugin_encoded = \CB_PluginLoader::encodeParam(
    [
        'name'   => 'message',
        'params' => [
            'app_id'      => 'message',
            'message_id'  => $message_id,
            'target'      => [MemberLogic::TYPE_USER],
            'relation_id' => $relation_id,
        ]
    ]);
$t->assign('mention_access_plugin_encoded', $mention_access_plugin_encoded);

$offset_member = GrnGenericScreenBase::DEFAULT_OFFSET_DISPLAY_MEMBER;
$max_member = GrnGenericScreenBase::MAX_NUM_DISPLAY_MEMBER;
$mention_list
    = MentionController::createMemberListsForView($mention_collection,
    $offset_member, $max_member);
$t->assign('mention_list', $mention_list);

//generate upload ticket
include('grn/_upload_prepend.csp');

//assign data for Space menu
require_once('space/GrnSpaceApplication.csp');
require_once('message/view_utils.csp');
$t->assign("space_createLinkData", [
    "isAvailable"            => AppAccess::isAppAvailableInternalAccess(GrnSpaceApplication::GRN_SPACE_APPLICATION_ID),
    "isAvailableForExternal" => AppAccess::isAppAvailableExternalAccess(GrnSpaceApplication::GRN_SPACE_APPLICATION_ID)
]);

//check mail account for transfer message to mail
include('./_for_transfer_to_mail.csp');

// Smarty実行
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");
