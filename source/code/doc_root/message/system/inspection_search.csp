<?php

use grn\grn\MemberLogic;

require_once('grn/smarty.csp');
$t = new GRN_Smarty();

// site position
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
$t->assign('site_position', [
    [
        'page' => '',
        'name' => $page_title
    ]
]);

// session
require_once('grn/controller.csp');
$utility = new GRN_ControllerUtil();
$session = $utility->getSession();

// parameters
$params = [
    'user',
    'sUID',
    'startyear',
    'startmonth',
    'startday',
    'endyear',
    'endmonth',
    'endday',
    'search_keys',
    'search_text',
    'CGID'
];

$sf = 0;
if (array_key_exists('sf', $G_INPUT) && $G_INPUT['sf']) {
    // session flag
    $sf = $G_INPUT['sf'];

    foreach ($params as $param) {
        if ( ! is_null($value = $session->get($param))) {
            $G_INPUT[$param] = $value;
        }
    }
}

// uum
$uum = $G_container_base->getInstance('uum');
// login user
$login_user = $uum->getLoginUser();
$login_user_id = $login_user->getOID();

// save history select user and group
require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$input_keys = array_keys($G_INPUT);
foreach ($input_keys as $input_key) {
    if (preg_match('/^selected_users_.*$/', $input_key)) {
        $input_value = $G_INPUT[$input_key];
        if ($input_value) {
            $input_values = explode(':', $input_value);
            $uum_util->selectUsers($login_user, $input_values);
        }
    }
}

// user
$user_for_view = ['all' => true, 'selected' => false];
if (array_key_exists('user', $G_INPUT) && $G_INPUT['user'] === '1') {
    $user_for_view = ['all' => false, 'selected' => true];
    require_once('grn/multi_select_utility.csp');
    $G_INPUT = grn_deploy_selected_users('selected_users_sUID', 'sUID',
        $G_INPUT);
}
$t->assign('user', $user_for_view);

// initialize users
$user_list = [];
if (array_key_exists('sUID', $G_INPUT) && is_array($G_INPUT['sUID'])) {
    $user_ids = $G_INPUT['sUID'];
    require_once("grn/controller.csp");
    $initialize_users_for_view = [];

    foreach ($user_ids as $key => $user_id) {
        $user = $uum->getUser($user_id);
        if ( ! $user) {
            unset($user_ids[$key]);
            continue;
        }

        if ($user_for_view['selected']) {
            $user_list[] = $user_id;
        }
    }

    $initialize_users_for_view = MemberLogic::getInstance()
                                            ->getDisplayUsersByUserIds($user_ids);
    $t->assign('initialize_users', $initialize_users_for_view);
}

// term
require_once('fw/date.csp');
if (array_key_exists('startyear', $G_INPUT)) {
    // start date
    $start = new CB_DateTime();
    $start->year = $G_INPUT['startyear'];
    $start->month = $G_INPUT['startmonth'];
    $start->day = $G_INPUT['startday'];
    $start_ts = new CB_TimeStampEx();
    $start_ts->setDateTime($start);

    // end date
    $end = new CB_DateTime();
    $end->year = $G_INPUT['endyear'];
    $end->month = $G_INPUT['endmonth'];
    $end->day = $G_INPUT['endday'];
    $end->hour = 23;
    $end->minute = 59;
    $end->second = 59;
    $end_ts = new CB_TimeStampEx();
    $end_ts->setDateTime($end);
} else {
    // start date
    $start_ts = new CB_TimeStampEx();
    $start_ts->unix_ts = time();
    $start_dt = $start_ts->getDateTime();
    $start_dt->moveMonths(-3);
    $start_ts->setDateTime($start_dt);

    // end data
    $end_ts = new CB_TimeStamp();
    $end_ts->unix_ts = time();
}
$t->assign('start', $start_ts->unix_ts);
$t->assign('end', $end_ts->unix_ts);

if ($start_ts->unix_ts > $end_ts->unix_ts) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_INVALID_TERM_PARAM,
        ['app_name' => $G_message_name]);
}

// item list
$search_keys_for_view = [
    'subject'   => false,
    'data'      => false,
    'sender'    => false,
    'addressee' => false,
    'follow'    => false
];
$item_list = [];
if ( ! array_key_exists('search_text', $G_INPUT)) {
    foreach ($search_keys_for_view as $key => $dummy) {
        $search_keys_for_view[$key] = true;
        $item_list[] = $key;
    }

} elseif (array_key_exists('search_keys', $G_INPUT)) {
    foreach ($search_keys_for_view as $key => $dummy) {
        if (in_array($key, $G_INPUT['search_keys'])) {
            $search_keys_for_view[$key] = true;
            $item_list[] = $key;
        }
    }
}
$t->assign('search_keys', $search_keys_for_view);

// keywords
$search_text_for_view = '';
if (array_key_exists('search_text', $G_INPUT)) {
    require_once('fw/string_util.csp');
    $search_text_for_view = cb_trim($G_INPUT['search_text']);
}
$t->assign('search_text', $search_text_for_view);


// user config
require_once('grn/ui.csp');
$cm = GRN_UIConfigManager::getInstance();
$user_config = $cm->getUserConfig($login_user);

$t->assign('truncate_cols', $user_config->getTruncateWidth());

// logic instance
require_once('message/inspection.csp');
$inspection = new GRN_Message_Inspection();

// navi
$offset = $utility->getNaviStartPosition();
$limit = $user_config->getListMax();
$utility->setNaviStartPosition($offset);

if ( ! array_key_exists('search_text', $G_INPUT)
     || $G_INPUT['search_text'] == ''
     || count($item_list) === 0
     || ($user_for_view['selected'] && count($user_list) === 0)
) {
    $total = 0;
} else {
    $count = $limit;
    $result = $inspection->search_fast($search_text_for_view, $user_list,
        $start_ts, $end_ts, $item_list, $offset, $count);
    $total = 0;
    if ($result !== false) {
        $total = $result['total'];
        unset($result['total']);
        if ($total > 0) {
            $total -= $result['k'];
            unset($result['k']);

            //start GRB-15046
            $users_id = [];
            foreach ($result as $msg) {
                $users_id[] = $msg['creator_id'];
            }
            require_once("grn/controller.csp");
            $users_info
                = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
                $login_user);
            $t->assign('users_info', $users_info);
            //end GRB-15046

            $t->assign('search_item', $result);
        }
    }
}

$navi_for_view = $utility->makeNaviInformation($offset, $limit, $total,
    ['sf' => '1']);
$t->assign('navi', $navi_for_view);

// assign parameter to session
foreach ($params as $param) {
    if (array_key_exists($param, $G_INPUT)) {
        $session->set($param, $G_INPUT[$param]);
    }
}

$t->assign('name_width', $user_config->getNameWidth());

//logging 25
require_once('message/inspection.csp');
$logger = GRN_Message_Logger_25::getInstance();
$u_list = [];
foreach ($user_list as $value) {
    $temp = explode(':', $value);
    $u_list[] = $temp[0];
}

$params = [
    'search_text' => $search_text_for_view,
    'start'       => $start_ts->unix_ts,
    'end'         => $end_ts->unix_ts,
    'item_list_'  => $item_list,
    'user_list_'  => $u_list
];
$logger->info('inspection_search', 'message', $params);

$t->display(cb_get_pagename() . '.tpl');
