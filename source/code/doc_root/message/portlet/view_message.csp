<?php
require_once('portal/error_code.csp');
if ( ! isset($portlet)) {
    cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ACCESS);
}

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

//Get Smarty Instance
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------

$portlet_settings = [];
if (array_key_exists('settings', $portlet)) {
    $portlet_settings = $portlet['settings'];
}
$settings_for_view = [
    'font_size' => 'normal',
    'sender'    => true,
    'time'      => true,
    'remarks'   => true,
    'order'     => 'whatsnew',
    'rows'      => 5
];

require_once('message/folder_logic.csp');
$folder_logic = new GRN_Message_FolderLogic();

$category_id = '';
if (array_key_exists('folder', $portlet_settings)) {
    $category_id = $portlet_settings['folder'];
}
if ($category_id == '') {
    $category_id = $folder_logic->getSpecificFolderID($user,
        GRN_MESSAGE_RECEIVINGFOLDER);
    if ( ! $category_id) {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
    }
} else {
    require_once('grn/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Portal_Application $app_portal */
    $app_portal = $app_locator->getInstance('portal');
    if ($app_portal->isSystemPortal($portlet['pid'])) {
        $category_id = $folder_logic->getFolderIDBySpecificFolderID($user,
            $category_id);
        if ($category_id === false) // specified folder doesn't exist.
        {
            // choose an inbox
            $category_id = $folder_logic->getSpecificFolderID($user,
                GRN_MESSAGE_RECEIVINGFOLDER);
        }
    }
}
$t->assign('cid', $category_id);

$folder_info = $folder_logic->getFolderInfo($user,
    $category_id);
$settings_for_view['folder'] = $category_id;
$settings_for_view['folder_name'] = ! $folder_info ? null
    : $folder_info['folder_name'];
$settings_for_view['folder_type'] = ! $folder_info ? null
    : $folder_info['folder_type'];

// personal config
require_once('grn/ui.csp');
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$cm = GRN_UIConfigManager::getInstance();
$config = $cm->getUserConfig($login);
$t->assign('subject_width', $config->getSubjectWidth());
$t->assign('name_width', $config->getNameWidth());

// message instance
require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();

// get new messages
$message_logic->receiveMessages($user);

$has_messages_for_view = $message_logic->getTotalMessageNum($user,
    $category_id);

if ($has_messages_for_view > 0) {
    $t->assign('has_messages', true);

    // folder properties
    $t->assign('category',
        ['is_subscribed' => $folder_info['subscription_flag']]);

    if (is_array($portlet_settings)) {
        foreach ($portlet_settings as $key => $value) {
            $settings_for_view[$key] = $value;
        }
    }

    $sort = $settings_for_view['order'] == 'whatsnew' ? 'last_mtime' : 'ctime';

    //  送信ユーザーが削除されているかはあとで確認するので、ここではチェックしない
    $message_list = $message_logic->getMessageList($user, $category_id,
        $folder_info['folder_type'],
        $sort, true, 0,
        $settings_for_view['rows'], $sort, false);

    $assign_messages_map = [
        'mid'               => 'message_id',
        'subject'           => 'subject',
        'creator_id'        => 'user_id',
        'creator_name'      => 'user_name',
        'need_confirm'      => 'need_confirm',
        'confirmed'         => 'confirmed',
        'type'              => 'message_type',
        'attach_file'       => 'has_files',
        'is_subscribed'     => 'is_subscribed',
        'attach_files_size' => 'file_size',
    ];

    $user_id = $user->getOID();

    require_once('message/file.csp');
    $fm = new GRN_Message_FileManager();

    $uids = [];
    $messages_for_view = [];
    $messages_for_view['message'] = [];
    $star_unique_ids = [];
    foreach ($message_list as $rid => $message) {
        $messages_for_view['message'][$rid] = [];
        foreach ($assign_messages_map as $view_name => $data_name) {
            $messages_for_view['message'][$rid][$view_name]
                = $message[$data_name];
        }

        // user is sender
        // need for deleting messages
        if ($user_id == $message['creator_id']) {
            $messages_for_view['message'][$rid]['is_sender'] = 1;
        } else {
            $messages_for_view['message'][$rid]['is_sender'] = 0;
        }

        $messages_for_view['message'][$rid]['time'] = $message['date'];

        if ($message['status'] == 0)      // unread
        {
            $messages_for_view['message'][$rid]['unread'] = 1;
            $messages_for_view['message'][$rid]['update'] = $message['touched']
                ? 1 : 0;
        } else {
            if ($message['status'] == 1) // update
            {
                $messages_for_view['message'][$rid]['update'] = 1;
            }
        }
        $uids[] = $message['user_id'];

        // star `unique id` list
        $star_unique_ids[$rid] = $message['message_id'];
    }

    $t->assign('messages', $messages_for_view);

    require_once('star/logic.csp');
    $star_logic = GRN_Star_StarLogic::getInstance();
    $t->assign('use_star', ($use_star = $star_logic->isActive()));
    if ($use_star) {
        $star_infos = $star_logic->getStatusByIDs($user, GRN_MESSAGE_MODULEID,
            $star_unique_ids);
        $t->assign('star_infos', $star_infos);
    }
    require_once("grn/controller.csp");
    $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $user,
        "message");
    $t->assign('users_info', $users_info);

    // delete messages automatically
    require_once('message/personal_logic.csp');
    $personal_logic = GRN_Message_PersonalLogic::getInstance();
    $personal_logic->autoDeleteMessages($user);
}
$t->assign('settings', $settings_for_view);

//Assign include_php Parameter
$t->assign('portlet', $portlet);

//Set Page Title
if ($portlet['title'] === '') {
    require_once('grn/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    $app_name = $app_locator->getName('message');
    $page_title = cb_plain_msg('grn.message', 'portlet_view_message',
        ['app_name' => $app_name]);
} else {
    $page_title = $portlet['title'];
}
$t->assign('page_title', $page_title);
$t->assign('display_name_mode', $portlet['display_name_mode']);

//Ignore Licence Warnning
$t->skipWarning();

//Display Smarty Template
$t->display("message/portlet/view_message.tpl");


