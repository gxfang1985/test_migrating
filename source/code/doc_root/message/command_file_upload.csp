<?php

use grn\fts\Application as FtsApplication;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    $category_id = @ $G_INPUT['cid'];
    $relation_id = @ $G_INPUT['rid'];
    $message_id = @ $G_INPUT['mid'];
    $file_id = @ $G_INPUT['rfid'];

    foreach ([$category_id, $relation_id, $message_id, $file_id] as $id) {
        if ($id == '' || ! ctype_digit($id)) {
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_FILE_NOT_FOUND,
                null,
                ['app_name' => $G_message_name]);
        }
    }

    $frm = 'vw';
    if (array_key_exists('frm', $G_INPUT)
        && strcmp($G_INPUT['frm'], 'ac') === 0
    ) {
        $frm = $G_INPUT['frm'];
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getLoginUser();

    if ( ! $user) {
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    require_once('message/file.csp');
    $fm = new GRN_Message_FileManager();
    $file = $fm->getFile($file_id);
    // ファイルの作成者あるいは許可がある人が変更/削除できるようにする
    require_once('message/message_logic.csp');
    $message_logic = new GRN_Message_Logic();
    $message_files = $message_logic->getMessageFiles($message_id);
    $addressee_list = $message_logic->getAddressees($G_message_login,
        $message_id);
    $creator_id = $message_logic->getMessageCreatorId($message_id);
    $is_operator = _grn_message_regard_operator($addressee_list,
        $creator_id);
    if ( ! array_key_exists($file_id, $message_files)) {
        $is_operator = false;
    }
    if ( ! $file || ! ($file->isCreator($G_message_login) || $is_operator)) {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_FILE_NOT_FOUND,
            null,
            ['app_name' => $G_message_name]);
    }

    if (array_key_exists('cancel', $G_INPUT)) {
        $lock = $file->getLockObject();
        $lock->releaseLock();

        cb_redirect('message/file_view',
            [
                'cid'  => $category_id,
                'rid'  => $relation_id,
                'mid'  => $message_id,
                'rfid' => $file_id,
                'frm'  => $frm,
            ]
        );
    }

    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    $target_name = '';
    if (array_key_exists('fn', $G_INPUT)) {
        $target_name = $G_INPUT['fn'];
    }

    require_once('grn/upload.csp');
    $files = GRN_UploadFile::getUploadedFiles(@$G_INPUT['upload_ticket'],
        @$G_INPUT['upload_fileids'], true);

    if ((is_array($files) && count($files) == 1)) {
        $uploaded_file = array_pop($files);

        if ( ! array_key_exists('cancel', $G_INPUT)) {
            $file->update($user, $uploaded_file, @ $G_INPUT['comment']);
            if (FtsApplication::isAvailable()) {
                $message = $message_logic->getMessageInfo($user, $relation_id,
                    $message_id);
                // 下書きは更新しない。
                if (isset($message['message_type'])
                    && $message['message_type'] !== GRN_MESSAGE_TYPE_DRAFT
                ) {
                    require_once('message/file.csp');
                    $fileManager = new GRN_Message_FileManager();
                    $fileManager->updateFileIndexForFts($file, $message_id);
                }
            }
        }

        $lock = $file->getLockObject();
        $lock->releaseLock();

        cb_redirect('message/file_view',
            [
                'cid'  => $category_id,
                'rid'  => $relation_id,
                'mid'  => $message_id,
                'rfid' => $file_id,
                'frm'  => $frm,
            ]
        );
    } else {
        $t->assign('err_no_file', true);
        // if error, show the source form
        $t->setPageInfo('message/file_upload');
        $t->assign('form_name', $target_name);
        require('_file_upload.csp');
        $t->assign('comment', @ $G_INPUT['comment']);

        $t->display('message/file_upload.tpl');
    }

}
