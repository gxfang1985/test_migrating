<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    $cmd = @ $G_INPUT['cmd'];
    $category_id = @ $G_INPUT['cid'];

    if ($cmd == '' || $category_id == '') {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getLoginUser();

    if ( ! $user) {
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    $relations = [];
    $messages = [];
    $is_senders = [];

    if (array_key_exists('ids', $G_INPUT)) {
        $ids = $G_INPUT['ids'];
        if (is_array($ids)) {
            foreach ($ids as $value) {
                list($relations[], $messages[], $is_senders[]) = explode(",",
                    $value);
            }
        }
    }
    $message_num = count($relations);

    require_once('message/message_logic.csp');
    $message_logic = new GRN_Message_Logic();

    switch ($cmd) {
        case 'move':
            require_once('message/personal_logic.csp');
            $personal_logic = GRN_Message_PersonalLogic::getInstance();
            $use_garbagebox = $personal_logic->getUseGarbageBoxAttribute($user);

            if (@ $G_INPUT['delete_complete'] == '') {
                if ($use_garbagebox == '1') {
                    $ret = $message_logic->moveMessages2GarbageBox($user,
                        $category_id,
                        $relations);
                    if ( ! $ret) {
                        require_once('message/error_code.csp');
                        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_MOVED,
                            ['app_name' => $G_message_name],
                            ['app_name' => $G_message_name],
                            ['app_name' => $G_message_name]);
                    }
                } else {
                    grn_message_delete_messages($message_logic, $user,
                        $message_num,
                        $relations, $messages);
                }
            } else {
                $move_rids = [];
                $delete_mids = [];
                for ($i = 0; $i < $message_num; $i++) {
                    if ($is_senders[$i] == '0' || $is_senders[$i] == '') {
                        $move_rids[] = $relations[$i];
                    } else {
                        $delete_mids[] = $messages[$i];
                    }
                }

                if ($use_garbagebox == '1') {
                    $ret = $message_logic->moveMessages2GarbageBox($user,
                        $category_id,
                        $move_rids);
                    if ( ! $ret) {
                        require_once('message/error_code.csp');
                        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_DELETED,
                            ['app_name' => $G_message_name],
                            ['app_name' => $G_message_name],
                            ['app_name' => $G_message_name]);
                    }
                } else {
                    grn_message_delete_messages($message_logic, $user,
                        $message_num,
                        $relations, $messages);
                }
                $ret = $message_logic->deleteMessageData($user, $delete_mids);
                if ( ! $ret) {
                    require_once('message/error_code.csp');
                    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_DELETED,
                        ['app_name' => $G_message_name],
                        ['app_name' => $G_message_name],
                        ['app_name' => $G_message_name]);
                }
            }
            break;
        case 'delete':
            grn_message_delete_messages($message_logic, $user, $message_num,
                $relations,
                $messages);
            break;
    }

    cb_redirect('message/index', ['cid' => $category_id]);
}

function grn_message_delete_messages(
    $message_logic,
    $user,
    $message_num,
    $relations,
    $messages
) {
    global $G_message_name;
    $message_list = [];
    for ($i = 0; $i < $message_num; $i++) {
        $message_list[$relations[$i]] = $messages[$i];
    }
    $ret = $message_logic->deleteMessages($user, $message_list);
    if ( ! $ret) {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_MOVED,
            ['app_name' => $G_message_name],
            ['app_name' => $G_message_name],
            ['app_name' => $G_message_name]);
    }
}
