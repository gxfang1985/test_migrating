<?php

use grn\grn\MemberLogic;

$category_id = @ $G_INPUT['cid'];
$relation_id = @ $G_INPUT['rid'];
$message_id = @ $G_INPUT['mid'];

if ($category_id == '' || $relation_id == '' || $message_id == '') {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

$t->assign('category_id', $category_id);
$t->assign('relation_id', $relation_id);
$t->assign('message_id', $message_id);

// page title
$page_title
    = grn_get_current_page_display_name(['app_name' => $G_message_name]);
$t->assign('page_title', $page_title);

// site position
$page_index = 'message/index';
$page_inbox = 'message/inbox';
$page_outbox = 'message/outbox';
$page_draftbox = 'message/draftbox';
$page_garbagebox = 'message/garbagebox';
$page_category_list = 'message/category_list';

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

$user_id = $user->getOID();

require_once('message/folder_logic.csp');
$folder_logic = new GRN_Message_FolderLogic();
$folder_info = $folder_logic->getFolderInfo($user, $category_id);

if ( ! $folder_info) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
}

$sf = 0;
switch ($folder_info['folder_type']) {
    case GRN_MESSAGE_RECEIVINGFOLDER:
        $page_folder = $page_inbox;
        $sf = 1;
        break;
    case GRN_MESSAGE_SENDINGFOLDER:
        $page_folder = $page_outbox;
        break;
    case GRN_MESSAGE_DRAFTFOLDER:
        $page_folder = $page_draftbox;
        break;
    case GRN_MESSAGE_GARBAGEFOLDER:
        $page_folder = $page_garbagebox;
        break;
    default:
        $page_folder = $page_category_list;
}

$t->assign(
    'site_position',
    [
        [
            'page' => $page_index,
            'name' => grn_get_page_display_name($page_index),
            'sf'   => $sf
        ],
        [
            'page' => $page_index,
            'name' => grn_get_page_display_name($page_folder),
            'cid'  => $category_id,
            'sf'   => 1
        ],
        [
            'page' => 'message/view',
            'name' => grn_get_page_display_name('message/view',
                ['app_name' => $G_message_name]),
            'cid'  => $category_id,
            'rid'  => $relation_id,
            'mid'  => $message_id
        ],
        [
            'page' => '',
            'name' => $page_title
        ]
    ]
);

require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();
$message_for_view = [];

$addressees = $message_logic->getAddressees($user, $message_id, true);

if ($addressees === false) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$uids = [];
foreach ($addressees as $addressee) {
    $uids[] = $addressee['id'];
}
require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $user);

// 宛先ユーザと管理者ユーザを配列に入れる
$addressee_users_for_view = [];
$addressee_users_for_filter_view = [];
$operation_users_for_filter_view = [];
foreach ($addressees as $addressee) {
    if ($addressee['id'] != '' && $addressee['dtime']->unix_ts == 0
        && $addressee['delete_flag'] != 1
    ) {
        $addressee_users_for_view[] = $addressee['id'];
        if ($addressee['is_operator']) {
            $operation_users_for_filter_view[] = $addressee['id'];
        }
    }
}

$creator_id = $message_logic->getMessageCreatorId($message_id);
require_once("message/view_utils.csp");
$t->assign('operator_open',
    GRN_Message_ViewUtils::is_operator_open($operation_users_for_filter_view,
        $creator_id));

$addressee_users_for_view = MemberLogic::getInstance()
                                       ->getDisplayUsersByUserIds($addressee_users_for_view);
$t->assign('addressee_users', $addressee_users_for_view);

$addressee_users_for_filter_view = $addressee_users_for_view;
$t->assign('addressee_users_filter', $addressee_users_for_filter_view);

$operation_users_for_filter_view = MemberLogic::getInstance()
                                              ->getDisplayUsersByUserIds($operation_users_for_filter_view);
$t->assign('operation_users', $operation_users_for_filter_view);

$t->assign('message', $message_for_view);

$t->assign('plugin', [
    'name'   => 'common',
    'params' => [
        'action'       => null,
        'session_name' => cb_get_pagename(),
        'app_id'       => 'message'
    ]
]);

