<?php

require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'message/cellular/change';
SmartyValidate::register_form($form_name);
$smarty->assign('form_name', $form_name);

// 携帯用セッションInstance（$G_cellular_session）
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$G_cellular_session = $session_manager->getSession('cellular');
$sess_message = $G_cellular_session->get('sess_message');

if ( ! @$sess_message['change']) {
    // redirect
    grn_cellular_switch_page($G_pagepath . "/list",
        ['cid' => @$G_INPUT['cid']]);
}


if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'GET') == 0) {
    //GET

    if (isset($G_INPUT['mid'])) {
        //参加者追加処理
        if ( ! array_key_exists($G_INPUT['mid'], $sess_message['users'])) {
            $user_id = (int)$G_INPUT['mid'];
            $user = $G_uum->getUser($user_id);
            if ($user) {
                $sess_message['users'][$user_id] = $user->get('display_name');
            }

            $sess_message['edit_users'] = (count($sess_message['users']) <= 30
                ? true : false);
        }
    }

    $G_cellular_session->set('sess_message', $sess_message);

    // redirect
    grn_cellular_switch_page($G_pagepath . "/change", [
            'cid' => @$G_INPUT['cid'],
            'rid' => $sess_message['rid'],
            'mid' => $sess_message['mid']
        ]
    );
} else {
    //POST

    // validate after a POST
    if (array_key_exists('add_user', $G_INPUT)) {
        $G_INPUT['address'] = $G_INPUT['add_user'];
    }

    $sess_message['title'] = @$G_INPUT['title'];
    if (@$G_INPUT['edit_info']) {
        $sess_message['info'] = @$G_INPUT['info'];
    }
    $sess_message['confirm'] = @$G_INPUT['confirm'];

    if ( ! SmartyValidate::is_valid($G_INPUT, $form_name)) {
        // validate error
        $G_cellular_session->set('sess_message', $sess_message);
        // redirect
        grn_cellular_switch_page($G_pagepath . "/change", [
                'cid' => @$G_INPUT['cid'],
                'rid' => $sess_message['rid'],
                'mid' => $sess_message['mid']
            ]
        );
    }

    if (array_key_exists('add_user', $G_INPUT)) {
        //参加者追加ページへ
        $G_cellular_session->set('sess_message', $sess_message);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_user",
            ['cid' => @$G_INPUT['cid']]);
    } elseif (array_key_exists('delete_user', $G_INPUT)) {
        //参加者削除
        $delete_users = array_keys($G_INPUT['delete_user']);
        foreach ($delete_users as $_id) {
            unset($sess_message['users'][$_id]);
        }
        $G_cellular_session->set('sess_message', $sess_message);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/change", [
                'cid' => @$G_INPUT['cid'],
                'rid' => $sess_message['rid'],
                'mid' => $sess_message['mid']
            ]
        );
    } else {
        $relation_id = $sess_message['rid'];
        $message_id = $sess_message['mid'];

        require_once('message/message_logic.csp');
        $message_logic = new GRN_Message_Logic();

        $my_message = $message_logic->hasPrivilege($G_login_user, $message_id,
            $relation_id);
        if ($my_message === false) {
            require_once('grn/application.csp');
            $locator = GRN_ApplicationLocator::instance();
            $app_name = $locator->getName('message');

            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $app_name],
                ['app_name' => $app_name],
                ['app_name' => $app_name]);
        }

        // 宛先変更
        // メッセージのオーナが宛先に存在しているか
        $current_addressees = $message_logic->getAddressees($G_login_user,
            $message_id, true);
        $owner = $message_logic->getMessageOwner($message_id);
        if ( ! $owner) {
            require_once('grn/error_code.csp');
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        $owner_id = $owner->getOID();
        $include_owner = false;
        foreach ($current_addressees as $current_addressee) {
            if ($current_addressee['id'] == $owner_id) {
                $include_owner = true;
                break;
            }
        }
        if ($include_owner) {
            if ( ! array_key_exists($owner_id, $sess_message['users'])) {
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_OWNER_NOT_FOUND);
            }
        }

        // create addressees data
        $addressees = [];
        $creator_id = $message_logic->getMessageCreatorId($message_id);
        if (count($sess_message['users'])) {
            $key = 1;
            foreach ($sess_message['users'] as $_id => $_name) {
                $addressee = [];
                $addressee['order'] = $key++;

                //As a default, only creator is an operator
                if ($creator_id == $_id) {
                    $addressee['addressee_is_operator'] = true;
                } else {
                    $addressee['addressee_is_operator'] = false;
                }
                //inherit is_operator if the addressee is not added
                foreach ($current_addressees as $current_addressee) {
                    if ($current_addressee['id'] == $_id
                        && array_key_exists('is_operator', $current_addressee)
                    ) {
                        $addressee['addressee_is_operator']
                            = $current_addressee['is_operator'];
                    }
                }

                $addressees[$_id] = $addressee;
            }
        }

        $ret = $message_logic->modifyAddressees($G_login_user, $message_id,
            $addressees, $sess_message);

        // 内容変更
        $files = [];
        $ret = $message_logic->modifyMessage(
            $G_login_user,
            $message_id,
            $sess_message['title'],
            $sess_message['info'],
            0,
            $files,
            true
        );

        // 後処理
        $G_cellular_session->unset_by('sess_message');
        SmartyValidate::unregister_form($form_name);

        // look1 に redirect
        $my_message = $message_logic->hasPrivilege($G_login_user, $message_id,
            $relation_id);
        if ($my_message === false) {
            require_once('grn/application.csp');
            $locator = GRN_ApplicationLocator::instance();
            $app_name = $locator->getName('message');
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $app_name],
                ['app_name' => $app_name],
                ['app_name' => $app_name]);
        }
        grn_cellular_redirect($G_pagepath . "/look1", [
            'cid' => $my_message['cid'],
            'rid' => $my_message['rid'],
            'mid' => $my_message['mid']
        ]);
    }
}

