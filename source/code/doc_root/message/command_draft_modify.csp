<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    require_once('_command_send_initialize.csp');

    require_once('message/message_logic.csp');

    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();
    $t->assign('tmp_key', $tmp_key);

    // Validation check
    $target_name = '';
    if (array_key_exists('fn', $G_INPUT)) {
        $target_name = $G_INPUT['fn'];
    }
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($target_name);

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {

        $operator_set = array_key_exists('operator-set', $G_INPUT)
                        && $G_INPUT['operator-set'] ? 1 : 0;

        $operators = @ $G_INPUT['sUID_o'];
        if ( ! is_array($operators)) {
            $operators = [];
        }
        $operators = grn_message_form_operators($operators, $operator_set);

        require('_command_send.csp');

        // create addressees data
        $addressees = [];
        if ($is_draft === false) {
            $addressees = grn_message_sUIDs2addressees($sUIDs, $operators);
        }

        $category_id = @ $G_INPUT['cid'];
        $relation_id = @ $G_INPUT['rid'];
        $message_id = @ $G_INPUT['mid'];

        if ($category_id == '' || $relation_id == '' || $message_id == '') {
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                ['app_name' => $G_message_name],
                ['app_name' => $G_message_name],
                ['app_name' => $G_message_name]);
        }

        $message_logic = new GRN_Message_Logic();

        switch ($cmd) {
            case 'send':
                require_once('grn/controller.csp');
                $files = getFiles($target_name);
                $message_row = $message_logic->sendMessage($user, $message,
                    $addressees, $files);
                if ($message_row === false) {
                    require_once('message/error_code.csp');
                    cb_throw_error(E_GRN_MESSAGE_FAIL_TO_SEND_MESSAGE,
                        ['app_name' => $G_message_name],
                        ['app_name' => $G_message_name]);
                }

                // delete a draft message
                $message_row = $message_logic->deleteDraft($user, $message_id);
                if ($message_row === false) {
                    require_once('message/error_code.csp');
                    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                        ['app_name' => $G_message_name],
                        ['app_name' => $G_message_name],
                        ['app_name' => $G_message_name]);
                }

                // get outbox folder id
                require_once('message/folder_logic.csp');
                $folder = new GRN_Message_FolderLogic();
                $outbox_id = $folder->getSpecificFolderID($user,
                    GRN_MESSAGE_SENDINGFOLDER);

                cb_redirect('message/index', ['cid' => $outbox_id]);
            case 'draft':
                require_once('grn/controller.csp');
                $files = getFiles($target_name);
                $ret = $message_logic->modifyDraft($user, $message_id,
                    $message, $addressees,
                    $files);
                if ($ret === false) {
                    require_once('message/error_code.csp');
                    cb_throw_error(E_GRN_MESSAGE_FAIL_TO_SAVE_MESSAGE,
                        ['app_name' => $G_message_name],
                        ['app_name' => $G_message_name]);
                }

                cb_redirect('message/draft_view', [
                    'cid' => $category_id,
                    'rid' => $relation_id,
                    'mid' => $message_id
                ]);
            default:
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_WRONG_PARAMETER);
        }

    } else {
        // if error, show the source form
        $t->setPageInfo('message/draft_modify');
        require('_command_send_validate.csp');
        require('_draft_modify.csp');

        $t->assign('rows', $G_message_ui_config->getAreaHeight());
        $t->assign('cols', $G_message_ui_config->getAreaWidth());

        require_once('message/system_logic.csp');
        $system_logic = GRN_Message_SystemLogic::getInstance();
        $t->assign('use_editor', $system_logic->getUseREConfigAttribute());
        $t->assign('upload_ticket', @$G_INPUT['upload_ticket']);
        //remove unchecked files
        require_once('grn/upload.csp');
        GRN_UploadFile::removeUploadedFilesByFileIds(@$G_INPUT['upload_ticket'],
            @$G_INPUT['upload_fileids']);

        $t->display('message/draft_modify.tpl');
    }
}

function getFiles($target_name)
{
    global $G_INPUT;
    $tmp_key = grn_get_temporary_key();
    $files = grn_get_attached_files($target_name . $tmp_key, 'message');
    require_once('grn/upload.csp');
    $upload_files = GRN_UploadFile::getUploadedFiles(@$G_INPUT['upload_ticket'],
        @$G_INPUT['upload_fileids'], true);
    foreach ($upload_files as $fid => $file) {
        $files[$fid] = $file;
    }

    return $files;
}
