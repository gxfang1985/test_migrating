<?php

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ($user === false) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------

$category_id = @ $G_INPUT['cid'];
$relation_id = @ $G_INPUT['rid'];
$message_id = @ $G_INPUT['mid'];

if ($category_id == '' || $relation_id == '' || $message_id == '') {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

// message instance
require_once('message/message_logic.csp');
$message_logic = new GRN_Message_Logic();
$message_logic->markAsReadMessages($user, [$relation_id]);

$t->assign('rid', $relation_id);

// for previous_next_navi
require_once('message/controller.csp');
$utility = new GRN_Message_ControllerUtil('message/index');
$order_column = $utility->getListOrderColumn(null, 'mtd');

$pn_ids = $message_logic->getPreviousNextIDs($user, $category_id, $relation_id,
    $order_column['column'], $order_column['order']);

// previous navi
$previous_navi_params_for_view = _grn_message_get_pn_navi_params('previous',
    $pn_ids);
if ($previous_navi_params_for_view) {
    $previous_navi_params_for_view['page_params']['cid'] = $category_id;
    $t->assign('previous_navi_params', $previous_navi_params_for_view);
}

// next navi
$next_navi_params_for_view = _grn_message_get_pn_navi_params('next',
    $pn_ids);
if ($next_navi_params_for_view) {
    $next_navi_params_for_view['page_params']['cid'] = $category_id;
    $t->assign('next_navi_params', $next_navi_params_for_view);
}

// inline
$t->assign('inline', $G_message_ui_config->getInlineSetting());

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position

$page_index = 'message/index';
$page_inbox = 'message/inbox';
$page_outbox = 'message/outbox';
$page_draftbox = 'message/draftbox';
$page_garbagebox = 'message/garbagebox';
$page_category_list = 'message/category_list';

require_once('message/folder_logic.csp');
$folder_logic = new GRN_Message_FolderLogic();
$folder_info = $folder_logic->getFolderInfo($user, $category_id);

if ( ! $folder_info) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_FOLDER_NOT_FOUND);
}

$sf = 0;
switch ($folder_info['folder_type']) {
    case GRN_MESSAGE_RECEIVINGFOLDER:
        $page_folder = $page_inbox;
        $sf = 1;
        break;
    case GRN_MESSAGE_SENDINGFOLDER:
        $page_folder = $page_outbox;
        break;
    case GRN_MESSAGE_DRAFTFOLDER:
        $page_folder = $page_draftbox;
        break;
    case GRN_MESSAGE_GARBAGEFOLDER:
        $page_folder = $page_garbagebox;
        break;
    default:
        $page_folder = $page_category_list;
}

$top_page = [
    'page' => $page_index,
    'name' => grn_get_page_display_name($page_index),
    'sf'   => $sf
];
$folder_page = [
    'page' => $page_index,
    'name' => grn_get_page_display_name($page_folder),
    'cid'  => $category_id,
    'sf'   => 1
];

$sp = @ $G_INPUT['sp'];
if ($sp != '') {
    $folder_page['sp'] = $sp;

    if ($sf == 1) {
        $top_page['sp'] = $sp;
    }
}

$t->assign(
    'site_position',
    [
        $top_page,
        $folder_page,
        [
            'page' => '',
            'name' => $page_title
        ]
    ]
);


// メッセージ
$message = $message_logic->getMessage($user, $relation_id, $message_id, 0, 0,
    true);
if ( ! $message) {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

if ($message['message_type'] != '2') {
    require_once('message/error_code.csp');
    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name],
        ['app_name' => $G_message_name]);
}

// メッセージ本文
$assign_message_map = [
    'mid'           => 'message_id',
    'data'          => 'data',
    'subscribe'     => 'subscription',
    'creator_uid'   => 'creator_id',
    'creator_name'  => 'creator_name',
    'ctime'         => 'ctime',
    'mtime'         => 'mtime',
    'update'        => 'read_flag',
    'cid'           => 'folder_id',
    'modifier_uid'  => 'modifier_id',
    'modifier_name' => 'modifier_name',
    'need_confirm'  => 'need_confirm',
    'confirmed'     => 'confirmed',
    'format_type'   => 'format_type',
];

$uids = [];
$message_for_view = [];
foreach ($assign_message_map as $view_name => $data_name) {
    $message_for_view[$view_name] =& $message[$data_name];
}
$message_for_view['subject'] = $message['subject'];
$t->assign('page_title', $message['subject']);
// attached files
$file_list =& $message['files'];
if (count($file_list) > 0) {
    $file_info = _grn_message_attached_files($file_list);
    $message_for_view['attach_files'] = $file_info['files'];
    $message_for_view['del_file_num'] = $file_info['del_file_num'];
}

// addressees
$addressee_list =& $message['addressees'];
$addressee_num = count($addressee_list);

$addressees = [];
foreach ($addressee_list as $addressee) {
    $addressees[$addressee['id']] = $addressee['name'];
    $uids[] = $addressee['id'];
}
$message_for_view['addressee'] = $addressees;
$message_for_view['addressee_num'] = $addressee_num;
// star
require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$use_star = $star_logic->isActive();
$use_star = $use_star
            && ($folder_info['folder_type'] != GRN_MESSAGE_GARBAGEFOLDER);
$t->assign('use_star', $use_star);
if ($use_star) {
    $t->assign('star_infos',
        $star_logic->getStatusByIDs($user, GRN_MESSAGE_MODULEID,
            [$message_id]));
}
// end star

$t->assign('message', $message_for_view);

// delete attach files number
$t->assign('delete_attach_files', 3);
$t->assign('is_folder_subscribed', $folder_info['subscription_flag']);
require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids,
    $uum->getLoginUser());
$t->assign('users_info', $users_info);

// use garbage box or not
require_once('message/personal_logic.csp');
$personal_logic = GRN_Message_PersonalLogic::getInstance();
$use_garbage = $personal_logic->getUseGarbageBoxAttribute($user);
//$no_confirm = ( $folder_info['folder_type'] == GRN_MESSAGE_GARBAGEFOLDER ) ? false : $use_garbage;
$no_confirm = false;

//delete info
$delete_info = [
    'title'      => grn_get_page_display_name('message/draft_delete'),
    'page'       => 'message/draft_delete.tpl',
    'no_confirm' => $no_confirm,
    'data'       => [
        'folder_type' => $folder_info['folder_type'],
        'use_garbage' => $use_garbage,
        'message'     => $message_for_view,
        'category_id' => $category_id,
        'rid'         => $relation_id,
        'mid'         => $message_id,
    ],
    'handler'    => 'lnk_delete',
];

$t->assign('delete_info', $delete_info);
// Smarty実行
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");
