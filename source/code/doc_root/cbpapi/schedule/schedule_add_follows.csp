<?php

/**
 * API schedule add follow : add a follow content to a normal event
 *
 **/
if (isset($cbpapi_service)) {
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $follow_params = $cbpapi_service->selectNodes($node_parameters, 'follow');
    if ( ! isset($follow_params) || ! is_array($follow_params)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'follow']);
    }
    require_once('cbpapi/schedule_logic.csp');
    $api_base_logic = GRN_CBPApi_Schedule_Logic::getInstance();

    require_once 'schedule/application.csp';
    $app = GRN_Schedule_Application::getInstance();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    // アクセス権のチェック
    require_once 'schedule/access_logic.csp';
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();
    $dynamic_role = $uum->listGrantedRoles();
    $event_ids = [];
    $required_fields = ['event_id', 'content'];
    foreach ($follow_params as $key => $follow) {
        $follow_param = [];
        if (array_key_exists('attributes', $follow)) {
            $follow_param = $follow['attributes'];
        }
        foreach ($required_fields as $field) {
            if ( ! array_key_exists($field, $follow_param)) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => $field]);
            }
        }
        // イベントの取得
        $event_id = $follow_param['event_id'];
        if (array_key_exists($event_id, $event_ids)) {
            cb_throw_error(E_GRN_SCHD_DUPLICATE_EVENT);
        }
        $follow = $follow_param['content'];
        require_once 'fw/string_util.csp';
        if (mb_strlen(cb_trim($follow)) == 0) {
            cb_throw_error(E_GRN_SCHD_NOTINPUT_EVENTFOLLOW);
        }
        if ( ! is_numeric($event_id)) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        $event = $app->getEvent($login, $event_id);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        $app->readEvent($login, $event_id);

        //check if it is a repeat event
        $event_type = $event->getEventType();
        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_REPEAT)
            == GRN_SCHEDULE_EVENT_TYPE_REPEAT
        ) {
            cb_throw_error(E_GRN_SCHD_IS_REPEAT_EVENT);
        }
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'add', 'modify', 'delete'], $dynamic_role);

        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }

        if ($access['add'] == GRN_SCHD_ACCESS_DENY
            && $access['modify'] == GRN_SCHD_ACCESS_DENY
            && $access['delete'] == GRN_SCHD_ACCESS_DENY
        ) {
            cb_throw_error(E_GRN_SCHD_DENYENTRY_EVENTFOLLOW);
        }

        // get notify date
        $notify_date = null;
        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            $notify_date = $event->setdatetime;
        } elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
            $notify_date = $event->setdate;
        } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            if ($event->isORSearch()) {
                $dates = reset($event->setdates[0]['dates']);
            } else {
                $dates = reset($event->setdates);
            }
            $notify_date = $dates['setdatetime'];
        }

        // check today
        $tsex = new CB_TimeStampEx();
        $today = $tsex->getDate();
        if ($today->compare($notify_date) > 0) {
            $notify_date = &$event->getFirstDate($today);
        }

        $event_id = $app->writeFollow($login, $follow, $event_id);
        $api_base_logic->createFollowNotify($login, $event, $event_id, $follow,
            $notify_date, GRN_SCHEDULE_NOTIFY_FOLLOWENTRY);

        $event_ids[$event_id] = $event_id;
    }


    $events_for_view = [];
    $events_for_view = $api_base_logic->getEventsForViewByIds($login,
        $event_ids);

    //response SOAP message
    require_once "grn/smarty.csp";
    $t = new GRN_Smarty;
    $t->assign('events', $events_for_view);
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('schedule')]);
    grn_cbpapi_response($t, __FILE__);
}
