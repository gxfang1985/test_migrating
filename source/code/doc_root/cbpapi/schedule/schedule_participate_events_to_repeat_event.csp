<?php

if (isset($cbpapi_service)) {
    $node_parameters = $cbpapi_service->getRequestParameters();
    $operations = $cbpapi_service->selectNodes($node_parameters,
        'operation');
    if ( ! $operations) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'operation']);
    }
    // check for valid input params
    $orginal_eventids = [];
    $operation_list = [];
    $required_fields = ['event_id', 'type'];
    foreach ($operations as $operation) {
        foreach ($required_fields as $field) {
            if ( ! isset($operation['attributes'][$field])) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => $field]);
            }
        }
        $operation_list[] = $operation['attributes'];
        $event_id = $operation['attributes']['event_id'];
        if (array_key_exists($event_id, $orginal_eventids)) {
            cb_throw_error(E_GRN_SCHD_DUPLICATE_EVENT);
        }
        $orginal_eventids[$event_id] = $event_id;
    }

    require_once('schedule/application.csp');
    $app = GRN_Schedule_Application::getInstance();

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $login_id = $login->getOID();

    require_once('cbpapi/schedule_logic.csp');
    $logic = GRN_CBPApi_Schedule_Logic::getInstance();
    $orginal_events_for_view = [];

    $event_id_list = []; // participated event id list.
    $date = null;
    $results = [];
    foreach ($operation_list as $operation) {
        $event_id = $operation['event_id'];
        $str_date = isset($operation['date']) ? $operation['date'] : '';
        $date = new CB_Date();
        if ( ! $date->parse($str_date)) {
            $date = null;
        }
        $user_date = $logic->translateDateToUserTimezone($event_id, $date);
        $apply = $operation['type'] ? $operation['type'] : null;
        if ( ! is_numeric($event_id)) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        $event = $app->getEvent($login, $event_id, $user_date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        //Check access privilige
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'modify'], $dynamic_role);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        // throw error when event is not a repeat event.
        if ( ! is_a($event, 'GRN_Schedule_RepeatEvent')) {
            cb_throw_error(E_GRN_SCHD_IS_NOT_REPEAT_EVENT);
        } else {
            // throw error because there is no any changing conditions.
            if ( ! $apply) {
                cb_throw_error(E_GRN_SCHD_NOT_REPEAT_MODIFY_TYPE);
            }
            if ($apply != 'all') {
                if (is_null($date)) {
                    cb_throw_error(E_GRN_SCHD_NOT_SPECIFIED_DATE);
                }
            }
        }

        // check participate
        $is_participate = (is_array($event->users)
                           && array_key_exists($login_id, $event->users));

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = &$event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // Registered user only has a modification permission.
                if ($modify_user === 'creator') {
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者しか変更を許していない場合
                    if (is_array($event->facilities)
                        && count($event->facilities) > 0
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        // Login user is not a member
                        if (( ! $is_participate || is_null($event->users))
                            && ((is_a($event->creator, 'CB_User')
                                 && $login_id !== $event->creator->getOID())
                                || is_string($event->creator))
                            && ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }

        //participate
        $b_found = false;
        if (is_array($event->users)) {
            foreach (array_keys($event->users) as $index) {
                $user = &$event->users[$index];
                // already participated
                if ($user->getOID() == $login_id) {
                    $b_found = true;
                    break;
                }
            }
        }

        //participate
        if ( ! $b_found) {
            if (is_array($event->users)) {
                $event->users[] = &$login;
            } else {
                $event->users = [];
                $event->users[] = &$login;
            }
            $event->modifier = &$login;
            if (is_a($event, 'GRN_Schedule_RepeatEvent')
                && ($apply == 'after')
            ) {
                $event->setdate = $date;
            }

            $result = $app->modifyEvent($event, $user_date, $apply);
            if ($result) {
                $orginal_events_for_view[$event_id] = $event_id;
                $event_id_list[$result] = $result;
                $results[$result] = ['original' => $event_id];
                $event->id = $result;
            }

            $bdate = null;
            if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                if ($apply == 'this') {
                    $bdate = $date;
                } else {
                    require_once('fw/date.csp');
                    $tsex = new CB_TimeStampEx();
                    $today = $tsex->getDate();
                    $bdate = $event->getFirstDate($today);
                }
            }
            $logic->createNotification($login, $event, null, $bdate,
                GRN_SCHEDULE_NOTIFY_MODIFY);
        }
    }
    $logic->saveNow();

    // Get event for view.
    $original_events = $logic->getEventsForViewByIds($login,
        $orginal_events_for_view);
    $schedule_events = $logic->getEventsForViewByIds($login, $event_id_list);

    foreach ($schedule_events as $index => $event) {
        $event['root'] = 'modified';
        $results[$index]['modified'] = $event;
        // setting original events for view
        $original_event = $original_events[$results[$index]['original']];
        $original_event['root'] = 'original';
        $results[$index]['original'] = $original_event;
    }

    //response SOAP message
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('schedule')]);
    $t->assign('results', $results);
    grn_cbpapi_response($t, __FILE__);
}

