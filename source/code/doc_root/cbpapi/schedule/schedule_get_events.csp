<?php

use grn\schedule\AttendanceStatusLogic;

if (isset($cbpapi_service)) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    //response SOAP message
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $startdate = null;
    $enddate = null;
    $start_for_daily = null;
    $end_for_daily = null;
    if (array_key_exists('attributes', $node_parameters)) {
        if (array_key_exists('start', $node_parameters['attributes'])) {
            $startdate = $node_parameters['attributes']['start'];
        }
        if (array_key_exists('end', $node_parameters['attributes'])) {
            $enddate = $node_parameters['attributes']['end'];
        }
        if (array_key_exists('start_for_daily',
            $node_parameters['attributes'])
        ) {
            $start_for_daily
                = $node_parameters['attributes']['start_for_daily'];
        }
        if (array_key_exists('end_for_daily', $node_parameters['attributes'])) {
            $end_for_daily = $node_parameters['attributes']['end_for_daily'];
        }
    }
    if ( ! $startdate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'start']);
    }
    if ( ! $enddate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'end']);
    }
    $events = getEvents($login, $startdate, $enddate, $start_for_daily,
        $end_for_daily);

    $t->assign('events', $events);
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('schedule')]);
    grn_cbpapi_response($t, __FILE__);
}


function getEvents(
    & $login,
    $startdate,
    $enddate,
    $start_for_daily = null,
    $end_for_daily = null
) {
    require_once('cbpapi/schedule_logic.csp');
    $cbpapi_base_logic = GRN_CBPApi_Schedule_Logic::getInstance();
    require_once('cbpapi/util.csp');

    /* start datetime to local time */
    $startdatetime = grn_cbpapi_parse_iso8601($startdate);
    if ( ! $startdatetime) {
        cb_throw_error(E_GRN_SCHD_API_INVALID_STARTDATETIME);
    }
    $startdatetime = grn_cbpapi_convert_utc_to_local($startdatetime);
    /* end datetime to local time */
    $enddatetime = grn_cbpapi_parse_iso8601($enddate);
    if ( ! $enddatetime) {
        cb_throw_error(E_GRN_SCHD_API_INVALID_ENDDATETIME);
    }
    $enddatetime = grn_cbpapi_convert_utc_to_local($enddatetime);

    if (cb_date_compare($startdatetime, $enddatetime) > 0) {
        cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
    }

    $attendanceStatusLogic = new AttendanceStatusLogic();
    $isEnableAttendanceStatus
        = $attendanceStatusLogic->isEnableAttendanceCheck();

    $events = $cbpapi_base_logic->getNormalEvents(
        $login->getOID(), 'user', $startdatetime, $enddatetime,
        $isEnableAttendanceStatus
    );
    if ( ! is_null($start_for_daily) || 0 < strlen($start_for_daily)) {
        // check for valid date
        $date = new CB_Date();
        if ( ! $date->parse($start_for_daily)) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETDATE);
        }
        $start_dateex = new CB_DateEx($date);
        $end_dateex = null;
        if ( ! is_null($end_for_daily) || 0 < strlen($end_for_daily)) {
            $date = new CB_Date();
            if ( ! $date->parse($end_for_daily)) {
                cb_throw_error(E_GRN_SCHD_INVALID_ENDDATE);
            }

            $end_dateex = new CB_DateEx($date);
            if ($end_dateex->compare($start_dateex) < 0) {
                cb_throw_error(E_GRN_SCHD_INVALID_DATE);
            }
        }
        $events += $cbpapi_base_logic->getDailyEvents(
            $login->getOID(), 'user', $start_dateex, $end_dateex,
            $isEnableAttendanceStatus
        );
    } else {
        $events += $cbpapi_base_logic->getDailyEvents(
            $login->getOID(), 'user', $startdatetime, $enddatetime,
            $isEnableAttendanceStatus
        );
    }

    if ($isEnableAttendanceStatus) {
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();
        $events = $util->filterAbsentEvents($events);
    }

    $events_ids = [];
    foreach ($events as $event) {
        $events_ids[] = $event['id'];
    }

    $events_for_view = [];
    $events_for_view = $cbpapi_base_logic->getEventsForViewByIds($login,
        $events_ids);

    return $events_for_view;
}

