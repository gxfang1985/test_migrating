<?php

use grn\schedule\AttendanceStatusLogic;

if (isset($cbpapi_service)) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    //response SOAP message
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $startdate = null;
    $enddate = null;
    $start_for_daily = null;
    $end_for_daily = null;
    $candidate_items_version = [];
    if (array_key_exists('attributes', $node_parameters)) {
        if (array_key_exists('start', $node_parameters['attributes'])) {
            $startdate = $node_parameters['attributes']['start'];
        }
        if (array_key_exists('end', $node_parameters['attributes'])) {
            $enddate = $node_parameters['attributes']['end'];
        }
        if (array_key_exists('start_for_daily',
            $node_parameters['attributes'])
        ) {
            $start_for_daily
                = $node_parameters['attributes']['start_for_daily'];
        }
        if (array_key_exists('end_for_daily', $node_parameters['attributes'])) {
            $end_for_daily = $node_parameters['attributes']['end_for_daily'];
        }
    }
    if ( ! $startdate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'start']);
    }

    $candidate_items_version = getEventsIdByPeriod($login, $startdate, $enddate,
        $start_for_daily, $end_for_daily);

    require_once('cbpapi/util.csp');
    $item_name = 'event_item';
    $items_version = grn_cbpapi_parse_item_versions($node_parameters,
        $item_name);

    $events = grn_cbpapi_compare_item_versions($items_version,
        $candidate_items_version);
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('schedule')]);
    $t->assign('events', $events);
    grn_cbpapi_response($t, __FILE__);
}

function getEventsIdByPeriod(
    & $login,
    $startdate,
    $enddate = null,
    $start_for_daily = null,
    $end_for_daily = null
) {
    require_once('cbpapi/schedule_logic.csp');
    $cbpapi_base_logic = GRN_CBPApi_Schedule_Logic::getInstance();
    require_once('cbpapi/util.csp');
    $startdate = grn_cbpapi_parse_iso8601($startdate);
    if ( ! $startdate) {
        cb_throw_error(E_GRN_SCHD_API_INVALID_STARTDATETIME);
    }
    $startdatetime = grn_cbpapi_convert_utc_to_local($startdate);

    $enddatetime = null;
    if ($enddate) {
        $enddate = grn_cbpapi_parse_iso8601($enddate);
        if ( ! $enddate) {
            cb_throw_error(E_GRN_SCHD_API_INVALID_ENDDATETIME);
        }
        $enddatetime = grn_cbpapi_convert_utc_to_local($enddate);
        if (cb_date_compare($startdatetime, $enddatetime) > 0) {
            cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
        }
    }

    $attendanceStatusLogic = new AttendanceStatusLogic();
    $isEnableAttendanceStatus
        = $attendanceStatusLogic->isEnableAttendanceCheck();
    $events_period = $cbpapi_base_logic->getNormalEvents(
        $login->getOID(), 'user', $startdatetime, $enddatetime,
        $isEnableAttendanceStatus
    );
    if ( ! is_null($start_for_daily) || 0 < strlen($start_for_daily)) {
        // check for valid date
        $date = new CB_Date();
        if ( ! $date->parse($start_for_daily)) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETDATE);
        }
        $start_dateex = new CB_DateEx($date);
        $end_dateex = null;
        if ( ! is_null($end_for_daily) || 0 < strlen($end_for_daily)) {
            $date = new CB_Date();
            if ( ! $date->parse($end_for_daily)) {
                cb_throw_error(E_GRN_SCHD_INVALID_ENDDATE);
            }
            $end_dateex = new CB_DateEx($date);
            if ($end_dateex->compare($start_dateex) < 0) {
                cb_throw_error(E_GRN_SCHD_INVALID_DATE);
            }
        }

        $events_period += $cbpapi_base_logic->getDailyEvents(
            $login->getOID(), 'user', $start_dateex, $end_dateex,
            $isEnableAttendanceStatus
        );
    } else {
        $events_period += $cbpapi_base_logic->getDailyEvents(
            $login->getOID(), 'user', $startdatetime, $enddatetime,
            $isEnableAttendanceStatus
        );
    }

    if ($isEnableAttendanceStatus) {
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();
        $events_period = $util->filterAbsentEvents($events_period);
    }

    $events = [];
    $event = [];
    foreach (array_keys($events_period) as $key) {
        $event_id = $events_period[$key]['id'];
        $event['id'] = $event_id;
        $event['version'] = $events_period[$key]['mtime'];;
        $events[$event_id] = $event;
    }

    return $events;
}

