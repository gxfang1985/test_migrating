<?php
if (isset($cbpapi_service)) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    //response SOAP message
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $event_id_list = [];
    $event_id_list = $cbpapi_service->selectNodesValue($node_parameters,
        'event_id');
    if ( ! $event_id_list) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'event_id']);
    }
    $events = getEventsById($login, $event_id_list);
    $t->assign('events', $events);
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('schedule')]);
    grn_cbpapi_response($t, __FILE__);
}


function getEventsById(& $user, $event_id_list)
{
    if ( ! is_array($event_id_list) || count($event_id_list) <= 0) {
        return [];
    }
    //get db connection
    $app_locator = GRN_ApplicationLocator::instance();
    $dbconn = $app_locator->getConnection('schedule');
    $event_id_list_escaped = [];
    foreach ($event_id_list as $event_id) {
        $event_id_list_escaped[] = "'" . $dbconn->escape($event_id) . "'";
    }
    $query = 'SELECT e._id FROM tab_grn_schedule_eventmember AS m LEFT JOIN ' .
             'tab_grn_schedule_event AS e ON m.col_event = e._id ' .
             'WHERE ' . 'e._id IN (' . implode(', ', $event_id_list_escaped)
             . ') ORDER BY e._id';
    $query = cb_queryf($dbconn, $query, $user->getOID());
    $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
    $result = $dbconn->query($query);
    if ($result === false) {
        $dbconn->throwError(['query' => 'failed query on SELECT: ' . $query]);
    }
    $events = [];
    while ($row = $dbconn->fetch_assoc($result)) {
        $events[$row['_id']] = $row;
    }

    $dbconn->free_result($result);

    $events_ids = [];
    foreach ($events as $key => $event_id) {
        $events_ids[] = $key;
    }
    $events_for_view = [];
    require_once('cbpapi/schedule_logic.csp');
    $base_logic = GRN_CBPApi_Schedule_Logic::getInstance();
    $events_for_view = $base_logic->getEventsForViewByIds($user, $events_ids);

    return $events_for_view;
}

