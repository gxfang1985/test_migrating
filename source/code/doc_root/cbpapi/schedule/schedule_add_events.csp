<?php
require_once('cbpapi/schedule_logic.csp');

use grn\schedule\api\adapter\events\PostEventSoapAdapter;
use grn\schedule\api\service\EventsService;

if (isset($cbpapi_service)) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    //response SOAP message
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();

    $cbpapi_base_logic = GRN_CBPApi_Schedule_Logic::getInstance();
    $event_params = $cbpapi_base_logic->getInputParamerters($login,
        $node_parameters);

    $events_ids = [];
    foreach ($event_params as $params) {
        //Update recently used users and groups.
        require_once('grn/uum_util.csp');
        $uum_util = \GRN_UumUtil::getInstance();
        $input_keys = array_keys($params);
        foreach ($input_keys as $input_key) {
            if (preg_match('#^selected_users_.*$#', $input_key)) {
                $input_value = $params[$input_key];
                if (is_array($input_value) && count($input_value) > 0) {
                    $input_values = explode(':', $input_value[0]);
                    if ($input_value[0] && is_array($input_values)) {
                        $uum_util->selectUsers($login, $input_values);
                    }
                }
            } elseif (preg_match('#^selected_groups_.*$#', $input_key)) {
                $input_value = $params[$input_key];
                if (is_array($input_value) && count($input_value) > 0) {
                    $input_values = explode(':', $input_value[0]);
                    if ($input_value[0] && is_array($input_values)) {
                        $uum_util->selectGroups($login, $input_values);
                    }
                }
            }
        }

        $event_service = new EventsService();
        $adapter = new PostEventSoapAdapter();
        $event_id = $event_service->postEvent($login, $params, $adapter);
        if ($event_id) {
            $events_ids[] = $event_id;
        }
    }

    // commit schedule tables
    $cbpapi_base_logic->saveNow();
    $events = $cbpapi_base_logic->getEventsForViewByIds($login, $events_ids);

    $t->assign('events', $events);
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('schedule')]);
    grn_cbpapi_response($t, __FILE__);
}

