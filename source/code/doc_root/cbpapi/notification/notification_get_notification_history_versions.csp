<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    // get parameters of SOAP message
    $request = $cbpapi_service->getRequestParameters();
    $startdate = null;
    $enddate = null;
    $module_id = null;
    $folder_ids = [];
    if (array_key_exists('attributes', $request)) {
        if (array_key_exists('start', $request['attributes'])) {
            $startdate = $request['attributes']['start'];
        }
        if (array_key_exists('end', $request['attributes'])) {
            $enddate = $request['attributes']['end'];
        }
        if (array_key_exists('module_id', $request['attributes'])) {
            $module_id = $request['attributes']['module_id'];
        }
    }

    if ( ! $startdate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'start']);
    }
    $results = [];
    $params = array_key_exists('children', $request) ? $request['children']
        : null;
    if (count($params) > 0) {
        foreach (array_keys($params) as $key) {
            $result = [];
            if (strcmp($params[$key]['node_name'], 'notification_history_item')
                == 0
            ) {
                $notification_item =& $params[$key];
                if ( ! isset($notification_item['attributes']['version'])) {
                    require_once('cbpapi/error_code.csp');
                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                        ['param' => 'version']);
                } else {
                    require_once('cbpapi/error_code.csp');
                    cbpapi_trim_check($notification_item['attributes']['version'],
                        E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'version');
                }
                $result['version']
                    = $notification_item['attributes']['version'];
                $children = array_key_exists('children', $notification_item)
                    ? $notification_item['children'] : null;
                if (count($children) > 0) {
                    foreach (array_keys($children) as $children_key) {
                        $node = $children[$children_key]['node_name'];
                        if ($node == 'notification_id') {
                            $attrs = &$children[$children_key]['attributes'];
                            if ( ! isset($attrs['module_id'])) {
                                require_once('cbpapi/error_code.csp');
                                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER,
                                    null, ['param' => 'module_id']);
                            } else {
                                require_once('cbpapi/error_code.csp');
                                cbpapi_trim_check($attrs['module_id'],
                                    E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE,
                                    'module_id');
                            }
                            if ( ! isset($attrs['item'])) {
                                require_once('cbpapi/error_code.csp');
                                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER,
                                    null, ['param' => 'item']);
                            } else {
                                require_once('cbpapi/error_code.csp');
                                cbpapi_trim_check($attrs['item'],
                                    E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'item');
                            }
                            require_once('fw/string_util.csp');
                            if (is_null($module_id)
                                || 0 == strlen($module_id)
                            ) {
                                $result['module_id']
                                    = cb_trim($attrs['module_id']);
                            } else {
                                if (strcmp($module_id,
                                        cb_trim($attrs['module_id'])) !== 0
                                ) {
                                    continue;
                                }
                                $result['module_id'] = cb_trim($module_id);
                            }
                            $item_id = cb_trim($attrs['item']);
                            $result['item'] = $item_id;
                            $notification_key = $result['module_id']
                                                . $item_id;
                            $results[$notification_key] = $result;
                        }
                    }
                }
            }
        }
    }

    require_once('cbpapi/util.csp');
    $startdatetime = grn_cbpapi_parse_iso8601($startdate);
    if ( ! is_a($startdatetime, 'CB_DateTime')
         || ! cb_date_validate_datetime($startdatetime)
    ) {
        cb_throw_error(E_COMMON_INVALID_DATETIME);
    }
    $enddatetime = null;
    if ($enddate) {
        $enddatetime = grn_cbpapi_parse_iso8601($enddate);
        if ( ! is_a($enddatetime, 'CB_DateTime')
             || ! cb_date_validate_datetime($enddatetime)
        ) {
            cb_throw_error(E_COMMON_INVALID_DATETIME);
        }
        if (cb_date_compare($startdatetime, $enddatetime) > 0) {
            require_once('notification/error_code.csp');
            cb_throw_error(E_GRN_NTFC_INVALID_DATETIME);
        }
    }
    $starttimestamp = null;
    $endtimestamp = null;
    $starttimestamp = convert_utc_to_local($startdatetime);
    $endtimestamp = convert_utc_to_local($enddatetime);
    require_once('cbpapi/notification_logic.csp');
    $cbapi_notification_logic = GRN_CBPApi_Notification_Logic::getInstance();
    $candidate_items_version = [];
    $candidate_items_version
        = $cbapi_notification_logic->getDataList('history',
        $login, $starttimestamp, $endtimestamp, $module_id);

    $notifications_version = [];
    $notifications_version = compare_item_versions($results,
        $candidate_items_version);

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('notification')]);
    $t->assign('notifications', $notifications_version);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}

function convert_utc_to_local($obj_date)
{
    static $timezone = null;
    if (is_null($timezone)) {
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();
    }
    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone('UTC');
    if (is_object($obj_date)) {
        if (is_a($obj_date, 'CB_DateTime')) {
            $timestamp->setDateTime($obj_date);
        }
    }
    $timestamp->setTimeZone($timezone);

    return $timestamp;
}

