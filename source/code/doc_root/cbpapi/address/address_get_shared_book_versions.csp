<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();

    // get parameters of SOAP message
    $node_parameters = &$cbpapi_service->getRequestParameters();
    // アドレス帳を取得する
    require_once('address/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Address_Application $app */
    $app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);

    $book_manager =& $app->getBookManager();

    // check access permission
    require_once('address/access.csp');
    $access_manager = GRN_Address_AccessManager::getInstance();
    if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
        assert('FALSE');
    }

    // get dynamic roles
    $dynamic_roles = $uum->listGrantedRoles();

    // evaluate access permission on shared books
    $authorities = ['shared_address'];
    $security_model = $access_manager->getSecurityModel($row);
    $access = $access_manager->evaluateAccess($row, $login,
        $dynamic_roles, $authorities, $security_model);
    if ( ! $access_manager->isAllowedAccess($access, $authorities,
        $security_model)
    ) {
        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
    }

    $candidate_items_version = [];
    $book_ids = listSharedAddressBooksVersions();
    if (is_array($book_ids) && count($book_ids) > 0) {
        foreach (array_keys($book_ids) as $book_id) {
            // get shared books
            $book =& $book_manager->getSharedAddressBook($book_id);
            $row =& $book->getRow();
            $authorities = ['browse'];
            $access = $access_manager->evaluateAccess($row, $login,
                $dynamic_roles, $authorities);
            $security_model = $access_manager->getSecurityModel($row);
            if ( ! $access_manager->isAllowedAccess($access, $authorities,
                $security_model)
            ) {
                unset($book_ids[$book_id]);
                continue;
            }
            $candidate_items_version[$book_id] = $book_ids[$book_id];
        }
    }
    require_once('cbpapi/util.csp');
    $item_name = 'book_item';
    $items_version = grn_cbpapi_parse_item_versions($node_parameters,
        $item_name);

    $books = grn_cbpapi_compare_item_versions($items_version,
        $candidate_items_version);
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('address')]);
    $t->assign('books', $books);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}

function listSharedAddressBooksVersions()
{
    //get db connection
    $app_locator = GRN_ApplicationLocator::instance();
    $dbconn =& $app_locator->getConnection('address');
    $query
        = 'SELECT _id, col_mtime FROM tab_grn_address_sharedbook ORDER BY _id ';
    $query = cb_queryf($dbconn, $query);
    $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);
    $result = $dbconn->query($query);
    if ($result === false) {
        $dbconn->throwError(['query' => 'failed query on SELECT: ' . $query]);
    }
    $books = [];
    while ($row = $dbconn->fetch_assoc($result)) {
        $book = [];
        $book['id'] = $row['_id'];
        $book['version'] = $row['col_mtime'];
        $books[$row['_id']] = $book;
    }

    // 結果の開放
    $dbconn->free_result($result);

    return $books;
}
