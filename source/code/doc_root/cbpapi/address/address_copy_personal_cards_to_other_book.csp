<?php

if (isset($cbpapi_service)) {
    $ation = $cbpapi_service->getAction();
    $node_parameter =& $cbpapi_service->getRequestParameters();
    $copy_items =& $cbpapi_service->selectNodes($node_parameter,
        'copy_item');
    if ( ! isset($copy_items)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'copy_item']);
    }

    // check for required parameter
    foreach ($copy_items as $copy_item) {
        if ( ! isset($copy_item['attributes']['copied_book_id'])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'copied_book_id']);
        }
        if ( ! isset($copy_item['attributes']['card_id'])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'card_id']);
        }
    }
    // access logic
    require_once('address/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Address_Application $app */
    $app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
    if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
        cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
    }
    $book_manager =& $app->getBookManager();

    // Get User Login
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();
    $login_id = $login->getOID();

    // access
    require_once('address/access.csp');
    $access_manager = GRN_Address_AccessManager::getInstance();
    if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
        assert('FALSE');
    }

    // Get dynamic roles
    $dynamic_roles = $uum->listGrantedRoles();

    // evaluate access
    $authorities = ['private_address', 'shared_address'];
    $security_model = $access_manager->getSecurityModel($row);
    $access = $access_manager->evaluateAccess($row, $login,
        $dynamic_roles, $authorities, $security_model);

    // evaluate access on private book
    $authorities = ['private_address'];
    if ( ! $access_manager->isAllowedAccess($access, $authorities,
        $security_model)
    ) {
        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
    }

    // get private book
    if ( ! ($private_book
        =& $book_manager->getPrivateAddressBookByUserId($login_id))
    ) {
        if ( ! ($private_book =& $book_manager->addPrivateAddressBook('cyde',
            $login_id, []))
        ) {
            cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
        }
    }

    // evaluate access on shared books
    $authorities = ['shared_address'];
    $access_shared_address = $access_manager->isAllowedAccess($access,
        $authorities, $security_model);

    $books = [];
    $allowed_books = [];
    if ($access_shared_address) {
        // list of shared book
        $books = $book_manager->listSharedAddressBooks();

        if (0 < count($books)) {
            // get allowed books
            $rows = [];
            foreach (array_keys($books) as $book_id) {
                $book =& $books[$book_id];
                $rows[$book_id] =& $book->getRow();
            }
            $authorities = ['browse', 'editing'];
            $allowed_books = $access_manager->pickAllowedObjects($rows, $login,
                $dynamic_roles, $authorities);
        }
    }

    // logic
    $copied_books = [];
    foreach ($copy_items as $copy_item) {
        $copied_book_id = $copy_item['attributes']['copied_book_id'];
        $card_id = $copy_item['attributes']['card_id'];
        // get card
        if (is_null($card_id) || strlen($card_id) == 0) {
            cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
        }
        if ( ! ($data =& $private_book->getData($card_id))) {
            cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
        }
        // copy address
        $properties = $data->getProperties('copy', 'item_id');
        unset($properties['creator']);
        unset($properties['creator_name']);
        unset($properties['ctime']);
        unset($properties['modifier']);
        unset($properties['modifier_name']);
        unset($properties['mtime']);

        if (array_key_exists($copied_book_id, $allowed_books)) {
            $book =& $books[$copied_book_id];
            $data = $book->copyData($properties);

            // copied cards
            if ( ! isset($copied_books[$copied_book_id]['book'])) {
                $copied_books[$copied_book_id]['book'] = $book;
            }
            $copied_books[$copied_book_id]['cards'][] = $data->getOID();
        }

    }

    require_once('cbpapi/address_logic.csp');
    $logic = GRN_CBPApi_Address_Logic::getInstance();
    $logic->saveNow();
    $cards_for_view = [];
    foreach ($copied_books as $book_id => $book) {
        $cards_for_view[$book_id] = $logic->getCardsForViewByIds($book['book'],
            $book['cards']);
    }

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();

    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('address')]);
    $t->assign('action', $action);
    $t->assign('address_namespace',
        'xmlns="http://schemas.cybozu.co.jp/address/2008"');
    $t->assign('copied_books', $cards_for_view);

    grn_cbpapi_response($t, __FILE__);
}

