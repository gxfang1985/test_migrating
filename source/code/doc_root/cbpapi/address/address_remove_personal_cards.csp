<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    $node_parameter =& $cbpapi_service->getRequestParameters();
    $card_ids = $cbpapi_service->selectNodesValue($node_parameter,
        'card_id');
    if ( ! isset($card_ids)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'card_id']);
    }


    // Get user login infomation
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();
    $login_id = $login->getOID();

    // Get Book manager
    require_once('address/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Address_Application $app */
    $app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
    if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
        cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
    }
    $book_manager =& $app->getBookManager();

    // Evaluate access persmission
    require_once('address/access.csp');
    $access_manager = GRN_Address_AccessManager::getInstance();
    if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
        assert('FALSE');
    }

    // List dynamic role
    $dynamic_roles = $uum->listGrantedRoles();

    // Evaluate use permission
    $authorities = ['private_address', 'shared_address'];
    $security_model = $access_manager->getSecurityModel($row);
    $access = $access_manager->evaluateAccess($row, $login,
        $dynamic_roles, $authorities, $security_model);

    // // Evaluate access permission on personal book
    $authorities = ['private_address'];
    if ( ! $access_manager->isAllowedAccess($access, $authorities,
        $security_model)
    ) {
        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
    }

    // get personal book
    if ( ! ($book =& $book_manager->getPrivateAddressBookByUserId($login_id))) {
        cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
    }

    // remove multi cards
    $book->removeDatas($card_ids);

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();

    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('address')]);
    $t->assign('action', $action);

    grn_cbpapi_response($t, __FILE__);
}
