<?php
if (isset($cbpapi_service)) {
    // get SOAP action
    $action = $cbpapi_service->getAction();
    $request_param =& $cbpapi_service->getRequestParameters();

    if ( ! isset($request_param['attributes']['file_id'])) {
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'file_id']);
    }

    $file_id = $request_param['attributes']['file_id'];
    if ( ! is_numeric($file_id)) {
        cb_throw_error(E_GRN_ADDRESS_FILE_NOT_FOUND);
    }

    // Get address book
    require_once('address/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Address_Application $app */
    $app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
    $book_manager =& $app->getBookManager();

    // Check for access permission
    require_once('address/access.csp');
    $access_manager = GRN_Address_AccessManager::getInstance();
    if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
        assert('FALSE');
    }
    // get user dynamis roles
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();
    $dynamic_roles = $uum->listGrantedRoles();

    // evaluate access permission
    $authorities = ['private_address', 'shared_address'];
    $security_model = $access_manager->getSecurityModel($row);
    $access = $access_manager->evaluateAccess($row, $login,
        $dynamic_roles, $authorities, $security_model);

    $is_found = false;
    // 個人アドレスブックを取得する
    $login_id = $login->getOID();
    if (($book =& $book_manager->getPrivateAddressBookByUserId($login_id))) {
        $is_found = _grn_address_file_exists($book, $file_id);
    }

    if ($is_found) {
        $authorities = ['private_address'];
        if ( ! $access_manager->isAllowedAccess($access, $authorities,
            $security_model)
        ) {
            cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
        }
    } else {
        $authorities = ['shared_address'];
        if ( ! $access_manager->isAllowedAccess($access, $authorities,
            $security_model)
        ) {
            cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
        }
        // 共有アドレスブック一覧を取得する
        $books = $book_manager->listSharedAddressBooks();

        if (0 < count($books)) {
            // アクセス可能な共有アドレスブック一覧を取得する
            $rows = [];
            foreach (array_keys($books) as $book_id) {
                $book =& $books[$book_id];
                $is_found = _grn_address_file_exists($book, $file_id);
                if ($is_found) {
                    $row =& $book->getRow();
                    $authorities = ['browse'];
                    $access = $access_manager->evaluateAccess($row,
                        $login, $dynamic_roles, $authorities);
                    $security_model = $access_manager->getSecurityModel($row);
                    if ( ! $access_manager->isAllowedAccess($access,
                        $authorities, $security_model)
                    ) {
                        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_EDITING);
                    }
                    break;
                }
            }
        }
    }

    if ( ! $is_found) {
        cb_throw_error(E_GRN_ADDRESS_FILE_NOT_FOUND);
    }

    require_once('address/file.csp');
    $file_manager = new GRN_Address_FileManager_Core();
    $table_info =& $file_manager->getFileTable();
    $file =& $table_info->getRow($file_id);

    if ( ! is_object($file) || ! is_a($file, 'GRN_File')) {
        cb_throw_error(E_GRN_ADDRESS_FILE_NOT_FOUND);
    }

    /** @var GRN_Address_FileBody $body */
    $body =& $file->getCurrentBody();
    $file_content = base64_encode($body->getContents());

    //response SOAP message
    require_once("grn/smarty.csp");

    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('address')]);
    $t->assign('action', $action);
    $t->assign('file_content', $file_content);

    grn_cbpapi_response($t, __FILE__);
}

/**
 * @param GRN_Address_Cyde_Book $book
 * @param string                $file_id
 *
 * @return bool
 */
function _grn_address_file_exists(&$book, $file_id)
{
    $is_found = false;

    require_once('address/view_util.csp');
    $view_util = GRN_Address_ViewUtil::getInstance();
    $extended_items = $view_util->listExtendedItems($book);
    $cards = $book->listDatasFast();
    foreach (array_keys($cards) as $card_id) {
        $card =& $cards[$card_id];
        if ($file_id == $card['image']['oid']) {
            $is_found = true;
            break;
        }
        foreach ($extended_items as $item_id => $item) {
            if (array_key_exists($item_id, $card)) {
                if ($item['type'] == GRN_ADDRESS_ITEM_FILE
                    && $file_id == $card[$item_id]['oid']
                ) {
                    $is_found = true;
                    break;
                }
            }
        }
    }

    return $is_found;
}

