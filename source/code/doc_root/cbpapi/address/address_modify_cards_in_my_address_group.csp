<?php

if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    $node_parameter =& $cbpapi_service->getRequestParameters();
    $mygroups =& $cbpapi_service->selectNodes($node_parameter,
        'my_address_group');
    if ( ! isset($mygroups)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'my_address_group']);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();

    include('_mygroup_book_access.csp');

    require_once('address/mygroup_logic.csp');
    $mygroup = GRN_Address_MyGroup_Logic::getInstance();

    require_once('address/mygroup_data_logic.csp');
    $mygroup_data = GRN_Address_MyGroupData_Logic::getInstance();

    $my_group_for_view = [];
    foreach ($mygroups as $group) {
        if ( ! isset($group['attributes']['id'])
             || 0 == strlen($group['attributes']['id'])
        ) {
            cb_throw_error(E_GRN_ADDRESS_MYGROUP_NOT_FOUND);
        }
        $mygroup_id = $group['attributes']['id'];
        $tmp_group = $mygroup->getMyGroup($login, $mygroup_id);
        if ($tmp_group == false) {
            cb_throw_error(E_GRN_ADDRESS_MYGROUP_NOT_FOUND);
        }
        $address_items = [];
        $users = [];
        $cards = [];
        if (array_key_exists('children', $group)) {
            foreach ($group['children'] as $item) {
                if ( ! isset($item['attributes']['key'])) // Not isset
                {
                    require_once('cbpapi/error_code.csp');
                    cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                        ['param' => 'key']);
                }
                $id = $item['attributes']['key'];
                require_once('cbpapi/util.csp');
                $id = cbpapi_trim_check($id,
                    E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'key');
                $type = '';
                switch ($item['node_name']) {
                    case 'user':
                        $type = GRN_ADDRESS_MYGROUP_DATA_TYPE_USER;
                        if ( ! is_numeric($id)) {
                            cb_throw_error(E_GRN_USER_NOT_FOUND);
                        }
                        $users[$id] = ['id' => $id];
                        break;
                    case 'card':
                        if ( ! isset($item['attributes']['type'])) {
                            require_once('cbpapi/error_code.csp');
                            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                                ['param' => 'type']);
                        }
                        $type = $item['attributes']['type'];

                        if (0 === strcasecmp($type, 'shared')) {
                            $type = GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED;
                        } elseif (0 === strcasecmp($type, 'private')) {
                            $type = GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE;
                        } else {
                            cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
                        }

                        if ($type == GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE) {
                            if ( ! $access_for_view['private_address']) {
                                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
                            }

                            $login_id = $login->getOID();
                            if ( ! ($book
                                =& $book_manager->getPrivateAddressBookByUserId($login_id))
                            ) {
                                if ( ! ($book
                                    =& $book_manager->addPrivateAddressBook('cyde',
                                    $login_id, []))
                                ) {
                                    cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
                                }
                            }
                            if ( ! ($data = $book->getData($id))) {
                                cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
                            }
                        }
                        $cards[$id] = [
                            'id'   => $id,
                            'type' => $item['attributes']['type']
                        ];
                        break;
                    default:
                        cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
                }
                $address_items[] = ['id' => $id, 'address_type' => $type];
            }
        }
        $mygroup_data->changeGroupData($tmp_group, $address_items,
            $allow_books);

        // my address group for view
        $version = $tmp_group->get('mtime');
        $version = is_object($version)
            ? $version->unix_ts : time();
        $my_group_for_view[$mygroup_id] = [
            'id'          => $mygroup_id,
            'name'        => $tmp_group->get('name'),
            'version'     => $version,
            'description' => $tmp_group->get('description')
        ];
        $my_group_for_view[$mygroup_id]['users'] = $users;
        $my_group_for_view[$mygroup_id]['cards'] = $cards;
    }

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();

    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('address')]);
    $t->assign('action', $action);
    $t->assign('mygroups', $my_group_for_view);

    grn_cbpapi_response($t, __FILE__);
}

