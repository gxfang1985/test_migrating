<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();

    // get parameters of SOAP message
    $node_parameters = &$cbpapi_service->getRequestParameters();
    $book_ids = $cbpapi_service->selectNodesValue($node_parameters,
        'book_id');
    if ( ! isset($book_ids)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'book_id']);
    }

    // Get address book application
    require_once('address/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Address_Application $app */
    $app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
    $book_manager =& $app->getBookManager();

    // check access permission
    require_once('address/access.csp');
    $access_manager = GRN_Address_AccessManager::getInstance();
    if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
        assert('FALSE');
    }

    // get dynamic roles
    $dynamic_roles = $uum->listGrantedRoles();

    // evaluate access permission on shared books
    $authorities = ['shared_address'];
    $security_model = $access_manager->getSecurityModel($row);
    $access = $access_manager->evaluateAccess($row, $login,
        $dynamic_roles, $authorities, $security_model);
    if ( ! $access_manager->isAllowedAccess($access, $authorities,
        $security_model)
    ) {
        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
    }

    require_once('address/view_util.csp');
    $view_util = GRN_Address_ViewUtil::getInstance();

    $books_for_view = [];
    foreach ($book_ids as $book_id) {
        if ( ! is_numeric($book_id)) {
            continue;
        }
        // get shared books
        if ( ! ($book =& $book_manager->getSharedAddressBook($book_id))) {
            continue;//cb_throw_error(E_GRN_ADDRESS_SHARED_ADDRESS_BOOK_NOT_FOUND);
        }
        $row =& $book->getRow();
        $authorities = ['browse'];
        $access = $access_manager->evaluateAccess($row, $login,
            $dynamic_roles, $authorities);
        $security_model = $access_manager->getSecurityModel($row);
        if ( ! $access_manager->isAllowedAccess($access, $authorities,
            $security_model)
        ) {
            cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_EDITING);
        }
        // list card for view
        $cards = $book->listDatasFast();
        // get book's config
        $builtin_items = $view_util->listBuiltinItems($book);
        //GRN2-1840
        if (array_key_exists("route_detail", $builtin_items)) {
            unset($builtin_items['route_detail']);
        }
        //GRN2-1840
        $extended_items = $view_util->listExtendedItems($book);
        // get last modified time of book
        $row =& $book->getRow();
        $mtime = $row->get('mtime');
        // list book for view
        $books_for_view[$book_id] = [
            'bkey'           => $row->get('id'),
            //GRN2-1490
            'book_id'        => $row->getOID(),
            //GRN2-1490
            'bname'          => $row->get('display_name'),
            'type'           => $row->get('type'),
            'version'        => $mtime->unix_ts,
            'builtin_items'  => $builtin_items,
            'extended_items' => $extended_items,
            'cards'          => array_keys($cards)
        ];
    }
    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('address')]);
    $t->assign('books', $books_for_view);
    $t->assign('action', $action);

    grn_cbpapi_response($t, __FILE__);
}
