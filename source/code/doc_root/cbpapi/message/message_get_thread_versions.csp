<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $startdate = null;
    $enddate = null;
    $folder_ids = [];
    if (array_key_exists('attributes', $node_parameters)) {
        if (array_key_exists('start', $node_parameters['attributes'])) {
            require_once('cbpapi/error_code.csp');
            $startdate
                = cbpapi_trim_check($node_parameters['attributes']['start'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'start');
        }
        if (array_key_exists('end', $node_parameters['attributes'])) {
            $enddate = $node_parameters['attributes']['end'];
        }
    }

    if ( ! $startdate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'start']);
    }

    $children = array_key_exists('children', $node_parameters)
        ? $node_parameters['children'] : null;
    if (count($children) > 0) {
        foreach (array_keys($children) as $children_key) {
            $node = $children[$children_key]['node_name'];
            if ($node == 'folder_id') {
                $folder_id = array_key_exists('text',
                    $children[$children_key]) ? $children[$children_key]['text']
                    : '';
                $folder_ids[] = $folder_id;
            }
        }
    }

    require_once('cbpapi/util.csp');
    $startdatetime = grn_cbpapi_parse_iso8601($startdate);
    $enddatetime = null;
    if ($enddate) {
        $enddatetime = grn_cbpapi_parse_iso8601($enddate);
        if (cb_date_compare($startdatetime, $enddatetime) > 0) {
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_INVALID_TERM_PARAM,
                ['app_name' => cb_msg('grn.message', 'application_name')]);
        }
    }
    $starttimestamp = null;
    $endtimestamp = null;
    $starttimestamp = convert_utc_to_local($startdatetime);
    $endtimestamp = convert_utc_to_local($enddatetime);

    require_once('cbpapi/util.csp');
    $item_name = 'thread_item';
    $items_version = grn_cbpapi_parse_item_versions($node_parameters,
        $item_name);

    require_once('cbpapi/message_logic.csp');
    $message_logic = GRN_CBPApi_Message_Logic::getInstance();
    $candidate_items_version = [];
    $candidate_items_version = $message_logic->getThreadDataList($login,
        $folder_ids, $starttimestamp, $endtimestamp);
    if (count($candidate_items_version > 0)) {
        foreach ($candidate_items_version as $message) {
            if (array_key_exists('is_snapshot', $message)
                && $message['is_snapshot']
            ) {
                unset($candidate_items_version[$message['id']]);
            }
        }
    }

    $threads_version = grn_cbpapi_compare_item_versions($items_version,
        $candidate_items_version);
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('message')]);
    $t->assign('threads', $threads_version);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}

function convert_utc_to_local($obj_date)
{
    static $timezone = null;
    if (is_null($timezone)) {
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();
    }
    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone('UTC');
    if (is_object($obj_date)) {
        if (is_a($obj_date, 'CB_DateTime')) {
            $timestamp->setDateTime($obj_date);
        }
    }
    $timestamp->setTimeZone($timezone);

    return $timestamp;
}
