<?php
if (isset($cbpapi_service)) {
    //GRN2-1457
    require_once('message/resources.csp');
    $request = $cbpapi_service->getRequestParameters();
    $params = [];
    if (array_key_exists('children', $request)) {
        $node_children = $request['children'];

        if (count($node_children) == 1) {
            if ( ! array_key_exists('folder_id',
                $node_children[0]['attributes'])
            ) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => 'folder_id']);
            }

            if ( ! array_key_exists('thread_id',
                $node_children[0]['attributes'])
            ) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => 'thread_id']);
            }
        }
        foreach ($node_children as $child) {
            if (array_key_exists('folder_id', $child['attributes'])
                && array_key_exists('thread_id', $child['attributes'])
            ) {
                $params[] = [
                    "folder_id"  => $child['attributes']['folder_id'],
                    "message_id" => $child['attributes']['thread_id']
                ];
            }
        }
    } else {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'param']);
    }

    //remove similar thread_id
    $temp = $params;
    for ($i = 0; $i < count($temp) - 1; $i++) {
        for ($j = $i + 1; $j < count($temp); $j++) {
            if ($temp[$i]['message_id'] == $temp[$j]['message_id']) {
                unset($params[$j]);
            }
        }
    }
    $delete_complete = @ $request['attributes']['delete_all_inbox'];
    if ($delete_complete == "true") {
        $delete_complete = 1;
    } else {
        $delete_complete = 0;
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    unset($uum);
    // get application name
    $app_name = cb_msg(GRN_MESSAGE_MODULEID, 'application_name');

    require_once('cbpapi/message_logic.csp');
    $cbpapi_logic = GRN_CBPApi_Message_Logic::getInstance();
    require_once('message/message_logic.csp');
    $message_logic = new GRN_Message_Logic();

    require_once('message/personal_logic.csp');
    $personal_logic = GRN_Message_PersonalLogic::getInstance();
    $use_garbagebox = $personal_logic->getUseGarbageBoxAttribute($login);
    $app_name = cb_msg(GRN_MESSAGE_MODULEID, 'application_name');

    foreach ($params as $param) {
        //get relation ID
        $relation = $cbpapi_logic->getRelationID($login, $param['message_id'],
            $param['folder_id']);
        if (count($relation) <= 0) {
            require_once('message/error_code.csp');
            cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_MOVED,
                ['app_name' => $app_name],
                ['app_name' => $app_name],
                ['app_name' => $app_name]);
        }
        $relateion_id = @ $relation['rid'];
        if ($relation['folder_type'] <> GRN_MESSAGE_GARBAGEFOLDER) {
            if ($delete_complete == 0) {
                if ($use_garbagebox == '1') {
                    $ret = $message_logic->moveMessages2GarbageBox($login,
                        $param['folder_id'],
                        [$relateion_id]);
                    if ( ! $ret) {
                        require_once('message/error_code.csp');
                        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_MOVED,
                            ['app_name' => $app_name],
                            ['app_name' => $app_name],
                            ['app_name' => $app_name]);
                    }
                } else {
                    grn_message_delete_messages($message_logic, $login, 1,
                        [$relateion_id], [$param['message_id']], $app_name);
                }
            } else {
                $delete_mids = [];
                if ($login->getOID() == $relation['creator_id']) {
                    $delete_mids[] = $param['message_id'];
                }

                if ($use_garbagebox == '1') {
                    $ret = $message_logic->moveMessages2GarbageBox($login,
                        $param['folder_id'],
                        [$relateion_id]);
                    if ( ! $ret) {
                        require_once('message/error_code.csp');
                        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_DELETED,
                            ['app_name' => $app_name],
                            ['app_name' => $app_name],
                            ['app_name' => $app_name]);
                    }
                } else {
                    grn_message_delete_messages($message_logic, $login, 1,
                        [$relateion_id], [$param['message_id']], $app_name);
                }
                $ret = $message_logic->deleteMessageData($login, $delete_mids);
                if ( ! $ret) {
                    require_once('message/error_code.csp');
                    cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_DELETED,
                        ['app_name' => $app_name],
                        ['app_name' => $app_name],
                        ['app_name' => $app_name]);
                }
            }
        } else {
            grn_message_delete_messages($message_logic, $login, 1,
                [$relateion_id], [$param['message_id']], $app_name);
        }
    }

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('message')]);

    grn_cbpapi_response($t, __FILE__);
    //GRN2-1457
}

function grn_message_delete_messages(
    $message_logic,
    $user,
    $message_num,
    $relations,
    $messages,
    $app_name
) {
    $message_list = [];
    for ($i = 0; $i < $message_num; $i++) {
        $message_list[$relations[$i]] = $messages[$i];
    }
    $ret = $message_logic->deleteMessages($user, $message_list);
    if ( ! $ret) {
        require_once('message/error_code.csp');
        cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_MOVED,
            ['app_name' => $app_name],
            ['app_name' => $app_name],
            ['app_name' => $app_name]);
    }
}
