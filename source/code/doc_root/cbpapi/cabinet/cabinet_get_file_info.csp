<?php
if (isset($cbpapi_service)) {
    $request = $cbpapi_service->getRequestParameters();
    $hid = @$request['attributes']['hid'];
    if (is_null($hid)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'hid']);
    }

    if ( ! is_numeric($hid)) {
        require_once('cabinet/error_code.csp');
        cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
    }

    require_once('fw/string_util.csp');
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    // file群格納用
    $files = null;

    // folderオブジェクト格納用
    $folder = null;

    require_once('cabinet/folder.csp');
    $folderManager = GRN_Cabinet_FolderManager::getInstance();
    // フォルダの取得
    if ( ! ($folder = $folderManager->getFolder($login, $hid,
        GRN_CABINET_ACCESS_R, true))
    ) {
        require_once('cabinet/error_code.csp');
        cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
    }

    $files = $folder->getFiles();
    unset($folderManager);

    // 出力項目群の取得
    $xml_maps = api_get_xml_maps();

    ob_start();

    //Open XML Document
    $xml_writer = new XMLWriter();
    $xml_writer->openURI("php://output");
    $xml_writer->startDocument('1.0', 'UTF-8');

    // START XML書出し 
    $xml_writer->startElement('file_information');

    $xml_writer->startElement('files');
    $xml_writer->writeAttribute('parent_id', $folder->getOID());
    $xml_writer->writeAttribute('parent_code',
        cb_remove_invalid_xml_chars($folder->get('foreign_key')));

    foreach ($files as $file) {
        $xml_writer->startElement('file');
        $xml_writer->writeAttribute('id', $file->getOID());
        $xml_writer->writeAttribute('folder_id', $folder->getOID());

        // ファイル情報整形
        $xml_fileinfo_map = api_get_file_info_array($file,
            $xml_maps['fileinfo']);
        // 項目書込
        api_xml_write_map_data($xml_writer, $xml_fileinfo_map);

        // 履歴情報 
        if (count($xml_maps['historyinfo']) > 0) {

            $logs = $file->getlogset();
            $xml_writer->startElement('histories');

            while ( ! is_null(($log = $logs->iterate()))) {
                $xml_writer->startElement('history');

                // 履歴情報整形
                $xml_loginfo_map = api_get_log_info_array($log,
                    $xml_maps['historyinfo']);

                // 履歴項目書込
                api_xml_write_map_data($xml_writer, $xml_loginfo_map);
                $xml_writer->endElement();
            }
            $xml_writer->endElement();
        }
        $xml_writer->endElement();
    }

    $xml_writer->endElement();
    $xml_writer->endElement();

    //End XML Document
    $xml_writer->endDocument();
    $xml_writer->flush();

    $result = ob_get_clean();

    //先頭のXML宣言を切り取る
    if (strpos($result, '<?xml version="1.0" encoding="UTF-8"?>') == 0) {
        $result = substr($result,
            strlen('<?xml version="1.0" encoding="UTF-8"?>'), strlen($result));
    }

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('cabinet')]);
    $t->assign('file_info', $result);
    grn_cbpapi_response($t, __FILE__);
}


function api_xml_write_map_data(& $xml_writer, & $xml_map)
{
    // 指定項目の書出し
    foreach ($xml_map as $key => $val) {
        if (array_key_exists('writeType', $val)) {
            $xml_writer->startElement($key);

            if (strlen(@$val['value']) > 0) {
                if ($val['writeType'] === 'writeCDATA') {
                    require_once('fw/string_util.csp');
                    $val['value'] = cb_escape_cdata($val['value']);
                }
                call_user_func([& $xml_writer, $val['writeType']],
                    cb_remove_invalid_xml_chars($val['value']));
            }

            $xml_writer->endElement();
        }
    }
}


function api_get_file_info_array(& $file, $xml_map)
{

    if ($file) {
        $xml_map['title']['value'] = $file->getTitle();
        $xml_map['description']['value'] = $file->getDescription();
        $xml_map['max_version']['value'] = $file->getMaxVersion();

        $body = $file->getCurrentBody();
        $xml_map['name']['value'] = $body->get("name");
        $xml_map['size']['value'] = $body->get("size");
        $xml_map['mime_type']['value'] = $body->get("mime");


        $xml_map['create_time']['value']
            = api_format_datetime($file->get("ctime"));
        $xml_map['modify_time']['value']
            = api_format_datetime($file->get("mtime"));

        $c_user = $file->get('creator');
        if ($c_user) {
            $xml_map['creator_id']['value'] = $c_user->getOID();
            $xml_map['creator_login_name']['value']
                = $c_user->get("foreign_key");
            $xml_map['creator_display_name']['value']
                = $c_user->get("display_name");
        } else {
            $xml_map['creator_login_name']['value']
                = $file->get("creator_foreign_key");
            $xml_map['creator_display_name']['value']
                = $file->get("creator_name");
        }

        $m_user = $file->get('modifier');
        if ($m_user) {
            $xml_map['modifier_id']['value'] = $m_user->getOID();
            $xml_map['modifier_login_name']['value']
                = $m_user->get("foreign_key");
            $xml_map['modifier_display_name']['value']
                = $m_user->get("display_name");
        } else {
            $xml_map['modifier_login_name']['value']
                = $file->get("modifier_foreign_key");
            $xml_map['modifier_display_name']['value']
                = $file->get("modifier_name");
        }
    }

    return $xml_map;

}


function api_get_log_info_array($log, $xml_map)
{

    if ($log) {
        $xml_map['version']['value'] = $log->get("version");
        $xml_map['active']['value'] = $log->fileExists() ? 1 : 0;
        $xml_map['name']['value'] = $log->get("filename");
        $xml_map['action']['value'] = $log->get("operation");
        $xml_map['comment']['value'] = $log->get("comment");
        $xml_map['modify_time']['value']
            = api_format_datetime($log->get("record_time"));

        $r_user = $log->get('recorder');
        if ($r_user) {
            $xml_map['modifier_id']['value'] = $r_user->getOID();
            $xml_map['modifier_login_name']['value']
                = $r_user->get("foreign_key");
            $xml_map['modifier_display_name']['value']
                = $r_user->get("display_name");
        } else {
            $xml_map['modifier_login_name']['value']
                = $log->get("recorder_foreign_key");
            $xml_map['modifier_display_name']['value']
                = $log->get("recorder_name");
        }
    }

    return $xml_map;

}


// 日付の書式
function api_format_datetime($value)
{
    $val = null;

    if (is_a($value, 'cb_timestamp')) {
        $val = date('Y-m-d\TH:i:sO', $value->unix_ts);
    }

    return $val;
}


function api_get_xml_maps()
{
    $xml_map = [
        'fileinfo'    => [
            'title'                 => ['item' => '0', 'writeType' => 'text'],
            'description'           => [
                'item'      => '1',
                'writeType' => 'writeCDATA'
            ],
            'max_version'           => [
                'item'      => '2',
                'writeType' => 'writeRaw'
            ],
            'name'                  => ['item' => '3', 'writeType' => 'text'],
            'size'                  => [
                'item'      => '4',
                'writeType' => 'writeRaw'
            ],
            'mime_type'             => ['item' => '5', 'writeType' => 'text'],
            'creator_id'            => [
                'item'      => '6',
                'writeType' => 'writeRaw'
            ],
            'creator_login_name'    => ['item' => '7', 'writeType' => 'text'],
            'creator_display_name'  => ['item' => '8', 'writeType' => 'text'],
            'create_time'           => ['item' => '9', 'writeType' => 'text'],
            'modifier_id'           => [
                'item'      => '10',
                'writeType' => 'writeRaw'
            ],
            'modifier_login_name'   => ['item' => '11', 'writeType' => 'text'],
            'modifier_display_name' => ['item' => '12', 'writeType' => 'text'],
            'modify_time'           => ['item' => '13', 'writeType' => 'text']
        ],
        'historyinfo' => [
            'version'               => [
                'item'      => '14',
                'writeType' => 'writeRaw'
            ],
            'active'                => [
                'item'      => '15',
                'writeType' => 'writeRaw'
            ],
            'name'                  => ['item' => '16', 'writeType' => 'text'],
            'action'                => [
                'item'      => '17',
                'writeType' => 'writeRaw'
            ],
            'comment'               => [
                'item'      => '18',
                'writeType' => 'writeCDATA'
            ],
            'modifier_id'           => [
                'item'      => '19',
                'writeType' => 'writeRaw'
            ],
            'modifier_login_name'   => ['item' => '20', 'writeType' => 'text'],
            'modifier_display_name' => ['item' => '21', 'writeType' => 'text'],
            'modify_time'           => ['item' => '22', 'writeType' => 'text']
        ]
    ];

    return $xml_map;
}
