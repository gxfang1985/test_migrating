<?php
if (isset($cbpapi_service)) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    $folder = null;

    require_once('cabinet/folder.csp');
    $folderManager = GRN_Cabinet_FolderManager::getInstance();

    if ( ! ($folder = $folderManager->getRootFolder($login))) {
        require_once('cabinet/error_code.csp');
        cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
    }
    unset($folderManager);

    require_once('fw/string_util.csp');
    //////////////////////////////////////////////////////////////////////////////////
    //XML書出用の配列
    $xml_map = api_get_xml_maps();

    //バッファに出力する。
    ob_start();

    //Open XML Document
    $xml_writer = new XMLWriter();
    $xml_writer->openURI("php://output");
    $xml_writer->startDocument('1.0', 'UTF-8');

    // START XML書出し 
    $xml_writer->startElement('folder_information');
    $xml_writer->startElement('root');

    $xml_writer->writeAttribute('id', $folder->getOID());
    $xml_writer->writeAttribute('code',
        cb_remove_invalid_xml_chars($folder->get('foreign_key')));

    api_write_folder($xml_writer, $login, $folder, $xml_map);

    $xml_writer->endElement();
    $xml_writer->endElement();

    //End XML Document
    $xml_writer->endDocument();
    $xml_writer->flush();

    //バッファからXMLを得る
    $result = ob_get_clean();

    //先頭のXML宣言を切り取る
    if (strpos($result, '<?xml version="1.0" encoding="UTF-8"?>') == 0) {
        $result = substr($result,
            strlen('<?xml version="1.0" encoding="UTF-8"?>'), strlen($result));
    }

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('cabinet')]);
    $t->assign('folder_info', $result);
    grn_cbpapi_response($t, __FILE__);
}

/**
 * フォルダ情報のXML書出し
 */
function api_write_folder(& $xml_writer, & $user, & $folder, & $xml_map)
{
    // folder Data部の書出し
    api_write_folder_data($xml_writer, $folder, $xml_map);

    $children = $folder->getFolders($user, GRN_CABINET_ACCESS_R);

    if ($children) {
        api_write_folders_element_start($xml_writer,
            $folder);                 // folders start

        foreach (array_keys($children) as $hid) {
            $child =& $children[$hid];
            api_write_folder_element_start($xml_writer,
                $child);          // folder start
            // Data部 書出し (自身を呼び出す)
            api_write_folder($xml_writer, $user, $child, $xml_map);

            api_write_folder_element_end($xml_writer);                      // folder end
        }

        api_write_folders_element_end($xml_writer);                             // folders end

    }
}

/**
 * フォルダ情報の<folder>Element START
 * api_write_folder_element_end とペアでつかう
 *
 */
function api_write_folder_element_start(& $xml_writer, & $folder)
{
    $xml_writer->startElement('folder');                                    // folder
    $xml_writer->writeAttribute('id', $folder->getOID());
    $xml_writer->writeAttribute('code',
        cb_remove_invalid_xml_chars($folder->get('foreign_key')));
    $xml_writer->writeAttribute('list_index', $folder->get('list_index'));
}

/**
 * フォルダ情報の<folder>Element 内の データ部分の書出し
 *
 */
function api_write_folder_data(& $xml_writer, & $folder, $xml_map)
{
    // 指定項目整形
    $xml_folderinfo_map = api_get_folder_info_array($folder, $xml_map);
    // 項目書込
    api_xml_write_map_data($xml_writer, $xml_folderinfo_map);

}

/**
 * フォルダ情報の<folder>Element END
 * api_write_folder_element_end とペアでつかう
 *
 */
function api_write_folder_element_end(& $xml_writer)
{
    $xml_writer->endElement();                                              // folder
}

///////////////////////////////////


// folders /////////////////////////
function api_write_folders_element_start(& $xml_writer, & $folder)
{
    if ($folder) {
        $xml_writer->startElement('folders');                                // sub folders
        $xml_writer->writeAttribute('parent_id', $folder->getOID());
        $xml_writer->writeAttribute('parent_code',
            cb_remove_invalid_xml_chars($folder->get('foreign_key')));
    }
}

function api_write_folders_element_end(& $xml_writer)
{
    $xml_writer->endElement();                                              // sub folders
}

//////////////////////////////////////


function api_get_folder_info_array(& $folder, $xml_map)
{

    if ($folder) {

        $xml_map['title']['value'] = $folder->get("name");
        $xml_map['description']['value'] = $folder->get("description");


        $xml_map['create_time']['value']
            = api_format_datetime($folder->get("ctime"));
        $xml_map['modify_time']['value']
            = api_format_datetime($folder->get("mtime"));

        $c_user = $folder->get('creator');
        if ($c_user) {
            $xml_map['creator_id']['value'] = $c_user->getOID();
            $xml_map['creator_login_name']['value']
                = $c_user->get("foreign_key");
            $xml_map['creator_display_name']['value']
                = $c_user->get("display_name");
        } else {
            $xml_map['creator_login_name']['value']
                = $folder->get("creator_foreign_key");
            $xml_map['creator_display_name']['value']
                = $folder->get("creator_name");
        }

        $m_user = $folder->get('modifier');
        if ($m_user) {
            $xml_map['modifier_id']['value'] = $m_user->getOID();
            $xml_map['modifier_login_name']['value']
                = $m_user->get("foreign_key");
            $xml_map['modifier_display_name']['value']
                = $m_user->get("display_name");
        } else {
            $xml_map['modifier_login_name']['value']
                = $folder->get("modifier_foreign_key");
            $xml_map['modifier_display_name']['value']
                = $folder->get("modifier_name");
        }
    }

    return $xml_map;

}


function api_xml_write_map_data(& $xml_writer, & $xml_map)
{
    // 指定項目の書出し
    foreach ($xml_map as $key => $val) {
        if (array_key_exists('writeType', $val)) {
            $xml_writer->startElement($key);

            if (strlen(@$val['value']) > 0) {
                if ($val['writeType'] === 'writeCDATA') {
                    require_once('fw/string_util.csp');
                    $val['value'] = cb_escape_cdata($val['value']);
                }
                call_user_func([& $xml_writer, $val['writeType']],
                    cb_remove_invalid_xml_chars($val['value']));
            }

            $xml_writer->endElement();
        }
    }
}

// 日付の書式 2007-04-01T12:00:00+9:00 の形にする
function api_format_datetime($value)
{
    $val = null;

    if (is_a($value, 'cb_timestamp')) {
        $val = date('Y-m-d\TH:i:sO', $value->unix_ts);
    }

    return $val;
}

function api_get_xml_maps()
{
    // XML書出用の配列
    $xml_map = [
        'title'                 => ['item' => '0', 'writeType' => 'text'],
        'description'           => ['item' => '1', 'writeType' => 'writeCDATA'],
        'creator_id'            => ['item' => '2', 'writeType' => 'writeRaw'],
        'creator_login_name'    => ['item' => '3', 'writeType' => 'text'],
        'creator_display_name'  => ['item' => '4', 'writeType' => 'text'],
        'create_time'           => ['item' => '5', 'writeType' => 'text'],
        'modifier_id'           => ['item' => '6', 'writeType' => 'writeRaw'],
        'modifier_login_name'   => ['item' => '7', 'writeType' => 'text'],
        'modifier_display_name' => ['item' => '8', 'writeType' => 'text'],
        'modify_time'           => ['item' => '9', 'writeType' => 'text'],
    ];

    return $xml_map;
}
