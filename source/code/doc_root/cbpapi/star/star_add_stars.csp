<?php

use grn\grn\access\service\AppAccess;

function _grn_star_add(&$user, $params = [], &$star_count)
{
    assert('is_array($params) && count($params)>0');
    require_once('grn/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Star_Application $star_app */
    $star_app = $app_locator->getInstance('star');
    $allow_applications = $star_app->getSupportedApplications();
    $ret = null;
    $module_id = @$params['module_id'];
    $app_id = array_search($module_id, $allow_applications);
    if ($app_id === false) {
        require_once('star/error_code.csp');
        cb_throw_error(E_GRN_STAR_INVALID_MODULE_ID);
    }
    //$app_id = $allow_applications[$module_id];

    if ( ! $app_locator->isActive($app_id)) {
        return $ret;
    }

    $app = $app_locator->getInstance($app_id);
    if ( ! $app || ! AppAccess::isAppAvailable($app_id)) {
        return $ret;
    }

    require_once('star/logic.csp');
    $star_logic = GRN_Star_StarLogic::getInstance();

    require_once('cbpapi/error_code.csp');

    switch ($module_id) {
        case 'grn.schedule':
            $event_id = cbpapi_trim_check($params['item'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'item');
            $bdate = @$params['date'];
            cbpapi_trim_check($bdate, E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE,
                'date');
            $star_data = $app->getStarData($user,
                ['event' => $event_id, 'bdate' => $bdate]);
            if ( ! $star_logic->isMarked($user, $module_id,
                $star_data->getUniqueId())
            ) {
                $star_logic->add($user, $star_data);
                $star_count++;
            }
            $ret = $star_data->getUniqueId();
            break;
        case 'grn.message':
            $message_id = cbpapi_trim_check($params['item'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'item');
            require_once('message/message_logic.csp');
            $logic = new GRN_Message_Logic();
            $message_id = (int)$message_id;
            $message = $logic->hasPrivilege($user, $message_id, null);
            if ($message === false) {
                $app_name = cb_msg('grn.message', 'application_name');
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_MESSAGE_NOT_FOUND,
                    ['app_name' => $app_name],
                    ['app_name' => $app_name],
                    ['app_name' => $app_name]);
            }
            $relation_id = $message['rid'];
            $category_id = $message['cid'];
            if ( ! $star_logic->isMarked($user, $module_id, $message_id)) {
                $star_data =& $app->getStarData($user, [
                    'mid' => $message_id,
                    'rid' => $relation_id,
                    'cid' => $category_id
                ]);
                $star_logic->add($user, $star_data);
                $star_count++;
            }
            $ret = $message_id;
            break;
        case 'grn.mail':
            $mid = cbpapi_trim_check($params['item'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'item');
            $mid = (int)$mid;
            if ( ! $star_logic->isMarked($user, $module_id, $mid)) {
                $star_data =& $app->getStarData($user, ['mid' => $mid]);
                $star_logic->add($user, $star_data);
                $star_count++;
            }
            $ret = $mid;
            break;
        case 'grn.cabinet':
            $fid = cbpapi_trim_check($params['item'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'item');
            $fid = (int)$fid;
            if ( ! $star_logic->isMarked($user, $module_id, $fid)) {
                $star_data =& $app->getStarData($user, ['fid' => $fid]);
                $star_logic->add($user, $star_data);
                $star_count++;
            }
            $ret = $fid;
            break;
        case 'grn.report':
            $rid = cbpapi_trim_check($params['item'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'item');
            if ( ! $star_logic->isMarked($user, $module_id, $rid)) {
                $star_data =& $app->getStarData($user, ['rid' => $rid]);
                $star_logic->add($user, $star_data);
                $star_count++;
            }
            $ret = $rid;
            break;
        case 'grn.bulletin':
            $aid = cbpapi_trim_check($params['item'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'item');
            $is_draft = cbpapi_trim_check(@$params['is_draft'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'is_draft');
            $unique_id = (int)$aid;
            if ($is_draft == 'true') {
                $unique_id = 'draft_' . $unique_id;
            }
            if ( ! $star_logic->isMarked($user, $module_id, $unique_id)) {
                $star_data =& $app->getStarData($user, [
                    'aid'  => $aid,
                    'type' => ($is_draft == 'true') ? 'draft' : '',
                ]);
                $star_logic->add($user, $star_data);
                $star_count++;
            }
            $ret = $unique_id;
            break;
    }

    return $ret;
}

if (isset($cbpapi_service)) {
    $parameters = $cbpapi_service->getRequestParameters();
    $star_items = $cbpapi_service->selectNodes($parameters, 'star_item');
    if ( ! isset($star_items)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'star_item']);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    // update star list
    require_once('star/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Star_Application $star_app */
    $star_app = $app_locator->getInstance('star');
    $star_app->updateStarList($login, true);

    // スターの制限値を取得
    require_once('star/config.csp');
    $config = GRN_Star_SystemLogic::getInstance();
    $limit = $config->getStarLimit();
    // get total of star
    require_once('star/logic.csp');
    $star_logic = GRN_Star_StarLogic::getInstance();
    $star_count = $star_logic->getCount($login);
    if ($limit != -1 && $star_count >= $limit) {
        require_once('star/error_code.csp');
        // application object
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $name = $locator->getName('star');
        $name = htmlspecialchars($name);
        cb_throw_error(E_GRN_STAR_OVER_LIMIT_VALUE,
            ['app_name' => $name], ['app_name' => $name],
            ['app_name' => $name]);
    }

    $added_stars = [];
    foreach ($star_items as $star) {
        $require_list = ['module_id', 'item'];
        foreach ($require_list as $field) {
            if ( ! isset($star['attributes'][$field])) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => $field]);
            }
        }
        $module_id = $star['attributes']['module_id'];
        $unique_id = $star['attributes']['item'];
        if (array_key_exists($module_id, $added_stars)
            && array_search($unique_id, $added_stars[$module_id]) !== false
        ) {
            continue;
        }

        if ( ! is_null($unique_id = _grn_star_add($login, $star['attributes'],
            $star_count))
        ) {
            $added_stars[$module_id][] = $unique_id;
        }
        if ($limit != -1 && $star_count > $limit) {
            require_once('star/error_code.csp');
            // application object
            require_once('grn/application.csp');
            $locator = GRN_ApplicationLocator::instance();
            $name = $locator->getName('star');
            $name = htmlspecialchars($name);
            cb_throw_error(E_GRN_STAR_OVER_LIMIT_VALUE,
                ['app_name' => $name], ['app_name' => $name],
                ['app_name' => $name]);
        }
    }

    require_once('cbpapi/star_logic.csp');
    $logic = GRN_CBPApi_StarLogic::getInstance();
    $logic->saveNow();
    $stars_for_view = [];
    foreach ($added_stars as $module => $added_star) {
        $star_for_view = $logic->getStarsForView($login, $module, $added_star);
        $stars_for_view = array_merge($stars_for_view, $star_for_view);
    }

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('star')]);
    $t->assign('star_for_view', $stars_for_view);
    $t->assign('action', $cbpapi_service->getAction());
    grn_cbpapi_response($t, __FILE__);
}


