<?php
if (isset($cbpapi_service)) {
    $node_parameter = $cbpapi_service->getRequestParameters();
    $personal_profile = $cbpapi_service->selectSingleNode($node_parameter,
        'personal_profile');
    $from_names = $cbpapi_service->selectNodes($personal_profile,
        'from_name');
    if (is_null($from_names) || ! is_array($from_names)) {
        $from_names = [];
    }

    // check require fields
    $require_fields = [
        'show_preview',
        'use_trash',
        'send_charset',
        'use_message_disposition_notification',
        'reply_message_disposition_notification'
    ];

    foreach ($require_fields as $field) {
        if ( ! isset($personal_profile['attributes'][$field])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => $field]);
        }
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getLoginUser();
    if ( ! is_object($user)) {
        cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
    }

    require_once('mail/utility.csp');
    $encodings = GRN_Mail_Utility::getAvailableEncodings();
    $utility = GRN_Mail_Utility::getInstance();
    $personal_config = $utility->getPersonalConfig($user);
    // set from name
    $from_name = [];
    foreach ($from_names as $f_name) {
        if ( ! isset($f_name['attributes']['account_id'])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'account_id']);
        }
        if ( ! isset($f_name['attributes']['name'])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'name']);
        }
        $account_id = $f_name['attributes']['account_id'];
        $name = $f_name['attributes']['name'];
        $account = $personal_config->getAccountData($account_id, false,
            true);
        if ( ! array_key_exists('user_id', $account)
             || $account['user_id'] != $user->getOID()
        ) {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
        }
        $personal_config->setAccountSendData($account_id, $name);
        $from_name[$account_id] = [
            'account_id' => $account_id,
            'from_name'  => $name
        ];
    }
    // get/set currently general setting
    $personal_config->getGeneralSetting($settings);
    if (strcmp($personal_profile['attributes']['show_preview'], 'true') === 0) {
        $show_preview = 'true';
        $settings['preview'] = 1;
    } else {
        $show_preview = 'false';
        $settings['preview'] = 0;
    }
    $charset = $personal_profile['attributes']['send_charset'];
    if (strcmp('auto', $charset) != 0
        && array_search($charset, $encodings) === false
    ) {
        require_once('mail/error_code.csp');
        cb_throw_error(E_GRN_MAIL_INVALID_SEND_CHARSET);
    }
    $settings['charset'] = $charset;
    $personal_config->setGeneralSetting($settings);
    // get/set trash setting
    $personal_config->getTrashSetting($use_trash, $save_days);
    if (strcmp($personal_profile['attributes']['use_trash'], 'true') === 0) {
        $use_trash = 1;
        $personal_config->setTrashSetting($use_trash, $save_days);
        $use_trash = 'true';
    } else {
        $use_trash = 0;
        $personal_config->setTrashSetting($use_trash, $save_days);
        $use_trash = 'false';
    }
    // send confirm message
    $settings = [
        'use_for_sending' => 0,
        'response'        => 'manual',
        'no_response_bcc' => 0
    ];
    $use_confirm_mail = 'false';
    if (strcmp($personal_profile['attributes']['use_message_disposition_notification'],
            'true') === 0
    ) {
        $settings['use_for_sending'] = 1;
        $use_confirm_mail = 'true';
    }

    $reply
        = $personal_profile['attributes']['reply_message_disposition_notification'];
    if (strcmp('None', $reply) === 0) {
        $settings['response'] = 'ignore';
    } elseif (strcmp('ReplyAlways', $reply) === 0) {
        $settings['response'] = 'auto';
    } elseif (strcmp('ReplyIncludingToOrCC', $reply) === 0) {
        $settings['response'] = 'auto';
        $settings['no_response_bcc'] = 1;
    } else    // ShowConfirmMessage
    {
        $settings['response'] = 'manual';
        $reply = 'ShowConfirmMessage';
    }
    $personal_config->setConfirmSetting($settings);

    // use status
    $personal_config->getStatusSetting($original_settings);
    if ($original_settings['use']) {
        $use_status = 'true';
    } else {
        $use_status = 'false';
    }
    $settings = [];
    if (array_key_exists('use_status', $personal_profile['attributes'])) {
        if (strcmp('true', $personal_profile['attributes']['use_status'])
            === 0
        ) {
            $use_status = 'true';
            $settings['use'] = true;
        } else {
            $use_status = 'false';
            $settings['use'] = false;
        }
    }
    $personal_config->setStatusSetting($settings);


    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('mail')]);
    // personal profile
    $t->assign('show_preview', $show_preview);
    $t->assign('send_charset', $charset);
    $t->assign('use_trash', $use_trash);
    $t->assign('use_status', $use_status);
    $t->assign('use_message_disposition_notification', $use_confirm_mail);
    $t->assign('reply_message_dispositon_notification', $reply);
    $t->assign('froms', $from_name);

    grn_cbpapi_response($t, __FILE__);
}

