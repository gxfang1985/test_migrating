<?php
if (isset($cbpapi_service)) {
    $node_parameter = $cbpapi_service->getRequestParameters();
    $include_system_profile = false;
    if (isset($node_parameter['attributes']['include_system_profile'])
        && strcmp('true',
            $node_parameter['attributes']['include_system_profile']) === 0
    ) {
        $include_system_profile = true;
    }
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getLoginUser();
    if ( ! is_object($user)) {
        cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
    }
    $user_id = $user->getOID();

    require_once('mail/utility.csp');
    $utility = GRN_Mail_Utility::getInstance();
    $personal_config = $utility->getPersonalConfig($user);
    $system_config = $utility->getSystemConfig();
    // personal setting
    $general_settings = null;
    $personal_config->getGeneralSetting($general_settings);
    $show_preview = $general_settings['preview'] ? 'true' : 'false';
    $charset = $general_settings['charset'];
    // use trash
    $use_trash = $personal_config->useTrash() ? 'true' : 'false';
    // use status
    $use_status = $personal_config->useStatus() ? 'true' : 'false';
    // allow send confirm mail
    $use_confirm_mail = $personal_config->useConfirmMail() ? 'true' : 'false';
    // send mail confirm setting
    $personal_config->getConfirmSetting($confirm_setting);
    if ($confirm_setting['response'] == 'ignore') {
        $reply = 'None';
    } elseif ($confirm_setting['response'] == 'auto') {
        if (intval($confirm_setting['no_response_bcc']) == 1) {
            $reply = 'ReplyIncludingToOrCC';
        } else {
            $reply = 'ReplyAlways';
        }
    } else {
        $reply = 'ShowConfirmMessage';
    }
    $from_name = [];
    $account_list =& $personal_config->getAccountDataList(false);
    foreach ($account_list as $key => $account) {
        $account_info =& $account['account_info'];
        $from_name[$key] = [
            'account_id' => $account['id'],
            'from_name'  => $account_info->from_name
        ];
    }

    // system setting
    $system_config->getUserPrivilegeSetting($system_settings);
    $system_config->getGeneralSetting($general_settings);
    $system_config->getSizeUserLimitSetting($size_settings, $user_id);
    $total_kb = $size_settings['user_limit_' . $user_id];
    $total_kb = $total_kb < 0 ? $total_kb : $total_kb * 1024;
    $receive_kb = $size_settings['receive_limit_' . $user_id];
    $send_kb = $size_settings['send_limit_' . $user_id];
    $auto_receive = $general_settings['auto_receive'];
    $scheduled_times = [];
    if (array_key_exists('scheduled_times', $auto_receive)) {
        $setting_values = $auto_receive['scheduled_times'];

        $today = getdate();
        $set_date_time = new CB_DateTime();
        $set_date_time->year = $today['year'];
        $set_date_time->month = $today['month'];
        $set_date_time->day = $today['mday'];

        foreach ($setting_values as $key => $item) {
            $set_date_time->hour = $item->hour;
            $set_date_time->minute = $item->minute;
            require_once('schedule/view_util.csp');
            //Provisional correction GRN2-4471(GRN2-3129)
            //UTC is changed into the fixed value CB_I18N::DEFAULT_TIMEZONE.
            $cutover = grn_schedule_convert_datetime_tz1_to_tz2($set_date_time,
                "UTC", CB_I18N::DEFAULT_TIMEZONE);
            $time = new CB_Time();
            $time->hour = $cutover->hour;
            $time->minute = $cutover->minute;
            $time->second = $cutover->second;

            $scheduled_times[$key] = $time;
        }
    }


    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('mail')]);
    // personal profile
    $t->assign('show_preview', $show_preview);
    $t->assign('send_charset', $charset);
    $t->assign('use_trash', $use_trash);
    $t->assign('use_status', $use_status);
    $t->assign('use_message_disposition_notification', $use_confirm_mail);
    $t->assign('reply_message_dispositon_notification', $reply);
    $t->assign('froms', $from_name);
    // system profile
    $t->assign('include_system_profile', $include_system_profile);
    $t->assign('mail_client', "true");
    $t->assign('check_new_mail_at_login', "true");
    $t->assign('system_setting', $system_settings);
    $t->assign('general_settings', $general_settings);
    $t->assign('scheduled_times', $scheduled_times);
    $t->assign('total_kb', $total_kb);
    $t->assign('receive_kb', $receive_kb);
    $t->assign('send_kb', $send_kb);

    grn_cbpapi_response($t, __FILE__);
}
