<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    require_once('mail/utility.csp');
    $mail_utility = GRN_Mail_Utility::getInstance();
    $personal_config = $mail_utility->getPersonalConfig($login);
    $folder_logic = $mail_utility->getFolderLogic();

    $param_search = [];
    $param_search = getParameterToSearch($login, $node_parameters);

    $folder_id = null;
    $search_text = $param_search['search_text'];
    $keywords = $param_search['search_keys'];
    $all_account = $param_search['all_account'];
    $start_ts = $param_search['start'];
    $last_ts = $param_search['end'];
    $folder_id = $param_search['folder_id'];
    $subfolder = false;
    // ソート設定をプロファイルからロード
    $sort = $sort_time = $reverse = null;
    $personal_config->getSortCondition($sort, $sort_time, $reverse);
    if (isset($param_search['search_sub_folders'])) {
        $subfolder = $param_search['search_sub_folders'];
        if ($subfolder == 'true') {
            $subfolder = true;
        } else {
            $subfolder = false;
        }
    }
    // simple search
    $search_keys = [];
    if (is_array($keywords)) {
        foreach ($keywords as $keyword) {
            $search_keys[$keyword] = true;
        }
    }
    $hid = -1;
    if ( ! is_null($all_account) && $all_account == 'true') {
        $account_id = '-1';
        $subfolder = true;
        if ( ! is_array($keywords)) {
            $keywords = [];
        }
        $search_keys['sub'] = true;
    } else {
        $account_id = $param_search['account_id'];
        // check account id
        if (strlen($account_id) > 0 && is_numeric($account_id)) {
            $account = $personal_config->getAccountData($account_id);
            if (is_null($account)) {
                require_once('mail/error_code.csp');
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }
            if ( ! array_key_exists('user_id', $account)
                 || $account['user_id'] != $login->getOID()
            ) {
                require_once('mail/error_code.csp');
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }

            // initialize special folders
            $folder_logic->initSpecialFolders($login, $account_id);
        } else {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
        }
        require_once('mail/resources.csp');
        // check category id
        if (strlen($folder_id) > 0 && is_numeric($folder_id)) {
            $hid = $folder_id;
            $folder_data = $folder_logic->getFolderData($hid, false);
            if (is_null($folder_data)) {
                require_once('mail/error_code.csp');
                cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
            }
            if ( ! array_key_exists('user_id', $folder_data)
                 || $folder_data['user_id'] != $login->getOID()
            ) {
                require_once('mail/error_code.csp');
                cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
            }
            if (array_key_exists('code', $folder_data)
                && strcmp($folder_data['code'], GRN_MAIL_FOLDER_CODE_ROOT) === 0
            ) {
                $subfolder = true;
            }
        } else {
            $subfolder = true;
            $folder_data = $folder_logic->getSpecialFolderData($account_id,
                GRN_MAIL_FOLDER_CODE_ROOT, false);
            $hid = $folder_data['id'];
        }
    }

    $mail_for_view = [];
    $mail_ids = [];

    require_once('cbpapi/mail_logic.csp');
    $cbpapi_mail_search = GRN_CBPApi_Mail_SearchLogic::getInstance();
    $mail_ids
        = $cbpapi_mail_search->getSearchItemsForMobileAPI($login,
        $search_keys, $search_text, 0, -1, 'ctime', $start_ts, $last_ts,
        $account_id, $hid, $subfolder);

    $cbpapi_mail_search = GRN_CBPApi_Mail_Logic::getInstance();
    $mail_for_view = $cbpapi_mail_search->getMailForViewByIds($login,
        $mail_ids);
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('mail')]);
    $t->assign('mails', $mail_for_view);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}

function getParameterToSearch(&$login, $node_parameters)
{
    require_once('cbpapi/util.csp');
    $param_search = [];
    $startdatetime = null;
    $enddatetime = null;
    $account_id = '';
    $search_text = '';
    $search_all_accounts = '';
    $title_search = '';
    $body_search = '';
    $from_search = '';
    $to_search = '';
    $cc_search = '';
    $bcc_search = '';
    $folder_id = null;
    $search_sub_folders = null;
    $search_keys = [];
    $required_fields = [
        'text',
        'search_all_accounts',
        'title_search',
        'body_search',
        'from_search',
        'to_search',
        'cc_search',
        'bcc_search'
    ];
    if (is_array($node_parameters)
        && array_key_exists('attributes', $node_parameters)
    ) {
        foreach ($required_fields as $field) {
            if ( ! array_key_exists($field, $node_parameters['attributes'])) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => $field]);
            }
        }
        $search_text = $node_parameters['attributes']['text'];
        if (isset($node_parameters['attributes']['start'])) {
            $startdate = $node_parameters['attributes']['start'];
            if (strlen($startdate) > 0) {
                $startdatetime = grn_cbpapi_parse_iso8601($startdate);
            }
        }
        $search_all_accounts
            = $node_parameters['attributes']['search_all_accounts'];
        if (isset($node_parameters['attributes']['search_sub_folders'])) {
            $search_sub_folders
                = $node_parameters['attributes']['search_sub_folders'];
        }
        if ($search_sub_folders == 'true') {
            $search_keys[] = 'sub';
        }
        $title_search = $node_parameters['attributes']['title_search'];
        if ($title_search == 'true') {
            $search_keys[] = 'subject';
        }
        $body_search = $node_parameters['attributes']['body_search'];
        if ($body_search == 'true') {
            $search_keys[] = 'data';
        }
        $from_search = $node_parameters['attributes']['from_search'];
        if ($from_search == 'true') {
            $search_keys[] = 'from';
        }
        $to_search = $node_parameters['attributes']['to_search'];
        if ($to_search == 'true') {
            $search_keys[] = 'to';
        }
        $cc_search = $node_parameters['attributes']['cc_search'];
        if ($cc_search == 'true') {
            $search_keys[] = 'cc';
        }
        $bcc_search = $node_parameters['attributes']['bcc_search'];
        if ($bcc_search == 'true') {
            $search_keys[] = 'bcc';
        }
        if (isset($node_parameters['attributes']['end'])) {
            $enddate = $node_parameters['attributes']['end'];
            if (strlen($enddate) > 0) {
                $enddatetime = grn_cbpapi_parse_iso8601($enddate);
            }
        }
        if (isset($node_parameters['attributes']['account_id'])) {
            $account_id = $node_parameters['attributes']['account_id'];
        }
        if (isset($node_parameters['attributes']['folder_id'])) {
            $folder_id = $node_parameters['attributes']['folder_id'];
        }
    }
    if ($startdatetime && $enddatetime) {
        if (cb_date_compare($startdatetime, $enddatetime) > 0) {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_INVALID_DATETIME);
        }
    }
    $starttimestamp = null;
    $endtimestamp = null;
    $param_search['start'] = null;
    if ($startdatetime) {
        $starttimestamp = convert_utc_to_local($startdatetime);
        $param_search['start'] = $starttimestamp;
    }
    $endtimestamp = convert_utc_to_local($enddatetime);
    $param_search['end'] = $endtimestamp;
    $param_search['account_id'] = $account_id;
    $param_search['search_text'] = $search_text;
    $param_search['all_account'] = $search_all_accounts;
    $param_search['folder_id'] = $folder_id;
    $param_search['search_keys'] = $search_keys;
    $param_search['search_sub_folders'] = $search_sub_folders;

    return $param_search;
}

function convert_utc_to_local($obj_date)
{
    static $timezone = null;
    if (is_null($timezone)) {
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();
    }
    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone('UTC');
    if (is_object($obj_date)) {
        if (is_a($obj_date, 'CB_DateTime')) {
            $timestamp->setDateTime($obj_date);
        }
    }
    $timestamp->setTimeZone($timezone);

    return $timestamp;
}

