<?php
if (isset($cbpapi_service)) {
    $node_parameter =& $cbpapi_service->getRequestParameters();
    $operations =& $cbpapi_service->selectNodes($node_parameter,
        'operation');
    if ( ! isset($operations)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'operation']);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $user =& $uum->getLoginUser();
    if ( ! is_object($user)) {
        cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
    }

    require_once('mail/utility.csp');
    $utility = GRN_Mail_Utility::getInstance();
    $personal_config =& $utility->getPersonalConfig($user);
    $system_config =& $utility->getSystemConfig();

    $mail_ids = [];
    foreach ($operations as $operation) {
        if ( ! isset($operation['attributes']['account_id'])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'account_id']);
        }
        $account_id = $operation['attributes']['account_id'];
        if (strlen($account_id) === 0) {
            $account_id = $personal_config->getDefaultAccountId(false, true,
                true);
        } else {
            // check account id
            if ( ! is_numeric($account_id)) {
                require_once('mail/error_code.csp');
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }
            $account = $personal_config->getAccountData($account_id);
            if (is_null($account)) {
                require_once('mail/error_code.csp');
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }
            if ( ! array_key_exists('user_id', $account)
                 || $account['user_id'] != $user->getOID()
            ) {
                require_once('mail/error_code.csp');
                cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
            }
        }

        if ( ! isset($operation['attributes']['mail_id'])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'mail_id']);
        }
        $mail_id = $operation['attributes']['mail_id'];

        if ( ! isset($operation['attributes']['type'])) {
            require_once('cbpapi/error_code.csp');
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'type']);
        }
        $cmd = $operation['attributes']['type'];

        // ignore if $mail_id is already processed.
        if (array_search($mail_id, $mail_ids) !== false) {
            continue;
        }

        $mail_logic =& $utility->getMailLogic();
        // check mail id
        if ( ! is_numeric($mail_id)) {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
        }
        $mail_data = $mail_logic->getMailData($mail_id, false);
        if (is_null($mail_data)) {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
        }
        if ( ! array_key_exists('user_id', $mail_data)
             || $mail_data['user_id'] != $user->getOID()
        ) {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_MAIL_ACCESS_DENIED);
        }
        // ignore sent mail, already confirmed mail.
        $sent_ok = true;
        if ((intval($mail_data['sent']) === 1)
            || (strncasecmp($mail_data['confirmation_status'], 'sent', 4) == 0)
            || (strcasecmp($mail_data['confirmation_status'], 'ignored') == 0)
        ) {
            $sent_ok = false;
        }
        $mail_logic->readMail($mail_id);
        if ($sent_ok) {
            if ($system_config->canUserUseConfirm()) {
                if (strcmp($cmd, 'open') === 0)        // send confirmed email
                {
                    $send_logic =& $utility->getSendLogic();
                    $send_logic->sendResponseOfConfirmationMail($user,
                        $account_id, $mail_id, 'manual');
                } else// when $cmd is equal to ignore, not send
                {
                    $mail_logic =& $utility->getMailLogic();
                    $mail_logic->setConfirmationStatus($mail_id, 'ignored');
                }
            } else {
                $mail_logic =& $utility->getMailLogic();
                $mail_logic->setConfirmationStatus($mail_id, 'ignored');
            }
        }
        $mail_ids[] = $mail_id;
    }
    require_once('cbpapi/mail_logic.csp');
    $mail_logic = GRN_CBPApi_Mail_Logic::getInstance();
    $mail_for_view = $mail_logic->getMailForViewByIds($user, $mail_ids);

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();

    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('mail')]);
    $t->assign('mails', $mail_for_view);

    grn_cbpapi_response($t, __FILE__);
}
