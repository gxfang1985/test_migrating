<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $startdate = null;
    $enddate = null;
    $folder_ids = [];
    if (array_key_exists('attributes', $node_parameters)) {
        if (array_key_exists('start', $node_parameters['attributes'])) {
            $startdate = $node_parameters['attributes']['start'];
        }
        if (array_key_exists('end', $node_parameters['attributes'])) {
            $enddate = $node_parameters['attributes']['end'];
        }
    }

    if ( ! $startdate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'start']);
    }

    require_once('mail/utility.csp');
    $utility = GRN_Mail_Utility::getInstance();
    $folder_logic = $utility->getFolderLogic();
    $folder_logic->initSpecialFoldersForAllAccounts($login);

    $children = array_key_exists('children', $node_parameters)
        ? $node_parameters['children'] : null;
    if (count($children) > 0) {
        foreach (array_keys($children) as $children_key) {
            $node = $children[$children_key]['node_name'];
            if ($node == 'folder_id') {
                $folder_id = array_key_exists('text', $children[$children_key])
                    ? $children[$children_key]['text'] : '';
                // check category id
                if (strlen($folder_id) > 0 && is_numeric($folder_id)) {
                    $folder_data = $folder_logic->getFolderData($folder_id, false,
                        false);
                    if (is_null($folder_data)) {
                        require_once('mail/error_code.csp');
                        cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
                    }
                    if ( ! array_key_exists('user_id', $folder_data)
                         || $folder_data['user_id'] != $login->getOID()
                    ) {
                        require_once('mail/error_code.csp');
                        cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
                    }
                    $folder_ids[] = $folder_id;
                } elseif (strlen($folder_id) > 0 && ! is_numeric($folder_id)) {
                    require_once('mail/error_code.csp');
                    cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
                }

            }
        }
    }

    // Receive all new mail from all account
    require_once('mail/utility.csp');
    $utility = GRN_Mail_Utility::getInstance();
    $recv_logic = $utility->getRecvLogic();
    $personal_config = $utility->getPersonalConfig($login);

    // メールのサイズ制限に対するチェック
    $system_config = $utility->getSystemConfig();
    $app = $utility->getMailApp();
    $max_receive_count = $app->getMaxReceiveCount();                // 最大受信件数

    // 外部通知設定取得
    require_once('notification/application.csp');
    $use_notify_mail = false;
    $locator = GRN_ApplicationLocator::instance();
    $notify_app = $locator->getInstance(GRN_NOTIFICATION_APP_ID);
    if ( ! is_null($notify_app)) {
        $temp = false;
        $notify_config = $notify_app->getPersonalConfig($login);
        $notify_config->getNotUseNotify($temp);
        if ( ! is_null($notify_config)
             && $notify_config->getNotUseNotify($temp)
        ) {
            $use_notify_mail = ! $temp;
        }
    }
    $system_config = $utility->getSystemConfig();
    // 総メールサイズ上限を取得
    $user_id = $login->getOID();
    $system_config->getSizeUserLimitSetting($size_settings, $user_id);
    // ユーザーの総メールサイズを取得
    $mail_size = $personal_config->getMailSize(null);

    // 総サイズチェック
    $size_over = false;
    if (($size_settings['user_limit_' . $user_id] >= 0)
        && ($mail_size >= $size_settings['user_limit_' . $user_id] * 1024
                          * 1024)
    ) {
        $size_over = true;
    }

    if ( ! $size_over) {
        // アカウントデータリスト
        $account_list = $personal_config->getAccountDataList(false);
        if (is_array($account_list)) {
            foreach (array_keys($account_list) as $temp_account_id) {
                // 受信可能なアカウントかチェック
                $no_account = $no_server = true;
                if ($personal_config->checkAccountForReceive($temp_account_id,
                    $no_account, $no_server)
                ) {
                    $remaining = 0;
                    // メール受信
                    $mail_ids = $recv_logic->recvMails($login, $temp_account_id,
                        $use_notify_mail, $max_receive_count, $remaining,
                        $tmp_notify_received_num);
                }
            }
        }
    }

    require_once('cbpapi/util.csp');
    $startdatetime = grn_cbpapi_parse_iso8601($startdate);
    $enddatetime = null;
    if ($enddate) {
        $enddatetime = grn_cbpapi_parse_iso8601($enddate);
        if (cb_date_compare($startdatetime, $enddatetime) > 0) {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_INVALID_DATETIME);
        }
    }
    $starttimestamp = null;
    $endtimestamp = null;
    $starttimestamp = convert_utc_to_local($startdatetime);
    $endtimestamp = convert_utc_to_local($enddatetime);

    require_once('cbpapi/mail_logic.csp');
    $mail_logic = GRN_CBPApi_Mail_Logic::getInstance();
    $candidate_items_version = [];
    $candidate_items_version = $mail_logic->getMailDataListByAPI($login,
        $starttimestamp, $endtimestamp, $folder_ids);
    require_once('cbpapi/util.csp');
    $item_name = 'mail_item';
    $items_version = grn_cbpapi_parse_item_versions($node_parameters,
        $item_name);

    $mail_for_view = grn_cbpapi_compare_item_versions($items_version,
        $candidate_items_version);
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('mail')]);
    $t->assign('mails', $mail_for_view);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}

function convert_utc_to_local($obj_date)
{
    static $timezone = null;
    if (is_null($timezone)) {
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();
    }
    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone('UTC');
    if (is_object($obj_date)) {
        if (is_a($obj_date, 'CB_DateTime')) {
            $timestamp->setDateTime($obj_date);
        }
    }
    $timestamp->setTimeZone($timezone);

    return $timestamp;
}

