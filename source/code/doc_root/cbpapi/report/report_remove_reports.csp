<?php
if (isset($cbpapi_service)) {
    $request =& $cbpapi_service->getRequestParameters();
    $report_ids = $cbpapi_service->selectNodesValue($request, 'report_id');
    if ( ! isset($report_ids)) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'report_id']);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();
    unset($uum);
    // get application name
    $app_name = cb_msg(GRN_REPORT_MODULE_ID, 'application_name');

    require_once('cbpapi/report_logic.csp');
    $cbpapi_logic = GRN_CBPApi_Report_Logic::getInstance();
    require_once('report/report_logic.csp');
    $logic = GRN_Report_Report_Logic::getInstance();
    require_once('report/controller_util.csp');
    $report_util = GRN_Report_Report_Controller_Utility::getInstance();
    foreach ($report_ids as $report_id) {
        $report = $logic->get($report_id);
        if ( ! $report) {
            cb_throw_error(E_GRN_RPRT_REPORT_NOT_FOUND);
        }
        if ( ! $report_util->isDeletable($login->getOID(),
            $report['col_creator'], $report_id)
        ) {
            cb_throw_error(E_GRN_RPRT_REPORT_DENY_DELETE);
        }

        $ret = $cbpapi_logic->deleteReport($report_id);
        if ( ! $ret) {
            require_once('report/error_code.csp');
            cb_throw_error(E_GRN_REPORT_REPORT_NOT_DELETED,
                ['app_name' => $app_name],
                ['app_name' => $app_name],
                ['app_name' => $app_name]);
        }
    }

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('report')]);

    grn_cbpapi_response($t, __FILE__);
}
