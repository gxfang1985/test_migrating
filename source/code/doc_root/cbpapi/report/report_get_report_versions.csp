<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    // get parameters of SOAP report
    $node_parameters = $cbpapi_service->getRequestParameters();
    $startdate = null;
    $enddate = null;
    if (array_key_exists('attributes', $node_parameters)) {
        if (array_key_exists('start', $node_parameters['attributes'])) {
            $startdate = $node_parameters['attributes']['start'];
        }
        if (array_key_exists('end', $node_parameters['attributes'])) {
            $enddate = $node_parameters['attributes']['end'];
        }
    }

    if ( ! $startdate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'start']);
    }

    require_once('cbpapi/util.csp');
    $startdatetime = grn_cbpapi_parse_iso8601($startdate);
    if ( ! $startdatetime) {
        cb_throw_error(E_COMMON_INVALID_DATETIME);
    }
    $enddatetime = null;
    if ($enddate) {
        $enddatetime = grn_cbpapi_parse_iso8601($enddate);
        if ( ! $enddatetime) {
            require_once('report/error_code.csp');
            cb_throw_error(E_COMMON_INVALID_DATETIME);
        }
        if (cb_date_compare($startdatetime, $enddatetime) > 0) {
            require_once('report/error_code.csp');
            cb_throw_error(E_COMMON_INVALID_DATETIME);
        }
    }
    $starttimestamp = null;
    $endtimestamp = null;
    $starttimestamp = convert_utc_to_local($startdatetime);
    $endtimestamp = convert_utc_to_local($enddatetime);

    require_once('cbpapi/util.csp');
    $item_name = 'report_item';
    $items_version = grn_cbpapi_parse_item_versions($node_parameters,
        $item_name);

    $target = GRN_REPORT_SEARCH_TARGET_ALL;
    if (isset($node_parameters['attributes'])
        && isset($node_parameters['attributes']['target'])
    ) {
        switch ($node_parameters['attributes']['target']) {
            case GRN_REPORT_SEARCH_TARGET_SEND:
            case GRN_REPORT_SEARCH_TARGET_DRAFT:
            case GRN_REPORT_SEARCH_TARGET_RECEIVED:
                $target = $node_parameters['attributes']['target'];
                break;
            case GRN_REPORT_SEARCH_TARGET_ALL:
            default:
                break;
        }
    }

    require_once('cbpapi/report_logic.csp');
    $report_logic = GRN_CBPApi_Report_Logic::getInstance();
    $candidate_items_version = $report_logic->getReportList($login, $target,
        $starttimestamp, $endtimestamp);

    require_once('report/controller_util.csp');
    $report_util = new GRN_Report_Report_Controller_Utility();
    $lastTimestamps
        = $report_util->getLastOperatedTimeList(array_keys($candidate_items_version));

    if ($lastTimestamps && count($lastTimestamps) > 0) {
        foreach ($candidate_items_version as $rid => $report) {
            if (array_key_exists($rid, $lastTimestamps)
                && $lastTimestamps > 0
            ) {
                $candidate_items_version[$rid]['version']
                    = $lastTimestamps[$rid];
            } else {
                $candidate_items_version[$rid]['version']
                    = $report['ctime']->unix_ts;
            }
        }
    }

    $reports_version = grn_cbpapi_compare_item_versions($items_version,
        $candidate_items_version);
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('report')]);
    $t->assign('reports', $reports_version);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}

function convert_utc_to_local($obj_date)
{
    if (is_null($obj_date)) {
        return null;
    }

    static $timezone = null;
    if (is_null($timezone)) {
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();
    }
    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone('UTC');
    if (is_object($obj_date)) {
        if (is_a($obj_date, 'CB_DateTime')) {
            $timestamp->setDateTime($obj_date);
        }
    }
    $timestamp->setTimeZone($timezone);

    return $timestamp->unix_ts;
}
