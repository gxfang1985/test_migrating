<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $node_modify_topic = $cbpapi_service->selectNodes($node_parameters,
        'modify_topic');
    if ( ! $node_modify_topic) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'modify_topic']);
    }
    $topics_for_view = [];
    $modify_topic_ids = [];
    require_once('cbpapi/bulletin_logic.csp');
    $cbpapi_bulletin_logic = GRN_CBPApi_Bulletin_Logic::getInstance();
    foreach (array_keys($node_modify_topic) as $modify_topic_key) {
        $params = [];
        $params
            = $cbpapi_bulletin_logic->getInputParamerters($cbpapi_service,
            $node_modify_topic[$modify_topic_key], true);
        $article_id = @$params['id'];
        require_once('bulletin/article.csp');
        $obj_article = GRN_Bulletin_ArticleManager::getInstance();
        if ( ! ($article = $obj_article->getArticle($login, $article_id))) {
            require_once('bulletin/error_code.csp');
            cb_throw_error(E_GRN_BULLETIN_ARTICLE_NOT_FOUND);
        }
        $category_id = $params['cid'];
        require_once('bulletin/category.csp');
        $category_manager = GRN_Bulletin_CategoryManager::getInstance();
        if (($category = $category_manager->getCategory($login,
            $category_id))
        ) {
            if ( ! $category->access($login, GRN_BULLETIN_ACCESS_W)) {
                require_once('bulletin/error_code.csp');
                cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
            }
        } else {
            require_once('bulletin/error_code.csp');
            cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
        }
        require_once('fw/string_util.csp');
        $subject = @ cb_trim($params['subject']);
        if (strlen($subject) <= 0) {
            require_once('bulletin/error_code.csp');
            cb_throw_error(E_GRN_BULLETIN_SUBJECT_NOT_INPUTTED);
        }

        $args = [
            'subject'    => $subject,
            'can_follow' => (array_key_exists('can_follow', $params)
                ? $params['can_follow'] : 0)
        ];

        $args['data'] = array_key_exists('data', $params) ? $params['data']
            : null;
        if (array_key_exists('html_text', $params)
            && strlen($params['html_text']) > 0
        ) {
            $args['html'] = $params['html_text'];
        } else {
            $args['html'] = null;
        }
        $now = new CB_TimeStampEx();

        if ($params['start_datetime']) {
            //Must check value in topic is unlimitted or (is not public and set start_datetime
            if (is_null($article->get('start_timestamp'))
                || ! $article->isPublished()
            ) {
                if ($params['start_datetime']->compare($now) <= 0) {
                    require_once('bulletin/error_code.csp');
                    cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
                }
            }
            if ($params['end_timestamp']) {
                if ($params['end_timestamp']->compare($params['start_datetime'])
                    <= 0
                ) {
                    require_once('bulletin/error_code.csp');
                    cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
                }
            }
        } else {
            if ($params['end_timestamp'] && ! $article->isPublished()) {
                require_once('bulletin/error_code.csp');
                cb_throw_error(E_GRN_BULLETIN_INVALID_TERM);
            }
        }
        if ($article->isPublished()
            && ($article->get('start_timestamp')
                || $article->get('end_timestamp'))
            && ($params['start_datetime'] || $params['end_timestamp'])
        ) {
            $args['start_timestamp'] = $article->get('start_timestamp');
            $args['end_timestamp'] = $params['end_timestamp'];
            $args['start_is_datetime'] = $article->get('start_is_datetime');
            $args['end_is_datetime'] = $params['end_is_datetime'];
        } else {
            $args['start_timestamp'] = $params['start_datetime'];
            $args['end_timestamp'] = $params['end_timestamp'];
            $args['start_is_datetime'] = $params['start_is_datetime'];
            $args['end_is_datetime'] = $params['end_is_datetime'];
        }
        $args['creator_group_id'] = null;
        if (array_key_exists('creator_group_id', $params)
            && $params['creator_group_id']
        ) {
            $args['creator_group'] = $params['creator_group_id'];
        }
        $article_creator = $article->get('creator');
        if ( ! is_null($article_creator)) {
            $args['creator_id'] = $article_creator->getOID();
        } else {
            $args['user_deleted'] = 1;
            if ( ! is_null($creator_group = $article->get('creator_group'))) {
                $args['creator_group'] = $creator_group->getOID();
            }
        }

        $args['manually_enter_sender'] = $params['manually_enter_sender'];

        $old_publish_status = $article->isPublished();

        $is_notified = cb_at($params, 'is_notified');
        $args['notifyFlag'] = $is_notified === 'false' ? false : true;

        $article->setProperties($login, $args);

        // attached files
        $attached_files = [];
        $original_files = [];

        $original_files = $article->getFiles();

        $remove_file_ids = [];
        if (array_key_exists('remove_file_ids', $params)) {
            $remove_file_ids = $params['remove_file_ids'];
            if (count($remove_file_ids) > 0) {
                foreach (array_keys($remove_file_ids) as $remove_key) {
                    if (array_key_exists($remove_key, $original_files)) {
                        unset($original_files[$remove_key]);
                        $article->deleteFile($login, $remove_key);
                    }
                }
            }
        }
        // get new attach files
        if (array_key_exists('files', $params)) {
            $new_files = $params['files'];
            foreach ($new_files as $file_key => $value) {
                $attached_files['file' . $file_key]
                    = cbpapi_upload_file($value);
            }
        }
        if (count($attached_files) > 0) {
            foreach (array_keys($attached_files) as $key) {
                $article->addFile($login, $attached_files[$key]);
            }
        }

        $aid = $article->getOID();
        $modify_topic_ids[] = $aid;

        if ($args['notifyFlag']) {
            //send notification
            $scheduling_event = new grn\bulletin\NotificationSchedulingEvent();
            if ($article->isPublished()) {
                //scheduling service, delete record.
                $scheduling_event->unRegisterEvent($article->getOID());

                require_once('bulletin/notification.csp');
                $bulletin_notification_listener
                    = new GRN_Bulletin_NotificationListener();
                $bulletin_notification_listener->registerBackgroundNotification($old_publish_status
                    ? 'update' : 'create',
                    $article,
                    $article->getSenderForNotification($login),
                    $article->get('subject'),
                    $article->get('data'),
                    $article->get('mtime'));
            } else {
                //scheduling service, modify record.
                $scheduling_event->registerEvent($article->getOID(),
                    $article->get('start_timestamp'));
            }
        }
    }

    // get send for view
    $topics_for_view = $cbpapi_bulletin_logic->getTopicForViewByIds($login,
        $modify_topic_ids);
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('bulletin')]);
    $t->assign('topics', $topics_for_view);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}

