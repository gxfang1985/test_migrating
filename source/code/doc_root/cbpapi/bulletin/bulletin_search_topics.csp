<?php
if (isset($cbpapi_service)) {
    require_once('cbpapi/error_code.csp');
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $G_bulletin_login = $uum->getLoginUser();

    $action = $cbpapi_service->getAction();
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $attributes =& $node_parameters['attributes'];

    // text
    $text = @$attributes['text'];
    if ( ! isset($text)) {
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'text']);
    }

    $sensitive = @$attributes['sensitive'] === 'true' ? 1 : 0;

    // check category id
    $category_id = @$attributes['category_id'];
    if ( ! isset($category_id)) {
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'category_id']);
    }
    if ( ! is_numeric($category_id) || $category_id < -2) {
        require_once('bulletin/error_code.csp');
        cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
    }
    $category_id = (int)$category_id;
    // check existed category
    if ($category_id > 0) {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $G_bulletin = $locator->getInstance('bulletin');
        $search_category = $G_bulletin->getCategory($G_bulletin_login,
            $category_id);
        if ( ! $search_category) {
            require_once('bulletin/error_code.csp');
            cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
        }
    }

    // check start and end for search normal BU
    require_once('cbpapi/util.csp');
    require_once('cbpapi/bulletin_logic.csp');
    $start = @$attributes['start'];
    $start_ts = null;
    $end_ts = null;
    if ($category_id >= 0) {
        if ( ! isset($start)) {
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => 'start']);
        }
        $startdatetime = grn_cbpapi_parse_iso8601($start);
        $start_ts = convert_datetime_to_timestamp($startdatetime);
        $end = @$attributes['end'];
        if ($end) {
            $enddatetime = grn_cbpapi_parse_iso8601($end);
            $startdatetime_ex = new CB_DateTimeEx($startdatetime);
            if ($startdatetime_ex->compare($enddatetime) > 0) {
                require_once('bulletin/error_code.csp');
                cb_throw_error(E_GRN_BULLETIN_INVALID_TERM,
                    ['app_name' => cb_msg('grn.bulletin', 'application_name')]);
            }
            $end_ts = convert_datetime_to_timestamp($enddatetime);
        }
    }

    // check required field
    $required_fields = [];
    if ($category_id >= 0) {
        $required_fields = [
            'search_sub_categories',
            'title_search',
            'body_search',
            'from_search',
            'follow_search'
        ];
    } else {
        $required_fields = ['title_search', 'body_search'];
    }

    foreach ($required_fields as $field) {
        $value = @$attributes[$field];
        if ( ! isset($value)) {
            cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                ['param' => $field]);
        }
    }

    $search_sub_categories = @$attributes['search_sub_categories'] === 'true'
        ? 1 : 0;

    // item search
    $items = [];
    $items['subject'] = @$attributes['title_search'] === 'true' ? 1 : 0;
    $items['data'] = @$attributes['body_search'] === 'true' ? 1 : 0;
    $items['creator_name'] = @$attributes['from_search'] === 'true' ? 1 : 0;
    $items['follow'] = @$attributes['follow_search'] === 'true' ? 1 : 0;

    $bulletin_logic = GRN_CBPApi_Bulletin_Logic::getInstance();
    $bu_ids = $bulletin_logic->getSearchItems($text, $sensitive,
        $start_ts, $end_ts, $category_id,
        $search_sub_categories, $items);

    // draft
    if ($category_id == -2) {
        $topics_for_view = $bulletin_logic->getTopicForViewByIds($login,
            $bu_ids, true);
    } else // wait and normal
    {
        $topics_for_view = $bulletin_logic->getTopicForViewByIds($login,
            $bu_ids, false);
    }

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('bulletin')]);
    $t->assign('topics', $topics_for_view);
    $t->assign('action', $action);
    grn_cbpapi_response($t, __FILE__);
}
