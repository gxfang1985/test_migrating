<?php
if (isset($cbpapi_service)) {
    $request = $cbpapi_service->getRequestParameters();
    $user_proxies = $cbpapi_service->selectSingleNode($request, 'proxies');
    $user_proxies = $cbpapi_service->selectNodes($user_proxies, 'user_proxy');

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    require_once('workflow/config.csp');
    $config = GRN_Workflow_Configs::getInstance();
    $config = $config->getSystemConfig();

    //GRN2-1916
    // check set proxy authoriry
    $login_user = $uum->getLoginUser();
    $user_id_login = $login_user->getOID();
    require_once('grn/system_logic.csp');
    $system_logic = GRN_System::getInstance();
    //check: Allow Set Proxies
    if ( ! $config->getPersonalAgentSetting()) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_AGENT_PERSONAL_SETTING_NOTUSE);
    }
    $proxies_for_view = [];

    if ($config->getSubstituteApplication() == false
        && $config->getSubstituteApproval() == false
    ) {
        $proxies_for_view = null;
    } else {
        if ( ! is_null($user_proxies) && is_array($user_proxies)) {
            foreach ($user_proxies as $proxy) {
                $user_id = null;
                if (isset($proxy['attributes']['user_id'])) {
                    $user_id = $proxy['attributes']['user_id'];
                }
                $user = $uum->getUserInfo($user_id);
                if ( ! $user) {
                    cb_throw_error(E_GRN_USER_NOT_FOUND);
                }
                $children = [];
                if (isset($proxy['children']) && is_array($proxy['children'])) {
                    $children =& $proxy['children'];
                }
                $approver_id = null;
                $applicant_id = null;
                foreach ($children as $child) {
                    $node_name = $child['node_name'];
                    if (strcasecmp('proxy_approver', $node_name) === 0) {
                        $approver_id
                            = isset($child['attributes']['approver_id'])
                            ? $child['attributes']['approver_id'] : null;
                    } elseif (strcasecmp('proxy_applicant', $node_name) === 0) {
                        $applicant_id
                            = isset($child['attributes']['applicant_id'])
                            ? $child['attributes']['applicant_id'] : null;
                    }
                }
                if ( ! is_null($approver_id)) {
                    $approver = $uum->getUser($approver_id);
                    if ($approver == false) {
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_AGENT_NOT_FOUND);
                    }
                }

                if ( ! is_null($applicant_id)) {
                    $applicant = $uum->getUser($applicant_id);
                    if ($applicant == false) {
                        require_once('workflow/error_code.csp');
                        cb_throw_error(E_GRN_WRKF_AGENT_NOT_FOUND);
                    }
                }
                if (($user_id === $user_id_login)) {
                    if ($config->getSubstituteApplication() == true) {
                        $config->setAgent($user_id, [$applicant_id],
                            GRN_WORKFLOW_AGENT_TYPE_PETITION);
                    }
                    if ($config->getSubstituteApproval() == true) {
                        $config->setAgent($user_id, [$approver_id],
                            GRN_WORKFLOW_AGENT_TYPE_APPROVAL);
                    }
                    $agents = $config->getAgent($user_id);
                    $proxies_for_view[$user_id] = [
                        'proxy_approver'  => @$agents[GRN_WORKFLOW_AGENT_TYPE_APPROVAL]['agent'],
                        'proxy_applicant' => @$agents[GRN_WORKFLOW_AGENT_TYPE_PETITION]['agent']
                    ];
                }
            }
        }
    }
    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();

    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('workflow')]);
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('proxies', $proxies_for_view);

    grn_cbpapi_response($t, __FILE__);
}
