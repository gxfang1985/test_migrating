<?php
if (isset($cbpapi_service)) {
    require_once('workflow/resources.csp');
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $login_id = $login->getOID();
    $screen = new \grn\cbpapi\screen\WorkflowGetRequest();

    //check is a Admin?
    require_once('grn/system_logic.csp');
    $system = GRN_System::getInstance();
    if ( ! $system->adminApplication('workflow', $login)) {
        cb_throw_error(E_GRN_NO_SYSTEM_PRIVILEGE);
    }

    //get Parametter
    $node_parameter = $cbpapi_service->getRequestParameters();

    if ( ! isset($node_parameter['children'][0]['attributes']['request_form_id'])) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'request_form_id']);
    }
    $param = $node_parameter['children'][0]['attributes'];
    //Get Data
    $form_request_ids = [];
    $condition = [];

    $form_id = $param['request_form_id'];
    $option = [];
    $status_list = [];
    if (array_key_exists("filter", $param) == false) {
        $param['filter'] = "All";
    }

    if ($param['filter'] === "In progress") {
        $status_list = array_merge($status_list,
            [
                GRN_WORKFLOW_STATUS_UNPROCESSING,
                GRN_WORKFLOW_STATUS_IN_PROCESS,
                GRN_WORKFLOW_STATUS_REMAND
            ]);
    } elseif ($param['filter'] === "Approved") {
        $status_list[] = GRN_WORKFLOW_STATUS_ACCEPTANCE;
    } elseif ($param['filter'] === "Rejected") {
        $status_list[] = GRN_WORKFLOW_STATUS_REJECTION;
    } elseif ($param['filter'] === "Cancel") {
        $status_list[] = GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL;
    } elseif ($param['filter'] === "Complete") {
        $status_list[] = GRN_WORKFLOW_STATUS_FINISHED;
    } else {
        $status_list = array_merge($status_list,
            [
                GRN_WORKFLOW_STATUS_UNPROCESSING,
                GRN_WORKFLOW_STATUS_IN_PROCESS,
                GRN_WORKFLOW_STATUS_REMAND,
                GRN_WORKFLOW_STATUS_ACCEPTANCE,
                GRN_WORKFLOW_STATUS_REJECTION,
                GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL,
                GRN_WORKFLOW_STATUS_FINISHED
            ]);
    }
    //Create Status Condition
    $option['condition'] = [];
    $option['condition'][] = [
        'column'   => 'p.col_status',
        'value'    => $status_list,
        'operator' => 'IN'
    ];
    //Create item foreign_key Condition
    $option['condition'][] = [
        'column'   => 'd.col_foreign_key',
        'value'    => [
            'grn.workflow.string_single',
            'grn.workflow.string_multiple'
        ],
        'operator' => 'IN'
    ];

    //Create Start and End Date Condition
    if (isset($param['start_request_date'])) {
        $start_request_date = cbpapi_trim_check($param['start_request_date'],
            E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'start_request_date');
        $start_request_date = grn_cbpapi_parse_iso8601($start_request_date);
        if ( ! $start_request_date) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_INVALID_DATE_TERM);
        }
        $start_date = new CB_DateTimeEx($start_request_date);

        if (isset($param['end_request_date'])) {
            $end_request_date = cbpapi_trim_check($param['end_request_date'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'end_request_date');
            $end_request_date = grn_cbpapi_parse_iso8601($end_request_date);
            if ( ! $end_request_date) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_INVALID_DATE_TERM);
            }
            $end_date = new CB_DateTimeEx($end_request_date);
            if (cb_date_compare($start_request_date, $end_request_date) > 0) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_INVALID_DATE_TERM);
            }
        } else {
            $ts = new CB_TimeStampEx(null, 'UTC');
            $end_date = $ts->getDateTime();
        }

        $ts = new CB_TimeStampEx(null, 'UTC');
        $ts->setDateTime($start_date);
        $start_date_time = $ts->unix_ts;
        $ts->setDateTime($end_date);
        $end_date_time = $ts->unix_ts;

        $option['condition'][] = [
            'column'   => 'p.col_ctime',
            'value'    => $start_date_time,
            'operator' => '>='
        ];
        $option['condition'][] = [
            'column'   => 'p.col_ctime',
            'value'    => $end_date_time,
            'operator' => '<='
        ];
    }

    //Create Applicant Condition
    $applicant = [];
    if (isset($param['applicant'])) {
        $applicant[] = $param['applicant'];
        $option['condition'][] = [
            'column'   => 'p.col_user',
            'value'    => $applicant,
            'operator' => 'IN'
        ];
    }

    //Create List Option
    if (isset($param['start_to_get_information_from']) !== false
        && isset($param['maximum_request_amount_to_get']) !== false
    ) {
        $option['list'] = [];
        $option['list']['offset'] = $param['start_to_get_information_from'];
        $option['list']['limit'] = $param['maximum_request_amount_to_get'];
    }

    //Search Petition ID
    require_once('workflow/petition_logic_base.csp');
    $petition_logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();
    $petition_id_list = $petition_logic_base->getIdListEx($form_id, $option);
    //Create Parameter Translation for Petition
    $translation_map_petition = [
        'pid'             => '_id',              //Petition ID
        'petition_number' => 'petition_number',  //Petition Name
        'name'            => 'name',             //Petition Name
        'form_name'       => 'form_name',        //Petition Form Name
        'status'          => 'status',           //Petition Status
        'user'            => 'user',             //Petition User
        'user_name'       => 'user_name',        //Petition User Name
        'ctime'           => 'ctime',            //Petition Create Time
        'transactor_id'   => 'transactor',       //Petition Transactor
        'transactor_name' => 'transactor_name',  //Petition Transactor Name
        'icon_type'       => 'icon_type',        //Petition Icon Type
        'icon_id'         => 'icon_id',          //Petition Icon ID
        'icon_url'        => 'icon_url',         //Petition Icon URL
        'priority'        => 'priority',         //Petition Priority
    ];

    //Get category ID for each Pertiton
    require_once('cbpapi/workflow_logic.csp');
    $cbpapi_logic = GRN_CBPApi_Workflow_Logic::getInstance();
    $category = $cbpapi_logic->getCategoryByFormRequestID($form_id);

    //Get Petition List for View
    require_once('workflow/controller_util.csp');
    $petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();

    $option['condition'] = [];
    $petition_list_for_view = [];
    if (count($petition_id_list) !== 0) {
        $option['condition'][] = [
            'column'   => '_id',
            'value'    => $petition_id_list,
            'operator' => 'IN'
        ];
        unset($option['list']);
        $petition_list_for_view
            = $petition_util->getListView($translation_map_petition, $form_id,
            $option);

        //Get Last Accept Path Step
        require_once('workflow/controller_util.csp');
        $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
        foreach (array_keys($petition_list_for_view) as $petition_id) {
            $petition_for_view =& $petition_list_for_view[$petition_id];
            $applicant = $uum->getUser($petition_for_view['user']);
            if ($applicant) {
                $petition_for_view['user_valid'] = $applicant->get('valid');
            }

            if (array_key_exists('transactor_id', $petition_for_view)) {
                $transactor
                    = $uum->getUser($petition_for_view['transactor_id']);
                if ($transactor) {
                    $petition_for_view['transactor_valid']
                        = $transactor->get('valid');
                }
            }

            //Get Last Path Step Information
            $path_steps = $controller_util->getPathInfo($petition_id, false,
                CB_DATABASE_NO_LOCK);
            $path_step
                =& $controller_util->getLastAcceptancePathStep(current($path_steps));
            $transactor = $path_step['users'];
            $transactor_num = count($path_step['users']);
            if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
                $transactor = array_slice($transactor, 0,
                    GRN_WORKFLOW_SHOW_MAX_USER_NUM);
            }


            $petition_list_for_view[$petition_id]['approve_time']
                = $screen->getLastApprovedTime($path_step);
            $petition_list_for_view[$petition_id]['transactor']
                = $transactor;
            $petition_list_for_view[$petition_id]['transactor_num']
                = $transactor_num;
            $petition_list_for_view[$petition_id]['CategoryID']
                = $category['CategoryID'];
            $petition_list_for_view[$petition_id]['CategoryName']
                = $category['CategoryName'];
            $petition_list_for_view[$petition_id]['form_id'] = $form_id;
            $petition_list_for_view[$petition_id]['ctime']
                = grn_cbpapi_iso8601($petition_list_for_view[$petition_id]['ctime']);
        }
    }
    //filter date Approval
    if (isset($param['start_approval_date'])) {
        $start_approval_date = cbpapi_trim_check($param['start_approval_date'],
            E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'start_approval_date');
        $start_approval_date = grn_cbpapi_parse_iso8601($start_approval_date);
        if ( ! $start_approval_date) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_INVALID_DATE_TERM);
        }
        $end_approval_date = null;
        if (isset($param['end_approval_date'])) {
            $end_approval_date = cbpapi_trim_check($param['end_approval_date'],
                E_GRN_CBPAPI_EMPTY_PARAMETER_VALUE, 'end_approval_date');
            $end_approval_date = grn_cbpapi_parse_iso8601($end_approval_date);
            if ( ! $end_approval_date) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_INVALID_DATE_TERM);
            }
            if (cb_date_compare($start_approval_date, $end_approval_date) > 0) {
                require_once('message/error_code.csp');
                cb_throw_error(E_GRN_MESSAGE_INVALID_TERM_PARAM,
                    ['app_name' => cb_msg('grn.workflow', 'application_name')]);
            }
        }


        $starttimestamp = $screen->convert_utc_to_local($start_approval_date);
        $endtimestamp = $screen->convert_utc_to_local($end_approval_date);
        foreach ($petition_list_for_view as $key => $pid) {
            require_once("fw/date.csp");
            if (isset($pid['approve_time'])) {
                $time_approval = new CB_TimeStampEx($pid['approve_time']);
                $from_start = $time_approval->compare($starttimestamp);
                $to_end = $time_approval->compare($endtimestamp);
                if ($from_start <= 0 || 0 < $to_end) {
                    unset($petition_list_for_view[$key]);
                }
            } else {
                unset($petition_list_for_view[$key]);
            }
        }
    }
    //filter Approver
    if (isset($param['last_approval'])) {
        foreach ($petition_list_for_view as $key => $pid) {
            if (strcasecmp($pid['transactor'][0]['col_user'],
                    $param['last_approval']) != 0
            ) {
                unset($petition_list_for_view[$key]);
            }
        }
    }
    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('workflow')]);
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('list_data', $petition_list_for_view);

    grn_cbpapi_response($t, __FILE__);
}


