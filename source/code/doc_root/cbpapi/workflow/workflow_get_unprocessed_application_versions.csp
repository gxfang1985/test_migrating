<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $login_id = $login->getOID();
    //Get Controller Utilities
    require_once('workflow/controller_util.csp');
    $folder_util = GRN_Workflow_Folder_Controller_Utility::getInstance();
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    //Check Initialize User
    $initialize_flag = false;
    if ($folder_util->isInitializeUser($login_id)) {
        $initialize_flag = true;
        $folder_util->initializeUser($login_id);
    }

    $unprocessed_folder = [];

    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $unprocessed_folder = $logic->getByForeignKey($login_id,
        'UNPROCESSED_FOLDER_FOREIGN_KEY');

    $app_list_unprocessed_folder = [];
    $application_ids = [];
    require_once('cbpapi/workflow_logic.csp');
    $cbpapi_logic = GRN_CBPApi_Workflow_Logic::getInstance();
    if ( ! $initialize_flag) {
        //Get Unprocessed Folder Data
        $unprocessed_folder_id = array_key_exists('_id', $unprocessed_folder)
            ? $unprocessed_folder['_id'] : '';
        $app_list_unprocessed_folder
            = $cbpapi_logic->getAppicationByFolderID($login_id,
            $unprocessed_folder_id);
        if (is_array($app_list_unprocessed_folder)
            && count($app_list_unprocessed_folder) > 0
        ) {
            foreach (array_keys($app_list_unprocessed_folder) as $app_id) {
                $application_ids[] = $app_id;
            }
        }
    }
    $app_for_view = [];
    $app_for_view_result = [];
    $app_for_view = $cbpapi_logic->getAppsVersionForViewByIds($login,
        $application_ids, $unprocessed_folder, CB_DATABASE_NO_LOCK);
    if (count($app_for_view) > 0) {
        foreach (array_keys($app_for_view) as $app_id) {
            $operation_mode = 'confirm';
            if (array_key_exists('operation_mode', $app_for_view[$app_id])) {
                $operation_mode = $app_for_view[$app_id]['operation_mode'];
            }
            // ignore [通知内容を確認して、「確認する」を押してください。]
            if ($app_for_view[$app_id]['status']
                == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                || $app_for_view[$app_id]['status']
                   == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
            ) {
                if ('view_only' != $operation_mode) {
                    continue;
                }
            } elseif (GRN_WORKFLOW_STATUS_REMAND
                      == $app_for_view[$app_id]['status']
            ) {
                if ('confirm' == $operation_mode
                    || 'reapply' == $operation_mode
                ) {
                    continue;
                }
            } elseif ('change_transactor' == $operation_mode) {
                continue;
            } elseif ('reapply' == $operation_mode) {
                continue;
            }

            // ignore application which the content can be changed on the current route. setting at "項目のアクセス権の設定",when user do not use kunai to access.
            if (is_array($app_for_view[$app_id]['items'])
                && count($app_for_view[$app_id]['items']) > 0
                && ! (array_key_exists('HTTP_USER_AGENT', $_SERVER)
                      && preg_match('/^Cybozu Mobile KUNAI for /',
                        $_SERVER['HTTP_USER_AGENT']))
            ) {
                $item_data_list = $app_for_view[$app_id]['items'];
                $is_edit_item = false;
                foreach (array_keys($item_data_list) as $item_data_id) {
                    $view_mode = array_key_exists('view_mode',
                        $item_data_list[$item_data_id])
                        ? $item_data_list[$item_data_id]['view_mode'] : 'view';
                    if ($view_mode == 'edit') {
                        $is_edit_item = true;
                        break;
                    }
                }
                if ($is_edit_item) {
                    continue;
                }
            }
            $app_for_view_result[$app_id]['id'] = $app_for_view[$app_id]['id'];
            $app_for_view_result[$app_id]['version']
                = $app_for_view[$app_id]['version'];
        }
        unset($app_for_view);
    }
    $applications = [];
    require_once('cbpapi/util.csp');
    $item_name = 'application_item';
    $applications_version = grn_cbpapi_parse_item_versions($node_parameters,
        $item_name);
    $applications
        = grn_cbpapi_compare_item_versions($applications_version,
        $app_for_view_result);
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;
    $t->assign('applications', $applications);
    $t->assign('action', $action);
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('workflow')]);
    grn_cbpapi_response($t, __FILE__);
}
