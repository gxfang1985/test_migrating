<?php
if (isset($cbpapi_service)) {
    $action = $cbpapi_service->getAction();
    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $startdate = null;
    $enddate = null;
    if (array_key_exists('attributes', $node_parameters)) {
        if (array_key_exists('start', $node_parameters['attributes'])) {
            $startdate = $node_parameters['attributes']['start'];
        }
        if (array_key_exists('end', $node_parameters['attributes'])) {
            $enddate = $node_parameters['attributes']['end'];
        }
    }
    if ( ! $startdate) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'start']);
    }
    require_once('cbpapi/util.csp');
    $startdatetime = grn_cbpapi_parse_iso8601($startdate);
    $enddatetime = null;
    if ($enddate) {
        $enddatetime = grn_cbpapi_parse_iso8601($enddate);
        if (cb_date_compare($startdatetime, $enddatetime) > 0) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_INVALID_DATE_TERM);
        }
    }
    $starttimestamp = null;
    $endtimestamp = null;
    $starttimestamp = convert_utc_to_local($startdatetime);
    $endtimestamp = convert_utc_to_local($enddatetime);
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $login_id = $login->getOID();
    //Get Controller Utilities
    require_once('workflow/controller_util.csp');
    $folder_util = GRN_Workflow_Folder_Controller_Utility::getInstance();
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    //Check Initialize User
    $initialize_flag = false;
    if ($folder_util->isInitializeUser($login_id)) {
        $initialize_flag = true;
        $folder_util->initializeUser($login_id);
    }

    //Get folder
    $received_folder = [];
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $received_folder = $logic->getByForeignKey($login_id,
        'IN_FOLDER_FOREIGN_KEY');

    //Get Current Folder Folder Relation
    $app_list_received_folder = [];
    $application_ids = [];
    require_once('cbpapi/workflow_logic.csp');
    $cbpapi_logic = GRN_CBPApi_Workflow_Logic::getInstance();
    if ( ! $initialize_flag) {
        //Get Unprocessed Folder Data
        $received_folder_id = array_key_exists('_id', $received_folder)
            ? $received_folder['_id'] : '';
        $app_list_received_folder
            = $cbpapi_logic->getAppicationByFolderID($login_id,
            $received_folder_id, $starttimestamp, $endtimestamp);
        if (is_array($app_list_received_folder)
            && count($app_list_received_folder) > 0
        ) {
            foreach (array_keys($app_list_received_folder) as $app_id) {
                $application_ids[] = $app_id;
            }
        }
    }
    $app_for_view = [];
    $app_for_view_result = [];
    $app_for_view = $cbpapi_logic->getAppsVersionForViewByIds($login,
        $application_ids, $received_folder, CB_DATABASE_NO_LOCK);
    if (count($app_for_view) > 0) {
        foreach (array_keys($app_for_view) as $app_id) {
            // ignore application which the content can be changed on the current route. setting at "項目のアクセス権の設定"
            if (is_array($app_for_view[$app_id]['items'])
                && count($app_for_view[$app_id]['items']) > 0
            ) {
                $item_data_list = $app_for_view[$app_id]['items'];
                $is_edit_item = false;
                foreach (array_keys($item_data_list) as $item_data_id) {
                    $view_mode = array_key_exists('view_mode',
                        $item_data_list[$item_data_id])
                        ? $item_data_list[$item_data_id]['view_mode'] : 'view';
                    if ($view_mode == 'edit') {
                        $is_edit_item = true;
                        break;
                    }
                }
                if ($is_edit_item) {
                    continue;
                }
            }
            $app_for_view_result[$app_id]['id'] = $app_for_view[$app_id]['id'];
            $app_for_view_result[$app_id]['version']
                = $app_for_view[$app_id]['version'];
        }
        unset($app_for_view);
    }
    require_once('cbpapi/util.csp');
    $item_name = 'application_item';
    $applications_version = grn_cbpapi_parse_item_versions($node_parameters,
        $item_name);

    $applications = [];
    $applications = grn_cbpapi_compare_item_versions($applications_version,
        $app_for_view_result);
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;
    $t->assign('applications', $applications);
    $t->assign('action', $action);
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('workflow')]);
    grn_cbpapi_response($t, __FILE__);
}

function convert_utc_to_local($obj_date)
{
    static $timezone = null;
    if (is_null($timezone)) {
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getCurrentTimezone();
    }
    $timestamp = new CB_TimeStampEx();
    $timestamp->setTimeZone('UTC');
    if (is_object($obj_date)) {
        if (is_a($obj_date, 'CB_DateTime')) {
            $timestamp->setDateTime($obj_date);
        }
    }
    $timestamp->setTimeZone($timezone);

    return $timestamp;
}
