<?php
if (isset($cbpapi_service)) {
    require_once('workflow/resources.csp');
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $login_id = $login->getOID();

    //check is a Admin?
    require_once('grn/system_logic.csp');
    $system = GRN_System::getInstance();
    if ( ! $system->adminApplication('workflow', $login)) {
        cb_throw_error(E_GRN_NO_SYSTEM_PRIVILEGE);
    }

    //get Parametter
    $node_parameter = $cbpapi_service->getRequestParameters();
    if (is_array($node_parameter['children'])
        && count($node_parameter['children']) > 0
    ) {
        if (count($node_parameter['children']) == 1) {
            if ( ! isset($node_parameter['children'][0]['attributes']['request_form_id'])) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => 'request_form_id']);
            }

            if ( ! isset($node_parameter['children'][0]['attributes']['file_id'])) {
                require_once('cbpapi/error_code.csp');
                cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
                    ['param' => 'file_id']);
            }
        } else {
            foreach (array_keys($node_parameter['children']) as $node_child) {
                if ( ! isset($node_parameter['children'][$node_child]['attributes']['file_id'])
                     || ! isset($node_parameter['children'][$node_child]['attributes']['request_form_id'])
                ) {
                    unset($node_parameter['children'][$node_child]);
                }
            }
        }
    }

    if (count($node_parameter['children']) == 0) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'request_form_id or file_id']);
    }

    require_once('workflow/controller_util.csp');
    $item_data_file_util
        = GRN_Workflow_ItemDataFile_Controller_Utility::getInstance();

    //Create Parameter Translation Map
    $translation_map_item_data_file = [
        'ifid'      => '_id',                  //Item Data File ID
        'item_data' => 'item_data',            //Item Data ID
        'file'      => 'file',                 //GRN_File ID
    ];
    require_once('workflow/file.csp');
    $file_manager = new GRN_Workflow_FileManager_Core();
    $file_table = $file_manager->getFileTable();

    $file_for_view = [];
    foreach ($node_parameter['children'] as $param) {
        $item_data_file_id = $param['attributes']['file_id'];
        $item_data_file = $item_data_file_util->getView($item_data_file_id,
            $translation_map_item_data_file);
        $file = $file_table->getRow($item_data_file['file']);
        if ( ! $file) {
            if (count($param) == 1) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WORKFLOW_ITEMDATAFILE_NOT_FOUND);
            }
            continue;
        }
        $body = $file->getCurrentBody();
        $creator = $file->get('creator');
        $modifier = $file->get('modifier');
        $file_for_view[$file->getOID()] = [
            'id'              => $file->getOID(),
            'request_form_id' => $param['attributes']['request_form_id'],
            'filename'        => $body->get('name'),
            'mime'            => $body->get('mime'),
            'size'            => $body->get('size'),
            'version'         => $body->get('version'),
            'title'           => $file->getTitle(),
            'max_version'     => $file->getMaxVersion(),
            'memo'            => $file->getDescription(),
            'creator_uid'     => $creator ? $creator->getOID() : 0,
            'creator_name'    => $creator ? $creator->get('display_name')
                : $file->get('creator_name'),
            'ctime'           => $file->get('ctime'),
            'modifier_uid'    => $modifier ? $modifier->getOID() : 0,
            'modifier_name'   => $modifier ? $modifier->get('display_name')
                : $file->get('modifier_name'),
            'mtime'           => $file->get('mtime'),
        ];
    }
    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('workflow')]);
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('file_for_view', $file_for_view);

    grn_cbpapi_response($t, __FILE__);
}
