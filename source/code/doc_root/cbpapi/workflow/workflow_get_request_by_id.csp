<?php
if (isset($cbpapi_service)) {
    require_once('workflow/resources.csp');
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $user_id = $login->getOID();

    //check is a Admin?
    require_once('grn/system_logic.csp');
    $system = GRN_System::getInstance();
    if ( ! $system->adminApplication('workflow', $login)) {
        cb_throw_error(E_GRN_NO_SYSTEM_PRIVILEGE);
    }

    // get parameters of SOAP message
    $node_parameters = $cbpapi_service->getRequestParameters();
    $request_ids = [];
    $request_ids = $cbpapi_service->selectNodesValue($node_parameters,
        'request_id');
    if ( ! $request_ids) {
        require_once('cbpapi/error_code.csp');
        cb_throw_error(E_GRN_CBPAPI_MISSING_PARAMETER, null,
            ['param' => 'request_id']);
    }

    require_once('cbpapi/workflow_logic.csp');
    $cbpapi_logic = GRN_CBPApi_Workflow_Logic::getInstance();

    $applications_for_view = [];

    foreach ($request_ids as $id) {
        $petition_id = intval($id);
        //Get Petition and Item Data Controller Utility
        require_once('workflow/controller_util.csp');
        $petition_util
            = GRN_Workflow_Petition_Controller_Utility::getInstance();

        //Create Parameter Translation Map
        //Create Parameter Translation Map
        $translation_map_petition = [
            'id'                  => '_id',
            //Petition ID
            'petition_number'     => 'petition_number',
            //Petition Number
            'name'                => 'name',
            //Petition Name
            'form'                => 'form',
            //Petition Form ID
            'form_name'           => 'form_name',
            //Petition Form Name
            'creator'             => 'creator',
            //Petition Creator
            'creator_name'        => 'creator_name',
            //Petition Creator Name
            'creator_foreign_key' => 'creator_foreign_key',
            //Petition Creator Foreign Key
            'status'              => 'status',
            'transactor'          => 'transactor',
            'transactor_name'     => 'transactor_name',
            'user'                => 'user',
            'user_name'           => 'user_name',
            'mtime'               => 'mtime',
            'ptime'               => 'ptime',
            'priority'            => 'priority',
            'reapply'             => 'reapply',
            'agent_user'          => 'agent_user',
            'agent_user_name'     => 'agent_user_name',
            'ctime'               => 'ctime',
            //Petition Create Time
        ];
        //Get Petition for view
        $petition = $petition_util->getView($petition_id,
            $translation_map_petition);
        $ptime = array_key_exists('ptime', $petition) ? $petition['ptime']
            : null;
        $version = array_key_exists('mtime', $petition)
            ? $petition['mtime']->unix_ts : null;
        if ( ! is_null($ptime) && $ptime > $version) {
            $version = $ptime;
        }
        $petition['version'] = $version;
        require_once('cbpapi/util.csp');
        if (array_key_exists('ctime', $petition)) {
            $create_time = $petition['ctime'];
            unset($petition['ctime']);
            $petition['ctime'] = grn_cbpapi_iso8601($create_time);
        }
        $controller_util
            = new GRN_Workflow_ControllerUtil('workflow/system/petition_view');
        $path_steps = $controller_util->getPathInfo($petition_id, true,
            CB_DATABASE_NO_LOCK);
        $path_steps_current = current($path_steps);
        $path_step_id
            = $controller_util->getInProcessPathStepId($path_steps_current);
        if ($path_step_id) {
            $path_steps[$path_step_id]['in_process'] = true;
        }
        $petition['processing_step'] = intval($path_step_id);
        foreach (array_keys($path_steps) as $path_step_id) {
            $cbpapi_logic->setPathStepPtime($path_steps[$path_step_id]);
        }
        $petition['path_steps'] = $path_steps;
        if (array_key_exists('status', $petition)) {
            $status = $petition['status'];
            $status_type = '';
            switch ($status) {
                case GRN_WORKFLOW_STATUS_UNPROCESSING: // 未処理
                    $status_type = 'unprocessing';
                    break;
                case GRN_WORKFLOW_STATUS_IN_PROCESS: // 進行中
                    $status_type = 'inprogress';
                    break;
                case GRN_WORKFLOW_STATUS_ACCEPTANCE: // 承認
                    $status_type = 'approved';
                    break;
                case GRN_WORKFLOW_STATUS_REJECTION: // 却下
                    $status_type = 'rejected';
                    break;
                case GRN_WORKFLOW_STATUS_REMAND: // 差し戻し
                    $status_type = 'sent_back';
                    break;
                case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL: // 取り戻し
                    $status_type = 'withdrawn';
                    break;
                case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL: // 取り消し
                    $status_type = 'cancelled';
                    break;
                case GRN_WORKFLOW_STATUS_FINISHED: // 完了
                    $status_type = 'completed';
                    break;
            }
            $petition['status_type'] = $status_type;
        }

        if (array_key_exists('user', $petition)) {
            $applicant = $uum->getUser($petition['user']);
            if ($applicant) {
                $petition['user_valid'] = $applicant->get('valid');
            }
        }
        if (array_key_exists('transactor', $petition)) {
            $transactor = $uum->getUser($petition['transactor']);
            if ($transactor) {
                $petition['transactor_valid'] = $transactor->get('valid');
            }
        }

        if (array_key_exists('agent_user', $petition)) {
            $agent_user = $uum->getUser($petition['agent_user']);
            if ($agent_user) {
                $petition['agent_user_valid'] = $agent_user->get('valid');
            }
        }

        if ( ! (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL == $petition['status']
                && $user_id != cb_at($petition, 'creator'))
        ) {
            $petition['items'] = $cbpapi_logic->getItemDataList($petition_id);
            $cbpapi_logic->setItemDataListView($petition['items']);

            $petition['operation_mode'] = null;
            $petition['login_id'] = $user_id;
        }

        //Get Folder Relation By Petition ID
        $petition_folder_relation_list = getListFolderByPetitionId($user_id,
            $petition_id);
        $has_operation = false;
        $folders = [];
        foreach (
            array_keys($petition_folder_relation_list) as
            $petition_folder_relation_id
        ) {
            $folder_id
                = $petition_folder_relation_list[$petition_folder_relation_id]['col_folder'];
            $folder_type
                = $petition_folder_relation_list[$petition_folder_relation_id]['col_folder_type'];
            $folders[$petition_folder_relation_id]['folder_id'] = $folder_id;
            $folder_type_str = '';
            switch ($folder_type) {
                case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
                    $folder_type_str = 'received';
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
                    $folder_type_str = 'sent';
                    if (GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL == $status
                        || GRN_WORKFLOW_STATUS_FINISHED == $status
                        || GRN_WORKFLOW_STATUS_REJECTION == $status
                    ) {
                        $has_operation = false;
                    } elseif ($status == GRN_WORKFLOW_STATUS_UNPROCESSING
                              || $status == GRN_WORKFLOW_STATUS_IN_PROCESS
                              || $status == GRN_WORKFLOW_STATUS_REMAND
                    ) {
                        $has_operation = true;
                    }
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
                    $folder_type_str = 'finish';
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
                    $folder_type_str = 'unprocessed';
                    $has_operation = true;
                    break;
                case GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID:
                    $folder_type_str = 'draft';
                    break;
            }
            $folders[$petition_folder_relation_id]['folder_type']
                = $folder_type_str;
        }

        $petition['folders'] = $folders;
        $petition['has_operation'] = $has_operation;

        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $config = $configs->getSystemConfig();
        $remand = $config->getRemand();
        $petition['is_remand'] = $remand;

        $applications_for_view[$petition_id] = $petition;
    }
    //$petition_id = intval($request_ids[0]);

    // SOAP response
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
    $t->assign('xml_namespaces', [grn_cbpapi_get_namespace('workflow')]);
    $t->assign('action', $cbpapi_service->getAction());
    $t->assign('applications', $applications_for_view);

    grn_cbpapi_response($t, __FILE__);
}

function getListFolderByPetitionId($user_id, $petition_id)
{
    $app_locator = GRN_ApplicationLocator::instance();
    $dbconn = $app_locator->getConnection('workflow');

    $condition = cb_queryf($dbconn, "fr.col_petition='@S' AND f.col_user='@S' ",
        $petition_id, $user_id);

    $join = " INNER JOIN tab_grn_workflow_folder AS f ON fr.col_folder=f._id";
    $join .= " INNER JOIN tab_cb_user AS u ON (f.col_user=u._id AND u.col_deleted IS NULL)";
    $query
        = "SELECT fr._id,fr.col_folder,f.col_folder_type FROM tab_grn_workflow_folderrelation AS fr {$join} WHERE ({$condition}) ORDER BY col_folder";

    $query = $dbconn->select_format($query, 0, -1, CB_DATABASE_DEFAULT_LOCK);
    $result = $dbconn->query($query);
    if (false === $result) {
        $dbconn->throwError(['query' => "failed query on SELECT: {$query}"]);
    }

    $rows = [];
    while ($row = $dbconn->fetch_assoc($result)) {
        $rows[$row['col_folder']] = $row;
    }

    return $rows;
}
