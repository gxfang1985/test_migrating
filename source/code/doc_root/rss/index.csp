<?php
//-- instantiate Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

require_once('rss/application.csp');
$reader = GRN_RSS_Reader::getInstance();
$app_name = $reader->getName();

// page title
$t->assign('page_title', $app_name);

// site position
$t->assign('site_position', [['page' => '', 'name' => $app_name]]);

require_once('rss/logic.csp');
require_once('rss/system.csp');
require_once('rss/personal.csp');
$logic = new GRN_RSS_ReaderLogic();
$system = GRN_RSS_SystemLogic::getInstance();
$personal = GRN_RSS_PersonalLogic::getInstance();

// navi parameter
require_once('grn/ui.csp');
$cm = GRN_UIConfigManager::getInstance();
$user_config = $cm->getUserConfig($G_rss_login);
$limit = $user_config->getListMax();
$subject_width = $user_config->getSubjectWidth();
$t->assign('subject_width', $subject_width);

require_once('grn/controller.csp');
require_once('grn/rss.csp');
$utility = new GRN_ControllerUtil();
$manager = GRN_RSS_Manager::getInstance();

$offset = $utility->getNaviStartPosition();
$utility->setNaviStartPosition($offset);

// item list
global $G_INPUT;
$sid_for_view = '';
if (array_key_exists('id', $G_INPUT) && strlen($G_INPUT['id']) > 0) {
    $sid_for_view = $G_INPUT['id'];
    $rid = substr($sid_for_view, 1);

    // channel information
    if (strpos($sid_for_view, 's') === 0) // shared channel is selected
    {
        $channel = $system->getSharedChannelInfo($rid);
    } else                                     // personal channel is selected
    {
        $channel = $personal->getPersonalChannelInfo($G_rss_login, $rid);
        $t->assign('is_personal', 1);
    }

    if ($channel !== false) {
        $site_map = [
            'title' => 'display_name',
            'memo'  => 'description',
            'url'   => 'link'
        ];

        $site_for_view = [];
        foreach ($channel as $key => $value) {
            if (array_key_exists($key, $site_map)) {
                $site_for_view[$site_map[$key]] = $value;
            }
        }
        if (is_null($channel['url'])) {
            if (strpos(strtolower($channel['id']), 'http://') === false
                && strpos(strtolower($channel['id']), 'https://') === false
            ) {
                $channel['id'] = 'http://' . $channel['id'];
            }
            $site_for_view['link'] = $channel['id'];
        }

        // item list
        if (array_key_exists('id', $channel)) {
            // channel access time
            $access_time = $logic->getChannelAccessTime($G_rss_login,
                $channel['id']);

            // parameters
            $navi_for_view = $utility->makeNaviInformation($offset,
                $limit, $manager->getItemNum($channel['id']));
            $navi_for_view['navi']['params'] = ['id' => $sid_for_view];

            $item_list = $manager->getItemList($channel['id'], $offset, $limit);

            $items_for_view = [];
            foreach ($item_list as $item_data) {
                $item = [];
                $item['title'] = $item_data['title'];
                $item['link'] = $item_data['url'];
                $item['date'] = $item_data['ptime'];
                $item['is_new'] = intval($item_data['utime']->unix_ts)
                                  > $access_time;

                $items_for_view[] = $item;
            }
            $t->assign('items', $items_for_view);
        }

        $t->assign('sid', $sid_for_view);
        $t->assign('site', $site_for_view);
        //delete info
        $target = [
            'class'    => [
                'display_name' => cb_msg(GRN_RSS_APP_MODULEID, 'site')
            ],
            'instance' => [
                'id'           => $rid,
                'display_name' => $channel['title']
            ]
        ];
        $delete_info = [
            'title'      => grn_get_page_display_name('rss/delete'),
            'page'       => 'rss/delete.tpl',
            'no_confirm' => false,
            'data'       => ['target' => $target],
            'handler'    => 'lnk_delete',
        ];
        $t->assign('delete_info', $delete_info);
    } else {
        require_once('rss/error_code.csp');
        cb_throw_error(E_GRN_RSS_NO_SITE_INFO);
    }
} else {
    $navi_for_view = $utility->makeNaviInformation($offset, $limit, 0);
}

$t->assign('navi', $navi_for_view);

// config
$system_use_shared = $system->getUseSharedAttribute();
$system_use_personal = $system->getUsePersonalAttribute();
$personal_use_shared = $personal->getUseSharedAttribute($G_rss_login);

// update data
$logic->onDemandSyncData($G_rss_login);

// shared channel list
$shared_sites_for_view = [];
if (strcmp($system_use_shared, '1') === 0
    || strcmp($personal_use_shared, '1') === 0
) {
    $shared_sites_for_view = _grn_rss_index_internal($G_rss_login, $logic,
        $system->getSharedRelationList(),
        's');
    $t->assign('shared_sites', $shared_sites_for_view);
}

// personal channel list
$personal_sites_for_view = [];
if (strcmp($system_use_personal, '1') === 0) {
    $personal_sites_for_view = _grn_rss_index_internal($G_rss_login, $logic,
        $personal->getPersonalRelationList($G_rss_login), 'p');
    $t->assign('personal_sites', $personal_sites_for_view);
}

// update access time
if (strlen($sid_for_view) > 0) {
    if ( ! (count($shared_sites_for_view) > 0
            && array_key_exists($sid_for_view, $shared_sites_for_view)
            && array_key_exists('notify', $shared_sites_for_view[$sid_for_view])
            && $shared_sites_for_view[$sid_for_view]['notify'] == -1)
         && ! (count($personal_sites_for_view) > 0
               && array_key_exists($sid_for_view, $personal_sites_for_view)
               && array_key_exists('notify',
                $personal_sites_for_view[$sid_for_view])
               && $personal_sites_for_view[$sid_for_view]['notify'] == -1)
    ) {
        $logic->updateChannelAccessTime($G_rss_login, $channel['id']);
    }
}

$t->assign('system_config', [
    'shared'   => $system_use_shared,
    'personal' => $system_use_personal
]);
$t->assign('personal_config',
    [
        'blank'  => $personal->getOpenOtherWindowAttribute($G_rss_login),
        'shared' => $personal_use_shared
    ]);

//-- show page
$t->display(cb_get_pagename() . ".tpl");

function _grn_rss_index_internal(& $user, & $logic, $site_list, $prefix)
{
    $channel_oids = [];
    $sites = [];
    foreach ($site_list as $rid => $data) {
        $site = [];

        require_once('rss/resources.csp');
        switch ($data['type']) {
            case GRN_RSS_RELATION_TYPE_FOLDER:
                break;
            case GRN_RSS_RELATION_TYPE_CHANNEL:
                $site['display_name'] = $data['title'];
                if ($data['has_error']) {
                    $site['notify'] = -1;
                    $site['error'] = $logic->getErrorMessage($data['error']);
                }
                $channel_oids[] = $data['channel_oid'];
                $site['channel_oid'] = $data['channel_oid'];
                break;
            case GRN_RSS_RELATION_TYPE_DELIMITER:
                $site['separator'] = true;
                break;
        }

        $sites[$prefix . $rid] = $site;
    }

    $counts = $logic->getNewItemNumber($user, $channel_oids);

    foreach ($sites as $key => $site) {
        if (array_key_exists('channel_oid', $site)
            && array_key_exists($site['channel_oid'], $counts)
        ) {
            $sites[$key]['notify'] = $counts[$site['channel_oid']];
        }
    }

    return $sites;
}


