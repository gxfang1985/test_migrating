<?php

//Get Display Login Method
require_once('grn/authentication.csp');
$authentication_service = GRN_Authentication_Service::getInstance();
$login_method
    = $authentication_service->getSingleLoginMethod(GRN_AUTH_LOGIN_CELLULAR);
$repository_method = $login_method->getRepositoryMethod();

//Create Parameter Translation Map
$translation_map = [
    //Login Method Infomation
    'rmid'            => 'repository',           //Repository Method ID
    'display_name'    => 'display_name',         //Display Name
    'driver_type'     => 'driver_type',          //Driver Type
    'driver_settings' => 'driver_settings',      //Driver Name
    'ctime'           => 'ctime',                //Create Time
    'creator_uid'     => 'creator',              //Creator ID
    'creator_name'    => 'creator_name',         //Creator Name
    'mtime'           => 'mtime',                //Modify Time
    'modify_uid'      => 'modifier',             //Modifier ID
    'modify_name'     => 'modifier_name',        //Modifier Name
];

//Do Parameter Translation
$login_method_for_view = [];
foreach ($translation_map as $view_name => $model_name) {
    switch ($model_name) {
        case 'repository':
            $repository_method = $login_method->get($model_name);
            $login_method_for_view[$view_name] = $repository_method->getOID();
            break;
        case 'driver_settings':
            $driver_settings = $login_method->get($model_name);
            if ($driver_settings) {
                $driver_settings = cb_unserialize($driver_settings,
                    ["allowed_classes" => false]);
            }
            $login_method_for_view[$view_name] = $driver_settings;
            break;
        case 'creator':
        case 'modifier':
            $user = $login_method->get($model_name);
            if ($user) {
                $login_method_for_view[$view_name] = $user->getOID();
            }
            break;
        case 'display_name':
            $display_name = $login_method->get(GRN_AUTH_PROPERTY_DISPLAY_NAME);
            if ( ! $display_name) {
                $driver_type
                    = $login_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
                $driver_type_elements = explode('.', $driver_type);
                $display_name = cb_msg($driver_type,
                    $driver_type_elements[4]);
            }
            $login_method_for_view[$view_name] = $display_name;
            break;
        default:
            $login_method_for_view[$view_name]
                = $login_method->get($model_name);
            break;
    }
}


//Get Using Multi Repository Flag
$is_validation_error_mode = strcasecmp(cb_at($_SERVER, 'REQUEST_METHOD'),
        'POST') == 0;
if ( ! $is_validation_error_mode) {
    $current_repository_method
        = $authentication_service->getRepositoryMethod($repository_method->getOID());
    $use_multi_repository = $current_repository_method->isMultiRepository();
} else {
    $use_multi_repository = cb_at($G_INPUT, 'use_multi');
}


//Get Multi Repository Settings
if ( ! $use_multi_repository) {
    $default_repository_method
        = $authentication_service->getDefaultRepositoryMethod();
    $selected_child_repository_ids = [$default_repository_method->getOID()];
} else {
    if ( ! $is_validation_error_mode) {
        $selected_child_repository_ids = [];
        $child_repositories
            = $authentication_service->getChildRepositoryMethodsByParentId($repository_method->getOID());
        foreach ($child_repositories as $child_repository) {
            $selected_child_repository_ids[] = $child_repository->getOID();
        }
    } else {
        $selected_child_repository_ids = [];
        foreach (
            cb_at($G_INPUT, 'multi_rmid') as $child_repository_id => $selected
        ) {
            if ($selected) {
                $selected_child_repository_ids[] = $child_repository_id;
            }
        }
    }
}

//Create Parameter Translation Map for Repository Method List
$translation_map_repository_method = [
    'rmid'         => '_id',                  //Repository Method ID
    'display_name' => 'display_name',         //Repository Method Display Name
];
$repository_method_list
    = $authentication_service->getRepositoryMethodList();
if ( ! $repository_method_list) {
    $default_repository_method
        =& $authentication_service->getDefaultRepositoryMethod();
    $repository_method_list[$default_repository_method->getOID()]
        =& $default_repository_method;
}


//Create Repository Options (for selecting a repository)
$repository_method_options = [];
if ( ! $is_validation_error_mode) {
    $selected_repository_id = $login_method_for_view['rmid'];
} else {
    $selected_repository_id = cb_at($G_INPUT, 'rmid');
}
foreach ($repository_method_list as $repository_method_id => $repository_method) {
    $repository_method_options[] = [
        'value'    => $repository_method_id,
        'label'    => $repository_method->getName(),
        'selected' => ($repository_method_id == $selected_repository_id)
    ];
}


//Create Multi Repository Options (for selecting multi repositories)
$repository_method_multi_options = [];
$repository_method_multi_option_default = null;
foreach ($repository_method_list as $repository_method_id => $repository_method) {
    $driver_type = $repository_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);

    $repository_method_multi_option = [
        'value'           => 1,
        'rmid'            => $repository_method_id,
        'display_name'    => $repository_method->getName(),
        'driver_type'     => $driver_type,
        'driver_settings' => cb_unserialize($repository_method->get(GRN_AUTH_PROPERTY_DRIVER_SETTINGS),
            ["allowed_classes" => false]),
        'selected'        => in_array($repository_method_id,
            $selected_child_repository_ids),
    ];

    if ($driver_type === GRN_AUTH_REPOSITORY_DEFAULT) {
        $repository_method_multi_option_default
            = $repository_method_multi_option;
    } else {
        $repository_method_multi_options[] = $repository_method_multi_option;
    }
}
if ($repository_method_multi_option_default) {
    // default repository should be in the bottom
    $repository_method_multi_options[]
        = $repository_method_multi_option_default;
}


$disabled_multi_repository = false;
if (count($repository_method_multi_options)
    == 1
) // if only one repository exits
{
    if ( ! $use_multi_repository)                     // and current repository(or current selected repository) is not multi,
    {
        $disabled_multi_repository
            = true;           // you can't select multi repository
    }
}


//Assign Display Infomation
$t->assign('login_method', $login_method_for_view);
$t->assign('repository_method_options', $repository_method_options);
$t->assign('use_multi_repository', $use_multi_repository);
$t->assign('disabled_multi_repository', $disabled_multi_repository);
$t->assign('repository_method_multi_options', $repository_method_multi_options);

//-- set page title and site position

// page title
$page_title
    = grn_get_page_display_name('system/authentication/login_method_modify');
$t->assign('page_title', $page_title);

// site position
$t->assign(
    'site_position', [
        [
            'page' => "cellular/system/login_method_view",
            'name' => grn_get_page_display_name('cellular/system/login_method_view')
        ],
        ['page' => "", 'name' => $page_title]
    ]
);


