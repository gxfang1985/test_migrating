<?php

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Display Login Method
require_once('grn/authentication.csp');
$authentication_service = GRN_Authentication_Service::getInstance();
$login_method
    = $authentication_service->getSingleLoginMethod(GRN_AUTH_LOGIN_CELLULAR);

//Create Parameter Translation Map
$translation_map = [
    //Login Method Infomation
    'display_name'    => 'display_name',         //Display Name
    'driver_type'     => 'driver_type',          //Driver Type
    'driver_settings' => 'driver_settings',      //Driver Name
    'ctime'           => 'ctime',                //Create Time
    'creator_uid'     => 'creator',              //Creator ID
    'creator_name'    => 'creator_name',         //Creator Name
    'mtime'           => 'mtime',                //Modify Time
    'modify_uid'      => 'modifier',             //Modifier ID
    'modify_name'     => 'modifier_name',        //Modifier Name
];

//Do Parameter Translation
$login_method_for_view = [];
foreach ($translation_map as $view_name => $model_name) {
    switch ($model_name) {
        case 'driver_settings':
            $driver_settings = $login_method->get($model_name);
            if ($driver_settings) {
                $driver_settings = cb_unserialize($driver_settings,
                    ["allowed_classes" => false]);
            }
            $login_method_for_view[$view_name] = $driver_settings;
            break;
        case 'creator':
        case 'modifier':
            $user = $login_method->get($model_name);
            if ($user) {
                $login_method_for_view[$view_name] = $user->getOID();
            }
            break;
        case 'display_name':
            $display_name = $login_method->get(GRN_AUTH_PROPERTY_DISPLAY_NAME);
            if ( ! $display_name) {
                $driver_type
                    = $login_method->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
                $driver_type_elements = explode('.', $driver_type);
                $display_name = cb_msg($driver_type,
                    $driver_type_elements[4]);
            }
            $login_method_for_view[$view_name] = $display_name;
            break;
        default:
            $login_method_for_view[$view_name]
                = $login_method->get($model_name);
            break;
    }
}

//Create Driver Name
$login_driver
    = $authentication_service->getLoginDriver($login_method->getDriverType());
$login_driver_for_view = ['name' => $login_driver->getName()];

//Create Repository Display Names
$repository_method = $login_method->getRepositoryMethod();
if ($repository_method->isMultiRepository()) {
    $repository_methods
        = $authentication_service->getChildRepositoryMethodsByParentId($repository_method->getOID());
} else {
    $repository_methods = [$repository_method];
}
$display_names = [];
foreach ($repository_methods as $repository_method) {
    $display_names[] = $repository_method->getName();
}
$repository_method_for_view = ['display_names' => $display_names];


//Assign Display Infomation
$t->assign('login_method', $login_method_for_view);
$t->assign('login_driver', $login_driver_for_view);
$t->assign('repository_method', $repository_method_for_view);

//-- set page title and site position

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
$t->assign(
    'site_position', [
        ['page' => "", 'name' => $page_title]
    ]
);

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


