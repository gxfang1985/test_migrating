<?php

use grn\grn\access\service\AppAccess;

require_once('portal/error_code.csp');

if ( ! isset($portlet)) {
    cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ACCESS);
}

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();
if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
assert('is_object( $manager ) && is_a( $manager, \'GRN_UIConfigManager\' )');
$config = $manager->getUserConfig($user);

//Get Smarty Instance
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

require_once('grn/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
/*
$app =& $app_locator->getInstance(GRN_WORKFLOW_APPLICATION_ID);
if(! $app->isLicensedUser($user))
{
    $t->assign('workflow_unvisible', TRUE);
}
*/
if ( ! AppAccess::isAppAvailableInternalAccess(GRN_WORKFLOW_APPLICATION_ID)) {
    $t->assign('workflow_unvisible', true);
} else {
    $portlet_settings = array_key_exists('settings', $portlet)
        ? $portlet['settings'] : [];

    $rows = array_key_exists('rows', $portlet_settings)
        ? $portlet_settings['rows'] : '';
    if (is_null($rows) || (strlen($rows) == 0)) {
        $rows = 5;
    }
    $font_size = array_key_exists('font_size', $portlet_settings)
        ? $portlet_settings['font_size'] : '';
    if (is_null($font_size) || (strlen($font_size) == 0)) {
        $font_size = 'normal';
    }

    $number = array_key_exists('number', $portlet_settings)
        ? $portlet_settings['number'] : '';
    if (is_null($number) || (strlen($number) == 0)) {
        $number = 1;
    }
    $priority = array_key_exists('priority', $portlet_settings)
        ? $portlet_settings['priority'] : '';
    if (is_null($priority) || (strlen($priority) == 0)) {
        $priority = 1;
    }
    $status = array_key_exists('status', $portlet_settings)
        ? $portlet_settings['status'] : '';
    if (is_null($status) || (strlen($status) == 0)) {
        $status = 1;
    }
    $transactor = array_key_exists('transactor', $portlet_settings)
        ? $portlet_settings['transactor'] : '';
    if (is_null($transactor) || (strlen($transactor) == 0)) {
        $transactor = 1;
    }
    $time = array_key_exists('time', $portlet_settings)
        ? $portlet_settings['time'] : '';
    if (is_null($time) || (strlen($time) == 0)) {
        $time = 1;
    }

    $settings_for_view = [
        'font_size'  => $font_size,
        'number'     => $number,
        'priority'   => $priority,
        'status'     => $status,
        'transactor' => $transactor,
        'time'       => $time,
        'rows'       => $rows
    ];

    $folder_type = array_key_exists('folder_type', $portlet_settings)
        ? $portlet_settings['folder_type'] : '';
    $limit = array_key_exists('rows', $portlet_settings)
        ? $portlet_settings['rows'] : 5;

    //Create Parameter Translation for Folder
    $translation_map_folder = [
        'fid'  => '_id',            //Folder ID
        'name' => 'name',           //Folder Name
        'type' => 'folder_type',    //Folder Type
    ];

    //Get Folder Controller Utility
    require_once('workflow/controller_util.csp');
    $folder_util = GRN_Workflow_Folder_Controller_Utility::getInstance();

    //Check Initialize User
    $initialize_flag = false;
    if ($folder_util->isInitializeUser($user->getOID())) {
        $initialize_flag = true;
        $folder_util->initializeUser($user->getOID());
    }

    //Get Folder List for View
    $folder_list = $folder_util->getListView($translation_map_folder,
        $user->getOID());

    if (is_null($folder_type) || (strlen($folder_type) == 0)) {
        // デフォルトのフォルダタイプID（受信一覧）をセット
        $folder_type = GRN_WORKFLOW_FOLDER_TYPE_IN_ID;
    }

    $folder_id = null;
    //Get Current Folder Data
    foreach ($folder_list as $id => $folder) {
        if ($folder_type == $folder['type']) {
            $settings_for_view['folder'] =& $folder;
            $folder_id = $folder['fid'];
            break;
        }
    }

    //Create Parameter Translation for Petition
    $translation_map_petition = [
        'fid'             => 'f__id',                 //Folder ID
        'name'            => 'f_col_name',            //Folder Name
        'type'            => 'f_col_folder_type',     //Folder Type
        'ptid'            => 'p__id',                 //Petition ID
        'petition_number' => 'p_col_petition_number', //Petition Number
        'form_name'       => 'p_col_form_name',       //Form Name
        'petition_name'   => 'p_col_name',            //Petition Name
        'user_id'         => 'p_col_user',            //Create User ID
        'user_name'       => 'p_col_user_name',       //Create User Name
        'transactor_id'   => 'p_col_transactor',      //Transactor User ID
        'transactor_name' => 'p_col_transactor_name', //Transactor User Name
        'status'          => 'p_col_status',          //Petition Status
        'ctime'           => 'p_col_ctime',           //Create Time
        'mtime'           => 'p_col_mtime',           //Modify Time
        'ptime'           => 'p_col_ptime',           //Transact Time
        'icon_type'       => 'p_col_icon_type',
        'icon_id'         => 'p_col_icon_id',
        'icon_url'        => 'p_col_icon_url',
        'priority'        => 'p_col_priority',
    ];

    //Create Folder Data
    require_once('workflow/folder_logic_base.csp');
    $folder_logic_base = GRN_Workflow_Folder_Logic_Base::getInstance();
    $count
        = $folder_logic_base->getFolderRelationCount($user->getOID(),
        $folder_id, true);
//grb-15046
    $users_id = [];
    if ($count > 0) {
        $settings_for_view['folder']
            = $folder_util->getViewEx($translation_map_petition,
            $user->getOID(), $folder_id, 0, $limit);
        $settings_for_view['folder']['count'] = $count;

        $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
        foreach (
            array_keys($settings_for_view['folder']['folderrelation']) as
            $folderrelation_id
        ) {
            $petition
                =& $settings_for_view['folder']['folderrelation'][$folderrelation_id];

            $applicant = $uum->getUser($petition['user_id']);
            $users_id[] = $petition['user_id'];
            if ($applicant) {
                $petition['user_valid'] = $applicant->get('valid');
            }

            if (array_key_exists('transactor_id', $petition)) {
                $transactor = $uum->getUser($petition['transactor_id']);
                if ($transactor) {
                    $petition['transactor_valid'] = $transactor->get('valid');
                }
            }

            // 申請IDリストの経路情報を取得
            $path_steps = $controller_util->getPathInfo($petition['ptid'],
                false, CB_DATABASE_NO_LOCK);
            $transactor = null;
            $path_step = current($path_steps);
            if ($petition['status'] == GRN_WORKFLOW_STATUS_FINISHED) {
                // 最終承認経路ステップを取得
                //            $path_step =& $controller_util->getLastAcceptancePathStep($path_step);
                $key
                    = $controller_util->getLastAcceptancePathStepId($path_step);
                $path_step =& $path_steps[$key];
                $transactor = $path_step['users'];
            } else {
                // 処理中の経路ステップを取得
                //            $path_step =& $controller_util->getInProcessPathStep($path_step);
                $key = $controller_util->getInProcessPathStepId($path_step);
                $path_step =& $path_steps[$key];
                $transactor = $path_step['users'];
            }
            $transactor_num = count($transactor);
            // 処理中の経路ステップの処理者を表示
            if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
                $transactor = array_slice($transactor, 0,
                    GRN_WORKFLOW_SHOW_MAX_USER_NUM);
            }
            $settings_for_view['folder']['folderrelation'][$folderrelation_id]['transactor_num']
                = $transactor_num;
            $settings_for_view['folder']['folderrelation'][$folderrelation_id]['transactor']
                = $transactor;
        }
    } else {
        $settings_for_view['folder'] =& $folder_list[$folder_id];
        $settings_for_view['folder']['count'] = $count;
    }
    require_once("grn/controller.csp");
    $users_info
        = GRN_ControllerUtil::getUserInfoToShowUserName(array_unique($users_id),
        $user, "workflow");
    $t->assign('users_info', $users_info);
    //Assign include_php Parameter
    $t->assign('settings', $settings_for_view);
    $t->assign('portlet', $portlet);
    $t->assign('name_width', $config->getNameWidth());//GRN_WORKFLOW_NAME_WIDTH
    $t->assign('subject_width_fix',
        GRN_WORKFLOW_SUBJECT_WIDTH);//GRN_WORKFLOW_SUBJECT_WIDTH );
    $t->assign('subject_width',
        $config->getSubjectWidth());//GRN_WORKFLOW_SUBJECT_WIDTH );
    $t->assign('show_user_num', GRN_WORKFLOW_SHOW_MAX_USER_NUM);

    //Set Page Title
    if ($portlet['title'] === '') {
        require_once('grn/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        $app_name = $app_locator->getName('workflow');
        $page_title = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
            'portlet_view_workflow', ['app_name' => $app_name]);
    } else {
        $page_title = $portlet['title'];
    }
    $t->assign('name_format', $name_format);
    $t->assign('page_title', $page_title);
    $t->assign('display_name_mode', $portlet['display_name_mode']);
}

//Ignore Licence Warnning
$t->skipWarning();

//Display Smarty Template
$t->display("workflow/portlet/view_workflow.tpl");


