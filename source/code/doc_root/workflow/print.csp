<?php

use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

global $G_INPUT;
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$folder_id = null;
if (array_key_exists('fid', $G_INPUT)) {
    $folder_id = $G_INPUT['fid'];
}
$t->assign('fid', $folder_id);
$t->assign('folder_id', $folder_id);
$petition_id = null;
if (array_key_exists('pid', $G_INPUT)) {
    $petition_id = $G_INPUT['pid'];
}
$t->assign('pid', $petition_id);
$t->assign('petition_id', $petition_id);
$simple = false;
if (array_key_exists('simple', $G_INPUT)) {
    $simple = $G_INPUT['simple'];
}
$t->assign('simple', $simple);
require_once('workflow/resources.csp');
$font_size = GRN_WORKFLOW_DEFAULT_FONT_SIZE;
if (array_key_exists('font_size', $G_INPUT)) {
    $font_size = $G_INPUT['font_size'];
    if (preg_match("/^[0-9]+pt$/", $font_size) == 0) {
        $font_size = GRN_WORKFLOW_DEFAULT_FONT_SIZE;
    }
}
$t->assign('font_size', $font_size);
$align_items = null;
if (array_key_exists('align_items', $G_INPUT)) {
    $align_items = $G_INPUT['align_items'];
}
$t->assign('align_items', $align_items);
$command = null;
if (array_key_exists('cmd', $G_INPUT)) {
    $command = $G_INPUT['cmd'];
}
$t->assign('cmd', $command);
$session_flag = false;
if (array_key_exists('cpsf', $G_INPUT)) {
    $session_flag = $G_INPUT['cpsf'];
}
$t->assign('cpsf', $session_flag);
$tmp_key = grn_get_temporary_key(null);
$t->assign('tmp_key', $tmp_key);

//Set locale switch
if (array_key_exists("locale", $G_INPUT)) {
    $t->assign("locale", $G_INPUT["locale"]);
} else {
    $t->assign("locale", "user");
}

/**
 * 制限事項
 * ・フォルダにフォルダリレーションがない
 */

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$user_id = $login->getOID();

$is_public = false;
$agent_id = '';
$no_check = false;
require_once('workflow/folder_logic.csp');
$logic = GRN_Workflow_Folder_Logic::getInstance();

if ($folder_id != GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    $folder_org = $logic->getFolder($folder_id);
    $folder_user_id = $folder_org['col_user'];
    if ($user_id != $folder_user_id) {
        //代理承認の検証
        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $config = $configs->getSystemConfig();
        if ($folder_org['col_folder_type']
            == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
        ) {
            if ($config->isProxyApproval($user_id, $folder_user_id)) {
                // 代理承認
                $agent_id = $user_id;
                $user_id = $folder_user_id;
            }
        }

        //公開の検証        
        require_once('workflow/controller_util.csp');
        $c = GRN_Workflow_Category_Controller_Utility::getInstance();
        $r = $c->checkPublicByPetitionId($petition_id, false);
        if ($r != false) {
            $no_check = true;
            $is_public = true;
        }
        unset($c);
    }
} elseif ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Category_Controller_Utility::getInstance();
    $r = $c->checkPublicByPetitionId($petition_id, false);
    if ($r != true) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
    $no_check = true;
    $is_public = true;
    unset($c);
} else {
    //フォルダIDが明示的に指定されていた場合
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Category_Controller_Utility::getInstance();
    $r = $c->checkPublicByPetitionId($petition_id, false);
    if ($r != true) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
    $is_public = true;
    unset($c);
}

require_once('workflow/controller_util.csp');
$page_name = cb_get_pagename();
$controller_util = new GRN_Workflow_ControllerUtil($page_name);

$folder = null;
if ($folder_id != GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    $folder = $controller_util->getSimilarFolder($user_id, $folder_id);
    if ( ! is_array($folder) || 0 == count($folder)) {
        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folder = $logic->getSpecific($folder_id);
        if ( ! is_array($folder) || 0 == count($folder)) {
            cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
        }
    }
    if ($is_public != true) {
        $folder_id = $folder['_id'];
    }
    $t->assign('fid', $folder_id);
    $t->assign('folder', $folder);
}

//Get Petition and Item Data Controller Utility
require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form_name'              => 'form_name',
    //Petition Form Name
    'form'                   => 'form',
    //Petition Form ID
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'user'                   => 'user',
    'user_name'              => 'user_name',
    'user_foreign_key'       => 'user_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
    'user'                   => 'user',
    'agent_user'             => 'agent_user',
    'agent_user_foreign_key' => 'agent_user_foreign_key',
    'agent_user_name'        => 'agent_user_name',
    'form'                   => 'form',
    'priority'               => 'priority'
];

//Create Parameter Translation Map
$translation_map_item_data = [
    //Item Data Information
    'iid'                => 'itemdata_id',
    //Item Data ID
    'display_name'       => 'itemdata_display_name',
    //Item Data Display Name
    'code'               => 'itemdata_code',
    'type'               => 'itemdata_type',
    //Item Data Type
    'option_string'      => 'itemdata_option_string',
    //Item Data Option String
    'option_string_type' => 'itemdata_option_string_type',
    //Item Data Option String Type
    'foreign_key'        => 'itemdata_foreign_key',
    //Item Data foreign_key
    'attach_file'        => 'itemdata_attach_file',
    //Item Data Attach File
    'attach_file_view'   => 'itemdata_attach_file_view',
    //Item Data Attach File View
    'settings'           => 'itemdata_settings',
    //Item Data Settings
    'br'                 => 'itemdata_br',
    //Item Data <br> Flag
    'separator'          => 'itemdata_separator',
    //Item Data Separator
    'required'           => 'itemdata_required',
    //Item Data Reuired Flag
    'list_index'         => 'itemdata_list_index',
    //Item Data List Index
    'number'             => 'itemdata_number',
    //Item Data Number Value
    'text'               => 'itemdata_text',
    //Item Data text Value
    //Item Data File Information
    'fid'                => 'itemdatafile_id',
    //Item Data File ID
    'file'               => 'itemdatafile_file',
    //Item Data File ID
    'files'              => 'itemdata_files',
    //Item Data File ID
];

//Get Petition for view
$petition = $petition_util->getView($petition_id, $translation_map_petition);

//  Check Petition Owner
if (GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID == @ $folder['col_folder_type']) {
    global $G_workflow_login_user;
    if ($petition['user'] != $G_workflow_login_user->getOID()) {
        if (is_null($petition['agent_user'])
            || $petition['agent_user'] != $G_workflow_login_user->getOID()
        ) {
            // Petition Not Found
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
        }
    }
}

$ptime = new CB_TimeStamp();
$ptime->unix_ts = $petition['ptime'];
$petition['ptime'] = $ptime;

//Assign Petition
$t->assign('petition', $petition);

//Get Item Data List for view
$item_data_list = $item_data_util->getListViewEx($translation_map_item_data,
    $petition_id);

//Unset Standard Item
$current_item_data = current($item_data_list);
unset($item_data_list[$current_item_data['iid']]);

//Create Item Layout
$current = null;
$previous = null;
foreach (array_keys($item_data_list) as $item_data_id) {
    //Check Calc Numeric Not Display Parameter
    if ($item_data_list[$item_data_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_data_list[$item_data_id]['settings']['not_display'] == 1) {
            unset($item_data_list[$item_data_id]);
            continue;
        }
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_data_list[$item_data_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_data_list[$item_data_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_data_list[$item_data_id];

    //Check Current or Sub Item
    if ($item_data_list[$item_data_id]['br'] == 1) {
        $current =& $item_data_list[$item_data_id];
        $current['sub_item_data_list'] = [];
        $current['total_required'] = $current['required'];
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
    } else {
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
        $current['sub_item_data_list'][$item_data_id]
            = $item_data_list[$item_data_id];
        $current['sub_item_data_count'] = count($current['sub_item_data_list']);
        if ($item_data_list[$item_data_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_data_list[$item_data_id]);
    }
}

$path_info = $controller_util->getPathInfoForView($user_id,
    $petition['pid'], $petition, $folder_id, $no_check);
$path_steps = $path_info['path_steps'];
$path_step_total = $path_info['path_step_total'];
$view = $path_info['view'];
$handle_mode = $path_info['handle_mode'];

//URL直打ち対策
$folder_type = $folder['col_folder_type'];
if ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
    && $petition['status'] == GRN_WORKFLOW_STATUS_REJECTION
) {
    //却下の場合は、未処理で通知をみるため、なにもしない
} else {
    if ( ! is_null($folder_id) && strlen($folder_id) > 0) {
        $folder_temp = $controller_util->getSimilarFolderEx($user_id,
            $folder_id, $petition_id);
        if ( ! is_null($folder_temp)) {
            $folder_type = $folder_temp['col_folder_type'];
        }
    }
}

//Get Form for View (if Active and Not Deleted.)
$category_id = null;
if ( ! is_null($petition['form'])) {
    $form_util = GRN_Workflow_Form_Controller_Utility::getInstance();

    //Create Parameter Translation Map
    $translation_map_form = [
        'fid'      => '_id',      //Form ID
        'active'   => 'active',   //Form Active
        'deleted'  => 'deleted',  //Form Deleted
        'category' => 'category', //Category ID
    ];

    //Get Form
    $option = [
        'condition' => [
            '0' => [
                'column'   => 'col_type',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form = $form_util->getView($petition['form'], $translation_map_form,
        null, $option);
    if ($form) {
        if ($form['active'] == 1 && $form['deleted'] != 1) {
            $category_id = $form['category'];
            if (0 == strlen($category_id)) {
                $category_id = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
            }
        }
    }
}
$t->assign('cid', $category_id);

if (($folder_type == GRN_WORKFLOW_FOLDER_TYPE_IN_ID)
    &&
    ! is_null($agent_id)
    && strlen($agent_id) > 0
) {
    if ($agent_id != @ $petition['creator'] && $agent_id != $petition['user']) {
        //受信一覧で代理承認の場合
        //見せてはいけないのでエラー
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
}
if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
    // ログインユーザーは代理承認者
    if ($folder['col_folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
        && $petition['status'] == GRN_WORKFLOW_STATUS_FINISHED
    ) {
        $path_step_ids_tmp = array_keys($path_steps);
        $path_step_ids = array_reverse($path_step_ids_tmp);
        $user_path_step_id = null;
        // 経路にユーザーが含まれているかどうか
        for ($i = 0; $i < count($path_step_ids); $i++) {
            $path_step =& $path_steps[$path_step_ids[$i]];
            if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                // アクティブではないか省略の経路ステップは外す
                continue;
            }
            $users = $path_step['users'];
            for ($j = 0; $j < count($users); $j++) {
                if ($user_id == $users[$j]['col_user']) {
                    $user_path_step_id = $path_step_ids[$i];
                    break 2;
                }
            }
        }
        if ( ! is_null($user_path_step_id)) {
            //完了申請はアクセスできない
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
    }
}


if ($is_public != true) {
    //アクセス権を取得
    $access = $controller_util->checkAccess($petition['pid'], $folder_id,
        $folder_type, $user_id, $agent_id);

    //アクセス権設定
    if ($access['access_type'] == 'creator') {
        //申請者で判定
        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
            ) {
                if ($item_data_list[$item_data_id]['attach_file_view'] == 1) {
                    $item_data_list[$item_data_id]['view_mode_print'] = 'view';
                } else {
                    $item_data_list[$item_data_id]['view_mode_print']
                        = 'disable';
                }

                if (array_key_exists('sub_item_data_list',
                        $item_data_list[$item_data_id])
                    && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                ) {
                    foreach (
                        array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                        as $sub_item_data_id
                    ) {
                        if ($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['attach_file_view']
                            == 1
                        ) {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode_print']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode_print']
                                = 'disable';
                        }
                    }
                }

            }
        }
    } elseif ($access['access_type'] == 'path_step') {
        //経路で判定
        if ( ! is_null($access['access_path_step_id'])) {
            require_once('workflow/change_access_data.csp');
            $change_access_data_logic
                = GRN_Workflow_ChangeAccessData::getInstance();

            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    $change_access_data
                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                        $access['access_path_step_id']);
                    if ($change_access_data['col_view'] == 1) {
                        $item_data_list[$item_data_id]['view_mode_print']
                            = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode_print']
                            = 'disable';
                    }
                }
                if (array_key_exists('sub_item_data_list',
                        $item_data_list[$item_data_id])
                    && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                ) {
                    foreach (
                        array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                        as $sub_item_data_id
                    ) {
                        $change_access_data
                            = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                            $access['access_path_step_id']);
                        if ($change_access_data['col_view'] == 1) {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode_print']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode_print']
                                = 'disable';
                        }
                    }
                }
            }
        } else {
            //すべて非表示
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    $item_data_list[$item_data_id]['view_mode_print']
                        = 'disable';
                }
            }
        }
    } elseif ($access['access_type'] == 'all_view') {
        //すべて非表示
        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
            ) {
                $item_data_list[$item_data_id]['view_mode_print'] = 'view';
            }
            if (array_key_exists('sub_item_data_list',
                    $item_data_list[$item_data_id])
                && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
            ) {
                foreach (
                    array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                    as $sub_item_data_id
                ) {
                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode_print']
                        = 'view';
                }
            }
        }
    } else {
        //すべて非表示
        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
            ) {
                $item_data_list[$item_data_id]['view_mode_print'] = 'disable';
            }
        }
    }
} else {
    //すべて表示
    foreach (array_keys($item_data_list) as $item_data_id) {
        if ($item_data_list[$item_data_id]['foreign_key']
            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_DATE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_FILE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
        ) {
            $item_data_list[$item_data_id]['view_mode_print'] = 'view';
        }
        if (array_key_exists('sub_item_data_list',
                $item_data_list[$item_data_id])
            && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
        ) {
            foreach (
                array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                as $sub_item_data_id
            ) {
                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode_print']
                    = 'view';
            }
        }
    }
}

//Rename username if username is changed.
foreach (array_keys($path_steps) as $path_key) {
    $path =& $path_steps[$path_key];
    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum = $G_container_base->getInstance('uum');
    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($path['uids'], $columns);
    foreach (array_keys($path['users']) as $user_key) {
        if (array_key_exists($path['users'][$user_key]['_id'], $users)) {
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = $users[$path['users'][$user_key]['_id']]['col_display_name'];
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
        }
    }
    $path['user_count'] = count($path['users']);
}

if (($user_id == @ $petition['user'] || $user_id == @ $petition['agent_user'])
    && $handle_mode == 'change_transactor'
    && $agent_id > 0
    && $agent_id != @ $petition['user']
    && $agent_id != @ $petition['agent_user']
) {
    // ログインユーザーは代理承認者で、委任者が経路から外された場合
    $view = false;
} elseif ($handle_mode == 'change_transactor' && $agent_id > 0
          && $agent_id != @ $petition['user']
          && $agent_id != @ $petition['agent_user']
) {
    // ログインユーザーは代理承認者で、委任者が経路から外された場合
    $view = false;
} elseif ($user_id == @ $petition['creator'] || $user_id == $petition['user']) {
    $handle_mode = null;
    $view = true;
}
if ($no_check == true) {
    $handle_mode = null;
    $view = true;
}


//Assign Item Data List
$t->assign('item_data_list', $item_data_list);
$t->assign('path_steps', $path_steps);
$t->assign('path_step_total', $path_step_total);
$t->assign('view', $view);
$t->assign('handle_mode', $handle_mode);
$t->assign('view_mode', 'print');

$font_sizes = [];
for ($i = 8; $i <= 20; $i++) {
    $font_sizes["{$i}pt"] = "{$i}pt";
}
$t->assign('font_sizes', $font_sizes);

if ($command == 'print') {
    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_print';

        //Record Inspection
        $inspection->record($message_type, []);
    }
}

$timezone = CB_I18N::getInstance()->getUserTimezone($login);
$t->assign("timezone_name", $timezone);

$translation_map_form
    = ['is_customization_active' => 'is_customization_active'];
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$form_for_view = $form_util->getView($petition['form'], $translation_map_form,
    null, [
        'condition' => [
            '0' => [
                'column'   => 'col_type',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ]);
$apply_customization
    = CustomizationUtil::applyCustomization($form_for_view['is_customization_active'],
    $t);
if ($apply_customization) {
    if ($view) {
        $item_data_list[] = $current_item_data;
        if ($agent_id != '') {
            $petition['proxy_approver_id'] = $user_id;
        }
        $customization_petition
            = DataConverterForJsPetitionData::covertDataPetitionInformation(
            $petition, $item_data_list, $path_steps, $petition['priority']);
        $screen_properties = [];
        $do_set_step_code = false;
        $folder_user = ! is_null($folder_type) ? $folder_type
            : $folder_id;
        switch ($folder_user) {
            case GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID:
                $screen_properties['draft'] = true;
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
            case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
                foreach ($path_steps as $path_step_code) {
                    $users = $path_step_code['uids'];
                    if (false !== array_search($user_id, $users)) {
                        if (GRN_WORKFLOW_CIRCULAR
                            == $path_step_code['col_type']
                        ) {
                            $screen_properties['viewer']
                                = GRN_WORKFLOW_VIEW_TYPE_ACKNOWLEDGEMENT;
                        } else {
                            $screen_properties['viewer']
                                = GRN_WORKFLOW_VIEW_TYPE_APPROVER;
                        }
                        $screen_properties['stepCode']
                            = $path_step_code['col_code'];

                    }
                    if (cb_at($path_step_code, 'in_process')) {
                        break;
                    }
                }
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
                $do_set_step_code = false;
                $avaibleOperations = cb_at($customization_petition,
                    'availableOperations');
                $listOperations = is_array($avaibleOperations)
                    ? $avaibleOperations['list'] : [];
                if (array_search(GRN_WORKFLOW_OPERATION_APPROVE,
                        $listOperations) !== false
                ) {
                    $screen_properties['viewer']
                        = GRN_WORKFLOW_VIEW_TYPE_APPROVER;
                    $event_type = 'approve';
                    $do_set_step_code = true;
                } elseif (array_search(GRN_WORKFLOW_OPERATION_ACKNOWLEDGE,
                        $listOperations) !== false
                          || array_search(GRN_WORKFLOW_OPERATION_CONFIRM,
                        $listOperations) !== false
                ) {
                    $screen_properties['viewer']
                        = GRN_WORKFLOW_VIEW_TYPE_ACKNOWLEDGEMENT;
                    $do_set_step_code = true;
                }
                if ($do_set_step_code) {
                    foreach ($path_steps as $path_step_code) {
                        $users = $path_step_code['uids'];
                        if (false !== array_search($user_id, $users)) {
                            $screen_properties['stepCode']
                                = $path_step_code['col_code'];
                        }
                        if (cb_at($path_step_code, 'in_process')) {
                            break;
                        }
                    }
                }
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID:
                $screen_properties['viewer'] = GRN_WORKFLOW_VIEW_TYPE_APPROVER;
                $path_steps_for_code = array_reverse($path_steps);
                foreach ($path_steps_for_code as $path_step_code) {
                    $users = $path_step_code['uids'];
                    if (cb_at($path_step_code, 'in_process')) {
                        break;
                    }
                    if (false !== array_search($user_id, $users)) {
                        $screen_properties['stepCode']
                            = $path_step_code['col_code'];
                    }

                }
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID:
                $screen_properties['viewer'] = GRN_WORKFLOW_VIEW_TYPE_PUBLIC;
                break;
        }
        $customization_data
            = CustomizationUtil::getPrintCustomizationData($customization_petition,
            $screen_properties);

        // Assign customization information
        grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
            new grn\grn\customization\workflow\WorkflowJsApiLoader($petition['form'],
                $petition_id, $folder_id),
            new grn\grn\customization\workflow\RequestPrintShowJsApiEvent(["data" => $customization_data])
        );
    }
}

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

$t->skipWarning();
$t->display("{$page_name}.tpl");


