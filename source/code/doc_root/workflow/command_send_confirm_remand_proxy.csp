<?php

use grn\grn\JSONResponse;

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;
    $json = JSONResponse::create();

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Get Parameter
    $folder_id = @ $G_INPUT['fid'];    //Folder ID
    $petition_id = @ $G_INPUT['pid'];    //Petition ID
    $command = @ $G_INPUT['cmd'];    //Command
    $mode = @ $G_INPUT['mode'];   //Mode Parameter
    $simple = @ $G_INPUT['simple'];
    $cpsf = @ $G_INPUT['cpsf'];
    $handle = @ $G_INPUT['handle'];

    //Get Session Key
    require_once('workflow/controller_util.csp');
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();

    //Create Parameter Translation Map for Petition
    $translation_map_petition = [
        'ptid'       => '_id',        //Petition ID
        'user'       => 'user',       //User
        'agent_user' => 'agent_user', //Agent User
    ];

    $petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $petition = $petition_util->getView($petition_id,
        $translation_map_petition);

    //Check Petition Owner
    global $G_workflow_login_user;
    if ($petition['user'] != $G_workflow_login_user->getOID()
        && $petition['agent_user'] != $G_workflow_login_user->getOID()
    ) {
        //Petition Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
    }

    //Check Command Parameter
    switch ($command) {
        case 'back':
            //Redirect Back Page
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url('workflow/send_path_remand_proxy',
                        [
                            'fid'     => $folder_id,
                            'pid'     => $petition_id,
                            'mode'    => $mode,
                            'sf'      => 1,
                            'simple'  => $simple,
                            'cpsf'    => $cpsf,
                            'handle'  => $handle,
                            'tmp_key' => $tmp_key
                        ])
                ]);
                cb_safe_exit();
            }
            cb_redirect('workflow/send_path_remand_proxy', [
                'fid'     => $folder_id,
                'pid'     => $petition_id,
                'mode'    => $mode,
                'sf'      => 1,
                'simple'  => $simple,
                'cpsf'    => $cpsf,
                'handle'  => $handle,
                'tmp_key' => $tmp_key
            ]);
        case 'cancel':
            grn_workflow_cleanup_session($t, 'remand_proxy', $tmp_key);
            //Redirect Cancel Page
            if ($cpsf) {
                $params = ['cpsf' => $cpsf, 'tmp_key' => $tmp_key];
            } else {
                $params = ['fid' => $folder_id, 'pid' => $petition_id];
            }
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url('workflow/handle', $params)
                ]);
                cb_safe_exit();
            }
            cb_redirect('workflow/handle', $params);
            break;
        default:
            break;
    }

    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_send_form
        =& $session_manager->getSession('workflow/send_form_remand_proxy'
                                        . $tmp_key);
    $session_send_path
        =& $session_manager->getSession('workflow/send_path_remand_proxy'
                                        . $tmp_key);

    //Load Send Form Session (for Design)
    $petition_for_view = $session_send_form->get('petition');
    if ( ! is_array($petition_for_view) || 0 == count($petition_for_view)) {
        // フォームがない
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_DENY_REQUEST_DATA);
    }
    $item_data_list_for_view = $session_send_form->get('item_list');
    $path_step_data_list_for_view
        = $session_send_form->get('path_step_data_list');
    $path_skip_data_for_view
        = $session_send_form->get('path_skip_data');
    $change_access_data_list_for_view
        = $session_send_form->get('change_access_data_list');
    $properties_for_view = $session_send_form->get('properties');

    //Load Send Form Session (for Data)
    $send_form_data_list = $session_send_form->get('send_form_data_list');

    //Load Send Path Session (for Data)
    $send_path_data_list = $session_send_path->get('send_path_data_list');

    //Replace Path Step Data User by Send Path Data List
    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum =& $G_container_base->getInstance('uum');
    $uids = [];
    foreach (array_keys($send_path_data_list) as $path_step_data_id) {
        $path_step_data_list_for_view[$path_step_data_id]['users'] = [];
        $path_step_data_list_for_view[$path_step_data_id]['uids'] = [];

        foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
            if ($user_id == 0) {
                $path_step_data_list_for_view[$path_step_data_id]['users'][]
                    = ['_id' => $user_id];
                $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                    = $user_id;
            } else {
                $uids[] = $user_id;
            }
        }
    }

    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($uids, $columns);

    foreach (array_keys($send_path_data_list) as $path_step_data_id) {
        foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
            if (0 != $user_id) {
                $path_step_data_user = [];
                $path_step_data_user['_id']
                    = $user_id;
                $path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                    = $users[$user_id]['col_display_name'];
                $path_step_data_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                    = $users[$user_id]['col_foreign_key'];
                $path_step_data_user['col_position']
                    = $users[$user_id]['col_position'];
                $path_step_data_list_for_view[$path_step_data_id]['users'][]
                    = $path_step_data_user;
                $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                    = $user_id;
            }
        }
    }

    $agent_uid = $petition_for_view['agent_user'];
    $user_id = $petition_for_view['user'];
    //$properties_for_view['petition_user'] = $user_id;
    //$properties_for_view['agent_user']    = $agent_uid;
    $properties_for_view['petition_user'] = $user_id;
    $properties_for_view['agent_user'] = $agent_uid;
    $properties_for_view['petition_user_nochange'] = 1;

    //Modify Petition
    $form_for_view = $petition_for_view;
    $form_for_view['fid'] = $petition_for_view['form'];
    $form_for_view['name'] = $petition_for_view['form_name'];
    $form_for_view['foreign_key'] = $petition_for_view['form_foreign_key'];
    $form_for_view['reapply'] = true;
    require_once('workflow/petition_logic.csp');
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
    $petition = $petition_logic->get($petition_for_view['fid']);
    if (GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']) {
        cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_REAPPLY);
    }
    $petition_id = $petition_logic->modify($petition_for_view['fid'],
        $form_for_view, $properties_for_view);

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'remand_petition';

        $message_args['pid'] = $petition_id;
        $message_args['fid'] = $form_for_view['fid'];
        $message_args['name'] = $form_for_view['name'];
        $message_args['icon_type'] = $form_for_view['icon_type'];
        $message_args['icon_id'] = $form_for_view['icon_id'];
        $message_args['icon_url'] = $form_for_view['icon_url'];
        $message_args['serial_type'] = $form_for_view['serial_type'];
        $message_args['serial_format'] = $form_for_view['serial_format'];
        $message_args['serial_number'] = $form_for_view['serial_number'];
        $message_args['subject'] = $form_for_view['subject'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Modify Item Data
    require_once('workflow/itemdata_logic.csp');
    $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();
    foreach (array_keys($item_data_list_for_view) as $item_data_id) {
        $item_for_view = $item_data_list_for_view[$item_data_id];
        $item_for_view['iid']
            = $item_data_list_for_view[$item_data_id]['item'];
        $item_for_view['item_data']
            = $item_data_list_for_view[$item_data_id]['iid'];
        $itemdata_logic->modify($item_data_id, $petition_id, $item_for_view);
    }

    $item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
    $item_data_util->addAutoCalculationItemDataById($petition_id);

    //Reset Skip Flag
    foreach (array_keys($path_step_data_list_for_view) as $path_step_data_id) {
        $path_step_data_list_for_view[$path_step_data_id]['col_skip'] = false;
    }

    //Evaluate Path Step Datas
    require_once('workflow/path_condition_data_logic.csp');
    $path_condition_logic
        = GRN_Workflow_Path_Condition_Data_Logic::getInstance();
    $condition_path_step_data_list
        = $path_condition_logic->getEvaluatedPathStepDatas($path_step_data_list_for_view,
        $path_skip_data_for_view, $send_form_data_list);

    $psids = [];
    foreach ($condition_path_step_data_list as $path_step_data) {
        $psids[] = $path_step_data['col_path_step'];
    }

    //Create Path Step Data
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    $path_step_data_list_for_view
        = $controller_util->modifyPathInfo($petition_id,
        $path_step_data_list_for_view, $psids);
    $path_step_data_list_for_view_current
        = current($path_step_data_list_for_view);
    $in_process_path_step_id
        = $controller_util->getInProcessPathStepId($path_step_data_list_for_view_current);

    //Send Petition

    //Attach Folder List
    global $G_workflow_login_user;
    //$petition_logic->attachFolderList($petition_id, array($G_workflow_login_user->getOID()), 'OUT_FOLDER_FOREIGN_KEY', FALSE);          //Out Folder
    $petition_logic->attachFolderList($petition_id, [$user_id, $agent_uid],
        'OUT_FOLDER_FOREIGN_KEY', false);          //Out Folder

    // 再申請するとき、申請者の未処理一覧とのフォルダリレーションを削除
    $login_id = $G_workflow_login_user->getOID();
    $petition_logic->detachFolderList($petition_id, [$user_id, $agent_uid]);

    // ベースサービスの通知を削除
    require_once('workflow/notification.csp');
    $logic = GRN_Workflow_Notification::getInstance();
    $logic->removeAll($petition_id);

    $current_uids
        =& $path_step_data_list_for_view[$in_process_path_step_id]['uids'];

    if ($current_uids) {
        while (false !== ($result = array_search(null, $current_uids))) {
            unset($current_uids[$result]);
        }
        $petition_logic->attachFolderList($petition_id, $current_uids,
            'UNPROCESSED_FOLDER_FOREIGN_KEY');  //Un Process Folder
        $petition_logic->attachFolderList($petition_id, $current_uids,
            'IN_FOLDER_FOREIGN_KEY');           //In Folder
    }

    grn_workflow_cleanup_session($t, 'remand_proxy', $tmp_key);

    //Redirect Next Page
    if (defined('AJAX_REQUEST')) {
        $json->response([
            'link' => cb_get_full_url('workflow/index',
                ['fid' => $folder_id, 'sf' => 1])
        ]);
        cb_safe_exit();
    }
    cb_redirect('workflow/index', ['fid' => $folder_id, 'sf' => 1]);
}


