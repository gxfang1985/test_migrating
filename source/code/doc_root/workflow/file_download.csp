<?php

use grn\grn\ThumbnailUtil;

global $G_INPUT;

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
$user_id = $login->getOID();
$tmp__file_key = @ $G_INPUT['tmp_file_key'];
if ( ! is_null($tmp__file_key)) {

    require_once('grn/controller.csp');
    require_once('workflow/controller_util.csp');
    require_once('grn/upload.csp');
    $tmp_key = grn_get_temporary_key();
    $iid = @$G_INPUT['iid'];
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_page = &$session_manager->getSession("pagename" . $tmp_key);
    $page_name = 'workflow/' . $session_page->get("pagename") . $tmp_key;

    $command_page_name = 'workflow/command_' . $session_page->get("pagename")
                         . $tmp_key;
    $session_send_form
        =& $session_manager->getSession($command_page_name);
    $attached_file_item_list
        = $session_send_form->getFiles('attached_session_file_item');
    $file = @$attached_file_item_list[$tmp__file_key];
    if (is_null($file)) {
        $session_send_form =& $session_manager->getSession($page_name);
        $item_list_for_view = $session_send_form->get('item_list');
        if (is_null($item_list_for_view)) {
            $item_list_for_view = $session_send_form->get('item_list');
        }
        if ( ! is_array($item_list_for_view)
             || ! isset($item_list_for_view[$iid])
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_INVALID_ID);
        }

        $upload_file
            = GRN_UploadFile::getUploadedFiles(@$item_list_for_view[$iid]['upload_ticket'],
            [@$tmp__file_key], false);
        if ( ! is_array($upload_file) || count($upload_file) == 0) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_INVALID_ID);
        }
        $file = reset($upload_file);
    }
    assert('is_a($file,"CB_ServerFile")');
    $content_type = '';
    $ext = substr(strrchr($file->get('name'), '.'), 1);
    if (strlen($ext) > 0) {
        require_once('grn/mime.csp');
        $mcm = GRN_MIMEConfigManager::getInstance();
        $content_type = $mcm->getMIMEType($ext);
    }
    if ( ! is_string($content_type) || strlen($content_type) == 0) {
        $content_type = 'application/octet-stream';
    }
    $data = file_get_contents($file->getPath());
    cb_prepare_download($file->get('name'), $content_type, false);
    echo $data;

} else {
    //Get Parameters
    $folder_id = @ $G_INPUT['fid'];
    $petition_id = @ $G_INPUT['pid'];
    $item_data_file_id = @ $G_INPUT['ifid'];
    $thumbnail = @ $G_INPUT['thumbnail'];
    $thumbnail_xsize = @ $G_INPUT['thumbnail_xsize'];
    $thumbnail_ysize = @ $G_INPUT['thumbnail_ysize'];


    //Set Defaullt X / Y Size, if No Setting
    $thumbnail_xsize = ( ! $thumbnail_xsize) ? GRN_WORKFLOW_THUMBNAIL_WIDTH
        : $thumbnail_xsize;
    $thumbnail_ysize = ( ! $thumbnail_ysize) ? GRN_WORKFLOW_THUMBNAIL_HEIGHT
        : $thumbnail_ysize;

    //Get Petition

    global $G_workflow_login_user;
    require_once('workflow/controller_util.csp');
    $petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $item_data_util
        = GRN_Workflow_ItemData_Controller_Utility::getInstance();
    $item_data_file_util
        = GRN_Workflow_ItemDataFile_Controller_Utility::getInstance();

    //Create Parameter Translation Map
    $translation_map_petition = [
        'pid'                    => '_id',
        //Petition ID
        'petition_number'        => 'petition_number',
        //Petition Number
        'name'                   => 'name',
        //Petition Name
        'form'                   => 'form',
        //Petition Form ID
        'form_name'              => 'form_name',
        //Petition Form Name
        'creator'                => 'creator',
        //Petition Creator
        'creator_name'           => 'creator_name',
        //Petition Creator Name
        'creator_foreign_key'    => 'creator_foreign_key',
        //Petition Creator Foreign Key
        'ctime'                  => 'ctime',
        //Petition Create Time
        'icon_type'              => 'icon_type',
        //Petition Icon Type
        'icon_id'                => 'icon_id',
        //Petition Icon ID
        'icon_url'               => 'icon_url',
        //Petition Icon URL
        'status'                 => 'status',
        'transactor'             => 'transactor',
        'transactor_name'        => 'transactor_name',
        'transactor_foreign_key' => 'transactor_foreign_key',
        'user'                   => 'user',
        'user_name'              => 'user_name',
        'user_foreign_key'       => 'user_foreign_key',
        'agent_user'             => 'agent_user',
        'agent_user_name'        => 'agent_user_name',
        'agent_user_foreign_key' => 'agent_user_foreign_key',
        'comment'                => 'comment',
        'ptime'                  => 'ptime',
        'reapply'                => 'reapply',
    ];

    //Create Parameter Translation Map
    $translation_map_item_data = [
        'idid'             => '_id',                  //Item Data ID
        'settings'         => 'settings',             //ITem Data Settings
        'attach_file'      => 'attach_file',
        'attach_file_view' => 'attach_file_view'
    ];


    //Create Parameter Translation Map
    $translation_map_item_data_file = [
        'ifid'      => '_id',                  //Item Data File ID
        'item_data' => 'item_data',            //Item Data ID
        'file'      => 'file',                 //GRN_File ID
    ];


    $folder_id_org = $folder_id;

    //Get Petition for view
    $no_check = false;
    $is_pulic = false;
    if ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
        require_once('workflow/controller_util.csp');
        $c = GRN_Workflow_Category_Controller_Utility::getInstance();
        $r = $c->checkPublicByPetitionId($petition_id, false);
        if ( ! $r) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
        $no_check = true;
    } elseif ($folder_id == GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID) {
        // 承認予定の判断
        require_once('workflow/controller_util.csp');
        $c = GRN_Workflow_Petition_Controller_Utility::getInstance();
        $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
        if ($r == true) {
            $no_check = true;
        } else {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
    } else {
        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folder_org = $logic->getFolder($folder_id_org);
        $folder_user_id = $folder_org['col_user'];
        if ($user_id != $folder_user_id) {
            //代理承認の検証
            if ($folder_org['col_folder_type']
                == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
            ) {
                require_once('workflow/config.csp');
                $configs = GRN_Workflow_Configs::getInstance();
                $config =& $configs->getSystemConfig();
                if ($config->isProxyApproval($user_id, $folder_user_id)) {
                    $user_id = $folder_user_id;
                    $no_check = true;
                } else {
                    //公開申請データの閲覧権限のチェック
                    require_once('workflow/controller_util.csp');
                    $c
                        = GRN_Workflow_Category_Controller_Utility::getInstance();
                    $r = $c->checkPublicByPetitionId($petition_id, false);
                    if ($r == true) {
                        $is_pulic = true;
                        $no_check = true;
                    }
                }
            } else {
                //公開申請データの閲覧権限のチェック
                require_once('workflow/controller_util.csp');
                $c = GRN_Workflow_Category_Controller_Utility::getInstance();
                $r = $c->checkPublicByPetitionId($petition_id, false);
                if ($r == true) {
                    $is_pulic = true;
                    $no_check = true;
                }
            }
        }
    }

    $petition = $petition_util->getView($petition_id,
        $translation_map_petition);
    $controller_util = new GRN_Workflow_ControllerUtil();
    $path_info
        = $controller_util->getPathInfoForView($G_workflow_login_user->getOID(),
        $petition_id, $petition, $folder_id, $no_check, CB_DATABASE_NO_LOCK);

    if ( ! $no_check && ! $path_info['view']
         && $folder_id != GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
    ) {
        //Item Data File Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_NOT_FOUND);
    }

    // Block accesses by users in 'circular path'.
    if ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
        require_once('workflow/controller_util.csp');
        $c = GRN_Workflow_Petition_Controller_Utility::getInstance();
        $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
        if ( ! $r) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
    }

    require_once('workflow/petition_logic_base.csp');
    $petition_logic = GRN_Workflow_Petition_Logic_Base::getInstance();
    $petition =& $petition_logic->get($petition_id);

    /*
    //Check Similar Folder
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil('workflow/file_view');
    $folder = $controller_util->getSimilarFolder($G_workflow_login_user->getOID(), $folder_id, $petition_id);
    if (!$folder)
    {
        //Item Data File Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_NOT_FOUND);
    }
    */

    //Get Item Data File
    require_once('workflow/itemdatafile_logic.csp');
    $item_data_file_logic = GRN_Workflow_ItemDataFile_Logic::getInstance();
    $item_data_file
        = $item_data_file_logic->getDirect($item_data_file_id);

    //Check Access Right to the file.
    $right_to_view_file = false;

    //Get Item Data File 
    $item_data_file_for_access
        = $item_data_file_util->getView($item_data_file_id,
        $translation_map_item_data_file);
    //Get Item Data 
    $item_data
        = $item_data_util->getView($item_data_file_for_access['item_data'],
        $translation_map_item_data, $petition_id);

    // Get Path Step Data
    require_once('workflow/path_data.csp');
    $path_step_data_logic = GRN_Workflow_PathStepDatas::getInstance();
    $path_step_columns = ['_id', GRN_WORKFLOW_COLUMN_TYPE];
    $path_step_list
        = $path_step_data_logic->getListByPetitionId($petition_id,
        $path_step_columns, 0, -1, CB_DATABASE_NO_LOCK);

    if (count($path_step_list)) {

        // Get Path Step Data User
        $path_step_data_user_logic
            = GRN_Workflow_PathStepDataUsers::getInstance();
        $path_step_user_columns = [
            'tab_grn_workflow_pathstepdatauser' => [
                '_id'                    => 'pid',
                'col_path_step_data'     => 'col_path_step_data',
                'col_user'               => 'col_user',
                'col_display_name'       => 'col_display_name',
                'col_foreign_key'        => 'col_foreign_key',
                'col_agent_user'         => 'col_agent_user',
                'col_agent_display_name' => 'col_agent_display_name',
                'col_agent_foreign_key'  => 'col_agent_foreign_key',
                'col_result'             => 'col_result',
                'col_ptime'              => 'col_ptime',
                'col_comment'            => 'col_comment'
            ],
            'tab_cb_user'                       => [
                '_id'              => '_id',
                'col_display_name' => 'col_current_display_name'
            ]
        ];
        $users
            = $path_step_data_user_logic->getListByPathStepDataIds(array_keys($path_step_list),
            $path_step_user_columns);

        $path_step_user_list = [];
        foreach ($users as $user) {
            if ( ! in_array($user['col_path_step_data'],
                array_keys($path_step_list))
            ) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_ITEM_DENY_ACCESS);
            }

            if ($path_step_list[$user['col_path_step_data']]['col_type'] == 1) {
                $path_step_type = 'circular';
            } else {
                $path_step_type = 'acceptance';
            }

            if ($user['col_agent_user'] > 0) {
                $path_step_user_list[] = [
                    'path_step_data_id' => $user['col_path_step_data'],
                    'type'              => $path_step_type,
                    'user_id'           => $user['col_agent_user']
                ];
            }
            if ($user['col_user'] > 0) {
                $path_step_user_list[] = [
                    'path_step_data_id' => $user['col_path_step_data'],
                    'type'              => $path_step_type,
                    'user_id'           => $user['col_user']
                ];
            }
        }

        // Check in 'circular' path step.
        $in_circular = false;
        for ($i = 0; $i < count($path_step_user_list); $i++) {
            if ($path_step_user_list[$i]['type'] == 'circular'
                && $path_step_user_list[$i]['user_id'] == $user_id
            ) {
                $in_circular = true;
                $right_to_view_file = true;
                break;
            }
        }

        // Check in 'acceptance' path step.
        $in_acceptance = false;
        if ( ! $in_circular) {
            require_once('workflow/change_access_data.csp');
            $change_access_data_logic
                = GRN_Workflow_ChangeAccessData::getInstance();

            for ($i = 0; $i < count($path_step_user_list); $i++) {
                if ($path_step_user_list[$i]['type'] == 'acceptance'
                    && $path_step_user_list[$i]['user_id'] == $user_id
                ) {
                    $change_access_data = $change_access_data_logic->evaluateEx(
                        $item_data_file_for_access['item_data'],
                        $path_step_user_list[$i]['path_step_data_id']
                    );
                    if ($change_access_data['col_view'] == 1) {
                        $in_acceptance = true;
                        $right_to_view_file = true;
                        break;
                    }
                }
            }
        }
    }

    // Check if login user is the creator of this petition.
    $petition = $petition_util->getView($petition_id,
        $translation_map_petition);
    if ($petition['user'] > 0 && $petition['user'] == $user_id
        || $petition['agent_user'] > 0 && $petition['agent_user'] == $user_id
    ) {
        if ($item_data['attach_file_view'] == '1') {
            $right_to_view_file = true;
        }
    }

    if ( ! $right_to_view_file && $folder_id != GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
        if ($is_pulic == false) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_DENY_ACCESS);
        }
    }

    //Get GRN_File Object
    require_once('workflow/file.csp');
    $file_manager = new GRN_Workflow_FileManager_Core();
    $file_table =& $file_manager->getFileTable();
    /** @var GRN_Workflow_File $file_object */
    $file_object =& $file_table->getRow($item_data_file['col_file']);
    if ( ! $file_object) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WORKFLOW_ITEMDATAFILE_NOT_FOUND);
    }

    //Download Current Version File
    $body_object =& $file_object->getCurrentBody();

    if ($thumbnail == 1) {
        $mime_type = $body_object->get('mime');    //Get MIME Type
        $util = new ThumbnailUtil();
        cb_prepare_download($body_object->get('name'), $mime_type, true, true);
        $result = $util->makeThumbnailByImageData($body_object->getContents(),
            (int)$thumbnail_xsize, (int)$thumbnail_ysize);
        if ($result === false) {
            $body_object->download(true);
        }
    } else {
        $body_object->download(true);
    }
}
cb_safe_exit();
