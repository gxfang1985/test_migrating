<?php

use grn\grn\JSONResponse;

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;
    $json = JSONResponse::create();

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Get Parameter
    $folder_id = @ $G_INPUT['fid'];    //Folder ID
    $petition_id = @ $G_INPUT['pid'];    //Petition ID
    $command = @ $G_INPUT['cmd'];    //Command
    $mode = @ $G_INPUT['mode'];   //Mode Parameter
    $simple = @ $G_INPUT['simple'];

    //Get Session Key
    require_once('workflow/controller_util.csp');
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();

    //Create Parameter Translation Map for Petition
    $translation_map_petition = [
        'ptid'   => '_id',  //Petition ID
        'user'   => 'user', //User
        'status' => 'status', //Status
        'form'   => 'form', //Form ID
    ];

    require_once('workflow/controller_util.csp');
    $petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $petition = $petition_util->getView($petition_id,
        $translation_map_petition);

    //Check Petition Owner
    global $G_workflow_login_user;
    if ($petition['user'] != $G_workflow_login_user->getOID()) {
        //Petition Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
    }

    //Check Command Parameter
    switch ($command) {
        case 'back':
            //Redirect Back Page
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url('workflow/send_path_draft', [
                        'fid'     => $folder_id,
                        'pid'     => $petition_id,
                        'mode'    => $mode,
                        'simple'  => $simple,
                        'sf'      => 1,
                        'tmp_key' => $tmp_key
                    ])
                ]);
                cb_safe_exit();
            }
            cb_redirect('workflow/send_path_draft', [
                'fid'     => $folder_id,
                'pid'     => $petition_id,
                'mode'    => $mode,
                'simple'  => $simple,
                'sf'      => 1,
                'tmp_key' => $tmp_key
            ]);
            break;
        case 'cancel':
            grn_workflow_cleanup_session($t, 'draft', $tmp_key);
            //Redirect Cancel Page
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url('workflow/view', [
                        'fid'     => $folder_id,
                        'pid'     => $petition_id,
                        'tmp_key' => $tmp_key
                    ])
                ]);
                cb_safe_exit();
            }
            cb_redirect('workflow/view', [
                'fid'     => $folder_id,
                'pid'     => $petition_id,
                'tmp_key' => $tmp_key
            ]);
            break;
        default:
            break;
    }

    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_send_form
        =& $session_manager->getSession('workflow/send_form_draft'
                                        . $tmp_key);
    $session_send_path
        =& $session_manager->getSession('workflow/send_path_draft'
                                        . $tmp_key);

    //Load Send Form Session (for Design)
    $form_for_view = $session_send_form->get('form');
    if ( ! is_array($form_for_view) || 0 == count($form_for_view)) {
        // フォームがない
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_DENY_REQUEST_DATA);
    }
    $item_list_for_view = $session_send_form->get('item_list');
    $path_step_list_for_view
        = $session_send_form->get('path_step_list');
    $path_step_data_list_for_view
        = $session_send_form->get('path_step_data_list');
    $default_path_step_list_for_view
        = $session_send_form->get('default_path_step_list');
    $path_skip_for_view = $session_send_form->get('path_skip');
    $path_skip_data_for_view
        = $session_send_form->get('path_skip_data');
    $change_access_list_for_view
        = $session_send_form->get('change_access_list');
    $change_access_data_list_for_view
        = $session_send_form->get('change_access_data_list');
    $properties_for_view = $session_send_form->get('properties');

    //Load Send Form Session (for Data)
    $send_form_data_list = $session_send_form->get('send_form_data_list');

    //Load Send Path Session (for Data)
    $send_path_data_list = $session_send_path->get('send_path_data_list');

    // 未分類でないカテゴリのアクセス権をチェック
    $category_id = $form_for_view['category'];
    if (0 == strlen($category_id)) {
        $category_id = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
    }
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
    }

    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum =& $G_container_base->getInstance('uum');
    $uids = [];
    if ($petition['status'] == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL) {
        //Replace Path Step Data User by Send Path Data List
        foreach (array_keys($send_path_data_list) as $path_step_data_id) {
            $path_step_data_list_for_view[$path_step_data_id]['users'] = [];
            $path_step_data_list_for_view[$path_step_data_id]['uids'] = [];

            foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
                if ($user_id == 0) {
                    $path_step_data_list_for_view[$path_step_data_id]['users'][]
                        = ['_id' => $user_id];
                    $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                        = $user_id;
                } else {
                    $uids[] = $user_id;
                }
            }
        }

        $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
        $users = $grn_uum->getUsersInfo($uids, $columns);

        foreach (array_keys($send_path_data_list) as $path_step_data_id) {
            foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
                if (0 != $user_id) {
                    $path_step_data_user = [];
                    $path_step_data_user['_id']
                        = $user_id;
                    $path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                        = $users[$user_id]['col_display_name'];
                    $path_step_data_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                        = $users[$user_id]['col_foreign_key'];
                    $path_step_data_user['col_position']
                        = $users[$user_id]['col_position'];
                    $path_step_data_list_for_view[$path_step_data_id]['users'][]
                        = $path_step_data_user;
                    $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                        = $user_id;
                }
            }
        }
    } else {
        //Replace Default Path Step User by Path Step Data List
        foreach (array_keys($send_path_data_list) as $path_step_id) {
            $default_path_step_list_for_view[$path_step_id]['users'] = [];
            $default_path_step_list_for_view[$path_step_id]['uids'] = [];

            foreach ($send_path_data_list[$path_step_id] as $user_id) {
                if ($user_id == 0) {
                    $default_path_step_list_for_view[$path_step_id]['users'][]
                        = ['_id' => $user_id];
                    $default_path_step_list_for_view[$path_step_id]['uids'][]
                        = $user_id;
                } else {
                    $uids[] = $user_id;
                }
            }
        }

        $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
        $users = $grn_uum->getUsersInfo($uids, $columns);

        foreach (array_keys($send_path_data_list) as $path_step_id) {
            foreach ($send_path_data_list[$path_step_id] as $user_id) {
                if (0 != $user_id) {
                    $path_step_user = [];
                    $path_step_user['_id']
                        = $user_id;
                    $path_step_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                        = $users[$user_id]['col_display_name'];
                    $path_step_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                        = $users[$user_id]['col_foreign_key'];
                    $path_step_user['col_position']
                        = $users[$user_id]['col_position'];
                    $default_path_step_list_for_view[$path_step_id]['users'][]
                        = $path_step_user;
                    $default_path_step_list_for_view[$path_step_id]['uids'][]
                        = $user_id;
                }
            }
        }
    }

    //Create Petition
    require_once('workflow/petition_logic.csp');
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
    $petition = $petition_logic->get($form_for_view['petition']);
    if (GRN_WORKFLOW_STATUS_TEMPORARY != $petition['col_status']
        && GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL != $petition['col_status']
    ) {
        cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_APPLY);
    }
    $petition_id = $petition_logic->modify($form_for_view['petition'],
        $form_for_view, $properties_for_view, true);
    $form_for_view['petition'] = $petition_id;


    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_draft';

        $message_args['pid'] = $petition_id;
        $message_args['fid'] = $form_for_view['fid'];
        $message_args['name'] = $form_for_view['name'];
        $message_args['icon_type'] = $form_for_view['icon_type'];
        $message_args['icon_id'] = $form_for_view['icon_id'];
        $message_args['icon_url'] = $form_for_view['icon_url'];
        $message_args['serial_type'] = $form_for_view['serial_type'];
        $message_args['serial_format'] = $form_for_view['serial_format'];
        $message_args['serial_number'] = $form_for_view['serial_number'];
        $message_args['subject'] = $form_for_view['subject'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Create Item Data
    $column_list = ['_id'];
    require_once('workflow/itemdata_logic.csp');
    $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();
    $exists_item_data_list_for_view = $itemdata_logic->getList($petition_id,
        $column_list);

    $property_list_for_updating = null;
    if (GRN_WORKFLOW_STATUS_TEMPORARY == $petition['col_status']) {
        $property_list_for_updating = [
            GRN_WORKFLOW_COLUMN_ITEM               => 'iid',
            GRN_WORKFLOW_COLUMN_DISPLAY_NAME       => 'display_name',
            GRN_WORKFLOW_COLUMN_TYPE               => 'type',
            GRN_WORKFLOW_COLUMN_OPTION_STRING      => 'option_string',
            GRN_WORKFLOW_COLUMN_OPTION_STRING_TYPE => 'option_string_type',
            GRN_WORKFLOW_COLUMN_DESCRIPTION        => 'description',
            GRN_WORKFLOW_COLUMN_DESCRIPTION_TYPE   => 'description_type',
            GRN_WORKFLOW_COLUMN_DESCRIPTION_EDITOR => 'description_editor',
            GRN_WORKFLOW_COLUMN_FOREIGN_KEY        => 'foreign_key',
            GRN_WORKFLOW_COLUMN_ATTACH_FILE        => 'attach_file',
            GRN_WORKFLOW_COLUMN_ATTACH_FILE_VIEW   => 'attach_file_view',
            GRN_WORKFLOW_COLUMN_FORM               => 'form',
            GRN_WORKFLOW_COLUMN_SETTINGS           => 'settings',
            GRN_WORKFLOW_COLUMN_BR                 => 'br',
            GRN_WORKFLOW_COLUMN_SEPARATOR          => 'separator',
            GRN_WORKFLOW_COLUMN_REQUIRED           => 'required',
            GRN_WORKFLOW_COLUMN_LIST_INDEX         => 'list_index',
            GRN_WORKFLOW_COLUMN_ITEM_DATA          => 'item_data',
            GRN_WORKFLOW_COLUMN_NUMBER             => 'number',
            GRN_WORKFLOW_COLUMN_TEXT               => 'text',
            GRN_WORKFLOW_COLUMN_ACCESS_CHANGE      => 'access_change'
        ];
    }

    foreach (array_keys($item_list_for_view) as $item_id) {
        if (array_key_exists('item_data', $item_list_for_view[$item_id])) {
            //$item_list_for_view[$item_id]['item_data'] = $itemdata_logic->modify($item_list_for_view[$item_id]['item_data'], $petition_id, $item_list_for_view[$item_id]);
            $item_for_view = $item_list_for_view[$item_id];
            if ($petition['col_status']
                == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
            ) {
                $item_for_view['iid'] = $item_list_for_view[$item_id]['item'];
            }
            $item_list_for_view[$item_id]['item_data']
                = $itemdata_logic->modify($item_for_view['item_data'],
                $petition_id, $item_for_view, true,
                $property_list_for_updating);
        } else {
            $item_list_for_view[$item_id]['item_data']
                = $itemdata_logic->add($petition_id,
                $item_list_for_view[$item_id]);
        }

        if (array_key_exists($item_list_for_view[$item_id]['item_data'],
            $exists_item_data_list_for_view)
        ) {
            unset($exists_item_data_list_for_view[$item_list_for_view[$item_id]['item_data']]);
        }
    }
    if (count($exists_item_data_list_for_view) !== 0) {
        $itemdata_logic->deleteMulti(array_keys($exists_item_data_list_for_view));
    }

    $item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
    $item_data_util->addAutoCalculationItemDataById($petition_id);

    if ($petition['col_status'] == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL) {
        //Reset Skip Flag
        foreach (
            array_keys($path_step_data_list_for_view) as $path_step_data_id
        ) {
            $path_step_data_list_for_view[$path_step_data_id]['col_skip']
                = false;
        }

        //Evaluate Path Step Datas
        require_once('workflow/path_condition_data_logic.csp');
        $path_condition_logic
            = GRN_Workflow_Path_Condition_Data_Logic::getInstance();
        $condition_path_step_data_list
            = $path_condition_logic->getEvaluatedPathStepDatas($path_step_data_list_for_view,
            $path_skip_data_for_view, $send_form_data_list);

        $psids = [];
        foreach ($condition_path_step_data_list as $path_step_data) {
            $psids[] = $path_step_data['col_path_step'];
        }

        //Create Path Step Data
        $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
        $path_step_data_list_for_view
            = $controller_util->modifyPathInfo($petition_id,
            $path_step_data_list_for_view, $psids);
        $path_step_data_list_for_view_current
            = current($path_step_data_list_for_view);
        $in_process_path_step_id
            = $controller_util->getInProcessPathStepId($path_step_data_list_for_view_current);
    } else {
        require_once('workflow/path_condition_logic.csp');
        $path_condition_logic
            = GRN_Workflow_Path_Condition_Logic::getInstance();
        $condition_path_step_list
            = $path_condition_logic->getEvaluatedPathSteps($path_step_list_for_view,
            $path_skip_for_view, $send_form_data_list, $item_list_for_view);

        //Create Path Step Data
        $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
        $path_step_list_for_view
            = $controller_util->modifyPathInfo($petition_id,
            $default_path_step_list_for_view,
            array_keys($condition_path_step_list));
        $path_step_list_for_view_current = current($path_step_list_for_view);
        $in_process_path_step_id
            = $controller_util->getInProcessPathStepId($path_step_list_for_view_current);

        //Check Path Skip Data / Path Condition Data / Path Condition Step Data
        $remove_id_list = [];
        $remove_id_list['path_skip_data'] = [];
        $remove_id_list['path_condition_data'] = [];
        $remove_id_list['path_condition_step_data'] = [];
        $modify_id_map = [];
        $modify_id_map['path_skip_data'] = [];
        $modify_id_map['path_condition_data'] = [];
        $modify_id_map['path_condition_step_data'] = [];
        foreach (
            array_keys($path_skip_data_for_view) as $path_condition_data_id
        ) {
            foreach (
                array_keys($path_skip_data_for_view[$path_condition_data_id]) as
                $path_condition_step_data_id
            ) {
                $path_condition_step_data
                    =& $path_skip_data_for_view[$path_condition_data_id][$path_condition_step_data_id];

                if (in_array($path_condition_step_data['col_path_skip_data'],
                        $remove_id_list['path_skip_data'])
                    || in_array($path_condition_step_data['col_path_condition_data'],
                        $remove_id_list['path_condition_data'])
                    || in_array($path_condition_step_data['col_path_condition_step_data'],
                        $remove_id_list['path_condition_step_data'])
                ) {
                    continue;
                }

                //Check Path Skip
                if ( ! $path_condition_step_data['col_path_skip']) {
                    if ($path_condition_step_data['col_path_skip_data']) {
                        $remove_id_list['path_skip_data'][]
                            = $path_condition_step_data['col_path_skip_data'];
                    }
                    break;
                }
                $modify_id_map['path_skip_data'][$path_condition_step_data['col_path_skip']]
                    = $path_condition_step_data['col_path_skip_data'];

                //Check Path Condition
                if ( ! $path_condition_step_data['col_path_condition']) {
                    if ($path_condition_step_data['col_path_condition_data']) {
                        $remove_id_list['path_condition_data'][]
                            = $path_condition_step_data['col_path_condition_data'];
                    }
                    break;
                }
                $modify_id_map['path_condition_data'][$path_condition_step_data['col_path_condition']]
                    = $path_condition_step_data['col_path_condition_data'];

                //Check Path Condition Step
                if ( ! $path_condition_step_data['col_path_condition_step']) {
                    if ($path_condition_step_data['col_path_condition_step_data']) {
                        $remove_id_list['path_condition_step_data'][]
                            = $path_condition_step_data['col_path_condition_step_data'];
                    }
                    break;
                }
                $modify_id_map['path_condition_step_data'][$path_condition_step_data['col_path_condition_step']]
                    = $path_condition_step_data['col_path_condition_step_data'];
            }
        }

        //Remove Path Skip Data / Path Condition Data / Path Condition Step Data
        require_once('workflow/path_skip_data.csp');
        $path_skip_data_logic = GRN_Workflow_PathSkipDatas::getInstance();

        foreach ($remove_id_list['path_skip_data'] as $path_skip_data_id) {
            $path_skip_data_logic->remove($path_skip_data_id);
        }

        if (count($remove_id_list['path_condition_data']) !== 0) {
            require_once('workflow/path_condition_data.csp');
            $path_condition_data_logic
                = GRN_Workflow_PathConditionDatas::getInstance();
            $path_condition_data_logic->removeList($remove_id_list['path_condition_data']);
        }

        if (count($remove_id_list['path_condition_step_data']) !== 0) {
            require_once('workflow/path_condition_data.csp');
            $path_condition_step_data_logic
                = GRN_Workflow_PathConditionStepDatas::getInstance();
            $path_condition_step_data_logic->removeList($remove_id_list['path_condition_step_data']);
        }

        //Create or Modify Path Skip Data / Path Condition Data / Path Condition Step Data
        $first_flag = true;
        $prev_path_condition_id = 0;
        foreach (array_keys($path_skip_for_view) as $path_condition_id) {
            foreach (
                array_keys($path_skip_for_view[$path_condition_id]) as
                $path_condition_step_id
            ) {
                $path_condition_step
                    =& $path_skip_for_view[$path_condition_id][$path_condition_step_id];

                if ($first_flag) {
                    //Add or Modify Path Skip Data
                    $props = [
                        'col_path_skip' => $path_condition_step['col_path_skip'],
                        'col_petition'  => $form_for_view['petition'],
                        'col_item_data' => $item_list_for_view[$path_condition_step['col_item']]['item_data'],
                    ];
                    require_once('workflow/path_skip_data.csp');
                    $path_skip_data_logic
                        = GRN_Workflow_PathSkipDatas::getInstance();
                    if ( ! array_key_exists($path_condition_step['col_path_skip'],
                        $modify_id_map['path_skip_data'])
                    ) {
                        $path_skip_data_id = $path_skip_data_logic->add($props);
                    } else {
                        $path_skip_data_id
                            = $modify_id_map['path_skip_data'][$path_condition_step['col_path_skip']];
                        $path_skip_data_logic->modify($path_skip_data_id,
                            $props);
                    }
                    $first_flag = false;
                }

                if ($prev_path_condition_id != $path_condition_id) {
                    //Add or Modify Path Condition Data
                    $props = [
                        'col_path_condition' => $path_condition_step['col_path_condition'],
                        'col_name'           => $path_condition_step['col_name'],
                        'col_number'         => $path_condition_step['col_number'],
                        'col_operator'       => $path_condition_step['col_operator'],
                        'col_option'         => $path_condition_step['col_option'],
                        'col_path_skip_data' => $path_skip_data_id,
                    ];
                    require_once('workflow/path_condition_data.csp');
                    $path_condition_data_logic
                        = GRN_Workflow_PathConditionDatas::getInstance();
                    if ( ! array_key_exists($path_condition_step['col_path_condition'],
                        $modify_id_map['path_condition_data'])
                    ) {
                        $path_condition_data_id
                            = $path_condition_data_logic->add($props);
                    } else {
                        $path_condition_data_id
                            = $modify_id_map['path_condition_data'][$path_condition_step['col_path_condition']];
                        $path_condition_data_logic->modify($path_condition_data_id,
                            $props);
                    }
                    $prev_path_condition_id = $path_condition_id;
                }

                //Add or Modify Path Condition Step Data
                if (array_key_exists($path_condition_step['col_path_step'],
                    $path_step_list_for_view)
                ) {
                    $props = [
                        'col_path_condition_step' => $path_condition_step['col_path_condition_step'],
                        'col_path_condition_data' => $path_condition_data_id,
                        'col_path_step_data'      => $path_step_list_for_view[$path_condition_step['col_path_step']]['col_path_step_data'],
                    ];
                    require_once('workflow/path_condition_data.csp');
                    $path_condition_step_data_logic
                        = GRN_Workflow_PathConditionStepDatas::getInstance();
                    if ( ! array_key_exists($path_condition_step['col_path_condition_step'],
                        $modify_id_map['path_condition_step_data'])
                    ) {
                        $path_condition_step_data_id
                            = $path_condition_step_data_logic->add($props);
                    } else {
                        $path_condition_step_data_id
                            = $modify_id_map['path_condition_step_data'][$path_condition_step['col_path_condition_step']];
                        $path_condition_step_data_logic->modify($path_condition_step_data_id,
                            $props);
                    }
                }
            }
        }

        //Delete Change Access Data
        $props_list = [];
        $remove_id_list = [];
        $keep_id_map = [];
        foreach (array_keys($change_access_data_list_for_view) as $item_data_id) {
            foreach (
                array_keys($change_access_data_list_for_view[$item_data_id]) as
                $change_access_data_id
            ) {
                if ($change_access_data_list_for_view[$item_data_id][$change_access_data_id]['col_access_change_form']) {
                    $keep_id_map[$change_access_data_list_for_view[$item_data_id][$change_access_data_id]['col_access_change_form']]
                        = $change_access_data_id;
                } else {
                    $remove_id_list[] = $change_access_data_id;
                }
            }
        }
        if ($petition['col_status'] != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
            && is_array($remove_id_list)
            && 0 < count($remove_id_list)
        ) {
            require_once('workflow/change_access_data.csp');
            $change_access_data_logic
                = GRN_Workflow_ChangeAccessData::getInstance();
            $change_access_data_logic->removeList($remove_id_list);
        }

        //Create Change Access Data
        $props_list = [];
        foreach (array_keys($change_access_list_for_view) as $item_id) {
            foreach (
                array_keys($change_access_list_for_view[$item_id]) as
                $change_access_id
            ) {
                //Check Keep Change Access
                if (array_key_exists($change_access_id, $keep_id_map)) {
                    continue;
                }

                $props_list[] = [
                    'col_access_change_form' => $change_access_id,
                    'col_item_data'          => $item_list_for_view[$item_id]['item_data'],
                    'col_path_step_data'     => $path_step_list_for_view[$change_access_list_for_view[$item_id][$change_access_id]['col_path_step']]['col_path_step_data'],
                    'col_view'               => $change_access_list_for_view[$item_id][$change_access_id]['col_view'],
                    'col_edit'               => $change_access_list_for_view[$item_id][$change_access_id]['col_edit'],
                ];
            }
        }

        if (is_array($props_list) && 0 < count($props_list)) {
            require_once('workflow/change_access_data.csp');
            $change_access_data_logic
                = GRN_Workflow_ChangeAccessData::getInstance();
            $change_access_data_logic->addList($props_list);
        }
    }
    //Set Petition Number
    $petition_number = $petition_logic->setPetitionNumber($petition_id,
        $form_for_view);

    $login_user = cb_get_login_user();
    $petition_logic->addAutoScheduleRecord($petition_id, $petition['col_form'],
        $login_user->get('timezone'));

    //Send Petition

    //Dettach Folder List (Draft)
    global $G_workflow_login_user;
    $petition_logic->detachFolderList($petition_id,
        [$G_workflow_login_user->getOID()], 'TEMP_FOLDER_FOREIGN_KEY',
        false);         //Temporary Folder

    // ベースサービスの通知を削除
    require_once('workflow/notification.csp');
    $logic = GRN_Workflow_Notification::getInstance();
    $logic->removeAll($petition_id);

    //Attach Folder List (Sender)
    global $G_workflow_login_user;
    $petition_logic->attachFolderList($petition_id,
        [$G_workflow_login_user->getOID()], 'OUT_FOLDER_FOREIGN_KEY',
        false);          //Out Folder

    //Attach Folder List (Transactor)
    /*
        $current_user_list =& $path_step_list_for_view[$in_process_path_step_id]['users'];
        if ($current_user_list)
        {
            $petition_logic->attachFolderList($petition_id, array_keys($current_user_list), 'UNPROCESSED_FOLDER_FOREIGN_KEY');  //Un Process Folder
            $petition_logic->attachFolderList($petition_id, array_keys($current_user_list), 'IN_FOLDER_FOREIGN_KEY');           //In Folder
        }
    */

    if ($petition['col_status'] == GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL) {
        $current_uids
            =& $path_step_data_list_for_view[$in_process_path_step_id]['uids'];
    } else {
        $current_uids
            =& $path_step_list_for_view[$in_process_path_step_id]['uids'];
    }

    if ($current_uids) {
        while (false !== ($result = array_search(null, $current_uids))) {
            unset($current_uids[$result]);
        }
        $petition_logic->attachFolderList($petition_id, $current_uids,
            'UNPROCESSED_FOLDER_FOREIGN_KEY');  //Un Process Folder
        $petition_logic->attachFolderList($petition_id, $current_uids,
            'IN_FOLDER_FOREIGN_KEY');           //In Folder
    }

    grn_workflow_cleanup_session($t, 'draft', $tmp_key);

    //Redirect Next Page
    if (defined('AJAX_REQUEST')) {
        $json->response([
            'link' => cb_get_full_url('workflow/index',
                ['fid' => $folder_id, 'sf' => 1])
        ]);
        cb_safe_exit();
    }
    cb_redirect('workflow/index', ['fid' => $folder_id, 'sf' => 1]);
}


