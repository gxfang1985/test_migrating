<?php

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$folder_id = null;
if (array_key_exists('fid', $G_INPUT)) {
    $folder_id = $G_INPUT['fid'];
}
$t->assign('fid', $folder_id);
$petition_id = null;
if (array_key_exists('pid', $G_INPUT)) {
    $petition_id = $G_INPUT['pid'];
}
$t->assign('pid', $petition_id);
if (array_key_exists('simple', $G_INPUT)) {
    $simple = $G_INPUT['simple'];
}
$t->assign('simple', $simple);
$session_flag = false;
if (array_key_exists('cpsf', $G_INPUT)) {
    $session_flag = $G_INPUT['cpsf'];
}
$t->assign('cpsf', $session_flag);
$handle = false;
if (array_key_exists('handle', $G_INPUT)) {
    $handle = $G_INPUT['handle'];
}
$t->assign('handle', $handle);

//Get Session Key
require_once('workflow/controller_util.csp');
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);

/**
 * 制限事項
 * ・ログインユーザーは申請者でない
 * ・ログインユーザーはフォルダの所有者でない
 * ・フォルダは送信一覧、未処理一覧（申請の進行状況は差し戻し）でない
 * ・フォルダにフォルダリレーションがない
 */

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$user_id = $login->getOID();

require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$columns = [
    'pid'                 => '_id',
    'petition_number'     => 'petition_number',
    'name'                => 'name',
    'form_name'           => 'form_name',
    'creator'             => 'creator',
    'creator_name'        => 'creator_name',
    'creator_foreign_key' => 'creator_foreign_key',
    'ctime'               => 'ctime',
    'icon_type'           => 'icon_type',
    'icon_id'             => 'icon_id',
    'icon_url'            => 'icon_url',
    'status'              => 'status',
    'user'                => 'user',
    'agent_user'          => 'agent_user',
];
$petition = $petition_util->getView($petition_id, $columns);
if ($user_id != cb_at($petition, 'creator')
    && $user_id != $petition['user']
    && $user_id != $petition['agent_user']
) {
    // ログインユーザーは申請者でない
    cb_throw_error(E_GRN_WRKF_DENY_CANCEL_NOT_APPLICANT);
}
$t->assign('petition', $petition);

if (GRN_WORKFLOW_STATUS_UNPROCESSING != $petition['status']
    && GRN_WORKFLOW_STATUS_IN_PROCESS != $petition['status']
    && GRN_WORKFLOW_STATUS_REMAND != $petition['status']
) {
    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_CANCEL);
}

require_once('workflow/folder_logic.csp');
$logic = GRN_Workflow_Folder_Logic::getInstance();
$folder = $logic->get($user_id, $folder_id);
if ( ! is_array($folder) || 0 == count($folder)) {
    // ログインユーザーはフォルダの所有者でない
    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
}
if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID == $folder['col_folder_type']) {
    if (GRN_WORKFLOW_STATUS_REMAND != $petition['status']) {
        // フォルダは未処理一覧（申請の進行状況は差し戻しでない）
        cb_throw_error(E_GRN_WRKF_DENY_CANCEL_FOLDER);
    }
} elseif (GRN_WORKFLOW_FOLDER_TYPE_OUT_ID != $folder['col_folder_type']) {
    // フォルダは送信一覧でない
    cb_throw_error(E_GRN_WRKF_DENY_CANCEL_FOLDER);
}
$t->assign('folder', $folder);

require_once('workflow/folderrelation_logic.csp');
$logic = GRN_Workflow_FolderRelation_Logic::getInstance();
$folder_relation = $logic->getSpecific($folder_id, $petition_id);
if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
    // フォルダにフォルダリレーションがない
    cb_throw_error(E_GRN_WRKF_FOLDER_FOLDERRELATION_NOT_FOUND);
}

$args = [
    'cancel_message' => cb_msg('grn.workflow',
        "cancel_message_{$petition['status']}"),
    'cancel_button'  => cb_msg('grn.workflow',
        "cancel_button_{$petition['status']}")
];
$t->assign($args);
$page_title = grn_get_current_page_display_name($args);
$t->assign('page_title', $page_title);
$page_name = cb_get_pagename();

require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil($page_name);
if ($session_flag) {
    $pages_info = [
        'index'  => ['fid' => $folder_id],
        'handle' => [
            'fid'     => $folder_id,
            'pid'     => $petition_id,
            'simple'  => $simple,
            'cpsf'    => true,
            'tmp_key' => $tmp_key
        ],
        'cancel' => null
    ];
} else {
    $pages_info = [
        'index'  => ['fid' => $folder_id],
        'view'   => [
            'fid'    => $folder_id,
            'pid'    => $petition_id,
            'simple' => $simple
        ],
        'cancel' => null
    ];
}
$site_position = $controller_util->makeSitePosition('workflow/', $pages_info,
    $args);
$t->assign('site_position', $site_position);

$t->display("{$page_name}.tpl");



