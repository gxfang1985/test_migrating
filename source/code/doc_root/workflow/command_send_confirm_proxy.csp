<?php

use grn\grn\JSONResponse;

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;
    $json = JSONResponse::create();

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Get Parameter
    $category_id = @ $G_INPUT['cid'];    //Category ID
    $form_id = @ $G_INPUT['fid'];    //Form ID
    $command = @ $G_INPUT['cmd'];    //Command
    $simple = @ $G_INPUT['simple'];
    $mid = @ $G_INPUT['mid'];

    //Get Session Key
    require_once('workflow/controller_util.csp');
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();

    //Check Command Parameter
    switch ($command) {
        case 'back':
            //Redirect Back Page
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url('workflow/send_path_proxy', [
                        'cid'     => $category_id,
                        'fid'     => $form_id,
                        'simple'  => $simple,
                        'sf'      => 1,
                        'tmp_key' => $tmp_key
                    ])
                ]);
                cb_safe_exit();
            }
            cb_redirect('workflow/send_path_proxy', [
                'cid'     => $category_id,
                'fid'     => $form_id,
                'simple'  => $simple,
                'sf'      => 1,
                'tmp_key' => $tmp_key
            ]);
            break;
        case 'cancel':
            grn_workflow_cleanup_session($t, 'proxy', $tmp_key);
            //Redirect Cancel Page
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url('workflow/send_proxy',
                        ['cid' => $category_id, 'mid' => $mid])
                ]);
                cb_safe_exit();
            }
            cb_redirect('workflow/send_proxy',
                ['cid' => $category_id, 'mid' => $mid]);
            break;
        default:
            break;
    }

    //Login User
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $user =& $uum->getLoginUser();
    if ( ! $user) {
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $is_proxy_petition = $util->isAvailableSendProxy($user->getOID(), $mid);
    if ( ! $is_proxy_petition) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_CANNOT_PROXY_PETITION);
    }
    unset($util);

    // 未分類でないカテゴリのアクセス権をチェック
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK,
            false, $mid);
    }

    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_send_form
        =& $session_manager->getSession('workflow/send_form_proxy'
                                        . $tmp_key);
    $session_send_path
        =& $session_manager->getSession('workflow/send_path_proxy'
                                        . $tmp_key);

    //Load Send Form Session (for Design)
    $form_for_view = $session_send_form->get('form');
    if ( ! is_array($form_for_view) || 0 == count($form_for_view)) {
        // フォームがない
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_DENY_REQUEST_DATA);
    }
    $item_list_for_view = $session_send_form->get('item_list');
    $path_step_list_for_view
        = $session_send_form->get('path_step_list');
    $default_path_step_list_for_view
        = $session_send_form->get('default_path_step_list');
    $path_skip_for_view = $session_send_form->get('path_skip');
    $change_access_list_for_view
        = $session_send_form->get('change_access_list');
    $properties_for_view = $session_send_form->get('properties');

    //Load Send Form Session (for Data)
    $send_form_data_list = $session_send_form->get('send_form_data_list');

    //Load Send Path Session (for Data)
    $send_path_data_list = $session_send_path->get('send_path_data_list');

    //Replace Default Path Step User by Path Step Data List
    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum =& $G_container_base->getInstance('uum');
    $uids = [];
    foreach (array_keys($send_path_data_list) as $path_step_id) {
        $default_path_step_list_for_view[$path_step_id]['users'] = [];
        $default_path_step_list_for_view[$path_step_id]['uids'] = [];

        foreach ($send_path_data_list[$path_step_id] as $user_id) {
            if ($user_id == 0) {
                $default_path_step_list_for_view[$path_step_id]['users'][]
                    = ['_id' => $user_id];
                $default_path_step_list_for_view[$path_step_id]['uids'][]
                    = $user_id;
            } else {
                $uids[] = $user_id;
            }
        }
    }

    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($uids, $columns);

    foreach (array_keys($send_path_data_list) as $path_step_id) {
        foreach ($send_path_data_list[$path_step_id] as $user_id) {
            if (0 != $user_id) {
                $path_step_user = [];
                $path_step_user['_id']
                    = $user_id;
                $path_step_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                    = $users[$user_id]['col_display_name'];
                $path_step_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                    = $users[$user_id]['col_foreign_key'];
                $path_step_user['col_position']
                    = $users[$user_id]['col_position'];
                $default_path_step_list_for_view[$path_step_id]['users'][]
                    = $path_step_user;
                $default_path_step_list_for_view[$path_step_id]['uids'][]
                    = $user_id;
            }
        }
    }

    global $G_workflow_login_user;

    if ( ! array_key_exists('mandator', $properties_for_view)
         || is_null($properties_for_view['mandator'])
    ) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_CANNOT_PROXY_PETITION);
    }
    $mandator_id = $properties_for_view['mandator'];

    $util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $is_proxy_petition
        = $util->isAvailableSendProxy($G_workflow_login_user->getOID(),
        $mandator_id);
    if ( ! $is_proxy_petition) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_CANNOT_PROXY_PETITION);
    }
    unset($util);

    if ($mandator_id) {
        unset($properties_for_view['mandator']);
        $properties_for_view['petition_user'] = $mandator_id;
        $properties_for_view['agent_user']
            = $G_workflow_login_user->getOID();
    }

    //Create Petition
    require_once('workflow/petition_logic.csp');
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
    $petition_id = $petition_logic->add($form_for_view,
        $properties_for_view);
    $form_for_view['petition'] = $petition_id;
    $applicant_user_info = $grn_uum->getUserInfo($mandator_id,
        ['col_timezone']);

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_add';

        $message_args['pid'] = $petition_id;
        $message_args['fid'] = $form_for_view['fid'];
        $message_args['name'] = $form_for_view['name'];
        $message_args['icon_type'] = $form_for_view['icon_type'];
        $message_args['icon_id'] = $form_for_view['icon_id'];
        $message_args['icon_url'] = $form_for_view['icon_url'];
        $message_args['serial_type'] = $form_for_view['serial_type'];
        $message_args['serial_format'] = $form_for_view['serial_format'];
        $message_args['serial_number'] = $form_for_view['serial_number'];
        $message_args['subject'] = $form_for_view['subject'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Create Item Data
    require_once('workflow/itemdata_logic.csp');
    $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();
    $item_data_id_list = $itemdata_logic->addMulti($petition_id,
        $item_list_for_view);

    $item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
    $item_data_util->addAutoCalculationItemDataById($petition_id);

    require_once('workflow/path_condition_logic.csp');
    $path_condition_logic = GRN_Workflow_Path_Condition_Logic::getInstance();
    $condition_path_step_list
        = $path_condition_logic->getEvaluatedPathSteps($path_step_list_for_view,
        $path_skip_for_view, $send_form_data_list, $item_list_for_view);

    //Create Path Step Data
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    $path_step_list_for_view
        = $controller_util->addPathInfo($petition_id,
        $default_path_step_list_for_view,
        array_keys($condition_path_step_list));
    $path_step_list_for_view_current = current($path_step_list_for_view);
    $in_process_path_step_id
        = $controller_util->getInProcessPathStepId($path_step_list_for_view_current);

    //Create Path Skip Data / Path Condition Data / Path Condition Step Data
    $first_flag = true;
    $prev_path_condition_id = 0;
    foreach (array_keys($path_skip_for_view) as $path_condition_id) {
        foreach (
            array_keys($path_skip_for_view[$path_condition_id]) as
            $path_condition_step_id
        ) {
            $path_condition_step
                =& $path_skip_for_view[$path_condition_id][$path_condition_step_id];

            if ($first_flag) {
                //Add Path Skip Data
                $props = [
                    'col_path_skip' => $path_condition_step['col_path_skip'],
                    'col_petition'  => $form_for_view['petition'],
                    'col_item_data' => $item_list_for_view[$path_condition_step['col_item']]['item_data'],
                ];
                require_once('workflow/path_skip_data.csp');
                $path_skip_data_logic
                    = GRN_Workflow_PathSkipDatas::getInstance();
                $path_skip_data_id = $path_skip_data_logic->add($props);
                $first_flag = false;
            }

            if ($prev_path_condition_id != $path_condition_id) {
                //Add Path Condition Data
                $props = [
                    'col_path_condition' => $path_condition_step['col_path_condition'],
                    'col_name'           => $path_condition_step['col_name'],
                    'col_number'         => $path_condition_step['col_number'],
                    'col_operator'       => $path_condition_step['col_operator'],
                    'col_option'         => $path_condition_step['col_option'],
                    'col_path_skip_data' => $path_skip_data_id,
                ];
                require_once('workflow/path_condition_data.csp');
                $path_condition_data_logic
                    = GRN_Workflow_PathConditionDatas::getInstance();
                $path_condition_data_id
                    = $path_condition_data_logic->add($props);
                $prev_path_condition_id = $path_condition_id;
            }

            //Add Path Condition Step Data
            if (array_key_exists($path_condition_step['col_path_step'],
                $path_step_list_for_view)
            ) {
                $props = [
                    'col_path_condition_step' => $path_condition_step['col_path_condition_step'],
                    'col_path_condition_data' => $path_condition_data_id,
                    'col_path_step_data'      => $path_step_list_for_view[$path_condition_step['col_path_step']]['col_path_step_data'],
                ];
                $path_condition_step_data_logic
                    = GRN_Workflow_PathConditionStepDatas::getInstance();
                $path_condition_step_data_id
                    = $path_condition_step_data_logic->add($props);
            }
        }
    }

    //Create Change Access Data
    $props_list = [];
    foreach (array_keys($change_access_list_for_view) as $item_id) {
        foreach (
            array_keys($change_access_list_for_view[$item_id]) as
            $change_access_id
        ) {
            $props_list[] = [
                'col_access_change_form' => $change_access_id,
                'col_item_data'          => $item_list_for_view[$item_id]['item_data'],
                'col_path_step_data'     => $path_step_list_for_view[$change_access_list_for_view[$item_id][$change_access_id]['col_path_step']]['col_path_step_data'],
                'col_view'               => $change_access_list_for_view[$item_id][$change_access_id]['col_view'],
                'col_edit'               => $change_access_list_for_view[$item_id][$change_access_id]['col_edit'],
            ];
        }
    }
    if (is_array($props_list) && 0 < count($props_list)) {
        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = GRN_Workflow_ChangeAccessData::getInstance();
        $change_access_data_logic->addList($props_list);
    }
    //Set Petition Number
    $petition_number = $petition_logic->setPetitionNumber($petition_id,
        $form_for_view);

    $petition_logic->addAutoScheduleRecord($petition_id, $form_id,
        $applicant_user_info['col_timezone']);

    //Send Petition

    //Attach Folder List (Sender)
    //global $G_workflow_login_user;
    $petition_logic->attachFolderList($petition_id, [
        $properties_for_view['petition_user'],
        $properties_for_view['agent_user']
    ], 'OUT_FOLDER_FOREIGN_KEY', false);          //Out Folder

    //Attach Folder List (Transactor)
    /*
        $current_user_list =& $path_step_list_for_view[$in_process_path_step_id]['users'];
        if ($current_user_list)
        {
            $petition_logic->attachFolderList($petition_id, array_keys($current_user_list), 'UNPROCESSED_FOLDER_FOREIGN_KEY');  //Un Process Folder
            $petition_logic->attachFolderList($petition_id, array_keys($current_user_list), 'IN_FOLDER_FOREIGN_KEY');           //In Folder
        }
    */
    $current_uids =& $path_step_list_for_view[$in_process_path_step_id]['uids'];
    if ($current_uids) {
        while (false !== ($result = array_search(null, $current_uids))) {
            unset($current_uids[$result]);
        }
        $petition_logic->attachFolderList($petition_id, $current_uids,
            'UNPROCESSED_FOLDER_FOREIGN_KEY');  //Un Process Folder
        $petition_logic->attachFolderList($petition_id, $current_uids,
            'IN_FOLDER_FOREIGN_KEY');           //In Folder
    }

    grn_workflow_cleanup_session($t, 'proxy', $tmp_key);

    //Redirect Next Page
    if (defined('AJAX_REQUEST')) {
        $json->response(['link' => cb_get_full_url('workflow/index')]);
        cb_safe_exit();
    }
    cb_redirect('workflow/index');
}


