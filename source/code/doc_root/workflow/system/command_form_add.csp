<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Validation Check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'workflow/system/form_add';
    SmartyValidate::register_form($target_name);

    $auto_export = null;
    if (array_key_exists('auto_export', $G_INPUT)) {
        $auto_export = $G_INPUT['auto_export'];
    }

    ///  Dynamic Register Smarty Validation  ///
    require_once($t->_get_plugin_filepath('function', 'validate'));
    $standard_params = [
        'form'   => $target_name,
        'field'  => 'initial_text_value',
        'append' => 'validation_errors'
    ];

    // 動的にバリデーションを追加
    if ($auto_export) {
        $params['form'] = $target_name;
        $params['field'] = 'export_folder';
        $params['append'] = 'validation_errors';
        $params['criteria'] = 'notEmpty';
        $params['message'] = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
            'validate_export_folder');
        smarty_function_validate($params, $t);
    }

    //Validate After POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        //Create Parameter Translation Map
        $translation_map = [
            'name'              => 'name',
            'foreign_key'       => 'foreign_key',
            'memo'              => 'memo',
            'cid'               => '_cid',
            'auto_export'       => 'auto_export',
            'export_folder'     => 'export_folder',
            'login_name_export' => 'login_name_export',
            'top_line_export'   => 'export_top_line',
        ];

        //Do Parameter Translation
        $properties = [];
        foreach ($translation_map as $view_name => $model_name) {
            $properties[$model_name] = @ $G_INPUT[$view_name];
        }

        //Check Category Exists
        require_once('workflow/resources.csp');
        if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $properties['_cid']) {
            require_once('workflow/category_logic_base.csp');
            $category_logic_base
                = GRN_Workflow_Category_Logic_Base::getInstance();
            $category =& $category_logic_base->get($properties['_cid']);
        }

        //Add Form
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_Form_Logic::getInstance();
        $form_id = $form_logic->add($properties['name'],
            $properties['foreign_key'],
            $properties['memo'],
            $properties['_cid'],
            $properties['auto_export'],
            $properties['export_folder'],
            $properties['login_name_export'],
            $properties['export_top_line']
        );

        //Add Stardard Item
        require_once('workflow/item_logic.csp');
        $item_logic = GRN_Workflow_Item_Logic::getInstance();
        $item_logic->addStandard($form_id);

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Form_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'form_add';

            $message_args['cid'] = $properties['_cid'];
            $message_args['fid'] = $form_id;
            $message_args['name'] = $properties['name'];
            $message_args['foreign_key'] = $properties['foreign_key'];
            $message_args['memo'] = $properties['memo'];

            if ( ! defined('ON_FOREST')) {
                $message_args['auto_export']
                    = $inspection->setFlag($properties['auto_export']);
                $message_args['export_folder']
                    = $properties['export_folder'];
                $message_args['login_name_export']
                    = $inspection->setFlag($properties['login_name_export']);
                $message_args['export_top_line']
                    = $inspection->setFlag($properties['export_top_line']);
            }

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        //Validation Session Finished
        SmartyValidate::unregister_form($target_name);

        //Redirect Next Page
        cb_redirect('workflow/system/form_list',
            ['cid' => $properties['_cid'], 'sf' => 1]);
    } else {
        // 動的に追加したバリデーションを解除
        SmartyValidate::unregister_form($target_name);
        SmartyValidate::register_form($target_name);

        //Include Sharing Codes With Command_*
        include('_form_add.csp');

        // Assign input values
        $assign_input_values = [
            'name'              => cb_at($G_INPUT, 'name'),
            'foreign_key'       => cb_at($G_INPUT, 'foreign_key'),
            'memo'              => cb_at($G_INPUT, 'memo'),
            'auto_export'       => cb_at($G_INPUT, 'auto_export'),
            'export_folder'     => cb_at($G_INPUT, 'export_folder'),
            'login_name_export' => cb_at($G_INPUT, 'login_name_export'),
            'top_line_export'   => cb_at($G_INPUT, 'top_line_export')
        ];
        $t->assign($assign_input_values);

        //Assign Template Name
        $t->setPageInfo($target_name);

        //Display Previous Page
        $t->display($target_name . '.tpl');
    }
}


