<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    require_once('grn/multi_select_utility.csp');
    $G_INPUT = grn_deploy_selected_users('selected_users_sUID', 'sUID',
        $G_INPUT);

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    //Get Parameter
    $category_id = @ $G_INPUT['cid'];         //Category ID
    $form_id = @ $G_INPUT['fid'];         //Form ID
    $petition_id = @ $G_INPUT['pid'];         //Petition ID
    $path_step_id = @ $G_INPUT['psid'];        //Path Step ID
    $simple = @ $G_INPUT['simple'];      //Simple Flag
//    $uids           =@ $G_INPUT['sUID'];        //UID List

    $uids = [];
    if (array_key_exists('sUID', $G_INPUT)) {
        $uids = $G_INPUT['sUID'];
    }

    // ユーザーIDの書式を変換
    foreach ($uids as $key => $value) {
        $values = explode(':', $value);
        if (is_array($values) && 0 < count($values)) {
            if (0 < strlen($values[0])) {
                $uids[$key] = $values[0];
            }
        }
    }

    require_once('workflow/petition_logic.csp');
    $logic = GRN_Workflow_Petition_Logic::getInstance();
    $petition = $logic->get($petition_id);
    if ( ! is_array($petition) || 0 == count($petition)) {
        // 申請がない
        cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
    }
    if (GRN_WORKFLOW_STATUS_UNPROCESSING != $petition['col_status']
        && GRN_WORKFLOW_STATUS_IN_PROCESS != $petition['col_status']
        && GRN_WORKFLOW_STATUS_ACCEPTANCE != $petition['col_status']
        && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
    ) {
        // 申請の進行状況は未処理、進行中、承認でない
        cb_throw_error(E_GRN_WRKF_DENY_MODIFY_PATH_STEP_DATA);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();
    $user_id = $login->getOID();

    $G_INPUT['col_creator'] = $user_id;
    $G_INPUT['col_creator_name'] = $login->get('display_name');
    $G_INPUT['col_creator_foreign_key'] = $login->get('foreign_key');
    $G_INPUT['col_ctime'] = time();

    // データベースをロックして経路を取得
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    $path_steps = $controller_util->getLockedPathInfo($path_step_id);
    $controller_util->ekePathInfo($path_steps, GRN_WORKFLOW_SYSTEM_ADMIN,
        $petition['col_status']);
    if ( ! array_key_exists($path_step_id, $path_steps)) {
        // 申請に指定された経路ステップがない
        cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP_DATA);
    }
    $path_step =& $path_steps[$path_step_id];
    if ($path_step['not_modify']) {
        // 指定された経路ステップの経路変更できない
        cb_throw_error(E_GRN_WRKF_DENY_MODIFY_PATH_STEP_DATA);
    }

    // 次以降の経路ステップを未処理に変更
    $controller_util->modifyPathStepsStatus($path_step,
        GRN_WORKFLOW_FINISHED_NONE);

    $users =& $path_step['users'];
    $path_steps_current = current($path_steps);
    $in_process
        = $controller_util->getInProcessPathStepId($path_steps_current);

    // 処理者の（省略）を確認
    $add_users = [];
    $deleted_users = [];
    if (false === array_search(GRN_WORKFLOW_RESULT_SKIP, $uids)) {
        foreach (array_keys($users) as $key) {
            // 変更前と変更後のユーザーIDリストを比較
            $path_step_data_user_id = $users[$key]['pid'];
            $user_id = $users[$key]['_id'];
            if (false === ($result = array_search($user_id, $uids))) {
                if (GRN_WORKFLOW_RESULT_UNPROCESSING
                    >= $users[$key]['col_result']
                ) {
                    // 未処理のユーザーを削除候補にして変更前のユーザーIDリストから削除
                    $deleted_users[$path_step_data_user_id] = $users[$key];
                    unset($users[$key]);
                    unset($path_step['uids'][$key]);
                }
            } else {
                // 変更後のユーザーIDリストから削除
                $users[$key]['col_position'] = $result;
                unset($uids[$result]);
            }
        }

        if (is_array($users) && 0 < count($users)) {
            require_once('workflow/path_data.csp');
            $logic = GRN_Workflow_PathStepDataUsers::getInstance();
            foreach (array_keys($users) as $key) {
                $path_step_data_user_id = $users[$key]['pid'];
                $properties
                    = ['col_position' => $users[$key]['col_position']];
                $logic->modify($path_step_data_user_id, $properties);
            }
        }

        // 残りの変更後のユーザーIDリストを追加候補にする
        $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
        $add_users = $uum->getUsersInfo($uids, $columns);
        $uids = array_keys($add_users);
        foreach ($uids as $key => $value) {
            $add_users[$value]['col_result'] = GRN_WORKFLOW_RESULT_UNPROCESSING;
            $add_users[$value]['col_position'] = $key;
            $users[] = $add_users[$value];
            $add_users[$value]['col_path_step_data'] = $path_step_id;
            $add_users[$value]['col_user']
                = $add_users[$value]['_id'];
            $path_step['uids'][] = $value;
        }

        $path_step['user_count'] = count($users);
        if (0 == $path_step['user_count']) {
            $path_step['col_skip'] = true;
        } else {
            $path_step['col_skip'] = false;
        }
    } else {
        // 変更前のユーザーIDリストを削除候補にする
        foreach (array_keys($users) as $key) {
            // 変更前と変更後のユーザーIDリストを比較
            $path_step_data_user_id = $users[$key]['pid'];
            if (GRN_WORKFLOW_RESULT_UNPROCESSING
                >= $users[$key]['col_result']
            ) {
                // 未処理のユーザーを削除候補にして変更前のユーザーIDリストから削除
                $deleted_users[$path_step_data_user_id] = $users[$key];
                unset($users[$key]);
                unset($path_step['uids'][$key]);
            }
        }

        $path_step['user_count'] = count($users);
        if (0 == $path_step['user_count']) {
            $path_step['col_skip'] = true;
        } else {
            $path_step['col_skip'] = false;
        }
    }

    // 最終承認の場合は処理者の（省略）を禁止
    if ($path_step['col_skip'] || 0 == $path_step['user_count']) {
        if ($controller_util->isLastAcceptancePathStep($path_step)) {
            // 最終承認の経路ステップデータは省略できない
            cb_throw_error(E_GRN_WRKF_DENY_MODIFY_SKIP_PATH_STEP_DATA);
        }
    }

    if (0 < count($add_users) || 0 < count($deleted_users)) {
        // 経路変更履歴を追加
        require_once('workflow/change_path_history.csp');
        $logic = GRN_Workflow_ChangePathHistories::getInstance();
        $columns_info = $logic->getColumnsInfo();
        $G_INPUT['col_petition'] = $petition_id;
        $G_INPUT['col_path_step_data'] = $path_step_id;
        $properties
            = $controller_util->validateProperties($G_INPUT,
            $columns_info);
        $change_path_history_id = $logic->add($properties);

        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $properties = ['col_skip' => $path_step['col_skip']];
        $logic->modify($path_step_id, $properties);
    }

    if (0 < count($add_users)) {
        foreach (array_keys($add_users) as $user_id) {
            $user =& $add_users[$user_id];
            $user['col_change_path_history'] = $change_path_history_id;
            $user['col_result'] = GRN_WORKFLOW_RESULT_UNPROCESSING;
        }

        // 経路変更で追加した処理者を追加
        $logic = GRN_Workflow_ChangePathAddUsers::getInstance();
        $columns = [
            'col_change_path_history',
            'col_user',
            'col_display_name',
            'col_foreign_key',
            'col_position'
        ];
        $logic->addList($columns, $add_users);

        // 経路ステップの処理者を追加
        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDataUsers::getInstance();
        $columns = [
            'col_path_step_data',
            'col_user',
            'col_display_name',
            'col_foreign_key',
            'col_position',
            'col_result'
        ];
        $logic->addList($columns, $add_users);

        if ($path_step_id == $in_process) {
            // 追加した処理者に申請を送信
            $foreign_keys = [
                'UNPROCESSED_FOLDER_FOREIGN_KEY',
                'IN_FOLDER_FOREIGN_KEY'
            ];
            $controller_util->sendPetition($petition_id, array_keys($add_users),
                $foreign_keys);
        }
    }

    $deleted_uids = [];
    if (0 < count($deleted_users)) {
        foreach (array_keys($deleted_users) as $path_step_data_user_id) {
            $user =& $deleted_users[$path_step_data_user_id];
            $col_position = $user['col_position'];
            if (array_key_exists('col_current_positoin', $user)) {
                $col_position = $user['col_current_position'];
            }
            $user['col_position'] = $col_position;
            $user['col_change_path_history'] = $change_path_history_id;
            $deleted_uids[] = $user['_id'];
        }

        // 経路変更で削除した処理者を追加
        $logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
        $columns = [
            'col_change_path_history',
            'col_user',
            'col_display_name',
            'col_foreign_key',
            'col_position'
        ];
        $logic->addList($columns, $deleted_users);

        // 経路ステップの処理者を削除
        require_once('workflow/path_data.csp');
        $logic = GRN_Workflow_PathStepDataUsers::getInstance();
        $logic->removeList(array_keys($deleted_users));
    }

    $path_step =& $path_steps[$in_process];
    if ($controller_util->evalPathStep($path_step)) {
        // 次以降の経路ステップを未処理に変更
        $controller_util->modifyPathStepsStatus($path_step,
            GRN_WORKFLOW_FINISHED_NONE);

        // 処理が完了した経路ステップに変更
        $logic = GRN_Workflow_PathStepDatas::getInstance();
        $properties = [
            'col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE,
            'col_skip'     => $path_step['col_skip']
        ];
        $path_step['col_finished'] = GRN_WORKFLOW_FINISHED_COMPLETE;
        $logic->modify($path_step_id, $properties);

        $col_type = $path_step['col_type'];

        // 次に処理を回す経路ステップを取得
        if ($path_step =& $controller_util->getInProcessPathStep($path_step)) {
            if (GRN_WORKFLOW_ACCEPTANCE == $col_type
                && GRN_WORKFLOW_CIRCULAR == $path_step['col_type']
            ) {
                // 申請者にフォルダリレーションを追加
                require_once('workflow/petition_logic.csp');
                $logic = GRN_Workflow_Petition_Logic::getInstance();
                $petition = $logic->get($petition_id);

                $logic->updatePetitionNumberWhenApproved($petition_id,
                    $petition['col_form']);

                $uids[] = $petition['col_creator'];

                $foreign_keys = [
                    'FINISH_FOLDER_FOREIGN_KEY',
                    'IN_FOLDER_FOREIGN_KEY'
                ];

                $controller_util->sendPetition($petition_id, $uids,
                    $foreign_keys);

                // 最終承認
                $status = GRN_WORKFLOW_RESULT_ACCEPT;


                // 自動書き出し
                if ($petition['col_auto_export']) {
                    $petition_controller_util
                        = GRN_Workflow_Petition_Controller_Utility::getInstance();
                    $petition_controller_util->exportSinglePetition($petition_id,
                        $status);
                }
            } elseif ($col_type == GRN_WORKFLOW_CIRCULAR
                      && GRN_WORKFLOW_CIRCULAR == $path_step['col_type']
            ) {
                // 回覧の場合はそのまま 
                $status = $petition['col_status'];
            } else {
                // 進行中
                $status = GRN_WORKFLOW_STATUS_IN_PROCESS;
            }

            if ( ! array_key_exists('uids', $path_step)) {
                assert('FALSE');
            }
            $uids = $path_step['uids'];

            $foreign_keys = [
                'UNPROCESSED_FOLDER_FOREIGN_KEY',
                'IN_FOLDER_FOREIGN_KEY'
            ];
        } else {
            // 完了
            $status = GRN_WORKFLOW_STATUS_FINISHED;

            if (GRN_WORKFLOW_ACCEPTANCE == $col_type) {
                require_once('workflow/petition_logic.csp');
                $logic = GRN_Workflow_Petition_Logic::getInstance();
                $logic->updatePetitionNumberWhenApproved($petition_id,
                    $petition['col_form']);
            }

            $uids = [$petition['col_creator']];

            $foreign_keys = [
                'FINISH_FOLDER_FOREIGN_KEY',
                'IN_FOLDER_FOREIGN_KEY'
            ];
        }

        // 申請の状況を変更
        require_once('workflow/petition_logic.csp');
        $logic = GRN_Workflow_Petition_Logic::getInstance();
        $logic->modifyStatus($petition_id, $status);

        // 次の処理者に申請を送信
        $controller_util->sendPetition($petition_id, $uids, $foreign_keys);
    }

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Path_Step_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_path_step_modify';

        $message_args['add_uids'] = array_keys($add_users);
        $message_args['deleted_uids'] = $deleted_uids;
        $message_args['comment'] = $G_INPUT['col_comment'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    cb_redirect('workflow/system/petition_path_step_view', [
        'cid'    => $category_id,
        'fid'    => $form_id,
        'pid'    => $petition_id,
        'psid'   => $path_step_id,
        'simple' => $simple
    ]);
}


