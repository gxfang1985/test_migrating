<?php

use grn\workflow\CustomizationUtil;

global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Category for view
$user_type = GRN_WORKFLOW_ACCESS_TYPE_SYSTEM;
include('_category.csp');

//  Start Form and Item Section  //

//Get Parameter
$category_id = @ $G_INPUT['cid'];    //Category ID
$form_id = @ $G_INPUT['fid'];    //Form ID

//Get Form and Item Controller Utility
require_once('workflow/controller_util.csp');
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$item_util = GRN_Workflow_Item_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_form = [
    //Form Information
    'fid'                     => '_id',             //Form ID
    'name'                    => 'name',            //Form Name
    'foreign_key'             => 'foreign_key',     //Form Foreign key
    'memo'                    => 'memo',            //Form Memo
    'auto_export'             => 'auto_export',     //Auto export petition
    'export_folder'           => 'export_folder',   //Export petition folder.
    'admin_memo'              => 'admin_memo',      //Form Admin Memo
    'creator'                 => 'creator',         //Form Creator
    'creator_name'            => 'creator_name',    //Form Creator Name
    'modifier'                => 'modifier',        //Form Modifier
    'modifier_name'           => 'modifier_name',   //Form Modifier Name
    'ctime'                   => 'ctime',           //Form Create Time
    'mtime'                   => 'mtime',           //Form Modify Time
    'path'                    => 'path',            //Form Path
    'active'                  => 'active',          //Form Active
    'icon_type'               => 'icon_type',       //Form Icon Type
    'icon_id'                 => 'icon_id',         //Form Icon ID
    'icon_url'                => 'icon_url',        //Form Icon URL
    'serial_type'             => 'serial_type',     //Form Serial Type
    'serial_format'           => 'serial_format',   //Form Serial Format
    'serial_number'           => 'serial_number',   //Form Serial Number
    'approved_serial_type'    => 'approved_serial_type',
    'approved_serial_format'  => 'approved_serial_format',
    'approved_serial_number'  => 'approved_serial_number',
    'is_customization_active' => 'is_customization_active',
];

//Create Parameter Translation Map
$translation_map_item = [
    'iid'          => '_id',                  //Item ID
    'display_name' => 'display_name',         //Item Display Name
    'code'         => 'code',                 //Item Code
    'type'         => 'type',                 //Item Type
    'foreign_key'  => 'foreign_key',          //Item foreign_key
    'form'         => 'form',                 //Item Form
    'display_type' => 'display_type',         //Display_type
    'settings'     => 'settings',             //Settings
    'export_data'  => 'export_data',          //export data
];

//Get Form for view
$option = [];
$form_for_view = $form_util->getView($form_id, $translation_map_form,
    $category_id, $option, true);

//Create Icon Name
if ($form_for_view['icon_type'] == 0) {
    $file_suffix = ($form_for_view['icon_id'] == 0) ? ''
        : '_' . $form_for_view['icon_id'];
    $file_name = sprintf('workflow_form20%s.gif',
        $file_suffix);
    $form_for_view['icon_name'] = cb_msg(GRN_WORKFLOW_MODULE_ID, $file_name);
} else {
    $form_for_view['icon_name'] = cb_msg(GRN_WORKFLOW_MODULE_ID,
        'workflow_form20_url.gif');
}

//Get Item List for view
$item_list_for_view = $item_util->getListView($translation_map_item, $form_id);

$is_disable_schedule_register = true;

foreach ($item_list_for_view as $v) {
    if ($v['foreign_key'] == "grn.workflow.date") {
        $is_disable_schedule_register = false;
        break;
    }
}
$t->assign('is_disable_schedule_register', $is_disable_schedule_register);
//  End Form and Item Section //

//  Start Path and Path Step Section  //

require_once('workflow/path.csp');
$logic = GRN_Workflow_Paths::getInstance();
$public_path_count = $logic->getCount(GRN_WORKFLOW_PUBLIC_PATH);
$t->assign('public_path_total', $public_path_count);

if (0 < strlen($form_for_view['path'])) {
    $path_id = $form_for_view['path'];
    $t->assign('pid', $path_id);

    $columns = [
        '_id',
        'col_name',
        'col_foreign_key',
        'col_type',
        'col_skip',
        'col_description',
        'col_icon',
        'col_creator',
        'col_creator_name',
        'col_ctime',
        'col_modifier',
        'col_modifier_name',
        'col_mtime',
        'col_richeditor'
    ];
    $path = $logic->get($path_id, $columns);
    if ( ! is_array($path) || 0 == count($path)) {
        // 経路がない
        cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH);
    }
    $timestamp = new CB_Timestamp();
    $timestamp->unix_ts = $path['col_ctime'];
    $path['col_ctime'] = new CB_TimestampEx($timestamp);
    $timestamp->unix_ts = $path['col_mtime'];
    $path['col_mtime'] = new CB_TimestampEx($timestamp);
    require_once('workflow/form_logic.csp');
    $logic = GRN_Workflow_Form_Logic::getInstance();
    $form_counts = $logic->getCountListGroupByPath([$path_id]);
    if (array_key_exists($path_id, $form_counts)) {
        $path['form_total'] = $form_counts[$path_id];
    } else {
        $path['form_total'] = 0;
    }
    $t->assign('path', $path);
    $logic = GRN_Workflow_PathSteps::getInstance();
    $columns = [
        '_id',
        'col_type',
        'col_acceptance_type',
        'col_role',
        'col_code',
        'col_skip',
        'col_deny_change_path',
        'col_change_path',
        'col_applicant'
    ];
    $path_steps = $logic->getList($path_id, null, null, $columns);
    $t->assign('path_steps', $path_steps);
    $t->assign('path_step_total', count($path_steps));

    $steps_all = [];
    $steps_all = $path_steps;

    $acceptance_path_steps = [];
    $circular_path_steps = [];
    foreach ($path_steps as $path_step) {
        if (GRN_WORKFLOW_CIRCULAR == $path_step['col_type']) {
            $circular_path_steps[$path_step['_id']] = $path_step;
        } else {
            $acceptance_path_steps[$path_step['_id']] = $path_step;
        }
    }
    $t->assign('acceptance_path_steps', $acceptance_path_steps);
    $t->assign('acceptance_path_step_total', count($acceptance_path_steps));
    $t->assign('circular_path_steps', $circular_path_steps);
    $t->assign('circular_path_step_total', count($circular_path_steps));

    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    $members_info = $controller_util->getPathMembersInfo($path_steps);
    $t->assign('members', $members_info['members']);
    $t->assign('member_total', $members_info['member_total']);

//  End Path and Path Step Section  //

//  Start Path Condition Section  //

    //Get Path Skip Item Total
    require_once('workflow/item_logic.csp');
    $logic = GRN_Workflow_Item_Logic::getInstance();
    $item_list = $logic->getList($form_id);
    $path_skip_item_total = 0;
    foreach (array_keys($item_list) as $key) {
        switch ($item_list[$key]['col_foreign_key']) {
            case 'grn.workflow.radio':
            case 'grn.workflow.checkbox':
            case 'grn.workflow.numeric':
            case 'grn.workflow.calc_numeric':
            case 'grn.workflow.menu_string':
                $path_skip_item_total++;
                break;
            default:
                break;
        }
    }
    $t->assign('path_skip_item_total', $path_skip_item_total);

    $access_setting = false;
    foreach (array_keys($item_list) as $key) {
        switch ($item_list[$key]['col_foreign_key']) {
            case 'grn.workflow.string_single':
                if ($item_list[$key]['col_type'] == 1) {
                    break;
                }
            case 'grn.workflow.string_multiple':
            case 'grn.workflow.date':
            case 'grn.workflow.file':
            case 'grn.workflow.numeric':
                $access_setting = true;
                break;
            default:
                break;
        }
        if ($access_setting == true) {
            break;
        }
    }
    $t->assign('access_setting', $access_setting);

    //Get Path Skip List
    $columns = [
        'tab_grn_workflow_pathskip' => [
            '_id'      => '_id',
            'col_form' => 'col_form',
            'col_item' => 'col_item'
        ]
    ];
    require_once('workflow/path_skip.csp');
    $logic = GRN_Workflow_PathSkips::getInstance();
    $path_skip_list = $logic->getByFormId($form_id, $columns);
    $t->assign('path_skip', $path_skip_list);

    //Get Path Condition List
    $columns = [
        'tab_grn_workflow_pathskip'      => [
            'col_form' => 'col_form',
            'col_item' => 'col_item'
        ],
        'tab_grn_workflow_item'          => [
            'col_display_name' => 'col_display_name',
            'col_settings'     => 'col_settings',
            'col_foreign_key'  => 'col_foreign_key'
        ],
        'tab_grn_workflow_pathcondition' => [
            '_id'           => '_id',
            'col_name'      => 'col_name',
            'col_number'    => 'col_number',
            'col_operator'  => 'col_operator',
            'col_option'    => 'col_option',
            'col_path_skip' => 'col_path_skip'
        ],
    ];
    require_once('workflow/path_condition.csp');
    $condition_logic = GRN_Workflow_PathConditions::getInstance();
    $condition_list = $condition_logic->getList(null, $form_id, $columns);

    //Get Condition Operator and Condition
    array_walk($condition_list, function (&$condition, $key) use ($item_util) {
        $condition['operator']
            = $item_util->getConditionOperatorView($condition);
        $condition['condition'] = $item_util->getConditionValueView($condition);
    });
    $t->assign('condition_list', $condition_list);
    $t->assign('condition_list_count', count($condition_list));

    //Get Condition Step List
    $skip_step_id_list = [];
    $columns = [
        '_id',
        'col_path_condition',
        'col_path_step'
    ];
    $step_logic = GRN_Workflow_PathConditionSteps::getInstance();
    $path_condition_step_list
        = $step_logic->getListByPathConditionId(array_keys($condition_list),
        $columns);
    foreach (array_keys($path_condition_step_list) as $key) {
        $skip_step_id_list[$path_condition_step_list[$key]['col_path_condition']][$path_condition_step_list[$key]['col_path_step']]
            = $path_condition_step_list[$key]['col_path_step'];
    }

    $condition_path_step_list = [];
    foreach (array_keys($steps_all) as $path_step_id) {
        foreach (array_keys($condition_list) as $condition_id) {
            if (array_key_exists($condition_id, $skip_step_id_list)) {
                if ( ! array_key_exists($path_step_id,
                    $skip_step_id_list[$condition_id])
                ) {
                    $condition_path_step_list[$condition_id][$path_step_id]
                        = $steps_all[$path_step_id];
                }
            } else {
                $condition_path_step_list[$condition_id][$path_step_id]
                    = $steps_all[$path_step_id];
            }
        }
    }
    $t->assign('condition_path_step_list', $condition_path_step_list);
}

$locator = GRN_ApplicationLocator::instance();
if ($locator->isActive(GRN_SCHEDULE_APPLICATION_ID)) {
    $t->assign('isActiveSchedule', true);
} else {
    $t->assign('isActiveSchedule', false);
}

CustomizationUtil::allowCustomization($t);
CustomizationUtil::getActivationCustomizationResourceString($form_for_view['is_customization_active'],
    $t);

//Assign Display Infomation
//Assign Category ID
$t->assign('category_id', $category_id);
//Assign Form ID
$t->assign('form_id', $form_id);

//Assign Form
$t->assign('form', $form_for_view);
//Assign Item List
$t->assign('item_list', $item_list_for_view);
//Assign Item Count
$t->assign('item_count', count($item_list_for_view));

//-- set page title and site position
//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/system/form_list',
            'name' => grn_get_page_display_name('workflow/system/form_list'),
            'cid'  => $category_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


