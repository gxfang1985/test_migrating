<?php

require_once('grn/application.csp');

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    $category_id = null;
    if (array_key_exists('cid', $G_INPUT)) {
        $category_id = $G_INPUT['cid'];
    }
    $form_id = null;
    if (array_key_exists('fid', $G_INPUT)) {
        $form_id = $G_INPUT['fid'];
    }
    $path_step_id = null;
    if (array_key_exists('psid', $G_INPUT)) {
        $path_step_id = $G_INPUT['psid'];
    }
    $poid = null;
    if (array_key_exists('poid', $G_INPUT)) {
        $poid = $G_INPUT['poid'];
    }
    $text = null;
    if (array_key_exists('text', $G_INPUT)) {
        $text = $G_INPUT['text'];
    }
    $func = $G_INPUT['func'];
    if ($func == 'search') {
        cb_redirect('workflow/system/form_default_list', [
            'cid'  => $category_id,
            'fid'  => $form_id,
            'psid' => $path_step_id,
            'poid' => $poid,
            'text' => $text
        ]);
    }

    $dids = null;
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();

    $session_name = 'workflow.system.form_default_add';
    $session =& $session_manager->getSession($session_name);

    $dids = $session->get('target_ids');
    //if(array_key_exists('dids', $G_INPUT))
    //{
    //    $dids = $G_INPUT['dids'];
    //}
    if ( ! is_array($dids) || 0 == count($dids)) {
        cb_redirect('workflow/system/form_default_list', [
            'cid'  => $category_id,
            'fid'  => $form_id,
            'psid' => $path_step_id,
            'poid' => $poid,
            'text' => $text
        ]);
    }

// TODO: 運用管理はここでアクセス権をチェック

    require_once('workflow/form_logic.csp');
    $logic = GRN_Workflow_Form_Logic::getInstance();
    $form = $logic->get($form_id, $category_id);
    if ( ! is_array($form) || 0 == count($form)) {
        // フォームがない
        cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
    }

    $path_id = $form['col_path'];

    require_once('workflow/path.csp');
    $logic = GRN_Workflow_Paths::getInstance();
    $columns = [
        '_id',
        'col_type'
    ];
    $path = $logic->get($path_id, $columns);
    if ( ! is_array($path) || 0 == count($path)) {
        // 経路がない
        cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH);
    }
    if (GRN_WORKFLOW_PRIVATE_PATH != $path['col_type']) {
        // 専用経路でない経路は変更できない
        cb_throw_error(E_GRN_WRKF_DENY_MODIFY_NOT_PRIVATE_PATH);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();

    $properties = [
        'col_modifier'             => $login->getOID(),
        'col_modifier_name'        => $login->get('display_name'),
        'col_modifier_foreign_key' => $login->get('foreign_key'),
        'col_mtime'                => time()
    ];
    $logic->modify($path_id, $properties);

    $logic = GRN_Workflow_PathSteps::getInstance();
    $columns = [
        '_id',
        'col_path'
    ];
    $path_step = $logic->get($path_id, $path_step_id, $columns);
    if ( ! is_array($path_step) || 0 == count($path_step)) {
        // 経路ステップがない
        cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    $uids = [];
    $gids = [];
    $srids = [];
    $drids = [];
    $props = ['col_skip' => 0];
    foreach (array_keys($dids) as $default_id) {
        list($type, $default_id) = explode(':', $default_id);
        switch ($type) {
            case 'user':
                $uids[] = $default_id;
                break;
            case 'group':
                $gids[] = $default_id;
                break;
            case 'static_role':
                $srids[] = $default_id;
                break;
            case 'dynamic_role':
                $drids[] = $default_id;
                break;
            case 'applicant':
                $props['col_applicant'] = 1;
                break;
            default:
                // 不正な初期値です
                cb_throw_error(E_GRN_WRKF_INVALID_MEMBER_ID);
        }
    }

    $logic->modify($path_step_id, $props);
    $psids = [$path_step_id];

    if (0 < count($uids)) {
        $columns = [
            'tab_grn_workflow_pathstepuser' => [
                'col_path_step' => 'col_path_step',
                'col_member'    => '_id'
            ]
        ];
        $logic = GRN_Workflow_PathStepUsers::getInstance();
        $rows = $logic->getList($psids, $columns);
        $users = [];
        if (array_key_exists($path_step_id, $rows)) {
            $users =& $rows[$path_step_id];
        }

        $users_info = $uum->getUsersInfo($uids);
        $uids = array_keys($users_info);

        foreach ($uids as $user_id) {
            if ( ! array_key_exists($user_id, $users)) {
                $properties = [
                    'col_path_step' => $path_step_id,
                    'col_member'    => $user_id
                ];
                $logic->add($properties);
            }
        }
    }
    if (0 < count($gids)) {
        $columns = [
            'tab_grn_workflow_pathstepgroup' => [
                'col_path_step' => 'col_path_step',
                'col_member'    => '_id'
            ]
        ];
        $logic = GRN_Workflow_PathStepGroups::getInstance();
        $rows = $logic->getList($psids, $columns);
        $groups = [];
        if (array_key_exists($path_step_id, $rows)) {
            $groups =& $rows[$path_step_id];
        }

        $groups_info = $uum->getGroupInfoList($gids);
        $gids = array_keys($groups_info);

        foreach ($gids as $group_id) {
            if ( ! array_key_exists($group_id, $groups)) {
                $properties = [
                    'col_path_step' => $path_step_id,
                    'col_member'    => $group_id
                ];
                $logic->add($properties);
            }
        }
    }
    if (0 < count($srids)) {
        $columns = [
            'tab_grn_workflow_pathstepstaticrole' => [
                'col_path_step' => 'col_path_step',
                'col_member'    => '_id'
            ]
        ];
        $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
        $rows = $logic->getList($psids, $columns);
        $roles = [];
        if (array_key_exists($path_step_id, $rows)) {
            $roles =& $rows[$path_step_id];
        }

        $app_locator = GRN_ApplicationLocator::instance();
        $dbconn =& $app_locator->getConnection('workflow');

        foreach ($srids as $key => $value) {
            $srids[$key] = cb_queryf($dbconn, "'@S'", $value);
        }
        $srids = implode(',', $srids);
        $condition = "_id IN({$srids})";

        $roles_info = $uum->listStaticRolesInfo(null, 0, -1, $condition);
        $srids = array_keys($roles_info);

        foreach ($srids as $role_id) {
            if ( ! array_key_exists($role_id, $roles)) {
                $properties = [
                    'col_path_step' => $path_step_id,
                    'col_member'    => $role_id
                ];
                $logic->add($properties);
            }
        }
    }
    /*
        if(0 < count($drids))
        {
            $columns = array('_id',
                             'col_member');
            $logic = GRN_Workflow_PathStepDynamicRoles::getInstance();
            $rows = $logic->getList($psids, $columns);
            $roles = array();
            if(array_key_exists($path_step_id, $rows))
            {
                $roles =& $rows[$path_step_id];
            }

            foreach($drids as $role_id)
            {
                if(! array_key_exists($role_id, $roles))
                {
                    $properties = array('col_path_step'=>$path_step_id,
                                        'col_member'   =>$role_id);
                    $logic->add($properties);
                }
            }
        }
    */

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Path_Step_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'default_add';

        $applicant = null;
        if (array_key_exists('col_applicant', $props)) {
            $applicant = $props['col_applicant'];
        }
        $skip = null;
        if (array_key_exists('col_skip', $props)) {
            $skip = $props['col_skip'];
        }

        $inspection_applicant = $inspection->setApplicant($applicant);
        $inspection_skip = $inspection->setSkip($skip);

        $message_args['psid'] = $path_step_id;
        $message_args['uids'] = $uids;
        $message_args['gids'] = $gids;
        $message_args['srids'] = $srids;
        $message_args['applicant'] = $inspection_applicant;
        $message_args['skip'] = $inspection_skip;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }


    cb_redirect('workflow/system/form_default_list', [
        'poid' => $poid,
        'cid'  => $category_id,
        'fid'  => $form_id,
        'psid' => $path_step_id,
        'text' => $text
    ]);
}

