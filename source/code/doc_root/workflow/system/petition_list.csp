<?php

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Set Application Name
global $G_workflow_app_name;
$t->assign('app_name', $G_workflow_app_name);

global $G_container_base;
$uum = $G_container_base->getInstance('uum');

//Get Parameters
require_once('workflow/resources.csp');
$category_id = @ $G_INPUT['cid'];         //Category ID
$form_id = @ $G_INPUT['fid'];         //Form ID
$condition = @ $G_INPUT['condition'];   //Condition
$sort = @ $G_INPUT['sort'];        //Sort
$category_id = $category_id ? $category_id : GRN_WORKFLOW_CATEGORY_ROOT_ID;
$condition = array_key_exists('condition', $G_INPUT) ? $condition : '';

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession(cb_get_pagename());

if (@ $G_INPUT['sf']) {
    if ($G_INPUT['sf'] == 1) {
        //Load Sort and Condition from Session
        $sort = $session->get('sort');
        $condition = $session->get('condition');
    } else {
        //Load Condition Only from Session
        $condition = $session->get('condition');
        $session->set('sort', $sort);
        $G_INPUT['sf'] = 1;
    }
} else {
    //Save Sort to Session
    $session->set('sort', $sort);
    $session->set('condition', $condition);
}

//Get Category and Form and Petition Controller Utility
require_once('workflow/controller_util.csp');
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();

//Create Parameter Translation Map for Category
$translation_map_category = [
    //Category Information
    'cid'         => '_id',             //Category ID
    'name'        => 'name',            //Category Name
    'foreign_key' => 'foreign_key',     //Category Foreign key
    'memo'        => 'memo',            //Category Memo
    'parent'      => 'parent',          //Category Parent
    'list_index'  => 'list_index',      //Category List Index
    'count'       => 'count',           //Children Category Count
];

//Create Parameter Translation for Form
$translation_map_form = [
    'fid'       => '_id',          //Form ID
    'type'      => 'type',         //Form Type
    'name'      => 'name',         //Form Name
    'memo'      => 'memo',         //Form Memo
    'cid'       => 'category',     //Category ID
    'active'    => 'active',       //Form Active
    'deleted'   => 'deleted',      //Form Deleted
    'icon_type' => 'icon_type',    //Form Icon Type
    'icon_id'   => 'icon_id',      //Form Icon ID
    'icon_url'  => 'icon_url',     //Form Icon URL
];

//Create Parameter Translation for Petition
$translation_map_petition = [
    'pid'             => '_id',              //Petition ID
    'petition_number' => 'petition_number',  //Petition Name
    'name'            => 'name',             //Petition Name
    'form_name'       => 'form_name',        //Petition Form Name
    'status'          => 'status',           //Petition Status
    'user'            => 'user',             //Petition User
    'user_name'       => 'user_name',        //Petition User Name
    'ctime'           => 'ctime',            //Petition Create Time
    'transactor'      => 'transactor',       //Petition Transactor
    'transactor_name' => 'transactor_name',  //Petition Transactor Name
    'icon_type'       => 'icon_type',        //Petition Icon Type
    'icon_id'         => 'icon_id',          //Petition Icon ID
    'icon_url'        => 'icon_url',         //Petition Icon URL
    'priority'        => 'priority',         //Petition priority
];

//Get Current Category for View
$category_for_view = $category_util->getView($category_id,
    $translation_map_category, GRN_WORKFLOW_ACCESS_TYPE_SYSTEM);

//Get Child Category List for View
$category_for_view['children'] = $category_util->getChildListView($category_id,
    $translation_map_category, GRN_WORKFLOW_ACCESS_TYPE_SYSTEM);

//Get Tree Category List for View
if ($category_id != GRN_WORKFLOW_CATEGORY_ROOT_ID) {
    $category_for_view['ancestors']
        = $category_util->getTreeListView($category_id,
        $translation_map_category, GRN_WORKFLOW_ACCESS_TYPE_SYSTEM, true,
        false);
}

//Get Form List for View
$form_list_for_view = [];
$option = [
    'condition' => [
        '0' => [
            'column'   => 'col_type',
            'value'    => '0',
            'operator' => '='
        ]
    ]
];
$form_list_for_view = $form_util->getListView($translation_map_form,
    $category_id, $option);
if ( ! $form_id) {
    $form_list_for_view_keys = array_keys($form_list_for_view);
    $form_id = current($form_list_for_view_keys);
}

//Get Login User Config
global $G_portal_login_user;
require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$config = $manager->getUserConfig($G_workflow_login_user);

//Get Petition List for View
$users_id = [];
$petition_list_for_view = [];
$n_navigation_for_view = [];

if (is_null($sort)) {
    $sort = 'ctd';
}

if ($form_id) {
    $option = [];

    //Create Type Condition Option

    //Create Status Condition Option
    switch ($condition) {
        case '0':
            $condition_values = [0, 1, 4];
            break;
        case '1':
            $condition_values = 2;
            break;
        case '2':
            $condition_values = 3;
            break;
        case '3':
            $condition_values = 6;
            break;
        case '4':
            $condition_values = 7;
            break;
        default:
            //$condition_values = array(0,1,2,3,4,6,7);
            $condition_values = null;
            break;
    }

    $option['condition'] = [];
    if (is_null($condition_values)) {
        unset($option['condition']);
    } elseif (is_array($condition_values)) {
        $option['condition'][] = [
            'column'   => 'col_status',
            'value'    => $condition_values,
            'operator' => 'IN'
        ];
    } else {
        $option['condition'][] = [
            'column'   => 'col_status',
            'value'    => $condition_values,
            'operator' => '='
        ];
    }

    //Create Sort Option
    $option['sort'] = [];
    switch ($sort) {
        case 'pnu':
            $option['sort'][] = [
                'column' => 'col_petition_number',
                'order'  => 'ASC'
            ];
            break;
        case 'pnd':
            $option['sort'][] = [
                'column' => 'col_petition_number',
                'order'  => 'DESC'
            ];
            break;
        case 'unu':
            $option['sort'][] = ['column' => 'col_user_name', 'order' => 'ASC'];
            break;
        case 'und':
            $option['sort'][] = [
                'column' => 'col_user_name',
                'order'  => 'DESC'
            ];
            break;
        case 'ctu':
            $option['sort'][] = ['column' => 'col_ctime', 'order' => 'ASC'];
            break;
        case 'ctd':
            $option['sort'][] = ['column' => 'col_ctime', 'order' => 'DESC'];
            break;
        default:
            unset($option['sort']);
            break;
    }

    //Get Petition Total Count
    require_once('workflow/petition_logic_base.csp');
    $petition_logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();
    $petition_count = $petition_logic_base->getCount($form_id, $option);

    //N-Navigation
    require_once('workflow/utility.csp');
    $params = [
        'cid' => $category_id,
        'fid' => $form_id,
        'sf'  => '1'
    ];
    $n_navigation_for_view = grn_make_n_navigation($petition_count, $params,
        $config->getListMax());

    //Create List Option
    $option['list'] = [];
    $option['list']['offset'] = $n_navigation_for_view['offset'];
    $option['list']['limit'] = $n_navigation_for_view['limit'];

    //Get Petition List for View
    $petition_list_for_view
        = $petition_util->getListView($translation_map_petition, $form_id,
        $option);

    //Get Last Accept Path Step
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    foreach (array_keys($petition_list_for_view) as $petition_id) {
        $petition_for_view =& $petition_list_for_view[$petition_id];

        $applicant = $uum->getUser($petition_for_view['user']);
        if ($applicant) {
            $petition_for_view['user_valid'] = $applicant->get('valid');
            $users_id[] = $petition_for_view['user'];
        }

        if (array_key_exists('transactor', $petition_for_view)) {
            $transactor = $uum->getUser($petition_for_view['transactor']);
            if ($transactor) {
                $petition_for_view['transactor_valid']
                    = $transactor->get('valid');
                $users_id[] = $petition_for_view['transactor'];
            }
        }

        //Get Last Path Step Information
        $path_steps = $controller_util->getPathInfo($petition_id);
        $path_step
            =& $controller_util->getLastAcceptancePathStep(current($path_steps));
        $transactor = $path_step['users'];
        $transactor_num = count($path_step['users']);
        if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
            $transactor = array_slice($transactor, 0,
                GRN_WORKFLOW_SHOW_MAX_USER_NUM);
        }
        $petition_list_for_view[$petition_id]['transactor_id']
            = $petition_list_for_view[$petition_id]['transactor'];
        $petition_list_for_view[$petition_id]['transactor'] = $transactor;
        $petition_list_for_view[$petition_id]['transactor_num']
            = $transactor_num;
    }
} else {
    //N-Navigation
    require_once('workflow/utility.csp');
    $params = [
        'cid' => $category_id,
        'fid' => $form_id,
        'sf'  => '1'
    ];
    $n_navigation_for_view = grn_make_n_navigation(0, $params,
        $config->getListMax());
}

//Create Condition Options
$condition_options = [];
$condition_options[5] = [
    'value' => '',
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'status_all')
];
for ($i = 0; $i < 5; $i++) {
    $condition_options[$i] = [
        'value' => $i,
        'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'view_status_' . $i)
    ];
}
if ($condition !== '') {
    $condition_options[$condition]['selected'] = true;
} else {
    $condition_options[5]['selected'] = true;
}

//Assign Display Infomation
//Assign Category ID
$t->assign('category_id', $category_id);
//Assign Form ID
$t->assign('form_id', $form_id);

//Assign Category
$t->assign('category', $category_for_view);
//Assign Form List
$t->assign('form_list', $form_list_for_view);
//Assign Petition List
$t->assign('petition_list', $petition_list_for_view);

//Assign View Set
$t->assign('navi', $n_navigation_for_view);
//Assign Sort
$t->assign('sort', $sort);
//Assign Condition Options
$t->assign('condition_options', $condition_options);

//UI Parameters
$t->assign('name_width', $config->getNameWidth());//GRN_WORKFLOW_NAME_WIDTH
$t->assign('subject_width', GRN_WORKFLOW_SUBJECT_WIDTH);
$t->assign('show_user_num', GRN_WORKFLOW_SHOW_MAX_USER_NUM);

//Page Title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
$t->assign('site_position', [
        ['page' => '', 'name' => $page_title]
    ]
);
//GTM-529 tuning
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
    $uum->getLoginUser());
$t->assign('users_info', $users_info);
//end
//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


