<?php

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

//Get Parameter
$category_id = @ $G_INPUT['cid'];         //Category ID
$form_id = @ $G_INPUT['fid'];         //Form ID
$petition_id = @ $G_INPUT['pid'];         //Petition ID
$simple = @ $G_INPUT['simple'];      //Simple Flag

//Get Petition and Item Data Controller Utility
require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'             => '_id',                  //Petition ID
    'petition_number' => 'petition_number',      //Petition Number
    'name'            => 'name',                 //Petition Name
    'form_name'       => 'form_name',            //Petition Form Name
    'icon_type'       => 'icon_type',            //Petition Icon Type
    'icon_id'         => 'icon_id',              //Petition Icon ID
    'icon_url'        => 'icon_url',             //Petition Icon URL
    'status'          => 'status',
];

//Get Petition for view
$petition = $petition_util->getView($petition_id, $translation_map_petition);
/*
switch($petition['status'])
{
case GRN_WORKFLOW_STATUS_TEMPORARY:
case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    break;
default:
    break;
}
*/
//Get Path Step List for view
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$path_steps = $controller_util->getPathInfo($petition_id);

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$columns = [
    'col_petition',
    'col_path_step_data',
    'col_comment',
    'col_creator',
    'col_creator_name',
    'col_creator_foreign_key',
    'col_ctime'
];
$change_path_histories = $logic->getListByPetitionId($petition_id, $columns);

if ( ! is_array($change_path_histories) || 0 == count($change_path_histories)) {
    cb_throw_error(E_GRN_WRKF_EMPTY_CHANGE_PATH_HISTORY);
}

$uids = [];
foreach ($change_path_histories as $key => $value) {
    if (0 < strlen($value['col_creator'])) {
        $uids[] = $value['col_creator'];
    }

    $timestamp = new CB_TimeStamp();
    $timestamp->unix_ts = $value['col_ctime'];
    $change_path_histories[$key]['col_ctime'] = clone $timestamp;
}
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');

$columns = [];
$columns[] = 'col_display_name';
$columns[] = 'col_foreign_key';
$columns[] = 'col_valid';

$users = $uum->getUsersInfo($uids, $columns);
$t->assign('creators', $users);
//GTM-529 tuning
require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids,
    $uum->getLoginUser());
$t->assign('users_info', $users_info);
//end
$logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
$columns = [
    'tab_grn_workflow_changepathdeleteduser' => [
        '_id'                     => '_id',
        'col_change_path_history' => 'col_change_path_history',
        'col_user'                => 'col_user',
        'col_display_name'        => 'col_old_display_name',
        'col_foreign_key'         => 'col_foreign_key'
    ],
    'tab_cb_user'                            => [
        'col_display_name' => 'col_display_name',
        'col_valid'        => 'col_valid'
    ]
];
$deleted_users = $logic->getSortedList(array_keys($change_path_histories),
    $columns);
foreach ($deleted_users as $deleted_user) {
    $change_path_history_id = $deleted_user['col_change_path_history'];
    $change_path_histories[$change_path_history_id]['deleted_users'][]
        = $deleted_user;
}

$logic = GRN_Workflow_ChangePathAddUsers::getInstance();
$columns = [
    'tab_grn_workflow_changepathadduser' => [
        '_id'                     => '_id',
        'col_change_path_history' => 'col_change_path_history',
        'col_user'                => 'col_user',
        'col_display_name'        => 'col_old_display_name',
        'col_foreign_key'         => 'col_foreign_key'
    ],
    'tab_cb_user'                        => [
        'col_display_name' => 'col_display_name',
        'col_valid'        => 'col_valid'
    ]
];
$add_users = $logic->getSortedList(array_keys($change_path_histories),
    $columns);
foreach ($add_users as $add_user) {
    $change_path_history_id = $add_user['col_change_path_history'];
    $change_path_histories[$change_path_history_id]['add_users'][] = $add_user;
}

//Assign Display Infomation
//Assign Catehgory ID
$t->assign('category_id', $category_id);
//Assign Catehgory ID
$t->assign('form_id', $form_id);
//Assign Petition ID
$t->assign('petition_id', $petition_id);

//Assign Petition
$t->assign('petition', $petition);

//Assign Path Steps
$t->assign('path_steps', $path_steps);
//Assign Change Path History
$t->assign('change_path_histories', $change_path_histories);

//Assign Simple
$t->assign('simple', $simple);

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/system/petition_list',
            'name' => grn_get_page_display_name('workflow/system/petition_list'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'sf'   => 1
        ],
        [
            'page' => 'workflow/system/petition_view',
            'name' => grn_get_page_display_name('workflow/system/petition_view'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'pid'  => $petition_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

