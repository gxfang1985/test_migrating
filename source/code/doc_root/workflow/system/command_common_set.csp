<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;
    $target_page = 'workflow/system/common_set';
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;
    require('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($target_page);

    require_once('workflow/config.csp');
    $logic = GRN_Workflow_Configs::getInstance();
    $logic = $logic->getSystemConfig();

    // Set current setting for validation and logging.
    if (isset($G_INPUT['mail_notification'])
        && $G_INPUT['mail_notification'] == 0
    ) {
        $G_INPUT['mail_notification_url'] = $logic->getMailNotificationURL();
    }

    if (SmartyValidate::is_valid($G_INPUT, $target_page)) {
        if ($G_INPUT['mail_notification']) {
            // Validate Product URL
            $ret
                = $logic->validateMailNotificationURL($G_INPUT['mail_notification_url']);
            if ($ret !== true) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_MAILNOTIFICATION_INVALID_URL, null,
                    ['suffix' => $ret]);
            }

            $logic->setMailNotificationURL($G_INPUT['mail_notification_url']);
        }
        $logic->setMailNotification($G_INPUT['mail_notification']);

        require_once('fw/date.csp');
        //GRN2-3129
        $today = getdate();
        $set_date_time = new CB_DateTime();
        $set_date_time->year = $today['year'];
        $set_date_time->month = $G_INPUT['month'];
        $set_date_time->day = $G_INPUT['day'];
        $set_date_time->hour = $G_INPUT['hour'];
        $set_date_time->minute = $G_INPUT['minute'];

        $cutover = $set_date_time;
        if ($G_INPUT["month"] == "") {
            $cutover->month = "";
        }

        if ($G_INPUT["day"] == "") {
            $cutover->day = "";
        }

        if ($G_INPUT["hour"] == "") {
            $cutover->hour = "";
        }

        if ($G_INPUT["minute"] == "") {
            $cutover->minute = "";
        }
        $logic->setCutover($cutover);
        //GRN2-3129
        $logic->setRemand($G_INPUT['remand']);
        $logic->setChangePathInfo($G_INPUT);
        $logic->setApprovalPlan($G_INPUT['approval_plan']);
        $logic->setSubstituteApplication($G_INPUT['substitute_application']);
        $logic->setSubstituteApproval($G_INPUT['substitute_approval']);
        $logic->setPersonalAgentSetting($G_INPUT['personal_agent_setting']);
        $logic->setJsCssCustomizationSetting($G_INPUT['js_css_customization_setting']);

        // Validate the proposed charset against the available encodings
        if ( ! defined('ON_FOREST')) {
            $automatic_export_encoding = $G_INPUT['charset'];
            require_once('fw/i18n.csp');
            $i18n = CB_I18N::getInstance();
            $available = $i18n->getAvailableEncodings();
            if ( ! in_array($automatic_export_encoding, $available)) {
                cb_throw_error(E_COMMON_INTERNAL);
            }
            $logic->setAutomaticExportEncoding($automatic_export_encoding);
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Common_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'common_set';

            $cutover_str = null;
            if (is_object($cutover)) {
                $cutover_str = $cutover->month . "/" . $cutover->day . "/" .
                               $cutover->hour . ":" . $cutover->minute;
            }

            $inspection_remand = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['remand'] === '1') {
                $inspection_remand = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $inspection_applicant = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['applicant'] === '1') {
                $inspection_applicant = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $inspection_operation_admin = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['operation_admin'] === '1') {
                $inspection_operation_admin = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $inspection_system_admin = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['system_admin'] === '1') {
                $inspection_system_admin = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $inspection_approval_plan = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['approval_plan'] === '1') {
                $inspection_approval_plan = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $inspection_substitute_application
                = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['substitute_application'] === '1') {
                $inspection_substitute_application
                    = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $inspection_substitute_approval = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['substitute_approval'] === '1') {
                $inspection_substitute_approval
                    = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $inspection_personal_agent_setting
                = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['personal_agent_setting'] === '1') {
                $inspection_personal_agent_setting
                    = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $mail_notification = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
            if ($G_INPUT['mail_notification'] === '1') {
                $mail_notification = GRN_WORKFLOW_INSPECTION_FLAG_ON;
            }
            $mail_notification_url = $G_INPUT['mail_notification_url'];
            $js_css_customization_setting
                = $G_INPUT['js_css_customization_setting']
                  === '1' ? GRN_WORKFLOW_INSPECTION_FLAG_ON
                : GRN_WORKFLOW_INSPECTION_FLAG_OFF;

            $message_args['cutover'] = $cutover_str;
            $message_args['allow_remand'] = $inspection_remand;
            $message_args['applicant'] = $inspection_applicant;
            $message_args['operation_admin'] = $inspection_operation_admin;
            $message_args['system_admin'] = $inspection_system_admin;

            $message_args['approval_plan'] = $inspection_approval_plan;
            $message_args['substitute_application']
                = $inspection_substitute_application;
            $message_args['substitute_approval']
                = $inspection_substitute_approval;
            $message_args['personal_agent_setting']
                = $inspection_personal_agent_setting;

            $message_args['mail_notification'] = $mail_notification;
            $message_args['mail_notification_url'] = $mail_notification_url;

            $message_args['js_css_customization_setting']
                = $js_css_customization_setting;

            if ( ! defined('ON_FOREST')) {
                $message_args['automatic_export_encoding']
                    = $automatic_export_encoding;
            }

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        cb_redirect('system/application_list', ['app_id' => 'workflow']);
    } else {
        $t->setPageInfo($target_page);

        $page_title = grn_get_page_display_name($target_page);
        $t->assign('page_title', $page_title);

        $site_position = [['page' => '', 'name' => $page_title]];
        $t->assign('site_position', $site_position);

        // Assign input values
        $assign_input_values = [
            'month'                        => cb_at($G_INPUT, 'month'),
            'day'                          => cb_at($G_INPUT, 'day'),
            'hour'                         => cb_at($G_INPUT, 'hour'),
            'minute'                       => cb_at($G_INPUT, 'minute'),
            'remand'                       => cb_at($G_INPUT, 'remand'),
            'applicant'                    => cb_at($G_INPUT, 'applicant'),
            'operation_admin'              => cb_at($G_INPUT,
                'operation_admin'),
            'system_admin'                 => cb_at($G_INPUT, 'system_admin'),
            'approval_plan'                => cb_at($G_INPUT, 'approval_plan'),
            'substitute_application'       => cb_at($G_INPUT,
                'substitute_application'),
            'substitute_approval'          => cb_at($G_INPUT,
                'substitute_approval'),
            'personal_agent_setting'       => cb_at($G_INPUT,
                'personal_agent_setting'),
            'mail_notification'            => cb_at($G_INPUT,
                'mail_notification'),
            'mail_notification_url'        => cb_at($G_INPUT,
                'mail_notification_url'),
            'js_css_customization_setting' => cb_at($G_INPUT,
                'js_css_customization_setting'),
            'automatic_export_encoding'    => cb_at($G_INPUT, 'charset')
        ];
        $t->assign($assign_input_values);

        //GRN2-3047
        $t->assign('sample_url', cb_get_full_url('workflow/index'));
        //GRN2-3047
        $t->display("${target_page}.tpl");
    }

}


