<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Create Parameter Translation Map
    $translation_map = [
        'cid' => '_cid',
        'fid' => '_fid',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Delete All Petition
    require_once("workflow/petition_logic.csp");
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
    //$options = array('condition'=>array());
    //$options['condition'][] = array('column'=>'col_status', 'value'=>array(0,1,2,3,4,6,7), 'operator'=>'IN');
    $columns = ['_id', 'col_user', 'col_agent_user'];
    //$petitions = $petition_logic->getList($properties['_fid'], $columns, $options);
    $petitions = $petition_logic->getList($properties['_fid'], $columns);
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil();
    require_once('workflow/notification.csp');
    $notification_logic = GRN_Workflow_Notification::getInstance();
    require_once('workflow/change_path_history.csp');
    $change_path_histories_logic
        = GRN_Workflow_ChangePathHistories::getInstance();
    $deleted_users_logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
    foreach ($petitions as $petition) {
        // 通知を削除
        $path_steps = $controller_util->getPathInfo($petition['_id']);
        $path_step = current($path_steps);
        $uids = [];
        while ($path_step) {
            if ($path_step['col_activate'] && ! $path_step['col_skip']) {
                if ( ! array_key_exists('users', $path_step)) {
                    cb_throw_error();
                }
//                $uids += $path_step['uids'];
                $uids = array_merge($uids, $path_step['uids']);
            }
            $path_step =& $path_step['next'];
        }
        $columns = ['_id'];
        $change_path_histories
            = $change_path_histories_logic->getListByPetitionId($petition['_id'],
            $columns);
        if (is_array($change_path_histories)
            && 0 < count($change_path_histories)
        ) {
            $columns = [
                '_id',
                'col_user'
            ];
            $deleted_users
                = $deleted_users_logic->getList(array_keys($change_path_histories),
                null, $columns);
            foreach ($deleted_users as $deleted_user) {
                $uids[] = $deleted_user['col_user'];
            }
        }
        // Petition's user / petition's agent
        if (array_search($petition['col_user'], $uids) === false) {
            $uids[] = $petition['col_user'];
        }
        if (strlen($petition['col_agent_user'] > 0)
            && array_search($petition['col_agent_user'], $uids) === false
        ) {
            $uids[] = $petition['col_agent_user'];
        }
        if (is_array($uids) && 0 < count($uids)) {
            $notification_logic->removeList($uids, $petition['_id']);
        }
    }

    $petition_logic->deleteMulti(array_keys($petitions), $properties['_fid']);

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_delete_all';

        $message_args['fid'] = $properties['_fid'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Redirect Next Page
    cb_redirect('workflow/system/petition_list',
        ['cid' => $properties['_cid'], 'fid' => $properties['_fid']]);
}


