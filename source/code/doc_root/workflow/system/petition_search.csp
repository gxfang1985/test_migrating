<?php

global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session =& $session_manager->getSession(cb_get_pagename());

if (@ $G_INPUT['sf'] || @ $G_INPUT['sn']) {
    //Load Search Settings
    $search = $session->get('search');

    //Create ID and Sort
    $category_id = $search['category_id'];
    $form_id = $search['form_id'];
    if (array_key_exists('sort', $G_INPUT)) {
        $sort = @  $G_INPUT['sort'];
        $search['sort'] = $sort;
        $session->set('search', $search);
    } else {
        $sort = $search['sort'];
    }

    //Create Start Date
    $sd = new CB_Date();
    $sd->year = $search['start_term_year'];
    $sd->month = $search['start_term_month'];
    $sd->day = $search['start_term_day'];
    $search['start_date'] = new CB_DateEx($sd);

    //Create End Date
    $ed = new CB_Date();
    $ed->year = $search['end_term_year'];
    $ed->month = $search['end_term_month'];
    $ed->day = $search['end_term_day'];
    $search['end_date'] = new CB_DateEx($ed);
} else {
    $init = @ $G_INPUT['init'];         //Category ID

    //Get Parameter From $G_INPUT
    $category_id = @ $G_INPUT['cid'];         //Category ID
    $form_id = @ $G_INPUT['fid'];         //Form ID

    //Get Sort
    $sort = @ $G_INPUT['sort'];         //Sort

    //Search Text
    $text = cb_at($G_INPUT, 'text', '');       //Search Text
    $sensitive = @ $G_INPUT['sensitive'] ? $G_INPUT['sensitive']
        : 0;   //Case Sensitive

    //Search Status
    $status = [];
    $status[0] = @ $G_INPUT['status_0'] ? $G_INPUT['status_0']
        : $init; //Search Status 0
    $status[1] = @ $G_INPUT['status_1'] ? $G_INPUT['status_1']
        : $init; //Search Status 1
    $status[2] = @ $G_INPUT['status_2'] ? $G_INPUT['status_2']
        : $init; //Search Status 2
    $status[3] = @ $G_INPUT['status_3'] ? $G_INPUT['status_3']
        : $init; //Search Status 3
    $status[4] = @ $G_INPUT['status_4'] ? $G_INPUT['status_4']
        : $init; //Search Status 4

    //Search Item
    $item = [];
    $item[0] = @ $G_INPUT['item_0'] ? $G_INPUT['item_0']
        : $init; //Search Item 0
    $item[1] = @ $G_INPUT['item_1'] ? $G_INPUT['item_1']
        : $init; //Search Item 1
    $item[2] = @ $G_INPUT['item_2'] ? $G_INPUT['item_2']
        : $init; //Search Item 2
    $item[3] = @ $G_INPUT['item_3'] ? $G_INPUT['item_3']
        : $init; //Search Item 3

    //Create Search Term
    if ($init == 1) {
        //Create Time Stamp Ex
        require_once('fw/date.csp');
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $tsex = new CB_TimeStampEx($ts);

        //Create Start Date
        $start_date = $tsex->getDate();
        $start_date->moveMonths(-3);

        //Create End Date
        $end_date = $tsex->getDate();
    } else {
        //Create Start Date
        $sd = new CB_Date();
        $sd->year = $G_INPUT['start_term_year'];
        $sd->month = $G_INPUT['start_term_month'];
        $sd->day = $G_INPUT['start_term_day'];
        $start_date = new CB_DateEx($sd);

        //Create End Date
        $ed = new CB_Date();
        $ed->year = $G_INPUT['end_term_year'];
        $ed->month = $G_INPUT['end_term_month'];
        $ed->day = $G_INPUT['end_term_day'];
        $end_date = new CB_DateEx($ed);

        //Check Start and End Date
        if ($start_date->compare($end_date) > 0) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_INVALID_DATE_TERM);
        }
    }

    //Save Search Settings
    $search = [
        'category_id'      => $category_id,
        'form_id'          => $form_id,
        'sort'             => $sort,
        'text'             => $text,
        'sensitive'        => $sensitive,
        'status'           => $status,
        'item'             => $item,
        'start_term_year'  => $start_date->year,
        'start_term_month' => $start_date->month,
        'start_term_day'   => $start_date->day,
        'end_term_year'    => $end_date->year,
        'end_term_month'   => $end_date->month,
        'end_term_day'     => $end_date->day,
    ];
    $session->set('search', $search);

    //Set Start and End Date
    $search['start_date'] =& $start_date;
    $search['end_date'] =& $end_date;
}

//Get Form and Petition Controller Utility
require_once('workflow/controller_util.csp');
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();

//Create Parameter Translation for Form
$translation_map_form = [
    'fid'       => '_id',          //Form ID
    'type'      => 'type',         //Form Type
    'name'      => 'name',         //Form Name
    'icon_type' => 'icon_type',    //Form Icon Type
    'icon_id'   => 'icon_id',      //Form Icon ID
    'icon_url'  => 'icon_url',     //Form Icon URL
    'deleted'   => 'deleted',      //Form Deleted
    'active'    => 'active',       //Form Active
];

//Create Parameter Translation for Petition
$translation_map_petition = [
    'pid'             => '_id',              //Petition ID
    'petition_number' => 'petition_number',  //Petition Name
    'name'            => 'name',             //Petition Name
    'form_name'       => 'form_name',        //Petition Form Name
    'status'          => 'status',           //Petition Status
    'user'            => 'user',             //Petition User
    'user_name'       => 'user_name',        //Petition User Name
    'ctime'           => 'ctime',            //Petition Create Time
    'transactor_id'   => 'transactor',       //Petition Transactor
    'transactor_name' => 'transactor_name',  //Petition Transactor Name
    'icon_type'       => 'icon_type',        //Petition Icon Type
    'icon_id'         => 'icon_id',          //Petition Icon ID
    'icon_url'        => 'icon_url',         //Petition Icon URL
    'priority'        => 'priority',         //Petition Priority
];

//Get Form for View
$option = [
    'condition' => [
        '0' => [
            'column'   => 'col_type',
            'value'    => '0',
            'operator' => '='
        ]
    ]
];
$form_for_view = $form_util->getView($form_id, $translation_map_form,
    $category_id, $option);

//Get Petition List for View
$petition_list_for_view = [];
$n_navigation_for_view = [];
$option = [];

//Create Target Column List
$column_list = [];
if ($search['item'][0] == 1) {
    $column_list[] = 'p.col_petition_number';
}
if ($search['item'][1] == 1) {
    $column_list[] = 'p.col_name';
}
if ($search['item'][2] == 1) {
    $column_list[] = 'p.col_user_name';
    $column_list[] = 'pu.col_nickname';
}
if ($search['item'][3] == 1) {
    $column_list[] = 'd.col_text';
}

//Create Status Condition
$status_list = [];
for ($i = 0; $i < 5; $i++) {
    if ($search['status'][$i] == 1) {
        switch ($i) {
            case '0': //進行中
                //$status_list = array_merge($status_list, array(0,1,4));
                $status_list = array_merge($status_list,
                    [
                        GRN_WORKFLOW_STATUS_UNPROCESSING,
                        GRN_WORKFLOW_STATUS_IN_PROCESS,
                        GRN_WORKFLOW_STATUS_REMAND
                    ]);
                break;
            case '1': //承認
                //$status_list[] = 2;
                $status_list[] = GRN_WORKFLOW_STATUS_ACCEPTANCE;
                break;
            case '2': //却下
                //$status_list[] = 3;
                $status_list[] = GRN_WORKFLOW_STATUS_REJECTION;
                break;
            case '3': //取消
                //$status_list[] = 6;
                $status_list[] = GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL;
                break;
            case '4': //完了
                //$status_list[] = 7;
                $status_list[] = GRN_WORKFLOW_STATUS_FINISHED;
                break;
            default:
                break;
        }
    }
}

//Create Condition Option
$option['condition'] = [];
require_once('fw/string_util.csp');

//Get Login User Config
global $G_portal_login_user;
require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$config =& $manager->getUserConfig($G_workflow_login_user);

$petition_count = 0;
if (isset($search['text']) && $search['text'] != '') {
    //Create Text Condition
    if (count($column_list) !== 0) {
        //Parse Text
        if (cb_trim($search['text']) == '') {
            $search_text_list = [$search['text']];
        } else {
            $search_text_list = cb_parse_search_text($search['text']);
        }

        $operator = ($search['sensitive'] == 1) ? 'LIKE BINARY' : 'LIKE';
        foreach ($search_text_list as $search_text) {
            $option['condition'][] = [
                'column'   => $column_list,
                'value'    => $search_text,
                'operator' => $operator
            ];
        }
    }

    //Create Status Condition
    if (count($status_list) !== 0) {
        $option['condition'][] = [
            'column'   => 'p.col_status',
            'value'    => $status_list,
            'operator' => 'IN'
        ];
    } else {
        $option['condition'][] = [
            'column'   => 'p.col_status',
            'value'    => GRN_WORKFLOW_STATUS_TEMPORARY,
            'operator' => '<>'
        ];
        $option['condition'][] = [
            'column'   => 'p.col_status',
            'value'    => GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL,
            'operator' => '<>'
        ];
    }

    //Create item foreign_key Condition
    $option['condition'][] = [
        'column'   => 'd.col_foreign_key',
        'value'    => [
            'grn.workflow.string_single',
            'grn.workflow.string_multiple'
        ],
        'operator' => 'IN'
    ];

    //Create Start and End Date Condition
    $tmp_date = new CB_DateEx($search['end_date']);
    $tmp_date->moveDays(1);
    $option['condition'][] = [
        'column'   => 'p.col_ctime',
        'value'    => strtotime($search['start_date']->format()),
        'operator' => '>='
    ];
    $option['condition'][] = [
        'column'   => 'p.col_ctime',
        'value'    => strtotime($tmp_date->format()),
        'operator' => '<'
    ];

    if (is_null($sort)) {
        $sort = 'ctd';
    }

    //Create Sort Option
    $option['sort'] = [];
    switch ($sort) {
        case 'pnu':
            $option['sort'][] = [
                'column' => 'p.col_petition_number',
                'order'  => 'ASC'
            ];
            break;
        case 'pnd':
            $option['sort'][] = [
                'column' => 'p.col_petition_number',
                'order'  => 'DESC'
            ];
            break;
        case 'unu':
            $option['sort'][] = [
                'column' => 'p.col_user_name',
                'order'  => 'ASC'
            ];
            break;
        case 'und':
            $option['sort'][] = [
                'column' => 'p.col_user_name',
                'order'  => 'DESC'
            ];
            break;
        case 'ctu':
            $option['sort'][] = ['column' => 'p.col_ctime', 'order' => 'ASC'];
            break;
        case 'ctd':
            $option['sort'][] = ['column' => 'p.col_ctime', 'order' => 'DESC'];
            break;
        default:
            unset($option['sort']);
            break;
    }

    //Get Petition Total Count
    require_once('workflow/petition_logic_base.csp');
    $petition_logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();
    $petition_count = $petition_logic_base->getCountEx($form_id, $option);
}

//N-Navigation
require_once('workflow/utility.csp');
$params = ['cid' => $category_id, 'fid' => $form_id, 'sn' => 1];
$n_navigation_for_view = grn_make_n_navigation($petition_count, $params,
    $config->getListMax());

//Create List Option
$option['list'] = [];
$option['list']['offset'] = $n_navigation_for_view['offset'];
$option['list']['limit'] = $n_navigation_for_view['limit'];

if (isset($search['text']) && $search['text'] != '') {
    //Search Petition ID
    require_once('workflow/petition_logic_base.csp');
    $petition_logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();
    $petition_id_list = $petition_logic_base->getIdListEx($form_id, $option);
}

//Get Petition List for View
$users_id = [];
$option['condition'] = [];
$petition_list_for_view = [];
if (isset($petition_id_list) && count($petition_id_list) !== 0) {
    //Replase Option Order
    if (array_key_exists('sort', $option)) {
        foreach (array_keys($option['sort']) as $key) {
            if (strpos($option['sort'][$key]['column'], 'p.') === 0) {
                $option['sort'][$key]['column'] = str_replace('p.', '',
                    $option['sort'][$key]['column']);
            }
        }
    }

    $option['condition'][] = [
        'column'   => '_id',
        'value'    => $petition_id_list,
        'operator' => 'IN'
    ];
    unset($option['list']);
    $petition_list_for_view
        = $petition_util->getListView($translation_map_petition, $form_id,
        $option);

    //Get Last Accept Path Step
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    foreach (array_keys($petition_list_for_view) as $petition_id) {
        $petition_for_view =& $petition_list_for_view[$petition_id];
        $applicant =& $uum->getUser($petition_for_view['user']);
        if ($applicant) {
            $petition_for_view['user_valid'] = $applicant->get('valid');
            $users_id[] = $petition_for_view['user'];
        }

        if (array_key_exists('transactor_id', $petition_for_view)) {
            $transactor =& $uum->getUser($petition_for_view['transactor_id']);
            if ($transactor) {
                $petition_for_view['transactor_valid']
                    = $transactor->get('valid');
                $users_id[] = $petition_for_view['transactor_id'];
            }
        }

        //Get Last Path Step Information
        $path_steps = $controller_util->getPathInfo($petition_id);
        $path_step
            =& $controller_util->getLastAcceptancePathStep(current($path_steps));
        $transactor = $path_step['users'];
        $transactor_num = count($path_step['users']);
        if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
            $transactor = array_slice($transactor, 0,
                GRN_WORKFLOW_SHOW_MAX_USER_NUM);
        }
        $petition_list_for_view[$petition_id]['transactor'] = $transactor;
        $petition_list_for_view[$petition_id]['transactor_num']
            = $transactor_num;
    }
}

//Assign Display Infomation
//Assign Category ID
$t->assign('category_id', $category_id);
//Assign Form ID
$t->assign('form_id', $form_id);

//Assign Form
$t->assign('form', $form_for_view);
//Assign Petition List
$t->assign('petition_list', $petition_list_for_view);

//Assign Search
$t->assign('search', $search);
//Assign Sort
$t->assign('sort', $sort);
//Assign Navi
$t->assign('navi', $n_navigation_for_view);

//UI Parameters
$t->assign('name_width', $config->getNameWidth());//GRN_WORKFLOW_NAME_WIDTH
$t->assign('subject_width', GRN_WORKFLOW_SUBJECT_WIDTH);
$t->assign('show_user_num', GRN_WORKFLOW_SHOW_MAX_USER_NUM);

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/system/petition_list',
            'name' => grn_get_page_display_name('workflow/system/petition_list'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);
//GTM-529 tuning
require_once("grn/controller.csp");
$users_info
    = GRN_ControllerUtil::getUserInfoToShowUserName(array_values(array_unique(array_diff($users_id,
    [0]))), $uum->getLoginUser());
$t->assign('users_info', $users_info);
//end
//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

