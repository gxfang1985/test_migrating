<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Create Parameter Translation Map
    $translation_map = [
        'cid' => '_cid',
        'fid' => '_fid',
        'ids' => '_ids',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Create Delete Petition ID List
    $petition_id_list = [];
    require_once('workflow/petition_logic.csp');
    $column_list = ['_id'];
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
    $petition_list =& $petition_logic->getList($properties['_fid'],
        $column_list);
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil();
    require_once('workflow/notification.csp');
    $notification_logic = GRN_Workflow_Notification::getInstance();
    require_once('workflow/change_path_history.csp');
    $change_path_histories_logic
        = GRN_Workflow_ChangePathHistories::getInstance();
    $deleted_users_logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
    foreach ($properties['_ids'] as $petition_id) {
        if (in_array($petition_id, array_keys($petition_list))) {
            $petition_id_list[] = $petition_id;
        }

        // 通知を削除
        $path_steps = $controller_util->getPathInfo($petition_id);
        $path_step = current($path_steps);
        $uids = [];
        while ($path_step) {
            if ($path_step['col_activate'] && ! $path_step['col_skip']) {
                if ( ! array_key_exists('users', $path_step)) {
                    cb_throw_error();
                }
//                $uids += $path_step['uids'];
                $uids = array_merge($uids, $path_step['uids']);
            }
            $path_step =& $path_step['next'];
        }
        $columns = ['_id'];
        $change_path_histories
            = $change_path_histories_logic->getListByPetitionId($petition_id,
            $columns);
        if (is_array($change_path_histories)
            && 0 < count($change_path_histories)
        ) {
            $columns = [
                '_id',
                'col_user'
            ];
            $deleted_users
                = $deleted_users_logic->getList(array_keys($change_path_histories),
                null, $columns);
            foreach ($deleted_users as $deleted_user) {
                $uids[] = $deleted_user['col_user'];
            }
        }
        // Petition's user / petition's agent
        $petition =& $petition_logic->get($petition_id);
        if (array_search($petition['col_user'], $uids) === false) {
            $uids[] = $petition['col_user'];
        }
        if (strlen($petition['col_agent_user'] > 0)
            && array_search($petition['col_agent_user'], $uids) === false
        ) {
            $uids[] = $petition['col_agent_user'];
        }
        if (is_array($uids) && 0 < count($uids)) {
            $notification_logic->removeList($uids, $petition_id);
        }
    }

    //Delete Multi Petition
    $petition_logic->deleteMulti($petition_id_list);

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_delete_multi';

        $message_args['pids'] = $petition_id_list;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Redirect Next Page
    cb_redirect('workflow/system/petition_list', [
        'cid' => $properties['_cid'],
        'fid' => $properties['_fid'],
        'sf'  => 1
    ]);
}


