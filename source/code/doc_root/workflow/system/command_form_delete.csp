<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Create Parameter Translation Map
    $translation_map = [
        'fid' => '_id',
        'cid' => '_cid',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Check Category Exists
    require_once('workflow/resources.csp');
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $properties['_cid']) {
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($properties['_cid']);
    }

    //Delete Form
    require_once('workflow/form_logic.csp');
    $form_logic = GRN_Workflow_Form_Logic::getInstance();

    $form = $form_logic->get($properties['_id']);
    $form_logic->delete($properties['_id']);

    // 専用経路なら削除する
    if (0 < strlen($form['col_path']) && 0 != $form['col_path']) {
        require_once('workflow/path.csp');
        $path_logic = GRN_Workflow_Paths::getInstance();
        $columns = [
            '_id',
            'col_type'
        ];
        $path = $path_logic->get($form['col_path'], $columns);
        if (GRN_WORKFLOW_PRIVATE_PATH == $path['col_type']) {
            $path_logic->remove($form['col_path']);
        }
    }

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Form_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'form_delete';
        $message_args['fid'] = $properties['_id'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Redirect Next Page
    cb_redirect('workflow/system/form_list',
        ['cid' => $properties['_cid'], 'sf' => 1]);
}


