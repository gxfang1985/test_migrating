<?php

use grn\grn\ThumbnailUtil;

global $G_INPUT;

//Get Parameters
$category_id = @ $G_INPUT['cid'];
$form_id = @ $G_INPUT['fid'];
$petition_id = @ $G_INPUT['pid'];
$item_data_file_id = @ $G_INPUT['ifid'];
$thumbnail = @ $G_INPUT['thumbnail'];
$thumbnail_xsize = @ $G_INPUT['thumbnail_xsize'];
$thumbnail_ysize = @ $G_INPUT['thumbnail_ysize'];

//Set Defaullt X / Y Size, if No Setting
$thumbnail_xsize = ( ! $thumbnail_xsize) ? GRN_WORKFLOW_THUMBNAIL_WIDTH
    : $thumbnail_xsize;
$thumbnail_ysize = ( ! $thumbnail_ysize) ? GRN_WORKFLOW_THUMBNAIL_HEIGHT
    : $thumbnail_ysize;

global $G_workflow_login_user;
require_once('workflow/controller_util.csp');
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_item_data = [
    'idid'     => '_id',                  //Item Data ID
    'settings' => 'settings',             //ITem Data Settings
];

//Get Petition
require_once('workflow/petition_logic_base.csp');
$petition_logic = GRN_Workflow_Petition_Logic_Base::getInstance();
$petition = $petition_logic->getDirect($petition_id);

//Get Item Data File
require_once('workflow/itemdatafile_logic.csp');
$item_data_file_logic = GRN_Workflow_ItemDataFile_Logic::getInstance();
$item_data_file = $item_data_file_logic->getDirect($item_data_file_id);

//Get Item Data 
$item_data = $item_data_util->getView($item_data_file['col_item_data'],
    $translation_map_item_data, $petition_id);

//Get GRN_File Object
require_once('workflow/file.csp');
$file_manager = new GRN_Workflow_FileManager_Core();
$file_table =& $file_manager->getFileTable();
/** @var GRN_Workflow_File $file_object */
$file_object =& $file_table->getRow($item_data_file['col_file']);
if ( ! $file_object) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WORKFLOW_ITEMDATAFILE_NOT_FOUND);
}

//Download Current Version File
$body_object =& $file_object->getCurrentBody();

if ($thumbnail == 1) {
    $mime_type = $body_object->get('mime');    //Get MIME Type
    $util = new ThumbnailUtil();
    cb_prepare_download($body_object->get('name'), $mime_type, true);
    $result
        = $util->makeThumbnailByImageData($body_object->getContents(),
        (int)$thumbnail_xsize, (int)$thumbnail_ysize);
    if ($result === false) {
        $body_object->download(true);
    }
} else {
    $body_object->download(true);
}

cb_safe_exit();

