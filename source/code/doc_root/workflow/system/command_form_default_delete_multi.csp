<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    $category_id = null;
    if (array_key_exists('cid', $G_INPUT)) {
        $category_id = $G_INPUT['cid'];
    }
    $form_id = null;
    if (array_key_exists('fid', $G_INPUT)) {
        $form_id = $G_INPUT['fid'];
    }
    $path_step_id = null;
    if (array_key_exists('psid', $G_INPUT)) {
        $path_step_id = $G_INPUT['psid'];
    }
    $poid = null;
    if (array_key_exists('poid', $G_INPUT)) {
        $poid = $G_INPUT['poid'];
    }
    $mids = [];
    if (array_key_exists('mids', $G_INPUT)) {
        $mids = $G_INPUT['mids'];
    }

// TODO: 運用管理はここでアクセス権をチェック

    require_once('workflow/form_logic.csp');
    $logic = GRN_Workflow_Form_Logic::getInstance();
    $form = $logic->get($form_id, $category_id);
    if ( ! is_array($form) || 0 == count($form)) {
        // フォームがない
        cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
    }
    $path_id = $form['col_path'];

    require_once('workflow/path.csp');
    $logic = GRN_Workflow_Paths::getInstance();
    $columns = [
        '_id',
        'col_type'
    ];
    $path = $logic->get($path_id, $columns);
    if ( ! is_array($path) || 0 == count($path)) {
        // 経路がない
        cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH);
    }
    if (GRN_WORKFLOW_PRIVATE_PATH != $path['col_type']) {
        // 専用経路でない経路は変更できない
        cb_throw_error(E_GRN_WRKF_DENY_MODIFY_NOT_PUBLIC_PATH);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();

    $properties = [
        'col_modifier'             => $login->getOID(),
        'col_modifier_name'        => $login->get('display_name'),
        'col_modifier_foreign_key' => $login->get('foreign_key'),
        'col_mtime'                => time()
    ];
    $logic->modify($path_id, $properties);

    $logic = GRN_Workflow_PathSteps::getInstance();
    $columns = [
        '_id',
        'col_path'
    ];
    $path_step = $logic->get($path_id, $path_step_id, $columns);
    if ( ! is_array($path_step) || 0 == count($path_step)) {
        // 経路ステップがない
        cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP);
    }

    $uids = [];
    $gids = [];
    $srids = [];
//    $drids = array();
    $props = [];
    foreach ($mids as $member_id) {
        list($type, $id) = explode(':', $member_id);
        switch ($type) {
            case 'user':
                $uids[] = $id;
                break;
            case 'group':
                $gids[] = $id;
                break;
            case 'static_role':
                $srids[] = $id;
                break;
            /*
                    case 'dynamic_role':
                        $drids[] = $id;
                        break;
            */
            case 'skip':
                $props['col_skip'] = 0;
                break;
            case 'applicant':
                $props['col_applicant'] = 0;
                break;
            default:
                // 初期値が不正
                cb_throw_error(E_GRN_WRKF_INVALID_MEMBER_ID);
        }
    }

    if (0 < count($props)) {
        $logic = GRN_Workflow_PathSteps::getInstance();
        $logic->modify($path_step_id, $props);
    }
    if (0 < count($uids)) {
        $logic = GRN_Workflow_PathStepUsers::getInstance();
        $logic->removeSpecificList($path_step_id, $uids);
    }
    if (0 < count($gids)) {
        $logic = GRN_Workflow_PathStepGroups::getInstance();
        $logic->removeSpecificList($path_step_id, $gids);
    }
    if (0 < count($srids)) {
        $logic = GRN_Workflow_PathStepStaticRoles::getInstance();
        $logic->removeSpecificList($path_step_id, $srids);
    }
    /*
        if(0 < count($drids))
        {
            $logic = GRN_Workflow_PathStepDynamicRoles::getInstance();
            $logic->removeSpecificList($path_step_id, $drids);
        }
    */

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Path_Step_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'default_delete_multi';

        $applicant = null;
        if (array_key_exists('col_applicant', $props)) {
            $applicant = $props['col_applicant'] ? 0 : 1;
        }
        $skip = null;
        if (array_key_exists('col_skip', $props)) {
            $skip = $props['col_skip'] ? 0 : 1;
        }

        $inspection_applicant = $inspection->setApplicant($applicant);
        $inspection_skip = $inspection->setSkip($skip);

        $message_args['psid'] = $path_step_id;
        $message_args['uids'] = $uids;
        $message_args['gids'] = $gids;
        $message_args['srids'] = $srids;
        $message_args['skip'] = $inspection_skip;
        $message_args['applicant'] = $inspection_applicant;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    cb_redirect('workflow/system/form_default_list', [
        'poid' => $poid,
        'cid'  => $category_id,
        'fid'  => $form_id,
        'psid' => $path_step_id
    ]);
}


