<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Create Parameter Translation Map
    $translation_map = [
        'cid' => '_cid',
        'fid' => '_fid',
        'pid' => '_pid',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Delete Petition
    require_once('workflow/petition_logic.csp');
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();

    // 通知を削除
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil();
    $path_steps = $controller_util->getPathInfo($properties['_pid']);
    $path_step = current($path_steps);
    $uids = [];
    while ($path_step) {
        if ($path_step['col_activate'] && ! $path_step['col_skip']) {
            if ( ! array_key_exists('users', $path_step)) {
                cb_throw_error();
            }
//            $uids += $path_step['uids'];
            $uids = array_merge($uids, $path_step['uids']);
        }
        $path_step =& $path_step['next'];
    }
    require_once('workflow/change_path_history.csp');
    $change_path_histories_logic
        = GRN_Workflow_ChangePathHistories::getInstance();
    $columns = ['_id'];
    $change_path_histories
        = $change_path_histories_logic->getListByPetitionId($properties['_pid'],
        $columns);
    if (is_array($change_path_histories) && 0 < count($change_path_histories)) {
        $deleted_users_logic
            = GRN_Workflow_ChangePathDeletedUsers::getInstance();
        $columns = [
            '_id',
            'col_user'
        ];
        $deleted_users
            = $deleted_users_logic->getList(array_keys($change_path_histories),
            null, $columns);
        foreach ($deleted_users as $deleted_user) {
            $uids[] = $deleted_user['col_user'];
        }
    }

    // Petition's user / petition's agent
    $petition =& $petition_logic->get($properties['_pid']);
    if (array_search($petition['col_user'], $uids) === false) {
        $uids[] = $petition['col_user'];
    }
    if (strlen($petition['col_agent_user'] > 0)
        && array_search($petition['col_agent_user'], $uids) === false
    ) {
        $uids[] = $petition['col_agent_user'];
    }

    if (is_array($uids) && 0 < count($uids)) {
        require_once('workflow/notification.csp');
        $notification_logic = GRN_Workflow_Notification::getInstance();
        $notification_logic->removeList($uids, $properties['_pid']);
    }

    $petition_logic->delete($properties['_pid']);

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_delete';

        $message_args['pid'] = $properties['_pid'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Redirect Next Page
    cb_redirect('workflow/system/petition_list', [
        'cid' => $properties['_cid'],
        'fid' => $properties['_fid'],
        'sf'  => 1
    ]);
}


