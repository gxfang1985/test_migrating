<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {

    //unset($G_INPUT['add']);
    $node_id = @ $G_INPUT['nid'];
    if (0 == strlen($node_id)) {
        assert('FALSE');
    }

    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();

    $session_name = 'workflow.system.privilege_add';
    $session =& $session_manager->getSession($session_name);

    require_once('_access_util.csp');

    //Check Access ID
    $aid = $session->get('target_ids');
    if ( ! is_array($aid)) {
        unset($G_INPUT['func']);
        //Redirect Previous Page
        cb_redirect('workflow/system/privilege_list', $G_INPUT);
    }

    $text = null;
    if (array_key_exists('text', $G_INPUT)) {
        $text = $G_INPUT['text'];
    }

    // search
    $func = $G_INPUT['func'];
    if ($func == 'search') {
        $params = $G_INPUT;
        unset($params['func']);
//        $aid = @ $G_INPUT['aid'];
        unset($params['aid']);

        cb_redirect('workflow/system/privilege_list', $params);
    }

    //Get Authority
    require_once('workflow/manage_logic.csp');
    $category_manage_logic = GRN_Workflow_Category_Manage_Logic::getInstance();
    $base_authorities = [
        'manage' => @ $G_INPUT['authority_manage'] ? 1 : 0,
    ];
    $authorities = [
        'manage' => @ $G_INPUT['authority_manage'] ? 0 : 1,
    ];

    //Set Authority to Session
    //require_once('fw/session_manager.csp');
    //$session_manager = CB_SessionManager::getInstance();
    $session =& $session_manager->getSession('workflow.system.privilege_list');
    $session->set('authorities', $base_authorities);

    //Get UUN Instance
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');

    //Get Dynamic Roles
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    $object_id = @ $G_INPUT['nid'];

    //監査
    $inspection_add = [];

    $drids = [];
    $srids = [];
    $gids = [];
    $uids = [];

    //Add Manage
    foreach (array_keys($aid) as $item) {
        $ids = explode(':', $item);

        if (count($ids) < 2) {
            continue;
        }

        $id = $ids[1];
        switch ($ids[0]) {
            case 'user':
                //Check User
                if ( ! ($uum->getUser($id))) {
                    cb_throw_error(E_GRN_WRKF_MANAGE_INVALID_USER_ID);
                }

                //User Manage
                if ($manage
                    = $category_manage_logic->getManageByCategoryID($object_id,
                    $ids[1], $ids[0])
                ) {
                    if ($authorities['manage'] == 0) {
                        $category_access_logic->removeAccess($access['_id'],
                            $ids[1], GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER);
                    }
                } else {
                    $manage_id = $category_manage_logic->addManage($object_id,
                        $id, GRN_WORKFLOW_ACCESS_TARGET_TYPE_USER,
                        $authorities);
                    //監査
                    $uids[] = $id;
                }
                break;
            case 'group':

                //Check Group
                if ( ! ($uum->getGroup($id))) {
                    cb_throw_error(E_GRN_WRKF_MANAGE_INVALID_GROUP_ID);
                }

                //Group Manage
                if ($manage
                    = $category_manage_logic->getManageByCategoryID($object_id,
                    $ids[1], $ids[0])
                ) {
                    if ($authorities['manage'] == 0) {
                        $category_access_logic->removeAccess($access['_id'],
                            $ids[1], GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP);
                    }
                } else {
                    $manage_id = $category_manage_logic->addManage($object_id,
                        $id, GRN_WORKFLOW_ACCESS_TARGET_TYPE_GROUP,
                        $authorities);
                    //監査
                    $gids[] = $id;
                }
                break;
            case 'static_role':
                //Check Static Role
                if ( ! ($uum->getStaticRole($id))) {
                    cb_throw_error(E_GRN_WRKF_MANAGE_INVALID_ROLE_ID);
                }

                //Staticf Role Manage
                if ($manage
                    = $category_manage_logic->getManageByCategoryID($object_id,
                    $ids[1], $ids[0])
                ) {

                    if ($authorities['manage'] == 0) {
                        $category_manage_logic->removeManage($manage['_id'],
                            $ids[1],
                            GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE);
                    }
                } else {
                    $manage_id = $category_manage_logic->addManage($object_id,
                        $id, GRN_WORKFLOW_ACCESS_TARGET_TYPE_STATIC_ROLE,
                        $authorities);
                    //監査
                    $srids[] = $id;
                }
                break;
            case 'dynamic_role':
                //Check Dynamic Role
                if ( ! (array_key_exists($id, $dynamic_roles))) {
                    cb_throw_error(E_GRN_WRKF_MANAGE_INVALID_ROLE_ID);
                }

                //Dynamic Role Manage
                if ($manage
                    = $category_manage_logic->getManageByCategoryID($object_id,
                    $ids[1], $ids[0])
                ) {
                    if ($authorities['manage'] == 0) {
                        $category_access_logic->removeAccess($access['_id'],
                            $ids[1],
                            GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE);
                    }
                } else {
                    $manage_id = $category_manage_logic->addManage($object_id,
                        $id, GRN_WORKFLOW_ACCESS_TARGET_TYPE_DYNAMIC_ROLE,
                        $authorities);
                    //監査
                    $drids[] = $id;
                }
                break;
        }
    }

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Category_Manage_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'privilege_add';

        $message_args['uids'] = $uids;
        $message_args['gids'] = $gids;
        $message_args['srids'] = $srids;
        $message_args['drids'] = $drids;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    $params = $G_INPUT;
    unset($params['aid']);
    unset($params['func']);
    unset($params['authority_manage']);

    cb_redirect('workflow/system/privilege_list', $params);
}


