<?php

use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

//Get Parameter
$category_id = @ $G_INPUT['cid'];    //Category ID
$form_id = @ $G_INPUT['fid'];    //Form ID
$sf = @ $G_INPUT['sf'];     //Session Hold Flag
$simple = @ $G_INPUT['simple'];

//Get Session Key
require_once('workflow/controller_util.csp');
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);
$t->assign('session_suffix', '');

// 未分類でないカテゴリのアクセス権をチェック
if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
}

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_send_form = $session_manager->getSession('workflow/send_form'
                                                  . $tmp_key);
$session_send_path = $session_manager->getSession('workflow/send_path'
                                                  . $tmp_key);

//Check Session Hold Flag
if ($sf != 1) {
//-------------- Clear Session Section --------------//

    //Clear Send Form Sesson (for Design)
    $session_send_form->unset_by('form');
    $session_send_form->unset_by('item_list');
    $session_send_form->unset_by('path');
    $session_send_form->unset_by('path_step_list');
    $session_send_form->unset_by('deafult_path_step_list');
    $session_send_form->unset_by('path_skip');
    $session_send_form->unset_by('change_access_list');
    $session_send_form->unset_by('properties');

    //Clear Send Path (for Data)
    $session_send_path->unset_by('send_path_data_list');
    $session_send_form->unset_by('upload_ticket');

//-------------- Get Form / Item Section --------------//

    //Get Form and Item Controller Utility
    $form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
    $item_util = GRN_Workflow_Item_Controller_Utility::getInstance();

    //Create Parameter Translation Map
    $translation_map_form = [
        //Form Information
        'fid'                     => '_id',              //Form ID
        'name'                    => 'name',             //Form Name
        'foreign_key'             => 'foreign_key',      //Form Foreign key
        'memo'                    => 'memo',             //Form Memo
        'admin_memo'              => 'admin_memo',       //Form Admin Memo
        'type'                    => 'type',             //Form Type
        'deleted'                 => 'deleted',          //Form Deleted
        'icon_type'               => 'icon_type',        //Form Icon Type
        'icon_id'                 => 'icon_id',          //Form Icon ID
        'icon_url'                => 'icon_url',         //Form Icon URL
        'category'                => 'category',         //Form Category
        'active'                  => 'active',           //Form Active
        'serial_type'             => 'serial_type',      //Form Serial Type
        'serial_format'           => 'serial_format',    //Form Serial Format
        'serial_number'           => 'serial_number',    //Form Serial Number
        'path'                    => 'path',             //Form Path
        'list_index'              => 'serial_number',    //Form List Index
        'auto_export'             => 'auto_export',
        'export_folder'           => 'export_folder',
        'login_name_export'       => 'login_name_export',
        'export_top_line'         => 'export_top_line',
        'is_customization_active' => 'is_customization_active',
    ];

    //Create Parameter Translation Map
    $translation_map_item = [
        'iid'                => '_id',
        //Item ID
        'display_name'       => 'display_name',
        //Item Display Name
        'code'               => 'code',
        // Item code
        'type'               => 'type',
        //Item Type
        'option_string'      => 'option_string',
        //Item Option String
        'option_string_type' => 'option_string_type',
        //Item Option String Type
        'description'        => 'description',
        //Item Description
        'description_type'   => 'description_type',
        //Item Description Type
        'description_editor' => 'description_editor',
        //Item Description Editor
        'foreign_key'        => 'foreign_key',
        //Item foreign_key
        'attach_file'        => 'attach_file',
        //Item Attach File
        'attach_file_view'   => 'attach_file_view',
        //Item Attach File View
        'form'               => 'form',
        //Item Form
        'settings'           => 'settings',
        //Item Settings
        'br'                 => 'br',
        //Item <br> Flag
        'separator'          => 'separator',
        //Item Separator
        'required'           => 'required',
        //Item Reuired Flag
        'list_index'         => 'list_index',
        //Item List Index
        'display_type'       => 'display_type',
        //Display_type
        'export_data'        => 'export_data',
        //Export Data
    ];

    //Get Form for view
    $option = [
        'condition' => [
            '0' => ['column' => 'col_type', 'value' => '0', 'operator' => '='],
            '1' => [
                'column'   => 'col_active',
                'value'    => '1',
                'operator' => '='
            ],
            '2' => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ],
        ]
    ];
    $form_for_view = $form_util->getView($form_id, $translation_map_form,
        $category_id, $option);

    //Get Item List for view
    $item_list_for_view = $item_util->getListView($translation_map_item,
        $form_id);

    //Get Path Step List
    require_once('workflow/path.csp');
    $path_columns = [
        '_id',
        'col_description',
        'col_richeditor',
        'col_icon'
    ];
    $path_logic = GRN_Workflow_Paths::getInstance();
    $path_for_view = $path_logic->get($form_for_view['path'], $path_columns);

    $path_step_columns = [
        '_id',
        GRN_WORKFLOW_COLUMN_PATH,
        GRN_WORKFLOW_COLUMN_TYPE,
        GRN_WORKFLOW_COLUMN_ACCEPTANCE_TYPE,
        GRN_WORKFLOW_COLUMN_ROLE,
        GRN_WORKFLOW_COLUMN_SKIP,
        GRN_WORKFLOW_COLUMN_APPLICANT,
        GRN_WORKFLOW_COLUMN_DENY_CHANGE_PATH,
        GRN_WORKFLOW_COLUMN_CHANGE_PATH,
        GRN_WORKFLOW_COLUMN_LIST_INDEX,
    ];
    $path_step_logic = GRN_Workflow_PathSteps::getInstance();
    $path_step_list_for_view = $path_step_logic->getList($form_for_view['path'],
        null, null, $path_step_columns);

    //Get Default Path Step List(with Initial User)
    global $G_workflow_login_user;
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    $default_path_step_list_for_view
        = $controller_util->getDefaultPathInfo($G_workflow_login_user->getOID(),
        $form_for_view['path'], array_keys($path_step_list_for_view));

//-------------- Get Path Condition List Section --------------//

    //Get Path Condition List
    $columns = [
        'tab_grn_workflow_pathskip'          => [
            '_id'      => 'col_path_skip',
            'col_form' => 'col_form',
        ],
        'tab_grn_workflow_item'              => [
            '_id'             => 'col_item',
            'col_foreign_key' => 'col_foreign_key',
        ],
        'tab_grn_workflow_pathcondition'     => [
            '_id'          => 'col_path_condition',
            'col_name'     => 'col_name',
            'col_operator' => 'col_operator',
            'col_number'   => 'col_number',
            'col_option'   => 'col_option',
        ],
        'tab_grn_workflow_pathconditionstep' => [
            '_id'           => 'col_path_condition_step',
            'col_path_step' => 'col_path_step',
        ],
    ];
    require_once('workflow/path_skip.csp');
    $path_skip_logic = GRN_Workflow_PathSkips::getInstance();
    $path_skip_for_view = $path_skip_logic->getByFormIdEx($form_id, $columns);

//-------------- Get Change Access List Section --------------//

    //Get Change Access Condition List
    $change_access_list_for_view = [];
    $columns = [
        'col_item',
        'col_path_step',
        'col_view',
        'col_edit'
    ];
    require_once('workflow/change_access.csp');
    $change_access_logic = GRN_Workflow_ChangeAccess::getInstance();
    foreach (array_keys($item_list_for_view) as $item_id) {
        if ($item_list_for_view[$item_id]['foreign_key']
            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
            || $item_list_for_view[$item_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
            || $item_list_for_view[$item_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_DATE
            || $item_list_for_view[$item_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_FILE
            || $item_list_for_view[$item_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
        ) {
            $change_access_for_view
                = $change_access_logic->getListByItemId($item_id, $columns);
            if (count($change_access_for_view) !== 0) {
                $change_access_list_for_view[$item_id]
                    = $change_access_for_view;
            }
        }
    }


//-------------- Properties Section --------------//
    $properties_for_view = [];

    //Priority
    $properties_for_view['priority'] = 0;


    //Save Send Form Session (for Design)
    $session_send_form->set('form', $form_for_view);
    $session_send_form->set('item_list', $item_list_for_view);
    $session_send_form->set('path', $path_for_view);
    $session_send_form->set('path_step_list', $path_step_list_for_view);
    $session_send_form->set('default_path_step_list',
        $default_path_step_list_for_view);
    $session_send_form->set('path_skip', $path_skip_for_view);
    $session_send_form->set('change_access_list', $change_access_list_for_view);
    $session_send_form->set('properties', $properties_for_view);

    //generate upload ticket
    require_once('grn/upload.csp');
    $upload_ticket = GRN_UploadTicket::create($G_workflow_login_user->getOID());
    $session_send_form->set('upload_ticket', $upload_ticket);

    require_once('grn/file.csp');
    $config = GRN_FileManagerConfig::getInstance();
    $max_filesize = $config->getMaxFileSize();
    $session_send_form->set('max_filesize', $max_filesize);
} else {
    //Load Send Form Sesson (for Design)
    $form_for_view = $session_send_form->get('form');
    if ( ! is_array($form_for_view) || 0 == count($form_for_view)) {
        // フォームがない
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_DENY_REQUEST_DATA);
    }
    $item_list_for_view = $session_send_form->get('item_list');
    $path_for_view = $session_send_form->get('path');
    $path_step_list_for_view
        = $session_send_form->get('path_step_list');
    $default_path_step_list_for_view
        = $session_send_form->get('default_path_step_list');
    $path_skip_for_view = $session_send_form->get('path_skip');
    $change_access_list_for_view
        = $session_send_form->get('change_access_list');
    $properties_for_view = $session_send_form->get('properties');

    $upload_ticket = $session_send_form->get('upload_ticket');
    $max_filesize = $session_send_form->get('max_filesize');
}

//Create Item Layout
$current = null;
$previous = null;
$item_layout_for_view = [];
foreach (array_keys($item_list_for_view) as $item_id) {
    //Copy Item
    $item_layout_for_view[$item_id] = $item_list_for_view[$item_id];

    //Check Calc Numeric Not Display Parameter
    if ($item_layout_for_view[$item_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_layout_for_view[$item_id]['settings']['not_display'] == 1) {
            unset($item_layout_for_view[$item_id]);
            continue;
        }
        //JS API needs to return empty string when field value is hidden (displayed as "Automated calculation")
        $item_layout_for_view[$item_id]['number'] = '';
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_layout_for_view[$item_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_layout_for_view[$item_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_layout_for_view[$item_id];

    //Check Current or Sub Item
    if ($item_layout_for_view[$item_id]['br'] == 1) {
        $current =& $item_layout_for_view[$item_id];
        $current['sub_item_list'] = [];
        $current['total_required'] = $current['required'];
    } else {
        $current['sub_item_list'][$item_id] = $item_layout_for_view[$item_id];
        $current['sub_item_count'] = count($current['sub_item_list']);
        if ($item_layout_for_view[$item_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_layout_for_view[$item_id]);
    }
}

//Assign Display Infomation
//Assign Category ID
$t->assign('category_id', $category_id);
//Assign Form ID
$t->assign('form_id', $form_id);

//Assign Form
$t->assign('form', $form_for_view);
//Assign Item List
$t->assign('item_list', $item_layout_for_view);

$t->assign('simple', $simple);

$t->assign('properties', $properties_for_view);

$t->assign('upload_ticket', $upload_ticket);
$t->assign('max_filesize', $max_filesize);

$form_customization_status
    = CustomizationUtil::getFormCustomizationStatus($form_for_view['fid']);
$apply_customization
    = CustomizationUtil::applyCustomization($form_customization_status, $t);
if ($apply_customization) {
    $customization_petition
        = DataConverterForJsPetitionData::covertDataPetitionInformation(
        null, $item_layout_for_view, null, $properties_for_view['priority']);
    $customization_data
        = CustomizationUtil::getCreateCustomizationData($customization_petition);

    // Assign customization information
    grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
        new grn\grn\customization\workflow\WorkflowJsApiLoader($form_for_view['fid']),
        new grn\grn\customization\workflow\RequestCreateShowJsApiEvent(["data" => $customization_data])
    );
}

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index')
        ],
        [
            'page' => 'workflow/send',
            'name' => grn_get_page_display_name('workflow/send'),
            'cid'  => $category_id
        ],
        ['page' => '', 'name' => $page_title]
    ]
);


