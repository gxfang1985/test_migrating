<?php

use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

//Get Parameter
$folder_id = @ $G_INPUT['fid'];    //Folder ID
$petition_id = @ $G_INPUT['pid'];    //Form ID
$sf = @ $G_INPUT['sf'];     //Session Hold Flag
$mode = @ $G_INPUT['mode'];   //Mode Parameter
$simple = @ $G_INPUT['simple'];
$cpsf = @ $G_INPUT['cpsf'];
$handle = @ $G_INPUT['handle'];

//Get Session Key
require_once('workflow/controller_util.csp');
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);
$t->assign('session_suffix', 'remand_proxy');

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_send_form
    =& $session_manager->getSession('workflow/send_form_remand_proxy'
                                    . $tmp_key);
$session_send_path
    =& $session_manager->getSession('workflow/send_path_remand_proxy'
                                    . $tmp_key);

//Check Session Hold Flag
if ($sf != 1) {
//-------------- Clear Session Section --------------//

    //Clear Send Form Sesson (for Design)
    $session_send_form->unset_by('petition');
    $session_send_form->unset_by('item_list');
    $session_send_form->unset_by('path');
    $session_send_form->unset_by('path_step_data_list');
    $session_send_form->unset_by('path_skip_data');
    $session_send_form->unset_by('change_access_data_list');
    $session_send_form->unset_by('properties');

    $session_send_form->unset_by('upload_ticket');
    $session_send_form->unset_by('max_filesize');

    //Clear Send Path (for Data)
    $session_send_path->unset_by('send_path_data_list');

//-------------- Get Petition / Item Data / Item Data File Section --------------//

    //Get Petition and Item Data and Item Data File Controller Utility
    $petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $item_data_util
        = GRN_Workflow_ItemData_Controller_Utility::getInstance();
    $item_data_file_util
        = GRN_Workflow_ItemDataFile_Controller_Utility::getInstance();

    //Create Parameter Translation Map for Petition
    $translation_map_petition = [
        'fid'                    => '_id',
        //Petition ID
        'name'                   => 'name',
        //Petition Name
        'petition_number'        => 'petition_number',
        //Petition Name
        'user'                   => 'user',
        //Petition User
        'user_name'              => 'user_name',
        //Petition User Name
        'user_foreign_key'       => 'user_foreign_key',
        //Petition User Foreign Key
        'status'                 => 'status',
        //Petition Status
        'form'                   => 'form',
        //Form ID
        'form_name'              => 'form_name',
        //Form Name
        'form_foreign_key'       => 'form_foreign_key',
        //Form Foreign Key
        'icon_type'              => 'icon_type',
        //Petition Icon Type
        'icon_id'                => 'icon_id',
        //Petition Icon ID
        'icon_url'               => 'icon_url',
        //Petition Icon URL
        'serial_type'            => 'serial_type',
        //Petition Serial Type
        'serial_format'          => 'serial_format',
        //Petition Serial Format
        'serial_number'          => 'serial_number',
        //Petition Serial Number
        'comment'                => 'comment',
        //Petition Cancel / Remand Comment
        'ptime'                  => 'ptime',
        //Petition Cancel / Remand Time
        'list_index'             => 'list_index',
        //Petition List Index
        'auto_export'            => 'auto_export',
        'export_folder'          => 'export_folder',
        'login_name_export'      => 'login_name_export',
        'export_top_line'        => 'export_top_line',
        'priority'               => 'priority',
        //Priority
        'agent_user'             => 'agent_user',
        //Petition Agent User
        'agent_user_name'        => 'agent_user_name',
        //Petition Agent User Name
        'agent_user_foreign_key' => 'agent_user_foreign_key',
        //Petition Agent User Foreign Key
    ];

    //Create Parameter Translation Map for Item Data
    $translation_map_item_data = [
        'iid'                => '_id',
        //Item Data ID
        'petition'           => 'petition',
        //Petition ID
        'item'               => 'item',
        //Item ID
        'number'             => 'number',
        //Item Data Number
        'text'               => 'text',
        //Item Data Text
        'display_name'       => 'display_name',
        //Item Data Display Name
        'code'               => 'code',
        'type'               => 'type',
        //Item Data Type
        'option_string'      => 'option_string',
        //Item Data Option String
        'option_string_type' => 'option_string_type',
        //Item Data Option String Type
        'description'        => 'description',
        //Item Data Description
        'description_type'   => 'description_type',
        //Item Data Description Type
        'description_editor' => 'description_editor',
        //Item Data Description Editor
        'foreign_key'        => 'foreign_key',
        //Item Data Foreign Key
        'attach_file'        => 'attach_file',
        //Item Data Attach File
        'attach_file_view'   => 'attach_file_view',
        //Item Data Attach File View
        'settings'           => 'settings',
        //Item Data Settings
        'br'                 => 'br',
        //Item Data br
        'separator'          => 'separator',
        //Item Separator
        'required'           => 'required',
        //Item Data Required
        'list_index'         => 'list_index',
        //Item Data List Index
        'access_change'      => 'access_change',
        //Item Data Access Change
        'export_data'        => 'export_data',
        //Export Data
    ];

    //Create Parameter Translation Map for Item Data File
    $translation_map_item_data_file = [
        'ifid'      => '_id',                  //Item Data File ID
        'item_data' => 'item_data',            //Item Data ID
        'file'      => 'file',                 //GRN_File ID
    ];

    //Get Petition
    $petition_for_view = $petition_util->getView($petition_id,
        $translation_map_petition);

    //Get Item Data List
    $item_data_list_for_view
        = $item_data_util->getListView($translation_map_item_data,
        $petition_id);

    //Get Item Data File List
    $item_data_file_list = [];
    foreach (array_keys($item_data_list_for_view) as $item_data_id) {
        if ($item_data_list_for_view[$item_data_id]['foreign_key']
            == 'grn.workflow.file'
        ) {
            $item_data_file_list[$item_data_id]
                = $item_data_file_util->getListView($translation_map_item_data_file,
                $item_data_id);
        } else {
            $item_data_file_list[$item_data_id] = [];
        }
    }

//-------------- Marge Item Data and Item Data Section --------------//

    //Get GRN_File Table
    require_once('workflow/file.csp');
    $file_manager = new GRN_Workflow_FileManager_Core();
    $file_table =& $file_manager->getFileTable();

    //Item Data File to Item
    foreach (array_keys($item_data_list_for_view) as $item_data_id) {
        $item_data =& $item_data_list_for_view[$item_data_id];
        if (count($item_data_file_list[$item_data_id]) !== 0) {
            $i = 0;
            foreach (
                array_keys($item_data_file_list[$item_data_id]) as
                $item_data_file_id
            ) {
                $item_key = sprintf('item_%s_file_%s', $item_data['iid'], $i);

                //Get GRN_File Object
                $file_object
                    =& $file_table->getRow($item_data_file_list[$item_data_id][$item_data_file_id]['file']);
                if ($file_object) {
                    //Add $_FILES Information
                    $_FILES[$item_key] =& $file_object->getCurrentBody();
                }
                $i++;
            }
        }
    }

    //Copy Files to  Session File
    $all_attached_file_list
        =& grn_workflow_get_attached_file_info('workflow/command_send_form_remand_proxy');
    foreach (array_keys($all_attached_file_list) as $key) {
        $keys = explode('_', $key);
        $item_data_list_for_view[$keys[1]]['files']
            = $all_attached_file_list[$key];
    }

    $path_for_view = [];

//-------------- Get Path Step Data List Section --------------//

    //Get Path Step Data List
    $controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
    $path_step_data_list_for_view = $controller_util->getPathInfo($petition_id);

//-------------- Set Skip to Path Step Data List --------------//

    //Marge Path Step Data List to  Default Path Step List
    foreach (array_keys($path_step_data_list_for_view) as $path_step_data_id) {
        $path_step_data =& $path_step_data_list_for_view[$path_step_data_id];
        if (count($path_step_data['users']) === 0) {
            $path_step_user['_id'] = 0;
            $path_step_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                'skip');
            $path_step_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                'skip');
            $path_step_data['users'][] = $path_step_user;
            $path_step_data['uids'][] = 0;
        }
    }

//-------------- Get Path Condition Data List Section --------------//

    //Get Path Condition Data List
    $columns = [
        'tab_grn_workflow_pathskipdata'          => [
            '_id'           => 'col_path_skip_data',
            'col_petition'  => 'col_petition',
            'col_path_skip' => 'col_path_skip',
        ],
        'tab_grn_workflow_itemdata'              => [
            '_id'             => 'col_item_data',
            'col_foreign_key' => 'col_foreign_key',
        ],
        'tab_grn_workflow_pathconditiondata'     => [
            '_id'                => 'col_path_condition_data',
            'col_name'           => 'col_name',
            'col_operator'       => 'col_operator',
            'col_number'         => 'col_number',
            'col_option'         => 'col_option',
            'col_path_condition' => 'col_path_condition'
        ],
        'tab_grn_workflow_pathconditionstepdata' => [
            '_id'                     => 'col_path_condition_step_data',
            'col_path_step_data'      => 'col_path_step_data',
            'col_path_condition_step' => 'col_path_condition_step',
        ],
    ];
    require_once('workflow/path_skip_data.csp');
    $path_skip_data_logic = GRN_Workflow_PathSkipDatas::getInstance();
    $path_skip_data_for_view
        = $path_skip_data_logic->getByPetitionIdEx($petition_id,
        $columns);

//-------------- Get Change Access List Section --------------//

    //Get Change Access Data List
    $change_access_data_list_for_view = [];
    $columns = [
        'col_access_change_form',
        'col_item_data',
        'col_path_step_data',
        'col_view',
        'col_edit'
    ];
    require_once('workflow/change_access_data.csp');
    $change_access_data_logic = GRN_Workflow_ChangeAccessData::getInstance();
    foreach (array_keys($item_data_list_for_view) as $item_data_id) {
        if ($item_data_list_for_view[$item_data_id]['foreign_key']
            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
            || $item_data_list_for_view[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
            || $item_data_list_for_view[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_DATE
            || $item_data_list_for_view[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_FILE
            || $item_data_list_for_view[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
        ) {
            $change_access_data_for_view
                = $change_access_data_logic->getListByItemDataId($item_data_id,
                $columns);
            if (count($change_access_data_for_view) !== 0) {
                $change_access_data_list_for_view[$item_data_id]
                    = $change_access_data_for_view;
            }
        }
    }
//-------------- Properties Section --------------//
    $properties_for_view = [];
    //Priority
    $properties_for_view['priority'] = $petition_for_view['priority'];

    //Save Send Form Session (for Design)
    $session_send_form->set('petition', $petition_for_view);
    $session_send_form->set('item_list', $item_data_list_for_view);
    $session_send_form->set('path', $path_for_view);
    $session_send_form->set('path_step_data_list',
        $path_step_data_list_for_view);
    $session_send_form->set('path_skip_data', $path_skip_data_for_view);
    $session_send_form->set('change_access_data_list',
        $change_access_data_list_for_view);
    $session_send_form->set('properties', $properties_for_view);

    //generate upload ticket
    require_once('grn/upload.csp');
    $upload_ticket = GRN_UploadTicket::create($G_workflow_login_user->getOID());
    $session_send_form->set('upload_ticket', $upload_ticket);

    require_once('grn/file.csp');
    $config = GRN_FileManagerConfig::getInstance();
    $max_filesize = $config->getMaxFileSize();
    $session_send_form->set('max_filesize', $max_filesize);
} else {
    //Load Send Form Sesson (for Design)
    $petition_for_view = $session_send_form->get('petition');
    if ( ! is_array($petition_for_view) || 0 == count($petition_for_view)) {
        // フォームがない
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_DENY_REQUEST_DATA);
    }
    $item_data_list_for_view = $session_send_form->get('item_list');
    $path_for_view = $session_send_form->get('path');
    $path_step_data_list_for_view
        = $session_send_form->get('path_step_data_list');
    $path_skip_data_for_view
        = $session_send_form->get('path_skip_data');
    $change_access_data_list_for_view
        = $session_send_form->get('change_access_data_list');
    $properties_for_view = $session_send_form->get('properties');

    $upload_ticket = $session_send_form->get('upload_ticket');
    $max_filesize = $session_send_form->get('max_filesize');
}

//Create Item Layout
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
$current = null;
$previous = null;
$item_data_layout_for_view = [];
foreach (array_keys($item_data_list_for_view) as $item_data_id) {
    //Copy Item
    $item_data_layout_for_view[$item_data_id]
        = $item_data_list_for_view[$item_data_id];

    //Check Calc Numeric Not Display Parameter
    if ($item_data_layout_for_view[$item_data_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_data_layout_for_view[$item_data_id]['settings']['not_display']
            == 1
        ) {
            unset($item_data_layout_for_view[$item_data_id]);
            continue;
        }
        //JS API needs to return empty string when field value is hidden (displayed as "Automated calculation")
        $item_data_layout_for_view[$item_data_id]['number'] = '';
    }

    // Delete Item's Attached Files if it could be edited during acceptances.
    if ($item_data_layout_for_view[$item_data_id]['foreign_key']
        == 'grn.workflow.file'
    ) {
        if ($item_data_layout_for_view[$item_data_id]['attach_file_view']
            != 1
        ) {
            if (array_key_exists('files',
                $item_data_layout_for_view[$item_data_id])
            ) {
                unset($item_data_layout_for_view[$item_data_id]['files']);
            }
        }
    }
    if ($item_data_layout_for_view[$item_data_id]['foreign_key']
        == 'grn.workflow.string_single'
        || $item_data_layout_for_view[$item_data_id]['foreign_key']
           == 'grn.workflow.string_multiple'
        || $item_data_layout_for_view[$item_data_id]['foreign_key']
           == 'grn.workflow.date'
    ) {
        if ($item_data_layout_for_view[$item_data_id]['attach_file_view']
            != 1
        ) {
            if (array_key_exists('text',
                $item_data_layout_for_view[$item_data_id])
            ) {
                unset($item_data_layout_for_view[$item_data_id]['text']);
            }
        }
    }

    if ($item_data_layout_for_view[$item_data_id]['foreign_key']
        == 'grn.workflow.numeric'
        && $item_data_layout_for_view[$item_data_id]['attach_file_view'] != 1
        && array_key_exists('number', $item_data_layout_for_view[$item_data_id])
    ) {
        unset($item_data_layout_for_view[$item_data_id]['number']);
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_data_layout_for_view[$item_data_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_data_layout_for_view[$item_data_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_data_layout_for_view[$item_data_id];

    //Check Current or Sub Item
    if ($item_data_layout_for_view[$item_data_id]['br'] == 1) {
        $current =& $item_data_layout_for_view[$item_data_id];
        $current['sub_item_data_list'] = [];
        $current['total_required'] = $current['required'];
    } else {
        $current['sub_item_data_list'][$item_data_id]
            = $item_data_layout_for_view[$item_data_id];
        $current['sub_item_data_count'] = count($current['sub_item_data_list']);
        if ($item_data_layout_for_view[$item_data_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_data_layout_for_view[$item_data_id]);
    }
}

//Check Petition Owner
global $G_workflow_login_user;
if ($petition_for_view['user'] != $G_workflow_login_user->getOID()
    && $petition_for_view['agent_user'] != $G_workflow_login_user->getOID()
) {
    //Petition Not Found
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
}

//Assign Display Infomation
//Assign Folder ID
$t->assign('folder_id', $folder_id);
//Assign Petition ID
$t->assign('petition_id', $petition_id);

//Assign Form
$t->assign('petition', $petition_for_view);
//Assign Item List
$t->assign('item_data_list', $item_data_layout_for_view);

//Assign Mode
$t->assign('mode', $mode);
$t->assign('simple', $simple);
$t->assign('cpsf', $cpsf);
$t->assign('handle', $handle);
$t->assign('properties', $properties_for_view);

$t->assign('upload_ticket', $upload_ticket);
$t->assign('max_filesize', $max_filesize);

$form_customization_status
    = CustomizationUtil::getFormCustomizationStatus($petition_for_view['form']);
$apply_customization
    = CustomizationUtil::applyCustomization($form_customization_status, $t);
if ($apply_customization) {
    $customization_petition
        = DataConverterForJsPetitionData::covertDataPetitionInformation(
        null, $item_data_layout_for_view, null,
        $properties_for_view['priority']);
    $customization_data
        = CustomizationUtil::getCreateCustomizationData($customization_petition,
        ['reuse' => true]);

    // Assign customization information
    grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
        new grn\grn\customization\workflow\WorkflowJsApiLoader($petition_for_view['form'],
            $petition_id, $folder_id),
        new grn\grn\customization\workflow\RequestCreateShowJsApiEvent(["data" => $customization_data])
    );
}

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
if ($cpsf) {
    $t->assign('site_position', [
            [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id
            ],
            [
                'page'   => 'workflow/handle',
                'name'   => grn_get_page_display_name('workflow/handle'),
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'simple' => $simple,
                'cpsf'   => true
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
} else {
    $t->assign('site_position', [
            [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id
            ],
            [
                'page' => 'workflow/handle',
                'name' => grn_get_page_display_name('workflow/handle'),
                'fid'  => $folder_id,
                'pid'  => $petition_id
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
}


