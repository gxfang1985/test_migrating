<?php

/**
 * 制限事項
 * ・申請の進行状況は未処理、進行中、承認でない
 * ・ログインユーザーはフォルダの所有者でない
 * ・フォルダにフォルダリレーションがない
 * ・フォルダは送信一覧（ログインユーザーは申請者）、未処理一覧
 *   （ログインユーザーは経路変更が許可された経路ステップの処理者）
 *   でない
 */

use grn\grn\MemberLogic;

$tmp_key = grn_get_temporary_key(null);
$t->assign('tmp_key', $tmp_key);

require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form_name'              => 'form_name',
    //Petition Form Name
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'user'                   => 'user',
    'user_name'              => 'user_name',
    'user_foreign_key'       => 'user_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
    'agent_user'             => 'agent_user',
];
$petition = $petition_util->getView($petition_id,
    $translation_map_petition);
if ( ! is_array($petition) || 0 == count($petition)) {
    // 申請がない
    cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
}
if (GRN_WORKFLOW_STATUS_UNPROCESSING != $petition['status']
    && GRN_WORKFLOW_STATUS_IN_PROCESS != $petition['status']
    && GRN_WORKFLOW_STATUS_ACCEPTANCE != $petition['status']
    && GRN_WORKFLOW_STATUS_REMAND != $petition['status']
) {
    // 申請の進行状況は未処理、進行中、承認、差し戻しでない
    cb_throw_error(E_GRN_WRKF_DENY_MODIFY_PATH_STEP_DATA);
}
$t->assign('petition', $petition);

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
$user_id = $login->getOID();

$agent_id = '';
$is_proxy_approval = false;
require_once('workflow/folder_logic.csp');
$logic = GRN_Workflow_Folder_Logic::getInstance();
$folder_org = $logic->getFolder($folder_id);
$folder_user_id = $folder_org['col_user'];
if ($user_id != $folder_user_id) {
    //代理承認の検証
    require_once('workflow/config.csp');
    $configs = GRN_Workflow_Configs::getInstance();
    $config =& $configs->getSystemConfig();
    if ($config->isProxyApproval($user_id, $folder_user_id)) {
        // 代理承認
        $agent_id = $user_id;
        $user_id = $folder_user_id;
        $is_proxy_approval = true;
    }
}
unset($logic);
$user_id_org = $user_id;

/*
require_once('workflow/folder_logic.csp');
$logic = GRN_Workflow_Folder_Logic::getInstance();
$folder = $logic->get($user_id, $folder_id);
if(! is_array($folder) || 0 == count($folder))
{
    // ログインユーザーはフォルダの所有者でない
    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
}
$t->assign('folder', $folder);

require_once('workflow/folderrelation_logic.csp');
$logic = GRN_Workflow_FolderRelation_Logic::getInstance();
$folder_relation = $logic->getSpecific($folder_id, $petition_id);
if(! is_array($folder_relation) || 0 == count($folder_relation))
{
    // フォルダにフォルダリレーションがない
    cb_throw_error(E_GRN_WRKF_FOLDER_FOLDERRELATION_NOT_FOUND);
}
*/

require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil($page_name);
$folder = $controller_util->getSimilarFolder($user_id, $folder_id);
if ( ! is_array($folder) || 0 == count($folder)) {
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder = $logic->getSpecific($folder_id);
    if ( ! is_array($folder) || 0 == count($folder)) {
        cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
    }
}
$t->assign('folder', $folder);
$folder_id = $folder['_id'];

$path_steps = $controller_util->getPathInfo($petition_id);

$controller_util->ekePathInfo($path_steps, $user_id, $petition['status'],
    $folder_id, @$petition['user'], @$petition['agent_user']);
if ( ! array_key_exists($path_step_id, $path_steps)) {
    // 経路ステップがない
    cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP_DATA);
}

$path_step = $path_steps[$path_step_id];
if ($path_step['not_modify']) {
    // 経路（ステップ）の変更は禁止されている
    cb_throw_error(E_GRN_WRKF_DENY_MODIFY_PATH_STEP_DATA);
}
$t->assign($path_steps[$path_step_id]);

$selected_users = [];
$not_candidated_users = [];
$users_id = [];
if ($path_step['col_skip'] || 0 == $path_step['user_count']) {
    $selected_users[] = MemberLogic::getInstance()->getOmittedData();
} else {
    $users =& $path_step['users'];
    $users_id = $path_step['uids'];//15046
    foreach ($users as $user) {
        $user_id = $user['_id'];
        $display_name = $user['col_current_display_name'];
        if (0 == strlen($display_name)) {
            $display_name = $user['col_display_name'];
        }

        if (GRN_WORKFLOW_RESULT_UNPROCESSING >= $user['col_result']) {
            if (0 < strlen($user_id)) {
                $selected_users[] = ['id' => $user_id, 'type' => 'user'];
            }
        } else {
            if (0 < strlen($user_id)) {
                $not_candidated_users[$user_id] = $display_name;
            }
        }
    }
    $selected_users = MemberLogic::getInstance()
                                 ->getDisplayMemberList($selected_users);
}
require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login);
$t->assign('users_info', $users_info);
$t->assign('selected_users', $selected_users);
$t->assign('not_candidated_users', $not_candidated_users);

$t->assign('plugin', [
    'name'   => 'common',
    'params' => [
        'action'       => null,
        'session_name' => cb_get_pagename(),
        'app_id'       => 'workflow'
    ]
]);

//$user_id = $login->getOID();
$user_id = $user_id_org;
$path_info = $controller_util->getPathInfoForView($user_id, $petition_id,
    $petition, $folder_id);
if ( ! $path_info['view']) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
}

if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID == $folder['col_folder_type']) {
    $page_title = $controller_util->getPageTitleForHandle($path_info['error'],
        $path_info['handle_mode'], $petition);
    $t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $is_proxy_approval == true
                ? GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID : $folder_id
        ],
        [
            'page'    => 'workflow/handle',
            'name'    => $page_title,
            'fid'     => $folder_id,
            'pid'     => $petition_id,
            'simple'  => $simple,
            'cpsf'    => $session_flag,
            'tmp_key' => $tmp_key
        ],
        [
            'page'    => 'workflow/path_step_view',
            'name'    => grn_get_page_display_name('workflow/path_step_view'),
            'fid'     => $folder_id,
            'pid'     => $petition_id,
            'psid'    => $path_step_id,
            'simple'  => $simple,
            'cpsf'    => $session_flag,
            'tmp_key' => $tmp_key
        ],
        [
            'page' => '',
            'name' => grn_get_page_display_name('workflow/path_step_modify')
        ]
    ]);
} else {
    $pages_info = [
        'index'            => ['fid' => $folder_id],
        'view'             => [
            'fid'    => $folder_id,
            'pid'    => $petition_id,
            'simple' => $simple
        ],
        'path_step_view'   => [
            'fid'    => $folder_id,
            'pid'    => $petition_id,
            'psid'   => $path_step_id,
            'simple' => $simple
        ],
        'path_step_modify' => null
    ];
    $site_position = $controller_util->makeSitePosition('workflow/',
        $pages_info);
    $t->assign('site_position', $site_position);
}


