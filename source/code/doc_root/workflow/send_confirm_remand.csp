<?php

use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Parameter
$folder_id = @ $G_INPUT['fid'];    //Folder ID
$petition_id = @ $G_INPUT['pid'];    //Petition ID
$mode = @ $G_INPUT['mode'];   //Mode ID
$simple = @ $G_INPUT['simple']; //Simple ID
$cpsf = @ $G_INPUT['cpsf'];
$handle = @ $G_INPUT['handle'];

//Get Session Key
require_once('workflow/controller_util.csp');
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);
$t->assign('session_suffix', 'remand');

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_send_form =& $session_manager->getSession('workflow/send_form_remand'
                                                   . $tmp_key);
$session_send_path =& $session_manager->getSession('workflow/send_path_remand'
                                                   . $tmp_key);
$session_page = &$session_manager->getSession('pagename' . $tmp_key);
$session_page->set('pagename', 'send_form_remand');

//Load Send Form Session (for Design)
$petition_for_view = $session_send_form->get('petition');
$item_data_list_for_view = $session_send_form->get('item_list');
$path_step_data_list_for_view
    = $session_send_form->get('path_step_data_list');
$path_skip_data_for_view = $session_send_form->get('path_skip_data');
$change_access_data_list_for_view
    = $session_send_form->get('change_access_data_list');
$properties_for_view = $session_send_form->get('properties');

//  ---  GRN-2971  ---
if ( ! is_array($petition_for_view) || 0 == count($petition_for_view)) {
    // フォームがない
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
}
//  ---  GRN-2971  ---

//Load Send Form Session (for Data)
$send_form_data_list = $session_send_form->get('send_form_data_list');

//Load Send Path Session (for Data)
$send_path_data_list = $session_send_path->get('send_path_data_list');

//Replace Path Step Data User by Send Path Data List
require_once('grn/uum.csp');
global $G_container_base;
$grn_uum =& $G_container_base->getInstance('uum');
$uids = [];
foreach (array_keys($send_path_data_list) as $path_step_data_id) {
    $path_step_data_list_for_view[$path_step_data_id]['users'] = [];
    $path_step_data_list_for_view[$path_step_data_id]['uids'] = [];

    foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
        $path_step_data_user = [];
        if ($user_id == 0) {
            $path_step_data_list_for_view[$path_step_data_id]['users'][]
                = ['_id' => $user_id];
            $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                = $user_id;
        } else {
            $uids[] = $user_id;
        }
    }
}

$login = $grn_uum->getLoginUser();
// tuning GTM-529
$users = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $login);
foreach (array_keys($send_path_data_list) as $path_step_data_id) {
    foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
        if (0 != $user_id) {
            //Check User Exists
            if ( ! array_key_exists($user_id, $users)) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_SYSTEM_USER_NOT_FOUND);
            }

            $path_step_data_user = [];
            $path_step_data_user['_id']
                = $user_id;
            $path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = GRN_ControllerUtil::getUserNameText($login->getOID(),
                $user_id);
            $path_step_data_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $users[$user_id]['col_foreign_key'];
            $path_step_data_user['col_position']
                = $users[$user_id]['col_position'];
            $path_step_data_user['col_valid']
                = $users[$user_id]['col_valid'];
            $path_step_data_list_for_view[$path_step_data_id]['users'][]
                = $path_step_data_user;
            $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                = $user_id;
        }
    }
}

//Evaluate Path Condition
$current_path_step_list = null;
if (count($path_skip_data_for_view) !== 0) {
    require_once('workflow/path_condition_data_logic.csp');
    $path_condition_data_logic
        = GRN_Workflow_Path_Condition_Data_Logic::getInstance();
    $condition_path_step_data_list
        = $path_condition_data_logic->getEvaluatedPathStepDatas($path_step_data_list_for_view,
        $path_skip_data_for_view, $send_form_data_list);

    //Unset Path Step Condition
    $previous = null;
    foreach (array_keys($path_step_data_list_for_view) as $path_step_data_id) {
        if ( ! array_key_exists($path_step_data_id,
            $condition_path_step_data_list)
        ) {
            unset($path_step_data_list_for_view[$path_step_data_id]);
        } else {
            unset($path_step_data_list_for_view[$path_step_data_id]['previous']);
            unset($path_step_data_list_for_view[$path_step_data_id]['next']);
            $path_step_data_list_for_view[$path_step_data_id]['previous']
                = null;
            $path_step_data_list_for_view[$path_step_data_id]['next'] = null;
            if ($previous) {
                $path_step_data_list_for_view[$path_step_data_id]['previous']
                    =& $previous;
                $previous['next']
                    =& $path_step_data_list_for_view[$path_step_data_id];
            }
            $previous =& $path_step_data_list_for_view[$path_step_data_id];
        }
    }
    unset($previous);
}

foreach (array_keys($path_step_data_list_for_view) as $path_step_id) {
    $path_step_data_list_for_view[$path_step_id]['col_activate'] = true;
}

require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil();
$controller_util->setLastAcceptance($path_step_data_list_for_view);

//Create Item Layout
$current = null;
$previous = null;
$item_data_layout_for_view = [];
foreach (array_keys($item_data_list_for_view) as $item_data_id) {
    //Copy Item
    $item_data_layout_for_view[$item_data_id]
        = $item_data_list_for_view[$item_data_id];

    //Check Calc Numeric Not Display Parameter
    if ($item_data_layout_for_view[$item_data_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_data_layout_for_view[$item_data_id]['settings']['not_display']
            == 1
        ) {
            unset($item_data_layout_for_view[$item_data_id]);
            continue;
        }
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_data_layout_for_view[$item_data_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_data_layout_for_view[$item_data_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_data_layout_for_view[$item_data_id];

    //Check Current or Sub Item
    if ($item_data_layout_for_view[$item_data_id]['br'] == 1) {
        $current =& $item_data_layout_for_view[$item_data_id];
        $current['sub_item_data_list'] = [];
        $current['total_required'] = $current['required'];
        if (array_key_exists('right_align',
                $item_data_layout_for_view[$item_data_id]['settings'])
            && $item_data_layout_for_view[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
    } else {
        if (array_key_exists('right_align',
                $item_data_layout_for_view[$item_data_id]['settings'])
            && $item_data_layout_for_view[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
        $current['sub_item_data_list'][$item_data_id]
            = $item_data_layout_for_view[$item_data_id];
        $current['sub_item_data_count'] = count($current['sub_item_data_list']);
        if ($item_data_layout_for_view[$item_data_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_data_layout_for_view[$item_data_id]);
    }
}

//Create Parameter Translation Map for Petition
$translation_map_petition = [
    'ptid' => '_id',  //Petition ID
    'user' => 'user', //User
];

require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$petition = $petition_util->getView($petition_id,
    $translation_map_petition);

//Check Petition Owner
global $G_workflow_login_user;
if ($petition['user'] != $G_workflow_login_user->getOID()) {
    //Petition Not Found
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
}

//Assign Display Infomation
//Assign Folder ID
$t->assign('folder_id', $folder_id);
//Assign Form ID
$t->assign('petition_id', $petition_id);

//Assign Form
$t->assign('petition', $petition_for_view);
//Assign Item List
$t->assign('item_data_list', $item_data_layout_for_view);
//Assign Path Step List
$t->assign('path_step_data_list', $path_step_data_list_for_view);
//Assign Path Step Count
$t->assign('path_step_data_count', count($path_step_data_list_for_view));

//Assign Mode
$t->assign('mode', $mode);
//Assign Simple
$t->assign('simple', $simple);
$t->assign('cpsf', $cpsf);
$t->assign('handle', $handle);

//Assign properties
$t->assign('properties', $properties_for_view);

// tuning GTM-529
$t->assign('users_info', $users);

$form_customization_status
    = CustomizationUtil::getFormCustomizationStatus($petition_for_view['form']);
$apply_customization
    = CustomizationUtil::applyCustomization($form_customization_status, $t);
if ($apply_customization) {
    $customization_petition
        = DataConverterForJsPetitionData::covertDataPetitionInformation(
        null,
        $item_data_layout_for_view,
        $path_step_data_list_for_view,
        $properties_for_view['priority']
    );
    $customization_data = CustomizationUtil::getDetailCustomizationData(
        $customization_petition, ['confirm' => true]
    );

    // Assign customization information
    grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
        new grn\grn\customization\workflow\WorkflowJsApiLoader($petition_for_view['form'],
            $petition_id, $folder_id),
        new grn\grn\customization\workflow\RequestDetailShowJsApiEvent(["data" => $customization_data])
    );
}

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
if ($cpsf) {
    $t->assign('site_position', [
            [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id
            ],
            [
                'page'   => 'workflow/handle',
                'name'   => grn_get_page_display_name('workflow/handle'),
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'simple' => $simple,
                'cpsf'   => $cpsf
            ],
            [
                'page'   => 'workflow/send_form_remand',
                'name'   => grn_get_page_display_name('workflow/send_form_remand'),
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'mode'   => $mode,
                'sf'     => 1,
                'simple' => $simple,
                'cpsf'   => $cpsf
            ],
            [
                'page'   => 'workflow/send_path_remand',
                'name'   => grn_get_page_display_name('workflow/send_path_remand'),
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'mode'   => $mode,
                'sf'     => 1,
                'simple' => $simple,
                'cpsf'   => $cpsf
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
} else {
    $t->assign('site_position', [
            [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id
            ],
            [
                'page' => 'workflow/handle',
                'name' => grn_get_page_display_name('workflow/handle'),
                'fid'  => $folder_id,
                'pid'  => $petition_id
            ],
            [
                'page'    => 'workflow/send_form_remand',
                'name'    => grn_get_page_display_name('workflow/send_form_remand'),
                'fid'     => $folder_id,
                'pid'     => $petition_id,
                'mode'    => $mode,
                'sf'      => 1,
                'tmp_key' => $tmp_key
            ],
            [
                'page'    => 'workflow/send_path_remand',
                'name'    => grn_get_page_display_name('workflow/send_path_remand'),
                'fid'     => $folder_id,
                'pid'     => $petition_id,
                'mode'    => $mode,
                'sf'      => 1,
                'tmp_key' => $tmp_key
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
}

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


