<?php

/**
 * Redirect to petition detail page with Folder Type ID (ftype).
 *
 */

if (array_key_exists('pid', $G_INPUT)) {
    $petition_id = (int)$G_INPUT['pid'];
}

if (array_key_exists('ftype', $G_INPUT)) {
    $folder_type = (int)$G_INPUT['ftype'];
    $folder_list = [
        GRN_WORKFLOW_FOLDER_TYPE_NEW_ID         => [
            'key' => 'NEW_FOLDER_FOREIGN_KEY',
            'to'  => 'workflow/view'
        ],
        GRN_WORKFLOW_FOLDER_TYPE_IN_ID          => [
            'key' => 'IN_FOLDER_FOREIGN_KEY',
            'to'  => 'workflow/view'
        ],
        GRN_WORKFLOW_FOLDER_TYPE_OUT_ID         => [
            'key' => 'OUT_FOLDER_FOREIGN_KEY',
            'to'  => 'workflow/view'
        ],
        GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID      => [
            'key' => 'FINISH_FOLDER_FOREIGN_KEY',
            'to'  => 'workflow/view'
        ],
        GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID => [
            'key' => 'UNPROCESSED_FOLDER_FOREIGN_KEY',
            'to'  => 'workflow/handle'
        ],
        GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID        => [
            'key' => 'TEMP_FOLDER_FOREIGN_KEY',
            'to'  => 'workflow/view'
        ],
    ];
    if (array_key_exists($folder_type, $folder_list)) {
        $foreign_key = $folder_list[$folder_type]['key'];
        $redirect_to = $folder_list[$folder_type]['to'];
    }
}

assert('isset( $petition_id, $foreign_key, $redirect_to )');

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$user_id = $login->getOID();

require_once('workflow/folder_logic.csp');
$folder_logic = GRN_Workflow_Folder_Logic::getInstance();
$folder = $folder_logic->getByForeignKey($user_id, $foreign_key);

cb_redirect($redirect_to, ['fid' => $folder['_id'], 'pid' => $petition_id]);


