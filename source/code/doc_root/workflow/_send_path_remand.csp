<?php

require_once('grn/uum.csp');
global $G_container_base;
$grn_uum = $G_container_base->getInstance('uum');
$login = $grn_uum->getLoginUser();

//Get Parameter
$folder_id = @ $G_INPUT['fid'];    //Folder ID
$petition_id = @ $G_INPUT['pid'];    //Petition ID
$sf = @ $G_INPUT['sf'];     //Session Hold Flag
$mode = @ $G_INPUT['mode'];   //Mode Parameter
$simple = @ $G_INPUT['simple'];
$cpsf = @ $G_INPUT['cpsf'];
$handle = @ $G_INPUT['handle'];

//Get Session Key
require_once('workflow/controller_util.csp');
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);
$t->assign('session_suffix', 'remand');

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_send_form =& $session_manager->getSession('workflow/send_form_remand'
                                                   . $tmp_key);
$session_send_path =& $session_manager->getSession('workflow/send_path_remand'
                                                   . $tmp_key);

//Load Send Form Session (for Design)
$petition_for_view = $session_send_form->get('petition');
if ( ! is_array($petition_for_view) || 0 == count($petition_for_view)) {
    // フォームがない
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_DENY_REQUEST_DATA);
}
$item_data_list_for_view = $session_send_form->get('item_list');
$path_step_list_for_view = $session_send_form->get('path_step_list');
$path_step_data_list_for_view = $session_send_form->get('path_step_data_list');
$path_skip_data_for_view = $session_send_form->get('path_skip_data');

//Load Send Form Session (for Data)
$send_form_data_list = $session_send_form->get('send_form_data_list');

//Check Session Hold Flag
if ($sf != 1) {
//-------------- Clear Session Section --------------//

    //Clear Send Path Session (for Data)
    $session_send_path->unset_by('send_path_data_list');
} else {
    //Load Send Path Session (for Data)
    $send_path_data_list = $session_send_path->get('send_path_data_list');
    if ($send_path_data_list) {
        //Replace Default Path Step User by Path Step Data List
        $uids = [];
        foreach (array_keys($send_path_data_list) as $path_step_data_id) {
            $path_step_data_list_for_view[$path_step_data_id]['users'] = [];
            $path_step_data_list_for_view[$path_step_data_id]['uids'] = [];

            foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
                $path_step_data_user = [];
                if ($user_id == 0) {
                    $path_step_data_user['_id'] = $user_id;
                    $path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                        = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                        'skip');
                    $path_step_data_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                        = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
                        'skip');
                    $path_step_data_list_for_view[$path_step_data_id]['users'][]
                        = $path_step_data_user;
                    $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                        = $user_id;
                } else {
                    $uids[] = $user_id;
                }
            }
        }

        $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
        $users = $grn_uum->getUsersInfo($uids, $columns);

        foreach (array_keys($send_path_data_list) as $path_step_data_id) {
            foreach ($send_path_data_list[$path_step_data_id] as $user_id) {
                if (0 != $user_id) {
                    $path_step_user = [];
                    $path_step_data_user['_id'] = $user_id;
                    if (array_key_exists($user_id, $users)) {
                        $path_step_data_user[GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                            = GRN_ControllerUtil::getUserNameText($login->getOID(),
                            $user_id);
                        $path_step_data_user[GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                            = $users[$user_id]['col_foreign_key'];
                        $path_step_data_user['col_position']
                            = $users[$user_id]['col_position'];
                    }
                    $path_step_data_list_for_view[$path_step_data_id]['users'][]
                        = $path_step_data_user;
                    $path_step_data_list_for_view[$path_step_data_id]['uids'][]
                        = $user_id;
                }
            }
        }
    }
}

//Evaluate Path Condition
$current_path_step_list = null;
if (count($path_skip_data_for_view) !== 0) {
    require_once('workflow/path_condition_data_logic.csp');
    $path_condition_data_logic
        = GRN_Workflow_Path_Condition_Data_Logic::getInstance();
    $condition_path_step_data_list
        = $path_condition_data_logic->getEvaluatedPathStepDatas($path_step_data_list_for_view,
        $path_skip_data_for_view, $send_form_data_list);

    //Unset Path Step Condition
    foreach (array_keys($path_step_data_list_for_view) as $path_step_data_id) {
        if ( ! array_key_exists($path_step_data_id,
            $condition_path_step_data_list)
        ) {
            unset($path_step_data_list_for_view[$path_step_data_id]);
        } else {
            $path_step_data_list_for_view[$path_step_data_id]['col_activate']
                = true;
        }
    }
}

$path_for_view = [];
foreach ($path_step_data_list_for_view as $key => $value) {
    $path_for_view[$key] = $value;
}

$controller_util = new GRN_Workflow_ControllerUtil();
$controller_util->connectPathStepLink($path_for_view);
$default_path_step = current($path_for_view);
$path_step_id
    = $controller_util->getLastAcceptancePathStepId($default_path_step);
if ($path_step_id) {
    $default_path_step =& $path_for_view[$path_step_id];
    if ($default_path_step['col_skip']
        || false !== array_search(0, $default_path_step['uids'], true)
    ) {
        $default_path_step['users'] = [];
        $default_path_step['uids'] = [];
        $default_path_step['user_count'] = 0;
        $default_path_step['col_skip'] = false;
    }
}

//Remove deleted users from path steps for view
foreach (array_keys($path_for_view) as $path_key) {
    $path =& $path_for_view[$path_key];

    foreach (array_keys($path['uids']) as $uid_key) {
        if (is_null($path['uids'][$uid_key])) {
            unset($path['uids'][$uid_key]);
        }
    }

    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($path['uids'], $columns);
    foreach (array_keys($path['users']) as $user_key) {
        if (array_key_exists('col_user', $path['users'][$user_key])) {
            //Rename username if username is changed.
            if (array_key_exists($path['users'][$user_key]['_id'], $users)) {
                $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                    = GRN_ControllerUtil::getUserNameText($login->getOID(),
                    $path['users'][$user_key]['_id']);
                $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                    = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
            }
            if (is_null($path['users'][$user_key]['col_user'])) {
                unset($path['users'][$user_key]);
            }
        }
    }
    $path['user_count'] = count($path['users']);
}

//Create Parameter Translation Map for Petition
$translation_map_petition = [
    'ptid' => '_id',  //Petition ID
    'user' => 'user', //User
];

$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$petition = $petition_util->getView($petition_id,
    $translation_map_petition);

//Check Petition Owner
global $G_workflow_login_user;
if ($petition['user'] != $G_workflow_login_user->getOID()) {
    //Petition Not Found
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
}

//Assign Display Infomation
//Assign Folder ID
$t->assign('folder_id', $folder_id);
//Assign Form ID
$t->assign('petition_id', $petition_id);

//Assign Petition
$t->assign('petition', $petition_for_view);
//Assign Path Step Data List
$t->assign('path_step_data_list', $path_for_view);
//Assign Path Step Data Count
$t->assign('path_step_data_count', count($path_for_view));

//Assign Mode
$t->assign('mode', $mode);

$t->assign('simple', $simple);
$t->assign('cpsf', $cpsf);
$t->assign('handle', $handle);

$t->assign('plugin', [
    'name'   => 'common',
    'params' => [
        'action'       => null,
        'session_name' => cb_get_pagename(),
        'app_id'       => 'workflow'
    ]
]);

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
if ($cpsf) {
    $t->assign('site_position', [
            [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id
            ],
            [
                'page'   => 'workflow/handle',
                'name'   => grn_get_page_display_name('workflow/handle'),
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'simple' => $simple,
                'cpsf'   => true
            ],
            [
                'page'   => 'workflow/send_form_remand',
                'name'   => grn_get_page_display_name('workflow/send_form_remand'),
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'mode'   => $mode,
                'sf'     => 1,
                'simple' => $simple,
                'handle' => $handle,
                'cpsf'   => true
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
} else {
    $t->assign('site_position', [
            [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id
            ],
            [
                'page' => 'workflow/handle',
                'name' => grn_get_page_display_name('workflow/handle'),
                'fid'  => $folder_id,
                'pid'  => $petition_id
            ],
            [
                'page'    => 'workflow/send_form_remand',
                'name'    => grn_get_page_display_name('workflow/send_form_remand'),
                'fid'     => $folder_id,
                'pid'     => $petition_id,
                'mode'    => $mode,
                'sf'      => 1,
                'handle'  => $handle,
                'tmp_key' => $tmp_key
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
}


