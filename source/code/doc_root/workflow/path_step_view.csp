<?php

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
$page_name = cb_get_pagename();

$folder_id = null;
if (array_key_exists('fid', $G_INPUT)) {
    $folder_id = $G_INPUT['fid'];
}
$petition_id = null;
if (array_key_exists('pid', $G_INPUT)) {
    $petition_id = $G_INPUT['pid'];
}
$t->assign('pid', $petition_id);
$category_id = null;
if (array_key_exists('cid', $G_INPUT)) {
    $category_id = $G_INPUT['cid'];
}

$simple = false;
if (array_key_exists('simple', $G_INPUT)) {
    $simple = $G_INPUT['simple'];
}
$t->assign('simple', $simple);
$path_step_id = null;
if (array_key_exists('psid', $G_INPUT)) {
    $path_step_id = $G_INPUT['psid'];
}
$t->assign('psid', $path_step_id);
$session_flag = false;
if (array_key_exists('cpsf', $G_INPUT)) {
    $session_flag = $G_INPUT['cpsf'];
}
$t->assign('cpsf', $session_flag);
$tmp_key = grn_get_temporary_key(null);
$t->assign('tmp_key', $tmp_key);

/**
 * 制限事項
 * ・フォルダにフォルダリレーションがない
 */

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
$user_id = $login->getOID();

$agent_id = '';
$no_check = false;
$is_proxy_approval = false;
// 承認予定の判断
$is_approval_plan = false;
if ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
    // 承認予定の判断
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
    if ($r == true) {
        $is_approval_plan = true;
        $no_check = true;
    }
} elseif ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Category_Controller_Utility::getInstance();
    $r = $c->checkPublicByPetitionId($petition_id, false);
    if ($r != true) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
    $no_check = true;
    unset($c);
} else {
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder_org = $logic->getFolder($folder_id);
    $folder_user_id = $folder_org['col_user'];
    if ($user_id != $folder_user_id) {
        //代理承認の検証
        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $config =& $configs->getSystemConfig();
        if ($config->isProxyApproval($user_id, $folder_user_id)) {
            // 代理承認
            $agent_id = $user_id;
            $user_id = $folder_user_id;
            $is_proxy_approval = true;
        } else {
            //公開申請データの閲覧権限のチェック
            require_once('workflow/controller_util.csp');
            $c = GRN_Workflow_Category_Controller_Utility::getInstance();
            $r = $c->checkPublicByPetitionId($petition_id, false);
            if ($r == true) {
                $folder_id = GRN_WORKFLOW_FOLDER_PUBLIC_ID;
                $no_check = true;
            }
        }
    }
    unset($logic);
}

require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$controller_util = new GRN_Workflow_ControllerUtil($page_name);

$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form_name'              => 'form_name',
    //Petition Form Name
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'user'                   => 'user',
    'user_name'              => 'user_name',
    'user_foreign_key'       => 'user_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
    'agent_user'             => 'agent_user',
];

$petition = $petition_util->getView($petition_id, $translation_map_petition);
$path_info = $controller_util->getPathInfoForView($user_id, $petition_id,
    $petition, $folder_id, $no_check);
if ( ! $path_info['view'] && $no_check == false) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
}
$t->assign('petition', $petition);

if ($no_check != true) {
    $folder = $controller_util->getSimilarFolder($user_id, $folder_id);
    if (is_array($folder) && 0 < count($folder)) {
        $folder_id = $folder['_id'];
    }
}
$t->assign('fid', $folder_id);

$path_steps = $controller_util->getPathInfo($petition_id);

//GRB-15046
$users_id_tmp = [];

//Rename username if username is changed.
foreach (array_keys($path_steps) as $path_key) {
    $path =& $path_steps[$path_key];
    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum =& $G_container_base->getInstance('uum');
    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($path['uids'], $columns);
    foreach (array_keys($path['users']) as $user_key) {
        if (array_key_exists($path['users'][$user_key]['_id'], $users)) {
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = $users[$path['users'][$user_key]['_id']]['col_display_name'];
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
            //GRB-15046 pa
            $users_id_tmp[] = $path['users'][$user_key]['_id'];
        }
    }
    $path['user_count'] = count($path['users']);
}

//GRB-15046
require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id_tmp,
    $login);
$t->assign('users_info', $users_info);

if ($no_check != true) {
    $controller_util->ekePathInfo($path_steps, $user_id, $petition['status'],
        $folder_id, @$petition['user'], @$petition['agent_user']);
}
$path_info = $controller_util->getPathInfoForView($user_id, $petition_id,
    $petition, $folder_id, $no_check);
if ( ! array_key_exists($path_step_id, $path_steps)) {
    cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP_DATA);
}
$path_step =& $path_steps[$path_step_id];
if (GRN_WORKFLOW_STATUS_UNPROCESSING != $petition['status']
    && GRN_WORKFLOW_STATUS_IN_PROCESS != $petition['status']
    && GRN_WORKFLOW_STATUS_ACCEPTANCE != $petition['status']
    && GRN_WORKFLOW_STATUS_REMAND != $petition['status']
) {
    $path_step['not_modify'] = true;
} else {
    if ('view_only' == $path_info['handle_mode']) {
        if ($user_id != @ $petition['creator']) {
            if ($path_step['col_change_path']
                && false !== array_search($user_id, $path_step['uids'])
            ) {
                $path_step['not_modify'] = true;
            }
        }
    }
}
$t->assign($path_step);

if ($no_check != true
    && GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID == $folder['col_folder_type']
) {
    $page_title = $controller_util->getPageTitleForHandle($path_info['error'],
        $path_info['handle_mode'], $petition);
    $t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $is_proxy_approval == true
                ? GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID : $folder_id
        ],
        [
            'page'    => 'workflow/handle',
            'name'    => $page_title,
            'fid'     => $folder_id,
            'pid'     => $petition_id,
            'simple'  => $simple,
            'cpsf'    => $session_flag,
            'tmp_key' => $tmp_key
        ],
        [
            'page' => '',
            'name' => grn_get_page_display_name('workflow/path_step_view')
        ]
    ]);
} else {
    if (is_null($category_id) || strlen($category_id) <= 0) {
        $pages_info = [
            'index'          => ['fid' => $folder_id],
            'view'           => [
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'simple' => $simple
            ],
            'path_step_view' => null
        ];
    } else {
        $pages_info = [
            'index'          => ['fid' => $folder_id, 'cid' => $category_id],
            'view'           => [
                'fid'    => $folder_id,
                'pid'    => $petition_id,
                'simple' => $simple
            ],
            'path_step_view' => null
        ];
    }
    $site_position = $controller_util->makeSitePosition('workflow/',
        $pages_info);
    $t->assign('site_position', $site_position);
}

$t->display("{$page_name}.tpl");


