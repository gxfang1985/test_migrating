<?php
require_once("workflow/utility.csp");
// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'workflow/item/set_radio';
    SmartyValidate::register_form($target_name);

    //Check Category Exists
    require_once('workflow/resources.csp');
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $G_INPUT['cid']) {
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($G_INPUT['cid']);
    }

    //Check Form Exist
    require_once('workflow/form_logic_base.csp');
    $column_list = ['_id'];
    $option = [
        'condition' => [
            0 => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
    $form = $form_logic_base->getDirect($G_INPUT['fid'],
        $column_list, $option);

    // Create Parameter Translation Map
    $translation_map = [
        'cid'                => '_cid',                 //Category ID
        'fid'                => '_fid',                 //Form ID
        'iid'                => '_iid',                 //Item ID
        'foreign_key'        => 'foreign_key',          //Foreign Key
        'display_name'       => 'display_name',         //Display Name
        'code'               => 'code',                 //Item code
        'option_string'      => 'option_string',        //Option String
        'option_string_type' => 'option_string_type',   //Option String Type
        'description'        => 'description',          //Description
        'description_type'   => 'description_type',     //Description Type
        'editor'             => 'description_editor',   //Description Editor
        'reverse_br'         => 'reverse_br',           //<br> Frag (Revserse)
        'separator'          => 'separator',            //Separator
        'required'           => 'required',             //Required
        'radio_items'        => 'radio_items',          //Radio Items
        'initial_value'      => 'initial_value',        //Initial Value
        'export_data'        => 'export_data',          //Export Data
    ];

    // Do Parameter Translation
    $properties
        = grn_workflow_get_item_attribute_from_translation_map($translation_map,
        $G_INPUT);

    ///  Dynamic Register Smarty Validation  ///
    require_once($t->_get_plugin_filepath('function', 'validate'));
    $standard_params = [
        'form'   => $target_name,
        'field'  => 'radio_items',
        'append' => 'validation_errors'
    ];

    //Register grn_workflow_isLength Validation
    if ($properties['required'] == 1) {
        $params = $standard_params;
        $params['criteria'] = 'notEmpty';
        $params['transform'] = 'cb_trim';
        $params['message'] = cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
            'item_validate_required_radio_item');
        smarty_function_validate($params, $t);
    }

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        require_once('workflow/item_logic.csp');
        $item_logic = GRN_Workflow_Item_Logic::getInstance();
        $item_logic->checkIsIncludeStandardItem($properties['_fid'],
            [$properties['_iid']]);

        require_once('workflow/auto_schedule_setting_logic.csp');
        $register_setting
            = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();
        $register_setting->checkModifyItem($properties['_fid'],
            [$properties['_iid']]);

        //Create Option Settings
        $option_settings = [
            'option_string'      => $properties['option_string'],
            //option string
            'option_string_type' => $properties['option_string_type'],
            //option string Type
        ];

        //Create Description Settings
        $description_settings = [
            'description'        => $properties['description'],
            //description
            'description_type'   => $properties['description_type'],
            //description Type
            'description_editor' => $properties['description_editor'],
            //description Editor
        ];

        //Create Item Settings
        $item_settings = [
            'radio_items'   => $properties['radio_items'],     //Radio Items
            'initial_value' => $properties['initial_value'],   //Initial Value
        ];

        //Add or Modify Item
        if ($G_INPUT['display'] == 'add-system'
            || $G_INPUT['display'] == 'add-operation'
        ) {
            //Add Form Item
            $item_id = $item_logic->add($properties['_fid'],
                $properties['foreign_key'], $properties['display_name'],
                $properties['code'], $option_settings, $description_settings,
                $item_settings, $properties['br'],
                $properties['separator'], $properties['required'],
                $properties['export_data']);

            $item_logic->setAttachFile($item_id, 1, 1);

            $message_type = 'form_layout_radio_add';
        } else {
            $before_modify_item = [];
            $before_modify_item = $item_logic->get($properties['_iid'],
                $properties['_fid']);

            //Modify Form Item
            $item_id = $item_logic->modify($properties['_iid'],
                $properties['_fid'], $properties['foreign_key'],
                $properties['display_name'], $properties['code'],
                $option_settings, $description_settings,
                $item_settings, $properties['br'], $properties['separator'],
                $properties['required'],
                $properties['export_data']);

            require_once('workflow/path_skip.csp');
            $path_skip_logic = GRN_Workflow_PathSkips::getInstance();
            $columns = [
                'tab_grn_workflow_pathskip' => [
                    '_id'      => '_id',
                    'col_item' => 'col_item'
                ]
            ];
            $path_skip
                = $path_skip_logic->getByFormId($properties['_fid'],
                $columns);

            if (is_array($path_skip) && 0 < count($path_skip)
                && $path_skip['col_item'] == $item_id
            ) {
                $items = mb_split("\r\n", $properties['radio_items']);

                require_once('workflow/path_condition.csp');
                $path_condition_logic
                    = GRN_Workflow_PathConditions::getInstance();
                $columns = [
                    'tab_grn_workflow_pathcondition' => [
                        '_id'        => '_id',
                        'col_option' => 'col_option'
                    ]
                ];
                $path_conditions
                    = $path_condition_logic->getListByPathSkipId([$path_skip['_id']],
                    $columns);

                $pcids = [];
                foreach ($path_conditions as $path_condition) {
                    if (false === array_search($path_condition['col_option'],
                            $items)
                    ) {
                        $pcids[] = $path_condition['_id'];
                    }
                }

                if (is_array($pcids) && 0 < count($pcids)) {
                    $path_condition_logic->removeList($pcids);
                }
            }

            if ($before_modify_item['col_foreign_key']
                != $properties['foreign_key']
            ) {
                //Remove Path Skip By Item ID
                $path_skip_logic->removeByItemID($item_id);
            }

            $message_type = 'form_layout_radio_modify';
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Form_Layout_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //任意の文字列
            $inspection_option_string_type
                = $inspection->setStringType($option_settings['option_string_type']);
            //説明
            $inspection_description_editor
                = $inspection->setDescriptionEditor($description_settings['description_editor']);
            //アイコン
            $inspection_description_type
                = $inspection->setDescriptionType($description_settings['description_type']);
            //必須
            $inspection_required
                = $inspection->setRequired($properties['required']);
            //右隣への配置
            $inspection_br = $inspection->setBr($properties['br']);
            //書き出す項目にする 
            $inspection_export_data
                = $inspection->setFlag($properties['export_data']);

            $message_args['fid'] = $properties['_fid'];
            $message_args['iid'] = $item_id;
            $message_args['foreign_key'] = $properties['foreign_key'];
            $message_args['display_name'] = $properties['display_name'];
            $message_args['code'] = $properties['code'];
            $message_args['br'] = $inspection_br;
            $message_args['separator'] = $properties['separator'];
            $message_args['option_string']
                = $option_settings['option_string'];
            $message_args['option_string_type']
                = $inspection_option_string_type;
            $message_args['description']
                = $description_settings['description'];
            $message_args['description_type'] = $inspection_description_type;
            $message_args['description_editor']
                = $inspection_description_editor;
            $message_args['radio_items'] = $item_settings['radio_items'];
            $message_args['initial_value']
                = $item_settings['initial_value'];
            $message_args['required'] = $inspection_required;
            $message_args['export_data'] = $inspection_export_data;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        $redirect_page = '';
        $redirect_params = [];
        switch ($G_INPUT['display']) {
            case 'add-system':
                $redirect_page = 'workflow/system/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-system':
                $redirect_page = 'workflow/system/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            case 'add-operation':
                $redirect_page = 'workflow/operation/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-operation':
                $redirect_page = 'workflow/operation/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            default:
                break;
        }

        //Redirect Next Page
        cb_redirect($redirect_page, $redirect_params);
    } else {
        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Return Page
        $return_page = '';
        switch ($G_INPUT['display']) {
            case 'add-system':
                $info_page = 'system/formlayout_add';
                $include_page
                    = '/code/doc_root/workflow/system/_formlayout_add.csp';
                $return_page = 'workflow/system/formlayout_add.tpl';
                break;
            case 'modify-system':
                $info_page = 'system/formlayout_modify';
                $include_page
                    = '/code/doc_root/workflow/system/_formlayout_modify.csp';
                $return_page = 'workflow/system/formlayout_modify.tpl';
                break;
            case 'add-operation':
                $info_page = 'operation/formlayout_add';
                $include_page
                    = '/code/doc_root/workflow/operation/_formlayout_add.csp';
                $return_page = 'workflow/operation/formlayout_add.tpl';
                break;
            case 'modify-operation':
                $info_page = 'operation/formlayout_modify';
                $include_page
                    = '/code/doc_root/workflow/operation/_formlayout_modify.csp';
                $return_page = 'workflow/operation/formlayout_modify.tpl';
                break;
            default:
                break;
        }

        //Assign Template Name
        $t->setPageInfo('../' . $info_page);

        //Create Item Information
        $item = grn_workflow_get_item_attribute($G_INPUT, true);

        $item['settings'] = [];
        $item['settings']['radio_items'] = @ $G_INPUT['radio_items'];
        $item['settings']['initial_value'] = @ $G_INPUT['initial_value'];
        $t->assign('item', $item);

        //include sharing codes with command_*
        include(cb_basedir() . $include_page);

        //Display Previous Page
        $t->display($return_page);
    }
}


