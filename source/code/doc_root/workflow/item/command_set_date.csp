<?php
require_once("workflow/utility.csp");
// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'workflow/item/set_date';
    SmartyValidate::register_form($target_name);

    //Check Category Exists
    require_once('workflow/resources.csp');
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $G_INPUT['cid']) {
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($G_INPUT['cid']);
    }

    //Check Form Exist
    require_once('workflow/form_logic_base.csp');
    $column_list = ['_id'];
    $option = [
        'condition' => [
            0 => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
    $form = $form_logic_base->getDirect($G_INPUT['fid'],
        $column_list, $option);

    // Create Parameter Translation Map
    $translation_map = [
        'cid'                => '_cid',
        //Category ID
        'fid'                => '_fid',
        //Form ID
        'iid'                => '_iid',
        //Item ID
        'foreign_key'        => 'foreign_key',
        //Foreign Key
        'display_name'       => 'display_name',
        //Display Name
        'code'               => 'code',
        //Item code
        'date_type'          => 'date_type',
        //Date Type
        'option_string'      => 'option_string',
        //Option String
        'option_string_type' => 'option_string_type',
        //Option String Type
        'description'        => 'description',
        //Description
        'description_type'   => 'description_type',
        //Description Type
        'editor'             => 'description_editor',
        //Description Editor
        'reverse_br'         => 'reverse_br',
        //<br> Frag (Revserse)
        'separator'          => 'separator',
        //Separator
        'required'           => 'required',
        //Required
        'initial_type'       => 'initial_type',
        //Date Initial Type
        'initial_type1'      => 'initial_type1',
        //Datetime Initial Type
        'initial_year'       => 'initial_year',
        //Date Initial Year
        'initial_month'      => 'initial_month',
        //Date Initial Month
        'initial_day'        => 'initial_day',
        //Date Initial Day
        'initial_1_year'     => 'initial_1_year',
        //Datetime Initial Year
        'initial_1_month'    => 'initial_1_month',
        //Datetime Initial Month
        'initial_1_day'      => 'initial_1_day',
        //Datetime Initial Day
        'initial_1_hour'     => 'initial_1_hour',
        //Datetime Initial_hour
        'initial_1_minute'   => 'initial_1_minute',
        //Datetime Initial_minute
        'export_data'        => 'export_data',
        //Export Data
    ];

    // Do Parameter Translation
    $properties
        = grn_workflow_get_item_attribute_from_translation_map($translation_map,
        $G_INPUT);

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        require_once('workflow/item_logic.csp');
        $item_logic = GRN_Workflow_Item_Logic::getInstance();
        $item_logic->checkIsIncludeStandardItem($properties['_fid'],
            [$properties['_iid']]);

        //Create Option Settings
        $option_settings = [
            'option_string'      => $properties['option_string'],
            //option string
            'option_string_type' => $properties['option_string_type'],
            //option string Type
        ];

        //Create Description Settings
        $description_settings = [
            'description'        => $properties['description'],
            //description
            'description_type'   => $properties['description_type'],
            //description Type
            'description_editor' => $properties['description_editor'],
            //description Editor
        ];

        //Create Item Settings
        $item_settings['date_type'] = $properties['date_type'];     //Date Type
        $item_settings['initial_type'] = ($item_settings['date_type'] != 1)
            ? $properties['initial_type']
            : $properties['initial_type1'];  //Initial Type
        if ($item_settings['initial_type'] == 1) {
            if ($item_settings['date_type'] == 1) {
                $item_settings['initial_year']
                    = $properties['initial_1_year'];  //Initial Year
                $item_settings['initial_month']
                    = $properties['initial_1_month']; //Initial Month
                $item_settings['initial_day']
                    = $properties['initial_1_day'];   //Initial Day
                $item_settings['initial_hour']
                    = $properties['initial_1_hour'];   //Initial_hour
                $item_settings['initial_minute']
                    = $properties['initial_1_minute']; //Initial_minute
            } else {
                $item_settings['initial_year']
                    = $properties['initial_year'];  //Initial Year
                $item_settings['initial_month']
                    = $properties['initial_month']; //Initial Month
                $item_settings['initial_day']
                    = $properties['initial_day'];   //Initial Day
            }
        }

        //Add or Modify Item
        if ($G_INPUT['display'] == 'add-system'
            || $G_INPUT['display'] == 'add-operation'
        ) {
            //Add Form Item
            $item_id = $item_logic->add($properties['_fid'],
                $properties['foreign_key'], $properties['display_name'],
                $properties['code'], $option_settings, $description_settings,
                $item_settings, $properties['br'],
                $properties['separator'], $properties['required'],
                $properties['export_data']);

            $item_logic->setAttachFile($item_id, 1, 1);

            $message_type = 'form_layout_date_add';
        } else {
            $before_modify_item = [];
            $before_modify_item = $item_logic->get($properties['_iid'],
                $properties['_fid']);

            //Modify Form Item
            $item_id = $item_logic->modify($properties['_iid'],
                $properties['_fid'], $properties['foreign_key'],
                $properties['display_name'], $properties['code'],
                $option_settings, $description_settings,
                $item_settings, $properties['br'], $properties['separator'],
                $properties['required'],
                $properties['export_data']);

            if ($before_modify_item['col_foreign_key']
                != $properties['foreign_key']
            ) {
                //Remove Path Skip By Item ID
                require_once('workflow/path_skip.csp');
                $path_skip_logic = GRN_Workflow_PathSkips::getInstance();
                $path_skip_logic->removeByItemID($item_id);
            }
            $message_type = 'form_layout_date_modify';
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Form_Layout_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $initial_year = null;
            $initial_month = null;
            $initial_day = null;
            if ($item_settings['date_type'] == 1) {
                $initial_hour = null;
                $initial_minute = null;
            }

            $inspection_initial_type
                = GRN_WORKFLOW_ITEM_DATE_INITIAL_TYPE_CLAC_NOW_DATE;
            if ($item_settings['initial_type'] == 1) {
                $inspection_initial_type
                    = GRN_WORKFLOW_ITEM_DATE_INITIAL_TYPE_CLAC_SPECIFIC_DATE;
                $initial_year = $item_settings['initial_year'];
                $initial_month = $item_settings['initial_month'];
                $initial_day = $item_settings['initial_day'];
                if ($item_settings['date_type'] == 1) {
                    $initial_hour = $item_settings['initial_hour'];
                    $initial_minute = $item_settings['initial_minute'];
                }
            } elseif ($item_settings['initial_type'] == 2) {
                $inspection_initial_type
                    = GRN_WORKFLOW_ITEM_DATE_INITIAL_TYPE_CLAC_BLANK_DATE;
            }

            //任意の文字列
            $inspection_option_string_type
                = $inspection->setStringType($option_settings['option_string_type']);
            //説明
            $inspection_description_editor
                = $inspection->setDescriptionEditor($description_settings['description_editor']);
            //アイコン
            $inspection_description_type
                = $inspection->setDescriptionType($description_settings['description_type']);
            //必須
            $inspection_required
                = $inspection->setRequired($properties['required']);
            //右隣への配置
            $inspection_br = $inspection->setBr($properties['br']);
            //書き出す項目にする 
            $inspection_export_data
                = $inspection->setFlag($properties['export_data']);

            $message_args['fid'] = $properties['_fid'];
            $message_args['iid'] = $item_id;
            $message_args['foreign_key'] = $properties['foreign_key'];
            $message_args['display_name'] = $properties['display_name'];
            $message_args['code'] = $properties['code'];
            if ($item_settings['date_type'] == 1) {
                $message_args['date_type']
                    = GRN_WORKFLOW_ITEM_DATE_DATE_TYPE_DATE_TIME;
            } else {
                $message_args['date_type']
                    = GRN_WORKFLOW_ITEM_DATE_DATE_TYPE_DATE;
            }
            $message_args['br'] = $inspection_br;
            $message_args['separator'] = $properties['separator'];

            $message_args['option_string'] = $option_settings['option_string'];
            $message_args['option_string_type']
                = $inspection_option_string_type;
            $message_args['description']
                = $description_settings['description'];
            $message_args['description_type'] = $inspection_description_type;
            $message_args['description_editor']
                = $inspection_description_editor;
            $message_args['initial_type'] = $inspection_initial_type;
            $message_args['initial_year'] = $initial_year;
            $message_args['initial_month'] = $initial_month;
            $message_args['initial_day'] = $initial_day;
            if ($item_settings['date_type'] == 1) {
                $message_args['initial_hour'] = $initial_hour;
                $message_args['initial_minute'] = $initial_minute;
            }
            $message_args['required'] = $inspection_required;
            $message_args['export_data'] = $inspection_export_data;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        $redirect_page = '';
        $redirect_params = [];
        switch ($G_INPUT['display']) {
            case 'add-system':
                $redirect_page = 'workflow/system/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-system':
                $redirect_page = 'workflow/system/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            case 'add-operation':
                $redirect_page = 'workflow/operation/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-operation':
                $redirect_page = 'workflow/operation/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            default:
                break;
        }
        //Redirect Next Page
        cb_redirect($redirect_page, $redirect_params);
    } else {
        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Return Page
        $return_page = '';
        switch ($G_INPUT['display']) {
            case 'add-system':
                $info_page = 'system/formlayout_add';
                $include_page
                    = '/code/doc_root/workflow/system/_formlayout_add.csp';
                $return_page = 'workflow/system/formlayout_add.tpl';
                break;
            case 'modify-system':
                $info_page = 'system/formlayout_modify';
                $include_page
                    = '/code/doc_root/workflow/system/_formlayout_modify.csp';
                $return_page = 'workflow/system/formlayout_modify.tpl';
                break;
            case 'add-operation':
                $info_page = 'operation/formlayout_add';
                $include_page
                    = '/code/doc_root/workflow/operation/_formlayout_add.csp';
                $return_page = 'workflow/operation/formlayout_add.tpl';
                break;
            case 'modify-operation':
                $info_page = 'operation/formlayout_modify';
                $include_page
                    = '/code/doc_root/workflow/operation/_formlayout_modify.csp';
                $return_page = 'workflow/operation/formlayout_modify.tpl';
                break;
            default:
                break;
        }

        //Assign Template Name
        $t->setPageInfo('../' . $info_page);

        //Create Item Information
        $item = grn_workflow_get_item_attribute($G_INPUT, true);

        $item['settings'] = [];
        $item['settings']['date_type'] = cb_at($G_INPUT, 'date_type');
        $item['settings']['initial_type'] = ($item['settings']['date_type']
                                             != 1) ? cb_at($G_INPUT,
            'initial_type') : cb_at($G_INPUT, 'initial_type1');
        if ($item['settings']['date_type'] == 1) {
            $item['settings']['initial_year'] = cb_at($G_INPUT,
                'initial_1_year');
            $item['settings']['initial_month'] = cb_at($G_INPUT,
                'initial_1_month');
            $item['settings']['initial_day'] = cb_at($G_INPUT,
                'initial_1_day');
            $item['settings']['initial_hour'] = cb_at($G_INPUT,
                'initial_1_hour');
            $item['settings']['initial_minute'] = cb_at($G_INPUT,
                'initial_1_minute');
        } else {
            $item['settings']['initial_year'] = cb_at($G_INPUT,
                'initial_year');
            $item['settings']['initial_month'] = cb_at($G_INPUT,
                'initial_month');
            $item['settings']['initial_day'] = cb_at($G_INPUT, 'initial_day');
        }
        $t->assign('item', $item);

        //include sharing codes with command_*
        include(cb_basedir() . $include_page);

        //Display Previous Page
        $t->display($return_page);
    }
}


