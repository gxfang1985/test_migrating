<?php

global $G_INPUT;

//Get Smarty Instance
require_once("grn/smarty.csp");
//$t = $smarty;

//SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('workflow/item/set_calc_numeric', true);

//Get Item
$item_for_view = $t->get_template_vars('item');
$form_id = $t->get_template_vars('form_id');
if (is_null($item_for_view)) {
    $item_for_view = [];
    $item_for_view['fid'] = $form_id;
    $item_for_view['foreign_key'] = $selected_foreign_key;
    $item_for_view['display_name'] = '';
    $item_for_view['code'] = '';
    $item_for_view['option_string'] = '';
    $item_for_view['option_string_type'] = 0;
    $item_for_view['description'] = '';
    $item_for_view['description_type'] = 0;
    $item_for_view['description_editor'] = 0;
    $item_for_view['br'] = 1;
    $item_for_view['reverse_br'] = 0;
    $item_for_view['separator'] = '';
    $item_for_view['required'] = 0;
    $item_for_view['export_data'] = 1;

    $item_for_view['settings'] = [];
    $item_for_view['settings']['effective_figures'] = 0;
    $item_for_view['settings']['minus_type'] = 0;
    $item_for_view['settings']['right_align'] = 0;
    $item_for_view['settings']['split_rank'] = 0;
    $item_for_view['settings']['not_display'] = 0;
    $item_for_view['settings']['calc_type'] = 0;
}

//Create Reverse br
$item_for_view['reverse_br'] = ($item_for_view['br'] == 1) ? 0 : 1;

//Get Item Utility List
require_once('workflow/item_resources.csp');
$item_util_list =& grn_workflow_get_item_util_list();

//Create Item Options
$item_options = [];
foreach (array_keys($item_util_list) as $foreign_key) {
    $item_options[$foreign_key] = [
        'value' => $foreign_key,
        'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, $foreign_key),
    ];
    if ($foreign_key == $selected_foreign_key) {
        $item_options[$foreign_key]['selected'] = true;
    }
}

//Create RichEditor Information
$richeditor_for_view = [];
$richeditor_for_view['rows'] = 5;
$richeditor_for_view['cols'] = 40;

// Check HTML or Text Description
if ($item_for_view['description_editor'] == 1) {
    $item_for_view['description_text'] = null;
    $item_for_view['description_html'] = $item_for_view['description'];
} else {
    $item_for_view['description_text'] = $item_for_view['description'];
    $item_for_view['description_html'] = null;
}

//Check and Initialize Settings
if ($item_for_view['foreign_key'] !== $selected_foreign_key) {
    $item_for_view['settings']['effective_figures'] = 0;
    $item_for_view['settings']['minus_type'] = 0;
    $item_for_view['settings']['right_align'] = 0;
    $item_for_view['settings']['split_rank'] = 0;
    $item_for_view['settings']['not_display'] = 0;
    $item_for_view['settings']['calc_type'] = 0;
}

//Create Option String Type Options
$option_string_type_options = [];
$option_string_type_options[0]
    = [
    'value' => '0',
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'option_string_type_0_sample')
];
$option_string_type_options[1]
    = [
    'value' => '1',
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'option_string_type_1_sample')
];
$option_string_type_options[2]
    = [
    'value' => '2',
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'option_string_type_2_sample')
];
$option_string_type_options[$item_for_view['option_string_type']]['selected']
    = true;

//Get Item Controller Utility
require_once('workflow/controller_util.csp');
$item_util = GRN_Workflow_Item_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_item_list = [
    'iid'          => '_id',           //Item ID
    'type'         => 'type',          //Item Type
    'display_name' => 'display_name',  //Item Display Name
    'foreign_key'  => 'foreign_key',   //Item Foreign key
];

//Get Item List for view
$item_list_for_view = $item_util->getListView($translation_map_item_list,
    $form_id);

//Create Effective Figures Options
$effective_figures_options = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

//Create Minus Type Options
$minus_type_options = [];
$minus_type_options[0] = [
    'value' => '0',
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'minus_type_0_sample')
];
$minus_type_options[1] = [
    'value' => '1',
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'minus_type_1_sample')
];
$minus_type_options[2] = [
    'value' => '2',
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'minus_type_2_sample')
];

//Set Minus Type Selected Value
$minus_type_options[$item_for_view['settings']['minus_type']]['selected']
    = true;

//Create Operand and Total Options
$operand1_options = [];
$total_options[0] = [];
$total_options[0]['item'] = [];
$operand1_options[] = [
    'value' => 0,
    'label' => cb_msg(GRN_WORKFLOW_MODULE_ID, 'constant_select')
];
foreach (array_keys($item_list_for_view) as $key) {
    if ($item_for_view['iid'] == $key) {
        break;
    }

    if ($item_list_for_view[$key]['foreign_key'] == 'grn.workflow.numeric'
        || $item_list_for_view[$key]['foreign_key']
           == 'grn.workflow.calc_numeric'
        || $item_list_for_view[$key]['foreign_key']
           == 'grn.workflow.route_search'
    ) {
        $operand1_options[$key] = [
            'value' => $key,
            'label' => $item_list_for_view[$key]['display_name']
        ];
        $total_options[0]['item'][$key]
            = $item_list_for_view[$key]['display_name'];
    }
}
$operand2_options = $operand1_options;

//Create Operator Options
$operator_options = [];
$operator_options[] = ['value' => '0', 'label' => '＋'];
$operator_options[] = ['value' => '1', 'label' => '－'];
$operator_options[] = ['value' => '2', 'label' => '×'];
$operator_options[] = ['value' => '3', 'label' => '÷'];

//Set Calc Operator Selected Value
if (array_key_exists('calc_operator', $item_for_view['settings'])) {
    //Set Operand Selected Value
    $operand1_options[$item_for_view['settings']['calc_operator']['operand1_type']]['selected']
        = true;
    $operand2_options[$item_for_view['settings']['calc_operator']['operand2_type']]['selected']
        = true;
    //Set Operator Selected Value
    $operator_options[$item_for_view['settings']['calc_operator']['operator']]['selected']
        = true;
}

//Set Calc Total Selected Value
$selected_total_options = [];
if (array_key_exists('calc_total', $item_for_view['settings'])) {
    foreach (array_keys($item_list_for_view) as $key) {
        if ($item_for_view['iid'] == $key) {
            break;
        }

        foreach ($item_for_view['settings']['calc_total']['values'] as $key2) {
            if ($key == $key2) {
                $selected_total_options[$key]
                    = $item_list_for_view[$key]['display_name'];
            }
        }
    }
}

// Assign View Infomation
// Assign Item ID
$t->assign('item_id', $item_id);

//Assign Display
$t->assign('display', $display);

// Assign Item
$t->assign('item', $item_for_view);
// Assign Settings
$t->assign('settings', $item_for_view['settings']);
// Assign Item Options
$t->assign('item_options', $item_options);
// Assign RichEditor
$t->assign('richeditor', $richeditor_for_view);
// Assign Option String Type Options
$t->assign('option_string_type_options', $option_string_type_options);
//Assign Selected Foreign_key
$t->assign('selected_foreign_key', $selected_foreign_key);

// Assign Effective Figures Options
$t->assign('effective_figures_options', $effective_figures_options);

// Assign Operator/Operand1/Operand2 Options
$t->assign('operator_options', $operator_options);
$t->assign('operand1_options', $operand1_options);
$t->assign('operand2_options', $operand2_options);

// Assign total/selected_total Options
$t->assign('total_options', $total_options);
$t->assign('selected_total_options', $selected_total_options);
// Assign Minus Type Options
$t->assign('minus_type_options', $minus_type_options);

//-- set page title and site position

// Ignore Licence Warnning
$t->skipWarning();

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("workflow/item/set_calc_numeric.tpl");


