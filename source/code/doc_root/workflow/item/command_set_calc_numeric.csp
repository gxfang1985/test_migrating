<?php
require_once("workflow/utility.csp");
// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'workflow/item/set_calc_numeric';
    SmartyValidate::register_form($target_name);

    //Check Category Exists
    require_once('workflow/resources.csp');
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $G_INPUT['cid']) {
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($G_INPUT['cid']);
    }

    //Check Form Exist
    require_once('workflow/form_logic_base.csp');
    $column_list = ['_id'];
    $option = [
        'condition' => [
            0 => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
    $form = $form_logic_base->getDirect($G_INPUT['fid'],
        $column_list, $option);

    // Create Parameter Translation Map
    $translation_map = [
        'cid'                => '_cid',                 //Category ID
        'fid'                => '_fid',                 //Form ID
        'iid'                => '_iid',                 //Item ID
        'foreign_key'        => 'foreign_key',          //Foreign Key
        'display_name'       => 'display_name',         //Display Name
        'code'               => 'code',                 //Item code
        'option_string'      => 'option_string',        //Option String
        'option_string_type' => 'option_string_type',   //Option String Type
        'description'        => 'description',          //Description
        'description_type'   => 'description_type',     //Description Type
        'editor'             => 'description_editor',   //Description Editor
        'reverse_br'         => 'reverse_br',           //<br> Frag (Revserse)
        'separator'          => 'separator',            //Separator
        'effective_figures'  => 'effective_figures',    //Effective Figures
        'minus_type'         => 'minus_type',           //Minus Type
        'right_align'        => 'right_align',          //Right Align
        'split_rank'         => 'split_rank',           //Split Rank
        'not_display'        => 'not_display',          //Not Display
        'calc_type'          => 'calc_type',            //Calc Type
        'operator'           => 'operator',             //Operator
        'operand1_type'      => 'operand1_type',        //Operand1 Type
        'operand1_value'     => 'operand1_value',       //Operand1 Value
        'operand2_type'      => 'operand2_type',        //Operand2 Type
        'operand2_value'     => 'operand2_value',       //Operand2 Value
        'sITEM'              => 'total_values',         //Total Values
        'export_data'        => 'export_data',          //Export Data
    ];

    // Do Parameter Translation
    $properties
        = grn_workflow_get_item_attribute_from_translation_map($translation_map,
        $G_INPUT);

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        require_once('workflow/item_logic.csp');
        $item_logic = GRN_Workflow_Item_Logic::getInstance();
        $item_logic->checkIsIncludeStandardItem($properties['_fid'],
            [$properties['_iid']]);

        require_once('workflow/auto_schedule_setting_logic.csp');
        $register_setting
            = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();
        $register_setting->checkModifyItem($properties['_fid'],
            [$properties['_iid']]);

        //Create Option Settings
        $option_settings = [
            'option_string'      => $properties['option_string'],
            //option string
            'option_string_type' => $properties['option_string_type'],
            //option string Type
        ];

        //Create Description Settings
        $description_settings = [
            'description'        => $properties['description'],
            //description
            'description_type'   => $properties['description_type'],
            //description Type
            'description_editor' => $properties['description_editor'],
            //description Editor
        ];

        //Create Item Settings
        $item_settings = [
            'effective_figures' => $properties['effective_figures'],
            'minus_type'        => $properties['minus_type'],
            'right_align'       => $properties['right_align'],
            'split_rank'        => $properties['split_rank'],
            'not_display'       => $properties['not_display'],
            'calc_type'         => $properties['calc_type'],
        ];
        if ($properties['calc_type'] == 0) {
            $item_settings['calc_operator'] = [];
            $item_settings['calc_operator']['operator']
                = $properties['operator'];
            $item_settings['calc_operator']['operand1_type']
                = $properties['operand1_type'];
            $item_settings['calc_operator']['operand1_value']
                = $properties['operand1_value'];
            $item_settings['calc_operator']['operand2_type']
                = $properties['operand2_type'];
            $item_settings['calc_operator']['operand2_value']
                = $properties['operand2_value'];
        } else {
            $item_settings['calc_total'] = [];
            $item_settings['calc_total']['values'] = [];
            if (is_array($properties['total_values'])) {
                foreach (array_keys($properties['total_values']) as $key) {
                    $item_settings['calc_total']['values'][$key]
                        = $properties['total_values'][$key];
                }
            }
        }


        //Add or Modify Item
        if ($G_INPUT['display'] == 'add-system'
            || $G_INPUT['display'] == 'add-operation'
        ) {
            //Add Form Item
            $item_id = $item_logic->add($properties['_fid'],
                $properties['foreign_key'],
                $properties['display_name'], $properties['code'],
                $option_settings, $description_settings,
                $item_settings, $properties['br'], $properties['separator'], 0,
                $properties['export_data']);

            $item_logic->setAttachFile($item_id, 1, 1);

            $message_type = 'form_layout_calc_numeric_add';
        } else {
            $before_modify_item = [];
            $before_modify_item = $item_logic->get($properties['_iid'],
                $properties['_fid']);

            //Modify Form Item
            $item_id = $item_logic->modify($properties['_iid'],
                $properties['_fid'], $properties['foreign_key'],
                $properties['display_name'], $properties['code'],
                $option_settings, $description_settings,
                $item_settings, $properties['br'], $properties['separator'], 0,
                $properties['export_data']);

            require_once('workflow/item_logic_base.csp');
            $item_logic_base = GRN_Workflow_Item_Logic_Base::getInstance();
            $item_list = $item_logic_base->getList($properties['_fid'],
                [], true);
            require_once('workflow/controller_util.csp');
            $item_util = GRN_Workflow_Item_Controller_Utility::getInstance();
            $branch_item_list
                = $item_util->eliminateNotAvailableBranchItems($properties['_fid'],
                $item_list);

            if ( ! array_key_exists($item_id, $branch_item_list)
                 || $before_modify_item['col_foreign_key']
                    != $properties['foreign_key']
            ) {
                //Remove Path Skip By Item ID
                require_once('workflow/path_skip.csp');
                $path_skip_logic = GRN_Workflow_PathSkips::getInstance();
                $path_skip_logic->removeByItemID($item_id);
            }

            $message_type = 'form_layout_calc_numeric_modify';
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Form_Layout_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //四則演算
            $operator = null;
            $operand1_type = null;
            $operand1_value = null;
            $operand2_type = null;
            $operand2_value = null;
            if (array_key_exists('calc_operator', $item_settings)) {
                if ($item_settings['calc_operator']['operator'] == '0') {
                    $operator = GRN_WORKFLOW_ITEM_CLAC_NUMERIC_OPERATOR_PLUS;
                } elseif ($item_settings['calc_operator']['operator'] == '1') {
                    $operator = GRN_WORKFLOW_ITEM_CLAC_NUMERIC_OPERATOR_MINUS;
                } elseif ($item_settings['calc_operator']['operator'] == '2') {
                    $operator
                        = GRN_WORKFLOW_ITEM_CLAC_NUMERIC_OPERATOR_MULTIPLICATION;
                } elseif ($item_settings['calc_operator']['operator'] == '3') {
                    $operator
                        = GRN_WORKFLOW_ITEM_CLAC_NUMERIC_OPERATOR_DIVISION;
                }

                $operand1_type
                    = $item_settings['calc_operator']['operand1_type'];
                $operand1_value
                    = $item_settings['calc_operator']['operand1_value'];
                $operand2_type
                    = $item_settings['calc_operator']['operand2_type'];
                $operand2_value
                    = $item_settings['calc_operator']['operand2_value'];
            }
            //合計
            $calc_total = null;
            if (array_key_exists('calc_total', $item_settings)) {
                $calc_total = implode(',',
                    $item_settings['calc_total']['values']);
            }

            //マイナスの表示方法
            if ($item_settings['minus_type'] == 0) {
                $inspection_minus_type = GRN_WORKFLOW_ITEM_NUMERIC_MINUS_TYPE_0;
            } elseif ($item_settings['minus_type'] == 1) {
                $inspection_minus_type = GRN_WORKFLOW_ITEM_NUMERIC_MINUS_TYPE_1;
            } elseif ($item_settings['minus_type'] == 2) {
                $inspection_minus_type = GRN_WORKFLOW_ITEM_NUMERIC_MINUS_TYPE_2;
            }

            //右寄せ表示
            $inspection_right_align = GRN_WORKFLOW_ITEM_NUMERIC_NOT_RIGHT_ALIGN;
            if ($item_settings['right_align'] == 1) {
                $inspection_right_align = GRN_WORKFLOW_ITEM_NUMERIC_RIGHT_ALIGN;
            }
            //桁区切りを表示
            $inspection_split_rank = GRN_WORKFLOW_ITEM_NUMERIC_NOT_SPLIT_RANK;
            if ($item_settings['split_rank'] == 1) {
                $inspection_split_rank = GRN_WORKFLOW_ITEM_NUMERIC_SPLIT_RANK;
            }
            //申請フォームに計算結果を表示しない
            $inspection_not_display = GRN_WORKFLOW_ITEM_NUMERIC_DISPLAY;
            if ($item_settings['not_display'] == 1) {
                $inspection_not_display = GRN_WORKFLOW_ITEM_NUMERIC_NOT_DISPLAY;
            }

            //計算内容
            if ($item_settings['calc_type'] == 0) {
                $inspection_calc_type
                    = GRN_WORKFLOW_ITEM_CLAC_NUMERIC_CLAC_TYPE_OPERATION;
            } elseif ($item_settings['calc_type'] == 1) {
                $inspection_calc_type
                    = GRN_WORKFLOW_ITEM_CLAC_NUMERIC_CLAC_TYPE_TOTAL;
            }

            //任意の文字列
            $inspection_option_string_type
                = $inspection->setStringType($option_settings['option_string_type']);
            //説明
            $inspection_description_editor
                = $inspection->setDescriptionEditor($description_settings['description_editor']);
            //アイコン
            $inspection_description_type
                = $inspection->setDescriptionType($description_settings['description_type']);
            //右隣への配置
            $inspection_br = $inspection->setBr($properties['br']);
            //書き出す項目にする 
            $inspection_export_data
                = $inspection->setFlag($properties['export_data']);

            $message_args['fid'] = $properties['_fid'];
            $message_args['iid'] = $item_id;
            $message_args['foreign_key'] = $properties['foreign_key'];
            $message_args['display_name'] = $properties['display_name'];
            $message_args['code'] = $properties['code'];
            $message_args['br'] = $inspection_br;

            $message_args['separator'] = $properties['separator'];
            $message_args['option_string']
                = $option_settings['option_string'];
            $message_args['option_string_type']
                = $inspection_option_string_type;
            $message_args['description']
                = $description_settings['description'];
            $message_args['description_type'] = $inspection_description_type;
            $message_args['description_editor']
                = $inspection_description_editor;
            $message_args['effective_figures']
                = $item_settings['effective_figures'];
            $message_args['minus_type'] = $inspection_minus_type;
            $message_args['right_align'] = $inspection_right_align;
            $message_args['split_rank'] = $inspection_split_rank;
            $message_args['not_display'] = $inspection_not_display;

            $message_args['calc_type'] = $inspection_calc_type;

            $message_args['calc_operator_operator'] = $operator;
            $message_args['calc_operator_operand1_type'] = $operand1_type;
            $message_args['calc_operator_operand1_value'] = $operand1_value;
            $message_args['calc_operator_operand2_type'] = $operand2_type;
            $message_args['calc_operator_operand2_value'] = $operand2_value;
            $message_args['calc_total_values'] = $calc_total;
            $message_args['export_data']
                = $inspection_export_data;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        $redirect_page = '';
        $redirect_params = [];
        switch ($G_INPUT['display']) {
            case 'add-system':
                $redirect_page = 'workflow/system/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-system':
                $redirect_page = 'workflow/system/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            case 'add-operation':
                $redirect_page = 'workflow/operation/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-operation':
                $redirect_page = 'workflow/operation/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            default:
                break;
        }

        //Redirect Next Page
        cb_redirect($redirect_page, $redirect_params);
    } else {
        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Return Page
        $return_page = '';
        switch ($G_INPUT['display']) {
            case 'add-system':
                $info_page = 'system/formlayout_add';
                $include_page
                    = '/code/doc_root/workflow/system/_formlayout_add.csp';
                $return_page = 'workflow/system/formlayout_add.tpl';
                break;
            case 'modify-system':
                $info_page = 'system/formlayout_modify';
                $include_page
                    = '/code/doc_root/workflow/system/_formlayout_modify.csp';
                $return_page = 'workflow/system/formlayout_modify.tpl';
                break;
            case 'add-operation':
                $info_page = 'operation/formlayout_add';
                $include_page
                    = '/code/doc_root/workflow/operation/_formlayout_add.csp';
                $return_page = 'workflow/operation/formlayout_add.tpl';
                break;
            case 'modify-operation':
                $info_page = 'operation/formlayout_modify';
                $include_page
                    = '/code/doc_root/workflow/operation/_formlayout_modify.csp';
                $return_page = 'workflow/operation/formlayout_modify.tpl';
                break;
            default:
                break;
        }

        //Assign Template Name
        $t->setPageInfo('../' . $info_page);

        //Create Item Information
        $item = grn_workflow_get_item_attribute($G_INPUT);

        $item['settings'] = [];
        $item['settings']['effective_figures']
            = @ $G_INPUT['effective_figures'];
        $item['settings']['minus_type'] = @ $G_INPUT['minus_type'];
        $item['settings']['right_align'] = @ $G_INPUT['right_align'];
        $item['settings']['split_rank'] = @ $G_INPUT['split_rank'];
        $item['settings']['not_display'] = @ $G_INPUT['not_display'];
        $item['settings']['calc_type'] = @ $G_INPUT['calc_type'];
        if ($G_INPUT['calc_type'] == 0) {
            $item['settings']['calc_operator'] = [];
            $item['settings']['calc_operator']['operator']
                = @ $G_INPUT['operator'];
            $item['settings']['calc_operator']['operand1_type']
                = @ $G_INPUT['operand1_type'];
            $item['settings']['calc_operator']['operand1_value']
                = @ $G_INPUT['operand1_value'];
            $item['settings']['calc_operator']['operand2_type']
                = @ $G_INPUT['operand2_type'];
            $item['settings']['calc_operator']['operand2_value']
                = @ $G_INPUT['operand2_value'];
        } else {
            $item['settings']['calc_total'] = [];
            $item['settings']['calc_total']['values'] = @ $G_INPUT['sITEM'];
        }
        $t->assign('item', $item);

        //include sharing codes with command_*
        include(cb_basedir() . $include_page);

        //Display Previous Page
        $t->display($return_page);
    }
}


