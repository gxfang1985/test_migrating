<?php

use grn\grn\access\service\AppAccess;
use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$page_title = grn_get_current_page_display_name();
$page_name = cb_get_pagename();
$t->assign('petition_title', $page_title);

$folder_id = null;
$petition_id = null;
$simple = false;
if (array_key_exists('fid', $G_INPUT)) {
    $folder_id = $G_INPUT['fid'];
}
if (array_key_exists('pid', $G_INPUT)) {
    $petition_id = $G_INPUT['pid'];
}
if (array_key_exists('simple', $G_INPUT)) {
    $simple = $G_INPUT['simple'];
}
$t->assign('fid', $folder_id);
$t->assign('pid', $petition_id);
$t->assign('simple', $simple);
/**
 * 制限事項
 * ・フォルダにフォルダリレーションがない
 */

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$user_id = $login->getOID();
$agent_id = '';

$no_check = false;
$folder_id_org = $folder_id;
$is_folder_deleted = false;

$is_approval_plan = false;
$is_public_petition = false;
if ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
    // 承認予定の判断
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
    if ($r == true) {
        $is_approval_plan = true;
    } else {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
} elseif ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    //公開の判断
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Category_Controller_Utility::getInstance();
    $r = $c->checkPublicByPetitionId($petition_id, false);
    if ($r == true) {
        $is_public_petition = true;
    } else {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
} else {
    //その他
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();

    //フォルダがあるかどうかの判断 
    $folder_array = $logic->getSpecific($folder_id);
    if (is_array($folder_array) && 0 !== count($folder_array)) {
        $folder_org = $logic->getFolder($folder_id);
        $folder_user_id = $folder_org['col_user'];
        if ($user_id != $folder_user_id) {
            //自分のフォルダではない 
            //申請IDだけで承認予定の判断を行う
            require_once('workflow/controller_util.csp');
            $c = GRN_Workflow_Petition_Controller_Utility::getInstance();
            $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
            if ($r == true) {
                $folder_id = GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID;
                $is_approval_plan = true;
            } else {
                //公開申請データの閲覧権限のチェック
                require_once('workflow/controller_util.csp');
                $c = GRN_Workflow_Category_Controller_Utility::getInstance();
                $r = $c->checkPublicByPetitionId($petition_id, false);
                if ($r == true) {
                    $folder_id = GRN_WORKFLOW_FOLDER_PUBLIC_ID;
                    $is_public_petition = true;
                }
            }
        }
    }
}

$is_agent_proxy = false;
if ($folder_id != GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
    && $folder_id != GRN_WORKFLOW_FOLDER_PUBLIC_ID
) {
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();

    $folder_array = $logic->getSpecific($folder_id);
    if (is_array($folder_array) && 0 !== count($folder_array)) {
        $folder_org = $logic->getFolder($folder_id);
        $folder_user_id = $folder_org['col_user'];
        if ($user_id != $folder_user_id) {
            //代理承認の検証
            if ($folder_org['col_folder_type']
                == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
            ) {
                require_once('workflow/config.csp');
                $configs = GRN_Workflow_Configs::getInstance();
                $config = $configs->getSystemConfig();
                if ($config->isProxyApproval($user_id, $folder_user_id)) {
                    // 代理承認
                    $agent_id = $user_id;
                    $user_id = $folder_user_id;
                    $is_agent_proxy = true;
                }
            }
        }
    }
}

if ($is_approval_plan == true || $is_public_petition == true
) {
    $no_check = true;
}

$folder = null;
require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil($page_name);
if ( ! is_null($folder_id) && strlen($folder_id) > 0) {
    $folder = $controller_util->getSimilarFolder($user_id, $folder_id);
    if (is_array($folder) && 0 < count($folder)) {
        $folder_id = $folder['_id'];
    }
    $t->assign('folder', $folder);
    $t->assign('fid', $folder_id);
}

//Get Petition and Item Data Controller Utility
require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                          => '_id',
    //Petition ID
    'petition_number'              => 'petition_number',
    //Petition Number
    'name'                         => 'name',
    //Petition Name
    'form'                         => 'form',
    //Petition Form ID
    'form_name'                    => 'form_name',
    //Petition Form Name
    'creator'                      => 'creator',
    //Petition Creator
    'creator_name'                 => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'          => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                        => 'ctime',
    //Petition Create Time
    'icon_type'                    => 'icon_type',
    //Petition Icon Type
    'icon_id'                      => 'icon_id',
    //Petition Icon ID
    'icon_url'                     => 'icon_url',
    //Petition Icon URL
    'status'                       => 'status',
    'transactor'                   => 'transactor',
    'transactor_name'              => 'transactor_name',
    'transactor_foreign_key'       => 'transactor_foreign_key',
    'user'                         => 'user',
    'user_name'                    => 'user_name',
    'user_foreign_key'             => 'user_foreign_key',
    'comment'                      => 'comment',
    'ptime'                        => 'ptime',
    'reapply'                      => 'reapply',
    'priority'                     => 'priority',
    'agent_user'                   => 'agent_user',
    'agent_user_name'              => 'agent_user_name',
    'agent_user_foreign_key'       => 'agent_user_foreign_key',
    'agent_transactor'             => 'agent_transactor',
    'agent_transactor_name'        => 'agent_transactor_name',
    'agent_transactor_foreign_key' => 'agent_transactor_foreign_key',
];

//Create Parameter Translation Map
$translation_map_item_data = [
    //Item Data Information
    'iid'                => 'itemdata_id',
    //Item Data ID
    'display_name'       => 'itemdata_display_name',
    //Item Data Display Name
    'code'               => 'itemdata_code',
    //Item Code
    'type'               => 'itemdata_type',
    //Item Data Type
    'option_string'      => 'itemdata_option_string',
    //Item Data Option String
    'option_string_type' => 'itemdata_option_string_type',
    //Item Data Option String Type
    'foreign_key'        => 'itemdata_foreign_key',
    //Item Data foreign_key
    'attach_file'        => 'itemdata_attach_file',
    //Item Data Attach File
    'attach_file_view'   => 'itemdata_attach_file_view',
    //Item Attach File View
    'settings'           => 'itemdata_settings',
    //Item Data Settings
    'br'                 => 'itemdata_br',
    //Item Data <br> Flag
    'separator'          => 'itemdata_separator',
    //Item Data Separator
    'required'           => 'itemdata_required',
    //Item Data Reuired Flag
    'list_index'         => 'itemdata_list_index',
    //Item Data List Index
    'number'             => 'itemdata_number',
    //Item Data Number Value
    'text'               => 'itemdata_text',
    //Item Data text Value
    //Item Data File Information
    'fid'                => 'itemdatafile_id',
    //Item Data File ID
    'file'               => 'itemdatafile_file',
    //Item Data File ID
    'files'              => 'itemdata_files',
    //Item Data File ID List
];

//Get Petition for view
$petition = $petition_util->getView($petition_id, $translation_map_petition);

$ptime = new CB_TimeStamp();
$ptime->unix_ts = $petition['ptime'];
$petition['ptime'] = $ptime;

$applicant = $uum->getUser($petition['user']);
if ($applicant) {
    $petition['user_valid'] = $applicant->get('valid');
}

if ($petition['agent_user']) {
    $applicant = $uum->getUser($petition['agent_user']);
    if ($applicant) {
        $petition['agent_user_valid'] = $applicant->get('valid');
    }
}

if (array_key_exists('transactor', $petition)) {
    $transactor = $uum->getUser($petition['transactor']);
    if ($transactor) {
        $petition['transactor_valid'] = $transactor->get('valid');
    }
}

if (array_key_exists('agent_transactor', $petition)) {
    $transactor = $uum->getUser($petition['agent_transactor']);
    if ($transactor) {
        $petition['agent_transactor_valid'] = $transactor->get('valid');
    }
}

//Assign Petition
$t->assign('petition', $petition);
if (isset($petition['form_name']) && (isset($petition['name']))) {
    $t->assign('page_title',
        $petition['form_name'] . '（' . $petition['name'] . '）');
} else {
    $t->assign('page_title', $page_title);
}
//  Check Petition Owner
if (GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID == @ $folder['col_folder_type']) {
    global $G_workflow_login_user;
    if ($petition['user'] != $G_workflow_login_user->getOID()
        && $petition['agent_user'] != $G_workflow_login_user->getOID()
    ) {
        // Petition Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_NOT_FOUND);
    }
}

//Get Form for View (if Active and Not Deleted.)
$category_id = null;
if ( ! is_null($petition['form'])) {
    $form_util = GRN_Workflow_Form_Controller_Utility::getInstance();

    //Create Parameter Translation Map
    $translation_map_form = [
        'fid'      => '_id',      //Form ID
        'active'   => 'active',   //Form Active
        'deleted'  => 'deleted',  //Form Deleted
        'category' => 'category', //Category ID
    ];

    //Get Form
    $option = [
        'condition' => [
            '0' => [
                'column'   => 'col_type',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form = $form_util->getView($petition['form'], $translation_map_form,
        null, $option);
    if ($form) {
        if ($form['active'] == 1 && $form['deleted'] != 1) {
            $category_id = $form['category'];
            if (0 == strlen($category_id)) {
                $category_id = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
            }
            //Assign Form
            $t->assign('form', $form);
        }
    }
}

$t->assign('cid', $category_id);

// 未分類でないカテゴリのアクセス権をチェック
$is_public = false;
$is_access = true;

// 公開一覧の場合、閲覧権のチェック
if (isset($G_INPUT['cid'])
    && isset($folder_id)
    && $folder_id == GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID
) {
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    $category_util->checkPublic($category_id, true);
    $user_id = $petition['user'];
    $is_public = true;
} elseif (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
    $is_access = false;
    if (0 < strlen($category_id)) {
        $check_user_id = $user_id;
        if ($user_id == $petition['agent_user']) {
            $check_user_id = $petition['user'];
        }

        if ( ! is_null($check_user_id) && strlen($check_user_id) > 0) {
            require_once('workflow/controller_util.csp');
            $category_util
                = GRN_Workflow_Category_Controller_Utility::getInstance();
            $is_access = $category_util->checkAccess($category_id, false,
                CB_DATABASE_NO_LOCK, false, $check_user_id);
        }
    }
}
$t->assign('is_access', $is_access);

//Get Item Data List for view
$item_data_list = $item_data_util->getListViewEx($translation_map_item_data,
    $petition_id);

//Unset Standard Item
$current_item_data = current($item_data_list);
unset($item_data_list[$current_item_data['iid']]);

//Create Item Layout
$current = null;
$previous = null;
foreach (array_keys($item_data_list) as $item_data_id) {
    //Check Calc Numeric Not Display Parameter
    if ($item_data_list[$item_data_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_data_list[$item_data_id]['settings']['not_display'] == 1) {
            unset($item_data_list[$item_data_id]);
            continue;
        }
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_data_list[$item_data_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_data_list[$item_data_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_data_list[$item_data_id];

    //Check Current or Sub Item
    if ($item_data_list[$item_data_id]['br'] == 1) {
        $current =& $item_data_list[$item_data_id];
        $current['sub_item_data_list'] = [];
        $current['total_required'] = $current['required'];
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
    } else {
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
        $current['sub_item_data_list'][$item_data_id]
            = $item_data_list[$item_data_id];
        $current['sub_item_data_count'] = count($current['sub_item_data_list']);
        if ($item_data_list[$item_data_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_data_list[$item_data_id]);
    }
}

//Check Draft Petition
$path_steps = [];
$path_step_total = 0;
$view = true;
$handle_mode = null;
$cancel_confirm = false;
$change_path_history = [];

if (GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID != @ $folder['col_folder_type']) {
    $path_info = $controller_util->getPathInfoForView($user_id,
        $petition['pid'], $petition, $folder_id, $no_check,
        CB_DATABASE_NO_LOCK);

    $path_steps = $path_info['path_steps'];
    $path_step_total = $path_info['path_step_total'];
    $view = $path_info['view'];
    $handle_mode = $path_info['handle_mode'];
    $cancel_confirm = $path_info['cancel_confirm'];
    $change_path_history = $path_info['change_path_history'];
}

//URL直打ち対策
$folder_type = $folder['col_folder_type'];
if ( ! is_null($folder_id) && strlen($folder_id) > 0) {
    $folder_id_tmp = $folder_id;
    if ($folder_id_org != GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
        && $folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
    ) {
        //強引に承認予定の判断をされた時
        $folder_id_tmp = $folder_id_org;
    }

    $folder_temp = $controller_util->getSimilarFolderEx($user_id,
        $folder_id_tmp, $petition_id);
    if ( ! is_null($folder_temp)) {
        $folder_type = $folder_temp['col_folder_type'];
    } else {
        // 削除されたユーザーの fid が URL パラメータで指定されている
        $is_folder_deleted = true;
    }
}

if ($is_public_petition != true) {
    //アクセス権を取得
    $access = $controller_util->checkAccess($petition['pid'], $folder_id,
        $folder_type, $user_id, $agent_id, CB_DATABASE_NO_LOCK);
    //アクセス権設定
    if ($access['access_type'] == 'creator') {
        //申請者で判定
        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
            ) {
                if ($item_data_list[$item_data_id]['attach_file_view'] == 1) {
                    $item_data_list[$item_data_id]['view_mode'] = 'view';
                } else {
                    $item_data_list[$item_data_id]['view_mode'] = 'disable';
                }
            }
        }
    } elseif ($access['access_type'] == 'path_step') {
        //経路で判定
        if ( ! is_null($access['access_path_step_id'])) {
            require_once('workflow/change_access_data.csp');
            $change_access_data_logic
                = GRN_Workflow_ChangeAccessData::getInstance();

            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    $change_access_data
                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                        $access['access_path_step_id']);
                    if ($change_access_data['col_view'] == 1) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }

                if (array_key_exists('sub_item_data_list',
                        $item_data_list[$item_data_id])
                    && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                ) {
                    foreach (
                        array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                        as $sub_item_data_id
                    ) {
                        $change_access_data
                            = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                            $access['access_path_step_id']);
                        if ($change_access_data['col_view'] == 1) {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            }
        } else {
            //すべて非表示
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    $item_data_list[$item_data_id]['view_mode'] = 'disable';
                }
            }
        }
    } elseif ($access['access_type'] == 'all_view') {
        //すべて表示
        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
            ) {
                $item_data_list[$item_data_id]['view_mode'] = 'view';
            }
        }
    } else {
        //すべて非表示

        // 処理中の経路 ID を探索
        $in_process = null;
        if (is_array($path_steps) && count($path_steps)) {
            foreach (array_keys($path_steps) as $path_step_id) {
                if (isset($path_steps[$path_step_id]['in_process'])
                    && true === $path_steps[$path_step_id]['in_process']
                ) {
                    $in_process = $path_step_id;
                    break;
                }
            }
            unset($path_step_id);
        }

        // Check view/edit Right to Item.
        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = GRN_Workflow_ChangeAccessData::getInstance();

        if ( ! is_null($in_process)) {
            $users = $path_steps[$in_process]['uids'];
            $user_step_id = null;
            if (($r = array_search($user_id, $users)) === false) {
                //現在の経路にいない
                //経路にいるかどうかの判定
                //申請者の方向に向かって判定
                $path_step_ids_tmp = array_keys($path_steps);
                $path_step_ids = [];
                foreach ($path_step_ids_tmp as $path_step_id) {
                    if ($path_step_id == $in_process) {
                        $path_step_ids[] = $path_step_id;
                        break;
                    }
                    $path_step_ids[] = $path_step_id;
                }
                $path_step_ids = array_reverse($path_step_ids);

                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step_temp =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step_temp['col_activate']
                         || $path_step_temp['col_skip']
                    ) {
                        // アクティブではないか省略の経路ステップは外す
                        continue;
                    }
                    $users = $path_step_temp['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
            } else {
                $user_step_id = $in_process;
            }
            if ( ! is_null($user_step_id)) {
                foreach (array_keys($item_data_list) as $item_data_id) {
                    $change_access
                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                        $user_step_id);
                    if ($change_access['col_view'] == 1) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }

                    if (array_key_exists('sub_item_data_list',
                            $item_data_list[$item_data_id])
                        && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                    ) {
                        foreach (
                            array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                            as $sub_item_data_id
                        ) {
                            //$change_access = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'], $in_process);
                            $change_access
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                $user_step_id);
                            if ($change_access['col_view'] == 1) {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                }
            } else {
                //どこの経路にもいない
                foreach (array_keys($item_data_list) as $item_data_id) {
                    if ($item_data_list[$item_data_id]['foreign_key']
                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_DATE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_FILE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                    ) {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }
            }
        } else {
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    $item_data_list[$item_data_id]['view_mode'] = 'disable';
                }
            }
        }
    }
} else {
    //すべて表示
    foreach (array_keys($item_data_list) as $item_data_id) {
        if ($item_data_list[$item_data_id]['foreign_key']
            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_DATE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_FILE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
        ) {
            $item_data_list[$item_data_id]['view_mode'] = 'view';
        }
    }
}
$users_info = [];
require_once("grn/controller.csp");

//Rename username if username is changed.
foreach (array_keys($path_steps) as $path_key) {
    $path =& $path_steps[$path_key];
    $users = GRN_ControllerUtil::getUserInfoToShowUserName($path['uids'],
        $login);
    $users_info += $users;
    foreach (array_keys($path['users']) as $user_key) {
        if (array_key_exists($path['users'][$user_key]['_id'], $users)) {
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = $users[$path['users'][$user_key]['_id']]['col_display_name'];
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
        }
    }
    $path['user_count'] = count($path['users']);
}

//GTM-529 GRB-15046 tv Tuning

$t->assign('users_info', $users_info);
//end
//Assign Item Data List
$t->assign('item_data_list', $item_data_list);

if ($is_approval_plan) {
    //承認予定の場合は、強制的に表示
    $handle_mode = 'view_only';
    $view = true;
}
if ($is_public_petition) {
    //公開の場合は、強制的に表示
    $handle_mode = 'view_only';
    $view = true;
}

if ($user_id == @ $petition['creator'] || $user_id == @ $petition['user']
    || $user_id == @ $petition['agent_user']
) {
    $handle_mode = null;
    $view = true;
}
if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
    //例外的に代理でみてはいけない申請
    if ($access['access_view'] == false) {
        $view = false;
    }
}

require_once('workflow/auto_schedule_register_logic.csp');
$auto_register_logic = GRN_Workflow_Auto_Schedule_Register_Logic::getInstance();
$autoRegisterObj = $auto_register_logic->getByPetitionId($petition_id);
$login_id = cb_get_login_user()->getOID();

$applicant_array = [$petition['agent_user'], $petition['user']];
$applicant_and_agent = array_filter($applicant_array);

if (AppAccess::isAppAvailableExternalAccess('schedule')
    && $autoRegisterObj
    && in_array($login_id, $applicant_and_agent)
    && ($petition['status'] == GRN_WORKFLOW_STATUS_ACCEPTANCE
        || $petition['status'] == GRN_WORKFLOW_STATUS_FINISHED)
) {
    $schedule_id = $autoRegisterObj->getScheduleId();
    if ($schedule_id) {
        $t->assign('auto_register_status', 'success');
        $t->assign('schedule_id', $schedule_id);
    } else {
        $t->assign('auto_register_status', 'failed');
    }
} else {
    $t->assign('auto_register_status', 'no');
}

$t->assign('schedule_available_for_external',
    AppAccess::isAppAvailable('schedule'));

$t->assign('path_steps', $path_steps);
$t->assign('path_step_total', $path_step_total);
$t->assign('view', $view);
$t->assign('handle_mode', $handle_mode);
$t->assign('cancel_confirm', $cancel_confirm);
$t->assign('change_path_history', $change_path_history);

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$change_path_history_total = $logic->getCount($petition_id);
$t->assign('change_path_history_total', $change_path_history_total);

if ($is_agent_proxy) {
    $folder_id = GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID;
}

if ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    $page_infos = [
        'index' => [
            'fid' => $folder_id,
            'sf'  => 1,
            'cid' => $category_id
        ],
        'view'  => null
    ];
} elseif ($is_folder_deleted) {
    $page_infos = [
        'index' => ['sf' => 1],
        'view'  => null
    ];
} else {
    $page_infos = [
        'index' => [
            'fid' => $folder_id,
            'sf'  => 1
        ],
        'view'  => null
    ];
}

$args = [
    'folder_type' => cb_msg('grn.workflow',
        "col_folder_type_{$folder['col_folder_type']}")
];
//petition delete info
$delete_info = [
    'title'      => grn_get_page_display_name('workflow/delete', $args),
    'page'       => 'workflow/delete.tpl',
    'no_confirm' => false,
    'data'       => [
        'folder'   => $folder,
        'fid'      => $folder_id,
        'pid'      => $petition_id,
        'simple'   => $simple,
        'petition' => $petition
    ],
    'handler'    => 'lnk_delete',
];
$t->assign('delete_info', $delete_info);

$translation_map_form
    = ['is_customization_active' => 'is_customization_active'];
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$form_for_view = $form_util->getView($petition['form'], $translation_map_form,
    null, [
        'condition' => [
            '0' => [
                'column'   => 'col_type',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ]);
$apply_customization
    = CustomizationUtil::applyCustomization($form_for_view['is_customization_active'],
    $t);
if ($apply_customization) {
    if ($view) {
        $item_data_list[] = $current_item_data;
        $customization_petition
            = DataConverterForJsPetitionData::covertDataPetitionInformation(
            $petition, $item_data_list, $path_steps, $petition['priority']);
        $screen_properties = [];
        $do_set_step_code = false;
        $folder_user = ! is_null($folder_type) ? $folder_type
            : $folder_id;
        switch ($folder_user) {
            case GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID:
                $screen_properties['draft'] = true;
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
            case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
            case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
                foreach ($path_steps as $path_step_code) {
                    $users = $path_step_code['uids'];
                    if (false !== array_search($user_id, $users)) {
                        if (GRN_WORKFLOW_CIRCULAR
                            == $path_step_code['col_type']
                        ) {
                            $screen_properties['viewer']
                                = GRN_WORKFLOW_VIEW_TYPE_ACKNOWLEDGEMENT;
                        } else {
                            $screen_properties['viewer']
                                = GRN_WORKFLOW_VIEW_TYPE_APPROVER;
                        }
                        $screen_properties['stepCode']
                            = $path_step_code['col_code'];

                    }
                    if (cb_at($path_step_code, 'in_process')) {
                        break;
                    }
                }
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID:
                $screen_properties['viewer'] = GRN_WORKFLOW_VIEW_TYPE_APPROVER;
                $path_steps_for_code = array_reverse($path_steps);
                foreach ($path_steps_for_code as $path_step_code) {
                    $users = $path_step_code['uids'];
                    if (cb_at($path_step_code, 'in_process')) {
                        break;
                    }
                    if (false !== array_search($user_id, $users)) {
                        $screen_properties['stepCode']
                            = $path_step_code['col_code'];
                    }

                }

                break;
            case GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID:
                $screen_properties['viewer'] = GRN_WORKFLOW_VIEW_TYPE_PUBLIC;
                break;
        }
        $customization_data
            = CustomizationUtil::getDetailCustomizationData($customization_petition,
            $screen_properties);

        // Assign customization information
        grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
            new grn\grn\customization\workflow\WorkflowJsApiLoader($petition['form'],
                $petition_id, $folder_id),
            new grn\grn\customization\workflow\RequestDetailShowJsApiEvent(["data" => $customization_data])
        );
    }
}

$site_position = $controller_util->makeSitePosition('workflow/', $page_infos);
$t->assign('site_position', $site_position);

$t->display("{$page_name}.tpl");


