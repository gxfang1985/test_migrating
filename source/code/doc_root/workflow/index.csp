<?php

global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Set Application Name
global $G_workflow_app_name;
$t->assign('app_name', $G_workflow_app_name);

//Get Parameters
require_once('workflow/resources.csp');
$folder_id = @ $G_INPUT['fid'];    // Folder ID
$petition_id = @ $G_INPUT['ptid']; // Petition ID
$category_id = @ $G_INPUT['cid'];  // Category ID

$sort = @ $G_INPUT['sort'];
$sort_result = @ $G_INPUT['sort_result'];

//Login User
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ( ! $user) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession(cb_get_pagename());
if (@ $G_INPUT['sf']) {
    if ($G_INPUT['sf'] == '1') {
        //Load Sort and Condition from Session
        $sort = $session->get('sort');
        $sort_result = $session->get('sort_result');
    } else {
        //Load Condition Only from Session
        $session->set('sort', $sort);
        $session->set('sort_result', $sort_result);
        $G_INPUT['sf'] = '1';
    }
} else {
    //Save Sort to Session
    $session->set('sort', $sort);
}

//Create Parameter Translation for Folder
$translation_map_folder = [
    'fid'  => '_id',            //Folder ID
    'name' => 'name',           //Folder Name
    'type' => 'folder_type',    //Folder Type
];

//Create Parameter Translation for Petition
$translation_map_petition = [
    'fid'             => 'f__id',                 //Folder ID
    'name'            => 'f_col_name',            //Folder Name
    'type'            => 'f_col_folder_type',     //Folder Type
    'ptid'            => 'p__id',                 //Petition ID
    'petition_number' => 'p_col_petition_number', //Petition Number
    'form_name'       => 'p_col_form_name',       //Form Name
    'petition_name'   => 'p_col_name',            //Petition Name
    'user_id'         => 'p_col_user',            //Create User ID
    'user_name'       => 'p_col_user_name',       //Create User Name
    'transactor_id'   => 'p_col_transactor',      //Transactor User ID
    'transactor_name' => 'p_col_transactor_name', //Transactor User Name
    'status'          => 'p_col_status',          //Petition Status
    'ctime'           => 'p_col_ctime',           //Create Time
    'mtime'           => 'p_col_mtime',           //Modify Time
    'ptime'           => 'p_col_ptime',           //Transact Time
    'status'          => 'p_col_status',          //Petition Status
    'icon_type'       => 'p_col_icon_type',       //Petition Icon Type
    'icon_id'         => 'p_col_icon_id',         //Petition Icon ID
    'icon_url'        => 'p_col_icon_url',        //Petition Icon URL
    'priority'        => 'p_col_priority',        //Petition priority
    'agent_user_id'   => 'p_col_agent_user',      //Create Agent User ID
    'agent_user_name' => 'p_col_agent_user_name', //Create Agent User Name
];

//Get Controller Utilities
require_once('workflow/controller_util.csp');
$folder_util = GRN_Workflow_Folder_Controller_Utility::getInstance();
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();

//Check Initialize User
$initialize_flag = false;
if ($folder_util->isInitializeUser($user->getOID())) {
    $initialize_flag = true;
    $folder_util->initializeUser($user->getOID());
}

//Get Folder List for View
$folder_list = $folder_util->getListView($translation_map_folder,
    $user->getOID());
$folder_list_for_view = [];
foreach ($folder_list as $id => $folder) {
    switch ($folder['type']) {
        case GRN_WORKFLOW_FOLDER_TYPE_NEW_ID:
            $folder_list_for_view['new_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
            $folder_list_for_view['in_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
            $folder_list_for_view['out_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
            $folder_list_for_view['finish_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
            $folder_list_for_view['unprocessed_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID:
            $folder_list_for_view['temp_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID:
            $folder_list_for_view['proxy_approval_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID:
            $folder_list_for_view['public_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID:
            $folder_list_for_view['approval_plan_folder'] = $folder;
            break;
    }
}

// Public Folder : Check if ROOT category is public or not.
$category_id = $category_id ? $category_id : GRN_WORKFLOW_CATEGORY_ROOT_ID;
if (array_key_exists('public_folder', $folder_list_for_view)
    && $folder_id != $folder_list_for_view['public_folder']['fid']
    && $category_util->checkPublic($category_id, false)
) {
    $t->assign('category', true);
}

//Check Manage
$is_manage = $category_util->evaluateManage();

if (0 == strlen($folder_id)) {
    //Default Folder ID
    $folder_id = $folder_list_for_view['new_folder']['fid'];
}

if ($folder_id == $folder_list_for_view['finish_folder']['fid']
    || $folder_id == $folder_list_for_view['unprocessed_folder']['fid']
) {
    //Default Folder ID
    $folder_id = $folder_list_for_view['new_folder']['fid'];
}

//Check Folder ID
if ( ! array_key_exists($folder_id, $folder_list)) {
    if ($folder_id == GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID
        || $folder_id == GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID
        || $folder_id == GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID
    ) {
        //Default Folder ID
        $folder_id = $folder_list_for_view['new_folder']['fid'];
    } else {
        //Folder ID Error
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
    }
}

require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$config = $manager->getUserConfig($user);

//Get Current Folder Folder Relation
if ( ! $initialize_flag) {
    if ($folder_id == $folder_list_for_view['new_folder']['fid']) {
        //Create New Folder Data(Unprocessed Folder Data & Finish Folder Data)
        $limit = $config->getListMax();

        require_once('workflow/folder_logic_base.csp');
        $folder_logic_base = GRN_Workflow_Folder_Logic_Base::getInstance();

        //Get Current Folder Data
        $folder_list_for_view['current_folder'] =& $folder_list[$folder_id];

        //Get Unprocessed Folder Data
        $unprocessed_folder_id
            = $folder_list_for_view['unprocessed_folder']['fid'];

        //Multi N Navi
        $prefix = 'unprocessed_';

        require_once('grn/multi_controller.csp');
        $utility = new GRN_MultiControllerUtil();
        $offset = $utility->getNaviStartPosition($prefix);
        $utility->setNaviStartPosition($offset, $prefix);
        $params = [];
        $params['fid'] = $unprocessed_folder_id;
        if ($sort) {
            $params['sort'] = $sort;
        }

        if (is_null($sort)) {
            $sort = 'ctd';
        }

        $change_params_for_view = [];
        $change_params_for_view['fid'] = $unprocessed_folder_id;
        $t->assign('button_params', $change_params_for_view);

        $order_by = [];
        switch ($sort) {
            case 'pnd':
                $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'DESC';
                break;
            case 'pnu':
                $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'ASC';
                break;
            case 'ctd':
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                break;
            case 'ctu':
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'ASC';
                break;
            case 'fnd':
                $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'DESC';
                break;
            case 'fnu':
                $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'ASC';
                break;
            default:
                $sort = 'ctd';
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                break;
        }
        $order[GRN_WORKFLOW_TABLE_PETITION] = $order_by;

        $unprocessed_folderinfo
            = $folder_util->getViewExOrder($translation_map_petition,
            $user->getOID(), $unprocessed_folder_id, $offset, $limit + 1,
            $order);
        if ($unprocessed_folderinfo != false) {
            $folder_list_for_view['unprocessed_folder']
                = $unprocessed_folderinfo;

            $isExistsNextUnprocessedFolderPage
                = count(@$folder_list_for_view['unprocessed_folder']['folderrelation'])
                  > $limit;
            if ($isExistsNextUnprocessedFolderPage) {
                array_pop($folder_list_for_view['unprocessed_folder']['folderrelation']);
            }

            $folder_list_for_view['unprocessed_folder']['count'] = $limit;

            if (isset($folder_list_for_view['unprocessed_folder']['folderrelation'])) {
                $users_id = []; //GRB-15046
                foreach (
                    array_keys($folder_list_for_view['unprocessed_folder']['folderrelation'])
                    as $folderrelation_id
                ) {
                    $petition
                        =& $folder_list_for_view['unprocessed_folder']['folderrelation'][$folderrelation_id];

                    $applicant = $uum->getUser($petition['user_id']);
                    $users_id[] = $petition['user_id']; //GRB-15046
                    if ($applicant) {
                        $petition['user_valid'] = $applicant->get('valid');
                    }

                    if (array_key_exists('transactor_id', $petition)) {
                        $transactor = $uum->getUser($petition['transactor_id']);
                        if ($transactor) {
                            $petition['transactor_valid']
                                = $transactor->get('valid');
                        }
                    }
                }
                //start GRB-15046
                require_once("grn/controller.csp");
                $users_info
                    = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
                    $user);
                $t->assign('users_info', $users_info);
                //end GRB-15046
            }
        } else {
            // In case of the return value of getViewExOrder() is false.
            // It means the count of document under (unprocessed) is zero.
            $isExistsNextUnprocessedFolderPage = false;
        }

        if (isset($folder_list_for_view['unprocessed_folder']['folderrelation'])) {
            $navi_info_for_view = $utility->makeSimpleNaviInformation($offset,
                $limit,
                count($folder_list_for_view['unprocessed_folder']['folderrelation']),
                $isExistsNextUnprocessedFolderPage, $params, $prefix);
        } else {
            $navi_info_for_view = $utility->makeSimpleNaviInformation($offset,
                $limit, 0, $isExistsNextUnprocessedFolderPage, $params,
                $prefix);
        }

        $t->assign('unprocessed_navi_info', $navi_info_for_view);

        //Get Finish Folder Data
        $finish_folder_id = $folder_list_for_view['finish_folder']['fid'];

        //Multi N Navi
        $prefix = 'finish_';
        require_once('grn/multi_controller.csp');
        $utility = new GRN_MultiControllerUtil();
        $offset = $utility->getNaviStartPosition($prefix);

        if (is_null($sort_result)) {
            $sort_result = 'ctd';
        }

        $change_params_for_view = [];
        $change_params_for_view['fid'] = $finish_folder_id;
        $t->assign('button_params', $change_params_for_view);

        $order_by = [];
        switch ($sort_result) {
            case 'pnd':
                $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'DESC';
                break;
            case 'pnu':
                $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'ASC';
                break;
            case 'ctd':
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                break;
            case 'ctu':
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'ASC';
                break;
            case 'fnd':
                $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'DESC';
                break;
            case 'fnu':
                $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'ASC';
                break;
            default:
                $sort_result = 'ctd';
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                break;
        }
        $order[GRN_WORKFLOW_TABLE_PETITION] = $order_by;

        $finish_folderinfo
            = $folder_util->getViewExOrder($translation_map_petition,
            $user->getOID(), $finish_folder_id, $offset, $limit + 1, $order);

        if ($finish_folderinfo != false) {
            $folder_list_for_view['finish_folder'] = $finish_folderinfo;

            $isExistsNextFinishFolderPage
                = count(@$folder_list_for_view['finish_folder']['folderrelation'])
                  > $limit;
            if ($isExistsNextFinishFolderPage) {
                array_pop($folder_list_for_view['finish_folder']['folderrelation']);
            }

            $folder_list_for_view['finish_folder']['count'] = $limit;

            if (isset($folder_list_for_view['finish_folder']['folderrelation'])) {
                $users_id = []; //GRB-15046
                foreach (
                    array_keys($folder_list_for_view['finish_folder']['folderrelation'])
                    as $folderrelation_id
                ) {
                    $petition
                        =& $folder_list_for_view['finish_folder']['folderrelation'][$folderrelation_id];

                    $applicant = $uum->getUser($petition['user_id']);
                    $users_id[] = $petition['user_id']; //GRB-15046
                    if ($applicant) {
                        $petition['user_valid'] = $applicant->get('valid');
                    }

                    if (array_key_exists('transactor_id', $petition)) {
                        $transactor = $uum->getUser($petition['transactor_id']);
                        if ($transactor) {
                            $petition['transactor_valid']
                                = $transactor->get('valid');
                        }
                    }

                    $controller_util
                        = new GRN_Workflow_ControllerUtil(cb_get_pagename());

                    // 申請IDリストの経路情報を取得
                    $path_steps
                        = $controller_util->getPathInfo($petition['ptid'],
                        false, CB_DATABASE_NO_LOCK);
                    // 最終承認経路ステップを取得
                    $path_step
                        =& $controller_util->getLastAcceptancePathStep(current($path_steps));
                    $transactor = $path_step['users'];
                    $transactor_num = count($transactor);
                    // 処理中の経路ステップの処理者を表示
                    if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
                        $transactor = array_slice($transactor, 0,
                            GRN_WORKFLOW_SHOW_MAX_USER_NUM);
                    }
                    $folder_list_for_view['finish_folder']['folderrelation'][$folderrelation_id]['transactor_num']
                        = $transactor_num;
                    $folder_list_for_view['finish_folder']['folderrelation'][$folderrelation_id]['transactor']
                        = $transactor;

                    $delete_info_multi_finish = [
                        'title'        => grn_get_page_display_name('workflow/delete_multi',
                            [
                                'folder_type' => cb_msg('grn.workflow',
                                    'col_folder_type_4')
                            ]),
                        'page'         => 'workflow/delete_multi.tpl',
                        'no_confirm'   => false,
                        'data'         => [
                            'folder_name' => cb_msg('grn.workflow',
                                'col_folder_type_4'),
                            'fid'         => $finish_folder_id
                        ],
                        'handler'      => [
                            'btn_delete_multi_finish1',
                            'btn_delete_multi_finish2'
                        ],
                        'multi_target' => 'pids[]',
                        'form_target'  => 'workflow/index/finished',
                    ];
                    $t->assign('delete_info_multi_finish',
                        $delete_info_multi_finish);

                }
                //start GRB-15046
                require_once("grn/controller.csp");
                $users_info
                    = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
                    $user);
                $t->assign('users_info', $users_info);
                //end GRB-15046
            }
            $utility->setNaviStartPosition($offset, $prefix);
            $params = [];
            $params['fid'] = $finish_folder_id;
            if ($sort_result) {
                $params['sort_result'] = $sort_result;
            }
        } else {
            // In case of the return value of getViewExOrder() is false.
            // It means the count of document under (finished) is zero.
            $isExistsNextFinishFolderPage = false;
        }

        if (isset($folder_list_for_view['finish_folder']['folderrelation'])) {
            $navi_info_for_view = $utility->makeSimpleNaviInformation($offset,
                $limit,
                count($folder_list_for_view['finish_folder']['folderrelation']),
                $isExistsNextFinishFolderPage, $params, $prefix);
        } else {
            $navi_info_for_view = $utility->makeSimpleNaviInformation($offset,
                $limit, 0, $isExistsNextFinishFolderPage, $params, $prefix);
        }
        $t->assign('finish_navi_info', $navi_info_for_view);
    } else {
        //Create ETC Folder Data
        $limit = $config->getListMax();

        //N Navi
        require_once('grn/controller.csp');
        $utility = new GRN_ControllerUtil();
        $offset = $utility->getNaviStartPosition();
        $utility->setNaviStartPosition($offset);
        $params = [];
        $params['fid'] = $folder_id;
        if ($sort) {
            $params['sort'] = $sort;
        }
        if ($category_id) {
            $params['cid'] = $category_id;
        }

        $change_params_for_view = [];
        $change_params_for_view['fid'] = $folder_id;
        $t->assign('button_params', $change_params_for_view);

        // Public folder.
        $category_for_view = [];
        if (array_key_exists('public_folder', $folder_list_for_view)
            && $folder_id == $folder_list_for_view['public_folder']['fid']
        ) {
            //Create Parameter Translation for Category
            $translation_map_category = [
                'cid'         => '_id',         // Category ID
                'name'        => 'name',        // Category Name
                'foreign_key' => 'foreign_key', // Category Foreign key
                'memo'        => 'memo',        // Category Memo
                'parent'      => 'parent',      // Category Parent
                'list_index'  => 'list_index',  // Category List Index
            ];
            $category_util
                = GRN_Workflow_Category_Controller_Utility::getInstance();
            // 現カテゴリ・子カテゴリ・親カテゴリの情報取得
            $category_for_view = $category_util->getViewPublic($category_id,
                $translation_map_category, GRN_WORKFLOW_PUBLIC_TYPE_PERSONAL);
            $category_for_view['children']
                = $category_util->getChildListViewPublic($category_id,
                $translation_map_category, GRN_WORKFLOW_PUBLIC_TYPE_PERSONAL);
            if ($category_id != GRN_WORKFLOW_CATEGORY_ROOT_ID) {
                $category_for_view['ancestors']
                    = $category_util->getTreeListViewPublic($category_id,
                    $translation_map_category,
                    GRN_WORKFLOW_PUBLIC_TYPE_PERSONAL, true, false);
                foreach (array_keys($category_for_view['ancestors']) as $key) {
                    $category_for_view['parent_name']
                        = $category_for_view['ancestors'][$key]['name'];
                }
            }
            if (count($category_for_view) > 0) {
                $t->assign('category', $category_for_view);
                $t->assign('is_show_no_nonparty', true);
            }
        }

        if (is_null($sort)) {
            if ($folder_id == $folder_list_for_view['temp_folder']['fid']) {
                $sort = 'utd';
            } else {
                $sort = 'ctd';
            }
        }

        $order_by = [];
        switch ($sort) {
            case 'pnd':
                $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'DESC';
                break;
            case 'pnu':
                $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'ASC';
                break;
            case 'ctd':
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                break;
            case 'ctu':
                $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'ASC';
                break;
            case 'fnd':
                $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'DESC';
                break;
            case 'fnu':
                $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'ASC';
                break;
            case 'utd':
                $order_by[GRN_WORKFLOW_COLUMN_MTIME] = 'DESC';
                break;
            case 'utu':
                $order_by[GRN_WORKFLOW_COLUMN_MTIME] = 'ASC';
                break;
            case 'mtd':
                $order_by[GRN_WORKFLOW_COLUMN_CREATOR_NAME] = 'DESC';
                break;
            case 'mtu':
                $order_by[GRN_WORKFLOW_COLUMN_CREATOR_NAME] = 'ASC';
                break;
            default:
                if ($folder_id == $folder_list_for_view['temp_folder']['fid']) {
                    $sort = 'utd';
                    $order_by[GRN_WORKFLOW_COLUMN_MTIME] = 'DESC';
                } else {
                    $sort = 'ctd';
                    $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                }
                break;
        }
        if ($sort == 'mtd' || $sort == 'mtu') {
            $order[GRN_WORKFLOW_TABLE_FOLDER] = $order_by;
        } else {
            $order[GRN_WORKFLOW_TABLE_PETITION] = $order_by;
        }

        if (array_key_exists('proxy_approval_folder', $folder_list_for_view)
            && $folder_id
               == $folder_list_for_view['proxy_approval_folder']['fid']
        ) {
            $translation_map_petition['fuser_id'] = 'f_col_user';
        }
        $folder_relation_count
            = $folder_util->getFolderRelationCount($user->getOID(), $folder_id,
            $category_id, true);
        if ($folder_relation_count > 0) {
            $folder_list_for_view['current_folder']
                = $folder_util->getViewExOrder($translation_map_petition,
                $user->getOID(), $folder_id, $offset, $limit + 1, $order, false,
                CB_DATABASE_DEFAULT_LOCK, $category_id);
            $isExistsNextCurrentFolderPage
                = count(@$folder_list_for_view['current_folder']['folderrelation'])
                  > $limit;
            if ($isExistsNextCurrentFolderPage) {
                array_pop($folder_list_for_view['current_folder']['folderrelation']);
            }

            $folder_list_for_view['current_folder']['count'] = $limit;
        } else {
            $isExistsNextCurrentFolderPage = false;
            $folder_list_for_view['current_folder'] = null;
        }

        if ($folder_id != $folder_list_for_view['temp_folder']['fid']
            && isset($folder_list_for_view['current_folder']['folderrelation'])
        ) {
            $controller_util
                = new GRN_Workflow_ControllerUtil(cb_get_pagename());
            $users_id = []; //GRB-15046
            foreach (
                array_keys($folder_list_for_view['current_folder']['folderrelation'])
                as $folderrelation_id
            ) {
                $petition
                    =& $folder_list_for_view['current_folder']['folderrelation'][$folderrelation_id];
                $applicant = $uum->getUser($petition['user_id']);
                $users_id[] = $petition['user_id']; //GRB-15046 (for Applicant)
                if (array_key_exists('fuser_id',
                    $folder_list_for_view['current_folder'])
                ) {
                    $users_id[]
                        = $folder_list_for_view['current_folder']['fuser_id']; //GRB-15046 ( for Delegator)
                }
                if ($applicant) {
                    $petition['user_valid'] = $applicant->get('valid');
                }

                if (array_key_exists('transactor_id', $petition)) {
                    $transactor = $uum->getUser($petition['transactor_id']);
                    if ($transactor) {
                        $petition['transactor_valid']
                            = $transactor->get('valid');
                    }
                }

                // 申請IDリストの経路情報を取得
                $path_steps = $controller_util->getPathInfo($petition['ptid'],
                    false, CB_DATABASE_NO_LOCK);
                $transactor = null;
                if ($petition['status'] == GRN_WORKFLOW_STATUS_FINISHED) {
                    // 最終承認経路ステップを取得
                    $path_step
                        =& $controller_util->getLastAcceptancePathStep(current($path_steps));
                    $transactor = $path_step['users'];
                } else {
                    // 処理中の経路ステップを取得
                    $path_steps_current = current($path_steps);
                    $path_step
                        =& $controller_util->getInProcessPathStep($path_steps_current);
                    $transactor = [];
                    if (false !== $path_step) {
                        $transactor = $path_step['users'];
                    }
                }

                if (GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                    == $petition['status']
                ) {
                    foreach ($transactor as $path_step_user) {
                        if (GRN_WORKFLOW_RESULT_CONFIRM
                            == $path_step_user['col_result']
                        ) {
                            $folder_list_for_view['current_folder']['folderrelation'][$folderrelation_id]['cancel_confirm']
                                = true;
                            break;
                        }
                    }
                }

                $transactor_num = count($transactor);
                // 処理中の経路ステップの処理者を表示
                if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
                    $transactor = array_slice($transactor, 0,
                        GRN_WORKFLOW_SHOW_MAX_USER_NUM);
                }

                $folder_list_for_view['current_folder']['folderrelation'][$folderrelation_id]['transactor_num']
                    = $transactor_num;
                $folder_list_for_view['current_folder']['folderrelation'][$folderrelation_id]['transactor']
                    = $transactor;
                if (isset($transactor[0])) {
                    $users_id[]
                        = $transactor[0]['col_user']; //GRB-15046 ( for Processors)
                }
            }

            //start GRB-15046
            require_once("grn/controller.csp");
            $users_info
                = GRN_ControllerUtil::getUserInfoToShowUserName(array_unique($users_id),
                $user);
            $t->assign('users_info', $users_info);
            //end GRB-15046
        }

        if (isset($folder_list_for_view['current_folder']['folderrelation'])) {
            $navi_info_for_view = $utility->makeSimpleNaviInformation($offset,
                $limit,
                count($folder_list_for_view['current_folder']['folderrelation']),
                $isExistsNextCurrentFolderPage, $params);
        } else {
            $navi_info_for_view = $utility->makeSimpleNaviInformation(0,
                $limit, 0, $isExistsNextCurrentFolderPage, $params);
            $folder_list_for_view['current_folder']
                =& $folder_list[$folder_id];
            $folder_list_for_view['current_folder']['count'] = $limit;
        }
        $t->assign('navi_info', $navi_info_for_view);
    }
} else {
    $folder_id = $folder_list_for_view['new_folder']['fid'];
    $folder_list_for_view['current_folder']
        =& $folder_list_for_view['new_folder'];
    $folder_list_for_view['unprocessed_folder']
        =& $folder_list_for_view['unprocessed_folder'];
    $folder_list_for_view['unprocessed_folder']['count'] = 0;
    $folder_list_for_view['finish_folder']
        =& $folder_list_for_view['finish_folder'];
    $folder_list_for_view['finish_folder']['count'] = 0;

    //Multi N Navi
    require_once('grn/multi_controller.csp');
    //$limit = GRN_WORKFLOW_N_NAVI_LIMIT;
    $limit = $config->getListMax();
    $prefix = 'unprocessed_';
    $utility = new GRN_MultiControllerUtil();
    $utility->setNaviStartPosition(0, $prefix);
    $params = [];
    $params['fid'] = $folder_list_for_view['unprocessed_folder']['fid'];
    $navi_info_for_view = $utility->makeSimpleNaviInformation(0, $limit, 0,
        false, $params, $prefix);
    $t->assign('unprocessed_navi_info', $navi_info_for_view);
    $prefix = 'finish_';
    $utility->setNaviStartPosition(0, $prefix);
    $params = [];
    $params['fid'] = $folder_list_for_view['finish_folder']['fid'];
    $navi_info_for_view = $utility->makeSimpleNaviInformation(0, $limit, 0,
        false, $params, $prefix);
    $t->assign('finish_navi_info', $navi_info_for_view);
}

require_once('workflow/controller_util.csp');
$util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$is_proxy_petition = $util->isAvailableSendProxy($user->getOID());
unset($util);

//Assign Display Infomation
$t->assign('is_manage', $is_manage);

require_once('grn/ui.csp');
$ucm = GRN_UIConfigManager::getInstance();
$uc = $ucm->getUserConfig($user);
$t->assign('name_width', $config->getNameWidth());//GRN_WORKFLOW_NAME_WIDTH
$t->assign('subject_width_fix', GRN_WORKFLOW_SUBJECT_WIDTH);
$t->assign('subject_width', $uc->getSubjectWidth());
$t->assign('show_user_num', GRN_WORKFLOW_SHOW_MAX_USER_NUM);
$t->assign('is_initialize', $initialize_flag);
$t->assign('folder_id', $folder_id);
$t->assign('category_id', $category_id);
$t->assign('folder_list', $folder_list_for_view);
$t->assign('is_proxy_petition', $is_proxy_petition);
$t->assign('is_root', ($category_id == GRN_WORKFLOW_CATEGORY_ROOT_ID));
$t->assign('sort', $sort);
$t->assign('sort_result', $sort_result);

//page title
$page_title = grn_get_current_page_display_name() . "（"
              . $folder_list_for_view['current_folder']['name'] . "）";
$t->assign('page_title', $page_title);

// delete multi
require_once('workflow/folder_logic.csp');
$logic = GRN_Workflow_Folder_Logic::getInstance();
$folder = $logic->get($user->getOID(), $folder_id);
if ( ! is_array($folder) || 0 == count($folder)) {
    // ログインユーザーはフォルダの所有者でない
    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
}
$args = [];
$folder_type = $folder['col_folder_type'];
$folder_name = '';
if ($folder_type == 2 || $folder_type == 3 || $folder_type == 6) {
    $args = [
        'folder_type' => cb_msg('grn.workflow',
            "col_folder_type_{$folder_type}")
    ];
    $folder_name = $args['folder_type'];
}
$delete_info_multi = [
    'title'        => grn_get_page_display_name('workflow/delete_multi', $args),
    'page'         => 'workflow/delete_multi.tpl',
    'no_confirm'   => false,
    'data'         => [
        'folder_name' => $folder_name,
        'fid'         => $folder_id
    ],
    'handler'      => [
        'btn_delete_multi1',
        'btn_delete_multi2'
    ],
    'multi_target' => 'pids[]',
    'form_target'  => 'workflow/index',
];
$t->assign('delete_info_multi', $delete_info_multi);

//site position
$site_position = [['page' => '', 'name' => $page_title]];
$t->assign('site_position', $site_position);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


