<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;


    //Create Parameter Translation Map
    $translation_map = [
        'cid' => '_cid',
        'fid' => '_fid',
        'pid' => '_pid',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    //Define petition and form util
    $petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリか確認
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $properties['_cid']) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($properties['_cid'], true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($properties['_cid'], true, CB_DATABASE_NO_LOCK);

    //Create Parameter Translation Map
    require_once('workflow/category_logic.csp');
    $category_logic = GRN_Workflow_Category_Logic::getInstance();
    $category_id = $category_logic->getIdByFormId($properties['_fid']);
    if ( ! empty($properties['_cid']) && $category_id != $properties['_cid']) {
        //Petition Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
    }

    //Get Petition for View
    $translation_map_petition = [
        'pid' => '_id',
    ];
    $petition_for_view = $petition_util->getView($properties['_pid'],
        $translation_map_petition, $properties['_fid']);
    //Delete Petition
    require_once('workflow/petition_logic.csp');
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
    $column_list = ['_id'];
    //$options = array('condition'=>array());
    //$options['condition'][] = array('column'=>'col_status', 'value'=>array(0,1,2,3,4,6,7), 'operator'=>'IN');
    //$petition = $petition_logic->get($properties['_pid'], null, $column_list, $options);
    //$petition = $petition_logic->get($properties['_pid'], null, $column_list);
    //GRN2-3586
    $petition = $petition_logic->get($properties['_pid']);
    //GRN2-3586
    if (is_array($petition) && 0 < count($petition)) {
        // 通知を削除
        $controller_util = new GRN_Workflow_ControllerUtil();
        $path_steps = $controller_util->getPathInfo($petition['_id']);
        $path_step = current($path_steps);
        $uids = [];
        while ($path_step) {
            if ($path_step['col_activate'] && ! $path_step['col_skip']) {
                if ( ! array_key_exists('uids', $path_step)) {
                    assert('FALSE');
                }
                $uids = array_merge($uids, $path_step['uids']);
//                $uids += $path_step['uids'];
            }
            $path_step =& $path_step['next'];
        }

        require_once('workflow/change_path_history.csp');
        $logic = GRN_Workflow_ChangePathHistories::getInstance();
        $columns = ['_id'];
        $change_path_histories = $logic->getListByPetitionId($petition['_id'],
            $columns);
        if (is_array($change_path_histories)
            && 0 < count($change_path_histories)
        ) {
            $logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
            $columns = [
                '_id',
                'col_user'
            ];
            $deleted_users = $logic->getList(array_keys($change_path_histories),
                null, $columns);
            foreach ($deleted_users as $deleted_user) {
                $uids[] = $deleted_user['col_user'];
            }
        }
        //GRN2-3586
        if (array_search($petition['col_user'], $uids) === false) {
            $uids[] = $petition['col_user'];
        }
        if (strlen($petition['col_agent_user'] > 0)
            && array_search($petition['col_agent_user'], $uids) === false
        ) {
            $uids[] = $petition['col_agent_user'];
        }
        //end GRN2-3586
        if (is_array($uids) && 0 < count($uids)) {
            require_once('workflow/notification.csp');
            $logic = GRN_Workflow_Notification::getInstance();
            $logic->removeList($uids, $petition['_id']);
        }

        $petition_logic->delete($properties['_pid']);

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Petition_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'petition_delete';
            $message_args['pid'] = $properties['_pid'];

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }
    }

    //Redirect Next Page
    cb_redirect('workflow/operation/petition_list', [
        'cid' => $properties['_cid'],
        'fid' => $properties['_fid'],
        'sf'  => 1
    ]);
}


