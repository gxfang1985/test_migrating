<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Validation Check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $page_name = 'workflow/operation/path_condition_modify';
    SmartyValidate::register_form($page_name);

    $page_title = grn_get_page_display_name($page_name);

    $cid = null;
    $fid = null;
    $sid = null;
    $pid = null;
    $pcid = null;
    if (array_key_exists('cid', $G_INPUT)) {
        $cid = $G_INPUT['cid'];
    }
    if (array_key_exists('fid', $G_INPUT)) {
        $fid = $G_INPUT['fid'];
    }
    if (array_key_exists('sid', $G_INPUT)) {
        $sid = $G_INPUT['sid'];
    }
    if (array_key_exists('pid', $G_INPUT)) {
        $pid = $G_INPUT['pid'];
    }
    if (array_key_exists('pcid', $G_INPUT)) {
        $pcid = $G_INPUT['pcid'];
    }

    require_once('workflow/path_condition_logic.csp');
    $logic = GRN_Workflow_Path_Condition_Logic::getInstance();
    $skip_row = $logic->getPathSkipEx($sid);
    if ( ! $skip_row) {
        //Path Skip Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PATH_SKIP_NOT_FOUND);
    }

    //Validate After POST
    if (SmartyValidate::is_valid($G_INPUT, $page_name)) {
        // ログインユーザーが運用管理権限を持つか確認
        require_once('workflow/controller_util.csp');
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        if ( ! $category_util->evaluateManage()) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
        }

        // 未分類カテゴリか確認
        if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $cid) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
        }

        // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
        $category_util->checkManage($cid, true, CB_DATABASE_NO_LOCK);
        $category_util->checkAccess($cid, true, CB_DATABASE_NO_LOCK);

        //Check Category Access
        require_once('workflow/path_condition_logic.csp');
        $condition_logic = GRN_Workflow_Path_Condition_Logic::getInstance();
        $condition_logic->chkCategoryByFormId($cid, $fid);

        //Create Parameter Translation Map
        $translation_map = [
            'name'     => 'col_name',
            'number'   => 'col_number',
            'operator' => 'col_operator',
            'option'   => 'col_option',
            'sid'      => 'col_path_skip',
        ];

        //Do PathConditon Parameter Translation
        $props = [];
        foreach ($translation_map as $view_name => $model_name) {
            $props[$model_name] = @ $G_INPUT[$view_name];
        }

        $psids = [];
        if (array_key_exists('psids', $G_INPUT)) {
            $psids = $G_INPUT['psids'];
        } else {
            cb_throw_error(E_GRN_WRKF_PATH_SKIP_DATA_EMPTY);
        }

        require_once('workflow/path.csp');
        $path_step_logic = GRN_Workflow_PathSteps::getInstance();
        $columns = ['_id'];
        $path_steps = $path_step_logic->getList($pid, null, null,
            $columns);

        $add_path_steps = [];
        $deleted_path_steps = [];
        foreach ($path_steps as $path_step) {
            $path_step_id = $path_step['_id'];
            if (false === array_search($path_step_id, $psids)) {
                $add_path_steps[$path_step_id] = $path_step;
            } else {
                $deleted_path_steps[$path_step_id] = $path_steps;
            }
        }

        require_once('workflow/path_condition.csp');
        $path_condition_step_logic
            = GRN_Workflow_PathConditionSteps::getInstance();
        $columns = [
            '_id',
            'col_path_condition',
            'col_path_step'
        ];
        $path_condition_steps
            = $path_condition_step_logic->getListByPathConditionId([$pcid],
            $columns);

        $deleted_path_condition_steps = [];
        foreach ($path_condition_steps as $path_condition_step) {
            $path_condition_step_id = $path_condition_step['_id'];
            if (array_key_exists($path_condition_step['col_path_step'],
                $deleted_path_steps)
            ) {
                $deleted_path_condition_steps[$path_condition_step_id]
                    = $path_condition_step;
            }
        }

        $props = [];
        foreach ($translation_map as $view_name => $model_name) {
            $props[$model_name] = @ $G_INPUT[$view_name];
        }

        $cols[$model_name] = @ $G_INPUT[$model_name];
        $cols = [];

        // Modify PathCondition
        require_once('workflow/path_condition.csp');
        $condition_logic = GRN_Workflow_PathConditions::getInstance();
        $condition_logic->modify($pcid, $props);

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Path_Condition_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'path_condition_modify';

            if ($props['col_number'] !== null
                || $props['col_option'] !== null
            ) {
                //数値/ラジオボタン
                switch ($props['col_operator']) {
                    case 1:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_SAME;
                        break;
                    case 2:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_DIFFERENT;
                        break;
                    case 3:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_BIGGER;
                        break;
                    case 4:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_ABOVE;
                        break;
                    case 5:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_SMALLER;
                        break;
                    case 6:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_FOLLOWING;
                        break;
                }
            } else {
                //チェックボックス
                switch ($props['col_operator']) {
                    case 1:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_CHECKED;
                        break;
                    case 2:
                        $inspection_col_operator
                            = GRN_WORKFLOW_PATH_CONDITION_OPERATOR_NON_CHECKED;
                        break;
                }
            }

            $message_args['pcid'] = $pcid;
            $message_args['name'] = $props['col_name'];
            $message_args['number'] = $props['col_number'];
            $message_args['operator'] = $inspection_col_operator;
            $message_args['option'] = $props['col_option'];
            $message_args['path_skip'] = $props['col_path_skip'];

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        // Modify PathConditionStep
        $step_logic = GRN_Workflow_PathConditionSteps::getInstance();
        $columns = $step_logic->getColumnsInfo();

        $properties = [];
        foreach ($add_path_steps as $add_path_step) {
            $properties[] = [
                'col_path_condition' => $pcid,
                'col_path_step'      => $add_path_step['_id']
            ];
        }

        if (is_array($properties) && 0 < count($properties)) {
            $path_condition_step_logic->addList(array_keys($columns['default']),
                $properties);
        }

        if (is_array($deleted_path_condition_steps)
            && 0 < count($deleted_path_condition_steps)
        ) {
            $path_condition_step_logic->removeList(array_keys($deleted_path_condition_steps));
        }

        //Unregister SmartyValidatte
        SmartyValidate::unregister_form($page_name);

        //Redirect Next Page
        cb_redirect('workflow/operation/path_condition_view',
            ['cid' => $cid, 'fid' => $fid, 'sid' => $sid, 'pcid' => $pcid]);
    } else {
        //Include Sharing Code
        include('_path_condition_command.csp');

        // Assign input values
        $assign_input_values = [
            'name'     => cb_at($G_INPUT, 'name'),
            'number'   => cb_at($G_INPUT, 'number'),
            'operator' => cb_at($G_INPUT, 'operator'),
            'option'   => cb_at($G_INPUT, 'option')
        ];
        $t->assign($assign_input_values);

        //Assign Template Name
        $t->setPageInfo($page_name);
        //Display Previous Page
        $t->display($page_name . '.tpl');
    }
}


