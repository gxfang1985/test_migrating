<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Create Parameter Translation Map
    $translation_map = [
        'ids' => '_ids',
        'cid' => '_cid',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Check Category Exists
    require_once('workflow/resources.csp');
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $properties['_cid']) {
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($properties['_cid']);
    }

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリか確認
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $properties['_cid']) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($properties['_cid'], true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($properties['_cid'], true, CB_DATABASE_NO_LOCK);

    //Validate form is belong to current category
    $form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
    //Create Parameter Translation Map
    $translation_map_form = [
        'fid'  => '_id',      //Form ID
        'path' => 'path',
    ];
    //Create Delete Form ID List
    $form_id_list = [];
    require_once('workflow/form_logic.csp');
    $form_logic = GRN_Workflow_Form_Logic::getInstance();
    $form_list =& $form_logic->getList($properties['_cid']);
    foreach ($properties['_ids'] as $form_id) {
        //Get form for view
        $form_for_view = $form_util->getView($form_id, $translation_map_form,
            $properties['_cid']);
        if (in_array($form_id, array_keys($form_list))) {
            $form_id_list[] = $form_id;
        }
    }

    //Delete Multi Form
    $option['condition'][] = [
        'column'   => '_id',
        'value'    => $form_id_list,
        'operator' => 'IN'
    ];
    $forms = $form_logic->getList(null, [], $option);
    $pids = [];
    foreach ($forms as $form) {
        $pids[] = $form['col_path'];
    }

    if (count($form_id_list) != 0) {
        $form_logic->deleteMulti($form_id_list);
    }

    if (is_array($pids) && 0 < count($pids)) {
        // 専用経路なら削除する
        require_once('workflow/path.csp');
        $path_logic = GRN_Workflow_Paths::getInstance();
        $columns = [
            '_id',
            'col_type'
        ];
        $paths = $path_logic->getList($pids, $columns);
        $pids = [];
        foreach ($paths as $path) {
            if (GRN_WORKFLOW_PRIVATE_PATH == $path['col_type']) {
                $pids[] = $path['_id'];
            }
        }
        if (is_array($pids) && 0 < count($pids)) {
            $path_logic->removeList($pids);
        }
    }

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Form_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'form_delete_multi';
        $message_args['fids'] = $form_id_list;
        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Redirect Next Page
    cb_redirect('workflow/operation/form_list',
        ['cid' => $properties['_cid'], 'sf' => 1]);
}


