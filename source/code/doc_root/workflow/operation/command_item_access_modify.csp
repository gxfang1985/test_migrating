<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    $category_id = null;
    if (array_key_exists('cid', $G_INPUT)) {
        $category_id = $G_INPUT['cid'];
    }
    $form_id = null;
    if (array_key_exists('fid', $G_INPUT)) {
        $form_id = $G_INPUT['fid'];
    }
    $item_id = null;
    if (array_key_exists('iid', $G_INPUT)) {
        $item_id = $G_INPUT['iid'];
    }
    $psids_view = [];
    if (array_key_exists('psids_view', $G_INPUT)) {
        $psids_view = $G_INPUT['psids_view'];
    }
    $psids_edit = [];
    if (array_key_exists('psids_edit', $G_INPUT)) {
        $psids_edit = $G_INPUT['psids_edit'];
    }
    $col_attach_file = null;
    if (array_key_exists('col_attach_file', $G_INPUT)) {
        $col_attach_file = $G_INPUT['col_attach_file'];
    }
    $col_attach_file_view = null;
    if (array_key_exists('col_attach_file_view', $G_INPUT)) {
        $col_attach_file_view = $G_INPUT['col_attach_file_view'];
    }

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリか確認
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }
    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

    require_once('workflow/form_logic.csp');
    $logic = GRN_Workflow_Form_Logic::getInstance();
    $form = $logic->get($form_id, $category_id);
    if ( ! is_array($form) || 0 == count($form)) {
        // フォームがない
        cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
    }
    $path_id = $form['col_path'];

    require_once('workflow/item_logic.csp');
    $logic = GRN_Workflow_Item_Logic::getInstance();
    $item = $logic->get($item_id, $form_id);

    if ($item['col_foreign_key'] == 'grn.workflow.numeric'
        && ! empty($psids_edit)
    ) {
        $item_util = GRN_Workflow_Item_Controller_Utility::getInstance();
        if ( ! $item_util->checkNumberItemAvailableForEditing($form_id,
            $item_id)
        ) {
            cb_throw_error(E_GRN_WRKF_INVALID_NUMBER_EDIT);
        }
    }

    require_once('workflow/path.csp');
    $logic = GRN_Workflow_PathSteps::getInstance();
    $columns = ['_id'];
    $path_step_list =& $logic->getList($path_id, null,
        GRN_WORKFLOW_PATH_STEP_TYPE_APPROVAL, $columns);

    require_once('workflow/change_access.csp');
    $logic = GRN_Workflow_ChangeAccess::getInstance();
    $columns = [
        '_id',
        'col_item',
        'col_path_step',
        'col_view',
        'col_edit',
    ];
    $change_accesses = $logic->getListByItemId($item_id, $columns,
        'col_path_step');

    $records = [];
    $col_path_steps = [];
    foreach ($path_step_list as $path_step) {
        $view = null;
        $edit = null;
        if (in_array($path_step['_id'], $psids_view)) {
            $view = '1';
        }
        if (in_array($path_step['_id'], $psids_edit)) {
            $edit = '1';
        }
        $records[$path_step['_id']] = [
            'col_item'      => $item_id,
            'col_path_step' => $path_step['_id'],
            'col_view'      => $view,
            'col_edit'      => $edit,
        ];
        $col_path_steps[] = $path_step['_id'];
    }
    if (0 < count($change_accesses)) {
        $delete_records = [];
        foreach ($change_accesses as $key => $change_access) {
            if ( ! array_key_exists($key, $delete_records)) {
                $delete_records[$key] = $change_access['_id'];
            }
        }
        $logic->removeList($delete_records);
    }

    if (0 < count($records)) {
        $columns = [
            'col_item',
            'col_path_step',
            'col_view',
            'col_edit',
        ];
        $logic->addList($columns, $records);
    }

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Item_Access_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'item_access_modify';
        $message_args['fid'] = $form_id;
        $message_args['iid'] = $item_id;
        $message_args['psid'] = '';
        $message_args['view'] = $inspection->setFlag($col_attach_file_view);
        $message_args['edit'] = $inspection->setFlag($col_attach_file);
        //Record Inspection
        $inspection->record($message_type, $message_args);

        foreach ($records as $key => $record) {
            $message_args = [];
            $message_args['fid'] = $form_id;
            $message_args['iid'] = $item_id;
            $message_args['psid'] = $record['col_path_step'];
            $message_args['view'] = $inspection->setFlag($record['col_view']);
            $message_args['edit'] = $inspection->setFlag($record['col_edit']);
            $inspection->record($message_type, $message_args);
        }

    }

    require_once('workflow/item_logic.csp');
    $logic = GRN_Workflow_Item_Logic::getInstance();
    $logic->setAttachFile($item_id, $col_attach_file, $col_attach_file_view);

    cb_redirect('workflow/operation/item_access_list',
        ['cid' => $category_id, 'fid' => $form_id]);
}


