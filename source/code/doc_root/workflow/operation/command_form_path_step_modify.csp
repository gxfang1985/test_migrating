<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    $page_name = 'workflow/operation/form_path_step_modify';

    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($page_name);

    $category_id = null;
    if (array_key_exists('cid', $G_INPUT)) {
        $category_id = $G_INPUT['cid'];
    }
    $form_id = null;
    if (array_key_exists('fid', $G_INPUT)) {
        $form_id = $G_INPUT['fid'];
    }
    $path_step_id = null;
    if (array_key_exists('psid', $G_INPUT)) {
        $path_step_id = $G_INPUT['psid'];
    }

    require_once('workflow/form_logic.csp');
    $logic = GRN_Workflow_Form_Logic::getInstance();
    $form = $logic->get($form_id, $category_id);
    if ( ! is_array($form) || 0 == count($form)) {
        // フォームがない
        cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
    }
    $path_id = $form['col_path'];

    if (SmartyValidate::is_valid($G_INPUT, $page_name)) {
        // ログインユーザーが運用管理権限を持つか確認
        require_once('workflow/controller_util.csp');
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        if ( ! $category_util->evaluateManage()) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
        }

        // 未分類カテゴリか確認
        if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
        }

        // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
        $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

        require_once('workflow/path.csp');
        $logic = GRN_Workflow_Paths::getInstance();
        $columns = [
            '_id',
            'col_type'
        ];
        $path = $logic->get($path_id, $columns);
        if ( ! is_array($path) || 0 == count($path)) {
            // 経路がない
            cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH);
        }
        if (GRN_WORKFLOW_PRIVATE_PATH != $path['col_type']) {
            // 専用経路でない経路は変更できない
            cb_throw_error(E_GRN_WRKF_DENY_MODIFY_NOT_PRIVATE_PATH);
        }

        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login =& $uum->getLoginUser();

        $properties = [
            'col_modifier'             => $login->getOID(),
            'col_modifier_name'        => $login->get('display_name'),
            'col_modifier_foreign_key' => $login->get('foreign_key'),
            'col_mtime'                => time()
        ];
        $logic->modify($path_id, $properties);

        $logic = GRN_Workflow_PathSteps::getInstance();
        $columns = [
            '_id',
            'col_path'
        ];
        $path_step = $logic->get($path_id, $path_step_id, $columns);
        if ( ! is_array($path_step) || 0 == count($path_step)) {
            // 経路ステップがない
            cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH_STEP);
        }

        $G_INPUT['col_path'] = $path_id;
        $columns_info = $logic->getColumnsInfo();
        require_once('workflow/controller_util.csp');
        $controller_util = new GRN_Workflow_ControllerUtil($page_name);
        $properties = $controller_util->validateProperties($G_INPUT,
            $columns_info);

        $properties['col_code']
            = grn\workflow\CustomizationUtil::trimCode($properties['col_code']);
        if ($logic->isDuplicationPathStepCode($properties['col_path'],
            [$properties['col_code']],
            $path_step_id)
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_COLLISION_PATH_STEP_CODE);
        }

        $logic->modify($path_step_id, $properties);

        //監査する(経路)
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Path_Step_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'path_step_modify';

            $inspection_type = $inspection->setType($properties['col_type']);
            $inspection_acceptance_type
                = $inspection->setAcceptanceType($properties['col_acceptance_type']);
            $inspection_change_path
                = $inspection->setChangePath($properties['col_change_path']);

            $message_args['psid'] = $path_step_id;
            $message_args['role'] = $properties['col_role'];
            $message_args['code'] = $properties['col_code'];
            $message_args['path'] = $properties['col_path'];
            $message_args['change_path'] = $inspection_change_path;
            $message_args['type'] = $inspection_type;
            $message_args['acceptance_type'] = $inspection_acceptance_type;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        SmartyValidate::unregister_form($page_name);
        cb_redirect('workflow/operation/form_path_step_view', [
            'cid'  => $category_id,
            'fid'  => $form_id,
            'psid' => $path_step_id
        ]);
    } else {
        $t->setPageInfo($page_name);
        $page_title = grn_get_page_display_name($page_name);
        $t->assign('page_title', $page_title);

        include('_form_path_step_modify.csp');

        // Assign input values
        $assign_input_values = [
            'cid'                 => $category_id,
            'fid'                 => $form_id,
            'psid'                => $path_step_id,
            'col_type'            => cb_at($G_INPUT, 'col_type'),
            'col_acceptance_type' => cb_at($G_INPUT, 'col_acceptance_type'),
            'col_role'            => cb_at($G_INPUT, 'col_role'),
            'col_code'            => cb_at($G_INPUT, 'col_code'),
            'col_change_path'     => cb_at($G_INPUT, 'col_change_path')
        ];
        $t->assign($assign_input_values);

        $t->display("{$page_name}.tpl");
    }
}


