<?php

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
//Get Folder ID from Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_petition_list
    =& $session_manager->getSession('workflow/operation/petition_list');
$folder_id = $session_petition_list->get('folder_id');

//Get Parameter
$category_id = @ $G_INPUT['cid'];         //Category ID
$form_id = @ $G_INPUT['fid'];         //Form ID
$petition_id = @ $G_INPUT['pid'];         //Petition ID
$path_step_id = @ $G_INPUT['psid'];        //Path Step ID
$simple = @ $G_INPUT['simple'];      //Simple Flag

/**
 * 制限事項
 * ・カテゴリが未分類
 * ・ログインユーザーはカテゴリの運用管理権限を持たない
 * ・ログインユーザーはカテゴリのアクセスを制限されている
 * ・申請の進行状況は下書き、取り戻し
 */

// ログインユーザーが運用管理権限を持つか確認
require_once('workflow/controller_util.csp');
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
if ( ! $category_util->evaluateManage()) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
}

// 未分類カテゴリか確認
if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
}

// 未分類カテゴリ以外は運用管理権限とアクセス権を確認
$category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
$category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

//Get Petition and Item Data Controller Utility
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'             => '_id',                  //Petition ID
    'petition_number' => 'petition_number',      //Petition Number
    'name'            => 'name',                 //Petition Name
    'form_name'       => 'form_name',            //Petition Form Name
    'icon_type'       => 'icon_type',            //Petition Icon Type
    'icon_id'         => 'icon_id',              //Petition Icon ID
    'icon_url'        => 'icon_url',             //Petition Icon URL
    'creator'         => 'creator',              //Petition Creator
    'status'          => 'status',               //Petition Status
    'form'            => 'form',                 //Petition Form
];

//Create Parameter Translation Map
$translation_map_form = [
    'fid'      => '_id',                  //Form ID
    'category' => 'category',             //Category ID
];

//Get Petition for View
$petition = $petition_util->getView($petition_id, $translation_map_petition);

//Check Category ID
$option = [
    'condition' => [
        '0' => [
            'column'   => 'col_type',
            'value'    => '0',
            'operator' => '='
        ]
    ]
];
$form = $form_util->getView($petition['form'], $translation_map_form,
    $category_id, $option);
/*
switch($petition['status'])
{
case GRN_WORKFLOW_STATUS_TEMPORARY:
case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    break;
default:
    break;
}
*/
//Get Path Step List for View
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$path_steps = $controller_util->getPathInfo($petition_id);
$controller_util->ekePathInfo($path_steps, GRN_WORKFLOW_OPERATOR_ADMIN,
    $petition['status']);
$path_step =& $path_steps[$path_step_id];
if (GRN_WORKFLOW_STATUS_REJECTION <= $petition['status']
    && GRN_WORKFLOW_STATUS_REMAND != $petition['status']
) {
    $path_step['not_modify'] = true;
}
$users_id = [];
//Rename username if username is changed.
foreach (array_keys($path_steps) as $path_key) {
    $path =& $path_steps[$path_key];
    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum =& $G_container_base->getInstance('uum');
    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($path['uids'], $columns);
    $users_id += $path['uids'];
    foreach (array_keys($path['users']) as $user_key) {
        if (array_key_exists($path['users'][$user_key]['_id'], $users)) {
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = $users[$path['users'][$user_key]['_id']]['col_display_name'];
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
        }
    }
    $path['user_count'] = count($path['users']);
}
//Assign Display Infomation
//Assign Catehgory ID
$t->assign('category_id', $category_id);
//Assign Catehgory ID
$t->assign('form_id', $form_id);
//Assign Petition ID
$t->assign('petition_id', $petition_id);
//Assign Path Step ID
$t->assign('path_step_id', $path_step_id);

//Assign Petition
$t->assign('petition', $petition);

//Assign Path Steps
$t->assign('path_step', $path_step);

//Assign Simple
$t->assign('simple', $simple);

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $folder_id,
            'sf'   => 1
        ],
        [
            'page' => 'workflow/operation/petition_list',
            'name' => grn_get_page_display_name('workflow/operation/petition_list'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'sf'   => 1
        ],
        [
            'page' => 'workflow/operation/petition_view',
            'name' => grn_get_page_display_name('workflow/operation/petition_view'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'pid'  => $petition_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);
require_once("grn/controller.csp");
$users_info
    = GRN_ControllerUtil::getUserInfoToShowUserName(array_values(array_unique($users_id)),
    $grn_uum->getLoginUser());
$t->assign('users_info', $users_info);
//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

