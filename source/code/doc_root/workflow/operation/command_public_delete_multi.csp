<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    //Get Parameters
    $node_id = @ $G_INPUT['nid'];    //Category ID
    $eid = @ $G_INPUT['eid'];    //Delete Element ID

    $node_id = $node_id ? $node_id : GRN_WORKFLOW_CATEGORY_ROOT_ID;

    //Get Category Controller Utility
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();

    //Check Manage Right
    $category_util->checkManage($node_id, true, CB_DATABASE_NO_LOCK);
    /*
    //Check Public Right
    $category_util->checkPublic($node_id, TRUE, CB_DATABASE_NO_LOCK);
    */

    //Check Delete Element Count
    if ( ! is_array($eid)) {
        //Redirect Previous Page
        cb_redirect('workflow/operation/public_list', $G_INPUT);
    }

    //Get Category Public Logic
    require_once('workflow/public_logic.csp');
    $category_public_logic = GRN_Workflow_Category_Public_Logic::getInstance();

    //Get UUM Instance
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');

    //Get Dynamic Role List
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    //監査
    $uids = [];
    $gids = [];
    $srids = [];
    $drids = [];

    require_once('grn/public_resources.csp');
    foreach ($eid as $item) {
        $ids = explode(':', $item);
        if (count($ids) < 2) {
            continue;
        }

        $id = $ids[1];
        switch ($ids[0]) {
            case 'user':
                if ($uum->getUser($id)) {
                    //Delete User Public
                    $category_public_logic->removePublic($node_id, $id,
                        GRN_WORKFLOW_PUBLIC_TARGET_TYPE_USER);
                    //監査
                    $uids[] = $id;
                }
                break;

            case 'group':
                if ($uum->getGroup($id)) {
                    //Delete Group Public
                    $category_public_logic->removePublic($node_id, $id,
                        GRN_WORKFLOW_PUBLIC_TARGET_TYPE_GROUP);
                    //監査
                    $gids[] = $id;
                }
                break;

            case 'static_role':
                if ($uum->getStaticRole($id)) {
                    //Delete Static Role Public
                    $category_public_logic->removePublic($node_id, $id,
                        GRN_WORKFLOW_PUBLIC_TARGET_TYPE_STATIC_ROLE);
                    //監査
                    $srids[] = $id;
                }
                break;

            case 'dynamic_role':
                if (array_key_exists($id, $dynamic_roles)) {
                    //Delete Dynamic Role Public
                    $category_public_logic->removePublic($node_id, $id,
                        GRN_WORKFLOW_PUBLIC_TARGET_TYPE_DYNAMIC_ROLE);
                    //監査
                    $drids[] = $id;
                }
                break;
        }
    }

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Category_Public_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'public_delete_multi';

        $message_args['cid'] = $node_id;
        $message_args['uids'] = $uids;
        $message_args['gids'] = $gids;
        $message_args['srids'] = $srids;
        $message_args['drids'] = $drids;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    $params = $G_INPUT;
    unset($params['eid']);

    //Redirect Next Page
    cb_redirect('workflow/operation/public_list', $params);
}

