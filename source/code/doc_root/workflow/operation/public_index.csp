<?php

global $G_INPUT;

require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Set Application Name
global $G_workflow_app_name;
$t->assign('app_name', $G_workflow_app_name);

//Get Parameters
$node_id = @ $G_INPUT['nid'];   //Category ID
$node_id = $node_id ? $node_id : GRN_WORKFLOW_CATEGORY_ROOT_ID;

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session =& $session_manager->getSession(cb_get_pagename());
//Save or Load Folder ID
if (array_key_exists('folder_id', $G_INPUT)) {
    $folder_id = $G_INPUT['folder_id'];
    $session->set('folder_id', $folder_id);
} else {
    $folder_id = $session->get('folder_id');
}

//Get Category Controller Utility
require_once('workflow/controller_util.csp');
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
//Check Manage Right
if ( ! $category_util->evaluateManage(CB_DATABASE_NO_LOCK)) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
}
$category_util->checkAccess($node_id, true, CB_DATABASE_NO_LOCK);
/*
//Check Public Right
$category_util->checkPublic($node_id, TRUE, CB_DATABASE_NO_LOCK);
*/

//Get Workflow and Category Controller Utility
require_once('workflow/controller_util.csp');
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();

//--category tree
//Check Category ID
require_once('workflow/resources.csp');
$node_id = $node_id ? $node_id : GRN_WORKFLOW_CATEGORY_ROOT_ID;

//Create Parameter Translation for Category
$translation_map = [
    'nid'         => '_id',          //Category ID
    'name'        => 'name',         //Cattegory Name
    'foreign_key' => 'foreign_key',  //Cattegory Foregin Key
    'memo'        => 'memo',         //Category Memo
    'child_count' => 'count',        //Children Category Count
];

//Get Category for View
$category_for_view = $category_util->getViewPublic($node_id, $translation_map,
    GRN_WORKFLOW_PUBLIC_TYPE_MANAGE);

//Get Child Category List for View
$child_category_list_for_view = $category_util->getChildListViewPublic($node_id,
    $translation_map, GRN_WORKFLOW_PUBLIC_TYPE_MANAGE);

//Get Tree Category List for View
if ($node_id == GRN_WORKFLOW_CATEGORY_ROOT_ID) {
    $tree_category_list_for_view
        = $category_util->getTreeListViewPublic($node_id, $translation_map,
        GRN_WORKFLOW_PUBLIC_TYPE_MANAGE, false, false);
} else {
    $tree_category_list_for_view
        = $category_util->getTreeListViewPublic($node_id, $translation_map,
        GRN_WORKFLOW_PUBLIC_TYPE_MANAGE, true, false);
}


//Create Category Information
$category_information_for_view = $category_for_view;
$category_information_for_view['children'] = $child_category_list_for_view;
$category_information_for_view['ancestors'] = $tree_category_list_for_view;

//Assign Category
$node =& $category_information_for_view;

//--public information
if ($node_id) {
    require_once('grn/public_resources.csp');

    $public = [];

    //Create Parameter Translation for Public
    $translation_map_public = [
        'tid'            => 'target',           //Target ID
        'type'           => 'type',             //Target Type
        'data'           => 'authority_browse', //Authority List
        'security_model' => 'security_model',   //Security Model
    ];
    //Get Public List
    require_once('workflow/controller_util.csp');
    $category_public_util
        = GRN_Workflow_Category_Public_Controller_Utility::getInstance();
    $public_list_for_view = $category_public_util->getListView($node_id, 'user',
        $translation_map_public, true);
    $public_list_for_view = array_merge($public_list_for_view,
        $category_public_util->getListView($node_id, 'group',
            $translation_map_public, true));
    $public_list_for_view = array_merge($public_list_for_view,
        $category_public_util->getListView($node_id, 'static_role',
            $translation_map_public, true));
    $public_list_for_view = array_merge($public_list_for_view,
        $category_public_util->getListView($node_id, 'dynamic_role',
            $translation_map_public, true));

    //Get Security Model
    require_once('workflow/public_logic.csp');
    $category_public_logic = GRN_Workflow_Category_Public_Logic::getInstance();
    $security_model = $category_public_logic->getSecurityModel($node_id);

    //Create Public Information
    $public_for_view = current($public_list_for_view);
    $public_information_for_view['security_model'] = $security_model;
    $public_information_for_view['list'] = $public_list_for_view;
    $public_information_for_view['count']
        = count($public_list_for_view);
    $public
        =& $public_information_for_view;
}

//Assign Smarty Variable
$t->assign('node_id', $node_id);  //Category ID
$t->assign('node', $node);     //Category Tree
$t->assign('public', @ $public); //Category Public Right
$t->assign('is_root', ($node_id
                       == GRN_WORKFLOW_CATEGORY_ROOT_ID));                   //Root Category Flag
$t->assign('is_manage',
    $category_util->checkManage($node_id, false, CB_DATABASE_NO_LOCK));

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
$t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $folder_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


