<?php
global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('workflow/operation/auto_schedule_register',
    true);

//Get Folder ID from Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_form_list
    = $session_manager->getSession('workflow/operation/form_list');
$folder_id = $session_form_list->get('folder_id');

//Get Parameter
require_once('workflow/resources.csp');
$category_id = cb_at($G_INPUT, 'cid', '');
$form_id = cb_at($G_INPUT, 'fid', '');
$category_id = $category_id ? $category_id : GRN_WORKFLOW_CATEGORY_ROOT_ID;

require_once('workflow/form_logic.csp');
require_once('workflow/error_code.csp');

$locator = GRN_ApplicationLocator::instance();
if ( ! $locator->isActive(GRN_SCHEDULE_APPLICATION_ID)) {
    cb_throw_error(E_GRN_WRKF_SCHEDULE_IS_DEACTIVATED);
}

$logic = GRN_Workflow_Form_Logic::getInstance();
$form = $logic->get($form_id, $category_id);
if ( ! is_array($form) || 0 == count($form)) {
    // フォームがない
    cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
}

//Check Category Exists
if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
    require_once('workflow/category_logic_base.csp');
    $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
    $category = $category_logic_base->get($category_id);
} else {
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
}

// ログインユーザーが運用管理権限を持つか確認
require_once('workflow/controller_util.csp');

$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
if ( ! $category_util->evaluateManage()) {
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
}

// 未分類カテゴリ以外は運用管理権限とアクセス権を確認
$category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
$category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

$translation_map_item = [
    'iid'          => '_id',                  //Item ID
    'display_name' => 'display_name',         //Item Display Name
    'type'         => 'type',                 //Item Type
    'foreign_key'  => 'foreign_key',          //Item foreign_key
];

$item_util = GRN_Workflow_Item_Controller_Utility::getInstance();
$item_list_for_view = $item_util->getListView($translation_map_item, $form_id);

require_once('schedule/system_logic.csp');
$logic = GRN_Schedule_SystemLogic::getInstance();

$menus = $logic->getMenus();

require_once('workflow/auto_schedule_setting_logic.csp');
$auto_schedule_logic = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();

$autoScheduleObj = $auto_schedule_logic->getByFormId($form_id);

$date_item_list = [
    [
        'value' => '',
        'label' => cb_msg('grn.workflow.operation', 'choose_date_item'),
    ]
];

foreach ($item_list_for_view as $k => $v) {
    if ($v['foreign_key'] == "grn.workflow.date") {
        $date_item_list[$v['iid']] = [
            'value' => $v['iid'],
            'label' => $v['display_name'],
        ];
    }
}
if (count($date_item_list) == 1) {
    cb_throw_error(E_GRN_WRKF_NO_DATE_ITEM);
}

$date_start_item_list = $date_end_item_list = $date_item_list;

$menu_list = [
    [
        'value' => '',
        'label' => GRN_WORKFLOW_SCHEDULE_MENU_DEFAULT
    ]
];

foreach ($menus as $k => $v) {
    $menu_list[] = [
        'value' => "$v[0];#$v[1]",
        'label' => $v[0],
    ];
}
if ( ! $autoScheduleObj) {
    $active = GRN_WORKFLOW_SCHEDULE_DEACTIVACTED;
    $regular_checked_type = GRN_WORKFLOW_REGULAR_CHECKED_TYPE;
    $allday_checked_type = GRN_WORKFLOW_ALL_DAY_CHECKED_TYPE;
} else {
    $setted_menu = $autoScheduleObj->getAppointmentType();

    if (isset($date_start_item_list[$autoScheduleObj->getScheduleStartItem()])) {
        $date_start_item_list[$autoScheduleObj->getScheduleStartItem()]['selected']
            = true;
    }

    if (isset($date_end_item_list[$autoScheduleObj->getScheduleEndItem()])) {
        $date_end_item_list[$autoScheduleObj->getScheduleEndItem()]['selected']
            = true;
    }

    $setted_menu_name = cb_unserialize($setted_menu,
        ["allowed_classes" => false]);
    if ($setted_menu_name) {
        $setted_menu_array = [
            'value'    => $setted_menu_name,
            'label'    => $setted_menu_name,
            'selected' => true
        ];
        array_unshift($menu_list, $setted_menu_array);
    }
    if ($autoScheduleObj->getActive() == GRN_WORKFLOW_SCHEDULE_ACTIVE) {
        $active = GRN_WORKFLOW_SCHEDULE_ACTIVE;
    } else {
        $active = GRN_WORKFLOW_SCHEDULE_DEACTIVACTED;
    }

    if ($autoScheduleObj->getScheduleType() == GRN_WORKFLOW_EVENT_REGULAR) {
        $regular_checked_type = true;
        $allday_checked_type = false;
    } else {
        $regular_checked_type = false;
        $allday_checked_type = true;
    }
}

$t->assign('cid', $category_id);
$t->assign('fid', $form_id);
$t->assign('menus', $menu_list);
$t->assign('active', $active);
$t->assign('regular_checked_type', $regular_checked_type);
$t->assign('allday_checked_type', $allday_checked_type);

$t->assign('date_start_item_list', $date_start_item_list);
$t->assign('date_end_item_list', $date_end_item_list);

$page_title = grn_get_current_page_display_name();

$t->assign('page_title', $page_title);

$index_info = ['index' => ['fid' => $folder_id, 'sf' => 1]];
$pages_info = [
    'form_list'              => ['cid' => $category_id, 'sf' => 1],
    'form_view'              => ['cid' => $category_id, 'fid' => $form_id],
    'auto_schedule_register' => null
];
$page_name = cb_get_pagename();
$controller_util = new GRN_Workflow_ControllerUtil($page_name);
$index_position = $controller_util->makeSitePosition('workflow/', $index_info);
$site_position = $controller_util->makeSitePosition('workflow/operation/',
    $pages_info);
$site_position = array_merge($index_position, $site_position);
$t->assign('site_position', $site_position);

$t->display("{$page_name}.tpl");
