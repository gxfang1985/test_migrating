<?php

global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Folder ID from Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_petition_list
    =& $session_manager->getSession('workflow/operation/petition_list');
$folder_id = $session_petition_list->get('folder_id');

//Get Parameters
require_once('workflow/resources.csp');
$category_id = @ $G_INPUT['cid'];     //Categry ID
$form_id = @ $G_INPUT['fid'];     //Folder ID
$petition_id = @ $G_INPUT['pid'];     //Petition ID
$item_data_file_id = @ $G_INPUT['ifid'];    //Item Data File ID
$simple = @ $G_INPUT['simple'];  //Simple
$sp = @ $G_INPUT['sp'];      //sp
$sort = @ $G_INPUT['sort'];    //sort

//Get Petition and Item Data File Controller Utility
require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
$item_data_file_util
    = GRN_Workflow_ItemDataFile_Controller_Utility::getInstance();
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();

//Check Category Access and Manage
$category_util->checkManage($category_id, true);
$category_util->checkAccess($category_id, true);

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'    => '_id',                  //Petition ID
    'name'   => 'name',                 //Petition Name
    'form'   => 'form',                 //Petition Form
    'status' => 'status',               //Petition Status
];

//Create Parameter Translation Map
$translation_map_item_data = [
    'idid'     => '_id',                  //Item Data ID
    'settings' => 'settings',             //ITem Data Settings
];

//Create Parameter Translation Map
$translation_map_item_data_file = [
    'ifid'      => '_id',                  //Item Data File ID
    'item_data' => 'item_data',            //Item Data ID
    'file'      => 'file',                 //GRN_File ID
];

//Get Petition
$petition = $petition_util->getView($petition_id, $translation_map_petition);
/*
switch($petition['status'])
{
case GRN_WORKFLOW_STATUS_TEMPORARY:
case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    break;
default:
    break;
}
*/
//Get Form
require_once('workflow/form_logic_base.csp');
$form_logic = GRN_Workflow_Form_Logic_Base::getInstance();
$form =& $form_logic->get($petition['form'], $category_id);

//Get Item Data File 
$item_data_file = $item_data_file_util->getView($item_data_file_id,
    $translation_map_item_data_file);

//Get Item Data 
$item_data = $item_data_util->getView($item_data_file['item_data'],
    $translation_map_item_data, $petition_id);

//Get GRN_File Object
require_once('workflow/file.csp');
$file_manager = new GRN_Workflow_FileManager_Core();
$file_table =& $file_manager->getFileTable();
$file =& $file_table->getRow($item_data_file['file']);
if ( ! $file) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WORKFLOW_ITEMDATAFILE_NOT_FOUND);
}

//Include Common Controller
require('../../grn/_file_view.csp');

/*

//Create File Information
$creator  =& $file_object->get('creator');
$modifier =& $file_object->get('modifier');
$file_for_view = array(
    'id'            => $file_object->getOID(),
    'filename'      => $body_object->get('name'),
    'mime'          => $body_object->get('mime'),
    'size'          => $body_object->get('size'),
    'version'       => $body_object->get('version'),
    'title'         => $file_object->getTitle(),
    'max_version'   => $file_object->getMaxVersion(),
    'memo'          => $file_object->getDescription(),
    'creator_uid'   => $creator ? $creator->getOID() : 0,
    'creator_name'  => $creator ? $creator->get('display_name') : $file_object->get('creator_name'),
    'ctime'         => $file_object->get('ctime'),
    'modifier_uid'  => $modifier ? $modifier->getOID() : 0,
    'modifier_name' => $modifier ? $modifier->get('display_name') : $file_object->get('modifier_name'),
    'mtime'         => $file_object->get('mtime'),
);
*/

//Get Login User Config
global $G_portal_login_user;
require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$config =& $manager->getUserConfig($G_workflow_login_user);

//N-Navigation
require_once('workflow/utility.csp');
$n_navigation_for_view = grn_make_n_navigation(1, null, $config->getListMax());

//Modify Folder Information
$file_for_view =& $t->get_Template_Vars('file');
$logs_for_view =& $t->get_Template_Vars('logs');
$file_for_view['id'] = $form_id;
$file_for_view['logs'] = $logs_for_view;
$file_for_view['navi'] = $n_navigation_for_view;

//Create Link Parameter
$linkparams = [
    'cid'  => $category_id,
    'foid' => $form_id,
    'pid'  => $petition_id,
    'ifid' => $item_data_file_id,
];

//Assign Display Infomation
//Assign Link Patameters
$t->assign('linkparams', $linkparams);

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $folder_id,
            'sf'   => 1
        ],
        [
            'page' => 'workflow/operation/petition_list',
            'name' => grn_get_page_display_name('workflow/operation/petition_list'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'sf'   => 1
        ],
        [
            'page' => 'workflow/operation/petition_view',
            'name' => grn_get_page_display_name('workflow/operation/petition_view'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'pid'  => $petition_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

