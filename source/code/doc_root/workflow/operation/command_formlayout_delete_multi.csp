<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Create Parameter Translation Map
    $translation_map = [
        'ids' => '_ids',
        'cid' => '_cid',
        'fid' => '_fid',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Check Category Exists
    require_once('workflow/resources.csp');
    require_once('workflow/error_code.csp');
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $properties['_cid']) {
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($properties['_cid']);
    }

    //Check Form Exist
    require_once('workflow/form_logic_base.csp');
    $column_list = ['_id'];
    $option = [
        'condition' => [
            0 => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
    $form = $form_logic_base->getDirect($properties['_fid'],
        $column_list, $option);

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリか確認
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $properties['_cid']) {
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($properties['_cid'], true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($properties['_cid'], true, CB_DATABASE_NO_LOCK);

    //Create Delete Item ID List
    $item_id_list = [];
    require_once('workflow/item_logic.csp');
    $item_logic = GRN_Workflow_Item_Logic::getInstance();
    $item_list =& $item_logic->getList($properties['_fid']);
    foreach ($properties['_ids'] as $item_id) {
        if (in_array($item_id, array_keys($item_list))) {
            $item_id_list[] = $item_id;
        }
    }

    $item_logic->checkIsIncludeStandardItem($properties['_fid'], $item_id_list);

    require_once('workflow/auto_schedule_setting_logic.csp');
    $register_setting = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();
    $register_setting->checkModifyItem($properties['_fid'], $item_id_list);

    //Delete Multi Item
    if (count($item_id_list) != 0) {
        $item_logic->deleteMulti($item_id_list);
    }

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Form_Layout_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'form_layout_delete_multi';
        $message_args['iids'] = $properties['_ids'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Redirect Next Page
    cb_redirect('workflow/operation/form_view',
        ['cid' => $properties['_cid'], 'fid' => $properties['_fid']]);
}


