<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Get Commond Type
    $commond = @ $G_INPUT['cmd'];
    $category_id = @ $G_INPUT['cid'];

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリか確認
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

    //Create Parameter Translation Map
    $translation_map = [
        'ids' => '_ids',
        'cid' => '_cid',
        'fid' => '_fid',
    ];

    //Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }
    require_once('workflow/item_logic.csp');
    $item_logic = GRN_Workflow_Item_Logic::getInstance();
    $item_logic->checkIsIncludeStandardItem($properties['_fid'],
        $properties['_ids']);

    //Check Commond
    if ($commond == 'copy') {
        //Check Form Exist
        require_once('workflow/form_logic_base.csp');
        $column_list = ['_id'];
        $option = [
            'condition' => [
                0 => [
                    'column'   => 'col_deleted',
                    'value'    => '0',
                    'operator' => '='
                ]
            ]
        ];
        $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
        $form = $form_logic_base->getDirect($properties['_fid'],
            $column_list, $option);

        //Create Copy Item List
        $item_id_list = [];
        $item_list =& $item_logic->getList($properties['_fid']);
        foreach ($properties['_ids'] as $item_id) {
            if (in_array($item_id, array_keys($item_list))) {
                $item_id_list[] = $item_id;
            }
        }

        //Copy Multi Item
        $id_map = $item_logic->copyMulti($item_id_list, $properties['_fid'],
            null, true);

        //Copy Change Access Condition List
        $columns = ['col_item', 'col_path_step', 'col_view', 'col_edit'];
        require_once('workflow/change_access.csp');
        $change_access_logic = GRN_Workflow_ChangeAccess::getInstance();
        foreach ($item_id_list as $item_id) {
            $change_access = $change_access_logic->getListByItemId($item_id,
                $columns);
            if (count($change_access) !== 0) {
                foreach (array_keys($change_access) as $key) {
                    $change_access[$key]['col_item']
                        = $id_map[$change_access[$key]['col_item']];
                }
                $change_access_logic->addList($columns, $change_access);
            }
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Form_Layout_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'form_layout_copy';

            $message_args['fid'] = $properties['_fid'];
            $message_args['iids'] = $item_id_list;
            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        //Redirect Next Page
        cb_redirect('workflow/operation/form_view',
            ['cid' => $G_INPUT['cid'], 'fid' => $G_INPUT['fid']]);
    } elseif ($commond == 'delete') {
        //Get Patameters
        $form_id = @ $G_INPUT['fid'];
        $ids = @ $G_INPUT['ids'];

        //Save IDs to Session
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session
            =& $session_manager->getSession('workflow/operation/form_view');
        $session->set('ids', $ids);

        //Redirect Next Page
        cb_redirect('workflow/operation/formlayout_delete_multi',
            ['cid' => $category_id, 'fid' => $form_id]);
    }
}


