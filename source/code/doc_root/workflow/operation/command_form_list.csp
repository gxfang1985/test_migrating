<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Get Commond Type
    $category_id = @ $G_INPUT['cid'];
    $commond = @ $G_INPUT['cmd'];

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリか確認
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

    //Check Commond
    if ($commond == 'copy') {
        //Create Parameter Translation Map
        $translation_map = [
            'ids' => '_ids',
            'cid' => '_cid',
        ];

        //Do Parameter Translation
        $props = [];
        foreach ($translation_map as $view_name => $model_name) {
            $props[$model_name] = @ $G_INPUT[$view_name];
        }

        //Create Copy Form List
        require_once('workflow/form_logic.csp');
        $form_logic = GRN_Workflow_form_Logic::getInstance();
        $form_list = $form_logic->getList($props['_cid']);
        foreach (array_keys($form_list) as $form_id) {
            if ( ! in_array($form_id, $props['_ids'])) {
                unset($form_list[$form_id]);
            }
        }

        //ID MAP
        $id_map = [];

        //Copy Multi Form
        $id_map['form'] = [];
        $id_map['form'] = $form_logic->copyMulti(array_keys($form_list),
            $props['_cid']);

        require_once('workflow/item_logic.csp');
        require_once('workflow/path.csp');
        require_once('workflow/path_skip.csp');
        require_once('workflow/path_condition.csp');
        $item_logic = GRN_Workflow_item_Logic::getInstance();
        $path_logic = GRN_Workflow_Paths::getInstance();
        $path_skip_logic = GRN_Workflow_PathSkips::getInstance();
        $path_condition_logic = GRN_Workflow_PathConditions::getInstance();
        $path_condition_step_logic
            = GRN_Workflow_PathConditionSteps::getInstance();
        foreach (array_keys($form_list) as $form_id) {
            $copy_applicant_access = false;
            if ($form_list[$form_id]['col_path']) {
                $columns = ['col_type'];
                $path = $path_logic->get($form_list[$form_id]['col_path'],
                    $columns);
                if ($path['col_type'] == GRN_WORKFLOW_PUBLIC_PATH) {
                    $copy_applicant_access = true;
                }
            }

            //Copy Multi Item
            $id_map['item'] = [];
            $item_list = $item_logic->getList($form_id);
            $id_map['item'] = $item_logic->copyMulti(array_keys($item_list),
                $form_id, $id_map['form'][$form_id], $copy_applicant_access);

            //Check Path
            if ( ! $form_list[$form_id]['col_path']) {
                continue;
            }

            //Check Path
            $columns = ['col_type'];
            $path = $path_logic->get($form_list[$form_id]['col_path'],
                $columns);
            if ($path['col_type'] != GRN_WORKFLOW_PUBLIC_PATH) {
                continue;
            }

            //Support Only Public Path
            $form_logic->setPath($id_map['form'][$form_id],
                $form_list[$form_id]['col_path'], $props['_cid'], true);

            //Copy Change Access Condition List
            $columns = ['col_item', 'col_path_step', 'col_view', 'col_edit'];
            require_once('workflow/change_access.csp');
            $change_access_logic = GRN_Workflow_ChangeAccess::getInstance();
            foreach (array_keys($item_list) as $item_id) {
                $change_access = $change_access_logic->getListByItemId($item_id,
                    $columns);
                if (count($change_access) !== 0) {
                    foreach (array_keys($change_access) as $key) {
                        $change_access[$key]['col_item']
                            = $id_map['item'][$change_access[$key]['col_item']];
                    }
                    $change_access_logic->addList($columns, $change_access);
                }
            }

            //Check Path Skip
            $columns = [
                'tab_grn_workflow_pathskip' => [
                    '_id'      => '_id',
                    'col_form' => 'col_form',
                    'col_item' => 'col_item',
                ],
            ];
            $path_skip = $path_skip_logic->getByFormId($form_id, $columns);
            if ($path_skip) {
                //Add New Path Skip
                $columns = [
                    'col_form' => $id_map['form'][$path_skip['col_form']],
                    'col_item' => $id_map['item'][$path_skip['col_item']],
                ];
                $id_map['path_skip'] = [];
                $id_map['path_skip'][$path_skip['_id']]
                    = $path_skip_logic->add($columns);

                //Add New Path Condition Condition
                $columns = [
                    'tab_grn_workflow_pathcondition'     => [
                        '_id'           => '_id',
                        'col_name'      => 'col_name',
                        'col_number'    => 'col_number',
                        'col_operator'  => 'col_operator',
                        'col_option'    => 'col_option',
                        'col_path_skip' => 'col_path_skip',
                    ],
                    'tab_grn_workflow_pathconditionstep' => [
                        'col_path_condition' => 'col_path_condition',
                        'col_path_step'      => 'col_path_step',
                    ],
                ];
                $path_condition_list = $path_condition_logic->getList(null,
                    $path_skip['col_form'], $columns);

                //Add New Path Condition
                foreach (array_keys($path_condition_list) as $path_condition_id) {
                    $properties = [
                        'col_name'      => $path_condition_list[$path_condition_id]['col_name'],
                        'col_number'    => $path_condition_list[$path_condition_id]['col_number'],
                        'col_operator'  => $path_condition_list[$path_condition_id]['col_operator'],
                        'col_option'    => $path_condition_list[$path_condition_id]['col_option'],
                        'col_path_skip' => $id_map['path_skip'][$path_condition_list[$path_condition_id]['col_path_skip']],
                    ];
                    $id_map['path_condition'][$path_condition_id]
                        = $path_condition_logic->add($properties);
                }

                $columns = [
                    'col_path_condition' => 'col_path_condition',
                    'col_path_step'      => 'col_path_step',
                ];
                $path_condition_step_list
                    = $path_condition_step_logic->getListByPathConditionId(array_keys($path_condition_list),
                    $columns);

                //Add New Path Condition Step
                if (array_key_exists('path_condition', $id_map)) {
                    foreach (
                        array_keys($path_condition_step_list) as
                        $path_condition_step_id
                    ) {
                        if (array_key_exists($path_condition_step_list[$path_condition_step_id]['col_path_condition'],
                            $id_map['path_condition'])
                        ) {
                            $properties = [
                                'col_path_condition' => $id_map['path_condition'][$path_condition_step_list[$path_condition_step_id]['col_path_condition']],
                                'col_path_step'      => $path_condition_step_list[$path_condition_step_id]['col_path_step'],
                            ];
                            $path_condition_step_logic->add($properties);
                        }
                    }
                }
            }
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Form_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'form_copy';

            $message_args['fids'] = $id_map['form'];
            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        //Redirect Next Page
        cb_redirect('workflow/operation/form_list',
            ['cid' => $G_INPUT['cid'], 'sf' => 1]);
    } elseif ($commond == 'delete') {
        //Get Patameters
        $ids = @ $G_INPUT['ids'];

        //Save IDs to Session
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session
            =& $session_manager->getSession('workflow/operation/form_list');
        $session->set('ids', $ids);

        //Redirect Next Page
        cb_redirect('workflow/operation/form_delete_multi',
            ['cid' => $category_id, 'sf' => 1]);
    }
}


