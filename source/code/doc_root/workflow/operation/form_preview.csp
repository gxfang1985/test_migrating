<?php

use grn\grn\access\service\AppAccess;
use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

//SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('workflow/operation/form_preview', true);

//Get Category and Form ID
$category_id = @ $G_INPUT['cid'];
$form_id = @ $G_INPUT['fid'];
$user_id = @ $G_INPUT['uid'];

//Check Category Exists
require_once('workflow/resources.csp');
if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
    require_once('workflow/category_logic_base.csp');
    $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
    $category =& $category_logic_base->get($category_id);
}

// ログインユーザーが運用管理権限を持つか確認
require_once('workflow/controller_util.csp');
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
if ( ! $category_util->evaluateManage()) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
}

// 未分類カテゴリか確認
if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
}

// 未分類カテゴリ以外は運用管理権限とアクセス権を確認
$category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
$category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

//Replace Workflow Login User
global $G_workflow_login_user;
require_once('grn/uum.csp');

$login = [];
global $G_container_base;
$grn_uum =& $G_container_base->getInstance('uum');
$user = $grn_uum->getUser($user_id);
if ($user) {
    $G_workflow_login_user = $user;
    $login['id'] = $user->getOID();
    $login['name'] = $user->get('display_name');
    AppAccess::checkInternalAccess(GRN_WORKFLOW_APPLICATION_ID,
        $user->getOID());
}

//置換したユーザーでもう一度確認
if ($user) {
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK, false,
        $user->getOID());
} else {
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
}


//Get Form and Item Controller Utility
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$item_util = GRN_Workflow_Item_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_form = [
    //Form Information
    'fid'                     => '_id',              //Form ID
    'name'                    => 'name',             //Form Name
    'foreign_key'             => 'foreign_key',      //Form Foreign key
    'memo'                    => 'memo',             //Form Memo
    'admin_memo'              => 'admin_memo',       //Form Admin Memo
    'type'                    => 'type',             //Form Type
    'deleted'                 => 'deleted',          //Form Deleted
    'icon_type'               => 'icon_type',        //Form Icon Type
    'icon_id'                 => 'icon_id',          //Form Icon ID
    'icon_url'                => 'icon_url',         //Form Icon URL
    'category'                => 'category',         //Form Category
    'active'                  => 'active',           //Form Active
    'serial_type'             => 'serial_type',      //Form Serial Type
    'serial_format'           => 'serial_format',    //Form Serial Format
    'serial_number'           => 'serial_number',    //Form Serial Number
    'path'                    => 'path',             //Form Path
    'list_index'              => 'serial_number',    //Form List Index
    'is_customization_active' => 'is_customization_active',
];

//Create Parameter Translation Map
$translation_map_item = [
    'iid'                => '_id',                  //Item ID
    'display_name'       => 'display_name',         //Item Display Name
    'code'               => 'code',                 // Item code
    'type'               => 'type',                 //Item Type
    'option_string'      => 'option_string',        //Item Option String
    'option_string_type' => 'option_string_type',   //Item Option String Type
    'description'        => 'description',          //Item Description
    'description_type'   => 'description_type',     //Item Description Type
    'description_editor' => 'description_editor',   //Item Description Editor
    'foreign_key'        => 'foreign_key',          //Item foreign_key
    'attach_file'        => 'attach_file',          //Item Attach File
    'attach_file_view'   => 'attach_file_view',     //Item Attach File View
    'form'               => 'form',                 //Item Form
    'settings'           => 'settings',             //Item Settings
    'br'                 => 'br',                   //Item <br> Flag
    'separator'          => 'separator',            //Item Separator
    'required'           => 'required',             //Item Reuired Flag
    'list_index'         => 'list_index',           //Item List Index
    'display_type'       => 'display_type',         //Display_type
];

//Get Form for view
$form_for_view = $form_util->getView($form_id, $translation_map_form,
    $category_id);

//Get Item List for view
$item_list_for_view = $item_util->getListView($translation_map_item, $form_id);

//Create Item Layout
$current = null;
$previous = null;
foreach (array_keys($item_list_for_view) as $item_id) {
    //Check Calc Numeric Not Display Parameter
    if ($item_list_for_view[$item_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_list_for_view[$item_id]['settings']['not_display'] == 1) {
            unset($item_list_for_view[$item_id]);
            continue;
        }
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_list_for_view[$item_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_list_for_view[$item_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_list_for_view[$item_id];

    //Check Current or Sub Item
    if ($item_list_for_view[$item_id]['br'] == 1) {
        $current =& $item_list_for_view[$item_id];
        $current['sub_item_list'] = [];
        $current['total_required'] = $current['required'];
    } else {
        $current['sub_item_list'][$item_id] = $item_list_for_view[$item_id];
        $current['sub_item_count'] = count($current['sub_item_list']);
        if ($item_list_for_view[$item_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_list_for_view[$item_id]);
    }
}

//Assign Display Infomation
//Assign Category ID
$t->assign('category_id', $category_id);
//Assign Form ID
$t->assign('form_id', $form_id);

//Assign Dummy Login User
$t->assign('user', $login);

//Assign Form
$t->assign('form', $form_for_view);
//Assign Item List
$t->assign('item_list', $item_list_for_view);

$apply_customization
    = CustomizationUtil::applyCustomization($form_for_view['is_customization_active'],
    $t);
if ($apply_customization) {
    $customization_petition
        = DataConverterForJsPetitionData::covertDataPetitionInformation(
        null, $item_list_for_view, null, null);
    $customization_data = CustomizationUtil::getCreateCustomizationData(
        $customization_petition, [
            'preview' => true,
            'viewer'  => GRN_WORKFLOW_VIEW_TYPE_ADMIN
        ]
    );

    // Assign customization information
    grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
        new grn\grn\customization\workflow\WorkflowJsApiLoader($form_for_view['fid']),
        new grn\grn\customization\workflow\RequestCreateShowJsApiEvent(["data" => $customization_data])
    );
}


//-- set page title and site position

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


