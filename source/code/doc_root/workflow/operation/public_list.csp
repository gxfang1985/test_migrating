<?php

global $G_INPUT;

require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Set Application Name
global $G_workflow_app_name;
$t->assign('app_name', $G_workflow_app_name);

//Get Folder ID from Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_form_list
    =& $session_manager->getSession('workflow/operation/public_index');
$folder_id = $session_form_list->get('folder_id');

//--node information
require_once('_public_util.csp');

//--public information

//Create Parameter Translation for Public
$translation_map_public = [
    '_id'            => '_id',                  //OID
    'tid'            => 'target',               //Target ID
    'type'           => 'type',                 //Target Type
    'data'           => 'authority_browse', //Authority List
    'security_model' => 'security_model',       //Security Model
];

//Get Public List
require_once('workflow/controller_util.csp');
$public_list_for_view = [];
$target_type_list = [
    GRN_WORKFLOW_PUBLIC_TARGET_TYPE_DYNAMIC_ROLE,
    GRN_WORKFLOW_PUBLIC_TARGET_TYPE_STATIC_ROLE,
    GRN_WORKFLOW_PUBLIC_TARGET_TYPE_GROUP,
    GRN_WORKFLOW_PUBLIC_TARGET_TYPE_USER,
];
$category_public_util
    = GRN_Workflow_Category_Public_Controller_Utility::getInstance();
foreach ($target_type_list as $target_type) {
    $temporary = $category_public_util->getListView($node_id,
        $target_type, $translation_map_public, true);
    $public_list_for_view = array_merge($public_list_for_view, $temporary);
}

//Get Security Model
require_once('workflow/public_logic.csp');
$category_public_logic = GRN_Workflow_Category_Public_Logic::getInstance();
$security_model = $category_public_logic->getSecurityModel($node_id,
    CB_DATABASE_NO_LOCK);

//Create Public Information
$public_information_for_view['security_model'] = $security_model;
$public_information_for_view['list'] = $public_list_for_view;
$public_information_for_view['count'] = count($public_list_for_view);
$public =& $public_information_for_view;

//--N-navigation params
$ours_params = $G_INPUT;
unset($ours_params['reset']);
unset($ours_params['poid']);
$t->assign('ours_params', $ours_params);

$t->assign('public', $public);                               //Public
$t->assign('is_grant', $public['security_model'] == 'grant');  //Grant Flag
$t->assign('is_revoke', $public['security_model'] == 'revoke'); //Revoke Flag

//--authority types
$authority_types = ['browse' => cb_msg('grn.workflow.lang', 'public_browse')];
$t->assign('authority_types', $authority_types);
$t->assign('authority_count', count($authority_types));

//--session information (temporary authorities)
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session
    =& $session_manager->getSession('workflow.operation.public_list');
$authorities = $session->get('authorities');
if (@ $G_INPUT['reset'] || ! is_array($authorities)) {
    $authorities = ['browse' => 1];
    $session->set('authorities', $authorities);
}
$t->assign('authorities', $authorities);

// Page Title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// Site Position 
$t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $folder_id,
            'sf'   => 1
        ],
        [
            'page' => 'workflow/operation/public_index',
            'name' => grn_get_page_display_name('workflow/operation/public_index'),
            'nid'  => $node_id
        ],
        ['page' => '', 'name' => $page_title],
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


