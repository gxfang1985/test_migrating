<?php

use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');

//Get Folder ID from Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_petition_list
    =& $session_manager->getSession('workflow/operation/petition_list');
$folder_id = $session_petition_list->get('folder_id');

//Get Parameter
$category_id = @ $G_INPUT['cid'];     //Category ID
$form_id = @ $G_INPUT['fid'];     //Form ID
$petition_id = @ $G_INPUT['pid'];     //Petition ID
$simple = @ $G_INPUT['simple'];  //Simple Flag

/**
 * 制限事項
 * 申請の進行状況は下書き、取り戻し
 */

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session =& $session_manager->getSession(cb_get_pagename());

if (@ $G_INPUT['sf']) {
    //Load Simple from Session
    $simple = $session->get('simple');
} else {
    //Save Simple to Session
    $session->set('simple', $simple);
}

// ログインユーザーが運用管理権限を持つか確認
require_once('workflow/controller_util.csp');
$category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
if ( ! $category_util->evaluateManage()) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
}

// 未分類カテゴリか確認
if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
}

// 未分類カテゴリ以外は運用管理権限とアクセス権を確認
$category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
$category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

//Get Petition and Item Data Controller Utility
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form_name'              => 'form_name',
    //Petition Form Name
    'form'                   => 'form',
    //Petition Form
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'user'                   => 'user',
    'user_name'              => 'user_name',
    'user_foreign_key'       => 'user_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'priority'               => 'priority',
    'agent_user'             => 'agent_user',
    'agent_user_name'        => 'agent_user_name',
    'agent_user_foreign_key' => 'agent_user_foreign_key',
];

//Create Parameter Translation Map
$translation_map_item_data = [
    //Item Data Information
    'iid'                => 'itemdata_id',
    //Item Data ID
    'display_name'       => 'itemdata_display_name',
    //Item Data Display Name
    'code'               => 'itemdata_code',
    'type'               => 'itemdata_type',
    //Item Data Type
    'option_string'      => 'itemdata_option_string',
    //Item Data Option String
    'option_string_type' => 'itemdata_option_string_type',
    //Item Data Option String Type
    'foreign_key'        => 'itemdata_foreign_key',
    //Item Data foreign_key
    'attach_file'        => 'itemdata_attach_file',
    //Item Data Attach File
    'attach_file_view'   => 'itemdata_attach_file_view',
    //Item Data Attach File View
    'settings'           => 'itemdata_settings',
    //Item Data Settings
    'br'                 => 'itemdata_br',
    //Item Data <br> Flag
    'separator'          => 'itemdata_separator',
    //Item Data Separator
    'required'           => 'itemdata_required',
    //Item Data Reuired Flag
    'list_index'         => 'itemdata_list_index',
    //Item Data List Index
    'number'             => 'itemdata_number',
    //Item Data Number Value
    'text'               => 'itemdata_text',
    //Item Data text Value
    //Item Data File Information
    'fid'                => 'itemdatafile_id',
    //Item Data File ID
    'file'               => 'itemdatafile_file',
    //Item Data File ID
    'files'              => 'itemdata_files',
    //Item Data File ID List
];

//Create Parameter Translation Map
$translation_map_form = [
    'fid'      => '_id',                  //Form ID
    'category' => 'category',             //Category ID
];

//Get Petition for view
$petition = $petition_util->getView($petition_id,
    $translation_map_petition);
$ptime = new CB_TimeStamp();
$ptime->unix_ts = $petition['ptime'];
$petition['ptime'] = $ptime;

$applicant =& $uum->getUser($petition['user']);
if ($applicant) {
    $petition['user_valid'] = $applicant->get('valid');
}

if (array_key_exists('transactor', $petition)) {
    $transactor =& $uum->getUser($petition['transactor']);
    if ($transactor) {
        $petition['transactor_valid'] = $transactor->get('valid');
    }
}

if (array_key_exists('transactor', $petition)) {
    $agent_user =& $uum->getUser($petition['agent_user']);
    if ($agent_user) {
        $petition['agent_user_valid'] = $agent_user->get('valid');
    }
}
/*
switch($petition['status'])
{
case GRN_WORKFLOW_STATUS_TEMPORARY:
case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    break;
default:
    break;
}
*/
//Get Item Data List for view
$item_data_list = $item_data_util->getListViewEx($translation_map_item_data,
    $petition_id);

//Check Category ID
$option = [
    'condition' => [
        '0' => [
            'column'   => 'col_type',
            'value'    => '0',
            'operator' => '='
        ]
    ]
];
$form = $form_util->getView($petition['form'], $translation_map_form,
    $category_id, $option);

//Unset Standard Item
$current_item_data = current($item_data_list);
unset($item_data_list[$current_item_data['iid']]);

//Create Item Layout
$current = null;
$previous = null;
foreach (array_keys($item_data_list) as $item_data_id) {
    if ($item_data_list[$item_data_id]['foreign_key']
        == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
        || $item_data_list[$item_data_id]['foreign_key']
           == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
        || $item_data_list[$item_data_id]['foreign_key']
           == GRN_WORKFLOW_CONDITION_ITEM_DATE
        || $item_data_list[$item_data_id]['foreign_key']
           == GRN_WORKFLOW_CONDITION_ITEM_FILE
        || $item_data_list[$item_data_id]['foreign_key']
           == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
    ) {
        $item_data_list[$item_data_id]['view_mode'] = 'view';
    }

    //Check Calc Numeric Not Display Parameter
    if ($item_data_list[$item_data_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_data_list[$item_data_id]['settings']['not_display'] == 1) {
            unset($item_data_list[$item_data_id]);
            continue;
        }
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_data_list[$item_data_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_data_list[$item_data_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_data_list[$item_data_id];

    //Check Current or Sub Item
    if ($item_data_list[$item_data_id]['br'] == 1) {
        $current =& $item_data_list[$item_data_id];
        $current['sub_item_data_list'] = [];
        $current['total_required'] = $current['required'];
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
    } else {
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
        $current['sub_item_data_list'][$item_data_id]
            = $item_data_list[$item_data_id];
        $current['sub_item_data_count'] = count($current['sub_item_data_list']);
        if ($item_data_list[$item_data_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_data_list[$item_data_id]);
    }
}

$controller_util
    = new GRN_Workflow_ControllerUtil('workflow/operation/petition_view');
$path_steps = $controller_util->getPathInfo($petition_id, true);
$path_step_total = $controller_util->getPathStepCount($path_steps);
$path_steps_current = current($path_steps);
$path_step_id
    = $controller_util->getInProcessPathStepId($path_steps_current);
if ($path_step_id) {
    $path_step =& $path_steps[$path_step_id];
    $path_step['in_process'] = true;
}

//Rename username if username is changed.
foreach (array_keys($path_steps) as $path_key) {
    $path =& $path_steps[$path_key];
    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum =& $G_container_base->getInstance('uum');
    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($path['uids'], $columns);
    foreach (array_keys($path['users']) as $user_key) {
        if (array_key_exists($path['users'][$user_key]['_id'], $users)) {
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = $users[$path['users'][$user_key]['_id']]['col_display_name'];
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
        }
    }
    $path['user_count'] = count($path['users']);
}

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$change_path_history_total = $logic->getCount($petition_id);

//Assign Display Infomation
//Assign Catehgory ID
$t->assign('category_id', $category_id);
//Assign Catehgory ID
$t->assign('form_id', $form_id);
//Assign Petition ID
$t->assign('petition_id', $petition_id);

//Assign Petition
$t->assign('petition', $petition);
//Assign Item Data List
$t->assign('item_data_list', $item_data_list);

//Assign Path Steps
$t->assign('path_steps', $path_steps);
//Assign Path Step Total
$t->assign('path_step_total', $path_step_total);

$t->assign('change_path_history_total', $change_path_history_total);

//Assign Simple
$t->assign('simple', $simple);

$translation_map_form
    = ['is_customization_active' => 'is_customization_active'];
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$form_for_view = $form_util->getView($petition['form'], $translation_map_form,
    null, [
        'condition' => [
            '0' => [
                'column'   => 'col_type',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ]);
$apply_customization
    = CustomizationUtil::applyCustomization($form_for_view['is_customization_active'],
    $t);
if ($apply_customization) {
    $item_data_list[] = $current_item_data;
    $customization_petition
        = DataConverterForJsPetitionData::covertDataPetitionInformation(
        $petition, $item_data_list, $path_steps, $petition['priority']);
    $screen_properties = ['viewer' => GRN_WORKFLOW_VIEW_TYPE_ADMIN];
    if ($petition['status'] == GRN_WORKFLOW_STATUS_TEMPORARY) {
        $screen_properties['draft'] = true;
    }
    $customization_data
        = CustomizationUtil::getDetailCustomizationData($customization_petition,
        $screen_properties);

    // Assign customization information
    grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
        new grn\grn\customization\workflow\WorkflowJsApiLoader($petition['form']),
        new grn\grn\customization\workflow\RequestDetailShowJsApiEvent(["data" => $customization_data])
    );
}

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
if (isset($petition['form_name']) && (isset($petition['name']))) {
    $t->assign('page_title',
        $petition['form_name'] . '（' . $petition['name'] . '）');
} else {
    $t->assign('page_title', $page_title);
}
$t->assign('petition_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $folder_id,
            'sf'   => 1
        ],
        [
            'page' => 'workflow/operation/petition_list',
            'name' => grn_get_page_display_name('workflow/operation/petition_list'),
            'cid'  => $category_id,
            'fid'  => $form_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


