<?php
if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    require_once('workflow/resources.csp');
    require_once('workflow/error_code.csp');
    $locator = GRN_ApplicationLocator::instance();
    if ( ! $locator->isActive(GRN_SCHEDULE_APPLICATION_ID)) {
        cb_throw_error(E_GRN_WRKF_SCHEDULE_IS_DEACTIVATED);
    }

    global $G_INPUT;
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);

    $target_name = 'workflow/operation/auto_schedule_register';
    SmartyValidate::register_form($target_name);

    //Get Folder ID from Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_form_list
        = $session_manager->getSession('workflow/operation/form_list');
    $folder_id = $session_form_list->get('folder_id');

    $category_id = cb_at($G_INPUT, 'cid', '');
    $form_id = cb_at($G_INPUT, 'fid', '');

    $input_active = cb_at($G_INPUT, 'active', '');
    $appointment_type = cb_at($G_INPUT, 'menu', '');
    $schedule_start_item = cb_at($G_INPUT, 'schedule_start_item', '');
    $schedule_end_item = cb_at($G_INPUT, 'schedule_end_item', '');
    $schedule_type = cb_at($G_INPUT, 'schedule_type', 0);

    if ($input_active == GRN_WORKFLOW_SCHEDULE_ACTIVE) {
        $active = GRN_WORKFLOW_SCHEDULE_ACTIVE;
    } else {
        $active = GRN_WORKFLOW_SCHEDULE_DEACTIVACTED;
    }

    //Check Category Exists
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
        require_once('workflow/category_logic_base.csp');
        $category_logic_base = GRN_Workflow_Category_Logic_Base::getInstance();
        $category = $category_logic_base->get($category_id);
    } else {
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    //Check Form Exist
    require_once('workflow/form_logic_base.csp');
    $column_list = ['_id'];
    $option = [
        'condition' => [
            0 => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form_logic_base = GRN_Workflow_Form_Logic_Base::getInstance();
    $form = $form_logic_base->getDirect($form_id, $column_list,
        $option);

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

    if ($active == GRN_WORKFLOW_SCHEDULE_ACTIVE
        && ( ! isset($G_INPUT['schedule_start_item'])
             || ! isset($G_INPUT['schedule_end_item']))
    ) {
        cb_throw_error(E_GRN_WRKF_NO_DATE_ITEM);
    }

    if ($active == GRN_WORKFLOW_SCHEDULE_DEACTIVACTED
        || ($active == GRN_WORKFLOW_SCHEDULE_ACTIVE
            && SmartyValidate::is_valid($G_INPUT, $target_name))
    ) {
        require_once('workflow/auto_schedule_setting_logic.csp');
        $auto_schedule_logic
            = GRN_Workflow_Auto_Schedule_Setting_Logic::getInstance();

        $translation_map = [
            'active'              => 'col_active',
            'menu'                => 'col_appointment_type',
            'schedule_start_item' => 'col_schedule_start_item',
            'schedule_end_item'   => 'col_schedule_end_item',
            'schedule_type'       => 'col_schedule_type',
            'fid'                 => 'col_form',
        ];

        if ($active == GRN_WORKFLOW_SCHEDULE_ACTIVE) {
            require_once('workflow/item_logic.csp');
            $item_logic = GRN_Workflow_Item_Logic::getInstance();
            $start_item_by_form = $item_logic->get(
                $schedule_start_item, $form_id,
                ['_id', 'col_foreign_key', 'col_display_name']
            );
            $end_item_by_form = $item_logic->get(
                $schedule_end_item, $form_id,
                ['_id', 'col_foreign_key', 'col_display_name']
            );

            if ($start_item_by_form['col_foreign_key'] != "grn.workflow.date"
                || $end_item_by_form['col_foreign_key'] != "grn.workflow.date"
            ) {
                cb_throw_error(E_GRN_WRKF_ITEM_NOT_DATE);
            }
        }

        //Do Parameter Translation
        $properties = [];

        if ($active == GRN_WORKFLOW_SCHEDULE_DEACTIVACTED) {
            $properties = [
                'col_active' => GRN_WORKFLOW_SCHEDULE_DEACTIVACTED,
                'col_form'   => $form_id
            ];
        } else {
            foreach ($translation_map as $view_name => $model_name) {
                switch ($view_name) {
                    case 'active':
                        $properties[$model_name] = $active;
                        break;
                    case 'menu':
                        $properties[$model_name] = serialize($appointment_type);
                        break;
                    default:
                        if (isset($G_INPUT[$view_name])) {
                            $properties[$model_name] = $G_INPUT[$view_name];
                        }
                        break;
                }
            }
        }

        $auto_schedule_logic->save($properties);

        //監査する
        require_once('workflow/inspection.csp');
        $inspection
            = GRN_Workflow_Auto_Schedule_Setting_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_args = [];
            $message_type = "schedule cooperation";
            $autoScheduleObj = $auto_schedule_logic->getByFormId($form_id);
            if ($autoScheduleObj) {
                $start_item = $autoScheduleObj->getScheduleStartItem();
                $end_item = $autoScheduleObj->getScheduleEndItem();

                require_once('workflow/item_logic.csp');
                $item_logic = GRN_Workflow_Item_Logic::getInstance();
                $start_item_info = $item_logic->get(
                    $start_item, $form_id,
                    ['_id', 'col_foreign_key', 'col_display_name']
                );
                $end_item_info = $item_logic->get(
                    $end_item, $form_id,
                    ['_id', 'col_foreign_key', 'col_display_name']
                );

                if ($active === GRN_WORKFLOW_SCHEDULE_ACTIVE) {
                    $inspection_use = GRN_WORKFLOW_INSPECTION_FLAG_ON;
                } else {
                    $inspection_use = GRN_WORKFLOW_INSPECTION_FLAG_OFF;
                }
                if ($schedule_type == GRN_WORKFLOW_EVENT_REGULAR) {
                    $inspection_event_type = GRN_WORKFLOW_INSPECTION_REGULAR;
                } else {
                    $inspection_event_type = GRN_WORKFLOW_INSPECTION_ALL_DAY;
                }

                $message_args['use'] = $inspection_use;
                $message_args['fid'] = $form_id;
                $message_args['event_type'] = $inspection_event_type;
                $message_args['menu_title']
                    = $autoScheduleObj->getAppointmentType();
                $message_args['start_iid'] = $start_item;
                $message_args['start_display_name']
                    = $start_item_info['col_display_name'];
                $message_args['end_iid'] = $end_item;
                $message_args['end_display_name']
                    = $end_item_info['col_display_name'];

                //Record Inspection
                $inspection->record($message_type, $message_args);
            }
        }

        SmartyValidate::unregister_form($target_name);
        //Redirect Next Page
        cb_redirect('workflow/operation/form_view',
            ['cid' => $category_id, 'fid' => $form_id]);
    } else {
        $translation_map_item = [
            'iid'          => '_id',                  //Item ID
            'display_name' => 'display_name',         //Item Display Name
            'type'         => 'type',                 //Item Type
            'foreign_key'  => 'foreign_key',          //Item foreign_key
        ];

        $item_util = GRN_Workflow_Item_Controller_Utility::getInstance();
        $item_list_for_view = $item_util->getListView($translation_map_item,
            $form_id);

        require_once('schedule/system_logic.csp');
        $logic = GRN_Schedule_SystemLogic::getInstance();

        $menus = $logic->getMenus();

        $date_item_list = [
            [
                'value' => '',
                'label' => cb_msg('grn.workflow.operation', 'choose_date_item'),
            ]
        ];

        foreach ($item_list_for_view as $k => $v) {
            if ($v['foreign_key'] == "grn.workflow.date") {
                $date_item_list[$v['iid']] = [
                    'value' => $v['iid'],
                    'label' => $v['display_name'],
                ];
            }
        }

        $date_start_item_list = $date_end_item_list = $date_item_list;

        $menu_list = [
            [
                'value' => '',
                'label' => GRN_WORKFLOW_SCHEDULE_MENU_DEFAULT
            ]
        ];

        foreach ($menus as $k => $v) {
            $menu_list[] = [
                'value' => "$v[0];#$v[1]",
                'label' => $v[0],
            ];
        }

        $setted_menu = $appointment_type;
        if ($setted_menu != "") {
            $setted_menu_array = [
                'value'    => $setted_menu,
                'label'    => $setted_menu,
                'selected' => true
            ];
            array_unshift($menu_list, $setted_menu_array);
        }

        if (isset($date_start_item_list[$schedule_start_item])) {
            $date_start_item_list[$schedule_start_item]['selected'] = true;
        }

        if (isset($date_end_item_list[$schedule_end_item])) {
            $date_end_item_list[$schedule_end_item]['selected'] = true;
        }

        if ($schedule_type == GRN_WORKFLOW_EVENT_REGULAR) {
            $regular_checked_type = true;
            $allday_checked_type = false;
        } else {
            $regular_checked_type = false;
            $allday_checked_type = true;
        }

        $t->assign('active', $active);
        $t->assign('menus', $menu_list);
        $t->assign('regular_checked_type', $regular_checked_type);
        $t->assign('allday_checked_type', $allday_checked_type);

        $t->assign('date_start_item_list', $date_start_item_list);
        $t->assign('date_end_item_list', $date_end_item_list);
        $t->assign('cid', $category_id);
        $t->assign('fid', $form_id);

        $page_title
            = grn_get_page_display_name('workflow/operation/auto_schedule_register');
        $t->assign('page_title', $page_title);

        $site_position = [
            [
                'page' => 'workflow/index',
                'name' => grn_get_page_display_name('workflow/index'),
                'fid'  => $folder_id,
                'sf'   => 1
            ],
            [
                'page' => 'workflow/operation/form_list',
                'name' => grn_get_page_display_name('workflow/operation/form_list'),
                'cid'  => $category_id,
                'sf'   => 1
            ],
            [
                'page' => 'workflow/operation/form_view',
                'name' => grn_get_page_display_name('workflow/operation/form_view'),
                'cid'  => $category_id,
                'fid'  => $form_id
            ],
            ['page' => '', 'name' => $page_title]
        ];
        $t->assign('site_position', $site_position);

        $t->setPageInfo($target_name);
        $t->display($target_name . '.tpl');
    }
}


