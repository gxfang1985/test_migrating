<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    $category_id = null;
    if (array_key_exists('cid', $G_INPUT)) {
        $category_id = $G_INPUT['cid'];
    }
    $form_id = null;
    if (array_key_exists('fid', $G_INPUT)) {
        $form_id = $G_INPUT['fid'];
    }
    $psids = [];
    if (array_key_exists('psids', $G_INPUT)) {
        $psids = $G_INPUT['psids'];
    }

    // ログインユーザーが運用管理権限を持つか確認
    require_once('workflow/controller_util.csp');
    $category_util = GRN_Workflow_Category_Controller_Utility::getInstance();
    if ( ! $category_util->evaluateManage()) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY);
    }

    // 未分類カテゴリか確認
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID == $category_id) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    // 未分類カテゴリ以外は運用管理権限とアクセス権を確認
    $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

    require_once('workflow/form_logic.csp');
    $logic = GRN_Workflow_Form_Logic::getInstance();
    $form = $logic->get($form_id, $category_id);
    if ( ! is_array($form) || 0 == count($form)) {
        // フォームがない
        cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
    }
    $path_id = $form['col_path'];

    require_once('workflow/path.csp');
    $logic = GRN_Workflow_Paths::getInstance();
    $columns = [
        '_id',
        'col_type'
    ];
    $path = $logic->get($path_id, $columns);
    if ( ! is_array($path) || 0 == count($path)) {
        // 経路がない
        cb_throw_error(E_GRN_WRKF_NOT_FOUND_PATH);
    }
    if (GRN_WORKFLOW_PRIVATE_PATH != $path['col_type']) {
        // 専用経路でない経路は変更できない
        cb_throw_error(E_GRN_WRKF_DENY_MODIFY_NOT_PRIVATE_PATH);
    }

    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();

    $properties = [
        'col_modifier'             => $login->getOID(),
        'col_modifier_name'        => $login->get('display_name'),
        'col_modifier_foreign_key' => $login->get('foreign_key'),
        'col_mtime'                => time()
    ];
    $logic->modify($path_id, $properties);

    $logic = GRN_Workflow_PathSteps::getInstance();
    $logic->removeList($psids);

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Path_Step_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'path_step_delete_multi';
        $message_args['psids'] = $psids;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    cb_redirect('workflow/operation/form_view',
        ['cid' => $category_id, 'fid' => $form_id]);
}


