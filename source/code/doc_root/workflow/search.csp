<?php

global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//   Session Handling Section    //

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');

//Login User
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$user =& $uum->getLoginUser();

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session =& $session_manager->getSession(cb_get_pagename());

require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
assert('is_object( $manager ) && is_a( $manager, \'GRN_UIConfigManager\' )');
$config =& $manager->getUserConfig($user);

if (@ $G_INPUT['sf']) {
    //Load Search Settings
    $search = $session->get('search');
    $folder_id = $search['folder_id'];     //Folder ID

    if (array_key_exists('sort', $G_INPUT)) {
        $sort = @  $G_INPUT['sort'];
        $search['sort'] = $sort;
        //$session->set('search', $search);
    } else {
        $sort = $search['sort'];
    }
    if (array_key_exists('sort_result', $G_INPUT)) {
        $sort_result = @  $G_INPUT['sort_result'];
        $search['sort_result'] = $sort_result;
    } else {
        $sort_result = $search['sort_result'];
    }
} else {
    //Get Parameter From $G_INPUT
    $folder_id = @ $G_INPUT['fid'];         //Folder ID

    //Search Term
    $term = @ $G_INPUT['term'] ? $G_INPUT['term'] : 20;//Search Term

    $sort = @ $G_INPUT['sort'];         //Sort
    $sort_result = @ $G_INPUT['sort_result'];

    //Search Condition and Condition Items
    if (isset($G_INPUT['search_text']) && $G_INPUT['search_text'] != '') {
        $condition = 'OR';
        $condition_item_list = [];
        $condition_item_list[] = [
            'type'  => GRN_WORKFLOW_SEARCH_ITEM_NUMBER,
            'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
            'value' => $G_INPUT['search_text']
        ];
        $condition_item_list[] = [
            'type'  => GRN_WORKFLOW_SEARCH_ITEM_FORM_NAME,
            'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
            'value' => $G_INPUT['search_text']
        ];
        $condition_item_list[] = [
            'type'  => GRN_WORKFLOW_SEARCH_ITEM_NAME,
            'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
            'value' => $G_INPUT['search_text']
        ];
        $condition_item_list[] = [
            'type'  => GRN_WORKFLOW_SEARCH_ITEM_USER,
            'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
            'value' => $G_INPUT['search_text']
        ];
        $condition_item_list[] = [
            'type'  => GRN_WORKFLOW_SEARCH_ITEM_STRING,
            'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
            'value' => $G_INPUT['search_text']
        ];
    } else {
        $condition = @ $G_INPUT['condition'] ? strtoupper($G_INPUT['condition'])
            : 'AND';//Search Term
        if ($condition != 'AND' && $condition != 'OR') {
            $condition = 'AND';
        }
        $condition_item_list = [];
        foreach (array_keys($G_INPUT) as $key) {
            if (strpos($key, 'item_') === 0) {
                $keys = explode('_', $key);
                if (count($keys) === 4) {
                    $condition_item_list[$keys[2]][$keys[1]][$keys[3]]
                        = $G_INPUT[$key];
                } else {
                    $condition_item_list[$keys[2]][$keys[1]] = $G_INPUT[$key];
                }
            }
        }

        foreach ($condition_item_list as $key => $condition_item) {
            if ( ! array_key_exists('type', $condition_item)
                 || ! array_key_exists('expr', $condition_item)
                 || ! array_key_exists('value', $condition_item)
                 || $condition_item['value'] == ''
            ) {
                unset($condition_item_list[$key]);
            }
        }
    }

    //Save Search Settings
    $search = [
        'folder_id'           => $folder_id,
        'term'                => $term,
        'condition'           => $condition,
        'condition_item_list' => $condition_item_list,
        'sort'                => $sort,
        'sort_result'         => $sort_result,
    ];
    $session->set('search', $search);
}

//   Search Condition Section    //

//Get Folder Controller Utility
require_once('workflow/controller_util.csp');
$folder_util = GRN_Workflow_Folder_Controller_Utility::getInstance();

//Create Parameter Translation for Folder
$translation_map_folder = [
    'fid'         => '_id',          //Folder ID
    'name'        => 'name',         //Folder Name
    'folder_type' => 'folder_type',  //Folder Type
];

//Get Folder List for View
global $G_workflow_login_user;
$folder_list_for_view = $folder_util->getListView($translation_map_folder,
    $G_workflow_login_user->getOID());

//Create Folder Options
$folder_options = [];
foreach (array_keys($folder_list_for_view) as $key) {
    $folder =& $folder_list_for_view[$key];
    if ($folder['folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_NEW_ID
        || $folder['folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_IN_ID
        || $folder['folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_OUT_ID
        || $folder['folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID
        || $folder['folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID
        || $folder['folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_PUBLIC_ID

    ) {
        $folder_options[$key] = ['label' => $folder['name'], 'value' => $key];
    }
}
if ($folder_id) {
    //Check Folder Owner
    if ( ! array_key_exists($folder_id, $folder_list_for_view)) {
        //Folder Not Found
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_FOLDER_NOT_FOUND);
    }

    $folder_options[$folder_id]['selected'] = true;
    $folder_for_view = $folder_list_for_view[$folder_id];
} else {
    //Set default folder
    $array_folder_key = array_keys($folder_list_for_view);
    $folder_id = $array_folder_key[0];
    $folder_options[$folder_id]['selected'] = true;
    $folder_for_view = $folder_list_for_view[$folder_id];
}
$search['folder_options'] = $folder_options;

//Get Folder List for View
$folder_list = $folder_util->getListView($translation_map_folder,
    $G_workflow_login_user->getOID());
$folder_list_for_view = [];
foreach ($folder_list as $id => $folder) {
    switch ($folder['folder_type']) {
        case GRN_WORKFLOW_FOLDER_TYPE_NEW_ID:
            $folder_list_for_view['new_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
            $folder_list_for_view['in_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
            $folder_list_for_view['out_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
            $folder_list_for_view['finish_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
            $folder_list_for_view['unprocessed_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID:
            $folder_list_for_view['temp_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_PROXY_APPROVAL_ID:
            $folder_list_for_view['proxy_approval_folder'] = $folder;
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID:
            $folder_list_for_view['approval_plan_folder'] = $folder;
            break;
    }
}
$t->assign('folder_list', $folder_list_for_view);

//Create Term Options
$term_options = [];
$term_options[10] = [
    'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'search_term',
        ['term_number' => '10']),
    'value' => 10
];
$term_options[20] = [
    'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'search_term',
        ['term_number' => '20']),
    'value' => 20
];
$term_options[50] = [
    'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'search_term',
        ['term_number' => '50']),
    'value' => 50
];
$term_options[100] = [
    'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'search_term',
        ['term_number' => '100']),
    'value' => 100
];
$term_options[$search['term']]['selected'] = true;
$search['term_options'] = $term_options;

//Create Condition Options
$condition_options = [];
$condition_options['AND'] = [
    'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'AND'),
    'value' => 'AND'
];
$condition_options['OR'] = [
    'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'OR'),
    'value' => 'OR'
];
$condition_options[$search['condition']]['selected'] = true;
$search['condition_options'] = $condition_options;

//Create Item Type Options
$item_type_options = [];
for ($i = 0; $i < 8; $i++) {
    //if ( $i == 6 ) continue;
    $item_type_options[$i] = [
        'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'item_type_' . $i),
        'value' => $i
    ];
}

//Create Item Value Options
$item_value_options = [];
for ($i = 0; $i < 5; $i++) {
    $item_value_options[$i] = [
        'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'item_value_' . $i),
        'value' => $i
    ];
}

$item_value_options_priority = [];
for ($i = 0; $i < 3; $i++) {
    if ($i == 2) {
        continue;
    }
    $item_value_options_priority[$i]
        = [
        'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'priority_type_' . $i),
        'value' => $i
    ];
}

//Create Item Expr Options
$item_expr_options = [];
$item_expr_options['standard'] = [];
$item_expr_options['status'] = [];
$item_expr_options['date'] = [];
$item_expr_options['priority'] = [];
for ($i = 0; $i < 6; $i++) {
    $option = [
        'label' => cb_plain_msg(GRN_WORKFLOW_MODULE_ID, 'item_expr_' . $i),
        'value' => $i
    ];
    if ($i < 4) {
        //for Standard
        $item_expr_options['standard'][$i] = $option;
    }
    if ($i > 1 && $i < 4) {
        //for Status
        $item_expr_options['status'][$i] = $option;
    }
    if ($i > 1) {
        //for Date
        $item_expr_options['date'][$i] = $option;
    }
    if ($i > 1 && $i < 4) {
        //for Priority
        $item_expr_options['priority'][$i] = $option;
    }
}

$is_string_search = false;

//Convert Condition Item List
foreach (array_keys($search['condition_item_list']) as $key) {
    $condition_item =& $search['condition_item_list'][$key];

    //Create Type Options
    $temp_options = $item_type_options;
    $temp_options[$condition_item['type']]['selected'] = true;
    $condition_item['type_options'] = $temp_options;

    //Create Expr Options
    switch ($condition_item['type']) {
        case 3:
            $temp_options = $item_expr_options['status'];
            break;
        case 4:
            $temp_options = $item_expr_options['date'];
            break;
        case 7:
            $temp_options = $item_expr_options['priority'];
            break;
        case 6:
            $is_string_search = true;
        default:
            $temp_options = $item_expr_options['standard'];
            break;
    }
    $temp_options[$condition_item['expr']]['selected'] = true;
    $condition_item['expr_options'] = $temp_options;

    //Convert Status Value
    if ($condition_item['type'] == GRN_WORKFLOW_SEARCH_ITEM_STATUS) {
        $temp_options = $item_value_options;
        $temp_options[$condition_item['value']]['selected'] = true;
        $condition_item['value_options'] = $temp_options;
    }

    //Convert Date Value
    if ($condition_item['type'] == GRN_WORKFLOW_SEARCH_ITEM_DATE) {
        $date = new CB_Date();
        $date->year = $condition_item['value']['year'];
        $date->month = $condition_item['value']['month'];
        $date->day = $condition_item['value']['day'];
        $condition_item['value'] = new CB_DateEx($date);
    }

    //Convert Priority Value
    if ($condition_item['type'] == GRN_WORKFLOW_SEARCH_ITEM_PRIORITY) {
        $temp_options = $item_value_options_priority;
        $temp_options[$condition_item['value']]['selected'] = true;
        $condition_item['value_options'] = $temp_options;
    }

}
$search['condition_item_count'] = count($search['condition_item_list']);


//Create Sort Option
$option['sort'] = [];
switch ($sort) {
    case 'pnu':
        $option['sort'][] = ['column' => 'p.col_priority', 'order' => 'ASC'];
        break;
    case 'pnd':
        $option['sort'][] = ['column' => 'p.col_priority', 'order' => 'DESC'];
        break;
    case 'fnu':
        $option['sort'][] = ['column' => 'p.col_form_name', 'order' => 'ASC'];
        break;
    case 'fnd':
        $option['sort'][] = ['column' => 'p.col_form_name', 'order' => 'DESC'];
        break;
    case 'ctu':
        $option['sort'][] = ['column' => 'p.col_ctime', 'order' => 'ASC'];
        break;
    case 'ctd':
        $option['sort'][] = ['column' => 'p.col_ctime', 'order' => 'DESC'];
        break;
    default:
        //unset($option['sort']);
        $sort = 'ctd';
        $option['sort'][] = ['column' => 'p.col_ctime', 'order' => 'DESC'];
        break;
}

//   Search Section    //

if ($search['condition_item_count'] != 0) {
    if ($folder_for_view['folder_type'] != GRN_WORKFLOW_FOLDER_TYPE_NEW_ID) {
        //Get Petition Total Count

        //N-Navigation
        require_once('workflow/utility.csp');
        $params = ['fid' => $folder_id, 'sf' => 1];
        if ($sort) {
            $params['sort'] = $sort;

        }
        //$n_navigation_for_view = grn_make_n_navigation($petition_count, $params, $search['term']);

        //Create List Option
        /*
        $search['list'] = array();
        $search['list']['offset'] = $n_navigation_for_view['offset'];
        $search['list']['limit'] = $n_navigation_for_view['limit'];
        */

        //Search Petition ID
        /*
        require_once('workflow/folder_logic_base.csp');
        $folder_logic_base = GRN_Workflow_Folder_Logic_Base::getInstance();
        $petition_id_list = $folder_logic_base->searchPetitionIdList($folder_id, $search);
        */

        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID) {
            //承認予定
            if (array_key_exists('condition_item_list', $search)
                && count($search['condition_item_list']) == 1
            ) {
                $string_only = true;
                foreach ($search['condition_item_list'] as $search_item) {
                    if ($search_item['type']
                        != GRN_WORKFLOW_SEARCH_ITEM_STRING
                    ) {
                        $string_only = false;
                    }
                }
                if ($string_only == true
                    && array_key_exists('condition', $search)
                ) {
                    $search['condition'] = 'AND';
                }
            }
        }

        $petition_id_list = $folder_util->searchPetitionIdList($user->getOID(),
            $folder_id, $folder_for_view['folder_type'], $search,
            $is_string_search, CB_DATABASE_NO_LOCK);

        $petition_count = count($petition_id_list);
        $n_navigation_for_view = grn_make_n_navigation($petition_count, $params,
            $search['term']);

        //$search['list'] = array();
        //$search['list']['offset'] = $n_navigation_for_view['offset'];
        //$search['list']['limit'] = $n_navigation_for_view['limit'];

        //$petition_id_list = $folder_util->searchPetitionIdList($user->getOID(), $folder_id, $folder_for_view['folder_type'], $search, $is_string_search);

        /*
        if ( count($petition_id_list) > 0 && $is_string_search == true )
        {
            require_once('workflow/controller_util.csp');
            $controller = new GRN_Workflow_ControllerUtil(cb_get_pagename());
            $controller->Filter($folder_for_view['folder_type'], $petition_id_list);
            unset($controller);
        }
        */

        //Get Petition List for View
        $option['condition'] = [];
        $petition_list_for_view = [];
        $users_id = [];
        if (count($petition_id_list) !== 0) {
            //Create Parameter Translation for Petition
            $translation_map_petition = [
                'pid'             => '_id',
                //Petition ID
                'petition_number' => 'petition_number',
                //Petition Name
                'name'            => 'name',
                //Petition Name
                'form_name'       => 'form_name',
                //Petition Form Name
                'status'          => 'status',
                //Petition Status
                'user'            => 'user',
                //Petition User
                'user_name'       => 'user_name',
                //Petition User Name
                'ctime'           => 'ctime',
                //Petition Create Time
                'transactor_id'   => 'transactor',
                //Petition Transactor
                'transactor_name' => 'transactor_name',
                //Petition Transactor Name
                'icon_type'       => 'icon_type',
                //Petition Icon Type
                'icon_id'         => 'icon_id',
                //Petition Icon ID
                'icon_url'        => 'icon_url',
                //Petition Icon URL
                'priority'        => 'priority',
                //Petition priority
            ];
            //Get Petition List for View
            $petition_util
                = GRN_Workflow_Petition_Controller_Utility::getInstance();
            $petition_list_for_view = [];
            if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID
                || $folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
                || $folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID
            ) {
                /*
                $petition_id_list_tmp = array();
                foreach( $petition_id_list as $key => $petition )
                {
                    $option = array();
                    $option['condition'][] = array('column'=>'_id', 'value'=>array($petition['col_petition']), 'operator'=>'IN');
                    $petition_for_view = $petition_util->getListView($translation_map_petition, null, $option);

                    $petition_for_view[$petition['col_petition']]['folder'] = array_key_exists('col_folder', $petition) ? $petition['col_folder'] : null;
                    $petition_list_for_view[] = $petition_for_view[$petition['col_petition']];
                    $petition_id_list_tmp[] = $petition['col_petition'];
                }
                $petition_id_list = $petition_id_list_tmp;
                */

                $petition_list_for_view = [];
                if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID) {
                    //代理承認の場合は、同じ申請でも委任者が異なる場合があるので、個別に判定
                    foreach ($petition_id_list as $key => $petition) {
                        $option = [];
                        $option['condition'][] = [
                            'column'   => '_id',
                            'value'    => [$petition['col_petition']],
                            'operator' => 'IN'
                        ];
                        $petition_for_view
                            = $petition_util->getListView($translation_map_petition,
                            null, $option);

                        $petition_for_view[$petition['col_petition']]['folder']
                            = array_key_exists('col_folder', $petition)
                            ? $petition['col_folder'] : null;
                        $petition_list_for_view[]
                            = $petition_for_view[$petition['col_petition']];
                    }
                } else {
                    $option['list'] = [];
                    $option['list']['offset']
                        = $n_navigation_for_view['offset'];
                    $option['list']['limit'] = $n_navigation_for_view['limit'];

                    if (array_key_exists('sort', $option)) {
                        foreach (array_keys($option['sort']) as $key) {
                            if (strpos($option['sort'][$key]['column'], 'p.')
                                === 0
                            ) {
                                $option['sort'][$key]['column']
                                    = str_replace('p.', '',
                                    $option['sort'][$key]['column']);
                            }
                        }
                    }
                    $id_list = [];
                    foreach ($petition_id_list as $key => $petition) {
                        $id_list[] = $petition['col_petition'];
                    }
                    $option['condition'][] = [
                        'column'   => '_id',
                        'value'    => $id_list,
                        'operator' => 'IN'
                    ];
                    $petition_list_for_view
                        = $petition_util->getListView($translation_map_petition,
                        null, $option);
                }

                foreach ($petition_list_for_view as $key => $petition) {
                    /*
                    $petition_for_view[$key]['folder'] = array_key_exists('col_folder', $petition_id_list[$key]) ? $petition_id_list[$key]['col_folder'] : null;
                    */
                    if ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
                        || $folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID
                    ) {
                        $petition_list_for_view[$key]['folder'] = $folder_id;
                    } else {
                        foreach ($petition_id_list as $value) {
                            if ($value['col_petition'] == $key) {
                                $petition_list_for_view[$key]['folder']
                                    = array_key_exists('col_folder', $value)
                                    ? $value['col_folder'] : null;
                                break;
                            }
                        }
                    }
                }

                if ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
                    //重複を取り除く
                    require_once('workflow/form_logic.csp');
                    require_once('workflow/category_logic.csp');
                    $form_logic = GRN_Workflow_Form_Logic::getInstance();
                    $category_logic
                        = GRN_Workflow_Category_Logic::getInstance();
                    foreach ($petition_list_for_view as $key => $petition) {
                        $form_id
                            = $form_logic->getIdByPetitionId($petition['pid']);
                        if ( ! $form_id) {
                            unset($petition_list_for_view[$key]);
                            continue;
                        }
                    }
                }
            } else {
                if (array_key_exists('sort', $option)) {
                    foreach (array_keys($option['sort']) as $key) {
                        if (strpos($option['sort'][$key]['column'], 'p.')
                            === 0
                        ) {
                            $option['sort'][$key]['column'] = str_replace('p.',
                                '', $option['sort'][$key]['column']);
                        }
                    }
                }
                $option['condition'][] = [
                    'column'   => '_id',
                    'value'    => $petition_id_list,
                    'operator' => 'IN'
                ];
                $option['list'] = [];
                $option['list']['offset'] = $n_navigation_for_view['offset'];
                $option['list']['limit'] = $n_navigation_for_view['limit'];

                $petition_list_for_view
                    = $petition_util->getListView($translation_map_petition,
                    null, $option);
            }

            //Get Last Accept Path Step
            require_once('workflow/controller_util.csp');
            $controller_util
                = new GRN_Workflow_ControllerUtil(cb_get_pagename());
            foreach (array_keys($petition_list_for_view) as $petition_id) {
                $petition_for_view =& $petition_list_for_view[$petition_id];
                $applicant =& $uum->getUser($petition_for_view['user']);
                if ($applicant) {
                    $petition_for_view['user_valid'] = $applicant->get('valid');
                }

                if (array_key_exists('transactor_id', $petition_for_view)) {
                    $transactor
                        =& $uum->getUser($petition_for_view['transactor_id']);
                    if ($transactor) {
                        $petition_for_view['transactor_valid']
                            = $transactor->get('valid');
                    }
                }

                //Get Last Path Step Information
                $path_steps = $controller_util->getPathInfo($petition_id, false,
                    CB_DATABASE_NO_LOCK);
                $path_step
                    =& $controller_util->getLastAcceptancePathStep(current($path_steps));
                $transactor = $path_step['users'];
//GRB-15046 tv
                $users_id = $path_step['uids'];
                $transactor_num = count($path_step['users']);
                if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
                    $transactor = array_slice($transactor, 0,
                        GRN_WORKFLOW_SHOW_MAX_USER_NUM);
                }
                $petition_list_for_view[$petition_id]['transactor']
                    = $transactor;
                $petition_list_for_view[$petition_id]['transactor_num']
                    = $transactor_num;

                if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID
                    && array_key_exists('folder',
                        $petition_list_for_view[$petition_id])
                ) {
                    $fid = $petition_list_for_view[$petition_id]['folder'];

                    $translation_map_folder_tmp = [
                        'user' => 'user',
                    ];
                    require_once('workflow/folder_logic.csp');
                    $folder_logic = GRN_Workflow_Folder_Logic::getInstance();
                    $folder = $folder_logic->getFolder($fid);
                    if ($folder) {
                        $folder_user_id = $folder['col_user'];
                        $columns = [
                            '_id',
                            'col_display_name',
                            'col_valid',
                        ];
                        $user_info = $uum->getUserInfo($folder_user_id,
                            $columns);

                        $petition_list_for_view[$petition_id]['folder_user_id']
                            = $user_info['_id'];
                        $petition_list_for_view[$petition_id]['folder_user_name']
                            = GRN_ControllerUtil::getUserNameText($user->getOID(),
                            $user_info['_id']);
                        $petition_list_for_view[$petition_id]['folder_user_valid']
                            = $user_info['col_valid'];
                    }
                }
            }
        }
        require_once("grn/controller.csp");
        $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
            $user);
        $t->assign('users_info', $users_info);//GRB-15046 tv
        //Assign Petition List
        $t->assign('petition_list', $petition_list_for_view);
        //Assign Navi
        $t->assign('navi', $n_navigation_for_view);
    } else {
        //Search Unprocessed and Finish Folder


        //Create List Option
        $search['list'] = [];
        $search['list']['offset'] = 0;
        $search['list']['limit'] = -1;

        $unprocessed_petition_id_list
            = $folder_util->searchPetitionIdList($user->getOID(),
            $folder_list_for_view['unprocessed_folder']['fid'],
            GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID, $search, $is_string_search,
            CB_DATABASE_NO_LOCK);
        $unprocessed_petition_count = count($unprocessed_petition_id_list);

        //Multi N Navi
        require_once('grn/multi_controller.csp');
        $utility = new GRN_MultiControllerUtil();

        //Multi N Navi for Unprocessed Folder
        $prefix = 'unprocessed_';
        $offset = $utility->getNaviStartPosition($prefix);
        $utility->setNaviStartPosition($offset, $prefix);
        $params = [
            'fid' => $folder_list_for_view['unprocessed_folder']['fid'],
            'sf'  => 1
        ];
        if ($sort) {
            $params['sort'] = $sort;
        }
        if ($sort_result) {
            $params['sort_result'] = $sort_result;
        }
        $n_navigation_for_view_unprocessed
            = $utility->makeNaviInformation($offset, $search['term'],
            $unprocessed_petition_count, $params, $prefix);
        $t->assign('unprocessed_navi', $n_navigation_for_view_unprocessed);


        //Create List Option
        $search['list'] = [];
        $search['list']['offset'] = 0;
        $search['list']['limit'] = -1;

        $finish_petition_id_list
            = $folder_util->searchPetitionIdList($user->getOID(),
            $folder_list_for_view['finish_folder']['fid'],
            GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID, $search, $is_string_search,
            CB_DATABASE_NO_LOCK);
        $finish_petition_count = count($finish_petition_id_list);

        //Multi N Navi for Finished Folder
        $prefix = 'finish_';
        $offset = $utility->getNaviStartPosition($prefix);
        $utility->setNaviStartPosition($offset, $prefix);
        $params = [
            'fid' => $folder_list_for_view['finish_folder']['fid'],
            'sf'  => 1
        ];
        if ($sort) {
            $params['sort'] = $sort;
        }
        if ($sort_result) {
            $params['sort_result'] = $sort_result;
        }

        $n_navigation_for_view_finish = $utility->makeNaviInformation($offset,
            $search['term'], $finish_petition_count, $params, $prefix);
        $t->assign('finish_navi', $n_navigation_for_view_finish);

        //Create Parameter Translation for Petition
        $translation_map_petition = [
            'pid'             => '_id',              //Petition ID
            'petition_number' => 'petition_number',  //Petition Name
            'name'            => 'name',             //Petition Name
            'form_name'       => 'form_name',        //Petition Form Name
            'status'          => 'status',           //Petition Status
            'user'            => 'user',             //Petition User
            'user_name'       => 'user_name',        //Petition User Name
            'ctime'           => 'ctime',            //Petition Create Time
            'transactor_id'   => 'transactor',       //Petition Transactor
            'transactor_name' => 'transactor_name',  //Petition Transactor Name
            'icon_type'       => 'icon_type',        //Petition Icon Type
            'icon_id'         => 'icon_id',          //Petition Icon ID
            'icon_url'        => 'icon_url',         //Petition Icon URL
            'priority'        => 'priority',         //Petition priority
        ];

        if (is_null($sort)) {
            $sort = 'ctd';
        }

        //Get Unprocessed Petition List for View
        if (count($unprocessed_petition_id_list) !== 0) {
            unset($option['sort']);
            switch ($sort) {
                case 'pnd':
                    $option['sort'][] = [
                        'column' => 'col_priority',
                        'order'  => 'DESC'
                    ];
                    break;
                case 'pnu':
                    $option['sort'][] = [
                        'column' => 'col_priority',
                        'order'  => 'ASC'
                    ];
                    break;
                case 'fnu':
                    $option['sort'][] = [
                        'column' => 'col_form_name',
                        'order'  => 'ASC'
                    ];
                    break;
                case 'fnd':
                    $option['sort'][] = [
                        'column' => 'col_form_name',
                        'order'  => 'DESC'
                    ];
                    break;
                case 'ctu':
                    $option['sort'][] = [
                        'column' => 'col_ctime',
                        'order'  => 'ASC'
                    ];
                    break;
                case 'ctd':
                    $option['sort'][] = [
                        'column' => 'col_ctime',
                        'order'  => 'DESC'
                    ];
                    break;
                default:
                    $sort = 'ctd';
                    $option['sort'][] = [
                        'column' => 'col_ctime',
                        'order'  => 'DESC'
                    ];
                    break;
            }

            //Get Petition List for View
            $option['condition'] = [];
            $option['condition'][] = [
                'column'   => '_id',
                'value'    => $unprocessed_petition_id_list,
                'operator' => 'IN'
            ];

            $option['list'] = [];
            $option['list']['offset']
                = $n_navigation_for_view_unprocessed['offset'];
            $option['list']['limit']
                = $n_navigation_for_view_unprocessed['limit'];

            $petition_util
                = GRN_Workflow_Petition_Controller_Utility::getInstance();
            $petition_list_for_view
                = $petition_util->getListView($translation_map_petition, null,
                $option);

            //Get Last Accept Path Step
            require_once('workflow/controller_util.csp');
            $controller_util
                = new GRN_Workflow_ControllerUtil(cb_get_pagename());
            foreach (array_keys($petition_list_for_view) as $petition_id) {
                $petition_for_view =& $petition_list_for_view[$petition_id];
                $applicant =& $uum->getUser($petition_for_view['user']);
                if ($applicant) {
                    $petition_for_view['user_valid'] = $applicant->get('valid');
                }

                if (array_key_exists('transactor_id', $petition_for_view)) {
                    $transactor
                        =& $uum->getUser($petition_for_view['transactor_id']);
                    if ($transactor) {
                        $petition_for_view['transactor_valid']
                            = $transactor->get('valid');
                    }
                }

                //Get Last Path Step Information
                $path_steps = $controller_util->getPathInfo($petition_id,
                    false, CB_DATABASE_NO_LOCK);
                $path_step
                    =& $controller_util->getLastAcceptancePathStep(current($path_steps));
                $transactor = $path_step['users'];
                $transactor_num = count($path_step['users']);
                if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
                    $transactor = array_slice($transactor, 0,
                        GRN_WORKFLOW_SHOW_MAX_USER_NUM);
                }
                $petition_list_for_view[$petition_id]['transactor']
                    = $transactor;
                $petition_list_for_view[$petition_id]['transactor_num']
                    = $transactor_num;
            }

            //Assign Unprocessed Petition List
            $t->assign('unprocessed_petition_list', $petition_list_for_view);
        }

        if (is_null($sort_result)) {
            $sort_result = 'crtd';
        }

        //Get Finish Petition List for View
        if (count($finish_petition_id_list) !== 0) {
            unset($option['sort']);
            switch ($sort_result) {
                case 'prnd':
                    $option['sort'][] = [
                        'column' => 'col_priority',
                        'order'  => 'DESC'
                    ];
                    break;
                case 'prnu':
                    $option['sort'][] = [
                        'column' => 'col_priority',
                        'order'  => 'ASC'
                    ];
                    break;
                case 'frnu':
                    $option['sort'][] = [
                        'column' => 'col_form_name',
                        'order'  => 'ASC'
                    ];
                    break;
                case 'frnd':
                    $option['sort'][] = [
                        'column' => 'col_form_name',
                        'order'  => 'DESC'
                    ];
                    break;
                case 'crtu':
                    $option['sort'][] = [
                        'column' => 'col_ctime',
                        'order'  => 'ASC'
                    ];
                    break;
                case 'crtd':
                    $option['sort'][] = [
                        'column' => 'col_ctime',
                        'order'  => 'DESC'
                    ];
                    break;
                default:
                    $sort_result = 'crtd';
                    $option['sort'][] = [
                        'column' => 'col_ctime',
                        'order'  => 'DESC'
                    ];
                    break;
            }

            //Get Petition List for View
            $option['condition'] = [];
            $option['condition'][] = [
                'column'   => '_id',
                'value'    => $finish_petition_id_list,
                'operator' => 'IN'
            ];

            $option['list'] = [];
            $option['list']['offset'] = $n_navigation_for_view_finish['offset'];
            $option['list']['limit'] = $n_navigation_for_view_finish['limit'];

            $petition_util
                = GRN_Workflow_Petition_Controller_Utility::getInstance();
            $petition_list_for_view
                = $petition_util->getListView($translation_map_petition, null,
                $option);

            //Get Last Accept Path Step
            require_once('workflow/controller_util.csp');
            $controller_util
                = new GRN_Workflow_ControllerUtil(cb_get_pagename());
            foreach (array_keys($petition_list_for_view) as $petition_id) {
                $petition_for_view =& $petition_list_for_view[$petition_id];
                $applicant =& $uum->getUser($petition_for_view['user']);
                if ($applicant) {
                    $petition_for_view['user_valid'] = $applicant->get('valid');
                }

                if (array_key_exists('transactor_id', $petition_for_view)) {
                    $transactor
                        =& $uum->getUser($petition_for_view['transactor_id']);
                    if ($transactor) {
                        $petition_for_view['transactor_valid']
                            = $transactor->get('valid');
                    }
                }

                //Get Last Path Step Information
                $path_steps = $controller_util->getPathInfo($petition_id,
                    false, CB_DATABASE_NO_LOCK);
                $path_step
                    =& $controller_util->getLastAcceptancePathStep(current($path_steps));
                $transactor = $path_step['users'];
                $transactor_num = count($path_step['users']);
                if ($transactor_num > GRN_WORKFLOW_SHOW_MAX_USER_NUM) {
                    $transactor = array_slice($transactor, 0,
                        GRN_WORKFLOW_SHOW_MAX_USER_NUM);
                }
                $petition_list_for_view[$petition_id]['transactor']
                    = $transactor;
                $petition_list_for_view[$petition_id]['transactor_num']
                    = $transactor_num;
            }
            //Assign Finish Petition List
            $t->assign('finish_petition_list', $petition_list_for_view);

            // delete info
            $finish_folder_id = $folder_list_for_view['finish_folder']['fid'];
            $delete_info_multi_finished = [
                'title'        => grn_get_page_display_name('workflow/delete_multi',
                    [
                        'folder_type' => cb_msg('grn.workflow',
                            'col_folder_type_4')
                    ]),
                'page'         => 'workflow/delete_multi.tpl',
                'no_confirm'   => false,
                'data'         => [
                    'folder_name' => cb_msg('grn.workflow',
                        'col_folder_type_4'),
                    'fid'         => $finish_folder_id
                ],
                'handler'      => [
                    'btn_delete_multi_finish1',
                    'btn_delete_multi_finish2'
                ],
                'multi_target' => 'pids[]',
                'form_target'  => 'workflow/search_delete',
            ];
            $t->assign('delete_info_multi_finish', $delete_info_multi_finished);
        }
    }
} else {
    //Make Dummy Navigation
    if ($folder_for_view['folder_type'] != GRN_WORKFLOW_FOLDER_TYPE_NEW_ID) {
        //N-Navigation
        require_once('workflow/utility.csp');
        $params = ['fid' => $folder_id, 'sf' => 1];
        $n_navigation_for_view = grn_make_n_navigation(0, $params,
            $search['term']);
        $t->assign('navi', $n_navigation_for_view);
    } else {
        //Multi N Navi
        require_once('grn/multi_controller.csp');
        $utility = new GRN_MultiControllerUtil();

        //Multi N Navi for Unprocessed Folder
        $prefix = 'unprocessed_';
        $utility->setNaviStartPosition(0, $prefix);
        $params = [
            'fid' => $folder_list_for_view['unprocessed_folder']['fid'],
            'sf'  => 1
        ];
        $n_navigation_for_view = $utility->makeNaviInformation(0,
            $search['term'], 0, $params, $prefix);
        $t->assign('unprocessed_navi', $n_navigation_for_view);

        //Multi N Navi for Finished Folder
        $prefix = 'finish_';
        $utility->setNaviStartPosition(0, $prefix);
        $params = [
            'fid' => $folder_list_for_view['finish_folder']['fid'],
            'sf'  => 1
        ];
        $n_navigation_for_view = $utility->makeNaviInformation(0,
            $search['term'], 0, $params, $prefix);
        $t->assign('finish_navi', $n_navigation_for_view);
    }

    if (is_null($sort)) {
        $sort = 'ctd';
    }
    if (is_null($sort_result)) {
        $sort_result = 'crtd';
    }
}

//Assign Display Infomation
//Assign Foler ID
$t->assign('folder_id', $folder_id);
//Assign Foler
$t->assign('folder', $folder_for_view);

//Assign Item Type Options
$t->assign('item_type_options', $item_type_options);
//Assign Item Value Options
$t->assign('item_value_options', $item_value_options);
//Assign Item Exper Options
$t->assign('item_expr_options', $item_expr_options);
//Assign Item Value Options
$t->assign('item_value_options_priority', $item_value_options_priority);

//Assign Search
$t->assign('search', $search);

$t->assign('sort', $sort);
$t->assign('sort_result', $sort_result);

//UI Parameters
require_once('grn/ui.csp');
$ucm = GRN_UIConfigManager::getInstance();
$uc =& $ucm->getUserConfig($user);

$t->assign('name_width', $config->getNameWidth());//GRN_WORKFLOW_NAME_WIDTH
$t->assign('subject_width_fix', GRN_WORKFLOW_SUBJECT_WIDTH);
$t->assign('subject_width', $uc->getSubjectWidth());
$t->assign('show_user_num', GRN_WORKFLOW_SHOW_MAX_USER_NUM);

//-- set page title and site position

// delete multi
require_once('workflow/folder_logic.csp');
$logic = GRN_Workflow_Folder_Logic::getInstance();
$folder = $logic->get($user->getOID(), $folder_id);
if ( ! is_array($folder) || 0 == count($folder)) {
    // ログインユーザーはフォルダの所有者でない
    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
}
$args = [];
$folder_type = $folder['col_folder_type'];
$folder_name = '';
if ($folder_type == 2 || $folder_type == 3) {
    $args = [
        'folder_type' => cb_msg('grn.workflow',
            "col_folder_type_{$folder_type}")
    ];
    $folder_name = $args['folder_type'];
}
$delete_info_multi = [
    'title'        => grn_get_page_display_name('workflow/delete_multi', $args),
    'page'         => 'workflow/delete_multi.tpl',
    'no_confirm'   => false,
    'data'         => [
        'folder_name' => $folder_name,
        'fid'         => $folder_id
    ],
    'handler'      => [
        'btn_delete_multi1',
        'btn_delete_multi2'
    ],
    'multi_target' => 'pids[]',
    'form_target'  => 'workflow/search_delete',
];
$t->assign('delete_info_multi', $delete_info_multi);

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $folder_id,
            'sf'   => 1
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

