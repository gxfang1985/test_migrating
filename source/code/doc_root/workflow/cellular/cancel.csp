<?php
//Instantiate an Smarty object
require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// connect Smarty Validate
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'workflow/cellular/cancel';
SmartyValidate::register_form($form_name, true);
$smarty->assign('form_name', $form_name);

// ページ情報
$smarty->assign('pagetitle', grn_get_current_page_display_name());
$smarty->assign('pagepath', $G_pagepath);
$smarty->assign('pagename', cb_get_pagename());

// cellular application
if (isset($G_cellular) && $G_cellular) {
    $smarty->assign('valid_cellular', true);

    $user_config =& $G_cellular->getUserConfig($G_login_user);
    $limit = $user_config->getListMax();
    $width = $user_config->getSubjectWidth();
} else {
    $smarty->assign('valid_cellular', false);

    $limit = 10;
    $width = 14;
}

$smarty->assign('width', $width);

// params
$folder_id = null;
if (array_key_exists('fid', $G_INPUT) && strlen($G_INPUT['fid'])) {
    $folder_id = $G_INPUT['fid'];
}
$petition_id = null;
if (array_key_exists('pid', $G_INPUT) && strlen($G_INPUT['pid'])) {
    $petition_id = $G_INPUT['pid'];
}
$comment = null;
if (array_key_exists('comment', $G_INPUT) && strlen($G_INPUT['comment'])) {
    $comment = $G_INPUT['comment'];
    if (mb_strlen($comment) > 1024) {
        $comment = mb_substr($comment, 0, 1024);
    }
}
$smarty->assign('comment', $comment);

/**
 * 制限事項
 * ・ログインユーザーは申請者でない
 * ・ログインユーザーはフォルダの所有者でない
 * ・フォルダは送信一覧、未処理一覧（申請の進行状況は差し戻し）でない
 * ・フォルダにフォルダリレーションがない
 */

//Get Instance
require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
require_once('workflow/folder_logic.csp');
$folder_logic = GRN_Workflow_Folder_Logic::getInstance();
require_once('workflow/folderrelation_logic.csp');
$folderrelation_logic = GRN_Workflow_FolderRelation_Logic::getInstance();

$translation_map_petition = [
    'pid'                 => '_id',
    //Petition ID
    'petition_number'     => 'petition_number',
    //Petition Number
    'name'                => 'name',
    //Petition Name
    'form'                => 'form',
    //Petition Form ID
    'form_name'           => 'form_name',
    //Petition Form Name
    'creator'             => 'creator',
    //Petition Creator
    'creator_name'        => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key' => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'               => 'ctime',
    //Petition Create Time
    'icon_type'           => 'icon_type',
    //Petition Icon Type
    'icon_id'             => 'icon_id',
    //Petition Icon ID
    'icon_url'            => 'icon_url',
    //Petition Icon URL
    'status'              => 'status',
    'user'                => 'user',
    'agent_user'          => 'agent_user',
];

$petition = $petition_util->getView($petition_id, $translation_map_petition);
if ($G_login_user->getOID() != $petition['user']
    && $G_login_user->getOID() != $petition['agent_user']
) {
    // ログインユーザーは申請者でない
    cb_throw_error(E_GRN_WRKF_DENY_CANCEL_NOT_APPLICANT);
}
$smarty->assign('petition', $petition);

$folder = $folder_logic->get($G_login_user->getOID(), $folder_id);
if ( ! is_array($folder) || 0 == count($folder)) {
    // ログインユーザーはフォルダの所有者でない
    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
}
if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID == $folder['col_folder_type']) {
    if (GRN_WORKFLOW_STATUS_REMAND != $petition['status']) {
        // フォルダは未処理一覧（申請の進行状況は差し戻しでない）
        cb_throw_error(E_GRN_WRKF_DENY_CANCEL_FOLDER);
    }
} elseif (GRN_WORKFLOW_FOLDER_TYPE_OUT_ID != $folder['col_folder_type']) {
    // フォルダは送信一覧でない
    cb_throw_error(E_GRN_WRKF_DENY_CANCEL_FOLDER);
}
$smarty->assign('folder', $folder);

$folder_relation = $folderrelation_logic->getSpecific($folder_id, $petition_id);
if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
    // フォルダにフォルダリレーションがない
    cb_throw_error(E_GRN_WRKF_FOLDER_FOLDERRELATION_NOT_FOUND);
}

$smarty->assign('fid', $folder_id);
$smarty->assign('pid', $petition_id);

$smarty->assign('cancel_message',
    cb_msg('grn.workflow', "cancel_message_{$petition['status']}"));
$smarty->assign('cancel_button',
    cb_msg('grn.workflow', "cancel_button_{$petition['status']}"));

//Display Smarty Template
$smarty->display(cb_get_pagename() . '.tpl');

