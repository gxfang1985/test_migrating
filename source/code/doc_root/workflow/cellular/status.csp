<?php
//Instantiate an Smarty object
require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// ページ情報
$smarty->assign('pagetitle', grn_get_current_page_display_name());
$smarty->assign('pagepath', $G_pagepath);
$smarty->assign('pagename', cb_get_pagename());

// cellular application
if (isset($G_cellular) && $G_cellular) {
    $smarty->assign('valid_cellular', true);

    $user_config =& $G_cellular->getUserConfig($G_login_user);
    $limit = $user_config->getListMax();
    $width = $user_config->getSubjectWidth();
} else {
    $smarty->assign('valid_cellular', false);

    $limit = 10;
    $width = 14;
}

$smarty->assign('width', $width);

// params
$folder_id = null;
if (array_key_exists('fid', $G_INPUT) && strlen($G_INPUT['fid'])) {
    $folder_id = $G_INPUT['fid'];
}
$petition_id = null;
if (array_key_exists('pid', $G_INPUT) && strlen($G_INPUT['pid'])) {
    $petition_id = $G_INPUT['pid'];
}
$path_step_id = null;
if (array_key_exists('psid', $G_INPUT) && strlen($G_INPUT['psid'])) {
    $path_step_id = $G_INPUT['psid'];
}

//Get Utility
require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();

$folder = $controller_util->getSimilarFolder($G_login_user->getOID(),
    $folder_id, $petition_id);
if (is_array($folder) && 0 < count($folder)) {
    $folder_id = $folder['_id'];
}
$smarty->assign('fid', $folder_id);
$smarty->assign('pid', $petition_id);
$smarty->assign('psid', $path_step_id);

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form'                   => 'form',
    //Petition Form ID
    'form_name'              => 'form_name',
    //Petition Form Name
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
];

//Get Petition for view
$petition = $petition_util->getView($petition_id, $translation_map_petition);
$path_info = $controller_util->getPathInfoForView($G_login_user->getOID(),
    $petition_id, $petition, $folder_id);
if ( ! $path_info['view']) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
}

$ptime = new CB_TimeStamp();
$ptime->unix_ts = $petition['ptime'];
$petition['ptime'] = $ptime;

//Assign Petition
$smarty->assign('petition', $petition);

//Get Form for View (if Active and Not Deleted.)
$category_id = null;
if ( ! is_null($petition['form'])) {
    $form_util = GRN_Workflow_Form_Controller_Utility::getInstance();

    //Create Parameter Translation Map
    $translation_map_form = [
        'fid'      => '_id',      //Form ID
        'active'   => 'active',   //Form Active
        'deleted'  => 'deleted',  //Form Deleted
        'category' => 'category', //Category ID
    ];

    //Get Form
    $option = [
        'condition' => [
            '0' => [
                'column'   => 'col_type',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form = $form_util->getView($petition['form'], $translation_map_form,
        null, $option);
    if ($form) {
        if ($form['active'] == 1 && $form['deleted'] != 1) {
            $category_id = $form['category'];
            if (0 == strlen($category_id)) {
                $category_id = GRN_WORKFLOW_CATEGORY_NONPARTY_ID;
            }
            //Assign Form
            $smarty->assign('form', $form);
        }
    }
}

// 未分類でないカテゴリのアクセス権をチェック
$is_access = true;
if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
    $is_access = false;
    if (0 < strlen($category_id)) {
        require_once('workflow/controller_util.csp');
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        $is_access = $category_util->checkAccess($category_id, false,
            CB_DATABASE_NO_LOCK);
    }
}
$smarty->assign('is_access', $is_access);

if ( ! (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL == $petition['status']
        && $G_login_user->getOID() != cb_at($petition, 'creator'))
) {
    //Check Draft Petition
    $path_step = [];
    $path_steps = [];
    $path_step_total = 0;
    $view = true;
    $handle_mode = null;
    $change_path_history = [];
    if (GRN_WORKFLOW_FOLDER_TYPE_TEMP_ID != @ $folder['col_folder_type']) {
        $path_info
            = $controller_util->getPathInfoForView($G_login_user->getOID(),
            $petition['pid'], $petition, $folder_id);
        if ( ! isset($path_info['path_steps'][$path_step_id])) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_INVALID_PATH_STEP_ID);
        }
        $path_step =& $path_info['path_steps'][$path_step_id];

        $path_steps = $path_info['path_steps'];
        $path_step_total = $path_info['path_step_total'];
        $view = $path_info['view'];
        $handle_mode = $path_info['handle_mode'];
        $change_path_history = $path_info['change_path_history'];
    }

    if ($G_login_user->getOID() == cb_at($petition, 'creator')) {
        $handle_mode = null;
        $view = true;
    }

    $smarty->assign('path_step', $path_step);
    /*
        $smarty->assign('path_steps', $path_steps);
        $smarty->assign('path_step_total', $path_step_total);
        $smarty->assign('view', $view);
        $smarty->assign('handle_mode', $handle_mode);
        $smarty->assign('change_path_history', $change_path_history);

        require_once('workflow/change_path_history.csp');
        $logic = GRN_Workflow_ChangePathHistories::getInstance();
        $change_path_history_total = $logic->getCount($petition_id);
        $smarty->assign('change_path_history_total', $change_path_history_total);
    */

    $count = count($path_step['users']);
    $users = [];
    if ($count) {
        // ページャ
        require_once("grn/controller.csp");
        $grn_controller_util = new GRN_ControllerUtil();
        $offset = $grn_controller_util->getNaviStartPosition();

        $users = array_slice($path_step['users'], $offset, $limit);

        $navigation_info = $grn_controller_util->makeNaviInformation(
            $offset,
            $limit,
            $count,
            [
                'fid'  => $folder_id,
                'pid'  => $petition_id,
                'psid' => $path_step_id
            ]
        );
        $smarty->assign('navi', $navigation_info['navi']);
    }
    $smarty->assign('users', $users);
}
//Display Smarty Template
$smarty->display(cb_get_pagename() . '.tpl');

