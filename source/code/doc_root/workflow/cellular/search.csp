<?php
//Instantiate an Smarty object
require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// ページ情報
$smarty->assign('pagetitle', grn_get_current_page_display_name());
$smarty->assign('pagepath', $G_pagepath);
$smarty->assign('pagename', cb_get_pagename());

// cellular application
if (isset($G_cellular) && $G_cellular) {
    $smarty->assign('valid_cellular', true);

    $user_config =& $G_cellular->getUserConfig($G_login_user);
    $limit = $user_config->getListMax();
    $width = $user_config->getSubjectWidth();
} else {
    $smarty->assign('valid_cellular', false);

    $limit = 10;
    $width = 14;
}

$smarty->assign('width', $width);

// params
$fid = null;
if (array_key_exists('fid', $G_INPUT) && strlen($G_INPUT['fid'])) {
    $fid = $G_INPUT['fid'];
}
$text = cb_at($G_INPUT, 'text', '');

//Get Utility
require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$folder_util = GRN_Workflow_Folder_Controller_Utility::getInstance();
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
require_once('workflow/folder_logic_base.csp');
$folder_logic_base = GRN_Workflow_Folder_Logic_Base::getInstance();

//Check Initialize User
$initialize_flag = false;
if ($folder_util->isInitializeUser($G_login_user->getOID())) {
    $initialize_flag = true;
    $folder_util->initializeUser($G_login_user->getOID());
}

//----------------------
// folders selectoption
//----------------------
//Get Folder List for View
$translation_map_folder = [
    'fid'  => '_id',            //Folder ID
    'name' => 'name',           //Folder Name
    'type' => 'folder_type',    //Folder Type
];
$folder_list = $folder_util->getListView($translation_map_folder,
    $G_login_user->getOID());

$folder_list_for_view = [];
foreach ($folder_list as $id => $folder) {
    switch ($folder['type']) {
        case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
            $folder_list_for_view[4] = $folder;
            $folder_list_for_view[4]['name'] = cb_msg('grn.workflow.cellular',
                'folder_name_in');
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
            $folder_list_for_view[3] = $folder;
            $folder_list_for_view[3]['name'] = cb_msg('grn.workflow.cellular',
                'folder_name_out');
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
            $folder_list_for_view[2] = $folder;
            $folder_list_for_view[2]['name'] = cb_msg('grn.workflow.cellular',
                'folder_name_finish');
            break;
        case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
            $folder_list_for_view[1] = $folder;
            $folder_list_for_view[1]['name'] = cb_msg('grn.workflow.cellular',
                'folder_name_unprocessed');
            break;
    }
}
ksort($folder_list_for_view);
$smarty->assign('folders', $folder_list_for_view);

// fid 解析
$folder_info = null;
if (strlen($fid)) {
    if ( ! array_key_exists($fid, $folder_list)) {
        //Folder ID Error
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
    }
    foreach ($folder_list_for_view as $id => $folder) {
        if ($fid == $folder['fid']) {
            $folder_info = $folder;
        }
    }
}

if ( ! $folder_info) {
    //Default Folder ID
    $folder_info = $folder_list_for_view[1];
    $fid = $folder_info['fid'];
}
$smarty->assign('current_fid', $fid);

//----------------------
// petition list
//----------------------
//Create Parameter Translation for Petition
$translation_map_petition = [
    'ptid'            => '_id',              //Petition ID
    'petition_number' => 'petition_number',  //Petition Name
    'petition_name'   => 'name',             //Petition Name
    'form_name'       => 'form_name',        //Petition Form Name
    'status'          => 'status',           //Petition Status
    'user'            => 'user',             //Petition User
    'user_name'       => 'user_name',        //Petition User Name
    'ctime'           => 'ctime',            //Petition Create Time
    'transactor'      => 'transactor',       //Petition Transactor
    'transactor_name' => 'transactor_name',  //Petition Transactor Name
    'priority'        => 'priority',         //Petition priority
];

$lists = [];
if (strlen($text)) {
    $smarty->assign('text', $text);

    $condition = 'OR';
    $condition_item_list = [];
    $condition_item_list[] = [
        'type'  => GRN_WORKFLOW_SEARCH_ITEM_NUMBER,
        'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
        'value' => $text
    ];
    $condition_item_list[] = [
        'type'  => GRN_WORKFLOW_SEARCH_ITEM_FORM_NAME,
        'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
        'value' => $text
    ];
    $condition_item_list[] = [
        'type'  => GRN_WORKFLOW_SEARCH_ITEM_NAME,
        'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
        'value' => $text
    ];
    $condition_item_list[] = [
        'type'  => GRN_WORKFLOW_SEARCH_ITEM_USER,
        'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
        'value' => $text
    ];
    $condition_item_list[] = [
        'type'  => GRN_WORKFLOW_SEARCH_ITEM_STRING,
        'expr'  => GRN_WORKFLOW_SEARCH_OPERATOR_LIKE,
        'value' => $text
    ];

    $search = [
        'condition'           => $condition,
        'condition_item_list' => $condition_item_list,
    ];

    //if( $count )
    //{
    require_once("grn/controller.csp");
    $grn_controller_util = new GRN_ControllerUtil();
    $offset = $grn_controller_util->getNaviStartPosition();

    $petition_id_list
        = $folder_util->searchPetitionIdList($G_login_user->getOID(), $fid,
        $folder_info['type'], $search, true);
    $count = count($petition_id_list);
    if ($count > 0) {

        $search['list'] = [];
        $search['list']['offset'] = $offset;
        $search['list']['limit'] = $limit;

        //Search Petition ID
        //$petition_id_list = $folder_logic_base->searchPetitionIdList($fid, $search);
        $petition_id_list
            = $folder_util->searchPetitionIdList($G_login_user->getOID(), $fid,
            $folder_info['type'], $search, true);

        //Get Petition List for View
        $option = [];
        $option['condition'] = [];
        $option['condition'][] = [
            'column'   => '_id',
            'value'    => $petition_id_list,
            'operator' => 'IN'
        ];
        // フォルダ別でソートや表示する名前が違う（order機能独自盛り込み
        $option['sort'] = [];
        $view_creator_name = true;
        switch ($folder_info['type']) {
            case GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID:
                $option['sort'][] = [
                    'column' => GRN_WORKFLOW_COLUMN_CTIME,
                    'order'  => 'ASC'
                ];
                $view_creator_name = true;
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_FINISH_ID:
                $option['sort'][] = [
                    'column' => GRN_WORKFLOW_COLUMN_MTIME,
                    'order'  => 'DESC'
                ];
                $view_creator_name = false;
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_OUT_ID:
                $option['sort'][] = [
                    'column' => GRN_WORKFLOW_COLUMN_CTIME,
                    'order'  => 'DESC'
                ];
                $view_creator_name = false;
                break;
            case GRN_WORKFLOW_FOLDER_TYPE_IN_ID:
                $option['sort'][] = [
                    'column' => GRN_WORKFLOW_COLUMN_CTIME,
                    'order'  => 'DESC'
                ];
                $view_creator_name = true;
                break;
        }

        $lists = $petition_util->getListView($translation_map_petition, null,
            $option);

        foreach (array_keys($lists) as $petition_id) {
            $petition =& $lists[$petition_id];

            // 申請IDリストの経路情報を取得
            $path_steps = $controller_util->getPathInfo($petition['ptid']);

            // 状況別 処理
            switch ($petition['status']) {
                case GRN_WORKFLOW_STATUS_UNPROCESSING:          //未処理
                case GRN_WORKFLOW_STATUS_IN_PROCESS:            //進行中
                case GRN_WORKFLOW_STATUS_REMAND:                //差し戻し
                    // 表示する状況「進行中」
                    $petition['status_name'] = cb_msg('grn.workflow.cellular',
                        'view_status_0');
                    $petition['view_name'] = $petition['user_name'];
                    if ( ! $view_creator_name) {
                        // 処理中の経路ステップを取得
                        $path_steps_current = current($path_steps);
                        $path_step
                            =& $controller_util->getInProcessPathStep($path_steps_current);
                        if (count($path_step['users'])) {
                            // 処理者（一名）を表示
                            $transactor = array_shift($path_step['users']);
                            $petition['view_name']
                                = $transactor['col_display_name'];
                        } else {
                            // 申請者名を表示
                            $petition['view_name'] = $petition['user_name'];
                        }
                    }
                    break;
                case GRN_WORKFLOW_STATUS_ACCEPTANCE:            //承認
                    // 表示する状況「承認」
                    $petition['status_name'] = cb_msg('grn.workflow.cellular',
                        'view_status_1');
                    $petition['view_name'] = $petition['user_name'];
                    if ( ! $view_creator_name) {
                        // 処理中の経路ステップを取得
                        $path_steps_current = current($path_steps);
                        $path_step
                            =& $controller_util->getInProcessPathStep($path_steps_current);
                        if (count($path_step['users'])) {
                            // 処理者（一名）を表示  … 自分の名前を表示した方が良いのでは？
                            $transactor = array_shift($path_step['users']);
                            $petition['view_name']
                                = $transactor['col_display_name'];
                        }
                    }
                    break;
                case GRN_WORKFLOW_STATUS_REJECTION:             //却下
                    // 表示する状況「却下」
                    $petition['status_name'] = cb_msg('grn.workflow.cellular',
                        'view_status_2');
                    $petition['view_name'] = $petition['user_name'];
                    if ( ! $view_creator_name) {
                        // 却下者名を表示
                        $petition['view_name'] = $petition['transactor_name'];
                    }
                    break;
                case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL:     //取り消し
                case GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL:   //取り戻し
                    // 表示する状況「取消」
                    $petition['status_name'] = cb_msg('grn.workflow.cellular',
                        'view_status_3');
                    // 申請者名を表示
                    $petition['view_name'] = $petition['user_name'];
                    break;
                case GRN_WORKFLOW_STATUS_FINISHED:              //完了
                    // 表示する状況「完了」
                    $petition['status_name'] = cb_msg('grn.workflow.cellular',
                        'view_status_4');
                    $petition['view_name'] = $petition['user_name'];
                    if ( ! $view_creator_name) {
                        // 最終承認経路ステップを取得
                        $path_step
                            =& $controller_util->getLastAcceptancePathStep(current($path_steps));
                        if (count($path_step['users'])) {
                            // 処理者（一名）を表示
                            $transactor = array_shift($path_step['users']);
                            $petition['view_name']
                                = $transactor['col_display_name'];
                        }
                    }
                    break;
            }
        }
        $navigation_info = $grn_controller_util->makeNaviInformation(
            $offset,
            $limit,
            $count,
            ['fid' => $fid, 'text' => $text]
        );
        $smarty->assign('navi', $navigation_info['navi']);

    }
    //}
}
//var_dump($lists);
$smarty->assign('lists', $lists);

//Display Smarty Template
$smarty->display(cb_get_pagename() . '.tpl');

