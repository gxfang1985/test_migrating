<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $form_name = 'workflow/cellular/handle';
    SmartyValidate::register_form($form_name);

    $folder_id = null;
    if (array_key_exists('fid', $G_INPUT)) {
        $folder_id = $G_INPUT['fid'];
    }
    $petition_id = null;
    if (array_key_exists('pid', $G_INPUT)) {
        $petition_id = $G_INPUT['pid'];
    }
    $in_process = cb_at($G_INPUT, 'in_process', null);
    $command = null;
    if (array_key_exists('acceptance', $G_INPUT)) {
        $command = 'acceptance';
    }
    if (array_key_exists('reject', $G_INPUT)) {
        $command = 'reject';
    }
    if (array_key_exists('remand', $G_INPUT)) {
        $command = 'remand';
    }
    if (array_key_exists('confirmation', $G_INPUT)) {
        $command = 'confirmation';
    }

    $destination = null;
    if ('remand' == $command) {
        if (array_key_exists('destination', $G_INPUT)) {
            $destination = $G_INPUT['destination'];
        }
        if ( ! is_numeric($destination) && 'applicant' != $destination) {
            $G_INPUT['destination'] = null;
        }
    } else {
        $G_INPUT['destination'] = $command;
    }

    /**
     * 制限事項
     * ・フォルダにフォルダリレーションがない（通常のみ）
     * ・フォルダは未処理一覧でない（通常のみ）
     */

    if (SmartyValidate::is_valid($G_INPUT, $form_name)) {
        if ('remand' == $command) {
            require_once('workflow/config.csp');
            $configs = GRN_Workflow_Configs::getInstance();
            $config =& $configs->getSystemConfig();
            if ( ! $config->getRemand()) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_SYSTEM_DENY_REMAND);
            }
        }
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $user_id = $login->getOID();


        require_once('workflow/controller_util.csp');
        $controller_util = new GRN_Workflow_ControllerUtil($form_name);
        $folder = $controller_util->getSimilarFolder($user_id,
            $folder_id);
        /*
                if(GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID != @ $folder['col_folder_type'])
                {
                    // 申請がフォルダにない
                    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
                }
        */
        if (is_array($folder) && 0 < count($folder)) {
            $folder_id = $folder['_id'];
        }

        // 申請を取得
        require_once('workflow/petition_logic.csp');
        $logic = GRN_Workflow_Petition_Logic::getInstance();
        $petition = $logic->get($petition_id);
        $status = $petition['col_status'];

        // 経路を取得
        require_once('workflow/controller_util.csp');
        $controller_util = new GRN_Workflow_ControllerUtil($form_name);
        $path_steps = $controller_util->getPathInfo($petition_id);

        // 処理中の経路ステップを取得
        $path_steps_current = current($path_steps);
        $path_step_id
            = $controller_util->getInProcessPathStepId($path_steps_current);
        if ($path_step_id && ($path_step_id != $in_process)) {
            cb_throw_error(E_GRN_WRKF_INVALID_PATH_STEP_ID);
        }

        $comment = null;
        if (array_key_exists('comment', $G_INPUT)) {
            $comment = $G_INPUT['comment'];
        }
        $ptime = time();

        $uids = [];
        $forced_remove = false;
        $message_type = null;
        $message_args = ['pid' => $petition_id, 'comment' => $comment];
        switch ($command) {
            case 'acceptance':  // 承認
                if (GRN_WORKFLOW_STATUS_IN_PROCESS < $petition['col_status']
                    && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
                ) {
                    // 進行中、差し戻しでない申請は承認できない
                    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_ACCEPT);
                }

                // 経路種別が承認か確認
                $path_step =& $path_steps[$path_step_id];
                if (GRN_WORKFLOW_ACCEPTANCE != $path_step['col_type']) {
                    // 承認でない経路ステップは承認できない
                    cb_throw_error(E_GRN_WRKF_DENY_ACCEPT_PATH_STEP_DATA);
                }

                // 処理者の結果を変更
                $result = GRN_WORKFLOW_RESULT_ACCEPT;
                $path_steps = $controller_util->modifyUserResult($path_step_id,
                    $user_id, $result, $comment, $ptime);

                // 添付ファイルを追加
                $controller_util->addFile($petition_id, $G_INPUT,
                    $path_step_id);

                // 次以降の経路ステップを未処理に変更
                $path_step =& $path_steps[$path_step_id];
                $controller_util->modifyPathStepsStatus($path_step,
                    GRN_WORKFLOW_FINISHED_NONE);
                $message_type = 'petition_accept';
                // 承認経路ステップを評価
                if ($controller_util->evalAcceptancePathStep($path_step)) {
                    // 経路ステップを処理済に変更
                    $logic = GRN_Workflow_PathStepDatas::getInstance();
                    $properties
                        = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                    $path_step['col_finished'] = GRN_WORKFLOW_FINISHED_COMPLETE;
                    $logic->modify($path_step_id, $properties);

                    // 次に処理を回す経路ステップIDを取得
                    $path_steps_current = current($path_steps);
                    $path_step_id
                        = $controller_util->getInProcessPathStepId($path_steps_current);
                    if (false === $path_step_id) {
                        // 完了
                        $status = GRN_WORKFLOW_STATUS_FINISHED;

                        $uids[] = $petition['col_creator'];

                        $foreign_keys = [
                            'FINISH_FOLDER_FOREIGN_KEY',
                            'IN_FOLDER_FOREIGN_KEY'
                        ];

                        $forced_remove = true;

                        $message_type = "petition_accept_with_approved_number";
                        $controller_util->updateSerialNumberAfterFinallyApproved($petition,
                            $message_args);

                        // 自動書き出し
                        if ($petition['col_auto_export']) {
                            $petition_controller_util
                                = GRN_Workflow_Petition_Controller_Utility::getInstance();
                            $petition_controller_util->exportSinglePetition($petition_id,
                                $status);
                        }

                        global $G_state_set;
                        $tm = CB_TransactionManager::getInstance();
                        if ($G_state_set->get('error_occurred')) {
                            // rollback changes in transactions lower than audit level.
                            $tm->abort(CB_TRANSACTION_LEVEL_MAIL);
                        }
                        $tm->commit();
                        $controller_util->registerSchedule($petition_id);
                    } else {
                        $path_step =& $path_steps[$path_step_id];

                        if (GRN_WORKFLOW_CIRCULAR == $path_step['col_type']) {
                            $message_type
                                = "petition_accept_with_approved_number";
                            $controller_util->updateSerialNumberAfterFinallyApproved($petition,
                                $message_args);
                            // 申請者にフォルダリレーションを追加
                            $uids[] = $petition['col_creator'];

                            $foreign_keys = [
                                'FINISH_FOLDER_FOREIGN_KEY',
                                'IN_FOLDER_FOREIGN_KEY'
                            ];

                            $status = GRN_WORKFLOW_RESULT_ACCEPT;
                            $logic
                                = GRN_Workflow_Petition_Logic::getInstance();
                            $logic->modifyStatus($petition_id, $status);
                            $controller_util->sendPetition($petition_id, $uids,
                                $foreign_keys);

                            // 自動書き出し
                            if ($petition['col_auto_export']) {
                                $petition_controller_util
                                    = GRN_Workflow_Petition_Controller_Utility::getInstance();
                                $petition_controller_util->exportSinglePetition($petition_id,
                                    $status);
                            }

                            global $G_state_set;
                            $tm = CB_TransactionManager::getInstance();
                            if ($G_state_set->get('error_occurred')) {
                                // rollback changes in transactions lower than audit level.
                                $tm->abort(CB_TRANSACTION_LEVEL_MAIL);
                            }
                            $tm->commit();
                            $controller_util->registerSchedule($petition_id);
                        } else {
                            // 進行中
                            $status = GRN_WORKFLOW_STATUS_IN_PROCESS;
                        }

                        if ( ! array_key_exists('uids', $path_step)) {
                            assert('FALSE');
                        }
                        $uids = $path_step['uids'];

                        $foreign_keys = [
                            'UNPROCESSED_FOLDER_FOREIGN_KEY',
                            'IN_FOLDER_FOREIGN_KEY'
                        ];
                    }

                    // 申請の状況を変更
                    $logic = GRN_Workflow_Petition_Logic::getInstance();
                    $logic->modifyStatus($petition_id, $status);

                    // 次の処理者に申請を送信
                    $controller_util->sendPetition($petition_id, $uids,
                        $foreign_keys);
                } else {
                    // 申請の状況を進行中に変更
                    if (GRN_WORKFLOW_STATUS_UNPROCESSING
                        == $petition['col_status']
                    ) {
                        $status = GRN_WORKFLOW_STATUS_IN_PROCESS;
                        $logic->modifyStatus($petition_id, $status);
                    }
                }
                break;
            case 'confirmation':    // 確認
                // 進行中、承認
                switch ($petition['col_status']) {
                    case GRN_WORKFLOW_STATUS_TEMPORARY:
                    case GRN_WORKFLOW_STATUS_UNPROCESSING:
                    case GRN_WORKFLOW_STATUS_IN_PROCESS:
                    case GRN_WORKFLOW_STATUS_ACCEPTANCE:
                        // 経路種別（回覧）を確認
                        $path_step =& $path_steps[$path_step_id];
                        if (GRN_WORKFLOW_CIRCULAR == $path_step['col_type']) {
                            if (false === array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                // 経路ステップの処理が移ってしまった
                                require_once('workflow/controller_util.csp');
                                $controller_util
                                    = new GRN_Workflow_ControllerUtil($form_name);
                                $path_steps
                                    = $controller_util->getLockedPathInfo($path_step_id);

                                $path_step = current($path_steps);
                                $path_step_id_to_confirm = null;
                                while ($path_step) {
                                    if ($path_step['col_activate']) {
                                        $path_step_id = $path_step['_id'];

                                        if (false !== ($key
                                                = array_search($user_id,
                                                $path_step['uids']))
                                            && $path_step['col_finished']
                                               == GRN_WORKFLOW_FINISHED_COMPLETE
                                        ) {
                                            if ( ! $path_step['users'][$key]['col_ptime']) {
                                                if ( ! isPathStepAfterRemand($path_step)) {
                                                    $path_step_id_to_confirm
                                                        = $path_step_id;
                                                }
                                            }
                                        }
                                    }
                                    $path_step =& $path_step['next'];
                                }
                                if ($path_step_id_to_confirm) {
                                    $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                    $controller_util->modifyUserResult($path_step_id_to_confirm,
                                        $user_id, $result, $comment, $ptime,
                                        true, false);
                                }
                            } else {
                                // 処理者の結果を変更
                                $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                $path_steps
                                    = $controller_util->modifyUserResult($path_step_id,
                                    $user_id, $result, $comment, $ptime);

                                // 回覧経路ステップを評価
                                $path_step =& $path_steps[$path_step_id];
                                if ($controller_util->evalCircularPathStep($path_step)) {
                                    // 経路ステップを処理済に変更
                                    $logic
                                        = GRN_Workflow_PathStepDatas::getInstance();
                                    $properties
                                        = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                                    $path_step['col_finished']
                                        = GRN_WORKFLOW_FINISHED_COMPLETE;
                                    $logic->modify($path_step_id, $properties);

                                    // 次に処理を回す経路ステップIDを取得
                                    $path_steps_current = current($path_steps);
                                    $path_step_id
                                        = $controller_util->getInProcessPathStepId($path_steps_current);
                                    if (false === $path_step_id) {
                                        // 完了
                                        $status = GRN_WORKFLOW_STATUS_FINISHED;

                                        $uids[] = $petition['col_user'];
                                        $foreign_keys = [
                                            'FINISH_FOLDER_FOREIGN_KEY',
                                            'IN_FOLDER_FOREIGN_KEY'
                                        ];

                                        $forced_remove = true;
                                        $action_type
                                            = GRN_WORKFLOW_MAILNOTIFICATION_ACTION_FINISHED;
                                    } else {
                                        if (GRN_WORKFLOW_STATUS_ACCEPTANCE
                                            != $petition['col_status']
                                        ) {
                                            // 進行中
                                            $status
                                                = GRN_WORKFLOW_STATUS_IN_PROCESS;
                                        }

                                        $path_step
                                            =& $path_steps[$path_step_id];
                                        if ( ! array_key_exists('uids',
                                            $path_step)
                                        ) {
                                            assert('FALSE');
                                        }
                                        $uids = $path_step['uids'];

                                        $foreign_keys = [
                                            'UNPROCESSED_FOLDER_FOREIGN_KEY',
                                            'IN_FOLDER_FOREIGN_KEY'
                                        ];
                                        $action_type
                                            = GRN_WORKFLOW_MAILNOTIFICATION_ACTION_TO_NEXT;
                                    }

                                    // 申請のステータスを変更
                                    $logic
                                        = GRN_Workflow_Petition_Logic::getInstance();
                                    $logic->modifyStatus($petition_id, $status);

                                    // 次の処理者に申請を送信
                                    $controller_util->sendPetition($petition_id,
                                        $uids, $foreign_keys, $action_type);
                                } else {
                                    if (GRN_WORKFLOW_STATUS_ACCEPTANCE
                                        != $petition['col_status']
                                    ) {
                                        // 進行中
                                        $status
                                            = GRN_WORKFLOW_STATUS_IN_PROCESS;
                                    }

                                    // 申請のステータスを変更
                                    $logic
                                        = GRN_Workflow_Petition_Logic::getInstance();
                                    $logic->modifyStatus($petition_id, $status);
                                }
                            }
                        } else {
                            while ($path_step) {
                                if ($path_step['col_activate']) {
                                    $path_step_id = $path_step['_id'];

                                    if (false !== ($key = array_search($user_id,
                                            $path_step['uids']))
                                        && $path_step['col_finished']
                                           == GRN_WORKFLOW_FINISHED_COMPLETE
                                    ) {
                                        if ( ! $path_step['users'][$key]['col_ptime']) {
                                            if ( ! isPathStepAfterRemand($path_step)) {
                                                $result
                                                    = GRN_WORKFLOW_RESULT_CONFIRM;
                                                $controller_util->modifyUserResult($path_step_id,
                                                    $user_id, $result, $comment,
                                                    $ptime, true, false);
                                            }
                                            break;
                                        }
                                    }
                                }
                                $path_step =& $path_step['previous'];
                            }
                        }
                        break;
                    case GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL:
                        // 差し戻しからの取り消しは除外
                        if ($path_step_id) {
                            $path_step =& $path_steps[$path_step_id];

                            // 処理者の所属を確認
                            if ( ! array_key_exists('uids', $path_step)) {
                                assert('FALSE');
                            }
                            if (false !== array_search($user_id,
                                    $path_step['uids'])
                            ) {
                                // 処理者の結果を変更
                                $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                $path_steps
                                    = $controller_util->modifyUserResult($path_step_id,
                                    $user_id, $result, $comment, $ptime);

                                // すべての経路ステップを処理済に変更
                                if ($controller_util->evalPathStep($path_step)) {
                                    $logic
                                        = GRN_Workflow_PathStepDatas::getInstance();
                                    $properties
                                        = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                                    $logic->modifyList(array_keys($path_steps),
                                        $properties);
                                }
                            }
                        }
                        break;
                    case GRN_WORKFLOW_STATUS_REJECTION:
                        $path_steps_current = current($path_steps);
                        $path_step_id
                            = $controller_util->getRejectionPathStepId($path_steps_current);
                        $path_step =& $path_steps[$path_step_id];

                        // 処理者の所属を確認
                        if ( ! array_key_exists('uids', $path_step)) {
                            assert('FALSE');
                        }
                        if (false !== ($result = array_search($user_id,
                                $path_step['uids']))
                        ) {
                            if (GRN_WORKFLOW_RESULT_UNPROCESSING
                                == $path_step['users'][$result]['col_result']
                            ) {
                                // 処理者の結果を変更
                                $result = GRN_WORKFLOW_RESULT_CONFIRM;
                                $path_steps
                                    = $controller_util->modifyUserResult($path_step_id,
                                    $user_id, $result, $comment, $ptime, true,
                                    false);
                            }
                        }
                        break;
                    case GRN_WORKFLOW_STATUS_FINISHED:
                        $path_step = current($path_steps);
                        $path_step_id_to_confirm = null;
                        while ($path_step) {
                            if ($path_step['col_activate']) {
                                $path_step_id = $path_step['_id'];

                                if (false !== ($key = array_search($user_id,
                                        $path_step['uids']))
                                    && $path_step['col_finished']
                                       == GRN_WORKFLOW_FINISHED_COMPLETE
                                ) {
                                    if ( ! $path_step['users'][$key]['col_ptime']) {
                                        if ( ! isPathStepAfterRemand($path_step)) {
                                            $path_step_id_to_confirm
                                                = $path_step_id;
                                        }
                                    }
                                }
                            }
                            $path_step =& $path_step['next'];
                        }
                        if ($path_step_id_to_confirm) {
                            $result = GRN_WORKFLOW_RESULT_CONFIRM;
                            $controller_util->modifyUserResult($path_step_id_to_confirm,
                                $user_id, $result, $comment, $ptime, true,
                                false);
                        }
                        $forced_remove = true;
                        break;
                    default:
                        $forced_remove = true;
                        break;
                }
                $message_type = 'petition_confirm';
                break;
            case 'reject':   // 却下
                if (GRN_WORKFLOW_STATUS_IN_PROCESS < $petition['col_status']
                    && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
                ) {
                    // 進行中、差し戻しでない申請は却下できない
                    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_REJECT);
                }

                // 経路種別が承認か確認
                $path_step =& $path_steps[$path_step_id];
                if (GRN_WORKFLOW_ACCEPTANCE != $path_step['col_type']) {
                    // 承認でない経路ステップは却下できない
                    cb_throw_error(E_GRN_WRKF_DENY_REJECT_PATH_STEP_DATA);
                }

                // 処理者の結果を変更
                $result = GRN_WORKFLOW_RESULT_REJECT;
                $path_steps = $controller_util->modifyUserResult($path_step_id,
                    $user_id, $result, $comment, $ptime);

                // すべての経路ステップを処理済に変更
                $logic = GRN_Workflow_PathStepDatas::getInstance();
                $properties
                    = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                $logic->modifyList(array_keys($path_steps), $properties);
                $properties
                    = ['col_finished' => GRN_WORKFLOW_FINISHED_REJECTION];
                $logic->modify($path_step_id, $properties);

                // 申請の状況を却下に変更
                require_once('workflow/petition_logic.csp');
                $logic = GRN_Workflow_Petition_Logic::getInstance();
                $logic->modifyStatus($petition_id,
                    GRN_WORKFLOW_STATUS_REJECTION, $user_id, $comment, $ptime);

                require('workflow/auto_schedule_register_logic.csp');
                $wf_register_logic
                    = GRN_Workflow_Auto_Schedule_Register_Logic::getInstance();
                $wf_register_logic->delete($petition_id);

                // 申請者に申請を送信
                $uids[] = $petition['col_creator'];
                $foreign_keys = [
                    'FINISH_FOLDER_FOREIGN_KEY',
                    'IN_FOLDER_FOREIGN_KEY'
                ];
                $controller_util->sendPetition($petition_id, $uids,
                    $foreign_keys);
                $forced_remove = true;
                $message_type = 'petition_reject';

                break;
            case 'remand':      // 差し戻し
                if (GRN_WORKFLOW_STATUS_IN_PROCESS < $petition['col_status']
                    && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
                ) {
                    // 進行中、差し戻しでない申請は差し戻しできない
                    cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_REMAND);
                }

                // 経路種別（承認）を確認
                $path_step =& $path_steps[$path_step_id];
                if (GRN_WORKFLOW_ACCEPTANCE != $path_step['col_type']) {
                    // 承認でない経路ステップは差し戻しできない
                    cb_throw_error(E_GRN_WRKF_DENY_REMAND_PATH_STEP_DATA);
                }

                // 処理者の結果を変更（ここではデータベースに反映しない）
                $result = GRN_WORKFLOW_RESULT_REMAND;
                $path_steps = $controller_util->modifyUserResult($path_step_id,
                    $user_id, $result, $comment, $ptime, false);

                // 結果、コメント、日時をコメントにまとめ、データベースに反映
                $path_steps = $controller_util->finalizeUserComment($path_steps,
                    $destination);

                // 申請の状況を差し戻しに変更
                require_once('workflow/petition_logic.csp');
                $logic = GRN_Workflow_Petition_Logic::getInstance();
                $logic->modifyStatus($petition_id, GRN_WORKFLOW_STATUS_REMAND,
                    $user_id, $comment, $ptime);

                // すべての経路ステップを処理済に変更
                $logic = GRN_Workflow_PathStepDatas::getInstance();
                $properties
                    = ['col_finished' => GRN_WORKFLOW_FINISHED_COMPLETE];
                $logic->modifyList(array_keys($path_steps), $properties);

                // 差し戻し元を差し戻し完了に変更
                $properties = ['col_finished' => GRN_WORKFLOW_FINISHED_REMAND];
                $logic->modify($path_step_id, $properties);

                if ('applicant' == $destination) {
                    // 差し戻し先は申請者
                    $uids[] = $petition['col_creator'];
                } else {
                    // 差し戻し先を未完了に変更
                    $path_step = $path_steps[$destination];
                    $properties = ['col_finished' => null];
                    $logic->modify($path_step['_id'], $properties);

                    // 差し戻し先は（差し戻し先の）処理者全員
                    $uids = $path_step['uids'];
                }

                // 申請を送信
                $foreign_keys = [
                    'UNPROCESSED_FOLDER_FOREIGN_KEY',
                    'IN_FOLDER_FOREIGN_KEY'
                ];
                $controller_util->sendPetition($petition_id, $uids,
                    $foreign_keys);
                $message_type = 'petition_remand';
                break;
            /*
                    case 'next':    // 次へ
                        // 申請は削除しない
                        $uids[] = $user_id;
                        break;
                    case 'reapply': // （差し戻しの）再申請
                        if(GRN_WORKFLOW_STATUS_REMAND != $petition['col_status'])
                        {
                            // 差し戻しでない申請は再申請できない
                            cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_REAPPLY);
                        }

                        SmartyValidate::unregister_form($form_name);
                        cb_redirect('workflow/send_form_remand', array('fid'=>$folder_id, 'pid'=>$petition_id, 'simple'=>$simple, 'mode'=>'remand', 'handle'=>TRUE, 'cpsf'=>$session_flag));
                        break;
                    case 'cancel':  // （差し戻しの）取り消し
                        if(GRN_WORKFLOW_STATUS_REMAND != $petition['col_status'])
                        {
                            // 差し戻しでない申請は取り消しできない
                            cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_CANCEL);
                        }

                        SmartyValidate::unregister_form($form_name);
                        cb_redirect('workflow/cancel', array('fid'=>$folder_id, 'pid'=>$petition_id, 'simple'=>$simple, 'handle'=>TRUE, 'cpsf'=>$session_flag));
                        break;
            */
            default:
                // 不正なコマンド
                cb_throw_error(E_GRN_WRKF_INVALID_COMMAND);
                break;
        }

        // 監査
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Petition_Inspection::getInstance();


        if ($inspection->isEnabled()) {
            if (0 < strlen($message_type)) {
                $inspection->record($message_type, $message_args);
            }
        }

        if (false === array_search($user_id, $uids) || $forced_remove) {
            // 処理者の申請を削除
            $controller_util->removePetition($petition_id, $user_id,
                'UNPROCESSED_FOLDER_FOREIGN_KEY');
        }

        SmartyValidate::unregister_form($form_name);
//        grn_workflow_cellular_redirect( $G_pagepath.'/list', array('fid'=>$folder_id));
        grn_workflow_cellular_switch_page($G_pagepath . '/list');
    } else {
        grn_workflow_cellular_switch_page($G_pagepath . '/look');
    }
}

/**
 * 過去に差し戻しが行われたことがあり
 * 差し戻し先の経路が $path_step より後ろだったため
 * 以前の承認が現在も有効である場合 TRUE を返す
 */
function isPathStepAfterRemand(& $path_step)
{
    if ( ! $path_step['col_finished'] == GRN_WORKFLOW_FINISHED_COMPLETE) {
        return false;
    }

    $is_after_remand = true;
    foreach (array_keys($path_step['users']) as $path_step_user_key) {
        if ($path_step['users'][$path_step_user_key]['col_ptime']) {
            $is_after_remand = false;
        }
    }

    return $is_after_remand;
}
