<?php
//Instantiate an Smarty object
require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// connect Smarty Validate
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'workflow/cellular/handle';
SmartyValidate::register_form($form_name, true);
$smarty->assign('form_name', $form_name);

// ページ情報
$smarty->assign('pagetitle', grn_get_current_page_display_name());
$smarty->assign('pagepath', $G_pagepath);
$smarty->assign('pagename', cb_get_pagename());

// cellular application
if (isset($G_cellular) && $G_cellular) {
    $smarty->assign('valid_cellular', true);

    $user_config = $G_cellular->getUserConfig($G_login_user);
    $limit = $user_config->getListMax();
    $width = $user_config->getSubjectWidth();
} else {
    $smarty->assign('valid_cellular', false);

    $limit = 10;
    $width = 14;
}

$smarty->assign('width', $width);

$user_id = $G_login_user->getOID();
$smarty->assign('user_id', $user_id);

// params
$folder_id = null;
if (array_key_exists('fid', $G_INPUT) && strlen($G_INPUT['fid'])) {
    $folder_id = $G_INPUT['fid'];
}
$petition_id = null;
if (array_key_exists('pid', $G_INPUT) && strlen($G_INPUT['pid'])) {
    $petition_id = $G_INPUT['pid'];
}
$comment = null;
if (array_key_exists('comment', $G_INPUT)) {
    $comment = $G_INPUT['comment'];
    if (mb_strlen($comment) > 1024) {
        $comment = mb_substr($comment, 0, 1024);
    }
}
$smarty->assign('comment', $comment);

//Get Instance
require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();

$folder = $controller_util->getSimilarFolder($G_login_user->getOID(),
    $folder_id);
if (is_array($folder) && 0 < count($folder)) {
    $folder_id = $folder['_id'];
    $smarty->assign('folder', $folder);
}
$smarty->assign('fid', $folder_id);
$smarty->assign('pid', $petition_id);

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form'                   => 'form',
    //Petition Form ID
    'form_name'              => 'form_name',
    //Petition Form Name
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'user'                   => 'user',
    'user_name'              => 'user_name',
    'user_foreign_key'       => 'user_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
    'agent_user'             => 'agent_user',
    'agent_user_name'        => 'agent_user_name',
    'agent_user_foreign_key' => 'agent_user_foreign_key',
    'priority'               => 'priority',
];

//Get Petition for view
$petition = $petition_util->getView($petition_id, $translation_map_petition);

$ptime = new CB_TimeStamp();
$ptime->unix_ts = $petition['ptime'];
$petition['ptime'] = $ptime;

//Assign Petition
$smarty->assign('petition', $petition);

//if($view)
//{

//Create Parameter Translation Map
$translation_map_item_data = [
//Item Data Information
'iid'                => 'itemdata_id',
//Item Data ID
'display_name'       => 'itemdata_display_name',
//Item Data Display Name
'type'               => 'itemdata_type',
//Item Data Type
'option_string'      => 'itemdata_option_string',
//Item Data Option String
'option_string_type' => 'itemdata_option_string_type',
//Item Data Option String Type
'foreign_key'        => 'itemdata_foreign_key',
//Item Data foreign_key
'attach_file'        => 'itemdata_attach_file',
//Item Data Attach File
'attach_file_view'   => 'itemdata_attach_file_view',
//Item Data Attach File View
'settings'           => 'itemdata_settings',
//Item Data Settings
'br'                 => 'itemdata_br',
//Item Data <br> Flag
'separator'          => 'itemdata_separator',
//Item Data Separator
'required'           => 'itemdata_required',
//Item Data Reuired Flag
'list_index'         => 'itemdata_list_index',
//Item Data List Index
'number'             => 'itemdata_number',
//Item Data Number Value
'text'               => 'itemdata_text',
//Item Data text Value
//Item Data File Information
'fid'                => 'itemdatafile_id',
//Item Data File ID
'file'               => 'itemdatafile_file',
//Item Data File ID
'files'              => 'itemdata_files',
//Item Data File ID
];

//Get Item Data List for view
$item_data_list = $item_data_util->getListViewEx($translation_map_item_data,
    $petition_id);

//Unset Standard Item
$current_item_data = current($item_data_list);
unset($item_data_list[$current_item_data['iid']]);

$is_files = false;
//Create Item Layout
foreach (array_keys($item_data_list) as $item_data_id) {
    $view_str = "";
    // foreign_key により表示情報の分岐
    switch ($item_data_list[$item_data_id]['foreign_key']) {
        case 'grn.workflow.string_multiple':
        case 'grn.workflow.string_single':
        case 'grn.workflow.menu_string':
        case 'grn.workflow.radio':
            $view_str = $item_data_list[$item_data_id]['text'];
            break;

        case 'grn.workflow.checkbox':
            $view_str = "チェックなし";
            if ($item_data_list[$item_data_id]['number']) {
                $view_str = "チェックあり";
            }
            break;

        case 'grn.workflow.calc_numeric':
            if ($item_data_list[$item_data_id]['settings']['not_display']
                == 1
            ) {
                unset($item_data_list[$item_data_id]);
                continue 2;
            }
        // no break;
        case 'grn.workflow.numeric':
            $view_str = $item_data_list[$item_data_id]['number'];
            break;

        case 'grn.workflow.date':
            $view_str = "";
            //Unserialize Text
            $date_array = cb_unserialize($item_data_list[$item_data_id]['text'],
                ["allowed_classes" => false]);
            $date_settings_array = $item_data_list[$item_data_id]['settings'];

            if (count($date_array) > 0) {
                if ($date_array['year'] != '') {
                    $view_str = $date_array['year'] . '年';
                } else {
                    $view_str = ' 年';
                }

                if ($date_array['month'] != '') {
                    $view_str .= $date_array['month'] . '月';
                } else {
                    $view_str .= ' 月';
                }

                if ($date_array['day'] != '') {
                    $view_str .= $date_array['day'] . '日';
                } else {
                    $view_str .= ' 日';
                }
            } else {
                $view_str = '年 月 日';
            }

            if (isset($date_settings_array['date_type'])
                && $date_settings_array['date_type'] == 1
            ) {
                if (count($date_array) > 0) {
                    if (strlen($date_array['hour']) == 1) {
                        $date_array['hour'] = '0' . $date_array['hour'];
                    }
                    if (strlen($date_array['minute']) == 1) {
                        $date_array['minute'] = '0' . $date_array['minute'];
                    }
                    if ($date_array['hour'] != '') {
                        $view_str .= $date_array['hour'] . '時';
                    } else {
                        $view_str .= ' 時';
                    }
                    if ($date_array['minute'] != '') {
                        $view_str .= $date_array['minute'] . '分';
                    } else {
                        $view_str .= ' 分';
                    }
                } else {
                    $view_str .= ' 時 分';
                }
            }
            break;

        case 'grn.workflow.file':
            $view_str = "ファイル添付なし";
            if (count($item_data_list[$item_data_id]['files'])) {
                $view_str = "ファイル添付あり";
                $is_files = true;
            }
            break;

        case 'grn.workflow.route_search':
            $view_str = "経路:" . $item_data_list[$item_data_id]['text'] . "\n";
            $view_str .= "運賃:" . $item_data_list[$item_data_id]['number'] . "円";
            break;
    }

    $item_data_list[$item_data_id]['view_str'] = "";
    if ($item_data_list[$item_data_id]['option_string_type'] == 1) // pre
    {
        $item_data_list[$item_data_id]['view_str'] .= $item_data_list[$item_data_id]['option_string'];
        if ($item_data_list[$item_data_id]['foreign_key']
            == 'grn.workflow.string_multiple'
        ) {
            $item_data_list[$item_data_id]['view_str'] .= "\n";
        }
    }
    $item_data_list[$item_data_id]['view_str'] .= $view_str;
    if ($item_data_list[$item_data_id]['option_string_type'] == 2) // post
    {
        if ($item_data_list[$item_data_id]['foreign_key']
            == 'grn.workflow.string_multiple'
        ) {
            $item_data_list[$item_data_id]['view_str'] .= "\n";
        }
        $item_data_list[$item_data_id]['view_str'] .= $item_data_list[$item_data_id]['option_string'];
    }

    $item_data_list[$item_data_id]['view_truncate'] = false;
    if ($item_data_list[$item_data_id]['foreign_key']
        == 'grn.workflow.string_multiple'
    ) {
        require_once('workflow/cellular.csp');
        $item_data_list[$item_data_id]['view_truncate']
            = (grn_workflow_cellular_utf8_strwidth($item_data_list[$item_data_id]['view_str'])
               > 100 ? true : false);
    }
}

/**
 * 経路にいる人には見せる（ただし内容を見せない）
 * 経路にいない人には見せない（エラー）
 */

$path_steps = $controller_util->getPathInfo($petition_id, true, 0, -1,
    CB_DATABASE_NO_LOCK);
$path_step_total = $controller_util->getPathStepCount($path_steps);
$view = false;
$handle_mode = 'confirm';
if (@ $petition['reapply']) {
    $handle_mode = 'reapply';
}

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$columns = [
    '_id',
    'col_path_step_data',
    'col_comment',
    'col_creator',
    'col_creator_name',
    'col_creator_foreign_key',
    'col_ctime'
];
$change_path_histories = $logic->getListByPetitionId($petition_id, $columns);

$deleted_users = [];
if (is_array($change_path_histories) && 0 < count($change_path_histories)) {
    $logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
    $columns = [
        '_id',
        'col_change_path_history',
        'col_user'
    ];
    $tmp = $logic->getList(array_keys($change_path_histories), $user_id,
        $columns);
    foreach ($tmp as $deleted_user) {
        $change_path_history_id = $deleted_user['col_change_path_history'];
        $change_path_history
            = $change_path_histories[$change_path_history_id];
        $path_step_data_id = $change_path_history['col_path_step_data'];
        if (array_key_exists($path_step_data_id, $deleted_users)) {
            $deleted_users[$path_step_data_id] = [];
        }
        $deleted_users[$path_step_data_id][$deleted_user['col_user']]
            = $deleted_user;
    }
}

$in_process = null;
$in_path = false;
$in_evaluated_path = false;
$col_finished = GRN_WORKFLOW_FINISHED_NONE;
$options = [];
$options['none'] = '（選択）';
$options['applicant'] = '申請者本人';
$options['separator'] = '---------------';
foreach (array_keys($path_steps) as $path_step_id) {
    $path_step =& $path_steps[$path_step_id];
    $path_step_data_id = $path_step['_id'];
    if ($path_step['col_activate']) {
        if ($path_step['col_skip']) {
            if (array_key_exists($path_step_data_id, $deleted_users)) {
                if (array_key_exists($user_id,
                    $deleted_users[$path_step_data_id])
                ) {
                    $handle_mode = 'change_transactor';
                    $in_path = true;
                    $in_evaluated_path = true;

                    $deleted_user
                        = $deleted_users[$path_step_data_id][$user_id];
                    $change_path_history_id
                        = $deleted_user['col_change_path_history'];
                    $change_path_history
                        = $change_path_histories[$change_path_history_id];

                    $timestamp = new CB_TimeStamp();
                    $timestamp->unix_ts
                        = $change_path_history['col_ctime'];
                    $change_path_history['col_ctime'] = clone $timestamp;

                    $logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                    $columns = [
                        'tab_grn_workflow_changepathdeleteduser' => [
                            '_id'              => '_id',
                            'col_user'         => 'col_user',
                            'col_display_name' => 'col_old_display_name',
                            'col_foreign_key'  => 'col_foreign_key'
                        ],
                        'tab_cb_user'                            => ['col_display_name' => 'col_display_name']
                    ];
                    $change_path_history['deleted_users']
                        = $logic->getSortedList([$change_path_history_id],
                        $columns);

                    $logic = GRN_Workflow_ChangePathAddUsers::getInstance();
                    $columns = [
                        'tab_grn_workflow_changepathadduser' => [
                            '_id'              => '_id',
                            'col_user'         => 'col_user',
                            'col_display_name' => 'col_old_display_name',
                            'col_foreign_key'  => 'col_foreign_key'
                        ],
                        'tab_cb_user'                        => ['col_display_name' => 'col_display_name']
                    ];
                    $change_path_history['add_users']
                        = $logic->getSortedList([$change_path_history_id],
                        $columns);
                }
            }
        } else {
            if ( ! $in_process) {
                // 処理中/完了した経路ステップ
                if ( ! $path_step['col_finished']) {
                    // 処理中の経路ステップ
                    $path_step['in_process'] = true;
                    $in_process = $path_step_id;

                    if (false !== array_search($user_id, $path_step['uids'])) {
                        $view = true;
                        $handle_mode = null;
                        $in_path = true;
                        $in_evaluated_path = true;
                        break;
                    } else {
                        $psdids = [];
                        while ($path_step) {
                            if ($path_step['col_activate']) {
                                $path_step_data_id = $path_step['_id'];
                                $psdids[] = $path_step_data_id;
                                if (false !== ($result = array_search($user_id,
                                        $path_step['uids']))
                                ) {
                                    if (GRN_WORKFLOW_RESULT_ACCEPT
                                        <= $path_step['users'][$result]['col_result']
                                    ) {
                                        $view = true;
                                        $handle_mode = 'view_only';
                                    } else {
                                        $view = true;
                                    }
                                    $in_path = true;
                                    $in_evaluated_path = true;
                                    break;
                                } elseif (array_key_exists($path_step_data_id,
                                    $deleted_users)
                                ) {
                                    if (array_key_exists($user_id,
                                        $deleted_users[$path_step_data_id])
                                    ) {
                                        $handle_mode = 'change_transactor';
                                        $in_path = true;
                                        $in_evaluated_path = true;

                                        $deleted_user
                                            = $deleted_users[$path_step_data_id][$user_id];
                                        $change_path_history_id
                                            = $deleted_user['col_change_path_history'];
                                        $change_path_history
                                            = $change_path_histories[$change_path_history_id];

                                        $timestamp = new CB_TimeStamp();
                                        $timestamp->unix_ts
                                            = $change_path_history['col_ctime'];
                                        $change_path_history['col_ctime']
                                            = clone $timestamp;

                                        $logic
                                            = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                        $columns
                                            = [
                                            'tab_grn_workflow_changepathdeleteduser' => [
                                                '_id'              => '_id',
                                                'col_user'         => 'col_user',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                            => ['col_display_name' => 'col_display_name']
                                        ];
                                        $change_path_history['deleted_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);

                                        $logic
                                            = GRN_Workflow_ChangePathAddUsers::getInstance();
                                        $columns = [
                                            'tab_grn_workflow_changepathadduser' => [
                                                '_id'              => '_id',
                                                'col_user'         => 'col_user',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                        => ['col_display_name' => 'col_display_name']
                                        ];
                                        $change_path_history['add_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);
                                        break;
                                    }
                                }
                            }
                            $path_step =& $path_step['previous'];
                        }
                    }
                } else {
                    // 完了した経路ステップ
                    if (false !== array_search($user_id, $path_step['uids'])) {
                        $in_path = true;
                        if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                            || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                        ) {
                            if (GRN_WORKFLOW_FINISHED_REJECTION != $col_finished
                                && GRN_WORKFLOW_FINISHED_REMAND != $col_finished
                            ) {
                                $view = true;
                                $in_evaluated_path = true;
                            }
                        } else {
                            $view = true;
                            $in_evaluated_path = true;
                        }
                    } else {
                        if (array_key_exists($path_step_data_id,
                            $deleted_users)
                        ) {
                            if (array_key_exists($user_id,
                                $deleted_users[$path_step_data_id])
                            ) {
                                $handle_mode = 'change_transactor';
                                $in_path = true;
                                $in_evaluated_path = true;

                                $deleted_user
                                    = $deleted_users[$path_step_data_id][$user_id];
                                $change_path_history_id
                                    = $deleted_user['col_change_path_history'];
                                $change_path_history
                                    = $change_path_histories[$change_path_history_id];

                                $timestamp = new CB_TimeStamp();
                                $timestamp->unix_ts
                                    = $change_path_history['col_ctime'];
                                $change_path_history['col_ctime']
                                    = clone $timestamp;

                                $logic
                                    = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                $columns = [
                                    'tab_grn_workflow_changepathdeleteduser' => [
                                        '_id'              => '_id',
                                        'col_user'         => 'col_user',
                                        'col_display_name' => 'col_old_display_name',
                                        'col_foreign_key'  => 'col_foreign_key'
                                    ],
                                    'tab_cb_user'                            => ['col_display_name' => 'col_display_name']
                                ];
                                $change_path_history['deleted_users']
                                    = $logic->getSortedList([$change_path_history_id],
                                    $columns);

                                $logic
                                    = GRN_Workflow_ChangePathAddUsers::getInstance();
                                $columns = [
                                    'tab_grn_workflow_changepathadduser' => [
                                        '_id'              => '_id',
                                        'col_user'         => 'col_user',
                                        'col_display_name' => 'col_old_display_name',
                                        'col_foreign_key'  => 'col_foreign_key'
                                    ],
                                    'tab_cb_user'                        => ['col_display_name' => 'col_display_name']
                                ];
                                $change_path_history['add_users']
                                    = $logic->getSortedList([$change_path_history_id],
                                    $columns);
                            }
                        }
                    }

                    if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                        || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                    ) {
                        if (GRN_WORKFLOW_FINISHED_REJECTION
                            == $path_step['col_finished']
                            || GRN_WORKFLOW_FINISHED_REMAND
                               == $path_step['col_finished']
                        ) {
                            $col_finished = $path_step['col_finished'];
                        }
                    }
                }

                $options[$path_step['_id']] = $path_step['col_role'];
                $path_step['not_modify'] = true;
            } else {
                // 未処理の経路ステップ
                if (false !== array_search($user_id, $path_step['uids'])) {
                    $in_path = true;
                    if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                        || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                    ) {
                        if (GRN_WORKFLOW_FINISHED_REJECTION != $col_finished
                            && GRN_WORKFLOW_FINISHED_REMAND != $col_finished
                        ) {
                            $view = true;
                            $in_evaluated_path = true;
                        }
                    }
                    break;
                }

                if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                    || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                ) {
                    if (GRN_WORKFLOW_FINISHED_REJECTION
                        == $path_step['col_finished']
                        || GRN_WORKFLOW_FINISHED_REMAND
                           == $path_step['col_finished']
                    ) {
                        $col_finished = $path_step['col_finished'];
                    }
                }
                $path_step['not_modify'] = false;
            }
        }
    }
}

if (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL == $petition['status']) {
    $view = false;
}
if ($user_id == @ $petition['user'] || $user_id == @ $petition['agent_user']
) {
    // ログインユーザーは申請者
    $view = true;
    if ( ! $in_process && GRN_WORKFLOW_STATUS_REMAND == $petition['status']) {
        // 申請者本人に差し戻された
        $handle_mode = null;
    }
    $in_path = true;
    $in_evaluated_path = true;
}

$error = false;
if ( ! $in_evaluated_path) {
    if (@ $petition['reapply']) {
        // 再申請された
        $handle_mode = 'reapply';

        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folders = $logic->getList($user_id);

        require_once('workflow/folderrelation_logic.csp');
        $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
        $folder_relations = $logic->getSpecificList(array_keys($folders),
            $petition_id);
        if ( ! is_array($folder_relations) || 0 == count($folder_relations)) {
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
    } else {
        if ($in_path
            && GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL != $petition['status']
        ) {
            // まだ処理が回ってきてない（進行中、差し戻し）
            $error = true;
            $handle_mode = 'confirm';
        } else {
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
    }
}

require_once('workflow/config.csp');
$configs = GRN_Workflow_Configs::getInstance();
$config = $configs->getSystemConfig();
$remand = $config->getRemand();

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$change_path_history_total = $logic->getCount($petition_id);

if ('change_transactor' == $handle_mode) {
    $smarty->assign('change_path_history', $change_path_history);
}

require_once('workflow/folderrelation_logic.csp');
$logic = GRN_Workflow_FolderRelation_Logic::getInstance();
$folder_relation = $logic->getSpecific($folder_id, $petition_id);
if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder = $logic->getByForeignKey($user_id, 'FINISH_FOLDER_FOREIGN_KEY');

    $fids = [];
    $fids[] = $folder['_id'];

    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder = $logic->getByForeignKey($user_id, 'TEMP_FOLDER_FOREIGN_KEY');

    $fids[] = $folder['_id'];

    require_once('workflow/folderrelation_logic.csp');
    $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
    $folder_relation = $logic->getSpecificList($fids, $petition_id);
    if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
        $handle_mode = 'view_only';
    }
}

//アクセス権を取得
$access = $controller_util->checkAccess($petition['pid'], $folder_id,
    $folder['col_folder_type'], $user_id, '', CB_DATABASE_NO_LOCK);
//アクセス権設定
if ($access['access_type'] == 'creator') {
    //申請者で判定
    foreach (array_keys($item_data_list) as $item_data_id) {
        if ($item_data_list[$item_data_id]['foreign_key']
            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_DATE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_FILE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
        ) {
            if ($item_data_list[$item_data_id]['attach_file_view'] != 1) {
                unset($item_data_list[$item_data_id]);
            }
        }
    }
} elseif ($access['access_type'] == 'path_step') {
    //経路で判定
    if ( ! is_null($access['access_path_step_id'])) {
        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = GRN_Workflow_ChangeAccessData::getInstance();

        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
            ) {
                $change_access_data
                    = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                    $access['access_path_step_id']);
                if ($change_access_data['col_view'] != 1) {
                    unset($item_data_list[$item_data_id]);
                }
            }
        }
    } else {
        //すべて非表示
        foreach (array_keys($item_data_list) as $item_data_id) {
            if ($item_data_list[$item_data_id]['foreign_key']
                == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_DATE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_FILE
                || $item_data_list[$item_data_id]['foreign_key']
                   == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
            ) {
                unset($item_data_list[$item_data_id]);
            }
        }
    }
} elseif ($access['access_type'] == 'all_view') {
    //すべて表示
} else {
    //すべて非表示
    foreach (array_keys($item_data_list) as $item_data_id) {
        if ($item_data_list[$item_data_id]['foreign_key']
            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_DATE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_FILE
            || $item_data_list[$item_data_id]['foreign_key']
               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
        ) {
            unset($item_data_list[$item_data_id]);
        }
    }
}

$smarty->assign('item_data_list', $item_data_list);
$smarty->assign('is_files', $is_files);
$smarty->assign('in_process', $in_process);
$smarty->assign('path_steps', $path_steps);
$smarty->assign('path_step_total', $path_step_total);
$smarty->assign('is_remand', $remand);
$smarty->assign('remand_options', $options);
$smarty->assign('view', $view);
$smarty->assign('handle_mode', $handle_mode);
$smarty->assign('error', $error);
$smarty->assign('change_path_history_total', $change_path_history_total);

//Display Smarty Template
$smarty->display(cb_get_pagename() . '.tpl');

