<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate an Smarty object
    require_once("grn/smarty.csp");
    $smarty = new GRN_Smarty;

    // connect Smarty Validate
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($smarty);
    $form_name = 'workflow/cellular/cancel';
    SmartyValidate::register_form($form_name);

    if (SmartyValidate::is_valid($G_INPUT, $form_name)) {
        $folder_id = null;
        if (array_key_exists('fid', $G_INPUT)) {
            $folder_id = $G_INPUT['fid'];
        }
        $petition_id = null;
        if (array_key_exists('pid', $G_INPUT)) {
            $petition_id = $G_INPUT['pid'];
        }
        $comment = null;
        if (array_key_exists('comment', $G_INPUT)) {
            $comment = $G_INPUT['comment'];
        }

        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login =& $uum->getLoginUser();
        $user_id = $login->getOID();

        /**
         * 制限事項
         * ・ログインユーザーは申請者でない
         * ・ログインユーザーはフォルダの所有者でない
         * ・フォルダは送信一覧、未処理一覧（申請の進行状況は差し戻し）でない
         * ・フォルダにフォルダリレーションがない
         */

        require_once('workflow/petition_logic.csp');
        $logic = GRN_Workflow_Petition_Logic::getInstance();
        $petition = $logic->get($petition_id);
        if ($user_id != $petition['col_user']
            && $user_id != $petition['col_agent_user']
        ) {
            // ログインユーザーは申請者でない
            cb_throw_error(E_GRN_WRKF_DENY_CANCEL_NOT_APPLICANT);
        }

        if (GRN_WORKFLOW_STATUS_UNPROCESSING != $petition['col_status']
            && GRN_WORKFLOW_STATUS_IN_PROCESS != $petition['col_status']
            && GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']
        ) {
            cb_throw_error(E_GRN_WRKF_PETITION_STATUS_DENY_CANCEL);
        }

        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folder = $logic->get($user_id, $folder_id);
        if ( ! is_array($folder) || 0 == count($folder)) {
            // ログインユーザーはフォルダの所有者でない
            cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
        }
        if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
            == $folder['col_folder_type']
        ) {
            if (GRN_WORKFLOW_STATUS_REMAND != $petition['col_status']) {
                // フォルダは未処理一覧（申請の進行状況は差し戻しでない）
                cb_throw_error(E_GRN_WRKF_DENY_CANCEL_FOLDER);
            }
        } elseif (GRN_WORKFLOW_FOLDER_TYPE_OUT_ID
                  != $folder['col_folder_type']
        ) {
            // フォルダは送信一覧でない
            cb_throw_error(E_GRN_WRKF_DENY_CANCEL_FOLDER);
        }

        require_once('workflow/folderrelation_logic.csp');
        $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
        $folder_relation = $logic->getSpecific($folder_id, $petition_id);
        if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
            // フォルダにフォルダリレーションがない
            cb_throw_error(E_GRN_WRKF_FOLDER_FOLDERRELATION_NOT_FOUND);
        }


        // 申請の状況を取り戻し（取り消し）に変更
        require_once('workflow/petition_logic.csp');
        $logic = GRN_Workflow_Petition_Logic::getInstance();
        if (GRN_WORKFLOW_STATUS_UNPROCESSING != $petition['col_status']
            && GRN_WORKFLOW_STATUS_IN_PROCESS != $petition['col_status']
        ) {
            $petition['col_status'] = GRN_WORKFLOW_STATUS_IN_PROCESS;
        }
        $status = GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                  + $petition['col_status'];
        $ptime = time();
        $logic->modifyStatus($petition_id, $status, $user_id, $comment, $ptime);

        if (GRN_WORKFLOW_STATUS_UNPROCESSING == $petition['col_status']) {
            $user_id = $petition['col_user'];

            // 取り戻したは、下書きのみ
            require_once('workflow/controller_util.csp');
            $controller_util = new GRN_Workflow_ControllerUtil($form_name);
            $controller_util->removeAllPetitions($petition_id, $user_id);

            if ( ! is_null($petition['col_agent_user'])) {
                $controller_util->removeAllPetitions($petition_id,
                    $petition['col_agent_user']);
            }

            // 取り戻しの場合、申請者の下書きに申請を送信
            require_once('workflow/controller_util.csp');
            $controller_util = new GRN_Workflow_ControllerUtil($form_name);

            //$uids = array($user_id);
            $uids = [];
            if ( ! is_null($petition['col_agent_user'])) {
                $uids = [$petition['col_agent_user']];
            } else {
                $uids = [$user_id];
            }

            $foreign_keys = ['TEMP_FOLDER_FOREIGN_KEY'];
            $controller_util->sendPetition($petition_id, $uids, $foreign_keys);
        }

        //監査する
        require_once('workflow/inspection.csp');
        $inspection = GRN_Workflow_Petition_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $message_type = 'petition_cancel';

            $message_args['pid'] = $petition_id;
            $message_args['uid'] = $user_id;
            $message_args['status'] = $status;
            $message_args['comment'] = $comment;
            $message_args['ptime'] = $ptime;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        /*
                if($handle)
                {
                    // 処理者の申請を削除
                    require_once('workflow/controller_util.csp');
                    $controller_util = new GRN_Workflow_ControllerUtil($form_name);
                    $controller_util->removePetition($petition_id, $user_id, 'UNPROCESSED_FOLDER_FOREIGN_KEY');
                }
        */
        SmartyValidate::unregister_form($form_name);
//        grn_workflow_cellular_redirect( $G_pagepath.'/list', array('fid'=>$folder_id));
        grn_workflow_cellular_switch_page($G_pagepath . '/list');
    } else {
        grn_workflow_cellular_switch_page($G_pagepath . '/cancel');
    }
}


