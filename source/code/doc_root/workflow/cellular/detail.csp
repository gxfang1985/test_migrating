<?php
//Instantiate an Smarty object
require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// ページ情報
$smarty->assign('pagetitle', grn_get_current_page_display_name());
$smarty->assign('pagepath', $G_pagepath);
$smarty->assign('pagename', cb_get_pagename());

// cellular application
if (isset($G_cellular) && $G_cellular) {
    $smarty->assign('valid_cellular', true);

    $user_config =& $G_cellular->getUserConfig($G_login_user);
    $limit = $user_config->getListMax();
    $width = $user_config->getSubjectWidth();
} else {
    $smarty->assign('valid_cellular', false);

    $limit = 10;
    $width = 14;
}

$smarty->assign('width', $width);

// params
$folder_id = null;
if (array_key_exists('fid', $G_INPUT) && strlen($G_INPUT['fid'])) {
    $folder_id = $G_INPUT['fid'];
}
$petition_id = null;
if (array_key_exists('pid', $G_INPUT) && strlen($G_INPUT['pid'])) {
    $petition_id = $G_INPUT['pid'];
}
$item_id = null;
if (array_key_exists('iid', $G_INPUT) && strlen($G_INPUT['iid'])) {
    $item_id = $G_INPUT['iid'];
}

//Get Utility
require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();

$folder = $controller_util->getSimilarFolder($G_login_user->getOID(),
    $folder_id, $petition_id);
if (is_array($folder) && 0 < count($folder)) {
    $folder_id = $folder['_id'];
}
$smarty->assign('fid', $folder_id);
$smarty->assign('pid', $petition_id);

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form'                   => 'form',
    //Petition Form ID
    'form_name'              => 'form_name',
    //Petition Form Name
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
];

//Get Petition for view
$petition = $petition_util->getView($petition_id, $translation_map_petition);
$path_info = $controller_util->getPathInfoForView($G_login_user->getOID(),
    $petition_id, $petition, $folder_id);
if ( ! $path_info['view']) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
}

$ptime = new CB_TimeStamp();
$ptime->unix_ts = $petition['ptime'];
$petition['ptime'] = $ptime;

//Create Parameter Translation Map
$translation_map_item_data = [
    //Item Data Information
    'iid'                => 'itemdata_id',
    //Item Data ID
    'display_name'       => 'itemdata_display_name',
    //Item Data Display Name
    'type'               => 'itemdata_type',
    //Item Data Type
    'option_string'      => 'itemdata_option_string',
    //Item Data Option String
    'option_string_type' => 'itemdata_option_string_type',
    //Item Data Option String Type
    'foreign_key'        => 'itemdata_foreign_key',
    //Item Data foreign_key
    'attach_file'        => 'itemdata_attach_file',
    //Item Data Attach File
    'attach_file_view'   => 'itemdata_attach_file_view',
    //Item Data Attach File View
    'required'           => 'itemdata_required',
    //Item Data Reuired Flag
    'list_index'         => 'itemdata_list_index',
    //Item Data List Index
    'text'               => 'itemdata_text',
    //Item Data text Value
];

$item = $item_data_util->getViewEx($item_id, $translation_map_item_data,
    $petition_id);
//var_dump($item);

$view_str = "";
if ($item && $item['foreign_key'] == 'grn.workflow.string_multiple') {
    if ($item['option_string_type'] == 1) // pre
    {
        $view_str .= $item['option_string'];
        $view_str .= "\n";
    }
    $view_str .= $item['text'];
    if ($item['option_string_type'] == 2) // post
    {
        $view_str .= "\n";
        $view_str .= $item['option_string'];
    }
}
$smarty->assign('view_str', $view_str);
$smarty->assign('item', $item);

//Display Smarty Template
$smarty->display(cb_get_pagename() . '.tpl');

