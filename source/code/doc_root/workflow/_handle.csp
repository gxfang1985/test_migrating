<?php

use grn\workflow\CustomizationUtil;
use grn\workflow\customization\DataConverterForJsPetitionData;

/**
 * 制限事項
 * ・フォルダは未処理一覧でない（連続処理のみ）
 */

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$user_id = $login->getOID();
$agent_id = '';
$is_public = false;

//Get Session Key
require_once('workflow/controller_util.csp');
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);

require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession('workflow/handle' . $tmp_key);

// Huy add @ 2008/07/18
$controller_util = null;
$path_steps = null;
// End: Huy add @ 2008/07/18

if ($session_flag) {
    $params = $session->get('batch');
    if ( ! is_array($params) || 0 == count($params)) {
        // 連続処理のパラメータが空
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_EMPTY_BATCH_PARAMS);
    }
    $folder_id = $params['fid'];
    $folder_relations = $params['folder_relations'];

    if ( ! is_array($folder_relations) || 0 == count($folder_relations)) {
        $session->unset_by('batch');
        cb_redirect('workflow/index', ['fid' => $folder_id]);
    }

    require_once('workflow/folderrelation_logic.csp');
    $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
    $tmp = $logic->getSpecificListByOID(array_keys($folder_relations));
    if ( ! is_array($tmp) || 0 == count($tmp)) {
        $session->unset_by('batch');
        cb_redirect('workflow/index', ['fid' => $folder_id]);
    }

    foreach (array_keys($folder_relations) as $folder_relation_id) {
        if ( ! array_key_exists($folder_relation_id, $tmp)) {
            unset($folder_relations[$folder_relation_id]);
            continue;
        }
        $folder_relations[$folder_relation_id]
            = array_intersect_key($folder_relations[$folder_relation_id],
            ['f__id' => '', 'r__id' => '', 'p__id' => '']);
    }

    $folder_relation = current($folder_relations);
    $params['simple'] = $simple;
    $params['folder_relations'] = $folder_relations;
    $session->set('batch', $params);

    $petition_id = $folder_relation['p__id'];

    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();

    $folder_org = $logic->getFolder($folder_id);
    $folder_user_id = $folder_org['col_user'];
    if ($user_id != $folder_user_id) {
        //代理承認の検証
        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $config = $configs->getSystemConfig();
        if ($config->isProxyApproval($user_id, $folder_user_id)) {
            // 代理承認
            $agent_id = $user_id;
            $user_id = $folder_user_id;
        } else {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
        if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
            != $folder_org['col_folder_type']
        ) {
            // フォルダは未処理一覧でない
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
        }
    }

    $folder = $logic->getFolder($folder_id);
} else {
    if ('batch' == $command) {
        if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID) {
            $order_by = [];
            switch ($sort) {
                case 'pnd':
                    $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'DESC';
                    break;
                case 'pnu':
                    $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'ASC';
                    break;
                case 'ctd':
                    $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                    break;
                case 'ctu':
                    $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'ASC';
                    break;
                case 'fnd':
                    $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'DESC';
                    break;
                case 'fnu':
                    $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'ASC';
                    break;
                case 'utd':
                    $order_by[GRN_WORKFLOW_COLUMN_MTIME] = 'DESC';
                    break;
                case 'utu':
                    $order_by[GRN_WORKFLOW_COLUMN_MTIME] = 'ASC';
                    break;
                case 'mtd':
                    $order_by[GRN_WORKFLOW_COLUMN_USER] = 'DESC';
                    break;
                case 'mtu':
                    $order_by[GRN_WORKFLOW_COLUMN_USER] = 'ASC';
                    break;
                default:
                    if ($folder_id
                        == $folder_list_for_view['temp_folder']['fid']
                    ) {
                        $sort = 'utd';
                        $order_by[GRN_WORKFLOW_COLUMN_MTIME] = 'DESC';
                    } else {
                        $sort = 'ctd';
                        $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                    }
                    break;
            }
            if ($sort == 'mtd' || $sort == 'mtu') {
                $order[GRN_WORKFLOW_TABLE_FOLDER] = $order_by;
            } else {
                $order[GRN_WORKFLOW_TABLE_PETITION] = $order_by;
            }

            require_once('workflow/folder_logic_base.csp');
            $logic = GRN_Workflow_Virtual_Folder_Logic_Base::getInstance();
            $folder = $logic->getExOrder($user_id, $folder_id,
                $offset, -1, $order);
            $folder_relations = $folder['folderrelation'];

            if ( ! is_array($folder_relations)
                 || count($folder_relations) <= 0
            ) {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
            $folder_current = current($folder_relations);
            $folder_id = $folder_current['f__id'];

            unset($logic);
            require_once('workflow/folder_logic.csp');
            $logic = GRN_Workflow_Folder_Logic::getInstance();
            $folder_org = $logic->getFolder($folder_id);
            $folder_user_id = $folder_org['col_user'];
            if ($user_id != $folder_user_id) {
                //代理承認の検証
                require_once('workflow/config.csp');
                $configs = GRN_Workflow_Configs::getInstance();
                $config = $configs->getSystemConfig();
                if ($config->isProxyApproval($user_id, $folder_user_id)) {
                    // 代理承認
                    $agent_id = $user_id;
                    $user_id = $folder_user_id;
                } else {
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }
                if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                    != $folder_org['col_folder_type']
                ) {
                    // フォルダは未処理一覧でない
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
                }
            }
        } else {
            require_once('workflow/folder_logic.csp');
            $logic = GRN_Workflow_Folder_Logic::getInstance();
            $folder = $logic->get($user_id, $folder_id);
            if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                != $folder['col_folder_type']
            ) {
                // フォルダは未処理一覧でない
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
            }

            $order_by = [];
            switch ($sort) {
                case 'pnd':
                    $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'DESC';
                    break;
                case 'pnu':
                    $order_by[GRN_WORKFLOW_COLUMN_PRIORITY] = 'ASC';
                    break;
                case 'ctd':
                    $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                    break;
                case 'ctu':
                    $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'ASC';
                    break;
                case 'fnd':
                    $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'DESC';
                    break;
                case 'fnu':
                    $order_by[GRN_WORKFLOW_COLUMN_FORM_NAME] = 'ASC';
                    break;
                default:
                    $sort = 'ctd';
                    $order_by[GRN_WORKFLOW_COLUMN_CTIME] = 'DESC';
                    break;
            }
            $order[GRN_WORKFLOW_TABLE_PETITION] = $order_by;

            $folder = $logic->getExOrder($user_id, $folder_id, $offset, -1,
                $order);

            $folder_relations = $folder['folderrelation'];
        }

        if ( ! is_array($folder_relations) && 0 == count($folder_relations)) {
            cb_redirect('workflow/index', ['fid' => $folder_id]);
        }

        $params['fid'] = $folder_id;
        $params['simple'] = $simple;
        foreach ($folder_relations as $key => $value) {
            $folder_relations[$key]
                = array_intersect_key($folder_relations[$key],
                ['f__id' => '', 'r__id' => '', 'p__id' => '']);
        }
        reset($folder_relations);
        $params['folder_relations'] = $folder_relations;
        $session->set('batch', $params);
        $folder_relation = current($params['folder_relations']);
        $petition_id = $folder_relation['p__id'];
        $session_flag = true;
    } else {
        $session->unset_by('batch');

        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();

        $folder_org = $logic->getFolder($folder_id);
        $folder_user_id = $folder_org['col_user'];

        if ($user_id != $folder_user_id) {
            //代理承認の検証
            require_once('workflow/config.csp');
            $configs = GRN_Workflow_Configs::getInstance();
            $config = $configs->getSystemConfig();
            if ($config->isProxyApproval($user_id, $folder_user_id)) {
                // Huy add @ 2008/07/18
                require_once('workflow/controller_util.csp');
                $controller_util = new GRN_Workflow_ControllerUtil($page_name);
                $path_steps
                    = $controller_util->getPathInfo($petition_id,
                    true, CB_DATABASE_NO_LOCK);
                $path_steps_current = current($path_steps);
                $path_step
                    = $controller_util->getInProcessPathStep($path_steps_current);

                if ( ! $path_step
                     || $path_step['col_type'] == GRN_WORKFLOW_CIRCULAR
                ) {
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }
                // End: Huy add @ 2008/07/18

                // 代理承認
                $agent_id = $user_id;
                $user_id = $folder_user_id;
            } elseif ( ! is_null($petition_id)) {
                // 公開申請データの閲覧権限
                require_once('workflow/controller_util.csp');
                $c = GRN_Workflow_Category_Controller_Utility::getInstance();
                $is_public = $c->checkPublicByPetitionId($petition_id, false);
            } else {
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
            if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
                != $folder_org['col_folder_type']
            ) {
                // フォルダは未処理一覧でない
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_FOLDER_INVALID_FOLDER_ID);
            }
        }

        $folder = $logic->getByForeignKey($user_id,
            'UNPROCESSED_FOLDER_FOREIGN_KEY');
        if (is_array($folder) && 0 < count($folder)) {
            $folder_id = $folder['_id'];
        }
    }
    $t->assign('folder', $folder);
}

$t->assign('fid', $folder_id);
$t->assign('pid', $petition_id);
$t->assign('simple', $simple);
$t->assign('cpsf', $session_flag);

//Get Petition and Item Data Controller Utility
require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                          => '_id',
    //Petition ID
    'petition_number'              => 'petition_number',
    //Petition Number
    'name'                         => 'name',
    //Petition Name
    'form'                         => 'form',
    //Petition Form ID
    'form_name'                    => 'form_name',
    //Petition Form Name
    'creator'                      => 'creator',
    //Petition Creator
    'creator_name'                 => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'          => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                        => 'ctime',
    //Petition Create Time
    'icon_type'                    => 'icon_type',
    //Petition Icon Type
    'icon_id'                      => 'icon_id',
    //Petition Icon ID
    'icon_url'                     => 'icon_url',
    //Petition Icon URL
    'status'                       => 'status',
    'transactor'                   => 'transactor',
    'transactor_name'              => 'transactor_name',
    'transactor_foreign_key'       => 'transactor_foreign_key',
    'user'                         => 'user',
    'user_name'                    => 'user_name',
    'user_foreign_key'             => 'user_foreign_key',
    'comment'                      => 'comment',
    'ptime'                        => 'ptime',
    'reapply'                      => 'reapply',
    'priority'                     => 'priority',
    'agent_user'                   => 'agent_user',
    'agent_user_name'              => 'agent_user_name',
    'agent_user_foreign_key'       => 'agent_user_foreign_key',
    'agent_transactor'             => 'agent_transactor',
    'agent_transactor_name'        => 'agent_transactor_name',
    'agent_transactor_foreign_key' => 'agent_transactor_foreign_key',
];

//Create Parameter Translation Map
$translation_map_item_data = [
    //Item Data Information
    'iid'                => 'itemdata_id',
    //Item Data ID
    'petition'           => 'petition',
    //Petition ID
    'display_name'       => 'itemdata_display_name',
    //Item Data Display Name
    'code'               => 'itemdata_code',
    //Item Code
    'type'               => 'itemdata_type',
    //Item Data Type
    'option_string'      => 'itemdata_option_string',
    //Item Data Option String
    'option_string_type' => 'itemdata_option_string_type',
    //Item Data Option String Type
    'foreign_key'        => 'itemdata_foreign_key',
    //Item Data foreign_key
    'attach_file'        => 'itemdata_attach_file',
    //Item Data Attach File
    'attach_file_view'   => 'itemdata_attach_file_view',
    //Item Data Attach File View
    'settings'           => 'itemdata_settings',
    //Item Data Settings
    'br'                 => 'itemdata_br',
    //Item Data <br> Flag
    'separator'          => 'itemdata_separator',
    //Item Data Separator
    'required'           => 'itemdata_required',
    //Item Data Reuired Flag
    'list_index'         => 'itemdata_list_index',
    //Item Data List Index
    'number'             => 'itemdata_number',
    //Item Data Number Value
    'text'               => 'itemdata_text',
    //Item Data text Value
    //Item Data File Information
    'fid'                => 'itemdatafile_id',
    //Item Data File ID
    'file'               => 'itemdatafile_file',
    //Item Data File ID
    'files'              => 'itemdata_files',
    //Item Data File ID
];

//Get Petition for view
$petition = $petition_util->getView($petition_id, $translation_map_petition);

$ptime = new CB_TimeStamp();
$ptime->unix_ts = $petition['ptime'];
$petition['ptime'] = $ptime;

$applicant = $uum->getUser($petition['user']);
if ($applicant) {
    $petition['user_valid'] = $applicant->get('valid');
}
$applicant = $uum->getUser($petition['agent_user']);
if ($applicant) {
    $petition['agent_user_valid'] = $applicant->get('valid');
}

if (array_key_exists('transactor', $petition)) {
    $transactor = $uum->getUser($petition['transactor']);
    if ($transactor) {
        $petition['transactor_valid'] = $transactor->get('valid');
    }
}
if (array_key_exists('agent_transactor', $petition)) {
    $transactor = $uum->getUser($petition['agent_transactor']);
    if ($transactor) {
        $petition['agent_transactor_valid'] = $transactor->get('valid');
    }
}


//Assign Petition
$t->assign('petition', $petition);

if ($controller_util == null)  // Huy add @ 2008/07/18
{
    require_once('workflow/controller_util.csp');
    $controller_util = new GRN_Workflow_ControllerUtil($page_name);
}

//Get Item Data List for view
$item_data_list = $item_data_util->getListViewEx($translation_map_item_data,
    $petition_id, null, true);

//Unset Standard Item
$current_item_data = current($item_data_list);
unset($item_data_list[$current_item_data['iid']]);

//Create Item Layout
$current = null;
$previous = null;
foreach (array_keys($item_data_list) as $item_data_id) {
    //Check Calc Numeric Not Display Parameter
    if ($item_data_list[$item_data_id]['foreign_key']
        == 'grn.workflow.calc_numeric'
    ) {
        if ($item_data_list[$item_data_id]['settings']['not_display'] == 1) {
            unset($item_data_list[$item_data_id]);
            continue;
        }
    }

    //Check Previous Item
    if ( ! is_null($previous)) {
        if ($previous['type'] != 0 && $previous['type'] != 3) {
            //Force Set br Flag
            $item_data_list[$item_data_id]['br'] = 1;
        }
    } else {
        //Force Set br Flag
        $item_data_list[$item_data_id]['br'] = 1;
    }

    //Set Previous Item
    $previous =& $item_data_list[$item_data_id];

    //Check Current or Sub Item
    if ($item_data_list[$item_data_id]['br'] == 1) {
        $current =& $item_data_list[$item_data_id];
        $current['sub_item_data_list'] = [];
        $current['total_required'] = $current['required'];
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
    } else {
        if (array_key_exists('right_align',
                $item_data_list[$item_data_id]['settings'])
            && $item_data_list[$item_data_id]['settings']['right_align']
        ) {
            $current['right_align_flag'] = 1;
        }
        $current['sub_item_data_list'][$item_data_id]
            = $item_data_list[$item_data_id];
        $current['sub_item_data_count'] = count($current['sub_item_data_list']);
        if ($item_data_list[$item_data_id]['required'] == 1) {
            $current['total_required'] = 1;
        }
        unset($item_data_list[$item_data_id]);
    }
}

/**
 * 経路にいる人には見せる（ただし内容を見せない）
 * 経路にいない人には見せない（エラー）
 */

if ($path_steps == null) {  // Huy add @ 2008/07/18
    $path_steps = $controller_util->getPathInfo($petition_id, true,
        CB_DATABASE_NO_LOCK);
}
$path_step_total = $controller_util->getPathStepCount($path_steps);

$view = false;
$handle_mode = 'confirm';
if (@ $petition['reapply']) {
    $handle_mode = 'reapply';
}

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$columns = [
    '_id',
    'col_path_step_data',
    'col_comment',
    'col_creator',
    'col_creator_name',
    'col_creator_foreign_key',
    'col_ctime'
];
$change_path_histories = $logic->getListByPetitionId($petition_id, $columns);

$in_path = false;
$in_evaluated_path = false;
$deleted_users = [];
if (is_array($change_path_histories) && 0 < count($change_path_histories)) {
    $logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
    $columns = [
        '_id',
        'col_change_path_history',
        'col_user'
    ];
    $tmp = $logic->getList(array_keys($change_path_histories), $user_id,
        $columns);
    foreach ($tmp as $deleted_user) {
        $change_path_history_id = $deleted_user['col_change_path_history'];
        $change_path_history
            = $change_path_histories[$change_path_history_id];
        $path_step_data_id = $change_path_history['col_path_step_data'];
        if (array_key_exists($path_step_data_id, $deleted_users)) {
            $deleted_users[$path_step_data_id] = [];
        }
        $deleted_users[$path_step_data_id][$deleted_user['col_user']]
            = $deleted_user;

        if ($deleted_user['col_user'] === $user_id) {
            $in_path = true;
            $in_evaluated_path = true;
        }
    }
}

$in_process = null;
$col_finished = GRN_WORKFLOW_FINISHED_NONE;
$options = [];
$options['none'] = cb_msg('grn.workflow', 'GRMSG_WF_1');
$options['applicant'] = cb_msg('grn.workflow', 'GRMSG_WF_2');
$options['separator'] = '---------------';

foreach (array_keys($path_steps) as $path_step_id) {
    $path_step =& $path_steps[$path_step_id];
    $path_step_data_id = $path_step['_id'];

    if ($path_step['col_activate']) {
        if ($path_step['col_skip']) {
            if (array_key_exists($path_step_data_id, $deleted_users)) {
                if (array_key_exists($user_id,
                    $deleted_users[$path_step_data_id])
                ) {
                    $handle_mode = 'change_transactor';

                    $deleted_user
                        = $deleted_users[$path_step_data_id][$user_id];
                    $change_path_history_id
                        = $deleted_user['col_change_path_history'];
                    $change_path_history
                        = $change_path_histories[$change_path_history_id];

                    $timestamp = new CB_TimeStamp();
                    $timestamp->unix_ts
                        = $change_path_history['col_ctime'];
                    $change_path_history['col_ctime'] = clone $timestamp;

                    $logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                    $columns = [
                        'tab_grn_workflow_changepathdeleteduser' => [
                            '_id'              => '_id',
                            'col_user'         => 'col_user',
                            'col_display_name' => 'col_old_display_name',
                            'col_foreign_key'  => 'col_foreign_key'
                        ],
                        'tab_cb_user'                            => [
                            'col_display_name' => 'col_display_name',
                            'col_valid'        => 'col_valid'
                        ]
                    ];
                    $change_path_history['deleted_users']
                        = $logic->getSortedList([$change_path_history_id],
                        $columns);

                    $logic = GRN_Workflow_ChangePathAddUsers::getInstance();
                    $columns = [
                        'tab_grn_workflow_changepathadduser' => [
                            '_id'              => '_id',
                            'col_user'         => 'col_user',
                            'col_display_name' => 'col_old_display_name',
                            'col_foreign_key'  => 'col_foreign_key'
                        ],
                        'tab_cb_user'                        => [
                            'col_display_name' => 'col_display_name',
                            'col_valid'        => 'col_valid'
                        ]
                    ];
                    $change_path_history['add_users']
                        = $logic->getSortedList([$change_path_history_id],
                        $columns);
                }
            }
        } else {
            if ( ! $in_process) {
                // 処理中/完了した経路ステップ
                if ( ! $path_step['col_finished']) {
                    // 処理中の経路ステップ
                    $path_step['in_process'] = true;
                    $in_process = $path_step_id;

                    if (false !== array_search($user_id, $path_step['uids'])) {
                        $view = true;
                        $handle_mode = null;
                        $in_path = true;
                        $in_evaluated_path = true;
                        break;
                    } else {
                        $psdids = [];
                        //代理承認対応により、承認経路を遡る(previous)
                        while ($path_step) {
                            if ($path_step['col_activate']) {
                                $path_step_data_id = $path_step['_id'];
                                $psdids[] = $path_step_data_id;
                                if (false !== ($result = array_search($user_id,
                                        $path_step['uids']))
                                ) {
                                    //Bugfix:GRN2-6601
                                    //承認経路の中で申請者が「確認」処理を行っている場合、全ての承認が完了時に再度、
                                    //確認ボタンを表示させる必要があるため、view_onlyにさせない対応
                                    if (GRN_WORKFLOW_RESULT_CONFIRM
                                        == $path_step['users'][$result]['col_result']
                                        && $path_step['col_acceptance_type']
                                    ) {
                                        $view = true;
                                    } elseif (GRN_WORKFLOW_RESULT_ACCEPT
                                              < $path_step['users'][$result]['col_result']
                                    ) {
                                        $view = true;
                                        $handle_mode = 'view_only';
                                    } else {
                                        $view = true;
                                    }
                                    $in_path = true;
                                    $in_evaluated_path = true;
                                    break;
                                } elseif (array_key_exists($path_step_data_id,
                                    $deleted_users)
                                ) {
                                    if (array_key_exists($user_id,
                                        $deleted_users[$path_step_data_id])
                                    ) {
                                        $handle_mode = 'change_transactor';

                                        $deleted_user
                                            = $deleted_users[$path_step_data_id][$user_id];
                                        $change_path_history_id
                                            = $deleted_user['col_change_path_history'];
                                        $change_path_history
                                            = $change_path_histories[$change_path_history_id];

                                        $timestamp = new CB_TimeStamp();
                                        $timestamp->unix_ts
                                            = $change_path_history['col_ctime'];
                                        $change_path_history['col_ctime']
                                            = clone $timestamp;

                                        $logic
                                            = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                        $columns
                                            = [
                                            'tab_grn_workflow_changepathdeleteduser' => [
                                                '_id'              => '_id',
                                                'col_user'         => 'col_user',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                            => [
                                                'col_display_name' => 'col_display_name',
                                                'col_valid'        => 'col_valid'
                                            ]
                                        ];
                                        $change_path_history['deleted_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);

                                        $logic
                                            = GRN_Workflow_ChangePathAddUsers::getInstance();
                                        $columns = [
                                            'tab_grn_workflow_changepathadduser' => [
                                                '_id'              => '_id',
                                                'col_user'         => 'col_user',
                                                'col_display_name' => 'col_old_display_name',
                                                'col_foreign_key'  => 'col_foreign_key'
                                            ],
                                            'tab_cb_user'                        => [
                                                'col_display_name' => 'col_display_name',
                                                'col_valid'        => 'col_valid'
                                            ]
                                        ];
                                        $change_path_history['add_users']
                                            = $logic->getSortedList([$change_path_history_id],
                                            $columns);
                                        break;
                                    }
                                }
                            }
                            $path_step =& $path_step['previous'];
                        }
                    }
                } else {
                    // 完了した経路ステップ
                    if (false !== array_search($user_id, $path_step['uids'])) {
                        $in_path = true;
                        if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                            || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                        ) {
                            if (GRN_WORKFLOW_FINISHED_REJECTION != $col_finished
                                && GRN_WORKFLOW_FINISHED_REMAND != $col_finished
                            ) {
                                $view = true;
                                $in_evaluated_path = true;
                            }
                        } else {
                            $view = true;
                            $in_evaluated_path = true;
                        }
                    } else {
                        if (array_key_exists($path_step_data_id,
                            $deleted_users)
                        ) {
                            if (array_key_exists($user_id,
                                $deleted_users[$path_step_data_id])
                            ) {
                                $handle_mode = 'change_transactor';

                                $deleted_user
                                    = $deleted_users[$path_step_data_id][$user_id];
                                $change_path_history_id
                                    = $deleted_user['col_change_path_history'];
                                $change_path_history
                                    = $change_path_histories[$change_path_history_id];

                                $timestamp = new CB_TimeStamp();
                                $timestamp->unix_ts
                                    = $change_path_history['col_ctime'];
                                $change_path_history['col_ctime']
                                    = clone $timestamp;

                                $logic
                                    = GRN_Workflow_ChangePathDeletedUsers::getInstance();
                                $columns = [
                                    'tab_grn_workflow_changepathdeleteduser' => [
                                        '_id'              => '_id',
                                        'col_user'         => 'col_user',
                                        'col_display_name' => 'col_old_display_name',
                                        'col_foreign_key'  => 'col_foreign_key'
                                    ],
                                    'tab_cb_user'                            => [
                                        'col_display_name' => 'col_display_name',
                                        'col_valid'        => 'col_valid'
                                    ]
                                ];
                                $change_path_history['deleted_users']
                                    = $logic->getSortedList([$change_path_history_id],
                                    $columns);

                                $logic
                                    = GRN_Workflow_ChangePathAddUsers::getInstance();
                                $columns = [
                                    'tab_grn_workflow_changepathadduser' => [
                                        '_id'              => '_id',
                                        'col_user'         => 'col_user',
                                        'col_display_name' => 'col_old_display_name',
                                        'col_foreign_key'  => 'col_foreign_key'
                                    ],
                                    'tab_cb_user'                        => [
                                        'col_display_name' => 'col_display_name',
                                        'col_valid'        => 'col_valid'
                                    ]
                                ];
                                $change_path_history['add_users']
                                    = $logic->getSortedList([$change_path_history_id],
                                    $columns);
                            }
                        }
                    }

                    if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                        || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                    ) {
                        if (GRN_WORKFLOW_FINISHED_REJECTION
                            == $path_step['col_finished']
                            || GRN_WORKFLOW_FINISHED_REMAND
                               == $path_step['col_finished']
                        ) {
                            $col_finished = $path_step['col_finished'];
                        }
                    }
                }

                $options[$path_step['_id']] = $path_step['col_role'];
                $path_step['not_modify'] = true;
            } else {
                // 未処理の経路ステップ
                if (false !== array_search($user_id, $path_step['uids'])) {
                    $in_path = true;
                    if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                        || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                    ) {
                        if (GRN_WORKFLOW_FINISHED_REJECTION != $col_finished
                            && GRN_WORKFLOW_FINISHED_REMAND != $col_finished
                        ) {
                            $view = true;
                            $in_evaluated_path = true;
                        }
                    }
                    break;
                }

                if (GRN_WORKFLOW_STATUS_REJECTION == $petition['status']
                    || GRN_WORKFLOW_STATUS_REMAND == $petition['status']
                ) {
                    if (GRN_WORKFLOW_FINISHED_REJECTION
                        == $path_step['col_finished']
                        || GRN_WORKFLOW_FINISHED_REMAND
                           == $path_step['col_finished']
                    ) {
                        $col_finished = $path_step['col_finished'];
                    }
                }
                $path_step['not_modify'] = false;
            }
        }
    }
}

// Check view/edit Right to Item.
require_once('workflow/change_access_data.csp');
$change_access_data_logic = GRN_Workflow_ChangeAccessData::getInstance();
if ($in_process) {
    if ($handle_mode == 'change_transactor') {
        //経路変更
        if ($petition['user'] == $user_id || $petition['agent_user'] == $user_id
        ) {
            //申請者なら
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    if ($item_data_list[$item_data_id]['attach_file_view']
                        == 1
                    ) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }
            }
        } else {
            $users = $path_steps[$in_process]['uids'];
            $user_step_id = null;
            $access_mode_view_only = false;
            if (($r = array_search($user_id, $users)) === false) {
                //現在の経路にいない
                //経路にいるかどうかの判定
                //申請者の方向に向かって判定
                $access_mode_view_only = true;
                $path_step_ids_tmp = array_keys($path_steps);
                $path_step_ids = [];
                foreach ($path_step_ids_tmp as $path_step_id) {
                    if ($path_step_id == $in_process) {
                        $path_step_ids[] = $path_step_id;
                        break;
                    }
                    $path_step_ids[] = $path_step_id;
                }
                $path_step_ids = array_reverse($path_step_ids);

                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step_temp =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step_temp['col_activate']
                         || $path_step_temp['col_skip']
                    ) {
                        // アクティブではないか省略の経路ステップは外す
                        continue;
                    }
                    $users = $path_step_temp['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
            } else {
                $user_step_id = $in_process;
            }
            if ( ! is_null($user_step_id)) {
                foreach (array_keys($item_data_list) as $item_data_id) {
                    $change_access
                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                        $user_step_id);
                    if ($change_access['col_view'] == 1
                        && $change_access['col_edit'] == 1
                    ) {
                        if ($petition['status']
                            != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                            && $petition['status']
                               != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                        ) {
                            if ($access_mode_view_only == false) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'edit';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            }
                        } else {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'view';
                        }
                    } elseif ($change_access['col_view'] == 1
                              && $change_access['col_edit'] != 1
                    ) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } elseif ($change_access['col_view'] != 1) {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }

                    if (array_key_exists('sub_item_data_list',
                            $item_data_list[$item_data_id])
                        && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                    ) {
                        foreach (
                            array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                            as $sub_item_data_id
                        ) {
                            $change_access
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                $user_step_id);
                            if ($change_access['col_view'] == 1
                                && $change_access['col_edit'] == 1
                            ) {
                                if ($petition['status']
                                    != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                                    && $petition['status']
                                       != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                ) {
                                    if ($access_mode_view_only == false) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'edit';
                                    } else {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'view';
                                    }
                                } else {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'view';
                                }
                            } elseif ($change_access['col_view'] == 1
                                      && $change_access['col_edit'] != 1
                            ) {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'view';
                            } elseif ($change_access['col_view'] != 1) {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                }
            } else {
                //申請者かどうか
                if ($petition['user'] == $user_id
                    || $petition['agent_user'] == $user_id
                ) {
                    //申請者なら
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            if ($item_data_list[$item_data_id]['attach_file_view']
                                == 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                } else {
                    //どこの経路にもいない
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            }
        }
    } else {
        if ($handle_mode == 'confirm' && $in_path == false
            && ($petition['user'] == $user_id
                || $petition['agent_user'] == $user_id)
        ) {
            //確認で経路にいなくて申請者なら
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    if ($item_data_list[$item_data_id]['attach_file_view']
                        == 1
                    ) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }
            }
        } else {
            $users = $path_steps[$in_process]['uids'];
            $user_step_id = null;
            $access_mode_view_only = false;
            if (($r = array_search($user_id, $users)) === false) {
                if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }

                //現在の経路にいない
                //経路にいるかどうかの判定
                //申請者の方向に向かって判定
                $access_mode_view_only = true;
                $path_step_ids_tmp = array_keys($path_steps);
                $path_step_ids = [];
                foreach ($path_step_ids_tmp as $path_step_id) {
                    $path_step_ids[] = $path_step_id;
                }
                $path_step_ids = array_reverse($path_step_ids);

                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step_temp =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step_temp['col_activate']
                         || $path_step_temp['col_skip']
                    ) {
                        // アクティブではないか省略の経路ステップは外す
                        continue;
                    }
                    $users = $path_step_temp['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
            } else {
                $user_step_id = $in_process;
            }
            if ( ! is_null($user_step_id)) {
                foreach (array_keys($item_data_list) as $item_data_id) {
                    $change_access
                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                        $user_step_id);
                    if ($change_access['col_view'] == 1
                        && $change_access['col_edit'] == 1
                    ) {
                        if ($petition['status']
                            != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                            && $petition['status']
                               != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                        ) {
                            if ($access_mode_view_only == false) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'edit';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            }
                        } else {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'view';
                        }
                    } elseif ($change_access['col_view'] == 1
                              && $change_access['col_edit'] != 1
                    ) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } elseif ($change_access['col_view'] != 1) {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }

                    if (array_key_exists('sub_item_data_list',
                            $item_data_list[$item_data_id])
                        && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                    ) {
                        foreach (
                            array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                            as $sub_item_data_id
                        ) {
                            $change_access
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                $user_step_id);
                            if ($change_access['col_view'] == 1
                                && $change_access['col_edit'] == 1
                            ) {
                                if ($petition['status']
                                    != GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL
                                    && $petition['status']
                                       != GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
                                ) {
                                    if ($access_mode_view_only == false) {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'edit';
                                    } else {
                                        $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                            = 'view';
                                    }
                                } else {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'view';
                                }
                            } elseif ($change_access['col_view'] == 1
                                      && $change_access['col_edit'] != 1
                            ) {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'view';
                            } elseif ($change_access['col_view'] != 1) {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                }
            } else {
                //申請者かどうか
                if ($petition['user'] == $user_id
                    || $petition['agent_user'] == $user_id
                ) {
                    //申請者なら
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            if ($item_data_list[$item_data_id]['attach_file_view']
                                == 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                } else {
                    //どこの経路にもいない
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            }
        }
    }
} else {
    $folder_type = '';
    if (array_key_exists('col_folder_type', $folder)) {
        $folder_type = $folder['col_folder_type'];
    }
    if (array_key_exists('f_col_folder_type', $folder)) {
        $folder_type = $folder['f_col_folder_type'];
    }

    //if($folder['col_folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID &&
    if ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
        && $petition['status'] == GRN_WORKFLOW_STATUS_IN_PROCESS_CANCEL
    ) {
        //未処理一覧で、取り消された申請の場合

        $path_step_ids_tmp = array_keys($path_steps);
        $path_step_ids = [];
        foreach ($path_step_ids_tmp as $path_step_id) {
            $path_step =& $path_steps[$path_step_id];
            if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                //回覧は飛ばす
                continue;
            }
            $path_step_ids[] = $path_step_id;
        }
        $user_path_step_id = null;
        // 経路にユーザーが含まれているかどうか
        for ($i = 0; $i < count($path_step_ids); $i++) {
            $path_step =& $path_steps[$path_step_ids[$i]];
            if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                // アクティブではないか省略の経路ステップは外す
                continue;
            }

            $users = $path_step['users'];
            for ($j = 0; $j < count($users); $j++) {
                if ($user_id == $users[$j]['col_user']) {
                    $user_path_step_id = $path_step_ids[$i];
                    break 2;
                }
            }
        }
        if ( ! is_null($user_path_step_id)) {
            require_once('workflow/change_access_data.csp');
            $change_access_data_logic
                = GRN_Workflow_ChangeAccessData::getInstance();
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    $change_access_data
                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                        $user_path_step_id);
                    if ($change_access_data['col_view'] == 1) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }
                if (array_key_exists('sub_item_data_list',
                        $item_data_list[$item_data_id])
                    && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                ) {
                    foreach (
                        array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                        as $sub_item_data_id
                    ) {
                        $change_access
                            = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                            $user_path_step_id);
                        if ($change_access['col_view'] == 1) {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            }
        } else {
            if ($petition['user'] == $user_id
                || $petition['agent_user'] == $user_id
            ) {
                //申請者なら
                foreach (array_keys($item_data_list) as $item_data_id) {
                    if ($item_data_list[$item_data_id]['foreign_key']
                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_DATE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_FILE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                    ) {
                        if ($item_data_list[$item_data_id]['attach_file_view']
                            == 1
                        ) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            }
        }
    } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
              && $petition['status'] == GRN_WORKFLOW_STATUS_REMAND
    ) {
        if ($petition['user'] == $user_id || $petition['agent_user'] == $user_id
        ) {
            //申請者なら
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    if ($item_data_list[$item_data_id]['attach_file_view']
                        == 1
                    ) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }
            }
        } else {
            $path_step_ids_tmp = array_keys($path_steps);
            $path_step_ids = [];
            foreach ($path_step_ids_tmp as $path_step_id) {
                $path_step =& $path_steps[$path_step_id];
                if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                    //回覧は飛ばす
                    continue;
                }
                $path_step_ids[] = $path_step_id;
            }
            $user_path_step_id = null;
            // 経路にユーザーが含まれているかどうか
            for ($i = 0; $i < count($path_step_ids); $i++) {
                $path_step =& $path_steps[$path_step_ids[$i]];
                if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                    // アクティブではないか省略の経路ステップは外す
                    continue;
                }

                $users = $path_step['users'];
                for ($j = 0; $j < count($users); $j++) {
                    if ($user_id == $users[$j]['col_user']) {
                        $user_path_step_id = $path_step_ids[$i];
                        break 2;
                    }
                }
            }
            if ( ! is_null($user_path_step_id)) {
                //代理承認の場合
                if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }

                require_once('workflow/change_access_data.csp');
                $change_access_data_logic
                    = GRN_Workflow_ChangeAccessData::getInstance();
                foreach (array_keys($item_data_list) as $item_data_id) {
                    if ($item_data_list[$item_data_id]['foreign_key']
                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_DATE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_FILE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                    ) {
                        $change_access_data
                            = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                            $user_path_step_id);
                        if ($change_access_data['col_view'] == 1) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                    if (array_key_exists('sub_item_data_list',
                            $item_data_list[$item_data_id])
                        && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                    ) {
                        foreach (
                            array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                            as $sub_item_data_id
                        ) {
                            $change_access
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                $user_path_step_id);
                            if ($change_access['col_view'] == 1) {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                }
            }
        }
    } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
              && $petition['status'] == GRN_WORKFLOW_RESULT_REJECT
    ) {
        if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
            //URLアクセス処理
            //本来アクセスしてはいけない代理申請
            //未処理で却下の場合
            //ただし代理申請者なら、申請者の権限でみてもいい
            if ($petition['user'] == $agent_id
                || $petition['agent_user'] == $agent_id
            ) {
                //申請者の権限で表示する
                foreach (array_keys($item_data_list) as $item_data_id) {
                    if ($item_data_list[$item_data_id]['foreign_key']
                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_DATE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_FILE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                    ) {
                        if ($item_data_list[$item_data_id]['attach_file_view']
                            == 1
                        ) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
                //この場合は、代理承認での表示を解除する
                $user_id = $agent_id;
                $agent_id = '';
                $folder_id = '';
                $handle_mode = 'view_only';
            } else {
                $path_step_ids_tmp = array_keys($path_steps);
                $path_step_ids = [];
                foreach ($path_step_ids_tmp as $path_step_id) {
                    $path_step =& $path_steps[$path_step_id];
                    if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                        //回覧は飛ばす
                        continue;
                    }
                    $path_step_ids[] = $path_step_id;
                }
                $user_path_step_id = null;
                // 経路にユーザーが含まれているかどうか
                for ($i = 0; $i < count($path_step_ids); $i++) {
                    $path_step =& $path_steps[$path_step_ids[$i]];
                    if ( ! $path_step['col_activate']
                         || $path_step['col_skip']
                    ) {
                        // アクティブではないか省略の経路ステップは外す
                        continue;
                    }

                    $users = $path_step['users'];
                    for ($j = 0; $j < count($users); $j++) {
                        if ($user_id == $users[$j]['col_user']) {
                            $user_path_step_id = $path_step_ids[$i];
                            break 2;
                        }
                    }
                }
                if ( ! is_null($user_path_step_id)) {
                    require_once('workflow/change_access_data.csp');
                    $change_access_data_logic
                        = GRN_Workflow_ChangeAccessData::getInstance();
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            $change_access_data
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                                $user_path_step_id);
                            if ($change_access_data['col_view'] == 1) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                        if (array_key_exists('sub_item_data_list',
                                $item_data_list[$item_data_id])
                            && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                        ) {
                            foreach (
                                array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                                as $sub_item_data_id
                            ) {
                                $change_access
                                    = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                    $user_path_step_id);
                                if ($change_access['col_view'] == 1) {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'view';
                                } else {
                                    $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                        = 'disable';
                                }
                            }
                        }
                    }
                }
            }
        } elseif ($petition['user'] == $user_id) {
            //申請者なら
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    if ($item_data_list[$item_data_id]['attach_file_view']
                        == 1
                    ) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }
            }
        } else {
            $path_step_ids_tmp = array_keys($path_steps);
            $path_step_ids = [];
            foreach ($path_step_ids_tmp as $path_step_id) {
                $path_step =& $path_steps[$path_step_id];
                if ($path_step['col_type'] == GRN_WORKFLOW_CIRCULAR) {
                    //回覧は飛ばす
                    continue;
                }
                $path_step_ids[] = $path_step_id;
            }
            $user_path_step_id = null;
            // 経路にユーザーが含まれているかどうか
            for ($i = 0; $i < count($path_step_ids); $i++) {
                $path_step =& $path_steps[$path_step_ids[$i]];
                if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                    // アクティブではないか省略の経路ステップは外す
                    continue;
                }

                $users = $path_step['users'];
                for ($j = 0; $j < count($users); $j++) {
                    if ($user_id == $users[$j]['col_user']) {
                        $user_path_step_id = $path_step_ids[$i];
                        break 2;
                    }
                }
            }
            if ( ! is_null($user_path_step_id)) {
                require_once('workflow/change_access_data.csp');
                $change_access_data_logic
                    = GRN_Workflow_ChangeAccessData::getInstance();
                foreach (array_keys($item_data_list) as $item_data_id) {
                    if ($item_data_list[$item_data_id]['foreign_key']
                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_DATE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_FILE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                    ) {
                        $change_access_data
                            = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                            $user_path_step_id);
                        if ($change_access_data['col_view'] == 1) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                    if (array_key_exists('sub_item_data_list',
                            $item_data_list[$item_data_id])
                        && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                    ) {
                        foreach (
                            array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                            as $sub_item_data_id
                        ) {
                            $change_access
                                = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                                $user_path_step_id);
                            if ($change_access['col_view'] == 1) {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                }
            } else {
                if ($petition['user'] == $user_id
                    || $petition['agent_user'] == $user_id
                ) {
                    //申請者なら
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            if ($item_data_list[$item_data_id]['attach_file_view']
                                == 1
                            ) {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'view';
                            } else {
                                $item_data_list[$item_data_id]['view_mode']
                                    = 'disable';
                            }
                        }
                    }
                } else {
                    foreach (array_keys($item_data_list) as $item_data_id) {
                        if ($item_data_list[$item_data_id]['foreign_key']
                            == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_DATE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_FILE
                            || $item_data_list[$item_data_id]['foreign_key']
                               == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                        ) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            }
        }
    } elseif ($folder_type == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
              && $petition['status'] == GRN_WORKFLOW_STATUS_FINISHED
    ) {
        //未処理で完了通知なら
        //申請者の方向に向かって判定
        $path_step_ids_tmp = array_keys($path_steps);
        $path_step_ids = array_reverse($path_step_ids_tmp);
        $user_path_step_id = null;
        // 経路にユーザーが含まれているかどうか
        for ($i = 0; $i < count($path_step_ids); $i++) {
            $path_step =& $path_steps[$path_step_ids[$i]];
            if ( ! $path_step['col_activate'] || $path_step['col_skip']) {
                // アクティブではないか省略の経路ステップは外す
                continue;
            }
            $users = $path_step['users'];
            for ($j = 0; $j < count($users); $j++) {
                if ($user_id == $users[$j]['col_user']) {
                    $user_path_step_id = $path_step_ids[$i];
                    break 2;
                }
            }
        }
        if ( ! is_null($user_path_step_id)) {
            if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
                //代理承認者
                if ($petition['status'] == GRN_WORKFLOW_STATUS_FINISHED) {
                    //完了している申請にはエラーを出す
                    require_once('workflow/error_code.csp');
                    cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
                }
            }

            // ユーザーが経路にいる
            require_once('workflow/change_access_data.csp');
            $change_access_data_logic
                = GRN_Workflow_ChangeAccessData::getInstance();
            foreach (array_keys($item_data_list) as $item_data_id) {
                if ($item_data_list[$item_data_id]['foreign_key']
                    == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_DATE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_FILE
                    || $item_data_list[$item_data_id]['foreign_key']
                       == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                ) {
                    $change_access_data
                        = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['iid'],
                        $user_path_step_id);
                    if ($change_access_data['col_view'] == 1) {
                        $item_data_list[$item_data_id]['view_mode'] = 'view';
                    } else {
                        $item_data_list[$item_data_id]['view_mode'] = 'disable';
                    }
                }
                if (array_key_exists('sub_item_data_list',
                        $item_data_list[$item_data_id])
                    && is_array($item_data_list[$item_data_id]['sub_item_data_list'])
                ) {
                    foreach (
                        array_keys($item_data_list[$item_data_id]['sub_item_data_list'])
                        as $sub_item_data_id
                    ) {
                        $change_access
                            = $change_access_data_logic->evaluateEx($item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['iid'],
                            $user_path_step_id);
                        if ($change_access['col_view'] == 1) {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['sub_item_data_list'][$sub_item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            }
        } else {
            //ユーザーが経路にいない
            if ($petition['user'] == $user_id
                || $petition['agent_user'] == $user_id
            ) {
                //申請者なら
                foreach (array_keys($item_data_list) as $item_data_id) {
                    if ($item_data_list[$item_data_id]['foreign_key']
                        == GRN_WORKFLOW_CONDITION_ITEM_STRING_SINGLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_STRING_MULTIPLE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_DATE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_FILE
                        || $item_data_list[$item_data_id]['foreign_key']
                           == GRN_WORKFLOW_CONDITION_ITEM_NUMERIC
                    ) {
                        if ($item_data_list[$item_data_id]['attach_file_view']
                            == 1
                        ) {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'view';
                        } else {
                            $item_data_list[$item_data_id]['view_mode']
                                = 'disable';
                        }
                    }
                }
            } else {
                //存在しない
            }
        }
    } else {
        if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
            //代理承認者
            if ($petition['status'] == GRN_WORKFLOW_STATUS_FINISHED) {
                //完了している申請にはエラーを出す
                require_once('workflow/error_code.csp');
                cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
            }
        }
    }
}

//Rename username if username is changed.
foreach (array_keys($path_steps) as $path_key) {
    $path =& $path_steps[$path_key];
    require_once('grn/uum.csp');
    global $G_container_base;
    $grn_uum = $G_container_base->getInstance('uum');
    $columns = ['col_display_name', 'col_foreign_key', 'col_position'];
    $users = $grn_uum->getUsersInfo($path['uids'], $columns);
    foreach (array_keys($path['users']) as $user_key) {
        if (array_key_exists($path['users'][$user_key]['_id'], $users)) {
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_DISPLAY_NAME]
                = $users[$path['users'][$user_key]['_id']]['col_display_name'];
            $path['users'][$user_key][GRN_WORKFLOW_COLUMN_FOREIGN_KEY]
                = $users[$path['users'][$user_key]['_id']]['col_foreign_key'];
        }
    }
    $path['user_count'] = count($path['users']);
}

if (GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL == $petition['status']) {
    $view = false;
}

if ($user_id == @ $petition['user'] || $user_id == @ $petition['agent_user']) {
    if ($agent_id > 0
        && $agent_id != @ $petition['user']
        && $agent_id != @ $petition['agent_user']
        && $handle_mode == 'change_transactor'
    ) {
        // ログインユーザーは代理承認者で、委任者が経路から外された場合
        // do nothing.
        $view = false;
    } else {
        // ログインユーザーは申請者
        $view = true;
    }

    if ( ! $in_process && GRN_WORKFLOW_STATUS_REMAND == $petition['status']) {
        // 申請者本人に差し戻された
        $handle_mode = null;
    }
    $in_path = true;
    $in_evaluated_path = true;
} else {
    if ($agent_id > 0
        && $agent_id != @ $petition['user']
        && $agent_id != @ $petition['agent_user']
        && $handle_mode == 'change_transactor'
    ) {
        // ログインユーザーは代理承認者で、委任者が経路から外された場合
        $view = false;
    }
}

$error = false;
if ( ! $in_evaluated_path) {
    if (@ $petition['reapply']) {
        // 再申請された
        $handle_mode = 'reapply';

        require_once('workflow/folder_logic.csp');
        $logic = GRN_Workflow_Folder_Logic::getInstance();
        $folders = $logic->getList($user_id);

        require_once('workflow/folderrelation_logic.csp');
        $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
        $petition_ids = [$petition_id];
        $folder_relations = $logic->getSpecificList(array_keys($folders),
            $petition_id);
        if ( ! is_array($folder_relations) || 0 == count($folder_relations)) {
            if ($is_public == true) {
                cb_redirect('workflow/view', [
                    'fid' => GRN_WORKFLOW_FOLDER_PUBLIC_ID,
                    'pid' => $petition_id
                ]);
            }
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
    } else {
        if ($in_path
            && GRN_WORKFLOW_STATUS_UNPROCESSING_CANCEL != $petition['status']
        ) {
            // まだ処理が回ってきてない（進行中、差し戻し）
            $error = true;
            $handle_mode = 'confirm';
        } else {
            if ($is_public == true) {
                cb_redirect('workflow/view', [
                    'fid' => GRN_WORKFLOW_FOLDER_PUBLIC_ID,
                    'pid' => $petition_id
                ]);
            }
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }
    }
}

require_once('workflow/config.csp');
$configs = GRN_Workflow_Configs::getInstance();
$config = $configs->getSystemConfig();
$remand = $config->getRemand();

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$change_path_history_total = $logic->getCount($petition_id);

if ('change_transactor' == $handle_mode) {
    $t->assign('change_path_history', $change_path_history);
}

require_once('workflow/folderrelation_logic.csp');
$logic = GRN_Workflow_FolderRelation_Logic::getInstance();
$folder_relation = $logic->getSpecific($folder_id, $petition_id);
if ( ! is_array($folder_relation) || 0 == count($folder_relation)) {
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder = $logic->getByForeignKey($user_id, 'FINISH_FOLDER_FOREIGN_KEY');

    $fids = [];
    $fids[] = $folder['_id'];

    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder = $logic->getByForeignKey($user_id, 'TEMP_FOLDER_FOREIGN_KEY');

    $fids[] = $folder['_id'];

    require_once('workflow/folderrelation_logic.csp');
    $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
    $folder_relations = $logic->getSpecificList($fids, $petition_id);
    if ( ! is_array($folder_relations) || 0 == count($folder_relations)) {
        if ($petition['agent_user'] == '' || $petition['agent_user'] < 1) {
            $handle_mode = 'view_only';
        } else {
            $handle_mode = null;
        }
    }
}

// ベースサービスの通知を確認済みに変更
require_once('workflow/notification.csp');
$logic = GRN_Workflow_Notification::getInstance();
if ($logic->isConfirmed($user_id, $petition_id)) {
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder = $logic->getByForeignKey($user_id,
        'UNPROCESSED_FOLDER_FOREIGN_KEY');

    $fids = [];
    $fids[] = $folder['_id'];

    require_once('workflow/folderrelation_logic.csp');
    $logic = GRN_Workflow_FolderRelation_Logic::getInstance();
    $folder_relations = $logic->getSpecificList($fids, $petition_id);
    if ( ! is_array($folder_relations) || 0 == count($folder_relations)) {
        $handle_mode = 'view_only';
    }
}

$t->assign('in_process', $in_process);
$t->assign('path_steps', $path_steps);
$t->assign('path_step_total', $path_step_total);
$t->assign('is_remand', $remand);
$t->assign('remand_options', $options);
$t->assign('view', $view);
$t->assign('handle_mode', $handle_mode);
$t->assign('error', $error);
$t->assign('change_path_history_total', $change_path_history_total);
//}

if ( ! is_null($agent_id) && strlen($agent_id) > 0) {
    $folder_id = GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID;
}

//Assign Item Data List
$t->assign('item_data_list', $item_data_list);
$t->assign('user_id', $user_id);
$t->assign('agent_id', $agent_id);

$page_title = $controller_util->getPageTitleForHandle($error, $handle_mode,
    $petition);

if ($folder_id == GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID) {
    $page_title .= cb_plain_msg(GRN_WORKFLOW_MODULE_ID,
        'proxy_approval_titile');
}

$t->assign('workflow_title', $page_title);
if (isset($petition['form_name']) && (isset($petition['name']))) {
    $t->assign('page_title',
        $petition['form_name'] . '（' . $petition['name'] . '）');
} else {
    $t->assign('page_title', $page_title);
}
$t->assign('site_position', [
    [
        'page' => 'workflow/index',
        'name' => grn_get_page_display_name('workflow/index'),
        'fid'  => $folder_id,
        'sf'   => 1,
    ],
    [
        'page' => '',
        'name' => $page_title
    ]
]);


$translation_map_form
    = ['is_customization_active' => 'is_customization_active'];
$form_util = GRN_Workflow_Form_Controller_Utility::getInstance();
$form_for_view = $form_util->getView($petition['form'], $translation_map_form,
    null, [
        'condition' => [
            '0' => [
                'column'   => 'col_type',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ]);

$apply_customization
    = CustomizationUtil::applyCustomization($form_for_view['is_customization_active'],
    $t);

if ($apply_customization) {
    if ($view) {
        $customization_item_data_list = [$current_item_data];
        foreach ($item_data_list as $item_data) {
            $customization_item_data_list[] = $item_data;
        }
        if ($agent_id != '') {
            $petition['proxy_approver_id'] = $user_id;
        }
        $customization_petition
            = DataConverterForJsPetitionData::covertDataPetitionInformation(
            $petition,
            $customization_item_data_list,
            $path_steps,
            $petition['priority']);

        $screen_properties = [];
        $event_type = 'detail';
        $do_set_step_code = false;

        $avaibleOperations = cb_at($customization_petition,
            'availableOperations');
        $listOperations = is_array($avaibleOperations)
            ? $avaibleOperations['list'] : [];
        if (array_search(GRN_WORKFLOW_OPERATION_APPROVE, $listOperations)
            !== false
        ) {
            $screen_properties['viewer'] = GRN_WORKFLOW_VIEW_TYPE_APPROVER;
            $event_type = 'approve';
            $do_set_step_code = true;
        } elseif (array_search(GRN_WORKFLOW_OPERATION_ACKNOWLEDGE,
                $listOperations) !== false
                  || array_search(GRN_WORKFLOW_OPERATION_CONFIRM,
                $listOperations) !== false
        ) {
            $screen_properties['viewer']
                = GRN_WORKFLOW_VIEW_TYPE_ACKNOWLEDGEMENT;
            $do_set_step_code = true;
        }

        if ( ! $do_set_step_code
             && ($user_id !== $petition['user']
                 && $user_id !== $petition['agent_user'])
        ) {
            $do_set_step_code = true;
        }

        if ($do_set_step_code) {
            foreach ($path_steps as $path_step_code) {
                $users = $path_step_code['uids'];
                if (false !== array_search($user_id, $users)) {
                    if (GRN_WORKFLOW_CIRCULAR == $path_step_code['col_type']) {
                        $screen_properties['viewer']
                            = GRN_WORKFLOW_VIEW_TYPE_ACKNOWLEDGEMENT;
                    } else {
                        $screen_properties['viewer']
                            = GRN_WORKFLOW_VIEW_TYPE_APPROVER;
                    }
                    $screen_properties['stepCode']
                        = $path_step_code['col_code'];

                }
                if (cb_at($path_step_code, 'in_process')) {
                    break;
                }
            }
        }
        if ($event_type == 'approve') {
            $customization_data
                = CustomizationUtil::getApproveCustomizationData($customization_petition,
                $screen_properties);

            $js_api_event
                = new grn\grn\customization\workflow\RequestApproveShowJsApiEvent(["data" => $customization_data]);
        } else {
            $customization_data
                = CustomizationUtil::getDetailCustomizationData($customization_petition,
                $screen_properties);

            $js_api_event
                = new grn\grn\customization\workflow\RequestDetailShowJsApiEvent(["data" => $customization_data]);
        }

        // Assign customization information
        grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
            new grn\grn\customization\workflow\WorkflowJsApiLoader($petition["form"],
                $petition_id, $folder_id),
            $js_api_event
        );
    }
}



