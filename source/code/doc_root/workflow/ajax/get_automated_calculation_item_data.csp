<?php

use grn\grn\JSONResponse;

global $G_INPUT;
require_once('workflow/controller_util.csp');
require_once('workflow/item_resources.csp');
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
$petition_id = cb_at($G_INPUT, 'pid');
$translation_map_item_data_tmp = [
    'petition'           => 'itemdata_petition',
    'settings'           => 'itemdata_settings',
    'iid'                => 'itemdata_id',
    'foreign_key'        => 'itemdata_foreign_key',
    'number'             => 'itemdata_number',
    'option_string_type' => 'itemdata_option_string_type',
    'option_string'      => 'itemdata_option_string',
    'br'                 => 'itemdata_br',
    'separator'          => 'itemdata_separator'
];

$item_data_list = $item_data_util->getListViewEx($translation_map_item_data_tmp,
    $petition_id);
require_once('workflow/change_access_data.csp');
$change_access_data_logic = GRN_Workflow_ChangeAccessData::getInstance();
$controller_util = new GRN_Workflow_ControllerUtil();
$path_steps = $controller_util->getPathInfo($petition_id);

$numeric_data = [];
$ignore_items = [];
foreach ($item_data_list as $id => $item) {
    if ($item['foreign_key'] == 'grn.workflow.numeric'
        || $item['foreign_key'] == 'grn.workflow.route_search'
    ) {
        if (isset($G_INPUT['item_' . $id])) {
            if (is_numeric($G_INPUT['item_' . $id])) {
                $numeric_data['item_' . $id] = $G_INPUT['item_' . $id];
            } else {
                $ignore_items_by_id
                    = $item_data_util->getRelatedAutoCalculationItemData($petition_id,
                    $id);
                $ignore_items = array_merge($ignore_items, $ignore_items_by_id);
            }
        } else {
            $numeric_data['item_' . $id] = $item['number'];
        }
    }
}
$path_steps_current = current($path_steps);
$path_step_id
    = $controller_util->getInProcessPathStepId($path_steps_current);
$parsed_input_data = [];
if ($path_step_id) {
    foreach ($item_data_list as $item_id => $item_data) {
        $not_display = cb_at($item_data['settings'], 'not_display');
        if ($item_data['foreign_key'] != 'grn.workflow.calc_numeric'
            || $not_display == 1
        ) {
            continue;
        }
        $separator = '';
        if ($item_data["br"] != 1 && $item_data["separator"] != '') {
            $separator = '&nbsp;' . $item_data["separator"] . '&nbsp;&nbsp;';
        }
        $option_string = $item_data["option_string"];
        $option_string_type = $item_data["option_string_type"];
        $option_string_before = $option_string_type
                                == GRN_WORKFLOW_LABEL_BEFORE_ITEM
            ? "$option_string " : '';
        $option_string_after = $option_string_type
                               == GRN_WORKFLOW_LABEL_AFTER_ITEM
            ? " $option_string" : '';
        $cal_item_data = '';

        if (in_array($item_id, $ignore_items)) {
            $cal_item_data = GRN_WORKFLOW_INCORRECT_CALCULATION_DATA;
            $cal_item_data_for_js = GRN_WORKFLOW_INCORRECT_CALCULATION_DATA;
        } else {
            $item_util = grn_workflow_get_item_util($item_data['foreign_key']);
            $cal_item_data = $item_util->parseItemData($numeric_data,
                'item', $item_data);
            $thousandsSep = cb_at($item_data['settings'], 'split_rank')
                ? ',' : '';
            $decimals = cb_at($item_data['settings'],
                'effective_figures')
                ? (int)$item_data['settings']["effective_figures"] : 0;
            $decPoint = '.';
            $minus_type = cb_at($item_data['settings'], 'minus_type',
                0);
            $minusChar = cb_msg(GRN_WORKFLOW_MODULE_ID,
                'minus_type_' . $minus_type);
            $isDecimalZeroPadding = true;
            $originalNumber = $cal_item_data;

            require_once('fw/string_util.csp');
            $cal_item_data_for_js
                = GRN_Workflow_Item_Util_Calc_Numeric::formatValueForJS($originalNumber,
                $item_data['settings']);
            $cal_item_data = cb_number_format($cal_item_data, $decimals,
                $decPoint, $thousandsSep, $minusChar,
                $isDecimalZeroPadding);

            $cal_item_data = is_null($cal_item_data) ? 0
                : $cal_item_data;
            $cal_item_data_for_js = is_null($cal_item_data_for_js) ? 0
                : $cal_item_data_for_js;
        }
        $parsed_input_data['item_' . $item_id]['display_value'] = $separator
                                                                  . $option_string_before
                                                                  . $cal_item_data
                                                                  . $option_string_after;
        $parsed_input_data['item_' . $item_id]['value']
            = $cal_item_data_for_js;

    }
}

$json = JSONResponse::create();
$json->response($parsed_input_data);

