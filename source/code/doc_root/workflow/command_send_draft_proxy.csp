<?php

use grn\grn\JSONResponse;

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;
    $json = JSONResponse::create();

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Get Parameter
    $category_id = @ $G_INPUT['cid'];    //Category ID
    $form_id = @ $G_INPUT['fid'];    //Form ID
    $command = @ $G_INPUT['cmd'];    //Command
    $simple = @ $G_INPUT['simple'];
    $mid = @ $G_INPUT['mid'];

    //Get Session Key
    require_once('workflow/controller_util.csp');
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();

    //Check Command Parameter
    switch ($command) {
        case 'back':
            //Redirect Back Page
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url('workflow/send_form_proxy', [
                        'cid'     => $category_id,
                        'fid'     => $form_id,
                        'simple'  => $simple,
                        'sf'      => 1,
                        'mid'     => $mid,
                        'tmp_key' => $tmp_key
                    ])
                ]);
                cb_safe_exit();
            }
            cb_redirect('workflow/send_form_proxy', [
                'cid'     => $category_id,
                'fid'     => $form_id,
                'simple'  => $simple,
                'sf'      => 1,
                'mid'     => $mid,
                'tmp_key' => $tmp_key
            ]);
            break;
        default:
            break;
    }

    //Login User
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $user =& $uum->getLoginUser();
    if ( ! $user) {
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $util = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $is_proxy_petition = $util->isAvailableSendProxy($user->getOID(), $mid);
    if ( ! $is_proxy_petition) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_CANNOT_PROXY_PETITION);
    }
    unset($util);

    // 未分類でないカテゴリのアクセス権をチェック
    if (GRN_WORKFLOW_CATEGORY_NONPARTY_ID != $category_id) {
        $category_util
            = GRN_Workflow_Category_Controller_Utility::getInstance();
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK,
            false, $mid);
    }

    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_send_form
        =& $session_manager->getSession('workflow/send_form_proxy'
                                        . $tmp_key);

    //Load Send Form Session (for Design)
    $form_for_view = $session_send_form->get('form');
    if ( ! is_array($form_for_view) || 0 == count($form_for_view)) {
        // フォームがない
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_DENY_REQUEST_DATA);
    }
    $item_list_for_view = $session_send_form->get('item_list');
    $properties_for_view = $session_send_form->get('properties');

    //Load Send Form Session (for Data)
    $send_form_data_list = $session_send_form->get('send_form_data_list');

    $mandator_uid = $properties_for_view['mandator'];
    if ($mandator_uid) {
        unset($properties_for_view['mandator']);
        $properties_for_view['petition_user'] = $mandator_uid;
        $properties_for_view['agent_user']
            = $G_workflow_login_user->getOID();
    }

    //Create Petition
    require_once('workflow/petition_logic.csp');
    $petition_logic = GRN_Workflow_Petition_Logic::getInstance();
    $petition_id = $petition_logic->add($form_for_view,
        $properties_for_view);
    $form_for_view['petition'] = $petition_id;

    //監査する
    require_once('workflow/inspection.csp');
    $inspection = GRN_Workflow_Petition_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $message_type = 'petition_draft_add';

        $message_args['pid'] = $petition_id;
        $message_args['fid'] = $form_for_view['fid'];
        $message_args['name'] = $form_for_view['name'];
        $message_args['icon_type'] = $form_for_view['icon_type'];
        $message_args['icon_id'] = $form_for_view['icon_id'];
        $message_args['icon_url'] = $form_for_view['icon_url'];
        $message_args['serial_type'] = $form_for_view['serial_type'];
        $message_args['serial_format'] = $form_for_view['serial_format'];
        $message_args['serial_number'] = $form_for_view['serial_number'];
        $message_args['subject'] = $form_for_view['subject'];

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }
    //Create Item Data
    require_once('workflow/itemdata_logic.csp');
    $itemdata_logic = GRN_Workflow_ItemData_Logic::getInstance();
    $item_data_id_list = $itemdata_logic->addMulti($petition_id,
        $item_list_for_view, false);

    //Save Petition to Tempolary Folder

    //Modify Status to Temporary
    $petition_logic->modifyStatus($petition_id, GRN_WORKFLOW_STATUS_TEMPORARY);

    //Attach Folder List (Draft)
    global $G_workflow_login_user;
    $petition_logic->attachFolderList($petition_id,
        [$G_workflow_login_user->getOID()], 'TEMP_FOLDER_FOREIGN_KEY',
        false);          //Out Folder

    grn_workflow_cleanup_session($t, 'proxy', $tmp_key);

    //Redirect Next Page
    if (defined('AJAX_REQUEST')) {
        $json->response([
            'link' => cb_get_full_url('workflow/index', ['sf' => 1])
        ]);
        cb_safe_exit();
    }
    cb_redirect('workflow/index', ['sf' => 1]);
}


