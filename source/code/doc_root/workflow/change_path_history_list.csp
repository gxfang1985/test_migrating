<?php

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
$page_name = cb_get_pagename();

$folder_id = null;
if (array_key_exists('fid', $G_INPUT)) {
    $folder_id = $G_INPUT['fid'];
}
$petition_id = null;
if (array_key_exists('pid', $G_INPUT)) {
    $petition_id = $G_INPUT['pid'];
}
$simple = false;
if (array_key_exists('simple', $G_INPUT)) {
    $simple = $G_INPUT['simple'];
}
$session_flag = false;
if (array_key_exists('cpsf', $G_INPUT)) {
    $session_flag = $G_INPUT['cpsf'];
}
$category_id = null;
if (array_key_exists('cid', $G_INPUT)) {
    $category_id = $G_INPUT['cid'];
}
$tmp_key = grn_get_temporary_key(null);

/**
 * 制限事項
 * ・フォルダリレーションを持たないユーザーのアクセス
 */

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
$user_id = $login->getOID();
$is_proxy_approval = false;
$no_check = false;
if ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Category_Controller_Utility::getInstance();
    $r = $c->checkPublicByPetitionId($petition_id, false);
    if ($r != true) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
    $no_check = true;
    unset($c);
} else {
    $agent_id = '';
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder_org = $logic->getFolder($folder_id);
    $folder_user_id = $folder_org['col_user'];
    if ($user_id != $folder_user_id) {
        //代理承認の検証
        require_once('workflow/config.csp');
        $configs = GRN_Workflow_Configs::getInstance();
        $config =& $configs->getSystemConfig();
        if ($config->isProxyApproval($user_id, $folder_user_id)) {
            // 代理承認
            $agent_id = $user_id;
            $user_id = $folder_user_id;
            $is_proxy_approval = true;
        } else {
            //公開申請データの閲覧権限のチェック
            require_once('workflow/controller_util.csp');
            $c = GRN_Workflow_Category_Controller_Utility::getInstance();
            $r = $c->checkPublicByPetitionId($petition_id, false);
            if ($r == true) {
                $folder_id = GRN_WORKFLOW_FOLDER_PUBLIC_ID;
                $no_check = true;
            }
        }
    }
    unset($logic);
}

require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil($page_name);
$folder = $controller_util->getSimilarFolder($user_id, $folder_id);
if (is_array($folder) && 0 < count($folder)) {
    $folder_id = $folder['_id'];
}
$t->assign('fid', $folder_id);

require_once('workflow/petition_logic.csp');
$logic = GRN_Workflow_Petition_Logic::getInstance();
$petition = $logic->get($petition_id);
$t->assign('petition', $petition);

require_once('workflow/controller_util.csp');
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form_name'              => 'form_name',
    //Petition Form Name
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'user'                   => 'user',
    'user_name'              => 'user_name',
    'user_foreign_key'       => 'user_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
];
$petition = $petition_util->getView($petition_id,
    $translation_map_petition);
$path_info = $controller_util->getPathInfoForView($user_id,
    $petition_id, $petition, $folder_id, $no_check);
if ($no_check == false && ! $path_info['view']) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_EMPTY_CHANGE_PATH_HISTORY);
}

require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil($page_name);
$path_steps = $controller_util->getPathInfo($petition_id);
$t->assign('path_steps', $path_steps);

require_once('workflow/change_path_history.csp');
$logic = GRN_Workflow_ChangePathHistories::getInstance();
$columns = [
    'col_petition',
    'col_path_step_data',
    'col_comment',
    'col_creator',
    'col_creator_name',
    'col_creator_foreign_key',
    'col_ctime'
];
$change_path_histories = $logic->getListByPetitionId($petition_id, $columns);

if ( ! is_array($change_path_histories) || 0 == count($change_path_histories)) {
    cb_throw_error(E_GRN_WRKF_EMPTY_CHANGE_PATH_HISTORY);
}

$uids = [];
foreach ($change_path_histories as $key => $value) {
    if (0 < strlen($value['col_creator'])) {
        $uids[] = $value['col_creator'];
    }

    $timestamp = new CB_TimeStamp();
    $timestamp->unix_ts = $value['col_ctime'];
    $change_path_histories[$key]['col_ctime'] = clone $timestamp;
}

$columns = [];
/*$columns[] = 'col_display_name';
$columns[] = 'col_foreign_key';
$columns[] = 'col_valid';*/
require_once("grn/controller.csp");
$users = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $login);
//$users = $uum->getUsersInfo($uids, $columns);
$t->assign('creators', $users);

$logic = GRN_Workflow_ChangePathDeletedUsers::getInstance();
$columns = [
    'tab_grn_workflow_changepathdeleteduser' => [
        '_id'                     => '_id',
        'col_change_path_history' => 'col_change_path_history',
        'col_user'                => 'col_user',
        'col_display_name'        => 'col_old_display_name',
        'col_foreign_key'         => 'col_foreign_key'
    ],
    'tab_cb_user'                            => [
        'col_display_name' => 'col_display_name',
        'col_valid'        => 'col_valid'
    ]
];
$deleted_users = $logic->getSortedList(array_keys($change_path_histories),
    $columns);
foreach ($deleted_users as $deleted_user) {
    $change_path_history_id = $deleted_user['col_change_path_history'];
    $change_path_histories[$change_path_history_id]['deleted_users'][]
        = $deleted_user;
}

$logic = GRN_Workflow_ChangePathAddUsers::getInstance();
$columns = [
    'tab_grn_workflow_changepathadduser' => [
        '_id'                     => '_id',
        'col_change_path_history' => 'col_change_path_history',
        'col_user'                => 'col_user',
        'col_display_name'        => 'col_old_display_name',
        'col_foreign_key'         => 'col_foreign_key'
    ],
    'tab_cb_user'                        => [
        'col_display_name' => 'col_display_name',
        'col_valid'        => 'col_valid'
    ]
];
$add_users = $logic->getSortedList(array_keys($change_path_histories),
    $columns);
foreach ($add_users as $add_user) {
    $change_path_history_id = $add_user['col_change_path_history'];
    $change_path_histories[$change_path_history_id]['add_users'][] = $add_user;
}
$t->assign('change_path_histories', $change_path_histories);

if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID == $folder['col_folder_type']) {
    $page_title = $controller_util->getPageTitleForHandle($path_info['error'],
        $path_info['handle_mode'], $petition);
    $t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $is_proxy_approval == true
                ? GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID : $folder_id,
            'cid'  => $category_id
        ],
        [
            'page'    => 'workflow/handle',
            'name'    => $page_title,
            'fid'     => $folder_id,
            'pid'     => $petition_id,
            'simple'  => $simple,
            'cpsf'    => $session_flag,
            'tmp_key' => $tmp_key
        ],
        [
            'page' => '',
            'name' => grn_get_page_display_name('workflow/change_path_history_list')
        ]
    ]);
} else {
    $pages_info = [
        'index'                    => [
            'fid' => $folder_id,
            'cid' => $category_id
        ],
        'view'                     => [
            'fid'    => $folder_id,
            'pid'    => $petition_id,
            'simple' => $simple
        ],
        'change_path_history_list' => null
    ];
    $site_position = $controller_util->makeSitePosition('workflow/',
        $pages_info);
    $t->assign('site_position', $site_position);
}

$t->display("{$page_name}.tpl");


