<?php
global $G_INPUT;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Parameters
require_once('workflow/resources.csp');
$folder_id = @ $G_INPUT['fid'];     //Folder ID
$petition_id = @ $G_INPUT['pid'];     //Petition ID
$item_data_file_id = @ $G_INPUT['ifid'];    //Item Data File ID
$category_id = @ $G_INPUT['cid'];     //Category ID

//Check Similar Folder
//global $G_workflow_login_user;
require_once('workflow/controller_util.csp');
/*
$controller_util = new GRN_Workflow_ControllerUtil('workflow/file_view');
$folder = $controller_util->getSimilarFolder($G_workflow_login_user->getOID(), $folder_id, $petition_id);
if (!$folder)
{
    //Item Data File Not Found
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_NOT_FOUND);
}
*/

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
$user_id = $login->getOID();
$folder_id_org = $folder_id;

require_once('workflow/controller_util.csp');
$controller_util = new GRN_Workflow_ControllerUtil(cb_get_pagename());
$folder = $controller_util->getSimilarFolder($user_id, $folder_id);
if (is_array($folder) && 0 < count($folder)) {
    $folder_id = $folder['_id'];
}

//Get Petition and Item Data File Controller Utility
$petition_util = GRN_Workflow_Petition_Controller_Utility::getInstance();
$item_data_util = GRN_Workflow_ItemData_Controller_Utility::getInstance();
$item_data_file_util
    = GRN_Workflow_ItemDataFile_Controller_Utility::getInstance();

//Create Parameter Translation Map
$translation_map_petition = [
    'pid'                    => '_id',
    //Petition ID
    'petition_number'        => 'petition_number',
    //Petition Number
    'name'                   => 'name',
    //Petition Name
    'form'                   => 'form',
    //Petition Form ID
    'form_name'              => 'form_name',
    //Petition Form Name
    'creator'                => 'creator',
    //Petition Creator
    'creator_name'           => 'creator_name',
    //Petition Creator Name
    'creator_foreign_key'    => 'creator_foreign_key',
    //Petition Creator Foreign Key
    'ctime'                  => 'ctime',
    //Petition Create Time
    'icon_type'              => 'icon_type',
    //Petition Icon Type
    'icon_id'                => 'icon_id',
    //Petition Icon ID
    'icon_url'               => 'icon_url',
    //Petition Icon URL
    'status'                 => 'status',
    'transactor'             => 'transactor',
    'transactor_name'        => 'transactor_name',
    'transactor_foreign_key' => 'transactor_foreign_key',
    'user'                   => 'user',
    'user_name'              => 'user_name',
    'user_foreign_key'       => 'user_foreign_key',
    'agent_user'             => 'agent_user',
    'agent_user_name'        => 'agent_user_name',
    'agent_user_foreign_key' => 'agent_user_foreign_key',
    'comment'                => 'comment',
    'ptime'                  => 'ptime',
    'reapply'                => 'reapply',
];

//Create Parameter Translation Map
$translation_map_item_data = [
    'idid'             => '_id',                  //Item Data ID
    'settings'         => 'settings',             //ITem Data Settings
    'attach_file'      => 'attach_file',
    'attach_file_view' => 'attach_file_view'
];

//Create Parameter Translation Map
$translation_map_item_data_file = [
    'ifid'      => '_id',                  //Item Data File ID
    'item_data' => 'item_data',            //Item Data ID
    'file'      => 'file',                 //GRN_File ID
];

//Get Petition
$no_check = false;
$is_agent_proxy = false;
if ($folder_id == GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Category_Controller_Utility::getInstance();
    $r = $c->checkPublicByPetitionId($petition_id, false);
    if ( ! $r) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
    $no_check = true;
} elseif ($folder_id == GRN_WORKFLOW_FOLDER_TYPE_APPROVAL_PLAN_ID) {
    // 承認予定の判断
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
    if ($r == true) {
        $no_check = true;
    } else {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
} else {
    require_once('workflow/folder_logic.csp');
    $logic = GRN_Workflow_Folder_Logic::getInstance();
    $folder_org = $logic->getFolder($folder_id_org);
    $folder_user_id = $folder_org['col_user'];
    if ($user_id != $folder_user_id) {
        //代理承認の検証
        if ($folder_org['col_folder_type']
            == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID
        ) {
            require_once('workflow/config.csp');
            $configs = GRN_Workflow_Configs::getInstance();
            $config =& $configs->getSystemConfig();
            if ($config->isProxyApproval($user_id, $folder_user_id)) {
                $user_id = $folder_user_id;
                $folder_id = $folder_id_org;
                $no_check = true;
                $is_agent_proxy = true;
            }
        }
    }
}

$petition = $petition_util->getView($petition_id,
    $translation_map_petition);
$controller_util = new GRN_Workflow_ControllerUtil();
$path_info = $controller_util->getPathInfoForView($user_id, $petition_id,
    $petition, $folder_id, $no_check, CB_DATABASE_NO_LOCK);

if ( ! $no_check && ! $path_info['view']
     && $folder_id != GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID
) {
    //Item Data File Not Found
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_NOT_FOUND);
}

// Block accesses by users in 'circular path'.
if ($folder_id == GRN_WORKFLOW_FOLDER_APPROVAL_PLAN_ID) {
    require_once('workflow/controller_util.csp');
    $c = GRN_Workflow_Petition_Controller_Utility::getInstance();
    $r = $c->checkApprovalPlanByPetitionId($user_id, $petition_id);
    if ( ! $r) {
        require_once('workflow/error_code.csp');
        cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
    }
}

//Get Item Data File 
$item_data_file = $item_data_file_util->getView($item_data_file_id,
    $translation_map_item_data_file);
//Get Item Data 
$item_data = $item_data_util->getView($item_data_file['item_data'],
    $translation_map_item_data, $petition_id);

//Check Access Right to the file.
$right_to_view_file = false;

// Get Path Step Data
require_once('workflow/path_data.csp');
$path_step_data_logic = GRN_Workflow_PathStepDatas::getInstance();
$path_step_columns = ['_id', GRN_WORKFLOW_COLUMN_TYPE];
$path_step_list = $path_step_data_logic->getListByPetitionId($petition_id,
    $path_step_columns, 0, -1, CB_DATABASE_NO_LOCK);

if (count($path_step_list)) {
    // Get Path Step Data User
    $path_step_data_user_logic = GRN_Workflow_PathStepDataUsers::getInstance();
    $path_step_user_columns = [
        'tab_grn_workflow_pathstepdatauser' => [
            '_id'                    => 'pid',
            'col_path_step_data'     => 'col_path_step_data',
            'col_user'               => 'col_user',
            'col_display_name'       => 'col_display_name',
            'col_foreign_key'        => 'col_foreign_key',
            'col_agent_user'         => 'col_agent_user',
            'col_agent_display_name' => 'col_agent_display_name',
            'col_agent_foreign_key'  => 'col_agent_foreign_key',
            'col_result'             => 'col_result',
            'col_ptime'              => 'col_ptime',
            'col_comment'            => 'col_comment'
        ],
        'tab_cb_user'                       => [
            '_id'              => '_id',
            'col_display_name' => 'col_current_display_name'
        ]
    ];
    $users
        = $path_step_data_user_logic->getListByPathStepDataIds(array_keys($path_step_list),
        $path_step_user_columns);

    $path_step_user_list = [];
    foreach ($users as $user) {
        if ( ! in_array($user['col_path_step_data'],
            array_keys($path_step_list))
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEM_DENY_ACCESS);
        }

        if ($path_step_list[$user['col_path_step_data']]['col_type'] == 1) {
            $path_step_type = 'circular';
        } else {
            $path_step_type = 'acceptance';
        }

        if ($user['col_agent_user'] > 0) {
            $path_step_user_list[] = [
                'path_step_data_id' => $user['col_path_step_data'],
                'type'              => $path_step_type,
                'user_id'           => $user['col_agent_user']
            ];
        }
        if ($user['col_user'] > 0) {
            $path_step_user_list[] = [
                'path_step_data_id' => $user['col_path_step_data'],
                'type'              => $path_step_type,
                'user_id'           => $user['col_user']
            ];
        }
    }

    // Check in 'circular' path step.
    $in_circular = false;
    for ($i = 0; $i < count($path_step_user_list); $i++) {
        if ($path_step_user_list[$i]['type'] == 'circular'
            && $path_step_user_list[$i]['user_id'] == $user_id
        ) {
            $in_circular = true;
            $right_to_view_file = true;
            break;
        }
    }

    // Check in 'acceptance' path step.
    $in_acceptance = false;
    if ( ! $in_circular) {
        require_once('workflow/change_access_data.csp');
        $change_access_data_logic
            = GRN_Workflow_ChangeAccessData::getInstance();

        for ($i = 0; $i < count($path_step_user_list); $i++) {
            if ($path_step_user_list[$i]['type'] == 'acceptance'
                && $path_step_user_list[$i]['user_id'] == $user_id
            ) {
                $change_access_data = $change_access_data_logic->evaluateEx(
                    $item_data_file['item_data'],
                    $path_step_user_list[$i]['path_step_data_id']
                );
                if ($change_access_data['col_view'] == 1) {
                    $in_acceptance = true;
                    $right_to_view_file = true;
                    break;
                }
            }
        }
    }
}

// Check if login user is the creator of this petition.
$petition = $petition_util->getView($petition_id, $translation_map_petition);
if ($petition['user'] > 0 && $petition['user'] == $user_id
    || $petition['agent_user'] > 0 && $petition['agent_user'] == $user_id
) {
    if ($item_data['attach_file_view'] == '1') {
        $right_to_view_file = true;
    }
}

if ( ! $right_to_view_file && $folder_id != GRN_WORKFLOW_FOLDER_PUBLIC_ID) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WRKF_ITEM_DENY_ACCESS);
}

//Get Item Data File 
$item_data_file = $item_data_file_util->getView($item_data_file_id,
    $translation_map_item_data_file);

//Get Item Data 
$item_data = $item_data_util->getView($item_data_file['item_data'],
    $translation_map_item_data, $petition_id);

//Get GRN_File Object
require_once('workflow/file.csp');
$file_manager = new GRN_Workflow_FileManager_Core();
$file_table =& $file_manager->getFileTable();
$file =& $file_table->getRow($item_data_file['file']);
if ( ! $file) {
    require_once('workflow/error_code.csp');
    cb_throw_error(E_GRN_WORKFLOW_ITEMDATAFILE_NOT_FOUND);
}

//Include Common Controller
require('../grn/_file_view.csp');

/*

//Create File Information
$creator  =& $file_object->get('creator');
$modifier =& $file_object->get('modifier');
$file_for_view = array(
    'id'            => $file_object->getOID(),
    'filename'      => $body_object->get('name'),
    'mime'          => $body_object->get('mime'),
    'size'          => $body_object->get('size'),
    'version'       => $body_object->get('version'),
    'title'         => $file_object->getTitle(),
    'max_version'   => $file_object->getMaxVersion(),
    'memo'          => $file_object->getDescription(),
    'creator_uid'   => $creator ? $creator->getOID() : 0,
    'creator_name'  => $creator ? $creator->get('display_name') : $file_object->get('creator_name'),
    'ctime'         => $file_object->get('ctime'),
    'modifier_uid'  => $modifier ? $modifier->getOID() : 0,
    'modifier_name' => $modifier ? $modifier->get('display_name') : $file_object->get('modifier_name'),
    'mtime'         => $file_object->get('mtime'),
);
*/

//Get Login User Config
global $G_portal_login_user;
require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$config =& $manager->getUserConfig($G_workflow_login_user);

//N-Navigation
require_once('workflow/utility.csp');
$n_navigation_for_view = grn_make_n_navigation(1, null, $config->getListMax());

//Modify Folder Information
$file_for_view =& $t->get_Template_Vars('file');
$logs_for_view =& $t->get_Template_Vars('logs');
$file_for_view['id'] = $folder_id;
$file_for_view['logs'] = $logs_for_view;
$file_for_view['navi'] = $n_navigation_for_view;

//Create Link Parameter
$linkparams = [
    'fid'  => $folder_id,
    'pid'  => $petition_id,
    'ifid' => $item_data_file_id,
];


//Assign Display Infomation
//Assign Link Patameters
$t->assign('linkparams', $linkparams);

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

/*
//site position
if ($folder['col_folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_NEW_ID || $folder['col_folder_type'] == GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID)
{
    $t->assign('site_position', array(
            array('page' => 'workflow/index', 'name' => grn_get_page_display_name('workflow/index'), 'fid' => $folder_id),
            array('page' => 'workflow/handle',  'name' => grn_get_page_display_name('workflow/handle'), 'fid' => $folder_id, 'pid' => $petition_id),
            array('page' => '', 'name' => $page_title)
        )
    );
}
else
{
    $t->assign('site_position', array(
            array('page' => 'workflow/index', 'name' => grn_get_page_display_name('workflow/index'), 'fid' => $folder_id),
            array('page' => 'workflow/view',  'name' => grn_get_page_display_name('workflow/view'), 'fid' => $folder_id, 'pid' => $petition_id),
            array('page' => '', 'name' => $page_title)
        )
    );
}
*/

if (GRN_WORKFLOW_FOLDER_TYPE_UNPROCESSED_ID == $folder['col_folder_type']) {
    $page_title = $controller_util->getPageTitleForHandle($path_info['error'],
        $path_info['handle_mode'], $petition);
    $t->assign('site_position', [
        [
            'page' => 'workflow/index',
            'name' => grn_get_page_display_name('workflow/index'),
            'fid'  => $is_agent_proxy == true
                ? GRN_WORKFLOW_FOLDER_PROXY_APPROVAL_ID : $folder_id
        ],
        [
            'page' => 'workflow/handle',
            'name' => $page_title,
            'fid'  => $folder_id,
            'pid'  => $petition_id,
            /*                                            'simple'=>$simple,
                                                        'cpsf'  =>$session_flag*/
        ],
        [
            'page' => '',
            'name' => grn_get_page_display_name('workflow/file_view')
        ]
    ]);
} else {
    if (is_null($category_id) || strlen($category_id) <= 0) {
        $pages_info = [
            'index'     => ['fid' => $folder_id],
            'view'      => [
                'fid' => $folder_id,
                'pid' => $petition_id
                /*, 'simple'=>$simple*/
            ],
            'file_view' => null
        ];
    } else {
        $pages_info = [
            'index'     => ['fid' => $folder_id, 'cid' => $category_id],
            'view'      => [
                'fid' => $folder_id,
                'pid' => $petition_id
                /*, 'simple'=>$simple*/
            ],
            'file_view' => null
        ];
    }

    $site_position = $controller_util->makeSitePosition('workflow/',
        $pages_info);
    $t->assign('site_position', $site_position);
}

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

