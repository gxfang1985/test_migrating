<?php

global $G_INPUT;

if ( ! isset($user) || is_null($user)) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}
if ( ! isset($t) || is_null($t)) {
    require_once('timecard/error_code.csp');
    cb_throw_error(E_GRN_TIMECARD_INTERNAL);
}

$t->assign('user_id', $user->getOID());
$t->assign('user_name', $user->get('display_name'));

require_once('timecard/logic.csp');
$logic = GRN_Timecard_Logic::getInstance();

if ( ! isset($utility) || is_null($utility)) {
    require_once('timecard/controller.csp');
    $utility = new GRN_Timecard_ControllerUtil();
}
$config = $utility->getConfigValues();

require_once('fw/date.csp');

// 今日
$tsex = new CB_TimeStampEx();
$today = $tsex->getDate();
$date = clone $today;

if (array_key_exists('date', $G_INPUT)) {
    $t->assign("date_str", $G_INPUT["date"]);
    $date->parse($G_INPUT['date']);
    //check if date is valid if not throw error
    if ( ! cb_date_validate_date($date)) {
        cb_throw_error(E_COMMON_INVALID_DATE);
    }
} elseif ( ! $logic->isToday($tsex)) {
    cb_date_move_days($date, -1);
}

$curr_date = clone $date;

if ($date->day < $config['offset_day']) {
    $date->moveMonths(-1);
}

$date->day = intval($config['offset_day']);


$prev_date = clone $date;
$prev_date->moveMonths(-1);
$next_date = clone $date;
$next_date->moveMonths(1);

$view_date = clone $date;
$view_date->moveMonths(intval($config['offset_month']));

$t->assign('date', [
        'year'  => $view_date->year,
        'month' => $view_date->month,
        'prev'  => $prev_date->format(),
        'next'  => $next_date->format(),
        'value' => $curr_date->format(),
    ]
);

// 1ヶ月分のレコード
$records = $logic->listRecords($user, $date);

$timecards = [];

// 現在が日付の切り替え時刻より前なら今日の日付を1日前に移動
if ( ! $logic->isToday($tsex)) {
    $today->moveDays(-1);
}

require_once('grn/calendar.csp');
$cal_service = GRN_CalendarService::getInstance();
$cal_util = GRN_CalendarUtil::getInstance();
$calendars = $cal_service->getDaysInfo($date, $next_date, $user,
    [GRN_CALENDAR_TYPE_PUBLICHOLIDAY, GRN_CALENDAR_TYPE_WORKDAY]);

while ($date->compare($next_date) < 0) {
    $key = $date->format();

    $card = $utility->getRecordView($records[$key]);

    $card['date'] = $key;
    $card['today'] = ($date->compare($today) == 0);
    $card['class'] = $utility->getClassOfDay($date);

    $cal_date = $cal_util->getDateType($date, $calendars, $user);
    if ($cal_date == 's_date_workday') {
        $card['class'] = 's_date';
    } elseif ($cal_date == 's_date_holiday') {
        $card['class'] = 's_date_holiday';
    }

    if ($card['today']) {
        $card['class'] = 's_today';
    }

    $timecards[] = $card;

    $date->moveDays(1);
}

$t->assign('timecards', $timecards);
$t->assign('config', $config);


