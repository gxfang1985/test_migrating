<?php

//--get organization object
function grn_get_org_row($org_id)
{
    if ( ! $org_id) {
        $ret = null;

        return $ret;
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    $row = $uum->getGroup($org_id);
    if ( ! $row) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }

    return $row;
}

//--get organization information array
function &grn_get_org_info($org_row, $get_path = false, $get_full = false)
{
    $org = [];

    if ( ! $org_row) {
        return $org;
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    $org_id = $org_row->getOID();
    $org['oid'] = $org_id;
    $org['name'] = $org_row->get('name');
    if ($get_path) {
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $org['path'] = $uum_util->getGroupPathString($org_id);
    }
    if ($get_full) {
        $org['foreign_key'] = $org_row->get('foreign_key');
        $org['description'] = $org_row->get('description');
    }

    return $org;
}

//--get organization ancestors
function &grn_get_org_ancestors($org_row)
{
    $ancestors = [];

    if ( ! $org_row) {
        return $ancestors;
    }

    $parent = $org_row;
    while ($parent = $parent->getParent()) {
        $item = ['oid' => $parent->getOID(), 'name' => $parent->get('name')];
        array_unshift($ancestors, $item);
    }

    return $ancestors;
}

//--get organization children
function &grn_get_org_children($org_id, $get_child_count = false)
{
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    if ($org_id) {
        // (for non-root)
        $child_rows = $uum->getChildGroups($org_id);
    } else {
        // (for root)
        $child_rows = $uum->getRootGroups();
    }

    $children = [];
    foreach (array_keys($child_rows) as $id) {
        $child = $child_rows[$id];
        $children[$id] = [
            'oid'  => $id,
            'name' => $child->get('name'),
        ];
        if ($get_child_count) {
            $children[$id]['child_count'] = count($uum->getChildGroups($id));
        }
    }

    return $children;
}

//--parent organization
function &grn_get_org_parent($org_row, $get_path = false)
{
    if ( ! $org_row) {
        $ret = null;

        return $ret;
    }

    $parent_row = $org_row->getParent();
    if ( ! $parent_row) {
        $ret = null;

        return $ret;
    }

    $parent_oid = $parent_row->getOID();
    $parent = [
        'oid'  => $parent_oid,
        'name' => $parent_row->get('name'),
    ];
    if ($get_path) {
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $parent['path'] = $uum_util->getGroupPathString($parent_oid);
    }

    return $parent;
}


