<?php

use grn\space\service\KintoneService;
use grn\space\common\exception\GrnException;
use grn\space\common\exception\GrnKintoneException;

global $G_state_set;
$G_state_set->set('html_should_be_closed', false);
$G_state_set->set('copyright_should_be_written', false);

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
/** @var \CB_User $login */
$login = $uum->getLoginUser();

global $G_INPUT;
$spaceID = @$G_INPUT['spid'];

$logic = KintoneService::getInstance();

try {
    $logic->sync($spaceID, $login->getOID());
    echo '{ "success":true }';
} catch (GrnException $e) {
    require_once('fw/error_message.csp');
    $msg = CB_ErrorMessage::getInstance($e->getErrorCode(), null);

    $factory = CB_ErrorMessageFilterFactory::getInstance();
    $filter = $factory->getFilter('html');

    $errorcode = $e->getErrorCode();
    $msgDiag
        = $filter->filter($msg->formatDiagnosisMessage($e->getDiagnosis()));
    $msgCause = $filter->filter($msg->formatCauseMessage($e->getCause()));
    $msgCounter
        = $filter->filter($msg->formatCounterMeasureMessage($e->getCounter()));

    echo "{ 'success':false,'code':'{$errorcode}', 'diag':'{$msgDiag}', 'cause':'{$msgCause}', 'counter':'{$msgCounter}' }";
}
