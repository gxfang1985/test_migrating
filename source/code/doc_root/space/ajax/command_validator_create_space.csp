<?php

use grn\space\logic\SpaceLogic;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\grn\JSONResponse;

global $G_INPUT;
$json = JSONResponse::create();

$hour = cb_at($G_INPUT, 'hour');
$minute = cb_at($G_INPUT, 'minute');
$is_hour_minute_invalid = ($hour === '' && $minute !== '')
                          || ($hour !== ''
                              && $minute === '');
if ($is_hour_minute_invalid) {
    $json->response([
        'success'       => false,
        'error_message' => cb_msg('grn.space',
            'grn.space.invalid_expiration_date')
    ]);
    cb_safe_exit();
}

if ($hour == '') {
    $hour = 23;
}

if ($minute == '') {
    $minute = 59;
}
$limited_datetime = new \CB_DateTime();

$limited_datetime->year = cb_at($G_INPUT, 'year');
$limited_datetime->month = cb_at($G_INPUT, 'month');
$limited_datetime->day = cb_at($G_INPUT, 'day');
$limited_datetime->hour = $hour;
$limited_datetime->minute = $minute;
$limited_datetime->second = 0;

$space_logic = new SpaceLogic();

$is_valid_datetime = $space_logic->isValidExpirationDate($limited_datetime);

if ( ! $is_valid_datetime) {
    $json->response([
        'success'       => false,
        'error_message' => cb_msg('grn.space',
            'grn.space.invalid_expiration_date')
    ]);
    cb_safe_exit();
}

$json->response(['success' => true]);

