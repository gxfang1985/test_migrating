<?php

use grn\grn\JSONResponse;
use grn\space\common\exception\ErrorCode;
use grn\space\common\exception\GrnDataNotFoundException;
use grn\space\common\exception\GrnInvalidArgumentException;
use grn\space\common\exception\GrnInvalidPermissionException;
use grn\space\common\utility\ValidateUtility;
use grn\space\screen\GenericScreenBase;
use grn\space\service\SpaceService;
use grn\space\common\data\bean\Authority;

global $G_INPUT;
global $G_state_set;

$G_state_set->set('html_should_be_closed', false);
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('error_page_type', 'json');

$space_id = cb_at($G_INPUT, 'spid');

$login = cb_get_login_user();
$login_id = cb_get_login_user()->getOID();

require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$user_config = $manager->getUserConfig($login);
$is_english_display_after_name = $user_config->getUserNameFormat() == true;
$is_organization_display_after_name = $user_config->getShowPriorityGroup()
                                      == true;

require_once('fw/i18n.csp');
$i18n = CB_I18N::getInstance();
$language_code = $i18n->getCurrentLanguage();

require_once('fw/i18n/system_config.csp');
$is_system_use_english = CB_I18N_SystemConfig::isNickname() == true;

if ( ! ValidateUtility::isNumber($space_id, ValidateUtility::DISABLE_EMPTY,
    ValidateUtility::EXCEPTION_NOT_THROW)
) {
    throw new GrnInvalidArgumentException(ErrorCode::GRN_SPACE_ID_IS_NOT_FOUND);
}

$spaceService = SpaceService::getInstance();
try {
    $space = $spaceService->getSpace($space_id, $login_id, $language_code);
} catch (GrnDataNotFoundException $e) {
    $e->setErrorCode(ErrorCode::GRN_INVALID_SPACE_ID);
    throw $e;
}

if ($space->isExpired()) {
    throw new GrnDataNotFoundException(ErrorCode::GRN_SPACE_EXPIRED);
}

if ( ! $spaceService->hasSpaceAccessControl(Authority::AUTHORITY_CODE_READ_DETAIL,
    $space_id, $login_id)
) {
    throw new GrnInvalidPermissionException(ErrorCode::GRN_NO_READ_PERMISSION);
}

$spaceMembersCollection = $spaceService->getSpaceUserCollection($space_id,
    $login_id, GenericScreenBase::MAX_NUM_DISPLAY_MEMBER);

$spaceService->addSimpleUserInfo($spaceMembersCollection);

require_once('grn/smarty.csp');
$smarty = new \GRN_Smarty();

$smarty->assign('this_getSpaceUserCollection', $spaceMembersCollection);
$remainingMember = $smarty->fetch('space/application/header_member.tpl');

$json = JSONResponse::create();
$json->response(['remainingMember' => $remainingMember]);
