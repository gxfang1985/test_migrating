<?php

use grn\grn\JSONResponse;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') != 0) {
    cb_safe_exit();
} // for javascript hijacking

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

require_once('grn/org_tree.csp');

$oid = @$G_INPUT['oid'];
$action = @$G_INPUT['action'];
$children = [];
$page_name = @$G_INPUT['page'];

$is_valid_oid = isset($is_valid_oid) ? $is_valid_oid : is_numeric($oid);

$util = GRN_OrgTreeUtil::getInstance();
$tree = $util->getTree($page_name, @$class_name, @$params);
$children = [];
if ($tree && $is_valid_oid) {
    switch ($action) {
        case 'getchild':
            $tree->expandToAndDisplayChild($oid);
            $children = @$tree->_nodes[$oid]['children'];
            if ( ! $children || count($children) == 0) {
                $children = [];
            } else {
                $tree->expand($oid);
            }
            break;
        case 'expand':
            $tree->expand($oid);
            break;
        case 'collapse':
            $tree->collapse($oid);
            break;
    }
    $util->setTree($page_name, $tree);
}

/**
 * This function creates data for json_encode.
 * The json is almost same as a json which is created by grn/org_json_26.tpl.
 * The different point is that grn/org_json_26.tpl creates invalid JSON data.
 *
 * @param array $children
 *
 * @return array
 */
$func_create_json_data = function ($children) use (&$func_create_json_data) {
    $list = [];
    foreach (array_values($children) as $child) {
        $data = [
            'oid'      => (string)$child['oid'],
            'name'     => htmlspecialchars($child['name'], ENT_QUOTES),
            'expanded' => (string)$child['expanded'],
            'count'    => (string)$child['count'],
        ];

        $option_fields = [
            'subscribed',
            'link_url',
            'unread',
            'checkbox',
            'deleted',
            'new_group',
            'update_group'
        ];

        foreach ($option_fields as $option_field) {
            $value = cb_at($child, $option_field);
            if ($value) {
                $data[$option_field] = (string)$value;
            }
        }

        if ($child['count'] > 0 && count($child['children']) > 0) {
            $data['children'] = $func_create_json_data($child['children']);
        } else {
            $data['children'] = [];
        }
        $list[] = $data;
    }

    return $list;
};

$json = JSONResponse::create();
$json->response(
    $func_create_json_data($children), true, JSONResponse::JSON_HEADER,
    JSONResponse::ENCODE_OPTION & ~JSON_FORCE_OBJECT
);
