<?php

use grn\grn\MemberLogic;

cb_require_role('LoginUser');

global $G_INPUT;
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);
$G_state_set->set('error_page_type', 'json');

$accept_params = [
    'cid',
    'gid',
    'skip',
    'include_org',
    'app_id',
    'access_plugin',
    'sp',
    'show_group_role'
];
for ($i = 0; $i < count($accept_params); $i++) {
    $param = $accept_params[$i];
    $$param = isset($G_INPUT[$param]) ? $G_INPUT[$param] : null;
}

$access_plugin = cb_unserialize(base64_decode($access_plugin),
    ['allowed_classes' => false]);
$plugin = null;
$plugin_param = [];
if (is_array($access_plugin) && array_key_exists('name', $access_plugin)
    && array_key_exists('params', $access_plugin)
) {
    $loader = new CB_PluginLoader('grn.common.user.select');
    $plugin = $loader->loadDriver($access_plugin['name']);
    $plugin_param = $access_plugin['params'];
}

$type = $gid{0};
$group_id = substr($gid, 1);
$users_id = [];
$group_name = '';

switch ($type) {
    // Role Users
    case 'r':
        $users_id = $uum->getRoleUsersId($group_id);
        $group_info = $uum->getRoleInfo($group_id);
        $group_name = $group_info['col_foreign_key'];
        break;

    // MyGroup Users
    case 'm':
        $users_id = $uum->getMyGroupUsersId($group_id);
        $group_id = '';
        break;

    // Group Users
    case 'g':
        $users_id = $uum->getGroupUsersId($group_id);
        $group_info = $uum->getGroupInfo($group_id);
        $group_name = $group_info['col_name'];
        break;

    // Frequent Users
    case 'f':
        require_once('grn/uum_util.csp');
        $users_id = $uum->getFrequentUsersId($login->getOID());
        $group_id = '';
        break;

    // No Group
    case '-':
        $users_id = $uum->getNoGroupIdUsers();
        $group_id = '';
        break;

    // Login Users
    case 'l':
        $users_id[] = $login_id;
        break;
}

$include_role = true;
if ($plugin) {
    $users_id = $plugin->evalUsers($users_id, $plugin_param);
    if ($type == 'g' && $include_org == '1') {
        $group_ids = [$group_id => $group_id];
        $group_ids = $plugin->evalGroups($group_ids, $plugin_param);
        if ( ! isset($group_ids[$group_id])) {
            $include_org = false;
        }
    }
    if ($type == 'r') {
        $role_ids = [$group_id => $group_id];
        $role_ids = $plugin->evalRoles($role_ids, $plugin_param);
        if ( ! isset($role_ids[$group_id])) {
            $include_role = false;
        }
    }
}
$users_id = array_values($users_id);
$j = 0;
if ( ! is_null(($sp))) {
    $limit = 100;

    $uid_list = [];

    $j = $sp + $limit;
    if ($j > count($users_id)) {
        $j = count($users_id);
    }

    for ($i = $sp; $i < $j; $i++) {
        $uid_list[] = $users_id[$i];
    }
} else {
    $uid_list = $users_id;
}
$totalUsers = count($users_id);
unset($users_id);

if ( ! is_array($uid_list)) {
    $uid_list = [];
}

$users_info = [];
if ($skip) {
    $users_info['skip'] = [
        'value'       => 0,
        'type'        => 'user',
        'displayName' => cb_msg('grn.grn', 'show_omitted')
    ];
}

if ($type == 'g' && $include_org == '1' && $show_group_role) {
    $users_info['g' . $group_id] = [
        'gid'         => $group_id,
        'type'        => 'group',
        'displayName' => $group_name
    ];
}

if ($type == 'r' && $include_role && $show_group_role) {
    $users_info['r' . $group_id] = [
        'gid'         => $group_id,
        'type'        => 'static_role',
        'displayName' => $group_name
    ];
}

$tmp_users_info = MemberLogic::getInstance()
                             ->getDisplayUsersByUserIds($uid_list, $app_id,
                                 true);
$users_info = $users_info + $tmp_users_info;

$users_info = array_values($users_info);
require_once("grn/JSONResponse.csp");
$json = \grn\grn\JSONResponse::create();
$json->response([
    'list'   => $users_info,
    'offset' => $j,
    'total'  => $totalUsers
]);
