<?php

cb_require_role('LoginUser');

if ( ! isset($ajax_page)) {
    $ajax_page = 'grn/popup_calendar';
}

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

// コピーライトを出力しない
global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

// ログインユーザを取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();

// prefixを取得
$prefix = @ $G_INPUT['prefix'];
$t->assign('prefix', $prefix);

// form_nameを取得
$form_name = @ $G_INPUT['form_name'];
$t->assign('form_name', $form_name);

// on_changeを取得
$on_change = @ $G_INPUT['on_change'];
if ($on_change) {
    // 任意の関数を実行できてしまうようになっているためホワイトリストで弾く
    // ホワイトリストの基準は、修正時点でコード上使用されているもの
    $on_change_white_list = [
        'SelectedLimit()',
        'change_enddate();',
        '__todo_date.change_enddate();', //GRB-16925
        'on_change_date()'
    ];

    $unsafe_function = true;
    foreach ($on_change_white_list as $safe_function) {
        if (strcasecmp($on_change, $safe_function) === 0) {
            $unsafe_function = false;
            break;
        }
    }
    $on_change = ( ! $unsafe_function) ? $on_change : null;
}
$t->assign('on_change', $on_change);

// script_nameを取得
$script_name = @ $G_INPUT['script_name'];
if ($script_name) {
    // 任意の関数を実行できてしまうようになっているため、ホワイトリストで弾く
    // ホワイトリストの基準は、修正時点でコード上使用されているもの
    // SetCalendarDataは現在使用されていないSmartyプラグインのgrn_select_datetimeから渡されるが、念のため
    $script_name_white_list = [
        'grn_workflow_select_date_init_date_select',
        'grn_report_select_date_init_date_select',
        'SetCalendarData'
    ];

    $unsafe_function = true;
    foreach ($script_name_white_list as $safe_function) {
        if (strcasecmp($script_name, $safe_function) === 0) {
            $unsafe_function = false;
            break;
        }
    }
    $script_name = ( ! $unsafe_function) ? $script_name : null;
}
$t->assign('script_name', $script_name);

// script_name2を取得
$script_name2 = @ $G_INPUT['script_name2'];
if ($script_name2) {
    // 任意の関数を実行できてしまうようになっているため、ホワイトリストで弾く
    // ホワイトリストの基準は、修正時点でコード上使用されているもの
    $script_name2_white_list = ['grn_workflow_select_date_display_calendar'];
    $unsafe_function = true;
    foreach ($script_name2_white_list as $safe_function) {
        if (strcasecmp($script_name2, $safe_function) === 0) {
            $unsafe_function = false;
            break;
        }
    }
    $script_name2 = ( ! $unsafe_function) ? $script_name2 : null;
}
$t->assign('script_name2', $script_name2);

// 今日の日付を取得
require_once('fw/date.csp');
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$today = $tsex->getDate();

// 指定された日付を取得
$str_date = @ $G_INPUT['date'];

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

// カレンダー上の開始日と終了日を取得
$start_date = getCalendarStartDate($date);
$end_date = getCalendarEndDate($date);
if ($start_date->year < 1970) {
    $calendar_start_date = new CB_DateEx($date);
    $calendar_start_date->year = 1970;
    $calendar_start_date->month = 1;
    $calendar_start_date->day = 1;
} else {
    $calendar_start_date = $start_date;
}
if ($end_date->year < 1970) {
    $calendar_end_date = new CB_DateEx($date);
    $calendar_end_date->year = 1970;
    $calendar_end_date->month = 1;
    $calendar_end_date->day = 1;
} else {
    $calendar_end_date = $end_date;
}

// カレンダーサービスからカレンダーを取得
require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($calendar_start_date,
    $calendar_end_date, $login);

// 日付配列の生成
require_once('schedule/view_util.csp');
$view_util = GRN_Schedule_View_Util::getInstance();
$week_list = [];
while ($start_date->compare($end_date) <= 0) {
    $week = [];
    for ($i = 0; $i < 7; ++$i) {
        $day_event['date_type'] = getDayType($start_date);
        if ($view_util->isWorkday($start_date, $calendars, $login)) {
            $day_event['date_type'] = 's_date_workday';
        } elseif (isHoliday($start_date, $calendars)) {
            $day_event['date_type'] = 's_date_holiday';
        }
        if ($start_date->month != $date->month) {
            // 仮に設定
            $day_event['date_type'] = 's_date_other_month';
        }
        if ($start_date->compare($today) == 0) {
            $day_event['date_type'] = 's_date_today';
        }
        $day_event['year'] = $start_date->year;
        $day_event['month'] = $start_date->month;
        $day_event['day'] = $start_date->day;

        $week[] = $day_event;
        $start_date->moveDays(1);
    }
    $week_list[] = $week;
}
$t->assign('week_list', $week_list);

// 前月・翌月を取得
$prev_date = new CB_DateEx($date);
$prev_date->moveMonths(-1);
$prev_date->day = 1;
$next_date = new CB_DateEx($date);
$next_date->moveMonths(1);
$next_date->day = 1;

// 表示月を取得
$current_date = new CB_DateEx($date);
$t->assign('current_date', $current_date);

if (1970 <= $prev_date->year && $prev_date->year <= 2037) {
    $t->assign('prev_date', $prev_date->format());
}
if (1970 <= $next_date->year && $next_date->year <= 2037) {
    $t->assign('next_date', $next_date->format());
}

$t->skipWarning();

// Smarty実行
$t->assign('ajax_page', $ajax_page);
$t->display("grn/popup_calendar.tpl");

//-------共通化

/**
 * カレンダーの最初の日付を求める
 *
 * @param  CB_Date $date　求める日付
 *
 * @return CB_DateEx カレンダーの最初の日付
 */
function getCalendarStartDate($date)
{
    $dateex = new CB_DateEx($date);

    $dateex->day = 1;
    $dateex->moveDays((0 - $dateex->getDayOfWeek()));

    return $dateex;
}

/**
 * カレンダーの最終の日付を求める
 *
 * @param  CB_Date $date　求める日付
 *
 * @return CB_DateEx カレンダーの最終の日付
 */
function getCalendarEndDate($date)
{
    $dateex = new CB_DateEx($date);

    $dateex->day = $dateex->getEndOfMonthDay();
    $dateex->moveDays(6 - ($dateex->getDayOfWeek() - 0));

    return $dateex;
}

/**
 * 曜日のタイプを取得する
 *
 * @param  CB_DateEx $date 日付
 *
 * @return string 文字列
 */
function getDayType($date, $country = null)
{
    switch ($date->getDayOfWeek()) {
        case 0: // 日曜
            return 's_date_sunday';
            break;
        case 1: // 月曜
            return 's_date_monday';
            break;
        case 2: // 火曜
            return 's_date_tuesday';
            break;
        case 3: // 水曜
            return 's_date_wednesday';
            break;
        case 4: // 木曜
            return 's_date_thursday';
            break;
        case 5: // 金曜
            return 's_date_friday';
            break;
        case 6: // 土曜日
            return 's_date_saturday';
            break;
    }

    return 's_date';
}

/**
 * 指定された日付が祝日かどうかをチェックする
 *
 * @param CB_Date $date
 * @param array   $calendars
 * retrun boolean
 */
function isHoliday($date, $calendars)
{
    if ( ! is_array($calendars) || count($calendars) == 0) {
        return false;
    }

    if (array_key_exists($date->format(), $calendars)) {
        $calendar = $calendars[$date->format()];
        foreach ($calendar as $calendar_event) {
            if ($calendar_event['type'] == GRN_CALENDAR_TYPE_PUBLICHOLIDAY) {
                return true;
            }
        }
    }

    return false;
}
