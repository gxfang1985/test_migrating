<?php

use grn\grn\JSONResponse;
use grn\grn\MemberLogic;

cb_require_role('LoginUser');

global $G_INPUT;

$uum = cb_lwc_uum();

if ( ! ($login = $uum->getLoginUser())) {
    cb_safe_exit();
}

$cid = cb_at($G_INPUT, 'cid');
$gid = cb_at($G_INPUT, 'gid');
$show_omitted = cb_at($G_INPUT, 'show_omitted') === "true";
$app_id = cb_at($G_INPUT, 'app_id');
$include_org = cb_at($G_INPUT, 'include_org');
$access_plugin = cb_at($G_INPUT, 'access_plugin');
$is_json_required = cb_at($G_INPUT, 'is_json_required') === "true";
$show_group_role = cb_at($G_INPUT, 'show_group_role', 'true') === "true";

if ( ! $show_group_role) {
    $include_org = false;
}

// アクセス権プラグイン
$access_plugin = cb_unserialize(base64_decode($access_plugin),
    ['allowed_classes' => false]);
$plugin = null;
$plugin_param = [];
if (is_array($access_plugin)
    && array_key_exists('name', $access_plugin)
    && array_key_exists('params', $access_plugin)
) {
    $loader = new CB_PluginLoader('grn.common.user.select');
    $plugin = $loader->loadDriver($access_plugin['name']);
    $plugin_param = $access_plugin['params'];
}

$type = $gid{0};
$group_id = substr($gid, 1);
$users_id = [];
$group_name = '';

switch ($type) {
    // MyGroup Users
    case 'm':
        $users_id = $uum->getMyGroupUsersId($group_id);
        break;

    // Group Users
    case 'g':
        $users_id = $uum->getGroupUsersId($group_id);
        $group_info = $uum->getGroupInfo($group_id);
        $group_name = $group_info['col_name'];
        break;

    // Frequent Users
    case 'f':
        require_once('grn/uum_util.csp');
        $users_id = $uum->getFrequentUsersId($login->getOID());
        break;

    // Login Users
    case 'l':
        $users_id[] = $login->getOID();
        break;
}

if ( ! is_array($users_id)) {
    $users_id = [];
}

if ($plugin) {
    $users_id = $plugin->evalUsers($users_id, $plugin_param);
    if ($type == 'g' && $include_org == '1') {
        $group_ids = [$group_id => $group_id];
        $group_ids = $plugin->evalGroups($group_ids, $plugin_param);
        if ( ! isset($group_ids[$group_id])) {
            $include_org = false;
        }
    }
}

$users_info = [];

if ($is_json_required) {
    if ($show_omitted) {
        $users_info[] = MemberLogic::getInstance()->getOmittedData();
    }

    if ($type == 'g' && $include_org == '1') {
        $tmp_users_info = MemberLogic::getInstance()
                                     ->getDisplayGroupByGroupID($group_id,
                                         $app_id);
        $users_info += $tmp_users_info;
    }

    if (count($users_id) > 0) {
        $tmp_users_info = MemberLogic::getInstance()
                                     ->getDisplayUsersByUserIds($users_id, $app_id, false, true, true);
        if ($type == 'g') {
            foreach ($tmp_users_info as $k => $user_info) {
                $tmp_users_info[$k]["id"] = $user_info["id"] . ":" . $group_id;
            }
        }
        $users_info += $tmp_users_info;
    }

    //Do not check the Application user access right if app_id is 'grn.common'
    if ($app_id === 'grn.common') {
        foreach ($users_info as $user_id => $user_info) {
            $users_info[$user_id][MemberLogic::IS_NOT_USING_APP] = false;
        }
    }

    $users_info = array_values($users_info);
    $json = JSONResponse::create();
    $json->response(['users_info' => $users_info,]);
} else {
    if ($show_omitted) {
        $users_info[] = [
            'value' => 0,
            'type'  => 'user',
            'name'  => cb_msg('grn.grn', 'show_omitted')
        ];
    }

    if ($type == 'g' && $include_org == '1') {
        $users_info[] = [
            'value' => "g$group_id",
            'type'  => 'group',
            'name'  => $group_name
        ];
    }


    require_once("grn/controller.csp");
    $tmp_users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
        $login);

    foreach ($users_id as $uid) {
        $value = $uid;
        if ($type == 'g') {
            $value .= ':' . $group_id;
        }
        $users_info[] = [
            'value' => $value,
            'type'  => 'user',
            'name'  => GRN_ControllerUtil::getUserNameText($login->getOID(),
                $uid, $tmp_users_info)
        ];
    }
// Smarty をインスタンス化
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    $t->assign('CID', $cid);
    $t->assign('selected_item_options', $users_info);

    require_once('fw/ui.csp');
    $browser = cb_ui_get_browser();
    $t->assign('os', $browser['os_type']);

// Copyrightを表示しない
    global $G_state_set;
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);

// Ignore Licence Warnning
    $t->skipWarning();

    $t->display(cb_get_pagename() . '.tpl');

}
