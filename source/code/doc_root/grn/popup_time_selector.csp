<?php

cb_require_role('LoginUser');

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

// コピーライトを出力しない
global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

// ログインユーザを取得
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login = &$uum->getLoginUser();

// 日表示画面で表示する時間帯を取得
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
$personallogic->getViewHour($login, $set_hour, $end_hour);

// 配列にしてSmarty側に渡す
// クリックエリア用配列
$click_area = [];
for ($i = $set_hour; $i < $end_hour; $i++) {
    $click_area[] = $i;
}
$t->assign('click_area', $click_area);

// 時間表示用配列
$display_hour = $click_area;
// 終了時間は1時間多く表示
$display_hour[] = $end_hour;
$t->assign('display_hour', $display_hour);

// 表示合計時間からtable幅を計算
// テーブル幅 = (終了時間 - 開始時間 + スペース) * 32px;
$table_width = ($end_hour - $set_hour + 1) * 32;

$t->assign('table_width', $table_width);

// httpかhttpsの判定
$base_url = cb_get_url_prefix();
if (strncasecmp($base_url, 'https', strlen('https')) === 0) {
    header("X-JSON: " . '({"is_https":true})');
} else {
    header("X-JSON: " . '({"is_https":false})');
}

// Ignore Licence Warnning
$t->skipWarning();

// Smarty実行
$t->display(cb_get_pagename() . ".tpl");


