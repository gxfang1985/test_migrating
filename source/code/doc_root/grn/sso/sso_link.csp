<?php

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Parameters
$sso_method_id = $sso_link['sso_id'];

//Get Display SSO Method
require_once('grn/sso.csp');
$sso_service = GRN_SSO_Service::getInstance();
$sso_method =& $sso_service->getSSOMethod($sso_method_id);

//Create Parameter Translation Map
$translation_map = [
    //SSO Method Infomation
    'smid'               => '_smid',                //SSO Method ID
    'said'               => 'application',          //SSO Application ID
    'display_name'       => 'display_name',         //Display Name
    'driver_type'        => 'driver_type',          //Driver Type
    'driver_settings'    => 'driver_settings',      //Driver Name
    'available_personal' => 'available_personal',   //Available Personal
    'available_window'   => 'available_window',     //Available Window
    'ctime'              => 'ctime',                //Create Time
    'creator_uid'        => 'creator',              //Creator ID
    'creator_name'       => 'creator_name',         //Creator Name
    'mtime'              => 'mtime',                //Modify Time
    'modify_uid'         => 'modifier',             //Modifier ID
    'modify_name'        => 'modifier_name',        //Modifier Name
];

//Do Parameter Translation
$sso_method_for_view = [];
foreach ($translation_map as $view_name => $model_name) {
    switch ($model_name) {
        case '_smid':
            $sso_method_for_view[$view_name] = $sso_method->getOID();
            break;
        case 'driver_settings':
            $driver_settings = $sso_method->get($model_name);
            if ($driver_settings) {
                $driver_settings = cb_unserialize($driver_settings,
                    ["allowed_classes" => false]);
            }
            $sso_method_for_view[$view_name] = $driver_settings;
            break;
        case 'creator':
        case 'modifier':
            $user =& $sso_method->get($model_name);
            if ($user) {
                $sso_method_for_view[$view_name] = $user->getOID();
            } else {
                $sso_method_for_view[$view_name] = null;
            }
            break;
        default:
            $sso_method_for_view[$view_name] = $sso_method->get($model_name);
            break;
    }
}

// assign Display Infomation
//Assign SSO Link
$t->assign('sso_link', $sso_link);

//Assign SSO Method
$t->assign('sso_method', $sso_method_for_view);


//-- set page title and site position

// Ignore Licence Warnning
$t->skipWarning();

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("grn/sso/sso_link.tpl");


