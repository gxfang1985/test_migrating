<?php

cb_require_role('LoginUser');

// ログインユーザーを取得する
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login = &$uum->getLoginUser();
if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

$group_type = 'all';
$group_tree = null;
$is_candidate_organization = false;

$b_personal = true;
if (isset($display)
    && ($display == 'set-system'
        || $display == 'set-operation')
) {
    $b_personal = false;
}

require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$org_id = $gid;

if ( ! $gid) {
    if (isset($with_primary_group) && $with_primary_group
        && 0 == strlen($gid)
    ) {
        $group_type = 'primary_organization';
        $group_tree = $uum_util->getGroupSelectionTree(0);
    } else {
        $gid = '0';
        $group_type = 'all';
        $group_tree = $uum_util->getGroupSelectionTree($gid);
    }
} elseif (mb_substr($gid, 0, 1) == 'm') {
    $group = &$uum->getMyGroup(mb_substr($gid, 1));
    if ( ! $group) {
        $gid = '0';
        $group_type = 'all';
    } else {
        $group_type = 'my_group';
        $t->assign('initialize_item',
            ['id' => $gid, 'title' => $group->get('name')]);
    }
    $group_tree = $uum_util->getGroupSelectionTree('0');
} else {
    $group = &$uum->getGroup($gid);
    if ( ! $group) {
        $gid = '0';
        $group_tree = $uum_util->getGroupSelectionTree($gid);
        $group_type = 'all';
    } else {
        $group_tree = $uum_util->getGroupSelectionTree($gid);
        $group_type = 'organization';
    }
}

$organization = [];

if (is_array($group_tree)) {
    $organization['hid'] = @ $group_tree['oid'];
    $organization['title'] = @ $group_tree['title'];
    if ($b_personal) {
        $group_object = &$uum->getGroup(@ $group_tree['oid']);
    }
    if (array_key_exists('ancestors', $group_tree)
        && is_array($group_tree['ancestors'])
    ) {
        $organization['path'] = [];
        foreach ($group_tree['ancestors'] as $group) {
            $group_data = ['hid' => $group['oid'], 'title' => $group['title']];

            if (@ $group['child']) {
                $group_data['num_children'] = 1;
            }

            if ($b_personal) {
                $group_object = &$uum->getGroup($group['oid']);
            }
            $organization['path'][] = $group_data;
        }
    }
    if (array_key_exists('siblings', $group_tree)
        && is_array($group_tree['siblings'])
    ) {
        $organization['organizations'] = [];

        foreach ($group_tree['siblings'] as $group) {
            $group_data = ['hid' => $group['oid'], 'title' => $group['title']];
            if (@ $group['child']) {
                $group_data['num_children'] = 1;
                $group_data['child_count']
                    = count($uum->getChildGroups($group['oid']));
            }
            if ($b_personal) {
                $group_object = &$uum->getGroup($group['oid']);
            }
            $organization['organizations'][] = $group_data;
        }
    }

    if (array_key_exists('children', $group_tree)
        && is_array($group_tree['children'])
    ) {
        $organization['child_organizations'] = [];
        foreach ($group_tree['children'] as $group) {
            $group_data = ['hid' => $group['oid'], 'title' => $group['title']];
            if (@ $group['child']) {
                $group_data['num_children'] = 1;
                $group_data['child_count']
                    = count($uum->getChildGroups($group['oid']));
            }
            if ($b_personal) {
                $group_object = &$uum->getGroup($group['oid']);
            }
            $organization['child_organizations'][] = $group_data;
        }
    }
}

$t->assign('group_type', $group_type);
$t->assign('organization', $organization);
if ($group_type == 'organization') {
    $t->assign('set_organization_id', $gid);
}

$t->assign('is_candidate_organization', $is_candidate_organization);

// 個人設定の場合のみMyグループを取得
//$others_list = array();
if ($b_personal) {
    $my_groups = $uum->listMyGroups($login);
    $my_gorup_list = [];
    if (is_array($my_groups) && count($my_groups)) {
        foreach (array_keys($my_groups) as $id) {
            $my_group = &$my_groups[$id];
            if ( ! $my_group) {
                continue;
            }

            $my_gorup_list['m' . $id]
                = html_entity_decode($my_group->get('name'));
        }
    }
    $t->assign('mygroup_list', $my_gorup_list);
}

//$t->assign( 'others_list', array( 0=>array( 'item'=>$others_list ) ) );


require_once('grn/org_util.csp');
require_once('grn/org_tree.csp');

// Tree view is $page_name required.
if ( ! isset($page_name)) {
    $page_name = cb_get_pagename();
}

if ($b_personal) {
    $page_name .= '/personal';
} else {
    $page_name .= '/system';
}

// 初期表示だったらポートレットに設定された組織の階層までツリーを開く
if (array_key_exists('apply', $G_INPUT) === false) {
    _grn_org_select_rebuild_tree($page_name, $gid);
}

$util = GRN_OrgTreeUtil::getInstance();
$tree =& $util->getTree($page_name);

if ( ! $gid) {
    $tree->initialize();
    $org_id = null;
    if (isset($with_primary_group) && $with_primary_group
        && 0 == strlen($gid)
    ) {
        $group_type = 'primary_organization';
    } else {
        $group_type = 'all';
    }

    $t->assign('group_type', $group_type);
    $t->assign('set_organization_id', 0);
} elseif (mb_substr($gid, 0, 1) == 'm') {
    $tree->initialize();
    $org_id = null;
    $group_type = 'my_group';
    $t->assign('group_type', $group_type);
    $t->assign('set_organization_id', 0);
}

$tree->setSelectedNode($org_id);
$util->setTree($page_name, $tree);
$org = $tree->getRoot();

$t->assign('org_id', $org_id);
$t->assign('page_name', $page_name);
$t->assign('org', $org);

// ユーザー一覧（10件まで）

$user_list = [];
if ($org_id && $org_id > 0) {
    $user_rows = $uum->getGroupUsers($org_id, 0, 11);
    if (is_array($user_rows)) {
        foreach (array_keys($user_rows) as $uid) {
            $user_row =& $user_rows[$uid];
            $user_list[$uid] = $user_row->get('display_name');
        }
    }
}
$user_continue = (count($user_list) > 10);
if ($user_continue) {
    array_pop($user_list);
}
$t->assign('user_continue', $user_continue);
$t->assign('user_list', $user_list);

// rebuild tree.
function _grn_org_select_rebuild_tree(
    $page_name,
    $expand_oid = null,
    $class_name = null
) {
    require_once('schedule/org_tree.csp');
    $util = GRN_OrgTreeUtil::getInstance();
    $tree =& $util->getTree($page_name, $class_name);
    $tree->initialize();
    $tree->rebuild();
    if ( ! is_null($expand_oid)) {
        require_once('grn/nested_set_model.csp');
        $nested_group = GRN_NestedGroup::getInstance();
        $ancestors =& $nested_group->getAncestorsByID($expand_oid, false);
        if ($ancestors !== false) {
            foreach (array_keys($ancestors) as $ancestor) {
                $tree->buildChild($ancestor);
            }
        }
    }
    $util->setTree($page_name, $tree);
}


