<?php

cb_require_role('LoginUser');

global $G_INPUT;

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

// パラメタリスト
// $select_func: 'init':初期化 'browse':再描画  'apply':適用
$select_func = 'init';
// $searchword: 検索文字列
$searchword = '';
// $no_multiple: '0':複数選択可 '1':複数選択不可
$no_multiple = '0';
// $send_cgi_parameter: '0':通常 '1':親ページのcgi引数に渡す（スケジュールで使用）
$send_cgi_parameter = '0';
// $include_org: '0':組織を表示しない '1':組織を表示する
$include_org = '0';
// $system: '0':システム設定として表示しない '1':システム設定として表示する
$system = '0';
// $system_display: '0':システム設定として表示しない '1':システム設定として表示する
$system_display = '0';
// $form_name: 親ページのフォーム名
$form_name = cb_get_pagename();
// $select_name: 親ページのセレクトボックス名
$select_name = 'sUID[]';
// $plugin_name: アクセス権評価用プラグインデータ名
$plugin_data_name = 'access_plugin';
// $plugin_session_name: アクセス権評価用プラグインセッション名
$plugin_session_name = cb_get_pagename();
// $item_data_name: 追加アイテムデータ名
$item_data_name = 'item';
// $item_session_name: 追加アイテムセッション名
$item_session_name = cb_get_pagename();
// $s_oid: '0':ルート '-1':検索結果 '-2':未所属のユーザー '-3':全施設 その他:組織ID
// $s_oid = '0';
// $selected_tab: '0':通常 '1':追加アイテム
$selected_tab = '0';
// $app_id: 呼び出し元アプリケーションID。複数ユーザー選択で選択されたデータを保持するSessionのキーに使用
$app_id = 'grn.common';
// $return_page: 戻り先ページ
$return_page = '';
// $item_group_id: 選択したアイテムグループのID
$item_group_id = '0';
// $multi_apply: '0':単一適用 '1':複数適用
$multi_apply = '0';
// $plid: ポートレットID
$plid = null;
//$org_id: 選択された組織のID
$org_id = null;
$param_names = [
    'select_func',
    'searchword',
    'no_multiple',
    'include_org',
    'system',
    'system_display',
    'form_name',
    'select_name',
    's_oid',
    'plugin_data_name',
    'plugin_session_name',
    'item_data_name',
    'item_session_name',
    'selected_tab',
    'send_cgi_parameter',
    'app_id',
    'return_page',
    'multi_apply',
    'plid',
    'item_group_id',
    'org_id'
];
foreach ($param_names as $name) {
    if (array_key_exists($name, $G_INPUT)) {
        $$name = $G_INPUT[$name];
    }
}

if ( ! isset($s_oid)) {
    $s_oid = null;
}

if ( ! is_numeric($s_oid)) {
    $s_oid = null;
}

if ( ! is_numeric($no_multiple)) {
    $no_multiple = '0';
}
if ( ! is_numeric($send_cgi_parameter)) {
    $send_cgi_parameter = '0';
}
if ( ! is_numeric($include_org)) {
    $include_org = '0';
}
if ( ! is_numeric($system)) {
    $system = '0';
}
if ( ! is_numeric($system_display)) {
    $system_display = '0';
}
if ( ! is_numeric($item_group_id)) {
    $item_group_id = '0';
}
if ( ! is_numeric($multi_apply)) {
    $multi_apply = '0';
}
if ( ! is_numeric($plid)) {
    $plid = null;
}
// uum
global $G_container_base;
/** @var GRN_Uum $uum */
$uum =& $G_container_base->getInstance('uum');

require_once('grn/uum_util_search.csp');
$uum_util = GRN_UumUtil_Search::getInstance();

require_once('grn/controller.csp');

// セッション取得
require_once('fw/session_manager.csp');
$sm = CB_SessionManager::getInstance();
if ($select_func === 'init') {
    $sm->destroy(cb_get_pagename());
}
$session =& $sm->getSession(cb_get_pagename());
$selected = $session->get('selected');
if ( ! is_array($selected)) {
    $selected = [];
}
$candidate = $session->get('candidate');
if ( ! is_array($candidate)) {
    $candidate = [];
}

// org tree view
require_once('grn/org_tree.csp');

if ($selected_tab) {
    require_once('schedule/system_logic.csp');
    $system_logic = GRN_Schedule_SystemLogic::getInstance();
    $t->assign('allow_all_facility', $system_logic->getAllowAllFacilities());

    $page_name = cb_get_pagename() . '_facility';
    $util = GRN_OrgTreeUtil::getInstance();
    $tree =& $util->getTree($page_name, 'GRN_FacilityAccessTree');
    if (is_null($s_oid)) {
        $s_oid = $tree->getSelectedNode();
    }
    if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
        $tree->initialize();
        $s_oid = null;
    }
    $tree->setSelectedNode($s_oid);
    $util->setTree($page_name, $tree);
    $tree_org = $tree->getRoot();
    $t->assign('org', $tree_org);
    if ($s_oid == -1) {
        $t->assign('org_id', $org_id);
    } else {
        $t->assign('org_id', $s_oid);
    }
    $t->assign('page_name', $page_name);
} else {
    $page_name = cb_get_pagename() . '_org';

    $util = GRN_OrgTreeUtil::getInstance();
    $tree =& $util->getTree($page_name);

    if (is_null($s_oid)) {
        $s_oid = $tree->getSelectedNode();
    }

    if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
        $tree->initialize();
        $s_oid = null;
    }
    $tree->setSelectedNode($s_oid);
    $util->setTree($page_name, $tree);
    $org = $tree->getRoot();

    if ($s_oid != -1) {
        $t->assign('org_id', $s_oid);
    } else {
        $t->assign('org_id', $org_id);
    }

    $t->assign('page_name', $page_name);
    $t->assign('org', $org);
}
// end tree view
$login = $uum->getLoginUser();
if ($select_func === 'apply') {
    $login = $uum->getLoginUser();
    if ($no_multiple
        && ( ! array_key_exists('s_id', $G_INPUT)
             ||
             ! is_array($G_INPUT['s_id'])
             ||
             ! array_key_exists(0, $G_INPUT['s_id']))
    ) {
        $select_func === 'browse';
    } elseif ($no_multiple) {
        $id = $G_INPUT['s_id'][0];
        if (preg_match('#^([0-9]+):g([0-9]+)$#', $id, $regs)) {
            $uid = $regs[1];
            $oid = $regs[2];
            $user = $uum->getUserInfo($uid);
            $org = $uum->getGroupInfo($oid);
            if ($user) {
                $result = [
                    'value' => $uid,
                    'type'  => 'user',
                    'name'  => $user['col_display_name']
                ];
                $t->assign('item', $result);
                if ( ! $system && $login) {
                    $uum_util->selectUsers($login, [$uid]);
                    if ($org) {
                        $uum_util->selectGroups($login, [$oid]);
                    }
                }
            }
        } elseif (preg_match('#^([0-9]+)$#', $id, $regs)) {
            $uid = $regs[1];
            $user = $uum->getUserInfo($uid);
            if ($user) {
                $result = [
                    'value' => $uid,
                    'type'  => 'user',
                    'name'  => $user['col_display_name']
                ];
                $t->assign('item', $result);
                if ( ! $system && $login) {
                    $uum_util->selectUsers($login, [$uid]);
                }
            }
        } elseif (preg_match('#^g([0-9]+)$#', $id, $regs)) {
            $oid = $regs[1];
            $org = $uum->getGroupInfo($oid);
            if ($org) {
                $result = [
                    'value' => $id,
                    'type'  => 'group',
                    'name'  => $org['col_name']
                ];
                $t->assign('item', $result);
                if ( ! $system && $login) {
                    $uum_util->selectGroups($login, [$oid]);
                }
            }
        } elseif ($selected_tab == 1 && preg_match('#^i(.*)$#', $id, $regs)) {
            $item_id = $regs[1];
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            require_once('schedule/access_logic.csp');
            $acc_logic = GRN_Schedule_Access_Logic::getInstance();
            $facility = $facility_logic->getFacility($item_id);
            if ($facility === false) {
                cb_throw_error(); //TODO
            }


            // TODO
            $result = [
                'value' => $id,
                'type'  => 'item',
                'name'  => $facility->get('name')
            ];
            $t->assign('item', $result);
        }
    } else {
        $apply_result = [];
        $chk_users = [];
        $chk_groups = [];
        foreach ($selected as $item) {
            if ($item['uid']) {
                $chk_users[] = $item['uid'];
                $result = [
                    'value' => $item['uid'],
                    'type'  => 'user',
                    'name'  => $item['name']
                ];
                if ($item['oid']) {
                    $chk_groups[] = $item['oid'];
                }
                if (array_key_exists('group_name', $item)) {
                    $result['group_name'] = $item['group_name'];
                }
                $apply_result[] = $result;
            } elseif ($item['oid']) {
                $chk_groups[] = $item['oid'];
                $apply_result[] = [
                    'value' => $item['id'],
                    'type'  => 'group',
                    'name'  => $item['name']
                ];
            } else {
                $apply_result[] = [
                    'value' => $item['id'],
                    'type'  => 'item',
                    'name'  => $item['name']
                ];
            }
        }

        if (count($chk_users) > 0 && ! $system && $login) {
            $uum_util->selectUsers($login, $chk_users);
        }
        if (count($chk_groups) > 0 && ! $system && $login) {
            $uum_util->selectGroups($login, $chk_groups);
        }

        $t->assign('apply_result', $apply_result);
        $t->assign('apply_result_count', count($apply_result));
    }
}
if ($select_func === 'init' || $select_func === 'browse') {
    $candidate = [];

    if ($selected_tab) // 施設の場合
    {
        require_once('schedule/facility_system_logic.csp');
        $fsl = GRN_Facility_SystemLogic::getInstance();
        require_once('schedule/access_logic.csp');
        $acc = GRN_Schedule_Access_Logic::getInstance();

        if ($s_oid > 0 || $s_oid == -2) {
            $tmp_s_oid = $s_oid;
            if ($s_oid
                == -2
            ) // $s_oid == -2 は未所属の施設。getGroupFacilities の仕様に合わせるため -1 にする
            {
                $tmp_s_oid = -1;
            }
            $facilities = $fsl->getGroupFacilities($tmp_s_oid);
            $dynamic_roles = $uum->listGrantedRoles();
            $evaluated_facilities
                = $acc->evaluateAccessesById($uum->getLoginUser(),
                $facilities, ['read'], $dynamic_roles, 'facility');

            if (count($evaluated_facilities) != 0) {
                foreach ($evaluated_facilities as $key => $facility) {
                    $candidate[] = [
                        'id'   => 'i' . $facility->getOID(),
                        'type' => 'item',
                        'name' => $facility->get('name')
                    ];
                }
            }
            if ($s_oid > 0) {
                $fgroup = $fsl->getFacilityGroup($s_oid);
                $t->assign('facility_group_name', $fgroup->get('name'));
            }
        } elseif ($s_oid == -3) // 全施設
        {

            $facilities = $fsl->getOrderedFacilityPartInfoList();
            $dynamic_roles = $uum->listGrantedRoles();
            $evaluated_facilities
                = $acc->evaluateAccessesById($uum->getLoginUser(),
                $facilities, ['read'], $dynamic_roles, 'facility');
            if (count($evaluated_facilities) != 0) {
                foreach ($evaluated_facilities as $key => $facility) {
                    $candidate[] = [
                        'id'   => 'i' . $facility['_id'],
                        'type' => 'item',
                        'name' => $facility['col_name']
                    ];
                }
            }
        } elseif ($s_oid == -1) {
            // 検索
            if ($org_id == '' || $org_id == -3) // トップまた（全施設）を選択している状態での検索
            {
                $facilities = $fsl->searchFacilitiesInfo($searchword);
            } elseif ($org_id > 0) // 特定の施設グループを選択している状態での検索
            {
                $facilities
                    = $fsl->searchFacilitiesInfoByFacilitygroupId($searchword,
                    $org_id);
            } else //未所属の施設グループを選択している状態での検索
            {
                $facilities
                    = $fsl->searchFacilitiesInfoByIsolatedFacilitygroup($searchword);
            }

            $dynamic_roles = $uum->listGrantedRoles();
            $evaluated_facilities
                = $acc->evaluateAccessesById($uum->getLoginUser(),
                $facilities, ['read'], $dynamic_roles, 'facility');
            if (count($evaluated_facilities) != 0) {
                foreach ($evaluated_facilities as $key => $facility) {
                    $candidate[] = [
                        'id'   => 'i' . $key,
                        'type' => 'item',
                        'name' => $facility['col_name']
                    ];
                }
            }

            if ($org_id > 0) {
                $fgroup = $fsl->getFacilityGroup($org_id);
                $t->assign('facility_group_name', $fgroup->get('name'));
            }

        }
    } else {
        // access_plugin
        $plugin = null;
        $plugin_param = [];

        $plugin_session =& $sm->getSession($plugin_session_name);
        if ($plugin_session) {
            $plugin_data = $plugin_session->get($plugin_data_name);
            if (is_array($plugin_data)
                && array_key_exists('name', $plugin_data)
            ) {
                $loader = new CB_PluginLoader('grn.common.user.select');
                $plugin =& $loader->loadDriver($plugin_data['name']);
            }
            if (is_array($plugin_data)
                && array_key_exists('params', $plugin_data)
            ) {
                $plugin_param = $plugin_data['params'];
            }
        }

        $selected_organization = null;

        // 選択ツリー
        if ($s_oid > 0) {
            $selected_organization = $uum->getGroupInfo($s_oid);
        }

        // 選択候補
        if ($selected_organization) {
            $users = [];
            $disabled = true;
            if ($plugin) {
                // 所属ユーザーの中に許可されている人がいたら表示
                $users_id = $uum->getGroupUsersId($s_oid);
                $users_id = $plugin->evalUsers($users_id, $plugin_param);
                //if ( count( $evaluated ) > 0 )
                if (count($users) > 0) {
                    // 組織の予定を表示する場合は組織自体もチェック
                    if ($include_org) {
                        $evaluated
                            = $plugin->evalGroups([$s_oid => $selected_organization],
                            $plugin_param);
                        if (count($evaluated) > 0) {
                            $disabled = false;
                        }
                    }
                } else {
                    // そもそも所属ユーザーが0の場合があるので組織も評価
                    if ($include_org) {
                        $evaluated
                            = $plugin->evalGroups([$s_oid => $selected_organization],
                            $plugin_param);
                        if (count($evaluated) > 0) {
                            $disabled = false;
                        }
                    }
                }
            } else {
                $users_id = $uum->getGroupUsersId($s_oid);
                $disabled = false;
            }
            $org_name = $selected_organization['col_name'];
            if ($include_org && ! $disabled) {
                $item_name = $org_name;
                $candidate[] = [
                    'id'   => 'g' . $s_oid,
                    'type' => 'group',
                    'name' => $item_name
                ];
            }

            $users_info
                = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
                $login);
            foreach ($users_id as $uid) {
                $candidate[] = [
                    'id'         => $uid . ':g' . $s_oid,
                    'type'       => 'user',
                    'name'       => \GRN_ControllerUtil::getUserNameText($login->getOID(),
                        $uid,
                        $users_info),
                    'group_name' => $org_name
                ];
            }
        } elseif ($s_oid == -1) {
            require_once('grn/org_util.csp');
            require_once('grn/org_util_search.csp');
            $tmp_org_id = ($org_id == -2) ? '-1'
                : (($org_id != 0) ? $org_id : '');
            $condition = grn_get_user_info_search_condition($tmp_org_id,
                $searchword, $system);
            $users_id = grn_search_user_ids($tmp_org_id, $condition);
            if ($plugin) {
                $users_id = $plugin->evalUsers($users_id, $plugin_param);
            }
            $users_info
                = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
                $login);
            $primary_groups = $uum->getManyUserPrimaryGroupInfoList($users_id);
            foreach ($users_id as $uid) {
                $info = [
                    'id'   => $uid,
                    'type' => 'user',
                    'name' => \GRN_ControllerUtil::getUserNameText($login->getOID(),
                        $uid,
                        $users_info)
                ];
                $group = cb_at($primary_groups, $uid, false);
                if ($group !== false) {
                    $group_id = $group['_id'];
                    $group_name = $group['col_name'];
                    $eval = [$group_id => $group];

                    if ($plugin) {
                        $eval = $plugin->evalGroups($eval, $plugin_param);
                    }

                    if (count($eval) > 0) {
                        $info['id'] .= ':g' . $group_id;
                        $info['group_name'] = $group_name;
                    }
                }
                $candidate[] = $info;
            }
        } elseif ($s_oid == -2) {
            $users_id = $uum->getNoGroupIdUsers();
            if ($plugin) {
                $users_id = $plugin->evalUsers($users_id, $plugin_param);
            }

            $users_info
                = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
                $login);
            foreach ($users_id as $uid) {
                $candidate[] = [
                    'id'   => $uid,
                    'type' => 'user',
                    'name' => \GRN_ControllerUtil::getUserNameText($login->getOID(),
                        $uid,
                        $users_info)
                ];
            }
        }
    }
}

//app_name
require_once('grn/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
$app_name = $app_locator->getName('schedule');
$t->assign('app_name', $app_name);

// Smartyにページタイトルを割り当てる
if ($form_name == 'schedule/personal_day'
    || $form_name == 'schedule/personal_week'
    || $form_name == 'schedule/personal_month'
) {
    // 日・週・月表示から来たらユーザー/施設選択
    $page_title
        = grn_get_page_display_name('schedule/popup_user_facility_select');
} else {
    $page_title = grn_get_page_display_name('common/popup_user_select');
}
$t->assign('page_title', $page_title);

$session->set('selected', $selected);
$session->set('candidate', $candidate);
$t->assign('selected', $selected);
$t->assign('candidate', $candidate);

$url_param_names = [
    'searchword',
    'no_multiple',
    'form_name',
    'include_org',
    'system',
    'system_display',
    'select_name',
    'plugin_data_name',
    'plugin_session_name',
    'item_data_name',
    'item_session_name',
    'send_cgi_parameter',
    'app_id',
    'return_page',
    'multi_apply',
    'plid',
    'item_group_id'
];
$url_params = [];
foreach ($url_param_names as $url_param_name) {
    $url_params[$url_param_name] = $$url_param_name;
}
unset($url_params['item_group_id']);

$t->assign('url_params', $url_params);
$t->assign('select_func', $select_func);
$t->assign('selected_tab', $selected_tab);
$t->assign('s_oid', $s_oid);

$t->assign('facility_tab', true);

$t->display(cb_get_pagename() . '.tpl');

