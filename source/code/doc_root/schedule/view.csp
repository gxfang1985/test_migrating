<?php

use grn\grn\access\service\AppAccess;
use grn\grn\customization\CustomizationJsCssLoader;
use grn\grn\customization\schedule\DetailShowJsApiEvent;
use grn\grn\customization\schedule\ScheduleJsApiLoader;
use grn\schedule\api\EventBuilder;
use grn\schedule\api\model\Event;
use grn\schedule\api\RenderMemberProvider;
use grn\schedule\EventListView;
use grn\schedule\EventMemberParamUtil;
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\FacilityApprovalViewUtil;
use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\schedule\ScheduleMemberLogic;

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

//------------------

$user_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid']
    : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid']
    : null;
$event_id = array_key_exists('event', $G_INPUT)
    ? $G_INPUT['event'] : null;
$str_date = array_key_exists('bdate', $G_INPUT)
    ? $G_INPUT['bdate'] : null;
$str_start_day = array_key_exists('start_day', $G_INPUT)
    ? $G_INPUT['start_day'] : null;
$str_end_day = array_key_exists('end_day', $G_INPUT)
    ? $G_INPUT['end_day'] : null;
$notify_id = array_key_exists('nid', $G_INPUT) ? $G_INPUT['nid']
    : null;
$notify_hid = array_key_exists('nhid', $G_INPUT) ? $G_INPUT['nhid']
    : null;
$isNetMeetingStartError = array_key_exists('isNetMeetingStartError', $G_INPUT)
    ? $G_INPUT['isNetMeetingStartError'] : null;
$t->assign("isNetMeetingStartError", $isNetMeetingStartError);
// dummy
$display_users = array_key_exists('du', $G_INPUT) ? $G_INPUT['du'] : null;
$t->assign('display_users', $display_users);
//

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// イベントIDがない場合
if ( ! $event_id) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
}

global $G_container_base;
/** @var GRN_Uum $uum */
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();

// $date はユーザーのタイムゾーンから見た日付
$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $tsex = new CB_TimeStampEx();
    $date = $tsex->getDate();
}

// イベントのみを取得
$event2 = $app->getEvent($login, $event_id, null, CB_DATABASE_NO_LOCK, false,
    GRN_SCHEDULE_GET_MEMBER_ID);

require_once('schedule/report_util.csp');
require_once('report/resources.csp');
if (AppAccess::isAppAvailable(GRN_REPORT_APPLICATION_ID)) {
    $t->assign('isEnableReport', true);

    //関連する報告書を取得
    require_once('report/controller_util.csp');
    $report_util = GRN_Report_Report_Schedule_Controller_Utility::getInstance();
    $report_list = $report_util->getListView($event_id, $login);

    $str_date_related_report = $str_date;
    if (empty($str_date) && ! is_a($event2, 'GRN_Schedule_RepeatEvent')) {
        $date_related_report = new CB_Date();
        if (is_a($event2, 'GRN_Schedule_NormalEvent')) {
            $date_related_report->year = $event2->setdatetime->year;
            $date_related_report->month = $event2->setdatetime->month;
            $date_related_report->day = $event2->setdatetime->day;
        } elseif (is_a($event2, 'GRN_Schedule_BannerEvent')) {
            $date_related_report = $event2->setdate;
        }
        $str_date_related_report = $date_related_report->format();
    }
    foreach ($report_list as $report_id => $report) {
        if ($report['creator'] == $login_id) {
            //報告書削除情報
            //Report Delete Information
            $delete_info = [
                'title'      => grn_get_page_display_name('report/delete_relation'),
                'page'       => 'report/schedule/delete_relation.tpl',
                'no_confirm' => false,
                'data'       => [
                    'rid'    => $report_id,
                    'eid'    => $event_id,
                    'date'   => $str_date_related_report,
                    'report' => $report
                ],
                'handler'    => 'lnk_report_delete_' . $report_id,
            ];

            $report_list[$report_id]['delete_info'] = $delete_info;
            $report_list[$report_id]['isDeletable'] = true;
        }
    }

    //削除されたユーザーがいないかチェック
    $creators = [];
    foreach ($report_list as $rid => $report) {
        $creators[$report['creator']] = $report['creator'];
    }

    $usersInfo = $uum->getUsersInfo($creators);

    //削除されたユーザーのID
    $deleted_user = array_diff(array_keys($creators), array_keys($usersInfo));

    //削除されたユーザーのIDをnullに置き換える
    foreach ($report_list as $rid => $report) {
        foreach ($deleted_user as $user_id) {
            if ($report['creator'] == $user_id) {
                $report_list[$rid]['creator'] = null;
            }
        }
    }

    $t->assign('report_list', $report_list);
    $t->assign('report_count', count($report_list));

    //既に報告書を書いているかどうか
    require_once('report/report_schedule_logic.csp');
    $report_schedule_logic = GRN_Report_Report_Schedule_Logic::getInstance();
    $isWrited = $report_schedule_logic->isWrited($event_id,
        $login->getOID());

    if ( ! $isWrited && isset($event2->users[$login->getOID()])) {
        $t->assign('isReportWritable', true);
    }

    //カテゴリツリーのための処理
    require_once('report/resources.csp');
    $tree_selected_oid = GRN_REPORT_CATEGORY_ROOT_ID;
    $force_tree_initialize = true;
    include('../report/_category_tree.csp');
}

// イベントの日付をチェック
if (is_a($event2, 'GRN_Schedule_NormalEvent')) {
    if (($event2->getEventType() & GRN_SCHEDULE_EVENT_TYPE_START)
        == GRN_SCHEDULE_EVENT_TYPE_START
    ) {
        // 日付が違う場合は、元の日付に戻す
        if ($app->compareDate($event2->setdatetime, $date) !== 0) {
            $date->year = $event2->setdatetime->year;
            $date->month = $event2->setdatetime->month;
            $date->day = $event2->setdatetime->day;
        }
    } else {
        if (($app->compareDate($date, $event2->setdatetime) < 0)
            || ($app->compareDate($date, $event2->enddatetime) > 0)
        ) {
            $date->year = $event2->setdatetime->year;
            $date->month = $event2->setdatetime->month;
            $date->day = $event2->setdatetime->day;
        }
    }
} elseif (is_a($event2, 'GRN_Schedule_BannerEvent')) {
    // 日付が違う場合は、元の日付に戻す
    require_once('schedule/banner_event_logic.csp');
    $banner_logic = GRN_Schedule_BannerEventLogic::getInstance();
    if ( ! $banner_logic->isInDateSpan($event2, $date)) {
        $banner_setdatetime
            = $banner_logic->getStartDateTimeInUserTimezone($event2);
        $date->year = $banner_setdatetime->year;
        $date->month = $banner_setdatetime->month;
        $date->day = $banner_setdatetime->day;
    }
} elseif (is_a($event2, 'GRN_Schedule_RepeatEvent')) {
    // 通知の場合だけ例外日かをみて削除を見る
    if (($notify_id || $notify_hid) && is_array($event2->except)
        && count($event2->except) > 0
    ) {
        foreach (array_keys($event2->except) as $key) {
            // 例外日なので削除の画面を表示
            if ($app->compareDate($event2->except[$key], $date) === 0) {
                $event2 = false;
                break;
            }
        }
    }

    // 例外日ではなかった場合
    if ($event2) {
        require_once('schedule/repeat_event_logic.csp');
        $repeat_logic = GRN_Schedule_RepeatEventLogic::getInstance();
        $event_date = $repeat_logic->getRepeatFirstDate($event2, $date);

        //for bug 1820
        $event_type = $event2->getEventType();
        // sh only date
        //if true -->getdata have datetime

        if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
            $repeat_id_arr = $repeat_logic->getIDScheduleNormal($event2->id,
                false);
        } else {
            $repeat_id_arr = $repeat_logic->getIDScheduleNormal($event2->id,
                true);
        }

        $event_date_format = null;
        if (isset($event_date['setdatetime'])) {
            $event_date_format
                = CB_Date::valueOf($event_date['setdatetime']->year,
                $event_date['setdatetime']->month,
                $event_date['setdatetime']->day)->format();
        }

        for ($i = 0; $i < count($repeat_id_arr); $i++) {
            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
                $datetime = $repeat_id_arr[$i]['setdatetime'];
            } else {
                $datetime = date("Y-m-d", $repeat_id_arr[$i]['setdatetime']);
            }

            if ($datetime === $str_date && $event_date_format !== $str_date) {
                $event2 = $app->getEvent($login, $repeat_id_arr[$i]['event_id'],
                    null, CB_DATABASE_NO_LOCK, false,
                    GRN_SCHEDULE_GET_MEMBER_ID);

                if ($event2 == false) {
                    continue;
                }

                if (($event2->getEventType() & GRN_SCHEDULE_EVENT_TYPE_START)
                    == GRN_SCHEDULE_EVENT_TYPE_START
                ) {
                    // 日付が違う場合は、元の日付に戻す
                    if ($app->compareDate($event2->setdatetime, $date) !== 0) {
                        $date->year = $event2->setdatetime->year;
                        $date->month = $event2->setdatetime->month;
                        $date->day = $event2->setdatetime->day;
                    }
                } else {
                    if (($app->compareDate($date, $event2->setdatetime) < 0)
                        || ($app->compareDate($date, $event2->enddatetime) > 0)
                    ) {
                        $date->year = $event2->setdatetime->year;
                        $date->month = $event2->setdatetime->month;
                        $date->day = $event2->setdatetime->day;
                    }
                }
                $event_id = $repeat_id_arr[$i]['event_id'];
                break;
            }
        }

        if (@ $datetime != @ $str_date) {
            if (is_a($event_date['setdatetime'], 'CB_Date')
                || is_a($event_date['setdatetime'], 'CB_DateTime')
            ) {
                $date->year = $event_date['setdatetime']->year;
                $date->month = $event_date['setdatetime']->month;
                $date->day = $event_date['setdatetime']->day;

                $event2->setdatetime = &$event_date['setdatetime'];
                $event2->enddatetime = &$event_date['enddatetime'];
            } else {
                // イベントとして日付がなくなった場合
                $event2 = null;
            }
        }

    }
} elseif (is_a($event2, 'GRN_Schedule_TemporaryEvent')
          && is_a($date, 'CB_Date')
) {
    require_once('schedule/temporary_event_logic.csp');
    $temporary_event_logic = GRN_Schedule_TemporaryEventLogic::getInstance();
    $date = $temporary_event_logic->getDisplayDate($event2,
        $date);
}

// 安全対策
if ( ! $event2) {
    // 通知の処理
    $app->readEvent($login, $event_id);

    // page title
    $page_title = grn_get_current_page_display_name();
    $t->assign('page_title', $page_title);
    // site position 
    $t->assign(
        'site_position', [
            [
                'page' => 'schedule/index',
                'name' => grn_get_page_display_name('schedule/schedule_index')
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );

    require_once('grn/notification.csp');
    $notify_service = GRN_Notification_Service::getInstance();

    if ( ! (($notify_id > 0) || ($notify_hid > 0))) {
        cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
    }

    if ($notify_id > 0) {
        $prop = $notify_service->getNotifyDataProperties($login,
            $app->getModuleId(), $event_id);
    } elseif ($notify_hid > 0) {
        $prop = $notify_service->getHistoryDataProperties($login,
            $app->getModuleId(), $event_id);
    }

    if (isset($prop)) {
        $sender = $prop->getSenderData();
        $timestamp = $prop->getTimeStampData();
        if ($sender && $timestamp) {
            $modify_user = $sender['id'];
            if ( ! $uum->getUserInfo($modify_user)) {
                $modify_user = null;
            }
            $t->assign(
                'schedule_event',
                [
                    'modify_uid'  => $modify_user,
                    'modify_name' => $sender['name'],
                    'mtime'       => $timestamp
                ]
            );
        }
    }
    $t->display('schedule/delete_info.tpl');
    cb_safe_exit();
}

// アクセス権のチェック
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
$dynamic_roles = $uum->listGrantedRoles();
$access = $acc_logic->getEventAccessByID($login, $event2,
    ['read', 'add', 'modify', 'delete'], $dynamic_roles);

if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
}

// 上部に表示するスケジュールデータの設定
include('_member_day.csp');

$temp = ['user_id' => $user_id, 'event_id' => $event2->id];

$temp['allday'] = ($event2->getEventType() & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
    ? true : false;
// GRM-1269 Attendance check feature
$attendanceStatLogic = new \grn\schedule\AttendanceStatusLogic();
$use_attendance_check
    = $attendanceStatLogic->isEnableAttendanceCheck()
      && $event2->isAttendanceCheckEvent();
$temp['isAttendanceCheckEvent'] = $use_attendance_check;

$is_same_day = false;
$event_start_date = null;
$event_end_date = null;
// 日付
if (is_a($event2, 'GRN_Schedule_BannerEvent')) {
    $tmp_start_date = new CB_Date();
    $tmp_start_date->parse($event2->setdate->format());
    $tmp_start_datetime = CB_DateTimeEx::createByDateAndTime($tmp_start_date,
        GRN_Schedule_View_Util::getAlldayStartTime());
    $event_start_date
        = $temp['start_date']
        = CB_I18N::translateDatetimeTimezone($tmp_start_datetime,
        $event2->timezone, CB_I18N::getInstance()->getCurrentTimezone());
    $tmp_end_date = new CB_Date();
    $tmp_end_date->parse($event2->enddate->format());
    $tmp_end_datetime = CB_DateTimeEx::createByDateAndTime($tmp_end_date,
        GRN_Schedule_View_Util::getAlldayEndTime());
    $event_end_date
        = $temp['end_date'] = CB_I18N::translateDatetimeTimezone($tmp_end_datetime,
        $event2->timezone, CB_I18N::getInstance()->getCurrentTimezone());

    if ($app->compareDate($temp['start_date'], $temp['end_date']) === 0) {
        $is_same_day = true;
    }
} elseif (is_a($event2, 'GRN_Schedule_RepeatEvent')) {
    $temp['repeat_data'] = $util->getRepeatData($event2->repeat_type,
        $event2->wday, $event2->day);
    $start_time = $event2->settime;
    if (is_null($start_time)) {
        $start_time = GRN_Schedule_View_Util::getAlldayStartTime();
    }
    $end_time = $event2->endtime;
    if (is_null($end_time)) {
        $end_time = GRN_Schedule_View_Util::getAlldayEndTime();
    }

    $start_datetime = CB_DateTimeEx::createByDateAndTime($event2->setdate,
        $start_time);
    $end_datetime = CB_DateTimeEx::createByDateAndTime($event2->enddate,
        $end_time);
    $current_timezone = CB_I18N::getInstance()->getCurrentTimezone();
    $start_datetime = CB_I18N::translateDatetimeTimezone($start_datetime,
        $event2->timezone, $current_timezone);
    $end_datetime = CB_I18N::translateDatetimeTimezone($end_datetime,
        $event2->timezone, $current_timezone);
    $temp['start_date'] = $start_datetime->getDate()->format();
    $temp['end_date'] = $end_datetime->getDate()->format();

    // Get duration
    $start_timespan = new CB_DateTimeSpan($start_time->toSeconds());
    $end_timespan = new CB_DateTimeSpan($end_time->toSeconds());
    if (is_null($event2->endtime)) {
        $one_second = new CB_DateTimeSpan(1);
        $end_timespan->add($one_second);
    }

    if ($start_timespan->compare($end_timespan) > 0) {
        $duration = new CB_DateTimeSpan((24 * 3600)
                                        - $start_timespan->toSeconds()
                                        + $end_timespan->toSeconds());
    } else {
        $duration = new CB_DateTimeSpan($end_timespan->toSeconds()
                                        - $start_timespan->toSeconds());
    }

    // Get times of the displayed day
    if ($str_end_day) {
        if ($end_datetime->parse($str_end_day) == false) {
            $end_day = new CB_Date();
            $end_day->parse($str_end_day);
            $end_datetime = CB_DateTimeEx::createByDateAndTime($end_day,
                $end_time);

            $end_datetime = CB_I18N::translateDatetimeTimezone($end_datetime,
                $event2->timezone, $current_timezone);
            $end_datetime->setDate($end_day);

            $start_datetime = clone $end_datetime;
            $start_datetime->sub($duration);
        } else {
            if (is_null($event2->endtime)) {
                $end_datetime->setTime($start_time);
                $end_datetime->add($duration);
            }

            $start_datetime = clone $end_datetime;
            $start_datetime->sub($duration);

            $end_datetime = CB_I18N::translateDatetimeTimezone($end_datetime,
                $event2->timezone, $current_timezone);
            $start_datetime
                = CB_I18N::translateDatetimeTimezone($start_datetime,
                $event2->timezone, $current_timezone);
        }
    } elseif ($str_start_day) {
        if ($start_datetime->parse($str_start_day) == false) {
            $start_day = new CB_Date();
            $start_day->parse($str_start_day);
            $start_datetime = CB_DateTimeEx::createByDateAndTime($start_day,
                $start_time);

            $start_datetime
                = CB_I18N::translateDatetimeTimezone($start_datetime,
                $event2->timezone, $current_timezone);
            $start_datetime->setDate($start_day);
        }

        $end_datetime = clone $start_datetime;
        $end_datetime->add($duration);
        $t->assign('start_day', $str_start_day);
    } else {
        $start_datetime = CB_DateTimeEx::createByDateAndTime($date,
            $start_time);
        $end_datetime = CB_DateTimeEx::createByDateAndTime($date,
            $end_time);
        $start_datetime_old = clone $start_datetime;
        $end_datetime_old = clone $end_datetime;

        $start_datetime = CB_I18N::translateDatetimeTimezone($start_datetime,
            $event2->timezone, $current_timezone);
        $end_datetime = CB_I18N::translateDatetimeTimezone($end_datetime,
            $event2->timezone, $current_timezone);

        if ($app->compareDate($start_datetime, $start_datetime_old) !== 0) {
            $start_datetime->setDate($start_datetime_old->getDate());
            $end_datetime->setDate($end_datetime_old->getDate());
        }
    }

    if ($end_datetime->compare($start_datetime) < 0) {
        $end_datetime->moveDays(1);
    }

    if ($app->compareDate($start_datetime, $end_datetime) === 0) {
        $is_same_day = true;
    }
    $event_start_date = $start_datetime;
    $event_end_date = $end_datetime;
    $temp['start_time'] = $start_datetime->format();
    $temp['end_time'] = $end_datetime->format();
    if (is_null($event2->endtime) && ! is_null($event2->settime)) {
        $temp['end_time'] = "";
    }
} elseif (is_a($event2, 'GRN_Schedule_TemporaryEvent')) {
    $temporary = [];
    if ($event2->isORSearch()) {
        //-- 候補施設ごとのアクセス権をチェック
        $candidate_id_list = [];
        foreach ($event2->setdates as $facility_data) {
            $candidate_list[$facility_data['facility']->getOID()]
                = $facility_data['facility'];
        }

        $authorities = ['read', 'add', 'modify', 'delete'];
        $acc_lists = $acc_logic->getFacilityGroupAccessList($login,
            $candidate_list, $authorities, $dynamic_roles);
        $tmp_acc_lists = $acc_logic->getEvaluateAccessesListById($login,
            $candidate_list,
            'facility',
            $authorities,
            $dynamic_roles);
        if (is_array($tmp_acc_lists)) {
            $acc_lists += $tmp_acc_lists;
        }
        //--

        // 参加しているか
        $is_participate = false;
        if (is_array($event2->users)
            && array_key_exists($login_id, $event2->users)
        ) {
            $is_participate = true;
        }

        foreach ($event2->setdates as $facility_data) {
            $facility_dates = [];
            foreach ($facility_data['dates'] as $tp_id => $temp_date) {
                $string_datetime = "DateTimeLong_YMDW_HM";
                if ($app->compareDate($temp_date['setdatetime'],
                        $temp_date['enddatetime']) === 0
                ) {
                    $string_datetime = "TimeShort_HM";
                }
                $facility_dates[] = [
                    'temporary_id'    => $tp_id,
                    'setdatetime'     => $temp_date['setdatetime'],
                    'enddatetime'     => $temp_date['enddatetime'],
                    'string_datetime' => $string_datetime
                ];
            }

            // 参加者でなくて施設に権限が無かったらその施設の候補日時だけ確定できなくする
            $determine = true;
            $candidate_access
                = $acc_lists[$facility_data['facility']->getOID()];
            if ( ! $is_participate
                 && $candidate_access['add'] == GRN_SCHD_ACCESS_DENY
                 && $candidate_access['modify'] == GRN_SCHD_ACCESS_DENY
                 && $candidate_access['delete'] == GRN_SCHD_ACCESS_DENY
            ) {
                $determine = false;
            }

            $temporary[] = [
                'facility_name' => $facility_data['facility']->get('name'),
                'dates'         => $facility_dates,
                'determine'     => $determine
            ];
        }
        $temp['temporary_type'] = 'or';
    } else {
        foreach ($event2->setdates as $tp_id => $temp_date) {
            $string_datetime = "DateTimeLong_YMDW_HM";
            if ($app->compareDate($temp_date['setdatetime'],
                    $temp_date['enddatetime']) === 0
            ) {
                $string_datetime = "TimeShort_HM";
            }
            $temporary[] = [
                'temporary_id'    => $tp_id,
                'setdatetime'     => $temp_date['setdatetime'],
                'enddatetime'     => $temp_date['enddatetime'],
                'string_datetime' => $string_datetime
            ];
        }
        $temp['temporary_type'] = 'normal';
    }
    $temp['temporary'] = $temporary;
} else {
    $temp['start_date'] = $event2->setdatetime->format();
    $event_end_date = $event_start_date = clone $event2->setdatetime;
    if ($event2->enddatetime) {
        $temp['end_date'] = $event2->enddatetime->format();
        $event_end_date = clone $event2->enddatetime;
    }


    if ($temp['allday']) {
        $tmp_start_date = new CB_Date();
        $tmp_start_date->parse($temp['start_date']);
        $tmp_start_datetime
            = CB_DateTimeEx::createByDateAndTime($tmp_start_date,
            GRN_Schedule_View_Util::getAlldayStartTime());
        $event_start_date
            = $temp['start_date']
            = CB_I18N::translateDatetimeTimezone($tmp_start_datetime,
            $event2->timezone, CB_I18N::getInstance()->getCurrentTimezone());
        if ($event2->enddatetime) {
            $tmp_end_date = new CB_Date();
            $tmp_end_date->parse($temp['end_date']);
            $tmp_end_datetime
                = CB_DateTimeEx::createByDateAndTime($tmp_end_date,
                GRN_Schedule_View_Util::getAlldayEndTime());
            $event_end_date
                = $temp['end_date']
                = CB_I18N::translateDatetimeTimezone($tmp_end_datetime,
                $event2->timezone,
                CB_I18N::getInstance()->getCurrentTimezone());
        }

        if ($event2->enddatetime
            && $app->compareDate($temp['start_date'], $temp['end_date']) === 0
        ) {
            $is_same_day = true;
        }
    } else {
        if ($event2->enddatetime
            && $app->compareDate($event2->setdatetime, $event2->enddatetime)
               === 0
        ) {
            $is_same_day = true;
        }
    }
}

//add message warning for the last repeat event
if (is_a($event2, 'GRN_Schedule_RepeatEvent')) {
    if ($event2->isLastRepeatEvent()) {
        $temp['last_repeat_event'] = true;
    }
}

$temp['title'] = html_entity_decode($event2->getTitle());
if ($event2->private == GRN_EVENT_PRIVATE_HIDDEN) {
    $temp['title'] .= cb_msg('grn.schedule', 'event_private');
} elseif ($event2->private == GRN_EVENT_PRIVATE_PRIVATE) {
    $temp['is_private'] = true;
}
$temp['type'] = $util->getViewEventType($event2->getEventType(),
    $event2->isShared());
$temp['memo'] = $event2->memo;

// アドレスデータ
if ( ! is_null($event2->company_name)
     ||
     ! is_null($event2->zip_code)
     ||
     ! is_null($event2->physical_address)
     ||
     ! is_null($event2->map)
     ||
     ! is_null($event2->route)
     ||
     ! is_null($event2->company_telephone_number)
     ||
     ! is_null($event2->facsimile_number)
     ||
     ! is_null($event2->company_url)
) {
    $address = [];
    $address['company_name'] = $event2->company_name;
    $address['zip_code'] = $event2->zip_code;
    $address['physical_address'] = $event2->physical_address;
    $address['map_image'] = $event2->map;
    $t->assign('mp', array_key_exists('mp', $G_INPUT) ? $G_INPUT['mp'] : null);
    $address['route'] = $event2->route;
    $address['route_time'] = $event2->route_time;
    $address['route_fare'] = $event2->route_fare;
    $address['company_telephone_number'] = $event2->company_telephone_number;
    $address['facsimile_number'] = $event2->facsimile_number;
    $address['URL'] = $event2->company_url;

    $temp['address'] = $address;
}

$uids = [];

// 登録者
$timestamp = new CB_TimeStampEx($event2->ctime);
$datetime = $timestamp->getDateTime();
$temp['ctime'] = $datetime->format();
if (is_a($event2->creator, 'CB_User')) {
    $temp['creator_uid'] = $event2->creator->getOID();
    $temp['creator_name'] = $event2->creator->get('display_name');
} else {
    $temp['creator_uid'] = null;
    $temp['creator_name'] = $event2->creator;
}

// 変更者
if ($event2->mtime) {
    $timestamp = new CB_TimeStampEx($event2->mtime);
    $datetime = $timestamp->getDateTime();
    $temp['mtime'] = $datetime->format();
    if (is_a($event2->modifier, 'CB_User')) {
        $temp['modify_uid'] = $event2->modifier->getOID();
        $temp['modify_name'] = $event2->modifier->get('display_name');
    } else {
        $temp['modify_uid'] = null;
        $temp['modify_name'] = $event2->modifier;
    }
} else {
    $temp['mtime'] = $datetime->format();
    if (is_a($event2->creator, 'CB_User')) {
        $temp['modify_uid'] = $event2->creator->getOID();
        $temp['modify_name'] = $event2->creator->get('display_name');
    } else {
        $temp['modify_uid'] = null;
        $temp['modify_name'] = $event2->creator;
    }
}

$uids[] = @$temp['creator_uid'];
$uids[] = @$temp['modify_uid'];

$max_member = 0;
if (is_array($event2->groups)) {
    $max_member += count($event2->groups);
}
if (is_array($event2->users)) {
    $max_member += count($event2->users);
}

// 表示するユーザーのデフォルト人数
$max_user_limit = 10;
$show_userlimit = false;
if ( ! array_key_exists('du', $G_INPUT) || $G_INPUT['du'] != '1') {

    if ($max_member > $max_user_limit) {
        $show_userlimit = $max_user_limit;
    }
}

// 参加者の設定
$members = [];
$event_members = ['users' => [], 'groups' => []];
$b_login = false;

if ($use_attendance_check === false) {
    $member_show_count = 0;
    if (is_array($event2->groups)) {
        foreach ($event2->groups as $object_id) {
            if ($show_userlimit && $member_show_count >= $show_userlimit) {
                break;
            }

            $members['g' . $object_id] = $object_id;
            $event_members['groups'][$object_id] = $object_id;

            $member_show_count++;
        }
    }

    if (is_array($event2->users)) {
        foreach ($event2->users as $object_id) {
            if ( ! $b_login && $object_id == $login_id) {
                $b_login = true;
            }

            // 表示数制限のチェック
            if ($show_userlimit && $member_show_count >= $show_userlimit) {
                continue;
            }

            $event_members['users'][$object_id] = $object_id;
            $members[$object_id] = $object_id;

            $member_show_count++;
        }
    }

    $temp['users'] = $members;
    if ($b_login) {
        $temp['participate'] = true;
    }
} else {
    if (is_array($event2->users)
        && array_key_exists($login_id, $event2->users)
    ) {
        $b_login = true;
        $temp['participate'] = true;
    }

    $limit = $show_userlimit === false ? $max_member
        : $show_userlimit;
    $temp["displayLimit"] = $limit;
    $attendanceStatusForView = $util->getAttendanceStatusForView($event2,
        $limit);
    $event_members["users"] = $attendanceStatusForView["users"];
    $event_members["groups"] = $attendanceStatusForView["groups"];
    $temp["users"] = $attendanceStatusForView["all"];
    unset($attendanceStatusForView["all"]);
    unset($attendanceStatusForView["users"]);
    unset($attendanceStatusForView["groups"]);
    $temp["userAttendances"] = $attendanceStatusForView;
}

$temp['users_count'] = $max_member;

if ((is_a($event2, 'GRN_Schedule_NormalEvent')
     && is_a($event2->setdatetime, 'CB_DateTime'))
    || (is_a($event2, 'GRN_Schedule_RepeatEvent')
        && is_a($event2->setdatetime, 'CB_DateTime'))
) {
    // アクセス権のチェックで見えないユーザーを抜く
    if (count($event_members['groups']) > 0) {
        $event_members['groups'] = $acc_logic->evaluateAccessesById($login,
            $event_members['groups'], ['read'], $dynamic_roles, 'group');
    }

    if (count($event_members['users']) > 0) {
        $event_members['users'] = $acc_logic->evaluateAccessesById($login,
            $event_members['users'], ['read'], $dynamic_roles, 'user');
    }

    if (is_a($event2, 'GRN_Schedule_NormalEvent')) {
        $setdatetime = $event2->setdatetime;
        $enddatetime = $event2->enddatetime;
        if (is_null($enddatetime)) {
            $enddatetime = $event2->setdatetime;
        }

        if ($app->compareDate($date, $setdatetime) !== 0) {
            $setdatetime->year = $date->year;
            $setdatetime->month = $date->month;
            $setdatetime->day = $date->day;
            $setdatetime->hour = 0;
            $setdatetime->minute = 0;
            $setdatetime->second = 0;
        }

        if ($app->compareDate($date, $enddatetime) !== 0) {
            $workdate = clone $date;
            cb_date_move_days($workdate, 1);
            $enddatetime->year = $workdate->year;
            $enddatetime->month = $workdate->month;
            $enddatetime->day = $workdate->day;
            $enddatetime->hour = 0;
            $enddatetime->minute = 0;
            $enddatetime->second = 0;
        }

    } else {
        $setdatetime = $event2->setdatetime;
        $enddatetime = $event2->enddatetime;
    }

    // 非公開を隠すかどうかの設定
    require_once('schedule/system_logic.csp');
    $systemlogic = GRN_Schedule_SystemLogic::getInstance();
    $hiddenprivate = $systemlogic->getHiddenPrivate();

    //GRB-17186
    if ( ! array_key_exists($login->getOID(), $event_members['users'])
         && is_array($event2->users)
         && array_key_exists($login->getOID(), $event2->users)
    ) {
        $event_members['users'][$login->getOID()] = $login->getOID();
    }
    // 参加者の衝突チェック
    $temp['attention'] = $app->conflictMembersEvent($login, $event_members,
        $setdatetime, $enddatetime, $event2->id, $event2->getEventType(),
        $hiddenprivate);
}

$members = [];
if (is_array($event2->facilities)) {
    foreach ($event2->facilities as $object_id) {
        $members[$object_id] = $object_id;
    }
}
$temp['facility'] = $members;

//GTM-1677
if (is_a($event2, 'GRN_Schedule_NormalEvent')) {
    $params = ['history', 'usingPurpose', 'currentStatus'];
    $facilityApprovalViewUtil = new FacilityApprovalViewUtil();
    $facilityApprovalData = $facilityApprovalViewUtil->fetch($params,
        $event2, $uids);
    $t->assign('facilityApprovalData', $facilityApprovalData);
}
//End GTM-1677

// 施設のカスタマイズ項目
if ( ! empty($members)) {
    // カスタマイズ項目を取得
    $extended_items = $facility_logic->getData($event_id);
    $t->assign('extended_items', $extended_items);
} elseif (is_a($event2, 'GRN_Schedule_TemporaryEvent')
          && $event2->isORSearch()
) {
    // カスタマイズ項目を取得
    $extended_items = $facility_logic->getData($event_id);
    $t->assign('extended_items', $extended_items);
}

$use_extended_item = false;
if (isset($extended_items) && count($extended_items) > 0) {
    foreach ($extended_items as $extend) {
        if ($extend['use']) {
            $use_extended_item = true;
            break;
        }
    }
}
$t->assign('use_extended_item', $use_extended_item);

// 非公開の場合のみ
if ($event2->private && is_array($event2->notify_address)
    && count($event2->notify_address) > 0
) {
    $temp['private_users'] = ScheduleMemberLogic::getInstance()
                                                ->getNotifyAddressRender($event2->notify_address,
                                                    GRN_SCHEDULE_GET_MEMBER_ID);
}

// フォローの表示件数を求める
require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$config = $manager->getUserConfig($login);

$limit = $config->getFollowMax();
require_once('grn/controller.csp');
$utility = new GRN_ControllerUtil();
$navi_start_position = $utility->getNaviStartPosition();

// 検索でフォローの位置を特定している場合
if (array_key_exists('follow_id', $G_INPUT)) {
    $b_follow = true;
    $follow_id = $G_INPUT['follow_id'];
} else {
    $b_follow = false;
    $follow_id = null;
}

// フォローの取得
$follows = $app->getEventFollows($login, $event_id, $navi_start_position,
    $limit, $follow_id);


require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$use_star = $star_logic->isActive();
$t->assign('use_star', $use_star);

$temp_follow = [];
$counter = 0;
foreach ($follows as $fid => $follow) {
    $counter++;
    if ($counter > $limit) {
        break;
    }

    $tsex = new CB_TimeStampEx($follow['ctime']);
    $datetime = $tsex->getDateTime();
    $temp_follow[] = [
        'follow_id'    => $fid,
        'creator_uid'  => $follow['creator_id'],
        'creator_name' => $follow['creator_name'],
        'ctime'        => $datetime->format(),
        'data'         => $follow['data'],
    ];
    $uids[] = $follow['creator_id'];
}
$temp['follow'] = $temp_follow;

require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($uids, $login);

// User icon setting
$imageIcon = GRN_ControllerUtil::getUserIconFormat($login);
$t->assign('imageIcon', $imageIcon);

// for user image icon
if ($imageIcon) {
    $users_info = GRN_ControllerUtil::addPhotoUrlForUsersInfo($users_info,
        GRN_ControllerUtil::getUserProfilePhotoSmallSize());
    $t->assign('iconSize', GRN_ControllerUtil::ICON_SIZE_SMALL);
}
$t->assign('loginId', $login_id);
$t->assign('users_info', $users_info);

if ($b_follow) {
    $navi_start_position = $app->getFollowPosition($event_id, $follow_id);
}

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
// 連携用のメニューの取得
$menupage = $systemlogic->getMenuPageByMenu($event2->menu);
if ($menupage) {
    //定義済み%...%変数と%..%変数値の取得
    require_once('grn/sso.csp');
    $sso_service = GRN_SSO_Service::getInstance();
    $identifier_value_list = $sso_service->getIdentifierValueList();

    //定義済み%...%変数から%...%変数値への置換
    $menupage = $sso_service->replaceIdentifierValueList($menupage,
        $identifier_value_list);
    $temp['menupage'] = ['menu' => $event2->menu, 'data' => $menupage];

    //定義済みJavaScript変数とJavaScript変数値の取得
    $sso_service = GRN_SSO_Service::getInstance();
    $javascript_identifier_value_list
        = $sso_service->getJavaScriptIdentifierValueListWithObject('schedule',
        $event2);
    $t->assign('javascript_identifier_value_list',
        $javascript_identifier_value_list);
}

$temp['event_detail'] = $event2->detail;
$temp['event_menu'] = $event2->menu;
$temp['event_menu_color'] = $event2->menucolor;

$t->assign('user_id', $user_id);
$t->assign('group_id', $group_id);
if ($date) {
    $t->assign('bdate', $date->format());
}
$t->assign('event', $event2->id);
$t->assign('title', $event2->detail);
$t->assign('page_title',
    empty($event2->detail) ? cb_msg('grn.schedule', 'view') : $event2->detail);
// フォローに対するアクセス権
if ($access['add'] == GRN_SCHD_ACCESS_DENY
    && $access['modify'] == GRN_SCHD_ACCESS_DENY
    && $access['delete'] == GRN_SCHD_ACCESS_DENY
) {
    $access['follow'] = GRN_SCHD_ACCESS_DENY;
    $access['determine'] = GRN_SCHD_ACCESS_DENY;
} else {
    $access['follow'] = GRN_SCHD_ACCESS_AFFIRM;
    $access['determine'] = GRN_SCHD_ACCESS_AFFIRM;
}

if (is_array($event2->facilities) && count($event2->facilities) > 0) {
    $f_settings
        = $facility_logic->getFacilitySetting(array_keys($event2->facilities));
    foreach ($event2->facilities as $facility_id) {
        $modify_user = $facility_logic->getModifyUserByPriority($f_settings,
            $facility_id);
        // 登録者にのみ変更を許可する
        if ($modify_user === 'creator') {
            // 施設で登録者しか変更を許していない場合
            if ((is_array($event2->facilities)
                 && count($event2->facilities) > 0)
                || is_a($event2, 'GRN_Schedule_TemporaryEvent')
                   && $event2->isORSearch()
            ) {
                if ((is_a($event2->creator, 'CB_User')
                     && $login_id != $event2->creator->getOID())
                    || is_string($event2->creator)
                ) {
                    $access['modify'] = GRN_SCHD_ACCESS_DENY;
                    $access['delete'] = GRN_SCHD_ACCESS_DENY;
                }

                require_once('schedule/facility_privilege.csp');
                $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
                // 自分が運用管理権限を持っている施設の予定は何でもOKにする
                if ($privilege_logic->hasPrivilegeOfFacilitiesById($login,
                    $event2->facilities, 'OR')
                ) {
                    foreach (array_keys($access) as $action) {
                        $access[$action] = GRN_SCHD_ACCESS_AFFIRM;
                    }
                }
                if ($access['modify'] == GRN_SCHD_ACCESS_AFFIRM
                    || $access['delete'] == GRN_SCHD_ACCESS_AFFIRM
                ) {
                    continue;
                } elseif ($access['modify'] == GRN_SCHD_ACCESS_DENY
                          || $access['delete'] == GRN_SCHD_ACCESS_DENY
                ) {
                    break;
                }
            }
        } // 登録者と共有メンバーに変更を許可する
        elseif ($modify_user === 'member') {
            // 施設で登録者と共有メンバーしか変更を許していない場合
            if ((is_array($event2->facilities)
                 && count($event2->facilities) > 0)
                || is_a($event2, 'GRN_Schedule_TemporaryEvent')
                   && $event2->isORSearch()
            ) {
                // Login user is not a member
                if ( ! $b_login
                     && ((is_a($event2->creator, 'CB_User')
                          && $login_id !== $event2->creator->getOID())
                         || is_string($event2->creator))
                ) {
                    $access['modify'] = GRN_SCHD_ACCESS_DENY;
                    $access['delete'] = GRN_SCHD_ACCESS_DENY;
                }

                require_once('schedule/facility_privilege.csp');
                $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
                // 自分が運用管理権限を持っている施設の予定は何でもOKにする
                if ($privilege_logic->hasPrivilegeOfFacilitiesById($login,
                    $event2->facilities, 'OR')
                ) {
                    foreach (array_keys($access) as $action) {
                        $access[$action] = GRN_SCHD_ACCESS_AFFIRM;
                    }
                }
                if ($access['modify'] == GRN_SCHD_ACCESS_AFFIRM
                    || $access['delete'] == GRN_SCHD_ACCESS_AFFIRM
                ) {
                    continue;
                } elseif ($access['modify'] == GRN_SCHD_ACCESS_DENY
                          || $access['delete'] == GRN_SCHD_ACCESS_DENY
                ) {
                    break;
                }
            }
        }
    }
}

$temp['access'] = $access;

/* -------------- VCBSCH0010 START ----------------- */

require_once('./_netmeeting_view_field.csp');

/* -------------- VCBSCH0010 END   ----------------- */

//GTM-1136
$allow_file_attachment = false;
if ($systemlogic->getAllowFileAttachment() == '1') {
    require_once('schedule/file.csp');
    $fm = GRN_Schedule_FileManager::getInstance();
    $files = $fm->getFiles($event_id);

    $files_for_view = [];
    foreach (array_keys($files) as $fid) {
        $file =& $files[$fid];
        $files_for_view[$fid] = $utility->getFileLinkView($file);
    }

    $temp['attach_files'] = $files_for_view;
    if (count($files_for_view) > 0) {
        $allow_file_attachment = true;
    }
}
$t->assign('allow_file_attachment', $allow_file_attachment);
$t->assign('file_inline', $config->getInlineSetting());
//End GTM-1136

// GRM-1269 Attendance check feature
if ($use_attendance_check === true) {
    $attendanceStat
        = $attendanceStatLogic->getAttendanceStatusByUserIdAndEventId($login_id,
        $event2);
    if ($attendanceStat instanceof \grn\schedule\bean\AttendanceStatus) {
        switch ($attendanceStat->getStatus()) {
            case "0":
                $temp['attendanceStatus']
                    = \grn\schedule\bean\AttendanceStatus::STATUS_ABSENT;
                break;
            case "1":
                $temp['attendanceStatus']
                    = \grn\schedule\bean\AttendanceStatus::STATUS_ATTENDANT;
                break;
            default:
                $temp['attendanceStatus']
                    = \grn\schedule\bean\AttendanceStatus::STATUS_UNCONFIRMED;
                break;
        }
    }
    $temp["hasUpdate"] = false;
    if (($event2->creator instanceof \CB_User)
        && ($login_id === $event2->creator->getOID())
    ) {
        $temp["hasUpdate"]
            = $attendanceStatLogic->hasConfirmationUpdateForCreator($event2);
    }
    $currentTab = (int)cb_at($G_INPUT, "tab", 0);
    $t->assign('tab', $currentTab);
}
// End GRM-1269 Attendance check feature

// GTM-2140
$group_ids = [];
$user_ids = [];
$facility_ids = [];

if (is_array($event2->groups)) {
    $group_keys = array_keys($event2->groups);
    $group_ids = array_map(
        function ($value) {
            return $value = 'g' . $value;
        }, $group_keys
    );
}

if (is_array($event2->users)) {
    $user_ids = array_keys($event2->users);
}

if (count($temp['facility']) > 0) {
    $facility_values = array_values($temp['facility']);
    $facility_ids = array_map(
        function ($value) {
            return $value = 'f' . $value;
        }, $facility_values
    );
}

$member_ids = array_merge($group_ids, $user_ids, $facility_ids);
$params['member_ids'] = array_slice($member_ids, 0,
    EventListView::MEMBERS_LIMIT);
$temp['url_fragment'] = EventMemberParamUtil::createUrlFragment($params);
// End GTM-2140

$t->assign('is_same_day', $is_same_day);

$t->assign('schedule_event', $temp);
// 通知の処理
$app->readEvent($login, $event2->id);

// フォローのナビゲーションを作成
$navi = [];
if (count($follows) > $limit) {
    $navi['next_page_start_position'] = $navi_start_position + $limit;
} else {
    $navi['next_page_start_position'] = -1;
}

if (($navi_start_position > 0)) {
    $navi['previous_page_start_position'] = $navi_start_position - $limit;
    if ($navi['previous_page_start_position'] < 0) {
        $navi['previous_page_start_position'] = 0;
    }
} else {
    $navi['previous_page_start_position'] = -1;
}

$navi['number_on_page'] = $limit;
$navi['params'] = [
    'event' => $event2->id,
    'uid'   => $user_id,
    'gid'   => $group_id
];
if ($date) {
    $navi['params']['bdate'] = $date->format();
}

$t->assign('navi', $navi);

$referer_key = array_key_exists('referer_key', $G_INPUT)
    ? $G_INPUT['referer_key'] : null;
$referer_exists = false;
if ($referer_key) {
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession('schedule.referer');
    $referer = $session->get($referer_key);
    if (is_array($referer)) {
        // Ajaxスケジューラは日付を移動してもrefererを更新しないので変更後のbdateを受け取ってrefererを更新する
        $date = new CB_Date();
        $referer_bdate = array_key_exists('referer_bdate', $G_INPUT)
            ? $G_INPUT['referer_bdate'] : null;
        if ($date->parse($referer_bdate)) {
            $referer['bdate'] = $referer_bdate;
            $session->set($referer_key, $referer);
        }

        // page title
        $page_title = grn_get_current_page_display_name();
        // site position 
        $t->assign(
            'site_position', [
                $referer,
                ['page' => "", 'name' => $page_title]
            ]
        );
        $referer_exists = true;
    }
}

if ($referer_exists === false) {
    // page title
    $page_title = grn_get_current_page_display_name();
    // site position 
    $t->assign(
        'site_position', [
            [
                'page' => "schedule/index",
                'name' => grn_get_page_display_name('schedule/schedule_index')
            ],
            ['page' => "", 'name' => $page_title]
        ]
    );
}
$t->assign('name_width', $config->getNameWidth());
$t->assign('referer_key', $referer_key);

//delete follow
$handler = [];
if (array_key_exists('follow', $temp)) {
    foreach ($temp['follow'] as $follow) {
        $handler[] = 'lnk_delete_follow_' . $follow['follow_id'];
    }
}

$delete_follow = [
    'title'         => grn_get_page_display_name('schedule/delete_follow'),
    'page'          => 'schedule/delete_follow.tpl',
    'no_confirm'    => false,
    'data'          => [
        'schedule_event' => $temp,
        'group_id'       => $group_id,
        'bdate'          => $str_date,
        'referer_key'    => $referer_key
    ],
    'handler'       => $handler,
    'before_delete' => [
        'on_before_delete_follow',
        ['follow_id' => 'follow_id']
    ],
];
$t->assign('delete_follow', $delete_follow);

// star
require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$t->assign('use_star', $star_logic->isActive());
if ($star_logic->isActive()) {
    $tplvar =& $t->get_template_vars('schedule_event');
    $bdate = $t->get_template_vars('bdate');
    $unique_id = ($tplvar['type'] == 'share_repeat'
                  || $tplvar['type'] == 'repeat') ? "rp_{$event_id}_{$bdate}"
        : $event_id;
    $t->assign('star_infos',
        $star_logic->getStatusByIDs($login, GRN_SCHEDULE_MODULE_ID,
            [$unique_id]));
}
// end star

//assign data for Space menu
include('./_for_space.csp');

// get login user is available for kintone
if (defined('ON_FOREST') && is_a($event2, 'GRN_Schedule_NormalEvent')) {
    require_once('kintone/Logic.csp');
    require_once('fw/slash_util.csp');
    $kintone_available = (GRN_Kintone_Logic::isAvailable()
                          && CB_SlashUtil::isGaiaLicenseapiRequest());
    $t->assign('kintone_available', $kintone_available);
} else {
    $t->assign('kintone_available', false);
}

if ($temp['type'] != 'temporary'
    && $temp['type'] != 'share_temporary'
    && ScheduleJsApiLoader::getInstance()->isCustomizationAvailable()
) {
    if ($event2 instanceof GRN_Schedule_NormalEvent) {
        $facility_approvals
            = (new FacilityApprovalLogic())->getEventFacilityApprovalsByEvent($event2);
        $facility_approvals_of_events = [$facility_approvals];
    } else {
        $facility_approvals_of_events = [];
    }

    $event_builder = new EventBuilder(new RenderMemberProvider([$event2], [
        RenderMemberProvider::PRESET_DATA_NOTIFY_ADDRESS => $temp['private_users']
                                                            ?? []
    ], $facility_approvals_of_events));
    $visibility_type = null;
    if ($event2->private) {
        if (is_array($event2->notify_address)
            && count($event2->notify_address) > 0
        ) {
            $visibility_type = GRN_PRIVATE_SETTING_MANAGED;
        } else {
            $visibility_type = GRN_PRIVATE_SETTING_PRIVATE;
        }
    } else {
        $visibility_type = GRN_PRIVATE_SETTING_PUBLIC;
    }

    $event_type = Event::getEventTypeFromObject($event2);
    $event_builder->initEvent($event2, $event_type, $visibility_type);
    $event_builder->buildCompany($temp['address'] ?? []);
    if ($attendanceStatLogic->isEnableAttendanceCheck()) {
        $event_builder->buildUseAttendanceCheck($use_attendance_check);
    }
    $event_builder->buildVersion(null);
    $event_builder->buildAttendees($event2->users ?? [], $event2->groups ?? [],
        \grn\schedule\api\model\Member::getAttendeesResponseList([$event_id]));
    if ($systemlogic->getAllowFileAttachment() == '1') {
        $event_builder->buildAttachments($temp['attach_files'] ?? [], true);
    }

    if (isset($temp['facility']) && is_array($temp['facility'])) {
        $event_builder->buildFacilities($temp['facility']);
        if (isset($extended_items) && ! empty($temp['facility'])) {
            $event_builder->buildFacilityReservation($extended_items);
        }
    }

    if ($event2 instanceof GRN_Schedule_NormalEvent) {
        $facility_approval_settings
            = (new ScheduleFacilityApprovalSetting())->getSettingsObject(
            array_unique(
                array_merge(
                    $event2->getAllFacilityIds(),
                    $facility_approvals->getFacilityIds()
                )
            )
        );

        $event_builder->buildFacilityUsageRequests(
            $event2->getAllFacilityIds(), $facility_approvals,
            $facility_approval_settings
        );

        $event_builder->buildFacilityUsingPurpose(
            $facilityApprovalData['usingPurpose'] ?? '',
            $event2->getAllFacilityIds(), $facility_approval_settings
        );
    }

    $event_builder->buildIsStartOnlyAndIsAllDayByEventType($event2->getEventType(),
        true);
    $event_builder->buildWatchersFromRenderValues($temp['private_users'] ?? []);
    if ($event_type == Event::EVENT_TYPE_REPEATING) {
        $event_builder->buildOriginalTimezone($event2->timezone,
            $event2->timezone);
    } else {
        $event_builder->buildOriginalTimezone($event2->timezone,
            $event2->end_timezone);
    }

    $login_timezone = CB_I18N::getInstance()->getCurrentTimezone();
    $event_builder->buildStartEnd(
        $event_start_date->getDate(), $event_start_date->getTime(),
        $login_timezone,
        $event_end_date->getDate(), $event_end_date->getTime(), $login_timezone
    );
    if ($event_type == Event::EVENT_TYPE_REPEATING) {
        $event_builder->buildRepeatInfo($event2->repeat_type, $event2->setdate,
            $event2->enddate, $event2->settime,
            $event2->endtime, $event2->timezone, $event2->day, $event2->wday,
            null, $event2->except);
    }

    $event_builder->buildCustomItem($event2->additional_items);
    $event_data = $event_builder->getEvent()->toArray();

    $screen_properties = ['data' => ['event' => $event_data]];
    CustomizationJsCssLoader::getInstance()->addEvent(
        ScheduleJsApiLoader::getInstance(),
        new DetailShowJsApiEvent($screen_properties)
    );
}
// Smarty実行
$t->display(cb_get_pagename() . ".tpl");
