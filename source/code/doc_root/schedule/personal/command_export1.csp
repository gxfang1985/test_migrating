<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    /*
        // instantiate an Smarty object
        require_once( "grn/smarty.csp" );
        $t = new GRN_Smarty;

        // Validation check
        require_once('SmartyValidate.class.php');
        SmartyValidate::connect($t);

        // validate after a POST
        if(SmartyValidate::is_valid($G_INPUT)) {
            // the validation session is finished
            SmartyValidate::disconnect();
    */
    // --------
    // brabrabra after success
    // --------
    $charset = @ $G_INPUT['charset'];
    if ( ! $charset) {
        global $G_config_common;
        $charset = $G_config_common->get('I18N', 'default_external_encoding');
    }

    require_once('schedule/view_util.csp');
    $util = GRN_Schedule_View_Util::getInstance();
    // 日付のチェック
    $setdate = $util->createDateTimeFromParameters(@ $G_INPUT['start_year'],
        @ $G_INPUT['start_month'], @ $G_INPUT['start_day']);
    $enddate = $util->createDateTimeFromParameters(@ $G_INPUT['end_year'],
        @ $G_INPUT['end_month'], @ $G_INPUT['end_day']);

    if ( ! is_a($setdate, 'CB_Date')) {
        cb_throw_error(E_GRN_SCHD_INVALID_SETDATE);
    }
    if ( ! is_a($enddate, 'CB_Date')) {
        cb_throw_error(E_GRN_SCHD_INVALID_ENDDATE);
    }
    require_once('schedule/application.csp');
    $app = GRN_Schedule_Application::getInstance();

    // 期間のチェック
    $app->checkDateTime($setdate, $enddate);

    /// テンポラリのファイルを作成
    $tempdir = cb_tmpdir();
    $temp_filename = tempnam($tempdir, 'sc_');

    require_once('fw/csv.csp');
    $writer = new CB_CSVWriter($charset, $temp_filename);

    // 項目名の書き出し
    $itemname = @ $G_INPUT['item_name'];

    if ($itemname == '1') {
        $csv_header = [];
        $csv_header[] = cb_msg('grn.schedule', 'set_date');
        $csv_header[] = cb_msg('grn.schedule', 'set_time');
        $csv_header[] = cb_msg('grn.schedule', 'end_date');
        $csv_header[] = cb_msg('grn.schedule', 'end_time');
        $csv_header[] = cb_msg('grn.schedule', 'event_menu');
        $csv_header[] = cb_msg('grn.schedule', 'event_detail');
        $csv_header[] = cb_msg('grn.schedule', 'memo');
        $writer->writeLine($csv_header);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    require_once('schedule/personal_logic.csp');
    $logic = GRN_Schedule_PersonalLogic::getInstance();

    $logic->exportEventsToCSV($writer, $login, $setdate, $enddate);

    $writer->close();

    // 一時ファイルに書き出した内容をファイルとして出力
    // 'text/comma-separated-values' <= CSV でこういったMIMETYPEがあるらしい
    cb_prepare_download('schedules.csv', 'application/csv', false);
    $fp = fopen($temp_filename, 'rb');
    if (($size = filesize($temp_filename)) > 0) {
        echo fread($fp, $size);
    }
    fclose($fp);
    // 一時ファイルの削除
    unlink($temp_filename);

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
    $log_params = [];
    $l->noticeEx('export', 'personal_event', $log_params);

    /*
        } else {
            // if error, show the source form

            //Assign Template Name
            $t->setPageInfo($target_name);

            cb_redirect( 'schedule/personal/export1' );
        }
    */
}
