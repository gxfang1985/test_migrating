<?php

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\EventMemberListUtil;

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;
require_once($t->_get_plugin_filepath('function', 'grn_date_format_switch'));
// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

//------------------
$view_state = new \grn\schedule\ViewState();
$view_state_params = $G_INPUT;
unset($view_state_params['uid']);
$view_state->handleRequest($view_state_params);
$members = $view_state->getMembers();

$member_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid']
    : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid']
    : null;
$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate']
    : null;
$event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event']
    : null;
$search_text = array_key_exists('search_text', $G_INPUT)
    ? $G_INPUT['search_text'] : null;
$selected_group_type = array_key_exists('p', $G_INPUT) ? $G_INPUT['p'] : null;

$t->assign('uid', $member_id);
$t->assign('gid', $group_id);
$t->assign('event', $event_id);
$t->assign('search_text', $search_text);
$t->assign('p', $selected_group_type);

//------------------
require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
$t->assign('app_name', $app->getName());

//GTM-1625 Get attendance status setting;
$attendanceStatusLogic = new AttendanceStatusLogic();
$isEnableAttendanceStatus = $attendanceStatusLogic->isEnableAttendanceCheck();

require_once('schedule/system_logic.csp');
$logic = GRN_Schedule_SystemLogic::getInstance();
if ($logic->getAllowFacilitiesName() == '1') {
    $allowFacilitiesName = true;
} else {
    $allowFacilitiesName = false;
}

if ($logic->getAllowFacilitiesNameOnRight() == '1') {
    $nameOnRight = true;
} else {
    $nameOnRight = false;
}
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// 今日を求める
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$today = $tsex->getDate();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

global $G_container_base;
/** @var GRN_Uum $uum */
$uum = $G_container_base->getInstance('uum');
require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$login = $uum->getLoginUser();
$login_id = $login->getOID();
$schedule_name = $login->get('display_name');

if (count($members) > 0) {
    $members = EventMemberListUtil::getMembersInfoForView($login, $members);
    $members = array_filter($members, function ($member) {
        return cb_at($member, 'selected', true) === true;
    });
}

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
// ログインユーザーの各種設定の取得
$unit = $systemlogic->getScheduleUnit();
$showendtime = $personallogic->getShowEndTime($login);
$startwday = $personallogic->getCalendarWeekStart($login);
$hiddenprivate = $systemlogic->getHiddenPrivate();
$showgroup = $systemlogic->getShowOrganize();
$showholiday = $systemlogic->getShowHoliday();

// グループの処理
$group = null;
if ( ! $group_id) {
    $group = $uum->getUserPrimaryGroup($login_id);
    if ($group !== false) {
        $group_id = $group->getOID();
    }
} // 施設グループ
elseif (mb_substr($group_id, 0, 1) == 'f') {
    // 全施設
    if ($group_id == 'f') {
        $group = 'f';
    } else {
        $group = $facility_logic->getFacilityGroup(mb_substr($group_id, 1));
        if ($group) {
            $schedule_name = $group->get('name');
        }
    }
} // Myグループ
elseif (mb_substr($group_id, 0, 1) == 'm') {
    $group = $uum->getMyGroup(mb_substr($group_id, 1));
    if ( ! $group) {
        $group_id = null;
    }
} // よく利用するユーザー
elseif ($group_id == 'r') {
    $group = 'frequent';
} elseif ($group_id == 'virtual') {
    //何もしない
} // 簡易検索
elseif ($group_id == 'search') {
} // 複数ユーザー選択
elseif ($group_id == 'selected') {
} elseif ($group_id == 'login') {
} // 組織
else {
    $group = $uum->getGroup($group_id);
    if ( ! $group) {
        $group_id = null;
    }
}
// 表示するものにアクセス権があるかどうかのチェック
$dynamic_roles = $uum->listGrantedRoles();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_logic::getInstance();

if (is_a($group, 'CB_Group')) {
    $access = $acc_logic->evaluateAccess($login, $group, ['read'],
        $dynamic_roles);

    if ( ! $access) {
        $group = null;
        $group_id = null;
    }
}

// ポップアップ画面からのIDは、変換する
if (mb_substr($member_id, 0, 1) == 'i') {
    $member_id = 'f' . mb_substr($member_id, 1);
}

$frequent_users = null;
$member = null;
// 指定されたメンバーの処理
if ( ! $member_id && is_string($group) && $group == 'f') {
    if ($systemlogic->getAllowAllFacilities()) {
        $facilities = $facility_logic->getOrderedFacilityPartInfoList();
        $facilities = $acc_logic->evaluateAccessesById($login, $facilities,
            ['read'], $dynamic_roles, 'facility');
        if (is_array($facilities) && count($facilities)) {
            $first_facility = reset($facilities);
            $member
                = $facility_logic->getFacility($first_facility['_id']);
            $member_id = 'f' . $member->getOID();
        }
    }
} elseif ( ! $member_id && is_a($group, 'GRN_Facility_FacilityGroup')) {
    // 施設と施設グループで、厳しいほうのアクセス権にする
    $facilities = null;
    $tmp_fgroups = [$group->getOID() => $group];

    $fgroups = $acc_logic->evaluateAccessesById($login, $tmp_fgroups, ['read'],
        $dynamic_roles, 'facilitygroup');
    if (count($fgroups)) {
        $facilities = $facility_logic->getGroupFacilities($group->getOID());
        $facilities = $acc_logic->evaluateAccessesById($login, $facilities,
            ['read'], $dynamic_roles, 'facility');
        if (count($facilities)) {
            $member = reset($facilities);
            $member_id = 'f' . $member->getOID();
        }
    }
} elseif ( ! $member_id && is_a($group, 'CB_Group')) {
    // 組織スケジュールが表示できる場合は組織
    if ($showgroup) {
        $member = $group;
        $member_id = 'g' . $group->getOID();
    } else {
        $users = $uum->getGroupUsers($group->getOID());
        $users = $acc_logic->evaluateAccesses($login, $users, ['read'],
            $dynamic_roles, 'user');
        // 自分がいない場合はリストの最初のユーザーを持ってくる
        if (count($users) > 0) {
            $member = reset($users);
            $member_id = $member->getOID();
        }
    }
} elseif ( ! $member_id && is_a($group, 'GRN_MyGroup')) {
    // 自分がいない場合はリストの最初のユーザーを持ってくる
    $users = $uum->getMyGroupUsers($group->getOID());
    $users = $acc_logic->evaluateAccesses($login, $users, ['read'],
        $dynamic_roles, 'user');
    if (count($users) > 0) {
        $member = reset($users);
        $member_id = $member->getOID();
    } else {
        $facility_ids = $uum->getMyGroupFacilitiesId($group->getOID(), 0, -1,
            null, $login->getOID());
        $facilities = $acc_logic->evaluateAccessesById($login, $facility_ids,
            ['read'], $dynamic_roles, 'facility');
        if (is_array($facilities) && count($facilities)) {
            $first_facility = reset($facilities);
            $member = $facility_logic->getFacility($first_facility);
            $member_id = 'f' . $member->getOID();
        }
    }
} elseif ( ! $member_id && is_string($group) && $group == 'frequent') {
    require_once('grn/uum_util.csp');
    $frequent_users = $uum->getFrequentUsersInfo($login_id);
    $frequent_users = $acc_logic->evaluateAccessesById($login, $frequent_users,
        ['read'], $dynamic_roles, 'user');

    if (count($frequent_users) > 0) {
        $member_info = reset($frequent_users);
        $member = $uum->getUser($member_info['_id']);
        $member_id = $member_info['_id'];
    }
} elseif ( ! $member_id) {
    if (count($members) > 0
        && ($group_id === 'selected' || $group_id === 'fr'
            || $group_id === 'search'
            || $group_id === 'login')
    ) {
        $member = reset($members);
        $member_type = cb_at($member, 'type');
        $member_id = cb_at($member, 'id');

        if ($member_type === 'org') {
            $member = $uum->getGroup($member_id);
            if ( ! $member) {
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);
            }
            $schedule_name = $member->get('name');
            $member_id = 'g' . $member_id;
        } elseif ($member_type === 'facility') {
            $member = &$facility_logic->getFacility($member_id);
            if ($member === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
            }
            $schedule_name = $member->get('name');
            $member_id = 'f' . $member_id;
        } elseif ($member_type === 'user') {
            $member = $uum->getUser($member_id);
            if ( ! $member) {
                cb_throw_error(E_GRN_USER_NOT_FOUND);
            }
            $schedule_name = $member->get('display_name');
        }
    }
} // 施設
elseif (mb_substr($member_id, 0, 1) == 'f') {
    $member = &$facility_logic->getFacility(mb_substr($member_id, 1));
    if ($member === false) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
    }
    $schedule_name = $member->get('name');
} // 組織
elseif (mb_substr($member_id, 0, 1) == 'g') {
    $member = $uum->getGroup(mb_substr($member_id, 1));
    if ( ! $member) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }
    $schedule_name = $member->get('name');
} elseif (mb_substr($member_id, 0, 1) == 'u') {
    $member = $uum->getUser(mb_substr($member_id, 1));
    if ( ! $member) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $schedule_name = $member->get('display_name');
    $member_id = $member->getOID();
} // 人
else {
    $member = $uum->getUser($member_id);
    if ( ! $member) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $schedule_name = $member->get('display_name');
}

// 組み合わせが悪い場合は、ユーザーを優先する
if (is_a($member, 'CB_User') && is_a($group, 'CB_Group')) {
    $format = 'col_user = ' . $member->getOID();
    $users = $uum->getGroupUsers($group->getOID(), 0, -1,
        'tab_cb_user.col_position', $format);
    if ( ! $users) {
        $group = null;
        $group_id = null;
    }
} elseif (is_a($member, 'CB_User') && is_a($group, 'GRN_MyGroup')) {
    $format = 'col_user = ' . $member->getOID();
    $users = $uum->getMyGroupUsers($group->getOID(), 0, -1, $format);
    if ( ! $users) {
        $group = null;
        $group_id = null;
    }
} elseif (is_a($group, 'CB_Group') && is_a($member, 'CB_Group')) {
    if ($group->getOID() != $member->getOID()) {
        $group = null;
        $group_id = null;
    }
} elseif (is_string($group) && $group == 'frequent'
          && is_a($member, 'CB_User')
) {
    if (is_null($frequent_users)) {
        require_once('grn/uum_util.csp');
        $frequent_users = $uum->getFrequentUsersInfo($login_id);
        $frequent_users = $acc_logic->evaluateAccessesById($login,
            $frequent_users, ['read'], $dynamic_roles, 'user');
    }
    $b_found = false;
    // よく利用するユーザーに自分がいるか
    foreach (array_keys($frequent_users) as $key) {
        if ($key == $member_id) {
            $b_found = true;
            break;
        }
    }
    if ( ! $b_found) {
        $group = null;
        $group_id = null;
    }
} elseif (is_a($group, 'GRN_Facility_FacilityGroup')
          && is_a($member, 'GRN_Facility_Facility')
) {
    $facilities = $facility_logic->getGroupFacilities($group->getOID());
    if ( ! array_key_exists($member->getOID(), $facilities)) {
        $group = null;
        $group_id = null;
    }
} // グループIDとユーザーIDの組み合わせがぜんぜんだめ
elseif ((is_a($member, 'CB_User') || is_a($member, 'CB_Group'))
        && (is_a($group, 'GRN_Facility_FacilityGroup')
            || $group == 'f')
) {
    $group = null;
    $group_id = null;
} elseif (is_a($member, 'GRN_Facility_Facility')
          && ( ! is_a($group, 'GRN_Facility_FacilityGroup')
               && ($group != 'f')
               && $group_id !== 'selected'
               && $group_id !== 'search')
) {
    $group = null;
    $group_id = null;
}

// 表示するものにアクセス権があるかどうかのチェック
if (is_object($member)
    && ( ! is_a($member, 'CB_User')
         || ($member->getOID() != $login_id))
) {
    if (is_a($member, 'GRN_Facility_Facility')) {
        // 施設のアクセス権はグループをたどって評価する
        $tmp_array = [$member->getOID() => $member];
        $access = $acc_logic->evaluateAccessesById($login, $tmp_array,
            ['read'], $dynamic_roles, 'facility');
    } else {
        $access = $acc_logic->evaluateAccess($login, $member, ['read'],
            $dynamic_roles);
    }

    if ( ! $access) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
    }
}

$set_hour = 0;
$end_hour = 0;
$personallogic->getViewHour($login, $set_hour, $end_hour);

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();
// 日付の準備
$week = [];
$dateex = new CB_DateEx($date);
$get_settime = $dateex;
$get_endtime = $dateex;

for ($i = 0; $i < 7; ++$i) {
    $week[] = [
        'format'      => $dateex->format(),
        'type'        => $util->getDayType($dateex),
        'date'        => $dateex,
        'get_settime' => $get_settime,
        'get_endtime' => $get_endtime
    ];
    $dateex = clone $dateex;
    $dateex->moveDays(1);
    $get_settime = clone $get_settime;
    $get_settime->moveDays(1);
    $get_endtime = clone $get_endtime;
    $get_endtime->moveDays(1);
}

require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($week[0]['date'],
    $week[6]['date'], $login);

foreach ($week as $key => $week_date) {
    if ($util->isWorkday($week_date['date'], $calendars)) {
        $week[$key]['type'] = 's_date_workday';
    } elseif ($showholiday) {
        if ($util->isHoliday($week_date['date'], $calendars)) {
            $week[$key]['type'] = 's_date_holiday';
        }
    }
}

$shared_calendar
    = $calendar_service->getDaysInfoFromSharedCalendar($week[0]['date'],
    $week[6]['date'], $login);
$calendars = array_merge_recursive($calendars, $shared_calendar);

// カレンダーから余計なデータを削除
if ( ! is_a($member, 'CB_User') || $member->getOID() != $login_id) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 個人データの削除
            if (($calendars[$key1][$key2]['type']
                 == GRN_CALENDAR_TYPE_MEMORIALDAY)
                || ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_USER_MEMO)
            ) {
                unset($calendars[$key1][$key2]);
                continue;
            }
            if ( ! $showholiday) {
                if ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                ) {
                    unset($calendars[$key1][$key2]);
                }
            }
        }
    }
} elseif ( ! $showholiday) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 祝日以外は削除
            if ($calendars[$key1][$key2]['type']
                == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
            ) {
                unset($calendars[$key1][$key2]);
            }
        }
    }
}

if (is_a($member, 'GRN_Facility_Facility')) {
    $title_type = $facility_logic->getFacilityTitle();
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL;
} else {
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
               + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;
}
$schedule_event = [];
$counter = 0;
$work_date = new CB_DateEx($today);
if (is_object($member)) {
    $events = $app->getEventsForWeek(
        $member, $week[0]['get_settime'], $week[6]['get_endtime'], $login,
        $sc_type, $hiddenprivate, $week, true,
        $isEnableAttendanceStatus
    );
    //GTM-1625: ( Note: No support attendance check for facility and group)
    $isUserMember = is_a($member, 'CB_User');
    foreach (array_keys($week) as $date_key) {
        $date_info = &$week[$date_key];
        $counter++;
        $day_event = [];
        // 日付の設定
        $day_event['date_type'] = $date_info['type'];
        $day_event['date'] = $date_info['format'];
        if (array_key_exists($day_event['date'], $calendars)) {
            $day_event['calendar'] = $calendars[$day_event['date']];
        }
        $day_event['event'] = [];

        if (array_key_exists($date_info['format'], $events['allday'])) {
            foreach (
                array_keys($events['allday'][$date_info['format']]) as $key
            ) {
                $event = &$events['allday'][$date_info['format']][$key];
                $temp = [];
                $temp['id'] = $event['id'];
                $temp['type']
                    = $util->getViewEventType($event['event_type'],
                    $event['share']);
                $temp['str_date'] = _getViewHour($date_info['date'],
                    $event['setdate'],
                    $event['enddate'],
                    $event['event_type'], $showendtime, $t, $event);

                if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                    $temp['type'] = 'normal';
                    $temp['str_menu'] = '';
                    $temp['data'] = cb_msg('grn.schedule',
                        'event_hidden');
                    $temp['private'] = true;
                    $temp['str_full_title'] = cb_msg('grn.schedule',
                        'event_hidden');
                } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                    $temp['str_menu'] = $event['event_menu'];
                    $temp['data']
                        = grn_schedule_create_allday_title($date_info['format'],
                        $event);
                    $temp['str_full_title'] = $event['title'];
                    $temp['is_private'] = true;
                } else {
                    $temp['str_menu'] = $event['event_menu'];
                    $temp['data']
                        = grn_schedule_create_allday_title($date_info['format'],
                        $event);
                    $temp['str_full_title'] = $event['title'];
                }

                //$temp['start_date'] = $event['setdate']->format();
                $temp['start_date'] = $event['setdate'];
                //$temp['end_date'] = $event['enddate']->format();
                $temp['end_date'] = $event['enddate'];
                $temp['allday'] = true;
                //GTM-1625
                //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
                if ($isUserMember) {
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                }
                $day_event['event'][] = $temp;
            }
        }
        if (array_key_exists($date_info['format'], $events['normal'])) {
            require_once('schedule/eventfactory.csp');
            $factory = GRN_Schedule_EventFactory::getInstance();
            foreach (
                array_keys($events['normal'][$date_info['format']]) as $key
            ) {
                $event = &$events['normal'][$date_info['format']][$key];

                $temp = [];
                $temp['id'] = $event['id'];
                $temp['type']
                    = $util->getViewEventType($event['event_type'],
                    $event['share']);
                $temp['str_date'] = _getViewHour($date_info['date'],
                    $event['setdatetime'],
                    $event['enddatetime'],
                    $event['event_type'], $showendtime, $t);
                if ($allowFacilitiesName) {
                    $app->addFacilityNameToEventTitle($event, $factory,
                        $event['id'], $nameOnRight);
                }
                if (is_a($member, 'GRN_Facility_Facility')) {
                    $temp['str_menu'] = $event['event_menu'];
                    $temp['data']
                        = $facility_logic->getEventTitle($event['title'],
                        $event['creator_name'], $event['private'], $title_type);
                    $temp['str_full_title'] = $temp['data'];
                    if ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                        $temp['is_private'] = true;
                    } elseif ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                        $temp['str_menu'] = '';
                        $temp['type'] = 'normal';
                        $temp['private'] = true;
                    }
                } else {
                    if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                        $temp['str_menu'] = '';
                        $temp['str_full_title'] = "";
                        $temp['str_private'] = cb_msg('grn.schedule',
                            'event_hidden');
                        $temp['type'] = 'normal';
                        $temp['data'] = cb_msg('grn.schedule',
                            'event_hidden');
                        $temp['private'] = true;
                    } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                        $temp['str_menu'] = $event['event_menu'];
                        $temp['str_full_title'] = $event['title'];
                        $temp['is_private'] = true;
                        $temp['data'] = $event['title'];
                    } else {
                        $temp['str_menu'] = $event['event_menu'];
                        $temp['str_full_title'] = $event['title'];
                        $temp['data'] = $event['title'];
                    }
                }

                //$temp['start_date'] = $event['setdatetime']->format();
                $temp['start_date'] = $event['setdatetime'];
                if ($event['enddatetime']) //$temp['end_date'] = $event['enddatetime']->format();
                {
                    $temp['end_date'] = $event['enddatetime'];
                }
                $temp['conflict'] = array_key_exists('conflict', $event)
                    ? $event['conflict'] : false;
                //GTM-1625
                //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
                if ($isUserMember) {
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                }
                $day_event['event'][] = $temp;

                // ログインユーザーの場合だけ表示時間のチェック
                if ($login_id == $member_id) {
                    $util->checkViewTime($date_info['date'],
                        $event['setdatetime'], $event['enddatetime'], $set_hour,
                        $end_hour);
                }
            }
        }
        // スケジュールの入れ込み
        $schedule_event[] = $day_event;
    }

    // バナーの処理
    $banner_events = [];

    foreach (array_keys($events['banner']) as $key) {
        $event = &$events['banner'][$key];
        $work_date->year = $event['setdate']->year;
        $work_date->month = $event['setdate']->month;
        $work_date->day = $event['setdate']->day;

        $b_add = false;
        foreach (array_keys($banner_events) as $key1) {
            $banner = end($banner_events[$key1]);

            // 開始時間が終了時間の後
            if ($work_date->compare($banner['enddate']) > 0) {
                // この行に追加
                $b_add = true;

                // データの挿入
                $temp = [
                    'id'      => $event['id'],
                    'setdate' => $event['setdate'],
                    'enddate' => $event['enddate']
                ];
                $temp['type'] = $util->getViewEventType($event['event_type'],
                    $event['share']);
                if ($week[0]['date']->compare($event['setdate']) >= 0) {
                    $temp['date'] = $week[0]['format'];
                } else {
                    $temp['date'] = $event['setdate']->format();
                }
                $temp['term'] = $util->getBannerTerm($event['setdate'],
                    $event['enddate'], $week[0]['date'], $week[6]['date']);
                //$temp['data'] = $event['title'];
                $temp['str_date']
                    = grn_schedule_create_banner_title($temp['date'],
                    $event, false);
                $temp['str_menu'] = $event['event_menu'];
                $temp['str_full_title'] = $event['title'];
                $temp['data'] = $temp['str_date']
                                . '<span class="spanTitleDisplay">'
                                . $temp['str_full_title']
                                . '</span><div style="display:none;"><span class="spanMenu">'
                                . $temp['str_menu']
                                . '</span><span class="spanFullTitle">'
                                . $temp['str_full_title']
                                . '</span></div>';
                $banner_events[$key1][] = $temp;

                break;
            }
        }

        if ($b_add) {
            continue;
        }

        // データの挿入
        $temp = [
            'id'      => $event['id'],
            'setdate' => $event['setdate'],
            'enddate' => $event['enddate']
        ];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        if ($week[0]['date']->compare($event['setdate']) >= 0) {
            $temp['date'] = $week[0]['format'];
        } else {
            $temp['date'] = $event['setdate']->format();
        }
        $temp['term'] = $util->getBannerTerm($event['setdate'],
            $event['enddate'], $week[0]['date'], $week[6]['date']);
        //$temp['data'] = $event['title'];
        $temp['str_date'] = grn_schedule_create_banner_title($temp['date'],
            $event, false);
        $temp['str_menu'] = $event['event_menu'];
        $temp['str_full_title'] = $event['title'];
        $temp['data'] = $temp['str_date']
                        . '<span class="spanTitleDisplay">'
                        . $temp['str_full_title']
                        . '</span><div style="display:none;"><span class="spanMenu">'
                        . $temp['str_menu']
                        . '</span><span class="spanFullTitle">'
                        . $temp['str_full_title'] . '</span></div>';
        // 改行
        $banner_events[] = [$temp];

    }

    $access = null;
    if (is_a($member, 'CB_User') && $login_id == $member_id) {
        $access = ['read' => '1', 'add' => '1'];
    } else {
        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わない
        $user_groups = $uum->getUserGroupsInfo($login_id, true);
        $user_roles = $uum->getUserRolesInfo($login_id, true);
        // 施設だったら施設グループと合わせて評価して、厳しいほうにする
        if (is_a($member, 'GRN_Facility_Facility')) {
            $affiliation_group
                = $facility_logic->getFacilityAffiliationGroup($member->getOID());
            if ( ! $affiliation_group) {
                // 施設グループに所属していない
                $access = $acc_logic->getEvaluateAccessList($login,
                    $member,
                    ['read', 'add'],
                    'read_add',
                    $dynamic_roles,
                    $user_groups,
                    $user_roles);

            } else {
                $affiliation_groups
                    = [$affiliation_group->getOID() => $affiliation_group];

                $accesses = $acc_logic->getEvaluateAccessesListById($login,
                    $affiliation_groups,
                    'facilitygroup',
                    ['read', 'add'],
                    $dynamic_roles);

                $access_group = $accesses[$affiliation_group->getOID()];

                $access = $acc_logic->getEvaluateAccessList($login,
                    $member,
                    ['read', 'add'],
                    'read_add',
                    $dynamic_roles,
                    $user_groups,
                    $user_roles);
                foreach (['read', 'add'] as $auth) {
                    if ($access_group[$auth] == GRN_SCHD_ACCESS_DENY) {
                        $access[$auth] = GRN_SCHD_ACCESS_DENY;
                    }
                }
            }
        } else {
            $access = $acc_logic->getEvaluateAccessList($login,
                $member,
                ['read', 'add'],
                'read_add',
                $dynamic_roles,
                $user_groups,
                $user_roles);
        }
    }


    $users_event = [
        'user_id'        => $member_id,
        'group_id'       => $group_id,
        'schedule_event' => $schedule_event,
        'banner_event'   => $banner_events,
        'access'         => $access,
    ];

    // カスタマイズ項目処理
    foreach (array_keys($users_event['schedule_event']) as $key) {
        $events = &$users_event['schedule_event'][$key];
        $date = new CB_Date();
        $date->parse($users_event['schedule_event'][$key]["date"]);
        $setdatetime = new CB_DateTime();
        foreach (array_keys($events['event']) as $key2) {
            $event = &$events['event'][$key2];
            if (array_key_exists('private', $event) === true
                && $event['private'] === true
            ) {
                continue;
            }
            $setdatetime = $event['start_date'];
            $enddatetime = $event['end_date'];
            if ( ! @$event['allday']) {
                if (_grn_schedule_compare_date($date, $setdatetime) === 0) {
                    $showtime
                        = sprintf('%02d:%02d <span class="EndTimeDisplay"> - %02d:%02d',
                        $setdatetime->hour, $setdatetime->minute,
                        $enddatetime->hour, $enddatetime->minute);
                } else {
                    $showtime = sprintf('%02d/%02d', $setdatetime->month,
                        $setdatetime->day);
                }
                $title = $facility_logic->getDataTitle($event['id']);
                $event['data'] = $showtime . " " . $event['data'];
            } else {
                $event['data'] .= $facility_logic->getDataTitle($event['id']);
            }
        }
    }

    $t->assign('schedule', $users_event);
}

$t->assign('schedule_params', [
    'set_hour'   => $set_hour,
    'end_hour'   => $end_hour,
    'unit'       => $unit,
    'col_span'   => (int)(60 / $unit) * ($end_hour - $set_hour),
    'start_date' => $week[0]['date'],
    'end_date'   => $week[6]['date']
]);

$t->assign('user_id', $member_id);
$t->assign('group_id', $group_id);
$t->assign('bdate', $week[0]['format']);

//GTM-2140
array_walk($members, function (&$member) {
    if ($member['type'] === 'facility') {
        $member['id'] = 'f' . cb_at($member, 'id');
    } elseif ($member['type'] === 'org') {
        $member['name'] = cb_plain_msg('grn.common', 'title_group',
            ['name' => cb_at($member, 'name')]);
        $member['id'] = 'g' . cb_at($member, 'id');
    }
});

$t->assign('members', $members);
//GTM-2140

// Set office informatoion into smarty.
$timezone = CB_I18N::getInstance()->getUserTimezone($login);
$t->assign('timezone_name', $timezone);

$page_title = $login->get('display_name');
$page_title .= " " . cb_date_format('DateFull_YMD', $date);

$referer = [];
$referer_params = ['uid', 'gid', 'bdate', 'event'];
foreach ($referer_params as $key) {
    if (array_key_exists($key, $G_INPUT)) {
        $referer[$key] = $G_INPUT[$key];
    }
}
$referer['page'] = 'schedule/personal_week';
$referer['name'] = $page_title;
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession('schedule.referer');
$session_values = $session->getValues();
$unset_keys = [];
foreach ($session_values as $key => $value) {
    if (isset($value['page']) && $value['page'] == $referer['page']) {
        $unset_keys[] = $key;
    }
}
foreach ($unset_keys as $key) {
    $session->unset_by($key);
}
$referer_key = md5(uniqid(rand(), true));
$session->set($referer_key, $referer);
$t->assign('referer_key', $referer_key);

// ナビカレンダーを表示する・隠す設定
$session_navi_calendar
    = $session_manager->getSession('grn.schedule.navi_calendar');
$navi_cal_display_flag = $session_navi_calendar->get('navi_cal_display_flag');
if ($navi_cal_display_flag == null || $navi_cal_display_flag == false) {
    $navi_cal_display_flag = false;
} else {
    $navi_cal_display_flag = true;
}
$t->assign('navi_cal_display_flag', $navi_cal_display_flag);
$t->assign('schedule_name', $schedule_name);
// Smarty実行
global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);
$t->skipWarning();
$t->display(cb_get_pagename() . '.tpl');

function _grn_schedule_compare_date(& $date1, & $date2)
{
    $ydiff = $date1->year - $date2->year;
    if ($ydiff !== 0) {
        return $ydiff;
    }

    $mdiff = $date1->month - $date2->month;
    if ($mdiff !== 0) {
        return $mdiff;
    }

    $ddiff = $date1->day - $date2->day;
    if ($ddiff !== 0) {
        return $ddiff;
    }

    return 0;
}

//GRN2-3057
function _getViewHour(
    $date,
    $setdatetime,
    $enddatetime,
    $type,
    $showendtime = false,
    $t,
    $event = null
) {
    $str_hour = '';
    if (($type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
        == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
    ) {
        // GRN2-3034
        $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
        if ($event && @$event['timezone'] == $current_tz) {
            return '';
        } else {
            $dateex = new CB_DateEx($date);
            if ($dateex->compare($setdatetime) == 0) {
                $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
                    $setdatetime, $t);
            } else {
                $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
                    $setdatetime, $t);
            }

            // end time
            if ($showendtime) {
                $time_splitter = cb_msg('grn.schedule', 'time_splitter');
                $str_hour .= $time_splitter;
                if ($dateex->compare($enddatetime) == 0) {
                    $str_hour .= "<span class='EndTimeDisplay'>"
                                 . cb_date_format('TimeShort_HM', $enddatetime)
                                 . "</span>";
                } else {
                    $str_hour .= cb_date_format('DateShort_MD', $enddatetime);
                }
            }
        }
    } elseif (($type & GRN_SCHEDULE_EVENT_TYPE_START)
              == GRN_SCHEDULE_EVENT_TYPE_START
    ) {
        $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
            $setdatetime, $t);
    } else {
        static $dateex = false;
        if ($dateex === false) {
            $dateex = new CB_DateEx($date);
        } else {
            $dateex->year = $date->year;
            $dateex->month = $date->month;
            $dateex->day = $date->day;
        }

        if ($dateex->compare($setdatetime) == 0) {
            $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
                $setdatetime, $t);
        } // 日付が違う場合は、日付を表示
        else {
            $str_hour .= _print_personal_month_grn_date_format_switch('DateShort_MD',
                $setdatetime, $t);
        }

        // 終了時刻を表示する設定の場合
        if ($showendtime) {
            static $time_splitter = false;
            if ($time_splitter === false) {
                $time_splitter = cb_msg('grn.schedule', 'time_splitter');
            }

            $str_hour .= $time_splitter;
            if ($dateex->compare($enddatetime) == 0) {
                $str_hour .= "<span class='EndTimeDisplay'>"
                             . _print_personal_month_grn_date_format_switch('TimeShort_HM',
                        $enddatetime, $t) . "</span>";
            } // 日付が違う場合は、日付を表示
            else {
                $str_hour .= "<span class='EndTimeDisplay'>"
                             . _print_personal_month_grn_date_format_switch('DateShort_MD',
                        $enddatetime, $t) . "</span>";
            }

        }
    }

    return $str_hour;
}

function _print_personal_month_grn_date_format_switch($format, $date, $smarty)
{
    return smarty_function_grn_date_format_switch([
        "date"   => $date,
        "format" => $format,
    ], $smarty);
}
//GRN2-3057

