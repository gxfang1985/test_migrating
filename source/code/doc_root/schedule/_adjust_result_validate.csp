<?php

use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\schedule\ScheduleMemberLogic;

if ( ! isset($t) || ! is_a($t, 'GRN_Smarty')) {
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();
}

$user_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid'] : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
$event_id = array_key_exists('eid', $G_INPUT) ? $G_INPUT['eid'] : null;

$t->assign('user_id', $user_id);
$t->assign('group_id', $group_id);
$t->assign('event_id', $event_id);

$bdate = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;

require_once('fw/date.csp');
$default_date = new CB_Date();
if ( ! $default_date->parse($bdate)) {
    // 今日を求める
    $tsex = new CB_TimeStampEx();
    $default_date = $tsex->getDate();
}

$t->assign('default_date0', $default_date);
$t->assign('default_date1', $default_date);
$t->assign('default_date2', $default_date);
$t->assign('default_date3', $default_date);
$t->assign('default_date4', $default_date);
$t->assign('bdate', $default_date->format());

$sUID = array_key_exists('sUID', $G_INPUT) ? $G_INPUT['sUID'] : [];
$sITEM = array_key_exists('sITEM', $G_INPUT) ? $G_INPUT['sITEM'] : [];

// 検索対象が一つも選ばれていない
if (( ! is_array($sUID) || count($sUID) <= 0)
    && ( ! is_array($sITEM)
         || count($sITEM) <= 0)
) {
    cb_throw_error(E_GRN_SCHD_NOT_MEMBER);
}

//uum
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();

// 予定メニュー
include('_menus.csp');

$t->assign('use_private', $systemlogic->getUsePrivate());

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

$members_count = 0;
$user_id_list = [];
$group_id_list = [];
$member_id_list_for_view = [];
foreach ($sUID as $uid) {
    if (mb_substr($uid, 0, 1) == 'g') {
        $gid = mb_substr($uid, 1);
        $group_id_list[$gid] = $gid;
    } else {
        $user_id_list[$uid] = $uid;
    }
}

$facility_id_list = [];
$facility_id_list_for_view = [];
foreach ($sITEM as $selected_fid) {
    $facility_id_list[$selected_fid] = $selected_fid;
}

// アクセス権のチェック
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
$dynamic_role = $uum->listGrantedRoles();

$add_permitted = true;

// ユーザーへのアクセス権をチェック
if (is_array($user_id_list) && count($user_id_list) > 0) {
    $user_access_list = $acc_logic->getEvaluateAccessesListById($login,
        $user_id_list,
        'user',
        ['read', 'add'],
        $dynamic_role);
    foreach ($user_access_list as $access) {
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
        }
        if ($access['add'] == GRN_SCHD_ACCESS_DENY) {
            $add_permitted = false;
        }
    }

    $t->assign('user_access_list', $user_access_list);
    $users_info = $uum->getUsersInfo($user_id_list,
        ['col_display_name', 'col_valid']);
    $t->assign('users_info', $users_info);

    $members_count += count($users_info);
    // ユーザー情報が取得できたIDをメンバーに入れる
    foreach ($user_id_list as $key => $val) {
        if (array_key_exists($val, $users_info)) {
            $member_id_list_for_view[$key] = $val;
        }
    }

    unset($user_id_list);
}

// グループへのアクセス権をチェック
if (is_array($group_id_list) && count($group_id_list) > 0) {
    $group_access_list = $acc_logic->getEvaluateAccessesListById($login,
        $group_id_list,
        'group',
        ['read', 'add'],
        $dynamic_role);
    foreach ($group_access_list as $access) {
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
        }
        if ($access['add'] == GRN_SCHD_ACCESS_DENY) {
            $add_permitted = false;
        }
    }

    // テンプレート側では組織はgXX形式でアクセス権配列にアクセスするので付与する
    $group_access_list_for_view = [];
    foreach ($group_access_list as $key => $group_access) {
        $group_access_list_for_view['g' . $key] = $group_access;
    }
    $t->assign('group_access_list', $group_access_list_for_view);

    $groups_info = $uum->getGroupInfoList($group_id_list);
    $t->assign('groups_info', $groups_info);

    $members_count += count($groups_info);
    // 組織情報が取得できたIDをメンバーに入れる
    foreach ($group_id_list as $key => $val) {
        if (array_key_exists($gid, $groups_info)) {
            $member_id_list_for_view['g' . $key] = 'g' . $val;
        }
    }

    unset($group_id_list);
}

// 施設へのアクセス権をチェック
if (is_array($facility_id_list) && count($facility_id_list) > 0) {
    $target_facility_id_list = $facility_id_list;
    $facility_access_list = $acc_logic->getFacilityGroupAccessList($login,
        $target_facility_id_list,
        ['read', 'add'],
        $dynamic_role);
    $facility_access_list += $acc_logic->getEvaluateAccessesListById($login,
        $target_facility_id_list,
        'facility',
        ['read', 'add'],
        $dynamic_role);
    foreach ($facility_access_list as $access) {
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
        }
    }

    $t->assign('facility_access_list', $facility_access_list);
    $facilities_info = $facility_logic->getFacilitiesInfo($facility_id_list,
        CB_DATABASE_NO_LOCK);
    // GTM-1676
    ScheduleFacilityApprovalSetting::evaluateSettingForFacilityObjects($facilities_info);
    $t->assign('facilities_info', $facilities_info);

    // 施設情報が取得できたIDを施設メンバーに入れる
    foreach ($facility_id_list as $key => $val) {
        if (array_key_exists($val, $facilities_info)) {
            $facility_id_list_for_view[$key] = $val;
        }
    }
}

// ユーザー情報が取れないユーザー指定があった場合のために再度チェック
if (( ! is_array($member_id_list_for_view)
      || count($member_id_list_for_view) <= 0)
    && ( ! is_array($facility_id_list_for_view)
         || count($facility_id_list_for_view) <= 0)
) {
    cb_throw_error(E_GRN_SCHD_NOT_MEMBER);
}

// 参加者(ユーザー＋グループ)
$t->assign('members_count', $members_count);
$selected_members_ids = array_keys($member_id_list_for_view);
$selected_members = ScheduleMemberLogic::getInstance()
                                       ->getAttendeesRenderFromParam($selected_members_ids,
                                           false, false);
$t->assign('selected_members', $selected_members);
$t->assign('selected_members_ids', $selected_members_ids);

// 施設
$t->assign('selected_facilities', $facility_id_list_for_view);

// 検索する候補日
$sdate_list_count = 0;
$adjust_display = array_key_exists('adjust_display', $G_INPUT)
    ? $G_INPUT['adjust_display'] : ['0' => true];
foreach ($adjust_display as $key => $display) {
    if ($display == true) {
        $start_prefix = 'target_' . $key;
        if (array_key_exists($start_prefix . '_year', $G_INPUT) == false) {
            break;
        }
        $date = new CB_Date();
        $date->year = array_key_exists($start_prefix . '_year', $G_INPUT)
            ? $G_INPUT[$start_prefix . '_year'] : 0;
        $date->month = array_key_exists($start_prefix . '_month', $G_INPUT)
            ? $G_INPUT[$start_prefix . '_month'] : 0;
        $date->day = array_key_exists($start_prefix . '_day', $G_INPUT)
            ? $G_INPUT[$start_prefix . '_day'] : 0;
        $t->assign('default_date' . $key, $date);
        $sdate_list_count++;
    }
}

$t->assign('sdate_list_count', $sdate_list_count);

require_once('schedule/personal_logic.csp');
$personal_logic = GRN_Schedule_PersonalLogic::getInstance();
$personal_logic->getViewHour($login, $set_hour, $end_hour);

$set_time = new CB_Time();
$end_time = new CB_Time();

if (array_key_exists('target_start_hour', $G_INPUT) === true) {
    $set_time->hour = intval($G_INPUT['target_start_hour']);
} else {
    $set_time->hour = $set_hour;
}
$t->assign('set_time', $set_time);

if (array_key_exists('target_end_hour', $G_INPUT) === true) {
    $end_time->hour = intval($G_INPUT['target_end_hour']);
} else {
    $end_time->hour = $end_hour;
}
$t->assign('end_time', $end_time);


if (array_key_exists('term_hour', $G_INPUT) === true
    && $G_INPUT['term_hour'] !== ''
) {
    $term_hour = intval($G_INPUT['term_hour']);
    $t->assign('term_hour', $term_hour);
}
if (array_key_exists('term_minute', $G_INPUT) === true
    && $G_INPUT['term_minute'] !== ''
) {
    $term_minute = intval($G_INPUT['term_minute']);
    $t->assign('term_minute', $term_minute);
}

require_once('schedule/system_logic.csp');
$system_logic = GRN_Schedule_SystemLogic::getInstance();
$t->assign('minute_interval', $system_logic->getScheduleUnit());

// 検索条件
$searchMethod = 'OR';
if (array_key_exists('searchMethod', $G_INPUT) === true
    && $G_INPUT['searchMethod'] === 'AND'
) {
    $searchMethod = 'AND';
}
$t->assign('searchMethod', $searchMethod);

// exception hours
$event_around = array_key_exists('event_around', $G_INPUT)
    ? $G_INPUT['event_around'] : false;
$around_time = array_key_exists('around_time', $G_INPUT)
    ? $G_INPUT['around_time'] : null;
$t->assign('event_around', $event_around);
$t->assign('around_time', $around_time);

require_once('schedule/search_logic.csp');
$start_time = new CB_Time();
$start_time->hour = GRN_SCHEDULE_EXCEPT_START_HOUR;
$end_time = new CB_Time();
$end_time->hour = GRN_SCHEDULE_EXCEPT_END_HOUR;
$except_hours = [];
$except_hours[0] = ['start_time' => $start_time, 'end_time' => $end_time];
$next_key = 1;
foreach ($G_INPUT as $key => $value) {
    $matches = [];
    if (preg_match('#^except_hours_(\d+)$#', $key, $matches)) {
        $num = $matches[1];
        if ($value && isset($G_INPUT['except_start_' . $num . '_hour'])
            && isset($G_INPUT['except_end_' . $num . '_hour'])
        ) {
            $start_time = new CB_Time();
            $start_time->hour = $G_INPUT['except_start_' . $num . '_hour'];
            $end_time = new CB_Time();
            $end_time->hour = $G_INPUT['except_end_' . $num . '_hour'];
            $except_hours[$num] = [
                'start_time' => $start_time,
                'end_time'   => $end_time
            ];
            if ($num >= $next_key) {
                $next_key = $num + 1;
            }
        }
    }
}
$t->assign('except_hours', $except_hours);
$t->assign('next_key', $next_key);

require_once('schedule/adjust_util.csp');
$around_time = array_key_exists('around_time', $G_INPUT)
    ? $G_INPUT['around_time'] : null;
$around_time_options
    = GRN_ScheduleAdjustUtil::getAroundTimeOptions($around_time);
$t->assign('around_time_options', $around_time_options);

$except_start_hour = new CB_Time();
$except_start_hour->hour = array_key_exists('except_start_hour', $G_INPUT)
    ? $G_INPUT['except_start_hour'] : GRN_SCHEDULE_EXCEPT_START_HOUR;
$except_end_hour = new CB_Time();
$except_end_hour->hour = array_key_exists('except_end_hour', $G_INPUT)
    ? $G_INPUT['except_end_hour'] : GRN_SCHEDULE_EXCEPT_END_HOUR;
$t->assign('except_start_hour', $except_start_hour);
$t->assign('except_end_hour', $except_end_hour);

$page_constraint = 'schedule/adjust_constraint';
$t->assign('form_name', $page_constraint);

$backlink = cb_pageurl('schedule/index');
$referer_key = array_key_exists('referer_key', $G_INPUT)
    ? $G_INPUT['referer_key'] : null;
$referer_exists = false;
if ($referer_key) {
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession('schedule.referer');
    $referer = $session->get($referer_key);
    if (is_array($referer)) {
        // page title
        $page_title = grn_get_page_display_name($page_constraint);
        $t->assign('page_title', $page_title);
        // site position 
        $t->assign(
            'site_position', [
                $referer,
                [
                    'page' => "",
                    'name' => cb_msg('grn.schedule', 'adjust_site_position')
                ]
            ]
        );
        $referer_exists = true;

        $page = 'schedule/index';
        if (array_key_exists('page', $referer) === true) {
            $page = $referer['page'];
        }

        $backlink = cb_pageurl($page);
    }
}
if ($referer_exists === false) {
    $page = 'schedule/index';
    // page title
    $page_title = grn_get_page_display_name($page_constraint);
    $t->assign('page_title', $page_title);
    // site position 
    $t->assign(
        'site_position', [
            [
                'page' => 'schedule/index',
                'name' => grn_get_page_display_name('schedule/schedule_index')
            ],
            [
                'page' => '',
                'name' => cb_msg('grn.schedule', 'adjust_site_position')
            ]
        ]
    );
}

$t->assign('referer_key', $referer_key);
$t->assign('backlink', $backlink);
$t->assign('page', $page);

