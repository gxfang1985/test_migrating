<?php

use grn\grn\JSONResponse;
use grn\schedule\EventMemberListUtil;
use grn\schedule\ScheduleMemberLogic;

if (0 == strcasecmp(cb_at($_SERVER, 'REQUEST_METHOD'), 'POST')) {
    global $G_INPUT;
    global $G_state_set;
    $G_state_set->set('html_should_be_closed', false);
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('error_page_type', 'json');

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();

    $members = cb_at($G_INPUT, 'members', "");

    $members
        = grn\schedule\EventMemberParamUtil::parseParamListValues($members);

    //Privileges
    $login = cb_get_login_user();
    $authorities = ['read'];

    $filtered_members = EventMemberListUtil::filterMembersForView($login,
        $members, $authorities);
    $members_for_view = EventMemberListUtil::getMembersInfoForView($login,
        $filtered_members);

    $user_ids = [];
    $group_ids = [];
    $facility_ids = [];
    $user_group_ids = [];

    foreach ($members_for_view as $member) {
        $id = cb_at($member, 'id');
        switch (cb_at($member, 'type')) {
            case 'user':
                $user_ids[] = $id;
                $user_group_ids[] = $id;
                break;
            case 'org':
                $group_ids[] = $id;
                $user_group_ids[] = 'g' . $id;
                break;
            case 'facility':
                $facility_ids[] = $id;
                break;
        }
    }

    $users_orgs = ScheduleMemberLogic::getInstance()
                                     ->getAttendeesRenderFromParam($user_group_ids,
                                         false, false);
    $t->assign('users_orgs', $users_orgs);

    //Selected facilities
    require_once('schedule/system_logic.csp');
    $system_logic = GRN_Schedule_SystemLogic::getInstance();
    $allow_all_facilities = $system_logic->getAllowAllFacilities();
    $t->assign('allow_all_facilities', $allow_all_facilities);

    $dynamic_roles = $uum->listGrantedRoles();

    if ($allow_all_facilities) {
        $facilities_tmp = $facility_logic->getOrderedFacilityPartInfoList();

        $facilities_order = array_keys($facilities_tmp);

        $facilities_tmp = $acc_logic->evaluateAccessesById(
            $login, $facilities_tmp, ['read'], $dynamic_roles, 'facility'
        );
        $all_facilities = [];
        foreach ($facilities_order as $key) {
            if (array_key_exists($key, $facilities_tmp)) {
                $all_facilities[$key] = $facilities_tmp[$key];
            }
        }

        $all_facilities = ScheduleMemberLogic::getInstance()
                                             ->getFacilitiesRender($all_facilities,
                                                 true);
        $t->assign('all_facilities', $all_facilities);
        $t->assign('show_affiliation_group', true);

        $t->assign('default_group_name',
            cb_msg('grn/schedule', 'facility_all'));
    } else {
        $t->assign('show_affiliation_group', false);
        $t->assign('default_group_name',
            cb_msg('grn/schedule', 'choice_facility_group'));
    }
    $group_id = 'f';
    $extra_node = true;
    $t->assign('group_id', $group_id);

    $facilities = ScheduleMemberLogic::getInstance()
                                     ->getFacilitiesRenderFromParam($facility_ids);
    $t->assign('facilities', $facilities);

    //Facilities Tree
    require_once('_view_util.csp');

    $tree_data
        = GRN_Schedule_Dropdown_Util::makeFacilityGroupsTreeMenu(cb_get_pagename(),
        $group_id, $extra_node);

    $t->assign('fgroup_list', $tree_data['org']);
    $t->assign('fgroup_selected_id', $tree_data['selected_id']);
    $t->assign('ftree_name', cb_get_pagename());
    $t->assign('ftree_async_page', "schedule/json/accessible_facility_tree");

    require_once('fw/session_manager.csp');
    $sm = CB_SessionManager::getInstance();
    $sm->destroy(cb_get_pagename());

    $t->assign(
        'add_plugin', [
            'name'   => 'schedule',
            'params' => [
                'action'       => ['read'],
                'session_name' => cb_get_pagename()
            ]
        ]
    );

    $t->assign('show_organize',
        $system_logic->getShowOrganize() ? true : false);

    $t->assign('page_name', cb_get_pagename());

    $content = $t->fetch(cb_get_pagename() . '.tpl');
    $json = JSONResponse::create();
    $json->response(['content' => $content]);
}
