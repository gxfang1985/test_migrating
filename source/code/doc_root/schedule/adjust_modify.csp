<?php

use grn\schedule\ScheduleMemberLogic;

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

require_once("grn/controller.csp");

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('schedule/adjust_modify', true);

$event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event'] : null;
$user_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid'] : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$login = $uum->getLoginUser();
$login_id = $login->getOID();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date = null;
}

$event = $app->getEvent($login, $event_id, $date);
if ( ! $event) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
}

// アクセス権のチェック
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
$dynamic_roles = $uum->listGrantedRoles();
$access = $acc_logic->getEventAccess($login, $event, ['read', 'modify'],
    $dynamic_roles);

if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
}

if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
}

if ( ! is_a($event, 'GRN_Schedule_TemporaryEvent')) {
    cb_throw_error(E_GRN_SCHD_ALREADY_DETERMIN_EVENT);
}

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();

if (is_array($event->facilities) && count($event->facilities) > 0) {
    $f_settings
        = $facility_logic->getFacilitySetting(array_keys($event->facilities));
    foreach (array_keys($event->facilities) as $key) {
        $object = &$event->facilities[$key];
        $faid = $object->getOID();
        $modify_user = $facility_logic->getModifyUserByPriority($f_settings,
            $faid);
        // 登録者にのみ変更を許可する
        if ($modify_user === 'creator') {
            // 施設で登録者しか変更を許していない場合
            if ((is_array($event->facilities) && count($event->facilities) > 0)
                || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                    && $event->isORSearch())
            ) {
                require_once('schedule/facility_privilege.csp');
                $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
                if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                        $event->facilities, 'OR')
                     && ((is_a($event->creator, 'CB_User')
                          && $login_id != $event->creator->getOID())
                         || is_string($event->creator))
                ) {
                    cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                }
            }
        } // 登録者と共有メンバーに変更を許可する
        elseif ($modify_user === 'member') {
            // 施設で登録者と共有メンバーしか変更を許していない場合
            if ((is_array($event->facilities) && count($event->facilities) > 0)
                || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                    && $event->isORSearch())
            ) {
                require_once('schedule/facility_privilege.csp');
                $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
                if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                        $event->facilities, 'OR')
                     && (
                         (is_array($event->users)
                          && ! array_key_exists($login_id, $event->users))
                         || is_null($event->users)
                     )
                     && ((is_a($event->creator, 'CB_User')
                          && $login_id !== $event->creator->getOID())
                         || is_string($event->creator))
                ) {
                    cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                }
            }
        }
    }
}

// 予定メニュー
include('_menus.csp');

// アクセス権などのチェック
include('_modify_facilities.csp');

// 上部に表示するスケジュールデータの設定
include('_member_day.csp');
$t->assign('disable_link', true);             // 登録画面ではスケジュール内のリンクはOff

// 非公開が登録できるかどうか
$t->assign('use_private', $systemlogic->getUsePrivate());
$t->assign('minute_interval', $systemlogic->getScheduleUnit());
$t->assign('show_organize', $systemlogic->getShowOrganize() ? true : false);

$t->assign('show_group_role',
    ScheduleMemberLogic::getInstance()->isAllowSettingGroupRoleToWatchers());

$schedule_event = [
    'event_id'   => $event_id,
    'title'      => $event->detail,
    'selectmenu' => $event->menu,
    'menucolor'  => $event->menucolor,
    'memo'       => $event->memo,
];

// アドレスデータ
if ( ! is_null($event->company_name)
     ||
     ! is_null($event->zip_code)
     ||
     ! is_null($event->physical_address)
     ||
     ! is_null($event->map)
     ||
     ! is_null($event->route)
     ||
     ! is_null($event->company_telephone_number)
     ||
     ! is_null($event->facsimile_number)
     ||
     ! is_null($event->company_url)
) {
    $address = [];
    $address['company_name'] = $event->company_name;
    $address['zip_code'] = $event->zip_code;
    $address['physical_address'] = $event->physical_address;
    $address['map_image'] = $event->map;
    $t->assign('mp', array_key_exists('mp', $G_INPUT) ? $G_INPUT['mp'] : null);
    $address['route'] = $event->route;
    $address['route_time'] = $event->route_time;
    $address['route_fare'] = $event->route_fare;
    $address['company_telephone_number'] = $event->company_telephone_number;
    $address['facsimile_number'] = $event->facsimile_number;
    $address['URL'] = $event->company_url;

    $schedule_event['address'] = $address;
}

// 公開/非公開
if ($event->private) {
    if (is_array($event->notify_address) && count($event->notify_address) > 0) {
        $schedule_event['private_setting'] = GRN_PRIVATE_SETTING_MANAGED;
        $schedule_event['notify_address'] = ScheduleMemberLogic::getInstance()
                                                               ->getNotifyAddressRender($event->notify_address);
    } else {
        $schedule_event['private_setting'] = GRN_PRIVATE_SETTING_PRIVATE;
    }
} else {
    $schedule_event['private_setting'] = GRN_PRIVATE_SETTING_PUBLIC;
}

// 時間の設定
$temporary = [];
if ($event->isORSearch()) {
    foreach ($event->setdates as $facility_data) {
        $facility_dates = [];
        foreach ($facility_data['dates'] as $tp_id => $temp_date) {
            $facility_dates[] = [
                'temporary_id' => $tp_id,
                'setdatetime'  => $temp_date['setdatetime'],
                'enddatetime'  => $temp_date['enddatetime']
            ];
        }
        $temporary[]
            = [
            'facility_name' => $facility_data['facility']->get('name'),
            'dates'         => $facility_dates
        ];
    }
    $schedule_event['temporary_type'] = 'or';
} else {
    foreach ($event->setdates as $tp_id => $temp_date) {
        $temporary[] = [
            'temporary_id' => $tp_id,
            'setdatetime'  => $temp_date['setdatetime'],
            'enddatetime'  => $temp_date['enddatetime']
        ];
    }
    $schedule_event['temporary'] = $temporary;
}
$schedule_event['temporary'] = $temporary;

$groups_id = [];
if (is_array($event->groups) && count($event->groups) > 0) {
    foreach (array_keys($event->groups) as $key) {
        $member = &$event->groups[$key];
        if ( ! $member) {
            continue;
        }

        $groups_id[] = $member->getOID();
    }
}


$schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                              ->getAttendeesRenderFromEvent($event);

$groups_info = $uum->getGroupInfoList($groups_id);
$t->assign('groups_info', $groups_info);

// 設備
$facilities = [];
if (is_array($event->facilities) && count($event->facilities) > 0) {
    foreach (array_keys($event->facilities) as $key) {
        $member = &$event->facilities[$key];
        if ( ! $member) {
            continue;
        }

        $facilities[$member->getOID()] = $member->get('name');
    }
}
$schedule_event['facilities'] = $facilities;

$t->assign('schedule_event', $schedule_event);
$t->assign('user_id', $user_id);
$t->assign('group_id', $group_id);
$t->assign('bdate', $str_date);

require_once('fw/session_manager.csp');
$sm = CB_SessionManager::getInstance();
$sm->destroy(cb_get_pagename());
$sm->destroy(cb_get_pagename() . '/view');

$t->assign('view_plugin', [
    'name'   => 'schedule',
    'params' => [
        'action'       => ['read'],
        'session_name' => cb_get_pagename() . '/view'
    ]
]);

$referer_key = array_key_exists('referer_key', $G_INPUT)
    ? $G_INPUT['referer_key'] : null;
$referer_exists = false;
if ($referer_key) {
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession('schedule.referer');
    $referer = $session->get($referer_key);
    if (is_array($referer)) {
        // page title
        $page_title = grn_get_current_page_display_name();
        $t->assign('page_title', $page_title);
        // site position 
        $t->assign(
            'site_position', [
                $referer,
                [
                    'page'        => "schedule/view",
                    'name'        => grn_get_page_display_name('schedule/view'),
                    'event'       => $event_id,
                    'bdate'       => $str_date,
                    'referer_key' => $referer_key
                ],
                ['page' => "", 'name' => $page_title]
            ]
        );
        $referer_exists = true;
    }
}

if ($referer_exists === false) {
    // page title
    $page_title = grn_get_current_page_display_name();
    $t->assign('page_title', $page_title);
    // site position 
    $t->assign(
        'site_position', [
            [
                'page' => 'schedule/index',
                'name' => grn_get_page_display_name('schedule/schedule_index')
            ],
            [
                'page'        => "schedule/view",
                'name'        => grn_get_page_display_name('schedule/view'),
                'event'       => $event_id,
                'bdate'       => $str_date,
                'referer_key' => $referer_key
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
}

$t->assign('referer_key', $referer_key);

// Smarty実行
$t->display(cb_get_pagename() . ".tpl");

