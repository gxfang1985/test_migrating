<?php

use grn\schedule\AttendanceStatusLogic;

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;
require_once($t->_get_plugin_filepath('function', 'grn_date_format_switch'));

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

$member_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid'] : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;
$event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event'] : null;
$t->assign('uid', $member_id);
$t->assign('gid', $group_id);
$t->assign('event', $event_id);

//javascript変数に渡すための週情報バッファ
$week_buffer = [];
//初期バッファ数（前後N週間）
$buffer_count = 5;

//------------------
require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
$schedule_app_id = $app->getApplicationId();
$t->assign('schedule_app_id', $schedule_app_id);
$t->assign('app_name', $app->getName());

//GTM-1625 Get attendance status setting;
$attendanceStatusLogic = new AttendanceStatusLogic();
$isEnableAttendanceStatus = $attendanceStatusLogic->isEnableAttendanceCheck();

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();
require_once('schedule/system_logic.csp');
$logic = GRN_Schedule_SystemLogic::getInstance();
if ($logic->getAllowFacilitiesName() == '1') {
    $allowFacilitiesName = true;
} else {
    $allowFacilitiesName = false;
}

if ($logic->getAllowFacilitiesNameOnRight() == '1') {
    $nameonright = true;
} else {
    $nameonright = false;
}
// 今日を求める
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$today = $tsex->getDate();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

$t->assign('bdate', $date->format());

global $G_container_base;
/** @var GRN_Uum $uum */
$uum = $G_container_base->getInstance('uum');
require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$login = $uum->getLoginUser();
$login_id = $login->getOID();
$schedule_name = $login->get('display_name');

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
// ログインユーザーの各種設定の取得
$unit = $systemlogic->getScheduleUnit();
$showendtime = $personallogic->getShowEndTime($login);
$startwday = $personallogic->getCalendarWeekStart($login);
$hiddenprivate = $systemlogic->getHiddenPrivate();
$showgroup = $systemlogic->getShowOrganize();
$showholiday = $systemlogic->getShowHoliday();

// グループの処理
$group = null;
if ( ! $group_id) {
    $group = $uum->getUserPrimaryGroup($login_id);
    if ($group !== false) {
        $group_id = $group->getOID();
    }
} // 施設グループ
elseif (mb_substr($group_id, 0, 1) == 'f') {
    // 全施設
    if ($group_id == 'f') {
        $group = 'f';
    } else {
        $group = $facility_logic->getFacilityGroup(mb_substr($group_id, 1));
        if ($group === false) {
            $group_id = null;
        } else {
            $schedule_name = $group->get('name');
        }
    }
} // Myグループ
elseif (mb_substr($group_id, 0, 1) == 'm') {
    $group = $uum->getMyGroup(mb_substr($group_id, 1));
    if ( ! $group) {
        $group_id = null;
    }
} // よく利用するユーザー
elseif ($group_id == 'r') {
    $group = 'frequent';
} elseif ($group_id == 'virtual') {
    //何もしない
} // 簡易検索
elseif ($group_id == 'search') {
} // 複数ユーザー選択
elseif ($group_id == 'selected') {
} // 組織
else {
    $group = $uum->getGroup($group_id);
    if ( ! $group) {
        $group_id = null;
    }
}
// 表示するものにアクセス権があるかどうかのチェック
$dynamic_roles = $uum->listGrantedRoles();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_logic::getInstance();

if (is_a($group, 'CB_Group')) {
    $access = $acc_logic->evaluateAccess($login, $group, ['read'],
        $dynamic_roles);

    if ( ! $access) {
        $group = null;
        $group_id = null;
    }
}

// ポップアップ画面からのIDは、変換する
if (mb_substr($member_id, 0, 1) == 'i') {
    $member_id = 'f' . mb_substr($member_id, 1);
}

$frequent_users = null;
$member = null;
// 指定されたメンバーの処理
if ( ! $member_id && is_string($group) && $group == 'f') {
    if ($systemlogic->getAllowAllFacilities()) {
        $facilities = $facility_logic->getOrderedFacilityPartInfoList();
        $facilities = $acc_logic->evaluateAccessesById($login, $facilities,
            ['read'], $dynamic_roles, 'facility');
        if (is_array($facilities) && count($facilities)) {
            $first_facility = reset($facilities);
            $member
                = $facility_logic->getFacility($first_facility['_id']);
            $member_id = 'f' . $member->getOID();
        } else {
            $member_id = $login_id;
            $member = $login;
        }
    } else {
        $member_id = $login_id;
        $member = $login;
    }

} elseif ( ! $member_id && is_a($group, 'GRN_Facility_FacilityGroup')) {
    // 施設と施設グループで、厳しいほうのアクセス権にする
    $facilities = null;
    $tmp_fgroups = [$group->getOID() => $group];

    $fgroups = $acc_logic->evaluateAccessesById($login, $tmp_fgroups, ['read'],
        $dynamic_roles, 'facilitygroup');
    if (count($fgroups)) {
        $facilities = $facility_logic->getGroupFacilities($group->getOID());
        $facilities = $acc_logic->evaluateAccessesById($login, $facilities,
            ['read'], $dynamic_roles, 'facility');
        if (count($facilities)) {
            $member = reset($facilities);
            $member_id = 'f' . $member->getOID();
        } else {
            $member_id = $login_id;
            $member = $login;
        }
    } else {
        $member_id = $login_id;
        $member = $login;
    }
} elseif ( ! $member_id && is_a($group, 'CB_Group')) {
    $format = 'col_user = ' . $login_id;
    $users = $uum->getGroupUsers($group->getOID(), 0, -1,
        'tab_cb_user.col_position', $format);
    // 自分が組織にいるかどうかチェック
    if ( ! is_array($users) || count($users) == 0) {
        // 組織スケジュールが表示できる場合は組織
        if ($showgroup) {
            $member = $group;
            $member_id = 'g' . $group->getOID();
        } else {
            $users = $uum->getGroupUsers($group->getOID());
            $users = $acc_logic->evaluateAccesses($login, $users, ['read'],
                $dynamic_roles, 'user');
            // 自分がいない場合はリストの最初のユーザーを持ってくる
            if (count($users) > 0) {
                $member = reset($users);
                $member_id = $member->getOID();
            } // 組織スケジュールを表示する場合
            else {
                $member_id = $login_id;
                $member = $login;
            }
        }
    } else {
        $member_id = $login_id;
        $member = $login;
    }
} elseif ( ! $member_id && is_a($group, 'GRN_MyGroup')) {
    $format = 'col_user = ' . $login_id;
    $users = $uum->getMyGroupUsers($group->getOID(), 0, -1, $format);
    // 自分が組織にいるかどうかチェック
    if (count($users) == 0) {
        // 自分がいない場合はリストの最初のユーザーを持ってくる
        $users = $uum->getMyGroupUsers($group->getOID());
        $users = $acc_logic->evaluateAccesses($login, $users, ['read'],
            $dynamic_roles, 'user');
        if (count($users) > 0) {
            $member = reset($users);
            $member_id = $member->getOID();
        } // アクセス権でユーザーがいなくなった場合
        else {
            $member_id = $login_id;
            $member = $login;
        }
    } else {
        $member_id = $login_id;
        $member = $login;
    }
} elseif ( ! $member_id && is_string($group) && $group == 'frequent') {
    require_once('grn/uum_util.csp');
    $frequent_users = $uum->getFrequentUsersInfo($login_id);
    $frequent_users = $acc_logic->evaluateAccessesById($login, $frequent_users,
        ['read'], $dynamic_roles, 'user');
    $b_found = false;
    // よく利用するユーザーに自分がいるか
    foreach (array_keys($frequent_users) as $key) {
        if ($key == $login_id) {
            $b_found = true;
            break;
        }
    }

    // ログインユーザーがいる場合
    if ($b_found || 0 == count($frequent_users)) {
        $member_id = $login_id;
        $member = $login;
    } else {
        $member_info = reset($frequent_users);
        $member = $uum->getUser($member_info['_id']);
        $member_id = $member_info['_id'];
    }
} elseif ( ! $member_id) {
    $member_id = $login_id;
    $member = $login;
} // 施設
elseif (mb_substr($member_id, 0, 1) == 'f') {
    $member = $facility_logic->getFacility(mb_substr($member_id, 1));
    if ($member === false) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
    }
    $schedule_name = $member->get('name');
} // 組織
elseif (mb_substr($member_id, 0, 1) == 'g') {
    $member = $uum->getGroup(mb_substr($member_id, 1));
    if ( ! $member) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }
    $schedule_name = $member->get('name');
} elseif (mb_substr($member_id, 0, 1) == 'u') {
    $member = $uum->getUser(mb_substr($member_id, 1));
    if ( ! $member) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $schedule_name = $member->get('display_name');
    $member_id = $member->getOID();
} // 人
else {
    $member = $uum->getUser($member_id);
    if ( ! $member) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    $schedule_name = $member->get('display_name');
}

// 組み合わせが悪い場合は、ユーザーを優先する
if (is_a($member, 'CB_User') && is_a($group, 'CB_Group')) {
    $format = 'col_user = ' . $member->getOID();
    $users = $uum->getGroupUsers($group->getOID(), 0, -1,
        'tab_cb_user.col_position', $format);
    if ( ! $users) {
        $group = null;
        $group_id = null;
    }
} elseif (is_a($member, 'CB_User') && is_a($group, 'GRN_MyGroup')) {
    $format = 'col_user = ' . $member->getOID();
    $users = $uum->getMyGroupUsers($group->getOID(), 0, -1, $format);
    if ( ! $users) {
        $group = null;
        $group_id = null;
    }
} elseif (is_a($group, 'CB_Group') && is_a($member, 'CB_Group')) {
    if ($group->getOID() != $member->getOID()) {
        $group = null;
        $group_id = null;
    }
} elseif (is_string($group) && $group == 'frequent'
          && is_a($member, 'CB_User')
) {
    if (is_null($frequent_users)) {
        require_once('grn/uum_util.csp');
        $frequent_users = $uum->getFrequentUsersInfo($login_id);
        $frequent_users = $acc_logic->evaluateAccessesById($login,
            $frequent_users, ['read'], $dynamic_roles, 'user');
    }
    $b_found = false;
    // よく利用するユーザーに自分がいるか
    foreach (array_keys($frequent_users) as $key) {
        if ($key == $member_id) {
            $b_found = true;
            break;
        }
    }
    if ( ! $b_found) {
        $group = null;
        $group_id = null;
    }
} elseif (is_a($group, 'GRN_Facility_FacilityGroup')
          && is_a($member, 'GRN_Facility_Facility')
) {
    $facilities = $facility_logic->getGroupFacilities($group->getOID());
    if ( ! array_key_exists($member->getOID(), $facilities)) {
        $group = null;
        $group_id = null;
    }
} // グループIDとユーザーIDの組み合わせがぜんぜんだめ
elseif ((is_a($member, 'CB_User') || is_a($member, 'CB_Group'))
        && (is_a($group, 'GRN_Facility_FacilityGroup')
            || $group == 'f')
) {
    $group = null;
    $group_id = null;
} elseif (is_a($member, 'GRN_Facility_Facility')
          && ( ! is_a($group, 'GRN_Facility_FacilityGroup') && ($group != 'f'))
) {
    $group = null;
    $group_id = null;
}

// 表示するものにアクセス権があるかどうかのチェック
if (is_object($member)
    && ( ! is_a($member, 'CB_User')
         || ($member->getOID() != $login_id))
) {
    if (is_a($member, 'GRN_Facility_Facility')) {
        // 施設のアクセス権はグループをたどって評価する
        $tmp_array = [$member->getOID() => $member];
        $access = $acc_logic->evaluateAccessesById($login, $tmp_array,
            ['read'], $dynamic_roles, 'facility');
    } else {
        $access = $acc_logic->evaluateAccess($login, $member, ['read'],
            $dynamic_roles);
    }

    if ( ! $access) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
    }
}

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

// この月表示で必要な日付を求める
$c_setdate = $util->getCalendarStartDate($date, $startwday);
$c_enddate = $util->getCalendarEndDate($date, $startwday);

//基準日
$c_baseline_date = $c_setdate;

// 1ヶ月分のカレンダーとその前後N週間分を取得する
$c_setdate->moveWeeks(-$buffer_count);
$c_enddate->moveWeeks($buffer_count);

require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($c_setdate, $c_enddate,
    $login);

$shared_calendar = $calendar_service->getDaysInfoFromSharedCalendar($c_setdate,
    $c_enddate, $login);
$all_calendars = array_merge_recursive($calendars, $shared_calendar);

// カレンダーから余計なデータを削除
if ( ! is_a($member, 'CB_User') || $member->getOID() != $login_id) {
    foreach (array_keys($all_calendars) as $key1) {
        foreach (array_keys($all_calendars[$key1]) as $key2) {
            // 個人データの削除
            if (($all_calendars[$key1][$key2]['type']
                 == GRN_CALENDAR_TYPE_MEMORIALDAY)
                || ($all_calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_USER_MEMO)
            ) {
                unset($all_calendars[$key1][$key2]);
                continue;
            }
            if ( ! $showholiday) {
                if ($all_calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                ) {
                    unset($all_calendars[$key1][$key2]);
                }
            }
        }
    }
} elseif ( ! $showholiday) {
    foreach (array_keys($all_calendars) as $key1) {
        foreach (array_keys($all_calendars[$key1]) as $key2) {
            // 祝日以外は削除
            if ($all_calendars[$key1][$key2]['type']
                == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
            ) {
                unset($all_calendars[$key1][$key2]);
            }
        }
    }
}

// 日付の準備
$week = [];
$dateex = new CB_DateEx($c_setdate);
$weeks = [];
$b_conflict = true;
if (is_a($member, 'GRN_Facility_Facility')) {
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL;
    $title_type = $facility_logic->getFacilityTitle();
    $b_conflict = false;
} else {
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
               + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;
}
$work_date = new CB_DateEx($today);
if (is_object($member)) {
    //GTM-1625: ( Note: No support attendance check for facility and group)
    $isUserMember = is_a($member, 'CB_User');
    while ($dateex->compare($c_enddate) <= 0) {
        $s_date = new CB_DateEx($dateex);
        $schedule_event = [];
        $week = [];
        for ($i = 0; $i < 7; ++$i) {
            $week[$i] = [
                'format' => $dateex->format(),
                'type'   => $util->getDayMonthType($dateex),
                'date'   => $dateex
            ];
            if ($util->isWorkday($dateex, $calendars, $login)) {
                if (($dateex->month % 2) === 0) {
                    // 偶数月
                    $week[$i]['type'] = 's_date_workday_even';
                } else {
                    // 奇数月
                    $week[$i]['type'] = 's_date_workday_odd';
                }
            } elseif ($showholiday) {
                if ($util->isHoliday($dateex, $calendars)) {
                    if (($dateex->month % 2) === 0) {
                        // 偶数月
                        $week[$i]['type'] = 's_date_holiday_even';
                    } else {
                        // 奇数月
                        $week[$i]['type'] = 's_date_holiday_odd';
                    }
                }
            }
            $dateex = clone $dateex;
            $dateex->moveDays(1);
        }

        $events = $app->getEventsForWeek(
            $member, $week[0]['date'], $week[6]['date'], $login, $sc_type,
            $hiddenprivate, $week, $b_conflict,
            $isEnableAttendanceStatus);

        foreach (array_keys($week) as $key1) {
            $date_info = &$week[$key1];
            $day_event = [];
            $day_event['date_type'] = $date_info['type'];
            $day_event['date'] = $date_info['format'];
            $day_event['event'] = [];

            if (array_key_exists($day_event['date'], $all_calendars)) {
                $day_event['calendar'] = $all_calendars[$day_event['date']];
            }

            // 終日予定がある
            if (array_key_exists($date_info['format'], $events['allday'])) {
                $allday_events = &$events['allday'][$date_info['format']];
                foreach (array_keys($allday_events) as $key2) {
                    $event = &$allday_events[$key2];
                    $temp = [];
                    $temp['id'] = $event['id'];
                    $temp['type']
                        = $util->getViewEventType($event['event_type'],
                        $event['share']);
                    $temp['str_date'] = _getViewHour($date_info['date'],
                        $event['setdate'],
                        $event['enddate'],
                        $event['event_type'], $showendtime, $t, $event);
                    if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                        //$temp['data'] .= cb_msg( 'grn.schedule', 'event_hidden' );
                        $temp['str_menu'] = '';
                        $temp['str_full_title'] = '';
                        $temp['str_private'] = cb_msg('grn.schedule',
                            'event_hidden');
                        $temp['type'] = 'normal';
                        $temp['private'] = true;
                    } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                        //$temp['data'] .= $event['title'].cb_msg( 'grn.schedule', 'event_private' );
                        $temp['str_menu'] = $event['event_menu'];
                        $temp['str_full_title'] = $event['title'];
                        $temp['is_private'] = true;
                    } else {
                        //$temp['data'] .= "<span class='spanTitle'>" . $event['title'].'</span>';
                        $temp['str_menu'] = $event['event_menu'];
                        $temp['str_full_title'] = $event['title'];
                    }
                    $temp['allday'] = true;
                    //GTM-1625
                    //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
                    if ($isUserMember) {
                        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                            $temp, $event)
                        ) {
                            continue;
                        }
                    }
                    $day_event['event'][] = $temp;
                }
            }

            // 通常予定がある
            if (array_key_exists($date_info['format'], $events['normal'])) {
                $normal_events = &$events['normal'][$date_info['format']];
                foreach (array_keys($normal_events) as $key2) {
                    $event = &$normal_events[$key2];
                    if ($allowFacilitiesName) {
                        $factory = null;
                        $app->addFacilityNameToEventTitle($event, $factory,
                            $event['id'], $nameonright);
                    }
                    $temp = [];
                    $temp['id'] = $event['id'];
                    $temp['type']
                        = $util->getViewEventType($event['event_type'],
                        $event['share']);
                    $temp['str_date'] = _getViewHour($date_info['date'],
                        $event['setdatetime'],
                        $event['enddatetime'],
                        $event['event_type'], $showendtime, $t);
                    if (is_a($member, 'GRN_Facility_Facility')) {
                        //$temp['data'] .= $facility_logic->getEventTitle( $event['title'], $event['creator_name'], $event['private'], $title_type );
                        $temp['str_menu'] = $event['event_menu'];
                        $temp['str_full_title']
                            = $facility_logic->getEventTitle($event['title'],
                            $event['creator_name'], $event['private'],
                            $title_type);
                        if ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                            $temp['str_full_title'] = $event['title'];
                            $temp['is_private'] = true;
                        }

                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            $temp['str_menu'] = '';
                            $temp['type'] = 'normal';
                            $temp['private'] = true;
                        }
                    } else {
                        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                            //$temp['data'] .= "<span class='spanTitle'>" . cb_msg( 'grn.schedule', 'event_hidden' ) . "</span>";
                            $temp['str_menu'] = '';
                            $temp['str_full_title'] = '';
                            $temp['str_private'] = cb_msg('grn.schedule',
                                'event_hidden');
                            $temp['type'] = 'normal';
                            $temp['private'] = true;
                        } elseif ($event['private']
                                  == GRN_EVENT_PRIVATE_PRIVATE
                        ) {
                            //$temp['data'] .= "<span class='spanTitle'>" . $event['title'].cb_msg( 'grn.schedule', 'event_private' ) . "</span>";
                            $temp['str_menu'] = $event['event_menu'];
                            $temp['str_full_title'] = $event['title'];
                            $temp['is_private'] = true;
                        } else {
                            //$temp['data'] .= "<span class='spanTitle'>" .$event['title']. "</span>";
                            $temp['str_menu'] = $event['event_menu'];
                            $temp['str_full_title'] = $event['title'];
                        }
                    }
                    $temp['conflict'] = array_key_exists('conflict', $event)
                        ? $event['conflict'] : false;
                    //GTM-1625
                    //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
                    if ($isUserMember) {
                        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                            $temp, $event)
                        ) {
                            continue;
                        }
                    }
                    $day_event['event'][] = $temp;
                }
            }

            // スケジュールの入れ込み
            $schedule_event[] = $day_event;
        }

        // バナーの処理
        $banner_events = [];
        foreach (array_keys($events['banner']) as $key) {

            $event = &$events['banner'][$key];

            $work_date->year = $event['setdate']->year;
            $work_date->month = $event['setdate']->month;
            $work_date->day = $event['setdate']->day;

            $b_add = false;
            foreach (array_keys($banner_events) as $key1) {
                $banner = end($banner_events[$key1]);

                // 開始時間が終了時間の後
                if ($work_date->compare($banner['enddate']) > 0) {
                    // この行に追加
                    $b_add = true;

                    // データの挿入
                    $temp = [
                        'id'      => $event['id'],
                        'setdate' => $event['setdate'],
                        'enddate' => $event['enddate']
                    ];
                    $temp['type']
                        = $util->getViewEventType($event['event_type'],
                        $event['share']);
                    if ($week[0]['date']->compare($event['setdate']) >= 0) {
                        $temp['date'] = $week[0]['format'];
                    } else {
                        $temp['date'] = $event['setdate']->format();
                    }
                    $temp['term'] = $util->getBannerTerm($event['setdate'],
                        $event['enddate'], $week[0]['date'], $week[6]['date']);
                    //$temp['data'] = cb_date_format( 'DateShort_MD', $event['setdate'] ).'-'.cb_date_format( 'DateShort_MD', $event['enddate'] ).' '."<span class='spanTitle'>".$event['title'].'</span>';
                    $temp['str_date']
                        = _print_personal_month_grn_schedule_banner_title_switch($temp['date'],
                        $event, false, $t);
                    $temp['str_menu'] = $event['event_menu'];
                    $temp['str_full_title'] = $event['title'];
                    $temp['data'] = $temp['str_date']
                                    . '<span class="spanTitleDisplay">'
                                    . $temp['str_full_title']
                                    . '</span><div style="display:none;"><span class="spanMenu">'
                                    . $temp['str_menu']
                                    . '</span><span class="spanFullTitle">'
                                    . $temp['str_full_title']
                                    . '</span></div>';
                    $banner_events[$key1][] = $temp;
                    break;
                }
            }

            if ($b_add) {
                continue;
            }

            // データの挿入
            $temp = [
                'id'      => $event['id'],
                'setdate' => $event['setdate'],
                'enddate' => $event['enddate']
            ];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            if ($week[0]['date']->compare($event['setdate']) >= 0) {
                $temp['date'] = $week[0]['format'];
            } else {
                $temp['date'] = $event['setdate']->format();
            }
            $temp['term'] = $util->getBannerTerm($event['setdate'],
                $event['enddate'], $week[0]['date'], $week[6]['date']);
            //$temp['data'] = cb_date_format( 'DateShort_MD', $event['setdate'] ).'-'.cb_date_format( 'DateShort_MD', $event['enddate'] ).' '."<span class='spanTitle'>".$event['title'].'</span>';
            $temp['str_date']
                = _print_personal_month_grn_schedule_banner_title_switch($temp['date'],
                $event, false, $t);
            $temp['str_menu'] = $event['event_menu'];
            $temp['str_full_title'] = $event['title'];
            $temp['data'] = $temp['str_date']
                            . '<span class="spanTitleDisplay">'
                            . $temp['str_full_title']
                            . '</span><div style="display:none;"><span class="spanMenu">'
                            . $temp['str_menu']
                            . '</span><span class="spanFullTitle">'
                            . $temp['str_full_title']
                            . '</span></div>';

            // 改行
            $banner_events[] = [$temp];

        }

        $week_buffer[count($weeks)] = $week[0]['format'];

        $weeks[] = [
            'schedule_event' => $schedule_event,
            'banner_event'   => $banner_events,
            'week_start'     => $week[0]['date'],
            'week_end'       => $week[6]['date'],
            'trid'           => count($weeks)
        ];
    }

    $access = null;
    if (is_a($member, 'CB_User') && $login_id == $member_id) {
        $access = ['read' => '1', 'add' => '1'];
    } else {
        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わない
        $user_groups = $uum->getUserGroupsInfo($login_id, true);
        $user_roles = $uum->getUserRolesInfo($login_id, true);

        // 施設だったら施設グループのアクセス権を優先
        if (is_a($member, 'GRN_Facility_Facility')) {
            $affiliation_group
                = $facility_logic->getFacilityAffiliationGroup($member->getOID());
            if ( ! $affiliation_group) {
                // 施設グループに所属していない
                $access = $acc_logic->getEvaluateAccessList($login,
                    $member,
                    ['read', 'add'],
                    'read_add',
                    $dynamic_roles,
                    $user_groups,
                    $user_roles);

            } else {
                $affiliation_groups
                    = [$affiliation_group->getOID() => $affiliation_group];

                $accesses = $acc_logic->getEvaluateAccessesListById($login,
                    $affiliation_groups,
                    'facilitygroup',
                    ['read', 'add'],
                    $dynamic_roles);

                $access_group = $accesses[$affiliation_group->getOID()];

                $access = $acc_logic->getEvaluateAccessList($login,
                    $member,
                    ['read', 'add'],
                    'read_add',
                    $dynamic_roles,
                    $user_groups,
                    $user_roles);
                foreach (['read', 'add'] as $auth) {
                    if ($access_group[$auth] == GRN_SCHD_ACCESS_DENY) {
                        $access[$auth] = GRN_SCHD_ACCESS_DENY;
                    }
                }
            }
        } else {
            $access = $acc_logic->getEvaluateAccessList($login,
                $member,
                ['read', 'add'],
                'read_add',
                $dynamic_roles,
                $user_groups,
                $user_roles);
        }

    }

    // カスタマイズ項目処理
    foreach (array_keys($weeks) as $key) {
        $week = &$weeks[$key];
        foreach (array_keys($week['schedule_event']) as $key2) {
            $schedule_event = &$week['schedule_event'][$key2];
            foreach (array_keys($schedule_event) as $key3) {
                $events = &$schedule_event[$key3];
                if (is_array($events)) {
                    foreach (array_keys($events) as $key4) {
                        $event = &$events[$key4];
                        if (array_key_exists('private', $event) === true
                            && $event['private'] === true
                        ) {
                            continue;
                        }
                        if (isset($event['id'])) {
                            $event['str_extend_item']
                                = $facility_logic->getDataTitle($event['id']);
                        }
                    }
                }
            }
        }
    }

    $t->assign(
        'schedule', [
            'user_id'  => $member_id,
            //ユーザーID]
            'group_id' => $group_id,
            'week'     => $weeks,
            'access'   => $access,
        ]
    );
}
require('_select_date_schedule_month.csp');
$t->assign('user_id', $member_id);
$t->assign('group_id', $group_id);

$page_title = $login->get('display_name');
$page_title .= " " . cb_date_format('DateFull_YM', $date);
//基準週データをjavascript側に渡す。
$javascript_value_list = [];
$javascript_value_list['cy_schedule_um_baseline_id'] = $buffer_count;
$javascript_value_list['cy_schedule_um_week_display'] = count($week_buffer)
                                                        - ($buffer_count * 2);
$t->assign('javascript_value_list', $javascript_value_list);

//週データバッファをjavascript側に渡す。
$c_baseline_date->moveWeeks($buffer_count);
$t->assign('cy_schedule_um_week_buffer', $week_buffer);
$t->assign('cy_schedule_um_buffer_count', $buffer_count);
$t->assign('cy_schedule_um_startwday', $startwday);

$referer = [];
$referer_params = ['uid', 'gid', 'bdate', 'event'];
foreach ($referer_params as $key) {
    if (array_key_exists($key, $G_INPUT)) {
        $referer[$key] = $G_INPUT[$key];
    }
}
$referer['page'] = 'schedule/personal_month';
$referer['name'] = $page_title;
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession('schedule.referer');
$session_values = $session->getValues();
$unset_keys = [];
foreach ($session_values as $key => $value) {
    if (isset($value['page']) && $value['page'] == $referer['page']) {
        $unset_keys[] = $key;
    }
}
foreach ($unset_keys as $key) {
    $session->unset_by($key);
}
$referer_key = md5(uniqid(rand(), true));
$session->set($referer_key, $referer);
$t->assign('referer_key', $referer_key);
$t->assign('schedule_name', $schedule_name);
// ナビカレンダーを表示する・隠す設定
$t->assign('page_title', $page_title);
// site position 
$t->assign(
    'site_position', [
        [
            'page'  => 'schedule/personal_month',
            'name'  => cb_msg('grn.schedule', 'personal_month'),
            'event' => $event_id,
            'uid'   => $member_id,
            'gid'   => $group_id,
            'bdate' => $str_date
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

// Set office informatoion into smarty.
$timezone = CB_I18N::getInstance()->getUserTimezone($login);
$t->assign('timezone_name', $timezone);

// Smarty実行
global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);
$t->skipWarning();

$t->display(cb_get_pagename() . '.tpl');


function _getViewHour(
    $date,
    $setdatetime,
    $enddatetime,
    $type,
    $showendtime = false,
    $t,
    $event = null
) {
    $str_hour = '';
    if (($type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
        == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
    ) {
        // GRN2-3034
        $current_tz = CB_I18N::getInstance()->getCurrentTimezone();
        if ($event && @$event['timezone'] == $current_tz) {
            return '';
        } else {
            $dateex = new CB_DateEx($date);
            if ($dateex->compare($setdatetime) == 0) {
                $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
                    $setdatetime, $t);
            } else {
                $str_hour .= _print_personal_month_grn_date_format_switch('DateShort_MD',
                    $setdatetime, $t);
            }

            // end time
            if ($showendtime) {
                $time_splitter = cb_msg('grn.schedule', 'time_splitter');
                $str_hour .= $time_splitter;
                if ($dateex->compare($enddatetime) == 0) {
                    $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
                        $enddatetime, $t);
                } else {
                    $str_hour .= _print_personal_month_grn_date_format_switch('DateShort_MD',
                        $enddatetime, $t);
                }
            }
        }
    } elseif (($type & GRN_SCHEDULE_EVENT_TYPE_START)
              == GRN_SCHEDULE_EVENT_TYPE_START
    ) {
        $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
            $setdatetime, $t);
    } else {
        static $dateex = false;
        if ($dateex === false) {
            $dateex = new CB_DateEx($date);
        } else {
            $dateex->year = $date->year;
            $dateex->month = $date->month;
            $dateex->day = $date->day;
        }

        if ($dateex->compare($setdatetime) == 0) {
            $str_hour .= _print_personal_month_grn_date_format_switch('TimeShort_HM',
                $setdatetime, $t);
        } // 日付が違う場合は、日付を表示
        else {
            $str_hour .= _print_personal_month_grn_date_format_switch('DateShort_MD',
                $setdatetime, $t);
        }

        // 終了時刻を表示する設定の場合
        if ($showendtime) {
            static $time_splitter = false;
            if ($time_splitter === false) {
                $time_splitter = cb_msg('grn.schedule', 'time_splitter');
            }

            $str_hour .= $time_splitter;
            if ($dateex->compare($enddatetime) == 0) {
                $str_hour .= "<span class='EndTimeDisplay'>"
                             . _print_personal_month_grn_date_format_switch('TimeShort_HM',
                        $enddatetime, $t) . "</span>";
            } // 日付が違う場合は、日付を表示
            else {
                $str_hour .= "<span>"
                             . _print_personal_month_grn_date_format_switch('DateShort_MD',
                        $enddatetime, $t) . "</span>";
            }

        }
    }

    return $str_hour;
}

function _print_personal_month_grn_date_format_switch($format, $date, $smarty)
{
    //return cb_date_format($format_key, $date).$format_key;
    return smarty_function_grn_date_format_switch([
        "date"   => $date,
        "format" => $format,
    ], $smarty);
}

function _print_personal_month_grn_schedule_banner_title_switch(
    $date,
    $event,
    $include_title = true,
    $smarty
) {
    $current_tz = CB_I18N::getInstance()->getCurrentTimezone();

    if (@$event['timezone'] == $current_tz) {
        if ($include_title) {
            return $event['title'];
        } else {
            return '';
        }
    }

    $date_tmp = new CB_Date();
    $date_tmp->parse($date);
    $date_ex = new CB_DateEx($date_tmp);
    $title = '';
    if ($date_ex->compare($event['setdate']) == 0) {
        $title .= smarty_function_grn_date_format_switch([
            "date"   => $event['setdate'],
            "format" => 'TimeShort_HM'
        ], $smarty);
    } else {
        $title .= smarty_function_grn_date_format_switch([
            "date"   => $event['setdate'],
            "format" => 'DateTimeShort_YMD_HM'
        ], $smarty);
    }
    $title .= '-';

    if ($date_ex->compare($event['enddate']) == 0) {
        $title .= smarty_function_grn_date_format_switch([
            "date"   => $event['enddate'],
            "format" => 'TimeShort_HM'
        ], $smarty);
    } else {
        $title .= smarty_function_grn_date_format_switch([
            "date"   => $event['enddate'],
            "format" => 'DateTimeShort_YMD_HM'
        ], $smarty);
    }
    if ($include_title) {
        $title .= ' ' . $event['title'];
    }

    return $title;
}

