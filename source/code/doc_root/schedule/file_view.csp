<?php
//GTM-1136

global $G_INPUT;

require_once("grn/smarty.csp");
$t = new GRN_Smarty;

require_once('schedule/error_code.csp');

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
if ($systemlogic->getAllowFileAttachment() != '1') {
    cb_throw_error(E_GRN_SCHD_DEACTIVATED_FILE);
}

$event_id = cb_at($G_INPUT, 'event');
if ( ! $event_id) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
}

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
$login = cb_get_login_user();

if ( ! ($event = $app->getEvent($login, $event_id))) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
}

$t->assign('event_id', $event_id);

require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$dynamic_roles = $uum->listGrantedRoles();

$access = $acc_logic->getEventAccess($login, $event, ['read', 'modify'],
    $dynamic_roles);
if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_FILE_VIEW);
}
$auth_modify = false;
if ($access['modify'] != GRN_SCHD_ACCESS_DENY) {
    $auth_modify = true;
}
$t->assign('auth_modify', $auth_modify);

$file_id = cb_at($G_INPUT, 'fid');
if ( ! $file_id) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_FILE);
}

require_once('schedule/file.csp');
$fm = GRN_Schedule_FileManager::getInstance();
if ( ! ($file = $fm->getFile($event_id, $file_id))) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_FILE);
}

$t->assign('file_id', $file_id);

$linkparams = [];
$linkparams['event'] = $event_id;
$t->assign('linkparams', $linkparams);

require_once('schedule/controller.csp');
$utility = new GRN_Schedule_ControllerUtil();

$offset = $utility->getListOffset();

$sort = $utility->getSortParameter();

$sortinfo = [
    'td' => ['column' => 'record_time', 'order' => true],
    'tu' => ['column' => 'record_time', 'order' => false],
    'ud' => ['column' => 'recorder_name', 'order' => true],
    'uu' => ['column' => 'recorder_name', 'order' => false],
    'nd' => ['column' => 'filename', 'order' => true],
    'nu' => ['column' => 'filename', 'order' => false],
];

if ( ! $sort || ! array_key_exists($sort, $sortinfo)) {
    $sort = 'td';
}

$t->assign('sort', $sort);

$limit = $utility->getListMax($login);

$file_for_view = $utility->getFileDetailView($file, $offset, $limit,
    $sortinfo[$sort]['column'], $sortinfo[$sort]['order']);

$naviparams = ['event' => $event_id, 'fid' => $file_id, 'sf' => 1];

$file_for_view['navi']['navi']['params'] = $naviparams;

$file_for_view['auth']['write'] = $auth_modify;

$users_id = [];
$users_id[] = cb_at($file_for_view, 'creator_uid');
$users_id[] = cb_at($file_for_view, 'modifier_uid');

require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login);
$t->assign('users_info', $users_info);

$t->assign('file', $file_for_view);
$t->assign('config', $utility->getConfigValues($login));

$target_name = 'schedule/file_delete';
$delete_file = [
    'title'   => grn_get_page_display_name($target_name),
    'page'    => $target_name . '.tpl',
    'data'    => [
        'event_id' => $event_id,
        'file'     => $file_for_view
    ],
    'handler' => 'lnk_delete'
];
$t->assign('delete_file', $delete_file);

$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

$t->assign(
    'site_position', [
        [
            'page' => 'schedule/index',
            'name' => grn_get_page_display_name('schedule/schedule_index')
        ],
        [
            'page'  => "schedule/view",
            'name'  => grn_get_page_display_name('schedule/view'),
            'event' => $event_id
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

$t->display(cb_get_pagename() . ".tpl");
