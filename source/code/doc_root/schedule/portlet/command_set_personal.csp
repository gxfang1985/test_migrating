<?php

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    require_once('portal/error_code.csp');
    if ( ! isset($portlet)) {
        cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ACCESS);
    }

    //uum
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $login = $uum->getLoginUser();
    //select frequent user and group
    if ($login
        && array_key_exists('selected_users_UID', $G_INPUT)
        && $G_INPUT['selected_users_UID']
    ) {
        $uum_util->selectUsers($login, [$G_INPUT['selected_users_UID']]);
    }

    if ($login
        && array_key_exists('selected_groups_UID', $G_INPUT)
        && $G_INPUT['selected_groups_UID']
    ) {
        $uum_util->selectGroups($login, [$G_INPUT['selected_groups_UID']]);
    }

    if (@ $G_INPUT['cancel']) {
        if ('set-personal' == @ $G_INPUT['display']) {
            cb_redirect('portal/personal/view', ['pid' => $G_INPUT['pid']]);
        }
        if ('set-operation' == @ $G_INPUT['display']) {
            cb_redirect('portal/operation/view', ['pid' => $G_INPUT['pid']]);
        } else {
            cb_redirect('portal/system/view', ['pid' => $G_INPUT['pid']]);
        }
    }
    // instantiate an Smarty object
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    // Create Parameter Translation Map
    $translation_map = [
        'pid'       => '_pid',
        'plid'      => '_plid',
        'ppid'      => '_ppid',
        'font_size' => 'font_size',
    ];

    // Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    $member_id = @ $G_INPUT['UID'];
    $member = '';
    $notice_string = '';
    if ($member_id) {
        if (mb_substr($member_id, 0, 1) == 'f') {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();

            $member = $facility_logic->getFacility(mb_substr($member_id, 1));
            if ($member === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
            }

            $notice_string = 'fid:' . $member->getOID() . ') '
                             . $member->get('name');
        } elseif (mb_substr($member_id, 0, 1) == 'g') {
            $member = $uum->getGroup(mb_substr($member_id, 1));
            if ( ! $member) {
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);
            }

            $notice_string = 'oid:' . $member->getOID() . ') '
                             . $member->get('name');
        } else {
            $member = $uum->getUser($member_id);
            if ( ! $member) {
                cb_throw_error(E_GRN_USER_NOT_FOUND);
            }

            $notice_string = 'uid:' . $member->getOID() . ') '
                             . $member->get('display_name');
        }
    } else {
        $notice_string = 'uid:0) ' . html_entity_decode(cb_msg('grn.schedule',
                'login_user'));
    }

    $display = cb_at($G_INPUT, 'display', 'set-personal');
    if (is_object($member) && $display !== 'set-system') {
        $dynamic_roles = $uum->listGrantedRoles();
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();
        if (is_a($member, 'GRN_Facility_Facility')) {
            // 施設を評価
            $tmp = $acc_logic->evaluateAccessesById($login,
                [$member->getOID() => $member], ['read'], $dynamic_roles,
                'facility');
            if (0 === count($tmp)) {
                cb_throw_error(E_GRN_SCHEDULE_DENYSELECT_MEMBER);
            }
        } elseif ($display === 'set-personal') {
            if ( ! $acc_logic->evaluateAccess($login, $member, ['read'],
                $dynamic_roles)
            ) {
                cb_throw_error(E_GRN_SCHEDULE_DENYSELECT_MEMBER);
            }
        }
    }

    //Create Infomation Portlet Settings
    $settings['font_size'] = $properties['font_size'];  //User Week Font Size
    $settings['uid'] = $member_id;

    //Set Infomation Portlet Settings Application
    require_once('grn/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Portal_Application $app_portal */
    $app_portal = $app_locator->getInstance('portal');
    $app_portal->setPortletSettings($properties['_plid'], $settings);

    //Switch Redirect Page
    if (@ $G_INPUT['display'] === 'set-system') {
        //redirect System page
        cb_redirect('portal/system/view', ['pid' => $G_INPUT['pid']]);
    } elseif (@ $G_INPUT['display'] === 'set-operation') {
        //redirect Operation page
        cb_redirect('portal/operation/view', ['pid' => $G_INPUT['pid']]);
    } else {
        //redirect Personal page
        cb_redirect('portal/personal/view', ['pid' => $G_INPUT['pid']]);
    }


}


