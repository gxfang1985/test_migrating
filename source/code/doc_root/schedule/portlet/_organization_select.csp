<?php

global $G_INPUT;

require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

$login = $uum->getLoginUser();
$dynamic_roles = $uum->listGrantedRoles();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_logic::getInstance();

$group_type = 'login';
$group_tree = null;
$is_candidate_organization = false;

$b_personal = true;
if (isset($display)
    && ($display == 'set-system'
        || $display == 'set-operation')
) {
    $b_personal = false;
}
if ( ! isset($display)) {
    $display = 'set-personal';
}

// Tree view is $page_name required.
if (isset($page_name)) {
    //-- initialize organization tree view
    require_once('schedule/org_tree.csp');
    $tree_util = GRN_OrgTreeUtil::getInstance();

    if ($b_personal) {
        $page_name .= '/personal';
        $t->assign('async_page', 'schedule/portlet/org_json');
    } else {
        $page_name .= '/system';
        $t->assign('async_page', 'schedule/org_json');
    }

    $class_name = null;
    if ($b_personal) {
        $class_name = 'GRN_Schedule_PortletOrgTree';
    }

    if (array_key_exists('apply', $G_INPUT) === false) {
        _grn_schedule_rebuild_tree($page_name, $group_id, $class_name);
    }

    $tree = $tree_util->getTree($page_name, $class_name);

    if ( ! $group_id) {
        $group_id = '0';
        $group_type = 'login';
        $tree->initialize();
    } elseif (mb_substr($group_id, 0, 1) == 'f') {
        $group = $facility_logic->getFacilityGroup(mb_substr($group_id, 1));
        if ( ! isset($display) || $display !== 'set-system') {
            if (is_a($group, 'GRN_Facility_FacilityGroup')
                && ! $acc_logic->evaluateAccess($login, $group, ['read'],
                    $dynamic_roles)
            ) {
                $group = false;
            }
        }
        if ($group === false) {
            $group_id = '0';
            $group_type = 'login';
            $tree->initialize();
        } else {
            $group_type = 'facility_group';
            $t->assign('initialize_item', [
                'id'    => $group_id,
                'title' => cb_msg('grn.schedule', 'title_facilitygroup',
                    ['name' => $group->get('name')])
            ]);
            $tree->initialize();
        }
    } elseif (mb_substr($group_id, 0, 1) == 'm') {
        $group = $uum->getMyGroup(mb_substr($group_id, 1));
        if ( ! $group) {
            $group_id = '0';
            $group_type = 'login';
            $tree->initialize();
        } else {
            $group_type = 'mygroup';
            $t->assign('initialize_item', [
                'id'    => $group_id,
                'title' => cb_msg('grn.common', 'title_my_group',
                    ['name' => $group->get('name')])
            ]);
            $tree->initialize();
        }
    } else {
        $group = $uum->getGroup($group_id);
        if ( ! @ $G_INPUT['ss'] && $b_personal) {
            if (is_a($group, 'CB_Group')) {
                if ( ! $acc_logic->evaluateAccess($login, $group, ['read'],
                    $dynamic_roles)
                ) {
                    $group = null;
                }
            }
        }
        if ( ! $group) {
            $group_id = '0';
            $group_type = 'login';
            $tree->initialize();
        } else {
            $group_type = 'organization';

            // check access.
            if ( ! $b_personal
                 || $acc_logic->evaluateAccess($login, $group, ['read'],
                    $dynamic_roles)
            ) {
                $organization = [];
                $select_group_info = false;
                if ( ! is_null($group_id)) {
                    $select_group_info = $uum->getGroupInfo($group_id);
                }
                if ($select_group_info !== false) {
                    $organization['title'] = $select_group_info['col_name'];
                }

                $t->assign('set_organization_id', $group_id);
                $t->assign('organization', $organization);
            } else {
                $group_id = '0';
                $group_type = 'login';
                $tree->initialize();
            }
            $tree->setSelectedNode($group_id);
        }
    }

    // setting tree.
    $tree_util->setTree($page_name, $tree);
    $org = $tree->getRoot();

    $t->assign('org', $org);
    $t->assign('page_name', $page_name);
    $t->assign('group_type', $group_type);
} // popup_group is not tree...
else {
    if ( ! $group_id) {
        $group_id = '0';
        $group_tree = $uum_util->getGroupSelectionTree($group_id);
        $group_type = 'login';
    } elseif (mb_substr($group_id, 0, 1) == 'f') {
        $group = $facility_logic->getFacilityGroup(mb_substr($group_id, 1));
        if ($group === false) {
            $group_id = '0';
            $group_type = 'login';
        } else {
            $group_type = 'facility_group';
            $t->assign('initialize_item', [
                'id'    => $group_id,
                'title' => cb_msg('grn.schedule', 'title_facilitygroup',
                    ['name' => $group->get('name')])
            ]);
        }
        $group_tree = $uum_util->getGroupSelectionTree('0');
    } elseif (mb_substr($group_id, 0, 1) == 'm') {
        $group = $uum->getMyGroup(mb_substr($group_id, 1));
        if ( ! $group) {
            $group_id = '0';
            $group_type = 'login';
        } else {
            $group_type = 'mygroup';
            $t->assign('initialize_item', [
                'id'    => $group_id,
                'title' => cb_msg('grn.common', 'title_my_group',
                    ['name' => $group->get('name')])
            ]);
        }
        $group_tree = $uum_util->getGroupSelectionTree('0');
    } else {
        $group = $uum->getGroup($group_id);
        if ( ! @ $G_INPUT['ss'] && $b_personal) {
            if (is_a($group, 'CB_Group')) {
                if ( ! $acc_logic->evaluateAccess($login, $group, ['read'],
                    $dynamic_roles)
                ) {
                    $group = null;
                }
            }
        }
        if ( ! $group) {
            $group_id = '0';
            $group_tree = $uum_util->getGroupSelectionTree($group_id);
            $group_type = 'login';
        } else {
            $group_tree = $uum_util->getGroupSelectionTree($group_id);
            $group_type = 'organization';
        }
    }

    $organization = [];

    if (is_array($group_tree)) {
        $organization['hid'] = @ $group_tree['oid'];
        $organization['title'] = @ $group_tree['title'];
        if ($b_personal) {
            $group_object = $uum->getGroup(@ $group_tree['oid']);
            if ($group_object) {
                if ( ! $acc_logic->evaluateAccess($login, $group_object,
                    ['read'], $dynamic_roles)
                ) {
                    $group_data['deny'] = true;

                    if ($group_id == $group_object->getOID()) {
                        $is_candidate_organization = true;
                    }
                }
            }
        }

        if (array_key_exists('ancestors', $group_tree)
            && is_array($group_tree['ancestors'])
        ) {
            $organization['path'] = [];
            foreach ($group_tree['ancestors'] as $group) {
                $group_data = [
                    'hid'   => $group['oid'],
                    'title' => $group['title']
                ];

                if (@ $group['child']) {
                    $group_data['num_children'] = 1;
                }

                if ($b_personal) {
                    $group_object = $uum->getGroup($group['oid']);
                    if ($group_object) {
                        if ( ! $acc_logic->evaluateAccess($login, $group_object,
                            ['read'], $dynamic_roles)
                        ) {
                            $group_data['deny'] = true;
                        }
                    }
                }

                $organization['path'][] = $group_data;
            }
        }
        if (array_key_exists('siblings', $group_tree)
            && is_array($group_tree['siblings'])
        ) {
            $organization['organizations'] = [];

            foreach ($group_tree['siblings'] as $group) {
                $group_data = [
                    'hid'   => $group['oid'],
                    'title' => $group['title']
                ];
                if (@ $group['child']) {
                    $group_data['num_children'] = 1;
                    $group_data['child_count']
                        = count($uum->getChildGroups($group['oid']));
                }
                if ($b_personal) {
                    $group_object = &$uum->getGroup($group['oid']);
                    if ($group_object) {
                        if ( ! $acc_logic->evaluateAccess($login, $group_object,
                            ['read'], $dynamic_roles)
                        ) {
                            $group_data['deny'] = true;
                        }
                    }
                }

                $organization['organizations'][] = $group_data;
            }
        }

        if (array_key_exists('children', $group_tree)
            && is_array($group_tree['children'])
        ) {
            $organization['child_organizations'] = [];
            foreach ($group_tree['children'] as $group) {
                $group_data = [
                    'hid'   => $group['oid'],
                    'title' => $group['title']
                ];
                if (@ $group['child']) {
                    $group_data['num_children'] = 1;
                    $group_data['child_count']
                        = count($uum->getChildGroups($group['oid']));
                }
                if ($b_personal) {
                    $group_object = $uum->getGroup($group['oid']);
                    if ($group_object) {
                        if ( ! $acc_logic->evaluateAccess($login, $group_object,
                            ['read'], $dynamic_roles)
                        ) {
                            $group_data['deny'] = true;
                        }
                    }
                }

                $organization['child_organizations'][] = $group_data;
            }
        }
    }


    $t->assign('group_type', $group_type);
    $t->assign('organization', $organization);
    if ($group_type == 'organization') {
        $t->assign('set_organization_id', $group_id);
    }

    $t->assign('is_candidate_organization', $is_candidate_organization);
}

// 個人設定の場合のみMyグループを取得
if ($b_personal) {
    $mygroup_list = [];
    $my_groups = $uum->listMyGroups($login);
    if (is_array($my_groups) && count($my_groups)) {
        foreach (array_keys($my_groups) as $id) {
            $my_group = &$my_groups[$id];
            if ( ! $my_group) {
                continue;
            }

            $mygroup_list["m{$id}"]
                = html_entity_decode($my_group->get('name'));
        }
    }
    $t->assign('mygroup_list', $mygroup_list);
}

$faclity_groups = $facility_logic->getfacilityGroups();
if (is_array($faclity_groups) && count($faclity_groups)) {
    if ( ! isset($display) || $display !== 'set-system') {
        $faclity_groups = $acc_logic->evaluateAccessesById($login,
            $faclity_groups, ['read'], $dynamic_roles, 'facilitygroup');
    }
    $facility_group_list = [];
    foreach (array_keys($faclity_groups) as $id) {
        $facility_group = &$faclity_groups[$id];
        if ( ! $facility_group) {
            continue;
        }

        $facility_group_list["f{$id}"] = $facility_group->get('name');
    }
    $t->assign('facility_group_list', $facility_group_list);
}

// ユーザー一覧（10件まで）
$user_list = [];
if ($group_id) {
    $user_rows = $uum->getGroupUsers($group_id, 0, 11, null, null,
        GRN_SCHEDULE_APPLICATION_ID);
    if (is_array($user_rows)) {
        foreach (array_keys($user_rows) as $uid) {
            $user_row =& $user_rows[$uid];
            $user_list[$uid]
                = GRN_ControllerUtil::getUserNameText($login->getOID(),
                $uid);
        }
    }
}
$user_continue = (count($user_list) > 10);
if ($user_continue) {
    array_pop($user_list);
}
$t->assign('user_continue', $user_continue);
$t->assign('user_list', $user_list);

// rebuild tree.
function _grn_schedule_rebuild_tree(
    $page_name,
    $expand_oid = null,
    $class_name = null
) {
    require_once('schedule/org_tree.csp');
    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name, $class_name);
    $tree->initialize();
    $tree->rebuild();
    if ( ! is_null($expand_oid)) {
        require_once('grn/nested_set_model.csp');
        $nested_group = GRN_NestedGroup::getInstance();
        $ancestors = $nested_group->getAncestorsByID($expand_oid, false);
        if ($ancestors !== false) {
            foreach (array_keys($ancestors) as $ancestor) {
                $tree->buildChild($ancestor);
            }
        }
    }
    $util->setTree($page_name, $tree);
}

