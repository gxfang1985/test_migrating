<?php

use grn\schedule\AttendanceStatusLogic;
use grn\grn\access\service\AppAccess;

global $G_INPUT;

$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
$plid = array_key_exists('plid', $G_INPUT) ? $G_INPUT['plid'] : null;

//Assign include_php Parameter
//------------------
require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();

// 今日を求める
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$today = $tsex->getDate();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
if ($systemlogic->getAllowFacilitiesName() == '1') {
    $allowFacilitiesName = true;
} else {
    $allowFacilitiesName = false;
}
if ($systemlogic->getAllowFacilitiesNameOnRight() == '1') {
    $nameOnRight = true;
} else {
    $nameOnRight = false;
}
//GTM-1625 Get attendance status setting;
$attendanceStatusLogic = new AttendanceStatusLogic();
$isEnableAttendanceStatus = $attendanceStatusLogic->isEnableAttendanceCheck();

// ログインユーザーの各種設定の取得
$unit = $systemlogic->getScheduleUnit();
$showendtime = $personallogic->getShowEndTime($login);
$startwday = $personallogic->getCalendarWeekStart($login);
$hiddenprivate = $systemlogic->getHiddenPrivate();
$showgroup = $systemlogic->getShowOrganize();
$showholiday = $systemlogic->getShowHoliday();

// グループの処理

$member_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid'] : false;
$member = null;

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// 指定されたメンバーの処理
// 施設
if ( ! $member_id) {
    $member_id = $login_id;
    $member = $login;
} elseif (mb_substr($member_id, 0, 1) == 'f') {
    $member = $facility_logic->getFacility(mb_substr($member_id, 1));
} // 組織
elseif (mb_substr($member_id, 0, 1) == 'g' && $showgroup) {
    $member = $uum->getGroup(mb_substr($member_id, 1));
} // 人
else {
    $member = $uum->getUser($member_id);
}

if ( ! $member) {
    $member_id = $login_id;
    $member = $login;
}

// 表示するものにアクセス権があるかどうかのチェック
if (is_object($member)
    && ( ! is_a($member, 'CB_User')
         || ($member->getOID() != $login_id))
) {
    // 表示するものにアクセス権があるかどうかのチェック
    $dynamic_roles = $uum->listGrantedRoles();
    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_logic::getInstance();

    if (is_a($member, 'GRN_Facility_Facility')) {
        // 施設のアクセス権はグループをたどって評価する
        $tmp_array = [$member->getOID() => $member];
        $access = $acc_logic->evaluateAccessesById($login, $tmp_array,
            ['read'], $dynamic_roles, 'facility');
    } else {
        $access = $acc_logic->evaluateAccess($login, $member, ['read'],
            $dynamic_roles);
    }

    if ( ! $access) {
        $member_id = $login_id;
        $member = $login;
    }
}

$display_login = false;
if ($member instanceof CB_User && $member_id === $login_id) {
    $display_login = true;
}

$set_hour = 0;
$end_hour = 0;
$personallogic->getViewHour($login, $set_hour, $end_hour);

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();
require_once('schedule/TodoEventCreator.csp');
$todo_creator = \grn\schedule\TodoEventCreator::createWeekEvent($G_INPUT);

// 日付の準備
$week = [];
$dateex = new CB_DateEx($date);
$get_settime = $dateex;
$get_endtime = $dateex;

for ($i = 0; $i < 7; ++$i) {
    $week[] = [
        'format'      => $dateex->format(),
        'type'        => $util->getDayType($dateex),
        'date'        => $dateex,
        'get_settime' => $get_settime,
        'get_endtime' => $get_endtime
    ];
    $dateex = clone $dateex;
    $dateex->moveDays(1);
    $get_settime = clone $get_settime;
    $get_settime->moveDays(1);
    $get_endtime = clone $get_endtime;
    $get_endtime->moveDays(1);
}

require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($week[0]['date'],
    $week[6]['date'], $login);

foreach ($week as $key => $week_date) {
    if ($util->isWorkday($week_date['date'], $calendars, $login)) {
        $week[$key]['type'] = 's_date_workday';
    } elseif ($showholiday) {
        if ($util->isHoliday($week_date['date'], $calendars)) {
            $week[$key]['type'] = 's_date_holiday';
        }
    }
}

$shared_calendar
    = $calendar_service->getDaysInfoFromSharedCalendar($week[0]['date'],
    $week[6]['date'], $login);
$calendars = array_merge_recursive($calendars, $shared_calendar);

// カレンダーから余計なデータを削除
if ( ! is_a($member, 'CB_User') || $member->getOID() != $login_id) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 個人データの削除
            if (($calendars[$key1][$key2]['type']
                 == GRN_CALENDAR_TYPE_MEMORIALDAY)
                || ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_USER_MEMO)
            ) {
                unset($calendars[$key1][$key2]);
                continue;
            }
            if ( ! $showholiday) {
                if ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                ) {
                    unset($calendars[$key1][$key2]);
                }
            }
        }
    }
} elseif ( ! $showholiday) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 祝日以外は削除
            if ($calendars[$key1][$key2]['type']
                == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
            ) {
                unset($calendars[$key1][$key2]);
            }
        }
    }
}

if (is_a($member, 'GRN_Facility_Facility')) {
    $title_type = $facility_logic->getFacilityTitle();
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL;
} else {
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
               + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;
}

$schedule_event = [];
$counter = 0;
$work_date = new CB_DateEx($today);
if (is_object($member)) {
    $todolist = $util->getDayToDoListView($login, $week[0]['date'],
        $week[6]['date']);

    $events = $app->getEventsForWeek($member, $week[0]['get_settime'],
        $week[6]['get_endtime'], $login, $sc_type, $hiddenprivate, $week, true,
        $isEnableAttendanceStatus);

    //GTM-1625: ( Note: No support attendance check for facility and group)
    $isUserMember = is_a($member, 'CB_User');

    foreach (array_keys($week) as $date_key) {
        $date_info = &$week[$date_key];
        $counter++;
        $day_event = [];
        // 日付の設定
        $day_event['date_type'] = $date_info['type'];
        $day_event['date'] = $date_info['format'];
        if (array_key_exists($day_event['date'], $calendars)) {
            $day_event['calendar'] = $calendars[$day_event['date']];
        }
        $day_event['event'] = [];
        if (array_key_exists($date_info['format'], $events['allday'])) {
            foreach (
                array_keys($events['allday'][$date_info['format']]) as $key
            ) {
                $event = &$events['allday'][$date_info['format']][$key];
                $temp = [];
                $temp['id'] = $event['id'];
                $temp['type'] = $util->getViewEventType($event['event_type'],
                    $event['share']);
                //GTM-103
                $temp['event_menu'] = $event['event_menu'];
                $temp['event_menu_color'] = $event['event_menu_color'];
                $temp['event_detail'] = $event['event_detail'];
                $temp['event_facility_name'] = '';
                $temp['facility_name_after'] = $nameOnRight;
                //End GTM-103
                if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                    $temp['type'] = 'normal';
                    $temp['data'] = cb_msg('grn.schedule',
                        'event_hidden');
                    $temp['private'] = true;
                    $temp['event_menu'] = '';
                    $temp['event_menu_color'] = '';
                    $temp['event_detail'] = $temp['data'];
                    $temp['event_facility_name'] = '';
                    $temp['facility_name_after'] = '';
                } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                    $temp['data']
                        = grn_schedule_create_allday_title($date_info['format'],
                        $event);
                    $temp['is_private'] = true;
                } else {
                    $temp['data']
                        = grn_schedule_create_allday_title($date_info['format'],
                        $event);
                }

                $temp['start_date'] = $event['setdate']->format();
                $temp['end_date'] = $event['enddate']->format();
                $temp['allday'] = true;
                //GRN2-2286
                $temp['absent'] = array_key_exists('absent', $event)
                    ? $event['absent'] : 0;
                //GRN2-2286

                //GTM-1625
                //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
                if ($isUserMember) {
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                }
                $day_event['event'][] = $temp;
            }
        }

        if (array_key_exists($date_info['format'], $events['normal'])) {
            foreach (
                array_keys($events['normal'][$date_info['format']]) as $key
            ) {
                $event = &$events['normal'][$date_info['format']][$key];

                $temp = [];
                $temp['id'] = $event['id'];
                $temp['type'] = $util->getViewEventType($event['event_type'],
                    $event['share']);
                //GTM-103
                $temp['event_menu'] = $event['event_menu'];
                $temp['event_menu_color'] = $event['event_menu_color'];
                $temp['event_detail'] = $event['event_detail'];
                $temp['event_facility_name'] = '';
                $temp['facility_name_after'] = $nameOnRight;
                //End GTM-103
                $temp['data'] = '';
                if ($allowFacilitiesName) {
                    $factory = null;
                    $app->addFacilityNameToEventTitle($event, $factory,
                        $event['id'], $nameOnRight);
                    //GTM-103
                    if (array_key_exists('event_facility_name', $event)) {
                        $temp['event_facility_name']
                            = $event['event_facility_name'];

                    }
                }
                if (is_a($member, 'GRN_Facility_Facility')) {
                    $temp['data'] .= $facility_logic->getEventTitle($event['title'],
                        $event['creator_name'], $event['private'], $title_type);
                    if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                        $temp['type'] = 'normal';
                        $temp['private'] = true;
                        $temp['event_menu'] = '';
                        $temp['event_menu_color'] = '';
                        $temp['event_detail'] = '';
                        $temp['event_facility_name'] = '';
                        $temp['facility_name_after'] = '';
                    } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                        $temp['is_private'] = true;
                    }
                    $facility_logic->getEventTitleByType($temp, $title_type,
                        $event['creator_name']);
                } else {
                    if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                        $temp['type'] = 'normal';
                        $temp['data'] = cb_msg('grn.schedule',
                            'event_hidden');
                        $temp['private'] = true;
                        $temp['event_menu'] = '';
                        $temp['event_menu_color'] = '';
                        $temp['event_detail'] = $temp['data'];
                        $temp['event_facility_name'] = '';
                        $temp['facility_name_after'] = '';
                    } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                        $temp['data'] = $event['title'];
                        $temp['is_private'] = true;
                    } else {
                        $temp['data'] = $event['title'];
                    }
                }

                $temp['start_date'] = $event['setdatetime']->format();
                if (($event['event_type'] & GRN_SCHEDULE_EVENT_TYPE_START)
                    != GRN_SCHEDULE_EVENT_TYPE_START
                ) {
                    if ($event['enddatetime']) {
                        $temp['end_date'] = $event['enddatetime']->format();
                    }
                    if ($app->compareDate($event['enddatetime'],
                            $date_info['date']) > 0
                    ) {
                        $temp['end_datetime'] = $event['enddatetime']->getDate()
                                                                     ->format();
                    }
                }
                $temp['conflict'] = array_key_exists('conflict', $event)
                    ? $event['conflict'] : false;
                //GRN2-2286
                $temp['absent'] = array_key_exists('absent', $event)
                    ? $event['absent'] : 0;
                //GRN2-2286
                if (cb_date_compare($date_info['date'],
                        $event['setdatetime']->getDate()) === 0
                ) {
                    $temp['showtime'] = cb_date_format("TimeFormat",
                        $event['setdatetime']);
                } else {
                    $temp['showtime'] = cb_date_format("ShortDateFormat",
                        $event['setdatetime']);
                }
                // using for data JSON of private appointment
                if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                    $temp['id'] = '';
                    $temp['type'] = '';
                    $temp['conflict'] = '';
                    $temp['absent'] = '';
                }
                //GTM-1625
                //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
                if ($isUserMember) {
                    if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                        $temp, $event)
                    ) {
                        continue;
                    }
                }
                $day_event['event'][] = $temp;

                $util->checkViewTime($date_info['date'], $event['setdatetime'],
                    $event['enddatetime'], $set_hour, $end_hour);
            }
        }

        $day_event['todos'] = [];
        if ($display_login) {
            foreach ($todolist as $todo) {
                $start_ts = cb_datetime_to_timestamp($date_info['date']);
                $end_ts = $start_ts + 86400;
                if ($start_ts <= $todo['ldate'] && $todo['ldate'] < $end_ts) {
                    $day_event['todos'][] = $todo;
                }
            }
        }

        // スケジュールの入れ込み
        $schedule_event[] = $day_event;
    }

    if ($display_login) {
        $todo_creator->inputSharedTodoInEvents($schedule_event);
    }

    // バナーの処理
    $banner_events = [];
    foreach (array_keys($events['banner']) as $key) {
        $event = &$events['banner'][$key];
        $work_date->year = $event['setdate']->year;
        $work_date->month = $event['setdate']->month;
        $work_date->day = $event['setdate']->day;

        $b_add = false;
        foreach (array_keys($banner_events) as $key1) {
            $banner = end($banner_events[$key1]);

            // 開始時間が終了時間の後
            if ($work_date->compare($banner['enddate']) > 0) {
                // この行に追加
                $b_add = true;

                // データの挿入
                $temp = [
                    'id'      => $event['id'],
                    'setdate' => $event['setdate'],
                    'enddate' => $event['enddate']
                ];
                //GTM-103
                $temp['event_menu'] = $event['event_menu'];
                $temp['event_menu_color'] = $event['event_menu_color'];
                $temp['event_detail'] = $event['event_detail'];
                $temp['event_facility_name'] = '';
                $temp['facility_name_after'] = $nameOnRight;
                //End GTM-103
                $temp['type'] = $util->getViewEventType($event['event_type'],
                    $event['share']);
                if ($week[0]['date']->compare($event['setdate']) >= 0) {
                    $temp['date'] = $week[0]['format'];
                } else {
                    $temp['date'] = $event['setdate']->format();
                }
                $temp['term'] = $util->getBannerTerm($event['setdate'],
                    $event['enddate'], $week[0]['date'], $week[6]['date']);
                $temp['data'] = grn_schedule_create_banner_title($temp['date'],
                    $event);
                //GRN2-2286
                $temp['absent'] = array_key_exists('absent', $event)
                    ? $event['absent'] : 0;
                //GRN2-2286
                $banner_events[$key1][] = $temp;

                break;
            }
        }

        if ($b_add) {
            continue;
        }

        // データの挿入
        $temp = [
            'id'      => $event['id'],
            'setdate' => $event['setdate'],
            'enddate' => $event['enddate']
        ];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        //GTM-103
        $temp['event_menu'] = $event['event_menu'];
        $temp['event_menu_color'] = $event['event_menu_color'];
        $temp['event_detail'] = $event['event_detail'];
        $temp['event_facility_name'] = '';
        $temp['facility_name_after'] = $nameOnRight;
        //End GTM-103
        if ($week[0]['date']->compare($event['setdate']) >= 0) {
            $temp['date'] = $week[0]['format'];
        } else {
            $temp['date'] = $event['setdate']->format();
        }
        $temp['term'] = $util->getBannerTerm($event['setdate'],
            $event['enddate'], $week[0]['date'], $week[6]['date']);
        $temp['data'] = grn_schedule_create_banner_title($temp['date'], $event);
        //GRN2-2286
        $temp['absent'] = array_key_exists('absent', $event) ? $event['absent']
            : 0;
        //GRN2-2286
        // 改行
        $banner_events[] = [$temp];
    }

    $access = null;
    if (is_a($member, 'CB_User') && $login_id == $member_id) {
        $access = ['read' => '1', 'add' => '1'];
    } else {
        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わない
        $user_groups = $uum->getUserGroupsInfo($login_id, true);
        $user_roles = $uum->getUserRolesInfo($login_id, true);

        // 施設だったら施設グループと合わせて評価して、厳しいほうにする
        if (is_a($member, 'GRN_Facility_Facility')) {
            $affiliation_group
                = $facility_logic->getFacilityAffiliationGroup($member->getOID());
            if ( ! $affiliation_group) {
                // 施設グループに所属していない
                $access = $acc_logic->getEvaluateAccessList($login,
                    $member,
                    ['read', 'add'],
                    'read_add',
                    $dynamic_roles,
                    $user_groups,
                    $user_roles);

            } else {
                $affiliation_groups
                    = [$affiliation_group->getOID() => $affiliation_group];

                $accesses = $acc_logic->getEvaluateAccessesListById($login,
                    $affiliation_groups,
                    'facilitygroup',
                    ['read', 'add'],
                    $dynamic_roles);

                $access_group = $accesses[$affiliation_group->getOID()];

                $access = $acc_logic->getEvaluateAccessList($login,
                    $member,
                    ['read', 'add'],
                    'read_add',
                    $dynamic_roles,
                    $user_groups,
                    $user_roles);
                foreach (['read', 'add'] as $auth) {
                    if ($access_group[$auth] == GRN_SCHD_ACCESS_DENY) {
                        $access[$auth] = GRN_SCHD_ACCESS_DENY;
                    }
                }
            }
        } else {
            $access = $acc_logic->getEvaluateAccessList($login,
                $member,
                ['read', 'add'],
                'read_add',
                $dynamic_roles,
                $user_groups,
                $user_roles);
        }
    }

    $member_type = 'user';
    if (is_a($member, 'GRN_Facility_Facility')) {
        $member_type = 'facility';
    } elseif (is_a($member, 'CB_Group')) {
        $member_type = 'organize';
    }

    $users_event = [
        'user_id'        => $member_id,
        'group_id'       => $group_id,
        'user_type'      => $member_type,
        'schedule_event' => $schedule_event,
        'banner_event'   => $banner_events,
        'access'         => $access,
    ];

    // カスタマイズ項目処理
    foreach (array_keys($users_event['schedule_event']) as $key) {
        $events = &$users_event['schedule_event'][$key];
        foreach (array_keys($events['event']) as $key2) {
            $event = &$events['event'][$key2];
            if (array_key_exists('private', $event) === true
                && $event['private'] === true
            ) {
                continue;
            }

            if (isset($event['id'])) {
                $strtmp = $facility_logic->getDataTitle($event['id']);
                $event['data'] .= $strtmp;
                $event['faci_items'] = $strtmp;
            }
        }
    }

    require_once('report/resources.csp');
    require_once('grn/application.csp');
    $locator = GRN_ApplicationLocator::instance();
    if (AppAccess::isAppAvailable(GRN_REPORT_APPLICATION_ID)) {
        $event_id_list = [];
        foreach (array_keys($users_event['schedule_event']) as $key) {
            $events = &$users_event['schedule_event'][$key];
            if (is_array($events)) {
                foreach (array_keys($events['event']) as $key2) {
                    $event_id_list[] = $events['event'][$key2]['id'];
                }
            }
        }

        foreach (array_keys($users_event['banner_event']) as $key) {
            $events = &$users_event['banner_event'][$key];
            if (is_array($events)) {
                foreach (array_keys($events) as $key2) {
                    $event_id_list[] = $events[$key2]['id'];
                }
            }
        }

        //報告書に関連するイベントIDを取得
        require_once('report/report_schedule_logic.csp');
        $report_schedule_logic
            = GRN_Report_Report_Schedule_Logic::getInstance();
        $report_relation_id_list
            = $report_schedule_logic->getRelatedReportEventIdsByEventIds($event_id_list,
            $login);

        foreach (array_keys($users_event['schedule_event']) as $key) {
            $events = &$users_event['schedule_event'][$key];
            if (is_array($events)) {
                foreach (array_keys($events['event']) as $key2) {
                    if (isset($report_relation_id_list[$events['event'][$key2]['id']])) {
                        $events['event'][$key2]['report'] = 1;
                    }
                }
            }
        }

        foreach (array_keys($users_event['banner_event']) as $key) {
            $events = &$users_event['banner_event'][$key];
            if (is_array($events)) {
                foreach (array_keys($events) as $key2) {
                    if (isset($report_relation_id_list[$events[$key2]['id']])) {
                        $events[$key2]['report'] = 1;
                    }
                }
            }
        }
    }
}

// ナビゲーションのための日付の算出
$prev_date = new CB_DateEx($week[0]['date']);
$prev_date->moveDays(-1);
$next_date = new CB_DateEx($week[0]['date']);
$next_date->moveDays(1);

$prev_week = $util->getPrevWeekDate($week[0]['date'], $startwday);
$next_week = $util->getNextWeekDate($week[0]['date'], $startwday);

$do_not_have_using_privilege = 0;
if (is_numeric($member_id)) {
    require_once('grn/application.csp');
    $locator = GRN_ApplicationLocator::instance();
    if ( ! AppAccess::isAppAvailableInternalAccess(GRN_SCHEDULE_APPLICATION_ID,
        $member_id)
    ) {
        $do_not_have_using_privilege = 1;
    }
}

// Copyrightを表示しない
global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

require_once("grn/JSONResponse.csp");
$json = \grn\grn\JSONResponse::create();
$json->response([
    'set_hour'                    => $set_hour,
    'end_hour'                    => $end_hour,
    'simple_add_eid'              => cb_at($G_INPUT, 'event'),
    'data_event_json'             => [
        'schedule_event' => $users_event['schedule_event'],
        'banner_event'   => $users_event['banner_event']
    ],
    'do_not_have_using_privilege' => $do_not_have_using_privilege
],
    true,
    $json::JSON_HEADER,
    JSON_HEX_QUOT | JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS);
