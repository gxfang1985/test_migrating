<?php

use grn\schedule\bean\AttendanceStatus;
use grn\schedule\AttendanceStatusLogic;
use grn\grn\access\service\AppAccess;

if ( ! function_exists('_grn_schedule_get_sethour')) {
    function _grn_schedule_get_sethour($dateex, $setdatetime, $set_hour)
    {
        if ($dateex->compare($setdatetime) != 0) {
            return $set_hour;
        }

        if ($setdatetime->hour < $set_hour) {
            return $set_hour;
        }

        return $setdatetime->hour;
    }
}

if ( ! function_exists('_grn_schedule_get_endhour')) {
    function _grn_schedule_get_endhour($dateex, $enddatetime, $end_hour)
    {
        if ($dateex->compare($enddatetime) != 0) {
            return $end_hour;
        }

        if ($enddatetime->hour >= $end_hour) {
            return $end_hour;
        }

        return $enddatetime->hour;
    }
}

if ( ! function_exists('_grn_schedule_get_allday_event')) {
    function _grn_schedule_get_allday_event(& $event, $date)
    {
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();

        $temp = [];
        $temp['id'] = $event['id'];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        //GTM-103
        $temp['event_menu'] = $event['event_menu'];
        $temp['event_menu_color'] = $event['event_menu_color'];
        $temp['event_detail'] = $event['event_detail'];
        //End GTM-103
        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
            $temp['type'] = 'normal';
            $temp['data'] .= cb_msg('grn.schedule',
                'event_hidden');
            $temp['private'] = true;
            $temp['event_menu'] = '';
            $temp['event_menu_color'] = '';
            $temp['event_detail'] = $temp['data'];
            $temp['event_facility_name'] = '';
            $temp['facility_name_after'] = '';
        } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
            $temp['data'] = grn_schedule_create_allday_title($date,
                $event);
            $temp['is_private'] = true;
        } else {
            $temp['data'] = grn_schedule_create_allday_title($date, $event);
        }

        $temp['start_date'] = $event['setdate']->format();
        $temp['end_date'] = $event['enddate']->format();
        $temp['allday'] = true;
        //GRN2-2286
        $temp['absent'] = array_key_exists('absent', $event) ? $event['absent']
            : 0;

        //GRN2-2286
        return $temp;
    }
}

if ( ! function_exists('_grn_schedule_get_normal_event')) {
    function _grn_schedule_get_normal_event(
        & $event,
        & $date,
        $showendtime,
        $member = null,
        $next = false
    ) {
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();

        $temp = [];
        $temp['id'] = $event['id'];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        //GTM-103
        $temp['event_menu'] = $event['event_menu'];
        $temp['event_menu_color'] = $event['event_menu_color'];
        $temp['event_detail'] = $event['event_detail'];
        $temp['event_facility_name'] = '';
        $temp['facility_name_after'] = null;
        //End GTM-103
        $temp['data'] = '';
        if ($next) {
            $temp['data'] = $util->getViewHour($date,
                $event['setdatetime'],
                $event['enddatetime'],
                $event['event_type'], $showendtime);
        }

        if (strlen($temp['data']) > 0) {
            $temp['data'] .= ' ';
        }
        if (is_a($member, 'GRN_Facility_Facility')) {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            $title_type = $facility_logic->getFacilityTitle();
            $temp['data'] .= $facility_logic->getEventTitle($event['title'],
                $event['creator_name'], $event['private'], $title_type);
            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['type'] = 'normal';
                $temp['private'] = true;
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
                $temp['event_detail'] = $temp['data'];
                $temp['event_facility_name'] = '';
                $temp['facility_name_after'] = '';
            } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['is_private'] = true;
            }
        } else {
            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['type'] = 'normal';
                $temp['data'] .= cb_msg('grn.schedule',
                    'event_hidden');
                $temp['private'] = true;
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
                $temp['event_detail'] = $temp['data'];
                $temp['event_facility_name'] = '';
                $temp['facility_name_after'] = '';
            } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['data'] .= $event['title'];
                $temp['is_private'] = true;
            } else {
                $temp['data'] .= $event['title'];
            }
        }

        $temp['conflict'] = array_key_exists('conflict', $event)
            ? $event['conflict'] : false;
        //GRN2-2286
        $temp['absent'] = array_key_exists('absent', $event) ? $event['absent']
            : 0;

        //GRN2-2286
        return $temp;
    }
}

global $G_INPUT;

$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;
$plid = array_key_exists('plid', $G_INPUT) ? $G_INPUT['plid'] : null;

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/TodoEventCreator.csp');
$todo_creator = \grn\schedule\TodoEventCreator::createDayEvent($G_INPUT);
$shared_todos = $todo_creator->getMyUncompletedSharedTodo();

//GTM-1625 Get attendance status setting;
$attendanceStatusLogic = new AttendanceStatusLogic();
$isEnableAttendanceStatus = $attendanceStatusLogic->isEnableAttendanceCheck();

// 今日を求める
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$today = $tsex->getDate();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
if ($systemlogic->getAllowFacilitiesName() == '1') {
    $allowfacilitiesname = true;
} else {
    $allowfacilitiesname = false;
}
if ($systemlogic->getAllowFacilitiesNameOnRight() == '1') {
    $nameonright = true;
} else {
    $nameonright = false;
}
// ログインユーザーの各種設定の取得
$unit = $systemlogic->getScheduleUnit();
$showendtime = $personallogic->getShowEndTime($login);
$startwday = $personallogic->getCalendarWeekStart($login);
$hiddenprivate = $systemlogic->getHiddenPrivate();
$showgroup = $systemlogic->getShowOrganize();
$showholiday = $systemlogic->getShowHoliday();

$member_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid'] : false;

$member = null;

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

//メンバーの処理
if ( ! $member_id) {
    $member_id = $login_id;
    $member = $login;
} // 施設
elseif (mb_substr($member_id, 0, 1) == 'f') {
    $member = $facility_logic->getFacility(mb_substr($member_id, 1));
} // 組織
elseif (mb_substr($member_id, 0, 1) == 'g' && $showgroup) {
    $member = $uum->getGroup(mb_substr($member_id, 1));
} // 人
else {
    $member = $uum->getUser($member_id);
}

if ( ! $member) {
    $member_id = $login_id;
    $member = $login;
}

// 表示するものにアクセス権があるかどうかのチェック
if (is_object($member)
    && ( ! is_a($member, 'CB_User')
         || ($member->getOID() != $login_id))
) {
    $dynamic_roles = $uum->listGrantedRoles();

    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();

    if (is_a($member, 'GRN_Facility_Facility')) {
        // 施設のアクセス権はグループをたどって評価する
        $tmp_array = [$member->getOID() => $member];
        $access = $acc_logic->evaluateAccessesById($login, $tmp_array,
            ['read'], $dynamic_roles, 'facility');
    } else {
        $access = $acc_logic->evaluateAccess($login, $member, ['read'],
            $dynamic_roles);
    }

    if ( ! $access) {
        $member_id = $login_id;
        $member = $login;
    }
}

$member_type = 'user';
if (is_a($member, 'GRN_Facility_Facility')) {
    $member_type = 'facility';
} elseif (is_a($member, 'CB_Group')) {
    $member_type = 'group';
}

$display_login = false;
if ($member instanceof CB_User && $member_id === $login_id) {
    $display_login = true;
}

$set_hour = 0;
$end_hour = 0;
$personallogic->getViewHour($login, $set_hour, $end_hour);

$b_nextevent = $personallogic->getNextEvents($login) === 'off' ? false : true;

$week = [];
$dateex = new CB_DateEx($date);
$get_settime = null;
$get_endtime = null;

$get_settime = $dateex;
$get_endtime = $dateex;

// 日付の準備
for ($i = 0; $i < 2; ++$i) {
    $week[] = [
        'format'      => $dateex->format(),
        'type'        => $util->getDayType($dateex),
        'date'        => $dateex,
        'get_settime' => $get_settime,
        'get_endtime' => $get_endtime
    ];
    $dateex = clone $dateex;
    $dateex->moveDays(1);
    $get_settime = clone $get_settime;
    $get_settime->moveDays(1);
    $get_endtime = clone $get_endtime;
    $get_endtime->moveDays(1);
}

// カレンダー
require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($week[0]['date'],
    $week[1]['date'], $login);

$shared_calendar
    = $calendar_service->getDaysInfoFromSharedCalendar($week[0]['date'],
    $week[1]['date'], $login);
$calendars = array_merge_recursive($calendars, $shared_calendar);

// カレンダーから余計なデータを削除
if ( ! is_a($member, 'CB_User') || $member->getOID() != $login_id) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 個人データの削除
            if (($calendars[$key1][$key2]['type']
                 == GRN_CALENDAR_TYPE_MEMORIALDAY)
                || ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_USER_MEMO)
            ) {
                unset($calendars[$key1][$key2]);
                continue;
            }
            if ( ! $showholiday) {
                if ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                ) {
                    unset($calendars[$key1][$key2]);
                }
            }
        }
    }
} elseif ( ! $showholiday) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 祝日以外は削除
            if ($calendars[$key1][$key2]['type']
                == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
            ) {
                unset($calendars[$key1][$key2]);
            }
        }
    }
}

if ($member_type === 'facility') {
    $title_type = $facility_logic->getFacilityTitle();
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL;
} else {
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
               + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;
}
$schedule_event = [
    'user_type' => $member_type === 'group' ? 'organize' : $member_type,
    'user_id'   => $member_id,
    'date'      => $week[0]['format'],
    'padding'   => 1,
    'next'      => ['open' => $b_nextevent ? 'on' : 'off'],
];

$next_event = [];
$counter = 0;
$work_date = new CB_DateEx($today);
if (is_object($member)) {
    $isUserMember = is_a($member, 'CB_User');
    $events = $app->getEventsForWeek($member, $week[0]['get_settime'],
        $week[1]['get_endtime'], $login, $sc_type, $hiddenprivate, $week, true,
        $isEnableAttendanceStatus);

    if (array_key_exists($week[0]['format'], $calendars)) {
        $schedule_event['calendar'] = $calendars[$week[0]['format']];
    }

    if ($b_nextevent && array_key_exists($week[1]['format'], $calendars)) {
        $schedule_event['next']['calendar'] = $calendars[$week[1]['format']];
    }

    // 時間表示する場所の終日の処理
    $schedule_event['allday_event'] = [];
    if (array_key_exists($week[0]['format'], $events['allday'])) {
        foreach (array_keys($events['allday'][$week[0]['format']]) as $key) {
            $event = &$events['allday'][$week[0]['format']][$key];
            //GRN2-2286
            //$temp['absent'] = array_key_exists( 'absent', $event ) ? $event['absent'] : 0;
            //GRN2-2286
            $temp = _grn_schedule_get_allday_event($event, $week[0]['format']);
            //GTM-1625
            //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
            if ($isUserMember) {
                if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                    $temp, $event)
                ) {
                    continue;
                }
            }
            $schedule_event['allday_event'][] = $temp;
        }
    }

    $day_todos = [];
    if ($display_login) {
        $day_todos = $util->getDayToDoListView($login, $week[0]['get_settime']);
        $schedule_event['shared_todos']
            = $todo_creator->getTodoByIndex($shared_todos, 0);
    }
    $schedule_event['todos'] = $day_todos;
    if ($b_nextevent
        && array_key_exists($week[1]['format'], $events['allday'])
    ) {
        $schedule_event['next']['allday_event'] = [];
        foreach (array_keys($events['allday'][$week[1]['format']]) as $key) {
            $event = &$events['allday'][$week[1]['format']][$key];
            $temp = _grn_schedule_get_allday_event($event, $week[1]['format']);
            //GTM-1625
            //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
            if ($isUserMember) {
                if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                    $temp, $event)
                ) {
                    continue;
                }
            }
            $schedule_event['next']['allday_event'][] = $temp;
        }
        $tomorrow_todos = [];
        if ($display_login) {
            $tomorrow_todos = $util->getDayToDoListView($login,
                $week[1]['get_settime']);
            $schedule_event['next']['shared_todos']
                = $todo_creator->getTodoByIndex($shared_todos, 1);
        }
        $schedule_event['next']['todos'] = $tomorrow_todos;
    }

    // 時間表示する場所の時間ありの処理
    $day_event = [];
    if (array_key_exists($week[0]['format'], $events['normal'])) {
        foreach (array_keys($events['normal'][$week[0]['format']]) as $key) {
            $event = &$events['normal'][$week[0]['format']][$key];
            if ($allowfacilitiesname) {
                $factory = null;
                $app->addFacilityNameToEventTitle($event, $factory,
                    $event['id'], $nameonright);
            }
            // ログインユーザー以外は、表示時間外をはずす
            $temp = _grn_schedule_get_normal_event($event, $week[0]['date'],
                $showendtime, $member);

            if (cb_date_compare($date, $event['setdatetime']->getDate())
                === 0
            ) {
                $temp['showtime'] = cb_date_format("TimeFormat",
                    $event['setdatetime']);
            } else {
                $temp['showtime'] = cb_date_format("ShortDateFormat",
                    $event['setdatetime']);
            }
            $temp['start_date'] = $event['setdatetime']->format();
            if (($event['event_type'] & GRN_SCHEDULE_EVENT_TYPE_START)
                != GRN_SCHEDULE_EVENT_TYPE_START
            ) {
                if ($event['enddatetime']) {
                    $temp['end_date'] = $event['enddatetime']->format();
                }
                require_once('schedule/application.csp');
                $app = GRN_Schedule_Application::getInstance();
                if ($app->compareDate($event['enddatetime'], $week[0]['date'])
                    > 0
                ) {
                    $temp['end_datetime'] = $event['enddatetime']->getDate()
                                                                 ->format();
                }
            }

            $util->checkViewTime($week[0]['date'], $event['setdatetime'],
                $event['enddatetime'], $set_hour, $end_hour);
            if ($allowfacilitiesname) {
                //GTM-103
                $temp['facility_name_after'] = $nameonright;
                if (array_key_exists('event_facility_name', $event)
                    && $event['private'] != GRN_EVENT_PRIVATE_HIDDEN
                ) {
                    $temp['event_facility_name']
                        = $event['event_facility_name'];
                }
            }
            if ($event['private'] != GRN_EVENT_PRIVATE_HIDDEN
                && $event['private'] != GRN_EVENT_PRIVATE_PRIVATE
            ) {
                if (array_key_exists('creator_name', $event)
                    && $title_type != null
                ) {
                    $facility_logic->getEventTitleByType($temp, $title_type,
                        $event['creator_name']);
                }
            }
            // using for data JSON of private appointment
            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['id'] = '';
                $temp['type'] = '';
                $temp['conflict'] = '';
                $temp['absent'] = '';
            }
            //GTM-1625
            //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
            if ($isUserMember) {
                if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                    $temp, $event)
                ) {
                    continue;
                }
            }
            $day_event[] = $temp;
        }
        $schedule_event['time_event'] = $day_event;
        $schedule_event['date_type'] = $week[0]['type'];
    }

    if (array_key_exists($week[1]['format'], $events['normal'])) {
        $schedule_event['next']['event'] = [];
        foreach (array_keys($events['normal'][$week[1]['format']]) as $key) {
            $event = &$events['normal'][$week[1]['format']][$key];
            if ($allowfacilitiesname) {
                $factory = null;
                $app->addFacilityNameToEventTitle($event, $factory,
                    $event['id'], $nameonright);
                //GTM-103
                if (array_key_exists('event_facility_name', $event)
                    && $event['private'] != GRN_EVENT_PRIVATE_HIDDEN
                ) {
                    $temp['event_facility_name']
                        = $event['event_facility_name'];
                }
            }
            $temp = _grn_schedule_get_normal_event($event, $week[1]['date'],
                $showendtime, $member, true);
            //GTM-1625
            //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
            if ($isUserMember) {
                if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                    $temp, $event)
                ) {
                    continue;
                }
            }
            $schedule_event['next']['event'][] = $temp;
        }
    }

    // バナーの処理
    $banner_events = [];
    $nextbanner_events = [];
    foreach (array_keys($events['banner']) as $key) {
        $event = &$events['banner'][$key];

        $temp = [
            'id'      => $event['id'],
            'setdate' => $event['setdate'],
            'enddate' => $event['enddate']
        ];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        if ($week[0]['date']->compare($event['setdate']) >= 0) {
            $temp['date'] = $week[0]['format'];
        } else {
            $temp['date'] = $event['setdate']->format();
        }
        $temp['data'] = grn_schedule_create_banner_title($temp['date'], $event);

        if ($week[1]['date']->compare($event['setdate']) <= 0) {
            $nextbanner_events[] = $temp;
            continue;
        }
        //GRN2-2286
        $temp['absent'] = array_key_exists('absent', $event) ? $event['absent']
            : 0;
        //GRN2-2286
        $banner_events[] = $temp;
        if ($week[1]['date']->compare($event['enddate']) <= 0) {
            $nextbanner_events[] = $temp;
        }
    }
    $schedule_event['banner_event'] = $banner_events;
    $schedule_event['next']['banner_event'] = $nextbanner_events;

}

// カスタマイズ項目処理
// 明日の予定
foreach (array_keys($schedule_event['next']['event']) as $key) {
    $event = &$schedule_event['next']['event'][$key];
    if (array_key_exists('private', $event) === true
        && $event['private'] === true
    ) {
        continue;
    }

    if (isset($event['id'])) {
        $strtmp = $facility_logic->getDataTitle($event['id']);
        $event['data'] .= $strtmp;
        $event['faci_items'] = $strtmp;
    }
}
// 当日の予定

foreach (array_keys($schedule_event['time_event']) as $key)//key 0,1,2,3,4,5,6
{
    $event = &$schedule_event['time_event'][$key];
    if (array_key_exists('private', $event) === true
        && $event['private'] === true
    ) {
        continue;
    }
    if (isset($event['id'])) {
        $strtmp = $facility_logic->getDataTitle($event['id']);
        $event['data'] .= $strtmp;
        $event['faci_items'] = $strtmp;
    }
}
require_once('schedule/report_util.csp');
//GTM-259 tv
require_once('report/resources.csp');
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
if (AppAccess::isAppAvailable(GRN_REPORT_APPLICATION_ID)) {
    $event_id_list = getEventIdListByScheduleEvent($schedule_event);

    //報告書に関連するイベントIDを取得
    require_once('report/report_schedule_logic.csp');
    $report_schedule_logic = GRN_Report_Report_Schedule_Logic::getInstance();
    $report_relation_id_list
        = $report_schedule_logic->getRelatedReportEventIdsByEventIds($event_id_list,
        $login);

    //報告書と関連が存在するか調べる
    //通常の予定
    if (isset($schedule_event['time_event'])) {
        foreach (array_keys($schedule_event['time_event']) as $key) {
            $event = &$schedule_event['time_event'][$key];
            if (isset($report_relation_id_list[$event['id']])) {
                $event['report'] = 1;
            }
        }
    }
    //終日予定
    if (isset($schedule_event['allday_event'])) {
        foreach (array_keys($schedule_event['allday_event']) as $key) {
            $event = &$schedule_event['allday_event'][$key];
            if (isset($report_relation_id_list[$event['id']])) {
                $event['report'] = 1;
            }
        }
    }
    //期間予定
    if (isset($schedule_event['banner_event'])) {
        foreach (array_keys($schedule_event['banner_event']) as $key) {
            $event = &$schedule_event['banner_event'][$key];
            if (isset($report_relation_id_list[$event['id']])) {
                $event['report'] = 1;
            }
        }
    }
    //明日の予定(通常)
    if (isset($schedule_event['next']['event'])) {
        foreach (array_keys($schedule_event['next']['event']) as $key) {
            $event = &$schedule_event['next']['event'][$key];
            if (isset($report_relation_id_list[$event['id']])) {
                $event['report'] = 1;
            }
        }
    }
    //明日の予定(終日)
    if (isset($schedule_event['next']['allday_event'])) {
        foreach (array_keys($schedule_event['next']['allday_event']) as $key) {
            $event = &$schedule_event['next']['allday_event'][$key];
            if (isset($report_relation_id_list[$event['id']])) {
                $event['report'] = 1;
            }
        }
    }
    //明日の予定(期間)
    if (isset($schedule_event['next']['allday_event'])) {
        foreach (array_keys($schedule_event['next']['banner_event']) as $key) {
            $event = &$schedule_event['next']['banner_event'][$key];
            if (isset($report_relation_id_list[$event['id']])) {
                $event['report'] = 1;
            }
        }
    }
}

$do_not_have_using_privilege = 0;
if (is_numeric($member_id)) {
    require_once('grn/application.csp');
    $locator = GRN_ApplicationLocator::instance();
    if ( ! AppAccess::isAppAvailableInternalAccess(GRN_SCHEDULE_APPLICATION_ID,
        $member_id)
    ) {
        $do_not_have_using_privilege = 1;
    }
}

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

require_once("grn/JSONResponse.csp");
$json = \grn\grn\JSONResponse::create();
$json->response([
    'set_hour'                    => $set_hour,
    'end_hour'                    => $end_hour,
    'simple_add_eid'              => cb_at($G_INPUT, 'event'),
    'data_event_json'             => [
        'schedule_event' => $schedule_event['time_event'],
        'allday_event'   => $schedule_event['allday_event'],
        'banner_event'   => $schedule_event['banner_event']
    ],
    'do_not_have_using_privilege' => $do_not_have_using_privilege
],
    true,
    $json::JSON_HEADER,
    JSON_HEX_QUOT | JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS);
