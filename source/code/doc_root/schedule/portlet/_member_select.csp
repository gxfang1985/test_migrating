<?php

global $G_INPUT;

if (@ $G_INPUT['ss']) {
    require_once('fw/session_manager.csp');
    $sm = CB_SessionManager::getInstance();
    $session = $sm->getSession('schedule/portlet/settings');

    $portlet['settings'] = $session->get('portlet_settings');
}

//Get Portlet Settings
$portlet_setting = null;
if ( ! is_null($portlet['settings'])) {
    //User Week Data
    $portlet_settings =& $portlet['settings'];
}
//Create Font Options Array
$font_options = [
    ['value' => 'small', 'label' => cb_msg('grn.schedule', 'font_size_small')],
    [
        'value' => 'normal',
        'label' => cb_msg('grn.schedule', 'font_size_normal')
    ],
    ['value' => 'large', 'label' => cb_msg('grn.schedule', 'font_size_large')],
];
$font_size = @$portlet_settings['font_size'];
switch ($font_size) {
    case 'small':
        $font_options[0]['selected'] = true;
        break;
    case 'normal':
        $font_options[1]['selected'] = true;
        break;
    case 'large':
        $font_options[2]['selected'] = true;
        break;
    default:
        $font_options[1]['selected'] = true;
        break;
}

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
$show_organize = $systemlogic->getShowOrganize();

if ($show_organize) {
    $t->assign('show_organize', true);
} else {
    $t->assign('show_organize', false);
}

require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();
$dynamic_roles = $uum->listGrantedRoles();
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

if ( ! isset($display)) {
    $display = 'set-personal';
}
$b_personal = false;
if ($display == 'set-personal') {
    $b_personal = true;
}

$forced_list = [];
$login_title = cb_msg('grn.schedule', 'login_user');
$forced_list['login'] = [
    'title' => $login_title,
    'users' => ['0' => $login_title]
];
$t->assign('forced_list', $forced_list);

// システム設定情報
require_once('schedule/system_logic.csp');
$system_logic = GRN_Schedule_SystemLogic::getInstance();
$allow_all_facilities = $system_logic->getAllowAllFacilities();
$t->assign('allow_all_facilities', $allow_all_facilities);

if ($allow_all_facilities) {
    $default_group_name = $fgroup ? $fgroup->get('name')
        : cb_plain_msg('grn.schedule', 'facility_all');
    $facilities_tmp = $facility_logic->getOrderedFacilityPartInfoList();
    $facilities_order = array_keys($facilities_tmp);

    if ($display !== 'set-system') {
        $facilities_tmp = $acc_logic->evaluateAccessesById($login,
            $facilities_tmp, ['read'], $dynamic_roles, 'facility');

        $facilities = [];
        foreach ($facilities_order as $key) {
            // アクセス権があったものだけ返す
            if (array_key_exists($key, $facilities_tmp)) {
                $facilities[$key] = $facilities_tmp[$key];
            }
        }
    } else // システム管理画面の場合はアクセス権を評価しない
    {
        $facilities = $facilities_tmp;
    }
    $ancestors = $facility_logic->getAllAncestors($facilities);
    foreach (array_keys($facilities) as $key) {
        $facilities[$key]['ancestors'] = $ancestors[$key];
    }
    $t->assign('show_affiliation_group', true);
} else {
    $default_group_name = $fgroup ? $fgroup->get('name')
        : cb_plain_msg('grn.schedule', 'select_group');
    $facilities = [];
    $t->assign('show_affiliation_group', false);
}
$t->assign('item_group', $facilities);
$t->assign('default_group_name', $default_group_name);

// 選択されているユーザーの設定
$member_id = @ $portlet_settings['uid'];
$member = null;

if ( ! $member_id) {
    $login_title = preg_replace(['/&lt;/', '/&gt;/', '/&quot;/', '/&amp;/'],
        ['<', '>', '"', '&'], $login_title);
    $t->assign('initialize_users', ['id' => '0', 'title' => $login_title]);
} else {
    if (mb_substr($member_id, 0, 1) == 'f') {
        $member = $facility_logic->getFacility(mb_substr($member_id, 1));
        if ($member !== false) {
            $t->assign('initialize_users', [
                'id'    => 'f' . $member->getOID(),
                'title' => $member->get('name')
            ]);
        }
    } elseif (mb_substr($member_id, 0, 1) == 'g' && $show_organize) {
        $member = $uum->getGroup(mb_substr($member_id, 1));
        if ($member) {
            $t->assign('initialize_users', [
                'id'    => 'g' . $member->getOID(),
                'title' => $member->get('name')
            ]);
        }
    } else {
        $member = $uum->getUser($member_id);
        if ($member) {
            $t->assign('initialize_users', [
                'id'    => $member->getOID(),
                'title' => GRN_ControllerUtil::getUserNameText($login->getOID(),
                    $member->getOID())
            ]);
        }
    }

    if ( ! $member) {
        $login_title = preg_replace(['/&lt;/', '/&gt;/', '/&quot;/', '/&amp;/'],
            ['<', '>', '"', '&'], $login_title);
        $t->assign('initialize_users', ['id' => '0', 'title' => $login_title]);
    }
}

if ($display !== 'set-system') {
    if (is_object($member)
        && ( ! is_a($member, 'CB_User')
             || $member->getOID() != $login_id)
    ) {
        $allow_access = true;
        if (is_a($member, 'GRN_Facility_Facility')) {
            $tmp = $acc_logic->evaluateAccessesById($login,
                [$member->getOID() => $member], ['read'], $dynamic_roles,
                'facility');
            $allow_access = count($tmp) > 0;
        } elseif ($display === 'set-personal') {
            $allow_access = $acc_logic->evaluateAccess($login, $member,
                ['read'], $dynamic_roles);
        }
        // アクセス権がない場合は、ログインユーザーに強制変更
        if ( ! $allow_access) {
            $login_title = preg_replace([
                '/&lt;/',
                '/&gt;/',
                '/&quot;/',
                '/&amp;/'
            ], ['<', '>', '"', '&'], $login_title);
            $t->assign('initialize_users',
                ['id' => '0', 'title' => $login_title]);
        }
    }
}

$page_name = cb_get_pagename();
$action = $b_personal ? ['read'] : null;
$access_plugin = [
    'name'         => 'schedule',
    'params'       => ['action' => $action],
    'session_name' => $page_name
];
$t->assign('access_plugin', $access_plugin);
$t->assign('plugin_session_name', $page_name);
$t->assign('plugin_data_name', 'access_plugin');
