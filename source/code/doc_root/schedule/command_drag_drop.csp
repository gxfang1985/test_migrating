<?php

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\schedule\FacilityApprovalLogic;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    global $G_state_set;
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
    $login_id = $login->getOID();

    //
    require_once('schedule/application.csp');
    $app = GRN_Schedule_Application::getInstance();

    require_once('schedule/view_util.csp');
    $util = GRN_Schedule_View_Util::getInstance();
    if ( ! $util->getUsingDragDropSchedule($login)) {
        cb_throw_error(E_GRN_SCHD_DEACTIVE_DRAGDROP);
    }
    //get parameters

    //event
    $event_id = null;
    if (array_key_exists('event_id', $G_INPUT) && $G_INPUT['event_id']) {
        $event_id = $G_INPUT['event_id'];
    }

    //uid
    $uid = null;
    if (array_key_exists('uid', $G_INPUT) && $G_INPUT['uid']) {
        $uid = $G_INPUT['uid'];
    }

    //gid
    $gid = null;
    if (array_key_exists('gid', $G_INPUT) && $G_INPUT['gid']) {
        $gid = $G_INPUT['gid'];
    }

    //referer key
    $referer_key = null;
    if (array_key_exists('referer_key', $G_INPUT) && $G_INPUT['referer_key']) {
        $referer_key = $G_INPUT['referer_key'];
    }

    //facility id
    $facility_id = null;
    if (array_key_exists('facility_id', $G_INPUT) && $G_INPUT['facility_id']) {
        $facility_id = $G_INPUT['facility_id'];
    }

    //bdate
    $bdate = null;
    if (array_key_exists('bdate', $G_INPUT) && $G_INPUT['bdate']) {
        $bdate = $G_INPUT['bdate'];
    }
    $date = new CB_Date();
    if ( ! $date->parse($bdate)) {
        $date = null;
    }

    //start date
    $sdate = null;
    if (array_key_exists('start_date', $G_INPUT) && $G_INPUT['start_date']) {
        $sdate = $G_INPUT['start_date'];
    }
    $start_date = new CB_Date();
    if ( ! $start_date->parse($sdate)) {
        cb_throw_error(E_GRN_SCHD_INVALID_SETDATE);
    }

    //end date
    $edate = null;
    if (array_key_exists('end_date', $G_INPUT) && $G_INPUT['end_date']) {
        $edate = $G_INPUT['end_date'];
    }
    $end_date = new CB_Date();
    if ( ! $end_date->parse($edate)) {
        $end_date = null;
    }


    //start hour
    $start_hour = 0;
    if (array_key_exists('start_hour', $G_INPUT) && $G_INPUT['start_hour']) {
        $start_hour = $G_INPUT['start_hour'];
    }

    //start minute
    $start_minute = 0;
    if (array_key_exists('start_minute', $G_INPUT)
        && $G_INPUT['start_minute']
    ) {
        $start_minute = $G_INPUT['start_minute'];
    }

    //end hour
    $end_hour = null;
    if (array_key_exists('end_hour', $G_INPUT)
        && is_numeric($G_INPUT['end_hour'])
    ) {
        $end_hour = $G_INPUT['end_hour'];
    }

    //end minute
    $end_minute = null;
    if (array_key_exists('end_minute', $G_INPUT)
        && is_numeric($G_INPUT['end_minute'])
    ) {
        $end_minute = $G_INPUT['end_minute'];
    }

    // invalid date
    if ( ! is_a($end_date, 'CB_Date') && is_numeric($end_hour)) {
        cb_throw_error(E_GRN_SCHD_INVALID_ENDDATE);
    }

    // invalid hour
    if (is_a($end_date, 'CB_Date') && is_null($end_hour)
        && is_numeric($end_minute)
    ) {
        cb_throw_error(E_GRN_SCHD_INVALID_ENDTIME);
    }

    if (is_a($start_date, 'CB_Date') && is_a($end_date, 'CB_Date')) {
        // check date
        $dateex = new CB_DateEx($start_date);
        // 日付が前後している
        if ($dateex->compare($end_date) > 0) {
            cb_throw_error(E_GRN_SCHD_INVALID_DATE);
        } elseif ($dateex->compare($end_date) == 0 && is_numeric($start_hour)
                  && is_numeric($end_hour)
        ) {
            if (($start_hour > $end_hour)
                || ($start_hour == $end_hour
                    && $start_minute > $end_minute)
            ) {
                cb_throw_error(E_GRN_SCHD_INVALID_TIME);
            }
        }
    }

    //conflict fids
    $conflict_fids = "";
    if (array_key_exists('conflict_fids', $G_INPUT)
        && $G_INPUT['conflict_fids']
    ) {
        $conflict_fids = $G_INPUT['conflict_fids'];
    }

    //alter fids
    $alter_fids = "";
    if (array_key_exists('alter_fids', $G_INPUT) && $G_INPUT['alter_fids']) {
        $alter_fids = $G_INPUT['alter_fids'];
    }


    //no facility
    $chk_not = 0;
    if (array_key_exists('chk_not', $G_INPUT) && $G_INPUT['chk_not']) {
        $chk_not = intval($G_INPUT['chk_not']);
    }

    //convert string to array
    $conflict_fids = explode(",", $conflict_fids);
    if (count($conflict_fids) > 0) {
        unset($conflict_fids[count($conflict_fids) - 1]);
    }
    $alter_fids = explode(",", $alter_fids);
    if (count($alter_fids) > 0) {
        unset($alter_fids[count($alter_fids) - 1]);
    }

    //get old event
    $old_event = $app->getEvent($login, $event_id, $date);
    if ( ! $old_event) {
        cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
    }

    // cache old event
    $cacheOldEvent = clone $old_event;

    if ($chk_not) {
        $old_event->facilities = null;
        $conflict_fids = [];
        $alter_fids = [];
    }

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    if (is_array($old_event->facilities) && count($old_event->facilities) > 0) {
        $f_settings
            = $facility_logic->getFacilitySetting(array_keys($old_event->facilities));
        foreach (array_keys($old_event->facilities) as $key) {
            $object = &$old_event->facilities[$key];
            $faid = $object->getOID();
            $modify_user = $facility_logic->getModifyUserByPriority($f_settings,
                $faid);
            // 登録者にのみ変更を許可する
            if ($modify_user === 'creator') {
                // 施設で登録者しか変更を許していない場合
                if ((is_array($old_event->facilities)
                     && count($old_event->facilities) > 0)
                ) {
                    require_once('schedule/facility_privilege.csp');
                    $privilege_logic
                        = GRN_Facility_Privilege_Logic::getInstance();
                    if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                            $old_event->facilities, 'OR')
                         && ((is_a($old_event->creator, 'CB_User')
                              && $login_id != $old_event->creator->getOID())
                             || is_string($old_event->creator))
                    ) {
                        cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                    }
                }
            } // 登録者と共有メンバーに変更を許可する
            elseif ($modify_user === 'member') {
                // 施設で登録者と共有メンバーしか変更を許していない場合
                if ((is_array($old_event->facilities)
                     && count($old_event->facilities) > 0)
                ) {
                    require_once('schedule/facility_privilege.csp');
                    $privilege_logic
                        = GRN_Facility_Privilege_Logic::getInstance();
                    if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                            $old_event->facilities, 'OR')
                         && (
                             (is_array($old_event->users)
                              && ! array_key_exists($login_id,
                                     $old_event->users))
                             || is_null($old_event->users)
                         )
                         && ((is_a($old_event->creator, 'CB_User')
                              && $login_id !== $old_event->creator->getOID())
                             || is_string($old_event->creator))
                    ) {
                        cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                    }
                }
            }
        }
    }

    // アクセス権のチェック
    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();
    $dynamic_role = $uum->listGrantedRoles();
    $access = $acc_logic->getEventAccess($login, $old_event,
        ['read', 'modify'], $dynamic_role);
    if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
    }
    if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
    }

    $timezone = CB_I18N::getInstance()->getUserTimezone($login);
    $old_event->timezone = $timezone;
    $old_event->end_timezone = $timezone;

    $type = '';
    if (is_a($old_event, 'GRN_Schedule_RepeatEvent')) {
        $type = 'RP';
    }

    //repeat event
    if ($type == 'RP') {
        $old_event->setdate = $start_date;
        $old_event->enddate = $end_date;
        $old_event->settime = $util->_createDateTime(null, null, null,
            $start_hour, $start_minute);
        $old_event->endtime = $util->_createDateTime(null, null, null,
            $end_hour, $end_minute);
    } else {
        $old_event->setdatetime = $util->_createDateTime($start_date->year,
            $start_date->month, $start_date->day, $start_hour, $start_minute);
        if (isset($end_hour)) {
            $old_event->enddatetime = $util->_createDateTime(
                $end_date->year, $end_date->month, $end_date->day, $end_hour,
                $end_minute
            );
        } else {
            $old_event->enddatetime = null;
        }
    }

    require_once('schedule/facility_privilege.csp');
    $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
    $old_event->modifier = &$login;
    if ($old_event->enddatetime != null) {
        if (count($conflict_fids) > 0) {
            foreach ($conflict_fids as $fid) {
                unset($old_event->facilities[$fid]);
            }
            if (count($alter_fids) > 0) {
                $add_facilities = [];
                foreach ($alter_fids as $fid) {
                    $old_event->facilities[$fid]
                        = $facility_logic->getFacility($fid);
                    $add_facilities[] = &$old_event->facilities[$fid];
                }
                $dynamic_roles = $uum->listGrantedRoles();
                if (is_array($add_facilities) && count($add_facilities) > 0) {
                    $access = $acc_logic->evaluateAccesses($login,
                        $add_facilities, ['read', 'modify'], $dynamic_roles,
                        'facility');
                    if (count($add_facilities) != count($access)) {
                        cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
                    }
                }
            }
        }
    }

    if (is_array($old_event->facilities) && count($old_event->facilities) > 0) {
        // GTM-1676
        if (is_a($old_event, 'GRN_Schedule_NormalEvent')) {
            $scheduleFacilityApprovalSetting
                = new ScheduleFacilityApprovalSetting();

            $facilityApprovalLogic = new FacilityApprovalLogic();
            $usingPurpose
                = $facilityApprovalLogic->getFacilityUsingPurpose($old_event->id);

            if ($scheduleFacilityApprovalSetting->hasFacilityNeedApproval(array_keys($old_event->facilities))) {
                $hasFailityNeedApproval = (count($conflict_fids) > 0
                                           && $scheduleFacilityApprovalSetting->hasFacilityNeedApproval($alter_fids));
                $isNullUsingPurpose = (count($conflict_fids) == 0
                                       && (is_null($usingPurpose)
                                           || $usingPurpose == ''));

                if ($hasFailityNeedApproval || $isNullUsingPurpose) {
                    $old_event->setUsingPurpose(cb_at($G_INPUT,
                        'using_purpose'));
                }
            }
        }
        //end GTM-1676
        // 施設の予約期間,最大時間をチェック(運用管理者は無制限)
        require_once('schedule/facility_privilege.csp');
        $facility_privilege = GRN_Facility_Privilege_Logic::getInstance();
        if ($obj_facilities
            = $facility_privilege->getFacilitiesWithoutAuthority($login,
            $old_event->facilities)
        ) {
            if ($type == 'RP') {
                $facility_logic->checkFacilityRepeat($obj_facilities);

                // GTM-1676 Check having any approval facilities
                FacilityApprovalLogic::validateRepeatEventFacilitiesForEdit($old_event->facilities,
                    $cacheOldEvent->facilities, $login);
                // end GTM-1676

                // Create today's CB_DateTime for facility max time check
                $ts = new CB_TimeStamp();
                $ts->unix_ts = time();
                $tsex = new CB_TimeStampEx($ts);

                $setdatetime = &$tsex->getDateTime();
                $setdatetime->setTime($old_event->settime);
                $setdatetime->setDate($old_event->setdate);

                $enddatetime = &$tsex->getDateTime();
                $enddatetime->setTime($old_event->endtime);
                $enddatetime->setDate($old_event->enddate);
                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $enddatetime, $setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $enddatetime);
            } else {
                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $old_event->enddatetime, $old_event->setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $old_event->enddatetime);
            }
        }
    }

    //GTM-1676 invalidate removed facilities between 2 list facility (old, new)
    if (is_a($cacheOldEvent, 'GRN_Schedule_NormalEvent')
        && is_a($old_event, 'GRN_Schedule_NormalEvent')
    ) {
        $facilityApprovalLogic = new FacilityApprovalLogic();
        $facilityApprovalLogic->invalidateFacilitiesForEventUpdate($cacheOldEvent,
            $old_event);
        // process applying info for facilities
        $facilityApprovalLogic->processApplyingInfoFacilitiesForUpdate($cacheOldEvent,
            $old_event);
    }
    //end GTM-1676

    if ($type != 'RP') {
        /* -------------- VCBSCH0010 START ----------------- */
        require_once('schedule/netmeeting_event_logic.csp');
        $vcb_event_logic = GRN_Netmeeting_EventLogic::getInstance();

        $vcb_input_data = null;
        $coop_data = null;

        // NETMEETING連携あり
        $event_to_check = $app->getEvent($login, $event_id, $date);
        if ($vcb_available
            = $vcb_event_logic->isNetmeetingAvailable($old_event)
        ) {
            // 連携データ取得
            $coop_data
                = $vcb_event_logic->getNetmeetingCoopDataByEventId($event_id);

            // 時間のチェック
            $event_status
                = $vcb_event_logic->getEventStatus($event_to_check->setdatetime,
                $event_to_check->enddatetime);

            // 会議中予定の場合
            if (($event_status === GRN_NETMEETING_MEETING_STATUS_NOW)
                && isset($coop_data)
            ) {
                // 入力チェック
                if ($vcb_event_logic->checkNetmeetingInputNow_event($old_event,
                        $event_to_check, $coop_data) === false
                ) {
                    $vcb_event_logic->throwError();
                }
                // 連携エラーの場合は連携なし
                if ($coop_data->cooperation_status
                    != GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
                ) {
                    // V-CUBE連携なし
                    $vcb_available = false;
                } else {
                    // NETMEETING入力値取得
                    if (($vcb_input_data
                        = $vcb_event_logic->getNetmeetingEventParam($old_event,
                        $login))
                    ) {
                        $vcb_event_logic->setNetmeetingInputParam($coop_data,
                            $vcb_input_data);

                        // 入力チェック
                        if ($vcb_event_logic->checkNetmeetingInputNow_input($vcb_input_data)
                            === false
                        ) {
                            $vcb_event_logic->throwError();
                        }
                    }
                }
            } // 終了予定の場合
            elseif (($event_status === GRN_NETMEETING_MEETING_STATUS_END)
                    && isset($coop_data)
            ) {
                // 入力チェック
                if ($vcb_event_logic->checkNetmeetingInputEnd($old_event,
                        $event_to_check, $coop_data) === false
                ) {
                    $vcb_event_logic->throwError();
                }
                // V-CUBE連携なし
                $vcb_available = false;
            } // 開始前予定の場合
            else {
                // NETMEETING入力値取得
                if (($vcb_input_data
                    = $vcb_event_logic->getNetmeetingEventParam($old_event,
                    $login))
                ) {
                    $vcb_event_logic->setNetmeetingInputParam($coop_data,
                        $vcb_input_data);

                    // 入力チェック
                    if ($vcb_event_logic->checkNetmeetingInput($vcb_input_data)
                        === false
                    ) {
                        $vcb_event_logic->throwError();
                    }
                }
            }
        }
        /* -------------- VCBSCH0010 END   ----------------- */
    }

    // logging: add attendance_status_initialize
    $old_event->refreshAttendanceStatus = cb_at($G_INPUT, 'refresh_status') ? 1
        : 0;

    if ($type == 'RP' && $end_date != null
        && $start_date->day != $end_date->day
    ) {
        $eid = $app->modifyEvent($old_event, $start_date, 'this', $start_date,
            $end_date);
    } else {
        if ( ! isset($end_hour) || ! isset($end_minute)) {
            $old_event->enddatetime = null;
        }
        $eid = $app->modifyEvent($old_event, $start_date, 'this');
    }

    // set appointment notification
    $new_event = $old_event;
    $tsex = new CB_TimeStampEx();
    $today = $tsex->getDate();
    if ($type == 'RP') {
        require_once('grn/application.csp');
        $locator = GRN_ApplicationLocator::instance();
        $manager =& $locator->getTableManager('schedule');
        $manager->registerNowAndUpdateNowAll();

        $bdate = $start_date;
        $new_event = $app->getEvent($login, $eid, $start_date);
    } else {
        $bdate = $new_event->getFirstDate($today);
    }

    // GTM-1622 GRB-16952
    if ($old_event->isAttendanceCheckEvent()) {
        $attendanceStatusLogic = new AttendanceStatusLogic();
        if (cb_at($G_INPUT, 'refresh_status')
            && $attendanceStatusLogic->isEnableAttendanceCheck()
        ) {
            // delete all attendance check data in table tab_grn_schedule_event_attendance_status
            $attendanceStatusLogic->deleteAttendanceStatusByEventId($new_event->id);
        }
    }

    if ($today->compare($bdate) <= 0
        || (is_a($new_event, 'GRN_Schedule_RepeatEvent')
            && $today->compare($new_event->enddate) <= 0)
    ) {
        $remote_notification_list = [];

        //set notify
        if (count($new_event->users) > 0) {
            $title = _schedule_command_modify_getNotifyTitle($new_event);
            $app->setNotify($new_event->users, $login, $new_event, $bdate,
                $title, '', GRN_SCHEDULE_NOTIFY_MODIFY, $tsex);
            $remote_notification_list[GRN_SCHEDULE_NOTIFY_MODIFY]
                = $new_event->users;
        }

        //Email notification. 
        if (count($remote_notification_list) > 0) {
            $app->forwardMail($new_event, $remote_notification_list, $login);
            $app->sendPushNotification(
                $new_event, $remote_notification_list, $login, true, $bdate,
                null);
        }

        // GTM-1676
        if (is_a($new_event, 'GRN_Schedule_NormalEvent')
            && is_a($cacheOldEvent, 'GRN_Schedule_NormalEvent')
        ) {
            $app->sendFacilityApprovalRequestNotifyForUpdate($cacheOldEvent,
                $new_event, $login, $tsex);

            //no conflict and old purpose is not null
            $cacheNewEvent = clone $new_event;
            $facilityApprovalLogic = new FacilityApprovalLogic();
            $usingPurpose
                = $facilityApprovalLogic->getFacilityUsingPurpose($old_event->id);
            if ( ! is_null($usingPurpose) && strlen($usingPurpose)
                 && is_null($cacheNewEvent->usingPurpose)
            ) {
                $cacheNewEvent->setUsingPurpose($usingPurpose);
            }
            $app->forwardFacilityRelyMailForUpdate($cacheOldEvent,
                $cacheNewEvent);
            $app->sendPushNotificationOfUpdatedFacilityRequest($cacheOldEvent,
                $cacheNewEvent);
            unset($cacheNewEvent);
        }
        // end GTM-1676

        // if private appointment & set Public to "Managed".
        if ($new_event->private && is_array($new_event->notify_address)
            && count($new_event->notify_address) > 0
        ) {
            $title = _schedule_command_modify_getNotifyTitle($new_event);
            $app->sendNotificationsToPublic($login, $new_event, $bdate, '',
                $tsex, $title, false, true, GRN_SCHEDULE_NOTIFY_MODIFY);
        }
    }

    /* -------------- VCBSCH0010 START ----------------- */
    // NETMEETING連携あり
    if ($type != 'RP') {
        if ($vcb_available) {
            // 入力値あり
            if (isset($vcb_input_data)) {
                // 連携データあり
                if (isset($coop_data)) {
                    // 予約変更
                    $vcb_event_logic->cmmandNetmeetingReservationUpdate($old_event->id,
                        $coop_data, $vcb_input_data);
                }
            }
        }
    }
    /* -------------- VCBSCH0010 END   ----------------- */

    echo "{\"event_id\":\"" . $eid . "\"}";
}

function _schedule_command_modify_getNotifyTitle($new_event)
{
    require_once('schedule/view_util.csp');
    $util = GRN_Schedule_View_Util::getInstance();

    return $util->getNotifyTitle(html_entity_decode($new_event->getTitle()));
}
