<?php

use grn\grn\Validate;
use grn\schedule\AttendanceStatusLogic;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();

// check attendance confirm function
$attendance_status_logic = new AttendanceStatusLogic();
if ($attendance_status_logic->isEnableAttendanceCheck() != '1') {
    cb_throw_error(E_GRN_SCHD_SYSTEM_ATTENDANCE_CHECK_OFF);
}

global $G_INPUT;

// when parameter is null or wrong, default status is show all type.
$attend_status = cb_at($G_INPUT, 'status',
    GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ALL);
if ( ! Validate::isNumber($attend_status)
     || ($attend_status < 0
         || $attend_status > 3)
) {
    $attend_status = GRN_SCHEDULE_ATTENDANCE_LIST_ATTENDEES_SHOW_ALL;
}
$t->assign('attend_status', $attend_status);


$referer_key = cb_at($G_INPUT, 'referer_key', null);
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession('schedule.referer');
if ($referer_key) {
    $referer = $session->get($referer_key);
    if ( ! is_array($referer)) {
        // if data is wrong, will create new data save to session, and use old referer_key.
        $referer = [
            'page' => 'schedule/index',
            'name' => grn_get_page_display_name('schedule/index')
        ];
    } else {
        if (array_key_exists('page', $referer)
            && Validate::isNotNull($referer['page'])
        ) {
            $referer['name'] = grn_get_page_display_name($referer['page']);
        }
    }
} else {
    // if referer_key is null, will create new data save to session, and create a new referer_key.
    $referer = [
        'page' => 'schedule/index',
        'name' => grn_get_page_display_name('schedule/index')
    ];
    $referer_key = md5(uniqid(rand(), true));
}
$session->set($referer_key, $referer);

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();
if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}


require_once('grn/ui.csp');
$ui_config_manager = GRN_UIConfigManager::getInstance();
$ui_config = $ui_config_manager->getUserConfig($login);

require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();

$offset = $controller_util->getNaviStartPosition();
$controller_util->setNaviStartPosition($offset);
$limit = $ui_config->getListMax();
$subject_width = $ui_config->getSubjectWidth();


require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();
$tsex = new CB_TimeStampEx();
$today = $tsex->getDateTime();

$dateex = new CB_DateEx($today);
$enddate = [
    'format'    => $dateex->format(),
    'type'      => $util->getDayType($dateex),
    'date'      => $dateex,
    'timestamp' => $tsex->unix_ts
];

require_once('schedule/eventfactory.csp');
$event_factory = GRN_Schedule_EventFactory::getInstance();
if ($offset == 0) {
    $sql_limit = $limit;
} else {
    $sql_limit = (int)((intval($offset / $limit) + 1) * $limit);
}

$events = $event_factory->getEventsAttendance($login_id, $enddate,
    GRN_SCHEDULE_ATTENDANCE_LIST_SCENE_TYPE_ATTENDEES, $attend_status,
    $sql_limit + 1, 0);


usort($events, function ($a, $b) {
    $a_settime = array_key_exists("setdatetime", $a) ? $a["setdatetime"]
        : $a["setdate"];
    $b_settime = array_key_exists("setdatetime", $b) ? $b["setdatetime"]
        : $b["setdate"];

    if ($a_settime->compare($b_settime) == 0) {
        $a_endtime = array_key_exists("enddatetime", $a) ? $a["enddatetime"]
            : $a["enddate"];
        $b_endtime = array_key_exists("enddatetime", $b) ? $b["enddatetime"]
            : $b["enddate"];
        if ($a_endtime->compare($b_endtime) == 0) {
            if ($a['id'] == $b['id']) {
                return 0;
            }

            return ($a['id'] > $b['id']) ? 1 : -1;
        }

        return ($a_endtime->compare($b_endtime) > 0) ? 1 : -1;
    }

    return ($a_settime->compare($b_settime) > 0) ? 1 : -1;
});

$events = array_slice($events, $offset, $limit + 1);

$isExistsNextPage = count($events) > $limit;
if ($isExistsNextPage) {
    array_pop($events);
}

$event_for_view = [];
$event_creator_ids = [];
$schedule_line = cb_msg('grn.schedule',
    'attendance_list_time_connection_line');
foreach ($events as $event) {
    $temp = [];
    $temp['id'] = $event['id'];
    $temp['type'] = $event['event_type'];
    $temp['star_date'] = isset($event['star_date']) ? $event['star_date']
        : null;
    $temp['creator'] = $event['creator'];
    $temp['creator_name'] = $event['creator_name'];
    $temp['event_menu'] = (strlen($event['event_menu']) > 0)
        ? $event['event_menu'] : null;
    $temp['title'] = $event['title'];
    $temp['event_menu_color'] = $event['event_menu_color'];
    $temp['conflict'] = false;
    $temp['allday'] = array_key_exists('allday', $event)
        ? $event['allday'] : false;

    if ($temp['allday'] == true) {
        $temp['time_schedule'] = cb_date_format('DateShort_MD',
            $event['setdate']);
        $temp['time_schedule'] .= " " . cb_date_format('TimeShort_HM',
                $event['setdate']);
        if ($event['setdate']->compare($event['enddate']) != 0) {
            $temp['time_schedule'] .= $schedule_line;
            if (cb_date_format('DateShort_MD', $event['setdate'])
                != cb_date_format('DateShort_MD', $event['enddate'])
            ) {
                $temp['time_schedule'] .= cb_date_format('DateShort_MD',
                        $event['enddate']) . " ";
            }

            $temp['time_schedule'] .= cb_date_format('TimeShort_HM',
                $event['enddate']);
        }
    } else {
        $temp['time_schedule'] = cb_date_format('DateShort_MD',
            $event['setdatetime']);
        $temp['time_schedule'] .= " " . cb_date_format('TimeShort_HM',
                $event['setdatetime']);

        if ($event['setdatetime']->compare($event['enddatetime']) != 0) {
            $temp['time_schedule'] .= $schedule_line;
            if (cb_date_format('DateShort_MD', $event['setdatetime'])
                != cb_date_format('DateShort_MD', $event['enddatetime'])
            ) {
                $temp['time_schedule'] .= cb_date_format('DateShort_MD',
                        $event['enddatetime']) . " ";
            }

            $temp['time_schedule'] .= cb_date_format('TimeShort_HM',
                $event['enddatetime']);
        }

        $temp_conflict = $event_factory->conflictMembersEvent(null,
            ['users' => [$login_id], 'groups' => []], $event['setdatetime'],
            $event['enddatetime'], $event['id'], $event['event_type'], false);
        if (is_array($temp_conflict)
            && array_key_exists($login_id, $temp_conflict)
            && $temp_conflict[$login_id]
        ) {
            $temp['conflict'] = true;
        }
    }

    $menu_length = mb_strwidth($temp['event_menu']);
    $title_length = mb_strwidth($event['event_detail']);
    $total_length = $menu_length + $title_length;

    if ($menu_length > $subject_width) {
        $temp['event_menu'] = mb_strimwidth($temp['event_menu'], 0,
            $subject_width - 3);
        $temp['data'] = '...';
    } elseif ($title_length > 0) {
        if ($menu_length >= $subject_width - 3) {
            if ($total_length > $subject_width) {
                $temp['event_menu'] = mb_strimwidth($temp['event_menu'], 0,
                    $subject_width - 3);
                $temp['data'] = '...';
            } else {
                $temp['data'] = $event['event_detail'];
            }
        } else {
            $temp['data'] = mb_strimwidth($event['event_detail'], 0,
                $subject_width - $menu_length, '...');
        }
    } else {
        $temp['data'] = '--';
    }

    if (mb_strwidth($temp['title']) > $subject_width) {
        $temp['title'] = mb_strimwidth($temp['title'], 0, $subject_width,
            '...');
    }

    $temp['attendance_status'] = $event['attendance_status'];
    $event_for_view[] = $temp;

    $event_creator_ids[] = $event['creator'];
}


$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($event_creator_ids,
    $login);
$t->assign('users_info', $users_info);


$t->assign('data_for_view', $event_for_view);
$view_set = $controller_util->makeSimpleNaviInformation(
    $offset,
    $limit,
    count($event_for_view),
    $isExistsNextPage,
    ["status" => $attend_status, "referer_key" => $referer_key]);

$t->assign('view_set', $view_set);

$t->assign('name_width', $ui_config->getNameWidth());

$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

$t->assign(
    'site_position', [
        $referer,
        ['page' => '', 'name' => $page_title]
    ]
);

$t->assign('referer_key', $referer_key);


$t->display(cb_get_pagename() . '.tpl');
