<?php

use grn\grn\customization\CustomizationJsCssLoader;
use grn\grn\customization\schedule\EditShowJsApiEvent;
use grn\grn\customization\schedule\ScheduleJsApiLoader;
use grn\schedule\api\EventBuilder;
use grn\schedule\api\model\Event;
use grn\schedule\api\RenderMemberProvider;
use grn\schedule\ScheduleMemberLogic;

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('schedule/banner_modify', true);

$event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event'] : null;
$user_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid'] : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;
$event = null;

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$login = $uum->getLoginUser();
$login_id = $login->getOID();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date = null;
}

$event = $app->getEvent($login, $event_id, $date);
if ( ! $event) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
}

// アクセス権のチェック
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
$dynamic_roles = $uum->listGrantedRoles();
$access = $acc_logic->getEventAccess($login, $event, ['read', 'modify'],
    $dynamic_roles);

if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
}

if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
}

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();

// 上部に表示するスケジュールデータの設定
include('_member_week.csp');

// 予定メニュー
include('_menus.csp');

$t->assign('show_organize', $systemlogic->getShowOrganize() ? true : false);

$schedule_event = [
    'event_id'         => $event_id,
    'type'             => 'normal',
    'title'            => $event->detail,
    'selectmenu'       => $event->menu,
    'menucolor'        => $event->menucolor,
    'memo'             => $event->memo,
    'timezone'         => $event->timezone,
    'end_timezone'     => $event->end_timezone,
    'start_time'       => null,
    'end_time'         => null,
    'additional_items' => $event->additional_items,
];

// アドレスデータ
if ( ! is_null($event->company_name)
     ||
     ! is_null($event->zip_code)
     ||
     ! is_null($event->physical_address)
     ||
     ! is_null($event->map)
     ||
     ! is_null($event->route)
     ||
     ! is_null($event->company_telephone_number)
     ||
     ! is_null($event->facsimile_number)
     ||
     ! is_null($event->company_url)
) {
    $address = [];
    $address['company_name'] = $event->company_name;
    $address['zip_code'] = $event->zip_code;
    $address['physical_address'] = $event->physical_address;
    $address['map_image'] = $event->map;
    $t->assign('mp', array_key_exists('mp', $G_INPUT) ? $G_INPUT['mp'] : null);
    $address['route'] = $event->route;
    $address['route_time'] = $event->route_time;
    $address['route_fare'] = $event->route_fare;
    $address['company_telephone_number'] = $event->company_telephone_number;
    $address['facsimile_number'] = $event->facsimile_number;
    $address['URL'] = $event->company_url;

    $schedule_event['address'] = $address;
}

// 時間の設定
$schedule_event['start_date'] = $event->setdate;
$schedule_event['end_date'] = $event->enddate;

// 参加者
$users = [];
if ($event->groups) {
    foreach (array_keys($event->groups) as $key) {
        $member = &$event->groups[$key];
        if ( ! $member) {
            continue;
        }

        $users['g' . $member->getOID()] = '[' . $member->get('name') . ']';
    }
}
$schedule_event['users'] = ScheduleMemberLogic::getInstance()
                                              ->getAttendeesRenderFromEvent($event);

//GTM-1136
if ($systemlogic->getAllowFileAttachment() == '1') {
    $allow_file_attachment = true;

    //generate upload ticket
    include('grn/_upload_prepend.csp');

    require_once('schedule/file.csp');
    $fm = GRN_Schedule_FileManager::getInstance();
    $files = $fm->getFiles($event_id);

    $tmp_key = grn_get_temporary_key();
    $t->assign('tmp_key', $tmp_key);

    $schedule_event['attached_files'] = grn_init_attached_file(cb_get_pagename()
                                                               . $tmp_key,
        $files, true, 'schedule');
} else {
    $allow_file_attachment = false;
}
$t->assign('allow_file_attachment', $allow_file_attachment);
//End GTM-1136

$t->assign('schedule_event', $schedule_event);

$t->assign('user_id', $user_id);
$t->assign('group_id', $group_id);
$t->assign('bdate', $str_date);

require_once('fw/session_manager.csp');
$sm = CB_SessionManager::getInstance();
$sm->destroy(cb_get_pagename());

$t->assign('add_plugin', [
    'name'   => 'schedule',
    'params' => [
        'action'       => ['read', 'add', 'modify'],
        'lax_evaluate' => true,
        'session_name' => cb_get_pagename()
    ]
]);

$referer_key = array_key_exists('referer_key', $G_INPUT)
    ? $G_INPUT['referer_key'] : null;
$referer_exists = false;
if ($referer_key) {
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession('schedule.referer');
    $referer = $session->get($referer_key);
    if (is_array($referer)) {
        // page title
        $page_title = grn_get_current_page_display_name();
        $t->assign('page_title', $page_title);
        // site position 
        $t->assign(
            'site_position', [
                $referer,
                [
                    'page'        => "schedule/view",
                    'name'        => grn_get_page_display_name('schedule/view'),
                    'event'       => $event_id,
                    'bdate'       => $str_date,
                    'referer_key' => $referer_key
                ],
                ['page' => "", 'name' => $page_title]
            ]
        );
        $referer_exists = true;
    }
}

if ($referer_exists === false) {
    // page title
    $page_title = grn_get_current_page_display_name();
    $t->assign('page_title', $page_title);
    // site position 
    $t->assign(
        'site_position', [
            [
                'page' => "schedule/index",
                'name' => grn_get_page_display_name('schedule/schedule_index')
            ],
            [
                'page'        => "schedule/view",
                'name'        => grn_get_page_display_name('schedule/view'),
                'event'       => $event_id,
                'bdate'       => $str_date,
                'referer_key' => $referer_key
            ],
            ['page' => "", 'name' => $page_title]
        ]
    );
}

$t->assign('referer_key', $referer_key);

// attachment for mobile devices
$is_ios = cb_is_ios();
$t->assign('is_ios', $is_ios);
$is_android = cb_is_android();
$t->assign('is_android', $is_android);

if (ScheduleJsApiLoader::getInstance()->isCustomizationAvailable()) {
    $event = ! $event ? new GRN_Schedule_BannerEvent() : $event;
    $event->menu = $schedule_event['selectmenu'] ?? '';
    $event->detail = $schedule_event['title'] ?? '';
    $event->memo = $schedule_event['memo'] ?? '';

    $render_member_provider = new RenderMemberProvider([$event],
        [
            RenderMemberProvider::PRESET_DATA_ATTENDEES => $schedule_event['users']
                                                           ?? []
        ]
    );
    $event_builder = new EventBuilder($render_member_provider);

    $event_builder->initEvent($event, Event::EVENT_TYPE_ALL_DAY, null);
    $event_builder->buildCompany($schedule_event['address'] ?? []);
    $event_builder->buildVersion(null);
    $event_builder->buildAttendeesFromRenderValues($schedule_event['users'] ??
                                                   []);
    $event_builder->buildAttendeesCandidate([]);
    if ($allow_file_attachment) {
        $event_builder->buildAttachments($schedule_event['attached_files'] ??
                                         [], true);
    }

    $event_builder->buildStartEnd(
        $schedule_event['start_date'], $schedule_event['start_time'],
        $schedule_event['timezone'],
        $schedule_event['end_date'], $schedule_event['end_time'],
        $schedule_event['end_timezone']
    );
    $event_builder->buildIsStartOnlyAndIsAllDayByEventType(GRN_SCHEDULE_EVENT_TYPE_BANNER);

    $event_builder->buildCustomItem($schedule_event['additional_items']);

    $event_data = $event_builder->getEvent()->toArray();
    $screen_properties = [
        'data' => [
            'no_trigger' => true,
            'event'      => $event_data
        ]
    ];
    CustomizationJsCssLoader::getInstance()->addEvent(
        ScheduleJsApiLoader::getInstance(),
        new EditShowJsApiEvent($screen_properties)
    );
}

// Smarty実行
$t->display(cb_get_pagename() . ".tpl");

