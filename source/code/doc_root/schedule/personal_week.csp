<?php

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\EventListView;

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

//------------------

global $G_INPUT;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;
$event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event'] : null;
$search_text = array_key_exists('search_text', $G_INPUT)
    ? $G_INPUT['search_text'] : null;

//------------------
require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
$t->assign('app_name', $app->getName());

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// 今日を求める
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$today = $tsex->getDate();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

global $G_container_base;
/** @var GRN_Uum $uum */
$uum = $G_container_base->getInstance('uum');
require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$login = $uum->getLoginUser();
$login_id = $login->getOID();

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
// ログインユーザーの各種設定の取得
$unit = $systemlogic->getScheduleUnit();
$startwday = $personallogic->getCalendarWeekStart($login);
$showgroup = $systemlogic->getShowOrganize();

//GTM-1679
$facility_approval_logic = new FacilityApprovalLogic();
$privilege_approval_facilities
    = $facility_approval_logic->getRequireApprovalFacilitiesByUser();
if (is_array($privilege_approval_facilities)
    && count($privilege_approval_facilities) > 0
) {
    $t->assign('hasRequireApprovalFacility', true);
}

$attendanceStatusLogic = new AttendanceStatusLogic();
$isEnableAttendanceStatus = $attendanceStatusLogic->isEnableAttendanceCheck();
$t->assign('isEnableAttendanceStatus', $isEnableAttendanceStatus);

// 表示するものにアクセス権があるかどうかのチェック
$dynamic_roles = $uum->listGrantedRoles();

// グループの処理
$group = null;
if ( ! $group_id) {
    $group = $uum->getUserPrimaryGroup($login_id);
    if ($group !== false) {
        $group_id = $group->getOID();
    }
} // 施設グループ
elseif (mb_substr($group_id, 0, 1) == 'f') {
    // 全施設
    if ($group_id == 'f') {
        $group = 'f';
    } else {
        $group = $facility_logic->getFacilityGroup(mb_substr($group_id, 1));
        if ($group === false) {
            $group_id = null;
        }
    }
} // Myグループ
elseif (mb_substr($group_id, 0, 1) == 'm') {
    $group = $uum->getMyGroup(mb_substr($group_id, 1));
    if ( ! $group) {
        $group_id = null;
    }
} // よく利用するユーザー
elseif ($group_id == 'r') {
    $group = 'frequent';
} elseif ($group_id == 'virtual') {
    //何もしない
} // 簡易検索
elseif ($group_id == 'search') {
} // 複数ユーザー選択
elseif ($group_id == 'selected') {
} // 組織
else {
    $group = $uum->getGroup($group_id);
    if ( ! $group) {
        $group_id = null;
    } elseif (is_a($group, 'CB_Group')) {
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();
        $access = $acc_logic->evaluateAccess($login, $group, ['read'],
            $dynamic_roles);
        if ( ! $access) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
        }

        $group = [
            'type' => 'group',
            'id'   => $group->getOID(),
            'name' => $group->get('name')
        ];

        $uum_util->selectGroups($login, [$group['id']]);
    }
}

//GTM-2140 Select users/facilities
require_once('_view_util.csp');
$group_list = [];
GRN_Schedule_Dropdown_Util::makeGroupsDropDownMenu($login, $dynamic_roles,
    $group_id, $group, $group_list);

// ログインユーザー
$group_list[] = [
    'id'   => 'login',
    'name' => cb_msg('grn.schedule', 'login_user')
];

$t->assign('group', $group_list);

// 1   : よく使う施設グループ /　よく使う組織
// 2   : 最近選択した施設グループ / 最近選択した組織
// null: その他
$selected_group_type = array_key_exists('p', $G_INPUT) ? $G_INPUT['p'] : null;
if ( ! in_array($selected_group_type, [null, 1, 2])) {
    $selected_group_type = null;
}

// For tree
$tree_data
    = GRN_Schedule_Dropdown_Util::makeFacilityGroupsTreeMenu(cb_get_pagename(),
    $group_id, $selected_group_type);

$t->assign('fgroup_list', $tree_data['org']);
$t->assign('fgroup_selected_id', $tree_data['selected_id']);
$t->assign('ftree_name', cb_get_pagename());
$t->assign('ftree_async_page', "schedule/json/accessible_facility_tree");
//End GTM-2140 Select users/facilities

// ユーザーリストに表示するユーザー名の取得
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

// 日付の準備
$week = [];

$event_list_view = new EventListView();
$event_list_view->setBeginDate($str_date);
$event_list_view->setNumberOfDays(7);
$event_list_view->setUserIDs([$login->getOID()]);
$week = $event_list_view->createWeekInfo();

$t->assign('week', $week);
// Enable New appointment link
$t->assign('schedule', ['access' => ['add' => GRN_SCHD_ACCESS_AFFIRM]]);

if ($util->getUsingDragDropSchedule($login)) {
    $t->assign('enable_dragdrop', 1);
} else {
    $t->assign('enable_dragdrop', 0);
}

$referer = [];
$referer_params = ['uid', 'gid', 'bdate', 'event_date', 'event', 'search_text'];
foreach ($referer_params as $key) {
    if (array_key_exists($key, $G_INPUT)) {
        $referer[$key] = $G_INPUT[$key];
    }
}

// GTM-2140
$view_state = new \grn\schedule\ViewState();
$view_state->handleRequest($referer);

$hours_to_display = $event_list_view->getViewHour();

$t->assign('schedule_params', [
    'today'             => [
        'value' => $today->format(),
        'text'  => cb_date_format('DateFull_YMDW', $today),
    ],
    'min_time'          => cb_at($hours_to_display, 'minTime'),
    'max_time'          => cb_at($hours_to_display, 'maxTime'),
    'calendarWeekStart' => $event_list_view->getCalendarWeekStart(),
    'unit'              => $unit,
    'dates'             => $event_list_view->getDatesForView(),
    'start_date'        => $week[0]['format'],
    'end_date'          => $week[6]['format']
]);
// End GTM-2140

$t->assign('short_date_format',
    CB_LocaleManager::getCurrentShortDateFormat($login_id));

// 運用管理
require_once('schedule/facility_privilege.csp');
$privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
$t->assign('management', $privilege_logic->hasPrivilege($login));

// ナビゲーションのための日付の算出
$prev_date = new CB_DateEx($week[0]['date']);
$prev_date->moveDays(-1);
$next_date = new CB_DateEx($week[0]['date']);
$next_date->moveDays(1);

$prev_week = $util->getPrevWeekDate($week[0]['date'], $startwday);
$next_week = $util->getNextWeekDate($week[0]['date'], $startwday);

$t->assign('week_start', $week[0]['date']);
$t->assign('week_end', $week[6]['date']);
$t->assign('today', $today->format());
$t->assign('bdate_prevday', $prev_date->format());
$t->assign('bdate_nextday', $next_date->format());
$t->assign('bdate_prevweek', $prev_week->format());
$t->assign('bdate_nextweek', $next_week->format());

$t->assign('group_id', $group_id);
$t->assign('event_id', $event_id);
$t->assign('search_text', $search_text);

$t->assign('bdate', $week[0]['format']);
$t->assign('access_plugin', [
    'name'   => 'schedule',
    'params' => ['action' => ['read']]
]);
if ($showgroup) {
    $t->assign('include_org', '1');
} else {
    $t->assign('include_org', '0');
}

require('_select_date_schedule.csp');

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
// site position 
$t->assign(
    'site_position', [
        ['page' => '', 'name' => $page_title]
    ]
);

require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$t->assign('referer_key', $view_state->getRefererKey());

// ナビカレンダーを表示する・隠す設定
$session_navi_calendar
    = $session_manager->getSession('grn.schedule.navi_calendar');
$navi_cal_display_flag = $session_navi_calendar->get('navi_cal_display_flag');
if ($navi_cal_display_flag == null || $navi_cal_display_flag == false) {
    $navi_cal_display_flag = false;
} else {
    $navi_cal_display_flag = true;
}
$t->assign('navi_cal_display_flag', $navi_cal_display_flag);
$t->assign('show_todos', $personallogic->getShowToDos($login, 'personal_week'));

//GTM-2140 Select users/facilities
$t->assign('portlet', ['plid' => 'main']);

// Assign customization information
$screen_properties = ["week" => $week, "no_trigger" => true];
grn\grn\customization\CustomizationJsCssLoader::getInstance()->addEvent(
    grn\grn\customization\schedule\ScheduleJsApiLoader::getInstance(),
    new grn\grn\customization\schedule\CalendarWeekIndexShowJsApiEvent($screen_properties)
);

// Smarty実行
$t->display(cb_get_pagename() . '.tpl');

