<?php

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

$member_id = @ $G_INPUT['uid'];
$str_date = @ $G_INPUT['bdate'];
$event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event'] : null;
$group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
$search_text = array_key_exists('search_text', $G_INPUT)
    ? $G_INPUT['search_text'] : null;

// 今日を求める
$tsex = new CB_TimeStampEx();
$today = $tsex->getDate();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

$bdate = $date;

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
$t->assign('app_name', $app->getName());

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();

$member_id = $login_id;

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
$showgroup = $systemlogic->getShowOrganize();
$showholiday = $systemlogic->getShowHoliday();

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

// 1月1日を求める
$dateex = new CB_DateEx($date);
$dateex->month = 1;
$dateex->day = 1;

$last_date = new CB_DateEx($dateex);
$last_date->month = 12;
$last_date->day = 31;

require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($dateex, $last_date, $login);

$shared_calendar = $calendar_service->getDaysInfoFromSharedCalendar($dateex,
    $last_date, $login);
$all_calendars = array_merge_recursive($calendars, $shared_calendar);

$month = 1;
$year = [];
$month_days = [];
// 終わりまで
while ($dateex->compare($last_date) <= 0) {

    if ($month != $dateex->month) {
        $year[$month] = ['schedule_event' => $month_days];
        $month = $dateex->month;
        $month_days = [];

    }

    $day = ['date' => $dateex->format(), 'calendar' => []];
    if ($util->isWorkday($dateex, $calendars, $login)) {
        $day['date_type'] = 's_date_workday';
    } elseif ($showholiday && $util->isHoliday($dateex, $calendars)) {
        $day['date_type'] = 's_date_holiday';
    } else {
        $day['date_type'] = $util->getDayType($dateex);
    }

    if (array_key_exists($day['date'], $all_calendars)) {
        $temp = [];
        $calendar_events = $all_calendars[$day['date']];
        foreach ($calendar_events as $calendar_event) {
            switch ($calendar_event['type']) {
                case GRN_CALENDAR_TYPE_PUBLICHOLIDAY:
                    if ($showholiday) {
                        $temp[] = $calendar_event;
                    }
                    break;
                case GRN_CALENDAR_TYPE_MEMORIALDAY:
                case GRN_CALENDAR_TYPE_SYSTEM_MEMO:
                case GRN_CALENDAR_TYPE_USER_MEMO:
                case GRN_CALENDAR_TYPE_WORKDAY:
                    $temp[] = $calendar_event;
                    break;
            }
        }

        $day['calendar'] = $temp;
    }

    $month_days[$dateex->day] = $day;

    // 1日ずらす
    $dateex = clone $dateex;
    $dateex->moveDays(1);
}

// 12月分
$year[12] = ['schedule_event' => $month_days];

$t->assign(
    'schedule', [
    'user_id' => $member_id,
    'year'    => $year
]);

// ナビゲーションのための日付の算出
$prev_year = $util->getPrevYearDate($date);
$next_year = $util->getNextYearDate($date);

$t->assign('today', $today->format());
$t->assign('bdate_prevyear', $prev_year->format());
$t->assign('bdate_nextyear', $next_year->format());
$t->assign('event_id', $event_id);
$t->assign('group_id', $group_id);
$t->assign('search_text', $search_text);

$t->assign('user_id', $member_id);
$t->assign('bdate', $bdate->format());

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
// site position 
$t->assign(
    'site_position', [
        ['page' => '', 'name' => $page_title]
    ]
);

$referer = [];
$referer_params = ['uid', 'gid', 'bdate', 'event_date', 'event', 'search_text'];
foreach ($referer_params as $key) {
    if (array_key_exists($key, $G_INPUT)) {
        $referer[$key] = $G_INPUT[$key];
    }
}
$referer['page'] = 'schedule/personal_year';
$referer['name'] = $page_title;
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession('schedule.referer');
$session_values = $session->getValues();
$unset_keys = [];
foreach ($session_values as $key => $value) {
    if (isset($value['page']) && $value['page'] == $referer['page']) {
        $unset_keys[] = $key;
    }
}
foreach ($unset_keys as $key) {
    $session->unset_by($key);
}
$referer_key = md5(uniqid(rand(), true));
$session->set($referer_key, $referer);
$t->assign('referer_key', $referer_key);

// Smarty実行
$t->display(cb_get_pagename() . ".tpl");

