<?php

use grn\grn\JSONResponse;

const USER = "user";
const ORGANIZATION = "org";
const FACILITY = "facility";
const ROW_LIMIT = 20;
const SHOW_MEMBERSHIP = 1;
const CUSTOM_ITEM_IS_SEARCHED = true;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    cb_require_role("LoginUser");
    global $G_INPUT;
    $user_list = [];
    $org_list = [];
    $fac_list = [];
    $user_org_fac_list = [];

    require_once('grn/uum_util_search.csp');
    $uum_util = \GRN_UumUtil_Search::getInstance();

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = \GRN_Facility_SystemLogic::getInstance();
    $login_user = cb_get_login_user();

    if (array_key_exists('p', $G_INPUT)) {
        $search_text = cb_trim($G_INPUT['p']);
        if ( ! is_string($search_text) || mb_strlen($search_text) < 1) {
            return [
                USER         => $user_list,
                ORGANIZATION => $org_list,
                FACILITY     => $fac_list
            ];
        }
        // Get the setting user profile picture (includes personal and system setting)
        $displayIcon = \GRN_ControllerUtil::getUserIconFormat($login_user);
        //1. The following logic for User.
        $user_list = $uum_util->scheduleIncrementalSearchUsersInfo(
            $search_text, ROW_LIMIT, $displayIcon, $login_user->getOID(),
            CUSTOM_ITEM_IS_SEARCHED
        );

        //Building user url for ajax result
        $user_list_length = count($user_list);
        for ($i = 0; $i < $user_list_length; $i++) {
            $user_list[$i]['url']
                = \GRN_ControllerUtil::getPopupUserProfileURL($user_list_length[$i]);
        }

        $fac_rows_limit = 0;
        $org_limit = 0;

        //2. The following logic for get Organization
        require_once('schedule/system_logic.csp');
        $system_logic = \GRN_Schedule_SystemLogic::getInstance();
        if ($user_list_length < ROW_LIMIT
            && $system_logic->getShowOrganize() == SHOW_MEMBERSHIP
        ) {

            $org_limit = ROW_LIMIT - $user_list_length;
            $org_list
                = $uum_util->scheduleIncrementalSearchOrganizationsInfo($search_text,
                $org_limit);
        }

        //3. The following logic for get Facility
        $fac_rows_limit = ROW_LIMIT - $user_list_length - count($org_list);
        if ($fac_rows_limit > 0) {
            $fac_list_search_result
                = $facility_logic->scheduleIncrementalSearchFacilitiesInfo(
                $search_text, CB_DATABASE_NO_LOCK, -1, false
            );
            $fac_list_chunk = array_chunk($fac_list_search_result,
                $fac_rows_limit);
            $count_chunk = count($fac_list_chunk);

            for (
                $i = 0;
                $i < $count_chunk && count($fac_list) <= $fac_rows_limit; $i++
            ) {
                $fac_list_map = array_map(
                    function ($fac) {
                        return [
                            'type'             => FACILITY,
                            'id'               => $fac['_id'],
                            //following properties for client view
                            '_id'              => $fac['_id'],
                            'col_display_name' => $fac['col_display_name'],
                            'url'              => \GRN_ControllerUtil::getPopupFacilityDetailURL($fac['_id'])
                        ];
                    }, $fac_list_chunk[$i]
                );
                $fac_list_tmp
                    = \grn\schedule\EventMemberListUtil::filterByAccessList($login_user,
                    $fac_list_map);
                $fac_list = array_merge($fac_list, $fac_list_tmp);
            }
            $fac_list = array_slice($fac_list, 0, $fac_rows_limit);
        }

    } elseif (array_key_exists('flag', $G_INPUT)
              && $G_INPUT['flag'] == 'selected'
    ) {
        $user_id_list = cb_at($G_INPUT, 'uids', []);
        $org_id_list = cb_at($G_INPUT, 'oids', []);
        $fac_id_list = cb_at($G_INPUT, 'fids', []);

        //1. Getting a lot of user via uid;
        if (count($user_id_list) > 0) {
            $user_list = $uum_util->SelectedUsersInfo($user_id_list);

            //Building user url for ajax result
            foreach ($user_list as $index => $user) {
                $user_list[$index]['url']
                    = \GRN_ControllerUtil::getPopupUserProfileURL($user);
            }
        }
        //2.Getting a lot of organization via gid;
        if (count($org_id_list) > 0) {
            $org_id_list_check = array_map(
                function ($id) {
                    return [
                        'type' => ORGANIZATION,
                        'id'   => $id
                    ];
                }, $org_id_list
            );
            $org_id_list
                = \grn\schedule\EventMemberListUtil::filterByAccessList($login_user,
                $org_id_list_check);
            $org_target_list
                = \grn\schedule\EventMemberListUtil::getMembersInfoForView($login_user,
                $org_id_list);

            //Coding for translate data
            foreach ($org_target_list as $org) {
                $org_list[] = [
                    '_id'              => $org['id'],
                    'col_display_name' => $org['name']
                ];
            }
        }
        //3. The following logic got facility list from facility id list.
        if (count($fac_id_list) > 0) {

            $fac_id_list_check = array_map(
                function ($id) {
                    return ['type' => FACILITY, 'id' => $id];
                }, $fac_id_list
            );

            $fac_id_list
                = \grn\schedule\EventMemberListUtil::filterByAccessList($login_user,
                $fac_id_list_check);
            $fac_target_list
                = \grn\schedule\EventMemberListUtil::getMembersInfoForView($login_user,
                $fac_id_list);
            //Coding for translate data
            foreach ($fac_target_list as $fac) {
                $fac_list[] = [
                    '_id'              => $fac['id'],
                    'col_display_name' => $fac['name'],
                    'url'              => \GRN_ControllerUtil::getPopupFacilityDetailURL($fac['id'])
                ];
            }
        }
    }

    $user_org_fac_list = [
        USER         => $user_list,
        ORGANIZATION => $org_list,
        FACILITY     => $fac_list
    ];
    $json = \grn\grn\JSONResponse::create();
    $json->response($user_org_fac_list);

    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);
}

