<?php

if (0 == strcasecmp(cb_at($_SERVER, 'REQUEST_METHOD'), 'POST')) {
    global $G_INPUT;

    $fagid = cb_at($G_INPUT, 'fagid');
    $faid = cb_at($G_INPUT, 'faid');

    $apply_from_parent = cb_at($G_INPUT, 'apply_from_parent', '0') != '0' ? '1'
        : '0';

    $inputSettings = [
        'apply_from_parent' => $apply_from_parent,
    ];

    if ($apply_from_parent == '1') {
        $G_INPUT['advance'] = '1';
    } else {
        $advance_select = cb_at($G_INPUT, 'advance_select');
        if ($advance_select != '1') {
            $G_INPUT['advance'] = '1';
            $advance = '0';
        } else {
            $advance_select = '1';
            $advance = preg_replace('/^0+/', '',
                cb_at($G_INPUT, 'advance'));
        }

        $max_time = cb_at($G_INPUT, 'max_time') != '1' ? '0' : '1';
        $is_hour_numeric = is_numeric(cb_at($G_INPUT, 'scheduled_time_hour') ?? null);
        $hour = $is_hour_numeric ? cb_at($G_INPUT, 'scheduled_time_hour') : null;
        $minute = cb_at($G_INPUT, 'scheduled_time_minute');

        $modify_user = cb_at($G_INPUT, 'modify_user');
        if ($modify_user != 'creator' && $modify_user != 'member'
            && $modify_user != 'grantuser'
        ) {
            $modify_user = 'grantuser';
        }

        $show_memo = cb_at($G_INPUT, 'show_memo', '0') != '0' ? '1' : '0';
        $regularly = cb_at($G_INPUT, 'regularly', '0') != '0' ? '1' : '0';
        $approval = cb_at($G_INPUT, 'approval', '0') != '0' ? '1' : '0';

        $inputSettings['advance'] = $advance;
        $inputSettings['modifyuser'] = $modify_user;
        $inputSettings['showmemo'] = $show_memo;
        $inputSettings['regulary'] = $regularly;
        $inputSettings['approval'] = $approval;
    }

    require_once('schedule/facility_system_logic.csp');
    $logic = GRN_Facility_SystemLogic::getInstance();
    $settingLogic = $logic->getFacilitySettingLogic();

    /** @var GRN_Facility_FacilityGroup $facility_group */
    $facility_group = null;
    if ($fagid == -1 || $fagid == -2 || strlen($faid) > 0) {
        $facility = $logic->getFacility($faid);
        if ($facility === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }

        $group_relation = $logic->getFacilityGroupRelation([$faid]);
        if (array_key_exists($faid, $group_relation)
            && ! is_null($group_relation[$faid])
        ) {
            $facility_group = $logic->getFacilityGroup($group_relation[$faid]);
            if ($facility_group === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
            }
            $belong_group = true;
        }
        $is_group = false;
        $facility_name = $facility->get('name');
    } else {
        $facility_group = $logic->getFacilityGroup($fagid);
        if ($facility_group === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
        }
        $is_group = true;
        $group_name = $facility_group->get('name');
    }

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $target_name = 'schedule/system/facility_facility_set';

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($target_name);
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        if ($apply_from_parent == '0' && $max_time == '1') {
            if ($hour < 0 || $hour > 23) {
                require_once('schedule/error_code.csp');
                cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
            }

            if (is_numeric($minute) == false) {
                require_once('schedule/error_code.csp');
                cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
            } else {
                if ($minute < 0 || $minute > 60) {
                    require_once('schedule/system/error_code.csp');
                    cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
                }
            }

            $max_time = $hour * 60 + $minute;
            $inputSettings['maxtime'] = $max_time;
        } elseif ($apply_from_parent == '0') {
            $inputSettings['maxtime'] = $max_time;
        }

        $settings = [];

        if ($fagid == -1 || $fagid == -2 || strlen($faid) > 0) {
            // Uupdate facility setting

            if ($apply_from_parent == '1') {
                $setSettings
                    = $settingLogic->setFacilitySettingByParentGroup($faid,
                    $facility_group);
            } else {
                $setSettings = $inputSettings;
                $settingLogic->setFacilitySettingByInput($setSettings, $faid);
            }

            inspection_log_command_facility_facility_set($setSettings,
                'facility_facility');
        } else {
            // Update facility group setting

            if ($apply_from_parent == '1') {
                $setSettings
                    = $settingLogic->setFacilityGroupSettingByParentGroup($fagid,
                    $facility_group->get('parent'));
            } else {
                $setSettings = $inputSettings;
                $settingLogic->setFacilityGroupSettingByInput($setSettings,
                    $fagid);
            }

            inspection_log_command_facility_facility_set($setSettings,
                'facility_group');
        }

        if ( ! is_null($fagid)) {
            cb_redirect('schedule/system/facility_select_set',
                ['fagid' => $fagid]);
        } else {
            cb_redirect('schedule/system/facility_select_set');
        }
    } else {
        $privileges_count = 0;
        if ( ! is_null($facility_group)) {
            $facility_group_id = $facility_group->getOID();
            $ancestors
                = $logic->getAncestors([$facility_group_id => $facility_group_id]);

            require_once('schedule/facility_privilege.csp');
            $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
            foreach ($ancestors[$facility_group_id] as $ancestor_id) {
                $ancestor_group = $logic->getFacilityGroup($ancestor_id);
                $count
                    = $privilege_logic->getPrivilegesCount($ancestor_group);
                if ($count) {
                    $privileges_count += $count;
                }
            }
        } else {
            $facility_group_id = null;
        }
        $t->assign('privileges_count', $privileges_count);
        $t->assign('facility_group_id', $facility_group_id);

        $t->assign('belong_group',
            isset($belong_group) ? $belong_group : false);
        $t->assign('is_group', $is_group);
        $t->assign('facility_name',
            isset($facility_name) ? $facility_name : false);
        $t->assign('group_name', isset($group_name) ? $group_name : false);

        $t->assign('apply_from_parent', $apply_from_parent);
        $t->assign('advance', cb_at($G_INPUT, 'advance'));
        $t->assign('advance_select', $advance_select);

        $t->assign('hour', intval($hour));
        $t->assign('minute', intval($minute));

        $t->assign('max_time', $max_time);
        $t->assign('modify_user', $modify_user);
        $t->assign('show_memo', $show_memo);
        $t->assign('regularly', $regularly);
        $t->assign('approval', $approval);
        $t->assign('faid', $faid);
        $t->assign('fagid', $fagid);

        //------------------
        $t->setPageInfo($target_name);
        // page title
        $page_title = grn_get_page_display_name($target_name);
        $t->assign('page_title', $page_title);

        // site position
        require_once('grn/controller.csp');
        $controller_util = new GRN_ControllerUtil();
        $page_info = [
            'facility_select_set'   => ['fagid' => $fagid, 'faid' => $faid],
            'facility_facility_set' => null
        ];
        $site_position
            = $controller_util->makeSitePosition('schedule/system/',
            $page_info);
        $t->assign('site_position', $site_position);

        $t->display($target_name . '.tpl');
    }
}

function inspection_log_command_facility_facility_set(array $settings, $target)
{
    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);

    $advance = $settings['advance'];
    $max_time = $settings['maxtime'];
    $modify_user = $settings['modifyuser'];
    $show_memo = $settings['showmemo'];
    $regularly = $settings['regulary'];
    $approval = $settings['approval'];
    $apply_from_parent = $settings['apply_from_parent'];

    if ($advance == '0') {
        $log_params = ['reserve_limit' => 'NO'];
    } else {
        $log_params = ['reserve_limit' => $advance];
    }
    $l->noticeEx('config', $target, $log_params);

    if ($max_time == '0') {
        $log_params = ['reserve_limit_time' => 'NO'];
    } else {
        $hour = intval($max_time / 60);
        $minute = $max_time % 60;
        $log_params = ['reserve_limit_time' => $hour . ':' . $minute];
    }
    $l->noticeEx('config', $target, $log_params);

    $log_params = ['modify_user' => $modify_user];
    $l->noticeEx('config', $target, $log_params);

    $log_params = ['show_facility_memo' => $show_memo ? 'ON' : 'OFF'];
    $l->noticeEx('config', $target, $log_params);

    $log_params = ['use_facility_repeat' => $regularly ? 'ON' : 'OFF'];
    $l->noticeEx('config', $target, $log_params);

    $log_params = ['facility_approval' => $approval ? 'ON' : 'OFF'];
    $l->noticeEx('config', $target, $log_params);

    $log_params = [
        'inheritance_from_parent' => $apply_from_parent == '1' ? 'ON' : 'OFF'
    ];
    $l->noticeEx('config', $target, $log_params);
}
