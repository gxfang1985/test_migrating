<?php

use grn\grn\Validate;
use grn\kintone\AppRelationSettingLogic;
use grn\kintone\bean\GrnKintoneAppRelationSetting;
use grn\grn\JSONResponse;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {

    global $G_INPUT, $G_state_set, $G_INPUT_HIDDEN;

    $G_state_set->set('html_should_be_closed', false);
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('error_page_type', 'json');

    $csrf_ticket = cb_at($G_INPUT_HIDDEN, 'csrf_ticket');
    require_once('fw/csrf.csp');
    cb_csrf_validate_token($csrf_ticket);

    $krid = cb_at($G_INPUT, 'krid');
    if ((Validate::isNull($krid) || ! Validate::isNumber($krid))
        && strcasecmp($action, 'modify') === 0
    ) {
        cb_throw_error(E_GRN_SCHD_K_RELATION_ID_INVALID);
    }
    $appRelationLogic = new AppRelationSettingLogic();
    $setting = $appRelationLogic->getRelationSettingById($krid,
        'schedule/add');
    if ($setting) {
        $appRelationLogic->deleteRelationSettingById($krid);

        require_once('schedule/inspection.csp');
        $inspection = GRN_Schedule_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            $inspection->record(
                'delete', ' app relation ',
                [
                    'item'  => $setting[AppRelationSettingLogic::ITEM_NAME][GrnKintoneAppRelationSetting::ITEM_NAME_KEY_DEFAULT],
                    'value' => serialize($setting[AppRelationSettingLogic::KINTONE_APP])
                ]
            );
        }
    }

    //GRB-16911
    $json = JSONResponse::create();
    $json->response(['success' => true]);
}
