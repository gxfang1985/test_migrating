<?php

use grn\grn\JSONResponse;

if (0 == strcasecmp(cb_at($_SERVER, 'REQUEST_METHOD'), 'POST')) {
    global $G_INPUT;
    global $G_state_set;
    $G_state_set->set('html_should_be_closed', false);
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('error_page_type', 'json');

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    require_once('schedule/facility_privilege.csp');
    $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();

    $facility_id = cb_at($G_INPUT, 'facility_id');
    $facility_group_id = cb_at($G_INPUT, 'facility_group_id');

    if (strlen($facility_id) > 0) {
        $facility = $facility_logic->getFacility($facility_id);
        if ($facility === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }
        $facility_group
            = $facility_logic->getFacilityAffiliationGroup($facility_id);
        $t->assign('facility_name', $facility->get('name'));
    } else {
        $facility_group = $facility_logic->getFacilityGroup($facility_group_id);
        $t->assign('facility_group_name', $facility_group->get('name'));
    }

    if ($facility_group === false) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
    }

    $facility_group_id = $facility_group->getOID();
    $ancestors
        = $facility_logic->getAncestors([$facility_group_id => 1]);
    $facility_group_ancestors = $ancestors[$facility_group_id];

    $facility_group_info = [];
    $users_id = [];
    foreach ($facility_group_ancestors as $ancestor_group_id) {
        if ($ancestor_group_id == $facility_group_id) {
            $ancestor_group = $facility_group;
        } else {
            $ancestor_group
                = $facility_logic->getFacilityGroup($ancestor_group_id);
        }

        $ancestor_group_id = $ancestor_group->getOID();
        $facility_group_info[$ancestor_group_id] = [
            'id'   => $ancestor_group_id,
            'name' => $ancestor_group->get('name')
        ];

        $privileges = $privilege_logic->getPrivileges($ancestor_group);
        $privilege_list = [];
        if (is_array($privileges)) {
            require_once('grn/access_resources.csp');

            if (count($privileges['dynamic_role']) > 0) {
                foreach (array_keys($privileges['dynamic_role']) as $tid) {
                    $privilege_list[]
                        = [
                        'type' => GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE,
                        'tid'  => $tid
                    ];
                }
            }

            if (count($privileges['static_role']) > 0) {
                foreach (array_keys($privileges['static_role']) as $tid) {
                    $privilege_list[]
                        = [
                        'type' => GRN_ACCESS_TARGET_TYPE_STATIC_ROLE,
                        'tid'  => $tid
                    ];
                }
            }

            if (count($privileges['group']) > 0) {
                foreach (array_keys($privileges['group']) as $tid) {
                    $privilege_list[] = [
                        'type' => GRN_ACCESS_TARGET_TYPE_GROUP,
                        'tid'  => $tid
                    ];
                }
            }

            if (count($privileges['user']) > 0) {
                foreach (array_keys($privileges['user']) as $tid) {
                    $privilege_list[] = [
                        'type' => GRN_ACCESS_TARGET_TYPE_USER,
                        'tid'  => $tid
                    ];
                    $users_id[$tid] = $tid;
                }
            }
        }
        $facility_group_info[$ancestor_group_id]['privilege_list']
            = $privilege_list;
    }

    $login_user = cb_get_login_user();
    require_once('grn/controller.csp');
    $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
        $login_user);
    $t->assign('users_info', $users_info);

    $t->assign('facility_group_info', $facility_group_info);

    $t->assign('parent_facility_group_id', $facility_group_id);

    $content = $t->fetch(cb_get_pagename() . '.tpl');
    $json = JSONResponse::create();
    $json->response(['content' => $content]);
}
