<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    /*
        // instantiate an Smarty object
        require_once( "grn/smarty.csp" );
        $t = new GRN_Smarty;

        // Validation check
        require_once('SmartyValidate.class.php');
        SmartyValidate::connect($t);

        // validate after a POST
        if(SmartyValidate::is_valid($G_INPUT)) {
            // the validation session is finished
            SmartyValidate::disconnect();
    */
    // --------
    // brabrabra after success
    // --------
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession('grn.schedule.export');

    $charset = @ $G_INPUT['charset'];
    if ( ! $charset) {
        global $G_config_common;
        $charset = $G_config_common->get('I18N', 'default_external_encoding');
    }

    // 日付のチェック
    $setdate = new CB_Date();
    $enddate = new CB_Date();
    $setdate->year = intval($G_INPUT['start_year']);
    $setdate->month = intval($G_INPUT['start_month']);
    $setdate->day = intval($G_INPUT['start_day']);
    $enddate->year = intval($G_INPUT['end_year']);
    $enddate->month = intval($G_INPUT['end_month']);
    $enddate->day = intval($G_INPUT['end_day']);

    require_once('schedule/application.csp');
    $app = GRN_Schedule_Application::getInstance();

    // 期間のチェック
    $app->checkDateTime($setdate, $enddate);

    /// テンポラリのファイルを作成
    $tempdir = cb_tmpdir();
    $temp_filename = tempnam($tempdir, 'sc_');

    require_once('fw/csv.csp');
    $writer = new CB_CSVWriter($charset, $temp_filename);

    // 項目名の書き出し
    $itemname = @ $G_INPUT['item_name'];

    // オプション
    $options = [];
    if (array_key_exists('creator', $G_INPUT) && $G_INPUT['creator'] == '1') {
        $options['creator'] = true;
    }

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    if ($itemname == '1') {
        $csv_header = [];
        $csv_header[] = cb_msg('grn.schedule', 'set_date');
        $csv_header[] = cb_msg('grn.schedule', 'set_time');
        $csv_header[] = cb_msg('grn.schedule', 'end_date');
        $csv_header[] = cb_msg('grn.schedule', 'end_time');
        $csv_header[] = cb_msg('grn.schedule', 'event_menu');
        $csv_header[] = cb_msg('grn.schedule', 'event_detail');
        $csv_header[] = cb_msg('grn.schedule', 'memo');
        $csv_header[] = cb_msg('grn.schedule', 'members_types');
        $csv_header[] = cb_msg('grn.schedule', 'creator');

        // カスタマイズ項目取得
        $items = $facility_logic->listItems();
        foreach ($items as $item) {
            if ($item['use']) {
                $csv_header[] = $item['display_name'];
            }
        }

        $writer->writeLine($csv_header);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);

    require_once('schedule/system_logic.csp');
    $logic = GRN_Schedule_SystemLogic::getInstance();


    if ( ! is_null($target_ids = $session->get('target_ids'))) {
        foreach (array_keys($target_ids) as $id_label) {
            $ids = explode(':', $id_label);
            if (count($ids) < 2) {
                continue;
            }
            $type = $ids[0];
            $id = $ids[1];
            if (is_null($id) || 0 == strlen($id)) {
                continue;
            }

            // ユーザー
            if ($type == 'user') {
                $user = $uum->getUser($id);
                if ($user) {
                    $logic->exportEventsToCSV($writer, $user, $setdate,
                        $enddate, $options);
                    $log_params = [
                        'uid'          => $id,
                        'display_name' => $user->get('display_name')
                    ];
                    $l->noticeEx('export', 'system_event', $log_params);
                }
            } // 組織
            elseif ($type == 'group') {
                $group = $uum->getGroup($id);
                if ($group) {
                    $logic->exportEventsToCSV($writer, $group, $setdate,
                        $enddate, $options);
                    $log_params = [
                        'oid'          => $id,
                        'display_name' => $group->get('name')
                    ];
                    $l->noticeEx('export', 'system_event', $log_params);
                }
            } // 施設
            elseif ($type == 'facility') {
                $facility = $facility_logic->getFacility($id);
                if ($facility !== false) {
                    $logic->exportEventsToCSV($writer, $facility, $setdate,
                        $enddate, $options);
                    $log_params = [
                        'fid'          => $id,
                        'display_name' => $facility->get('name')
                    ];
                    $l->noticeEx('export', 'system_event', $log_params);
                }
            }
        }
    }

    $writer->close();

    // 一時ファイルに書き出した内容をファイルとして出力
    // 'text/comma-separated-values' <= CSV でこういったMIMETYPEがあるらしい
    cb_prepare_download('schedules.csv', 'application/csv', false);
    $fp = fopen($temp_filename, 'rb');
    if (($size = filesize($temp_filename)) > 0) {
        echo fread($fp, $size);
    }
    fclose($fp);
    // 一時ファイルの削除
    unlink($temp_filename);

//        cb_redirect( 'system/application_list', array( 'app_id'=>'schedule' ) );
    /*
        } else {
            // if error, show the source form

            //Assign Template Name
            $t->setPageInfo($target_name);

            cb_redirect( 'schedule/system/export2' );
        }
    */
}
