<?php

//-- instantiate Smarty object
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

//-- get parameters from URL parameters
$target = @ $G_INPUT['tid'];     // user(+organization), role, or facility
$org_id = @ $G_INPUT['oid'];        // organization id
$fgroup_id = @ $G_INPUT['fagid'];   // facility group id

//-- prepare uum and uum_util
global $G_container_base;
$uum = $G_container_base->getInstance('uum');

$page_name = cb_get_pagename();

//-- prepare schedule access logic
require_once('schedule/access_logic.csp');
$al = GRN_Schedule_Access_Logic::getInstance();

if ($target == 'facilitygroup') {
    $target = 'facility';
}

if ($target == 'facility') {
    //(for target 'facility')

    $page_name = cb_get_pagename() . '_facility';

    require_once('grn/org_tree.csp');
    $page_name = cb_get_pagename() . '_facility';
    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name, 'GRN_FacilityTree');
    if (is_null($fgroup_id)) {
        $fgroup_id = $tree->getSelectedNode();
    }
    if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
        $tree->initialize();
        $fgroup_id = null;
    }

    $tree->setSelectedNode($fgroup_id);
    $util->setTree($page_name, $tree);
    $tree_org = $tree->getRoot();

    $t->assign('tree_org', $tree_org);
    $t->assign('page_name', $page_name);
    $t->assign('ftree_async_page', 'schedule/system/json/facility_tree');
    $t->assign('link_page', 'schedule/system/access_index');

    $info = [];

    require_once('schedule/facility_system_logic.csp');
    $fsl = GRN_Facility_SystemLogic::getInstance();

    //--faclity group list
    //$facility_group_rows = $fsl->getFacilityGroups();
    // target facilitygroup not found
    $facility_group = $fsl->getFacilityGroup($fgroup_id);

    if ($fgroup_id && $facility_group === false && $fgroup_id != -1
        && $fgroup_id != -2
    ) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
    }

    //--number on page
    require_once('grn/ui.csp');
    $ucm = GRN_UIConfigManager::getInstance();
    $login = $uum->getLoginUser();
    $uc = $ucm->getUserConfig($login);
    $number_on_page = $uc->getListMax();
    require_once('grn/controller.csp');
    $utility = new GRN_ControllerUtil();
    //--current positoin
    $navi_start_position = $utility->getNaviStartPosition();
    //--save to session
    $utility->setNaviStartPosition($navi_start_position);

    $facility_rows = [];

    if ($fgroup_id > 0) {
        $info['facility_group'] = [
            'fagid'          => $fgroup_id,
            'name'           => $facility_group->get('name'),
            'code'           => $facility_group->get('foreign_key'),
            'security_model' => $al->getSecurityModel($facility_group),
            'access_count'   => count($al->getAccesses($facility_group)),
        ];

        //(for facilities in facility group)
        $facility_rows = $fsl->getGroupFacilitiesInfo($fgroup_id,
            $navi_start_position, $number_on_page);
        $info['facility_count'] = $fsl->getFacilitiesCount($fgroup_id);
        $navi_params = [
            'tid'   => $target,
            'oid'   => $org_id,
            'fagid' => $fgroup_id
        ];
        $info['navi_info']
            = $utility->makeNaviInformation($navi_start_position,
            $number_on_page, $info['facility_count'], $navi_params);
    } elseif ($fgroup_id == -1) {
        // グループに未所属の施設
        //--N-navigation
        //--total facility count
        $facility_count = $fsl->getFacilitiescount($fgroup_id);
        $info['facility_count'] = $facility_count;
        //--navigation information
        $navi_params = [
            'tid'   => $target,
            'oid'   => $org_id,
            'fagid' => $fgroup_id
        ];
        $info['navi_info'] = $utility->makeNaviInformation($navi_start_position,
            $number_on_page, $facility_count, $navi_params);
        //--facility objects
        $facility_rows = $fsl->getIsolatedFacilities($navi_start_position,
            $number_on_page);
    } elseif ($fgroup_id == -2) {
        //全施設
        //--N-navigation
        require_once('grn/controller.csp');
        $utility = new GRN_ControllerUtil();
        //--current positoin
        $navi_start_position = $utility->getNaviStartPosition();
        //--save to session
        $utility->setNaviStartPosition($navi_start_position);
        //--total facility caount
        $facility_count = $fsl->getFacilityTotalCount();
        //--navigation information
        $navi_params = [
            'tid'   => $target,
            'oid'   => $org_id,
            'fagid' => $fgroup_id
        ];
        $info['navi_info'] = $utility->makeNaviInformation($navi_start_position,
            $number_on_page, $facility_count, $navi_params);

        //--facility objects
        $facility_rows = $fsl->getGroupFacilities(null, $navi_start_position,
            $number_on_page);
    }

    foreach (array_keys($facility_rows) as $id) {
        $facility =& $facility_rows[$id];
        if (is_a($facility, "CB_PersistentBase")) {
            $info['facility_list'][$id] = [
                'faid'           => $id,
                'name'           => $facility->get('name'),
                'foreign_key'    => $facility->get('foreign_key'),
                'security_model' => $al->getSecurityModel($facility),

                // 以下は、パフォーマンスを考慮して、GRN_Schedule_Access_Logic 側で実装すべき
                'access_count'   => count($al->getAccesses($facility)),
            ];
        } else {
            $info['facility_list'][$id] = [
                'faid'           => $id,
                'name'           => $facility['col_name'],
                'foreign_key'    => $facility['col_foreign_key'],
                'security_model' => $al->getSecurityModel($fsl->getFacility($id)),

                // 以下は、パフォーマンスを考慮して、GRN_Schedule_Access_Logic 側で実装すべき
                'access_count'   => count($al->getAccesses($fsl->getFacility($id))),
            ];
        }
    }
    require_once('schedule/system_logic.csp');
    $system_logic = GRN_Schedule_SystemLogic::getInstance();
    $t->assign('allow_all_facilities', $system_logic->getAllowAllFacilities());

} else {
    //-- initialize organization tree view
    require_once('grn/org_tree.csp');

    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name);
    if (is_null($org_id)) {
        $org_id = $tree->getSelectedNode();
    }

    if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
        $tree->initialize();
        $org_id = null;
    }

    $tree->setSelectedNode($org_id);
    $util->setTree($page_name, $tree);
    $org = $tree->getRoot();

    $t->assign('org', $org);
    $t->assign('async_page', 'schedule/system/org_json');
    $t->assign('link_page', 'schedule/system/access_index');
    //--

    require_once('grn/org_access_util.csp');
    $navi_params = ['tid' => $target, 'oid' => $org_id, 'fagid' => $fgroup_id];
    $info =& grn_get_org_access_info($target, $org_id, $navi_params,
        $al);
}

require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession('schedule.system.access_list');
$session->unset_by('authorities');

//-- set variables for view
$t->assign('target', $target);
$t->assign('org_id', $org_id);
$t->assign('fgroup_id', $fgroup_id);
$t->assign('info', $info);

if ($target != 'facility' && $target != 'role') {
    $t->assign('is_nogroups', 0 > $org_id);
    $t->assign('is_root', ! $org_id);
}

//-- page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//-- site position
$site_position = [
    ['page' => '', 'name' => $page_title],
];
$t->assign('site_position', $site_position);

$t->assign('page_name', $page_name);

if (@$G_INPUT['top'] || ! @$G_INPUT['fagid']) {
    $t->assign('top', 1);
}

// exec smarty
$t->display(cb_get_pagename() . '.tpl');

