<?php

use grn\schedule\ScheduleDefaultPublicLogic;

// get parameters
global $G_INPUT;
$org_id = cb_at($G_INPUT, "oid");
$top = cb_at($G_INPUT, "top");
$search_text = cb_at($G_INPUT, "search_text");
$is_search = array_key_exists("search_text", $G_INPUT);

// instantiate smarty object
require_once("grn/smarty.csp");
$smarty = new GRN_Smarty();

// prepare instance
global $G_container_base;
$uum = $G_container_base->getInstance("uum");
$login = $uum->getLoginUser();

$page_name = cb_get_pagename();

// initialize organization tree view
require_once("grn/org_tree.csp");
$util = GRN_OrgTreeUtil::getInstance();
$tree = $util->getTree($page_name);
if (is_null($org_id)) {
    $org_id = $tree->getSelectedNode();
}
if ($top || is_null($tree->getRoot())) {
    $tree->initialize();
    $org_id = null;
}
$tree->setSelectedNode($org_id);
$util->setTree($page_name, $tree);
$org = $tree->getRoot();

// set variables for organization tree view
$smarty->assign("org", $org);
$smarty->assign("async_page", "schedule/system/org_json");
$smarty->assign("link_page", "schedule/system/default_public_index");

// number on page
require_once("grn/ui.csp");
$userConfig = GRN_UIConfigManager::getInstance()->getUserConfig($login);
$number_on_page = $userConfig->getListMax();

require_once("grn/controller.csp");
$utility = new GRN_ControllerUtil();
// current position
$navi_start_position = $utility->getNaviStartPosition();
// save to session
$utility->setNaviStartPosition($navi_start_position);
$navigation_info = [];
$navi_params = [];
$navi_params["oid"] = $org_id;

// get user list 
require_once("grn/org_util_search.csp");
require_once("grn/org_util.csp");
$user_list = [];
if ($is_search) {
    $navi_params['search_text'] = $search_text;
    $condition = grn_get_user_info_search_condition($org_id,
        $search_text, true);
    $count = grn_get_user_info_search_count($org_id,
        $condition);
    $navigation_info = grn_get_user_navigation_info($count,
        $navi_params, $number_on_page);
    $user_list = grn_search_user_info($org_id, $condition,
        $navigation_info, false, null);
} elseif ($org_id) {
    $navigation_info = grn_get_user_list_info($org_id, $navi_params,
        $number_on_page);
    $user_list = grn_get_user_list($org_id, $navigation_info, null);
} else {
    $navigation_info["navi"]["number_on_page"] = $number_on_page;
    $navigation_info["navi"]["previous_page_start_position"] = -1;
    $navigation_info["navi"]["next_page_start_position"] = -1;
}

// set count the number of default public destination
if (is_array($user_list) && count($user_list) > 0) {
    $user_ids = array_keys($user_list);
    $default_public_count_list = ScheduleDefaultPublicLogic::getInstance()
                                                           ->getDefaultPublicCountByUserIds($user_ids);
    foreach ($user_list as $user_id => $user_info_list) {
        $user_info_list["default_public_count"] = 0;
        if (isset($default_public_count_list[$user_id])) {
            $user_info_list["default_public_count"]
                = $default_public_count_list[$user_id];
        }
        $user_list[$user_id] = $user_info_list;
    }
}

// set variables for view
$smarty->assign("org_id", $org_id);
$smarty->assign("search_text", $search_text);
$smarty->assign("user_list", $user_list);
$smarty->assign("navi_info", $navigation_info);

$smarty->assign("is_nogroups", 0 > $org_id);
$smarty->assign("is_root", ! $org_id);
$smarty->assign("is_search", $is_search);

// page name
$smarty->assign("page_name", $page_name);

// page title
$page_title = grn_get_current_page_display_name();
$smarty->assign("page_title", $page_title);

// site position
$site_position = [];
$site_position[] = [
    "page" => ""
    ,
    "name" => $page_title
];
$smarty->assign("site_position", $site_position);

// display smarty
$smarty->display(cb_get_pagename() . ".tpl");
