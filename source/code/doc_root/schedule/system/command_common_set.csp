<?php

use grn\grn\Validate;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    /*
        // instantiate an Smarty object
        require_once( "grn/smarty.csp" );
        $t = new GRN_Smarty;

        // Validation check
        require_once('SmartyValidate.class.php');
        SmartyValidate::connect($t);

        // validate after a POST
        if(SmartyValidate::is_valid($G_INPUT)) {
            // the validation session is finished
            SmartyValidate::disconnect();
    */
    // --------
    // brabrabra after success
    // --------
    require_once('schedule/system_logic.csp');
    $logic = GRN_Schedule_SystemLogic::getInstance();

    $private = @ $G_INPUT['private'];
    if ( ! $private) {
        $private = '0';
    }
    $hideprivate = @ $G_INPUT['hideprivate'];
    if ( ! $hideprivate) {
        $hideprivate = '0';
    }
    $managednotify = cb_at($G_INPUT, 'managednotify');
    if (is_null($managednotify)) {
        $managednotify = '0';
    }
    $showorganization = @ $G_INPUT['showorganization'];
    if ( ! $showorganization) {
        $showorganization = '0';
    }
    $unit = @ $G_INPUT['unit'];
    $limitmonths = @ $G_INPUT['limitmonths'];
    $showholiday = @ $G_INPUT['publicholiday'];
    $allowallfacilities = @ $G_INPUT['allowallfacilities'];
    $allowfacilitiename = @ $G_INPUT['allowfacilitiename'];
    $activateDragDrop = (array_key_exists('activateDragDrop', $G_INPUT))
        ? $G_INPUT['activateDragDrop'] : 0;
    //GTM-1136
    $allow_file_attachment = cb_at($G_INPUT, 'allow_file_attachment');
    //End GTM-1136
    //GTM-1621
    $allow_attendance_check = cb_at($G_INPUT, 'allow_attendance_check');
    if ( ! is_null($allow_attendance_check)) {
        $allow_attendance_check = '1';
    }
    $default_attendance_check = cb_at($G_INPUT, 'default_attendance_check');
    if ( ! is_null($default_attendance_check)) {
        $default_attendance_check = '1';
    }
    //End GTM-1621
    $allow_setting_group_role_to_watchers = cb_at($G_INPUT,
        'allow_setting_group_role_to_watchers');
    $range_repeat_appointment = Validate::isNumber($limitmonths)
        ? (int)($limitmonths) : 0;
    $range_repeat_appointment_allowed = [1, 2, 3, 4, 5, 6, 12];
    if (in_array($range_repeat_appointment, $range_repeat_appointment_allowed)
        === false
    ) {
        $limitmonths = GRN_SCHEDULE_DEFAULT_REPEAT_RANGE;
    }
    $range_unit_time = Validate::isNumber($unit) ? (int)($unit) : 0;
    $range_unit_time_allowed = [5, 10, 15, 30];
    if (in_array($range_unit_time, $range_unit_time_allowed) === false) {
        $unit = GRN_SCHEDULE_DEFAULT_AROUND_TIME;
    }
    /*
    GRN2-1931
            //出欠確認機能の許可
            $registercheckabsence = @ $G_INPUT['registercheckabsence'];
            // 出欠確認の初期値
            $default_checkabsence = @ $G_INPUT['default_checkabsence'];
    */
    // 実際の保存
    $logic->setScheduleUnit($unit);
    $logic->setUsePrivate($private);
    $logic->setHiddenPrivate($hideprivate);
    $logic->setManagedNotify($managednotify);
    $logic->setShowOrganize($showorganization);
    $logic->setRepeatLimit($limitmonths);
    $logic->setShowHoliday($showholiday);
    $logic->setAllowAllFacilities($allowallfacilities);
    $logic->setAllowFacilitiesName($allowfacilitiename);
    $logic->setActivateDragDrop($activateDragDrop);
    //GTM-1136
    $logic->setAllowFileAttachment($allow_file_attachment);
    //End GTM-1136
    //GTM-1621
    $logic->setAllowAttendanceCheck($allow_attendance_check);
    if ($allow_attendance_check == '1') {
        $logic->setDefaultAttendanceCheck($default_attendance_check);
    }
    //End GTM-1621
    $logic->setAllowSettingGroupRoleToWatchers($allow_setting_group_role_to_watchers);
    /*
    GRN2-1931
            $logic->setRegisterCheckAbsence( $registercheckabsence );
            $logic->setDefault_CheckAbsence( $default_checkabsence );
    */
    if ($private == '1') {
        $default_private_set = cb_at($G_INPUT, 'default_private_set',
            GRN_PRIVATE_SETTING_PUBLIC);
        if ( ! in_array($default_private_set, [
            GRN_PRIVATE_SETTING_PUBLIC,
            GRN_PRIVATE_SETTING_PRIVATE,
            GRN_PRIVATE_SETTING_MANAGED
        ])
        ) {
            $logic->setDefaultPrivateSet(GRN_PRIVATE_SETTING_PUBLIC);
        } else {
            $logic->setDefaultPrivateSet($default_private_set);
        }
    }

    if ($allowfacilitiename == '1') {
        $facnamepos = @ $G_INPUT['facnamepos'];
        if ($facnamepos != "0") {
            $facnamepos = "1";
        }
        $logic->setAllowFacilitiesNameOnRight($facnamepos);
    }
    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);

    $log_params = ['second_unit' => $unit];
    $l->noticeEx('config', 'common', $log_params);
    $log_params = ['repeat_limit' => $limitmonths];
    $l->noticeEx('config', 'common', $log_params);
    if ($private == '1') {
        $log_params = ['use_private' => 'ON'];
        if ($default_private_set == GRN_PRIVATE_SETTING_PUBLIC) {
            $log_params['visibility_default'] = 'Public';
        } elseif ($default_private_set == GRN_PRIVATE_SETTING_PRIVATE) {
            $log_params['visibility_default'] = 'Private';
        } else {
            $log_params['visibility_default'] = 'Set private watchers';
        }
    } else {
        $log_params = ['use_private' => 'OFF'];
    }
    $l->noticeEx('config', 'common', $log_params);

    if ($hideprivate) {
        $log_params = ['hidden_private' => 'ON'];
    } else {
        $log_params = ['hidden_private' => 'OFF'];
    }
    $l->noticeEx('config', 'common', $log_params);

    if ($managednotify) {
        $log_params = ['managed_notify' => 'ON'];
    } else {
        $log_params = ['managed_notify' => 'OFF'];
    }
    $l->noticeEx('config', 'common', $log_params);

    if ($showorganization) {
        $log_params = ['use_oganize' => 'ON'];
    } else {
        $log_params = ['use_oganize' => 'OFF'];
    }
    $l->noticeEx('config', 'common', $log_params);

    if ($showholiday) {
        $log_params = ['show_holiday' => 'ON'];
    } else {
        $log_params = ['show_holiday' => 'OFF'];
    }
    $l->noticeEx('config', 'common', $log_params);

    if ($allowallfacilities) {
        $log_params = ['show_all_facility' => 'ON'];
    } else {
        $log_params = ['show_all_facility' => 'OFF'];
    }
    $l->noticeEx('config', 'common', $log_params);

    if ($allowfacilitiename) {
        $log_params = ['show_facility_name' => 'ON'];
        if ($facnamepos == '1') {
            $log_params['position_facility_name_at'] = 'AFTER';
        } else {
            $log_params['position_facility_name_at'] = 'BEFORE';
        }
    } else {
        $log_params = ['show_facility_name' => 'OFF'];
    }
    $l->noticeEx('config', 'common', $log_params);

    if ($activateDragDrop) {
        $log_params = ['activate_dragdrop' => 'ON'];
    } else {
        $log_params = ['activate_dragdrop' => 'OFF'];
    }

    //GTM-1136
    if ($allow_file_attachment) {
        $log_params = ['allow_file_attachment' => 'ON'];
    } else {
        $log_params = ['allow_file_attachment' => 'OFF'];
    }
    //End GTM-1136

    $l->noticeEx('config', 'common', $log_params);

    //GTM-1621
    if ($allow_attendance_check == '1') {
        $log_params = ['allow_attendance_check' => 'ON'];
        if ($default_attendance_check == '1') {
            $log_params['default_value_attendance_check'] = 'ON';
        } else {
            $log_params['default_value_attendance_check'] = 'OFF';
        }
    } else {
        $log_params = ['allow_attendance_check' => 'OFF'];
    }

    if ($allow_setting_group_role_to_watchers) {
        $log_params = ['allow_setting_group_role_to_watchers' => 'ON'];
    } else {
        $log_params = ['allow_setting_group_role_to_watchers' => 'OFF'];
    }

    $l->noticeEx('config', 'common', $log_params);
    //End GTM-1621
    /*
    GRN2-1931
            // 出欠確認機能の許可
            if( $registercheckabsence )
                $log_params = array( 'registercheckabsence' => 'ON' );
            else
                $log_params = array( 'registercheckabsence' => 'OFF' );
            $l->noticeEx( 'config', 'common', $log_params );

            // 出欠確認　デフォルト値
            if( $default_checkabsence )
                $log_params = array( 'default_checkabsence' => 'ON' );
            else
                $log_params = array( 'default_checkabsence' => 'OFF' );
            $l->noticeEx( 'config', 'common', $log_params );
    */
    cb_redirect('system/application_list', ['app_id' => 'schedule']);
    /*
        } else {
            // if error, show the source form

            //Assign Template Name
            $t->setPageInfo($target_name);

            cb_redirect( 'schedule/system/common_set' );
        }
    */
}
