<?php


if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    /*
        // instantiate an Smarty object
        require_once( "grn/smarty.csp" );
        $t = new GRN_Smarty;

        // Validation check
        require_once('SmartyValidate.class.php');
        SmartyValidate::connect($t);

        // validate after a POST
        if(SmartyValidate::is_valid($G_INPUT)) {
            // the validation session is finished
            SmartyValidate::disconnect();
    */
    // --------
    // brabrabra after success
    // --------
    require_once('schedule/error_code.csp');

    $file_id = @ $G_INPUT['file_id'];
    // セッションに関連付けてあったファイルを取得する。
    $session_manager = CB_SessionManager::getInstance();
    $session
        =& $session_manager->getSession('schedule/system/facilitygroup_import1');
    $file_infos = $session->getFiles('facilitygroup_files');
    $import_option = $session->get('import_option');

    // ファイルがない
    if ( ! is_array($file_infos)) {
        cb_throw_error(E_GRN_SCHD_NOT_FOUND_CSV_FILE);
    }

    if ( ! array_key_exists($file_id, $file_infos)) {
        cb_throw_error(E_GRN_SCHD_NOT_FOUND_CSV_FILE);
    }

    $csv_columns = [
        'parent_code', // 親の施設グループコード
        'code',        // 現在の施設グループコード
        'name',        // 施設グループ
        'memo',        // メモ
        'new_code',    // 新しい施設グループコード
    ];
    $csv_columns_num = count($csv_columns);

    $charset = @ $import_option['charset'];
    if ( ! $charset) {
        global $G_config_common;
        $charset = $G_config_common->get('I18N', 'default_external_encoding');
    }

    // スケジュールのインクルード
    require_once('schedule/facility_system_logic.csp');
    $logic = GRN_Facility_SystemLogic::getInstance();

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l =& $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
    $log_params = [];
    $l->noticeEx('import', 'facility_group', $log_params);

    // エラーフックの登録
    require_once('fw/csv.csp');
    $csv = new CB_CSVReader($charset, $file_infos[$file_id]->getPath());
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login = &$uum->getLoginUser();
    if ( ! $login) {
        $login = null;
    }

    require_once('fw/string_util.csp');
    $skip_lines = (int)@$import_option['skip'];

    //  case 1 現施設グループコードが指定されてない and 新施設グループコードが指定されている   -> 新しい施設グループを登録
    //  case 2 現施設グループコードが指定されている and 新施設グループコードが指定されてない   -> 既存の施設グループを変更
    //  case 3 両方指定されている and 現施設グループコードに指定された施設グループが DB にある -> 既存の施設グループを変更
    //  case 4 両方指定されている and 現施設グループコードに指定された施設グループが DB にない -> 新しい施設グループを登録
    //                   （コードは新施設グループコードを使い、そのコードが DB にあったらエラー）
    //
    //  case 2.1 現施設コードが指定されている and 新施設グループコードが指定されていない
    //           and 現施設グループコードに指定された施設グループが DB にない-> エラー
    //
    // case 3.1  両方指定されている and 現施設グループコードに指定された施設グループが DB にある and
    //           現施設グループコードと新施設グループコードが違っている and 新施設グループコードに指定された施設グループがすでに存在する
    //            -> エラー

    // 親の施設グループコードが空 -> ルート直下に配置する
    // 親の施設グループコードが指定されている and その施設グループが DB にない -> エラー

    // 施設グループコードか新施設グループコードが空 -> エラー
    // 施設グループコードと新施設グループコードがどちらも省略 -> エラー

    while (($line = $csv->readLine()) !== false) {
        if ($skip_lines > 0) {
            $skip_lines--;
            continue;
        }

        if (count($line) < $csv_columns_num) {
            cb_throw_error(E_GRN_SCHD_CSV_INVALID_COLUMNS);
        }

        $group = null;

        $parent_code = cb_trim($line[0]);
        $current_code = cb_trim($line[1]);
        $name = cb_trim($line[2]);
        $memo = cb_trim($line[3]);
        $new_code = cb_trim($line[4]);

        if (strlen($current_code) === 0 || strlen($new_code) === 0) {
            cb_throw_error(E_GRN_FCLT_CSV_EMPTY_EACH_GROUP_KEY,
                null,
                [
                    'property1' => cb_msg('grn.schedule',
                        'current_facility_group_code'),
                    'property2' => cb_msg('grn.schedule',
                        'new_facility_group_code')
                ],
                [
                    'property1' => cb_msg('grn.schedule',
                        'current_facility_group_code'),
                    'property2' => cb_msg('grn.schedule',
                        'new_facility_group_code')
                ]);

        }
        if ($current_code === '*' && $new_code === '*') {
            cb_throw_error(E_GRN_FCLT_CSV_MISSING_BOTH_GROUP_KEY,
                null,
                [
                    'property1' => cb_msg('grn.schedule',
                        'current_facility_group_code'),
                    'property2' => cb_msg('grn.schedule',
                        'new_facility_group_code')
                ],
                [
                    'property1' => cb_msg('grn.schedule',
                        'current_facility_group_code'),
                    'property2' => cb_msg('grn.schedule',
                        'new_facility_group_code')
                ]);
        }
        if (mb_strlen($name) == 0) {
            cb_throw_error(E_GRN_FCLT_MISSING_FACILITYGROUP_NAME);
        }

        $parent_id = null;
        if (mb_strlen($parent_code) > 0) {
            $parent_fgroup = $logic->getFacilityGroupByForeignKey($parent_code);
            if ($parent_fgroup === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_PARENT_FACILITYGROUP);
            }
            $parent_id = $parent_fgroup->getOID();
        }

        if ($current_code === '*' && $new_code !== '*') // case 1
        {
            $logic->addFacilityGroupDefaultOnly($login, $name, $new_code, $memo,
                $parent_id);
        } elseif ($current_code !== '*' && $new_code === '*') {
            $already = $logic->getFacilityGroupByForeignKey($current_code);
            if ($already === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP); // case 2.1
            } else {
                $logic->modifyFacilityGroupDefaultOnly($login,
                    $already->getOID(), $name, $current_code, $memo); // case 2
                if ($already->getOID() == $parent_id) {
                    cb_throw_error(E_GRN_FCLT_INVALID_PARENT_CATEGORY);
                }
                $logic->moveFacilityGroup($login, $already->getOID(),
                    $parent_id);
            }
        } else {
            $already = $logic->getFacilityGroupByForeignKey($current_code);
            if ($already === false) {
                $logic->addFacilityGroupDefaultOnly($login, $name, $new_code,
                    $memo, $parent_id); // case 4
            } else {
                // 既存の施設グループと、コードが重複していないか？
                $check_fgroup = $logic->getFacilityGroupByForeignKey($new_code);
                if ($check_fgroup
                    && $check_fgroup->getOID() != $already->getOID()
                ) {
                    cb_throw_error(E_GRN_FCLT_ALREADY_ENTRY_FACILITYGROUP, null,
                        ['code' => $check_fgroup->get('foreign_key')]);
                }
                $logic->modifyFacilityGroupDefaultOnly($login,
                    $already->getOID(), $name, $new_code, $memo); // case 3
                if ($already->getOID() == $parent_id) {
                    cb_throw_error(E_GRN_FCLT_INVALID_PARENT_CATEGORY);
                }
                $logic->moveFacilityGroup($login, $already->getOID(),
                    $parent_id);
            }
        }
    }

    _schedule_rebuild_facility_group_tree(); // セッションに保存しているツリーの情報を更新

    cb_redirect('schedule/system/import_index');
    /*
        } else {
            // if error, show the source form

            //Assign Template Name
            $t->setPageInfo($target_name);

            cb_redirect( 'schedule/system/import2' );
        }
    */
}


