<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    global $G_INPUT;

    if ( ! @$G_INPUT['file_id']) {
        cb_throw_error(E_GRN_CSV_FILE_NOT_FOUND);
    }

    $file_id = $G_INPUT['file_id'];

    require_once('fw/session_manager.csp');

    $session_manager = CB_SessionManager::getInstance();
    $session
        = $session_manager->getSession('schedule/system/access_import1');
    $files = $session->getFiles('import_files');

    // ファイルがない
    if ( ! is_array($files)) {
        cb_throw_error(E_GRN_SCHD_NOT_FOUND_CSV_FILE);
    }

    if ( ! array_key_exists($file_id, $files)) {
        cb_throw_error(E_GRN_SCHD_NOT_FOUND_CSV_FILE);
    }

    $charset = @$G_INPUT['charset'];
    $skip = @$G_INPUT['skip'] ? intval($G_INPUT['skip']) : 0;

    if ( ! $charset) {
        global $G_config_common;
        $charset = $G_config_common->get('I18N', 'default_external_encoding');
    }

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
    $log_params = [];
    $l->noticeEx('import', 'access', $log_params);

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    require_once('fw/csv.csp');
    $csv = new CB_CSVReader($charset, $files[$file_id]->getPath());

    // 先頭行をスキップ
    for ($i = 0; $i < $skip; ++$i) {
        $csv->readLine();
    }

    $csv_columns = [
        'object_type',
        'object_key',
        'target_type',
        'authorities',
        'target_key'
    ];
    $csv_columns_num = count($csv_columns);

    while (($line = $csv->readLine()) !== false) {
        if (count($line) < $csv_columns_num - 1) {
            cb_throw_error(E_GRN_SCHD_CSV_INVALID_COLUMNS);
        }

        $object = null;
        $target = null;

        $object_type = $line[0];
        $object_id = $line[1];
        $object_id_type = '';
        $object_name = '';
        switch ($object_type) {
            case 'user':
                $object = $uum->getUserByForeignKey($object_id);
                $object_id_type = 'uid';
                if (is_a($object, 'CB_User')) {
                    $object_name = $object->get('display_name');
                }
                break;
            case 'group':
                $object = $uum->getGroupByForeignKey($object_id);
                $object_id_type = 'oid';
                if (is_a($object, 'CB_Group')) {
                    $object_name = $object->get('name');
                }
                break;
            case 'role':
                $object = $uum->getStaticRoleByForeignKey($object_id);
                $object_id_type = 'rid';
                $object_name = $object_id;
                break;
            case 'facility':
                $object = $facility_logic->getFacilityByForeignKey($object_id);
                $object_id_type = 'fid';
                if (is_a($object, 'GRN_Facility_Facility')) {
                    $object_name = $object->get('name');
                }
                break;
            case 'facilitygroup':
                $object
                    = $facility_logic->getFacilityGroupByForeignKey($object_id);
                $object_id_type = 'fgid';
                if (is_a($object, 'GRN_Facility_FacilityGroup')) {
                    $object_name = $object->get('name');
                }
                break;
            default:
                cb_throw_error(E_GRN_SCHD_ACCESS_CSV_INVALID_OBJECT_TYPE, null,
                    ['type' => $object_type]);
        }
        if ( ! $object) {
            cb_throw_error(E_GRN_SCHD_ACCESS_CSV_INVALID_OBJECT, null,
                ['type' => $object_id]);
        }

        $target_type = $line[2];
        $target_id = $line[4];
        $target_id_type = '';
        $target_name = '';
        switch ($target_type) {
            case 'security_model':
                $target = 'security_model';
                $security_model = $line[3];
                break;
            case 'user':
                $target = $uum->getUserByForeignKey($target_id);
                $target_id_type = 'uid';
                if (is_a($target, 'CB_User')) {
                    $target_name = $target->get('display_name');
                }
                break;
            case 'group':
                $target = $uum->getGroupByForeignKey($target_id);
                $target_id_type = 'oid';
                if (is_a($target, 'CB_Group')) {
                    $target_name = $target->get('name');
                }
                break;
            case 'role':
                $target_type = 'static_role';
                $target = $uum->getStaticRoleByForeignKey($target_id);
                $target_id_type = 'rid';
                $target_name = $target_id;
                break;
            case 'facility':
                $target = $facility_logic->getFacilityByForeignKey($target_id);
                $target_id_type = 'fid';
                if (is_a($target, 'GRN_Facility_Facility')) {
                    $target_name = $target->get('name');
                }
                break;
            case 'facilitygroup':
                $target
                    = $facility_logic->getFacilityGroupByForeignKey($target_id);
                $target_id_type = 'fgid';
                if (is_a($target, 'GRN_Facility_FacilityGroup')) {
                    $target_name = $target->get('name');
                }
                break;
            case 'dynamic_role':
                $target = $target_id;
                $target_id_type = 'fid';
                $target_name = $target_id;
                if ($target !== "LoginUser" && $target !== "Everyone") {
                    cb_throw_error(E_GRN_SCHD_ACCESS_CSV_INVALID_TARGET, null,
                        ['type' => $target_id]);
                }
                break;
            default:
                cb_throw_error(E_GRN_SCHD_ACCESS_CSV_INVALID_TARGET_TYPE, null,
                    ['type' => $line[2]]);
        }

        if ($target_type != 'security_model'
            && count($line) < $csv_columns_num
        ) {
            cb_throw_error(E_GRN_SCHD_CSV_INVALID_COLUMNS);
        }

        if ($target === false || is_null($target)) {
            cb_throw_error(E_GRN_SCHD_ACCESS_CSV_INVALID_TARGET, null,
                ['type' => $target_id]);
        }

        if (is_object($target)) {
            $target_id = $target->getOID();
        } else {
            $target_id = $target;
        }

        // セキュリティモデルの変更
        if ($target_type == 'security_model') {
            $acc_logic->setSecurityModel($object, $security_model);

            // 監査ログ
            $log_params = [
                $object_id_type  => $object->getOID(),
                'security_model' => $security_model
            ];
            $l->noticeEx('modify', 'access', $log_params);
            continue;
        }

        // アクセス権の設定
        $value = $line[3];
        if ($value !== '' && preg_match('/[^RAMD]/i', $value)) {
            cb_throw_error(E_GRN_SCHD_ACCESS_CSV_INVALID_ACCESS_VALUE, null,
                ['type' => $value]);
        }

        $delete_mode = false;
        $authorities_type = [];
        $authorities = [
            'read'   => 0,
            'add'    => 0,
            'modify' => 0,
            'delete' => 0
        ];
        if ($acc_logic->getSecurityModel($object) == 'revoke') {
            if (preg_match('/R/i', $value) === 0) {
                $authorities['read'] = 1;
            }
            if (preg_match('/A/i', $value) === 0) {
                $authorities['add'] = 1;
            }
            if (preg_match('/M/i', $value) === 0) {
                $authorities['modify'] = 1;
            }
            if (preg_match('/D/i', $value) === 0) {
                $authorities['delete'] = 1;
            }

            // 登録/変更/削除のいずれかがあっても閲覧がだめな場合
            if ($authorities['add'] == 0 || $authorities['modify'] == 0
                || $authorities['delete'] == 0
            ) {
                if ($authorities['read'] == 1) {
                    cb_throw_error(E_GRN_SCHD_ACCESS_INVALID_ACCESS_TYPE);
                }
            }

            //全て許可する場合は削除モード
            if ($authorities['read'] == 0 && $authorities['add'] == 0
                && $authorities['modify'] == 0
                && $authorities['delete'] == 0
            ) {
                $delete_mode = true;
            }

            foreach ($authorities as $key => $value) {
                if ($value == 0) {
                    $authorities_type[] = $key;
                }
            }
            $authorities_type = implode(',', $authorities_type);

        } else {

            if (preg_match('/R/i', $value) !== 0) {
                $authorities['read'] = 1;
            }
            if (preg_match('/A/i', $value) !== 0) {
                $authorities['add'] = 1;
            }
            if (preg_match('/M/i', $value) !== 0) {
                $authorities['modify'] = 1;
            }
            if (preg_match('/D/i', $value) !== 0) {
                $authorities['delete'] = 1;
            }

            // 登録/変更/削除のいずれかがあっても閲覧がだめな場合
            if ($authorities['add'] == 1 || $authorities['modify'] == 1
                || $authorities['delete'] == 1
            ) {
                if ($authorities['read'] == 0) {
                    cb_throw_error(E_GRN_SCHD_ACCESS_INVALID_ACCESS_TYPE);
                }
            }

            //全て禁止する場合は削除モード
            if ($authorities['read'] == 0 && $authorities['add'] == 0
                && $authorities['modify'] == 0
                && $authorities['delete'] == 0
            ) {
                $delete_mode = true;
                //continue;
            }

            foreach ($authorities as $key => $value) {
                if ($value == 1) {
                    $authorities_type[] = $key;
                }
            }
            $authorities_type = implode(',', $authorities_type);
        }

        //削除モードか否かをチェック
        if ( ! $delete_mode) {
            //追加モード
            $acc_logic->setAccess($object, $target_type, $target_id,
                $authorities);
            $security_model = $acc_logic->getSecurityModel($object);

            // 監査ログ
            $log_params = [
                $object_id_type  => $object->getOID(),
                'security_model' => $security_model,
                'auth'           => $authorities_type
            ];
            $l->noticeEx('modify', 'access', $log_params);
        } else {
            //削除モード
            if ($acc_logic->deleteAccess($object, $target_type, $target_id)) {
                // 監査ログ
                switch ($target_type) {
                    case 'user':
                        if (($target = $uum->getUser($target_id))) {
                            $log_params = [
                                $object_id_type => $object->getOID(),
                                'uid'           => $target_id
                            ];
                            $l->noticeEx('delete', 'access', $log_params);
                        }
                        break;

                    case 'group':
                        if (($target = $uum->getGroup($target_id))) {
                            $log_params = [
                                $object_id_type => $object->getOID(),
                                'oid'           => $target_id
                            ];
                            $l->noticeEx('delete', 'access', $log_params);
                        }
                        break;

                    case 'static_role':
                        if (($target = $uum->getStaticRole($target_id))) {
                            $log_params = [
                                $object_id_type => $object->getOID(),
                                'rid'           => $target_id
                            ];
                            $l->noticeEx('delete', 'access', $log_params);
                        }
                        break;

                    case 'dynamic_role':
                        if (array_key_exists($target_id, $dynamic_roles)) {
                            $log_params = [
                                $object_id_type => $object->getOID(),
                                'rid'           => $target_id
                            ];
                            $l->noticeEx('delete', 'access', $log_params);
                        }
                        break;
                }
            }
        }

    }
    $csv->close();

    foreach (array_keys($files) as $id) {
        $session->unsetFile('import_files', $id);
    }

    cb_redirect('schedule/system/import_index');

}


