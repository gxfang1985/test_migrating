<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    $eid = array_key_exists('eid', $G_INPUT) ? $G_INPUT['eid'] : null;
    if ( ! is_array($eid)) {
        cb_redirect('schedule/system/access_list', $G_INPUT);
    }

    $nid = array_key_exists('nid', $G_INPUT) ? $G_INPUT['nid'] : null;

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    $facilitygroup = $facility_logic->getFacilityGroup($nid);
    if ($facilitygroup === false) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
    }

    require_once('schedule/facility_privilege.csp');
    $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);

    $object_id = $facilitygroup->getOID();
    $object_name = $facilitygroup->get('name');

    foreach ($eid as $item) {
        $ids = explode(':', $item);
        if (count($ids) < 2) {
            continue;
        }

        $id = $ids[1];
        switch ($ids[0]) {
            case 'user':
                if (($target = &$uum->getUser($id))) {
                    $privilege_logic->deletePrivilege($facilitygroup, $target,
                        'user');
                    // 監査ログ
                    $log_params = [
                        'fgid'          => $object_id,
                        'uid'           => $id,
                        'facilitygroup' => $object_name
                    ];
                    $l->noticeEx('delete', 'privilege', $log_params);
                }
                break;

            case 'group':
                if (($target = &$uum->getGroup($id))) {
                    $privilege_logic->deletePrivilege($facilitygroup, $target,
                        'group');
                    // 監査ログ
                    $log_params = [
                        'fgid'          => $object_id,
                        'oid'           => $id,
                        'facilitygroup' => $object_name
                    ];
                    $l->noticeEx('delete', 'privilege', $log_params);
                }
                break;

            case 'static_role':
                if (($target = &$uum->getStaticRole($id))) {
                    $privilege_logic->deletePrivilege($facilitygroup, $target,
                        'static_role');
                    // 監査ログ
                    $log_params = [
                        'fgid'          => $object_id,
                        'rid'           => $id,
                        'facilitygroup' => $object_name
                    ];
                    $l->noticeEx('delete', 'privilege', $log_params);
                }
                break;

            case 'dynamic_role':
                if (array_key_exists($id, $dynamic_roles)) {
                    $privilege_logic->deletePrivilege($facilitygroup, $id,
                        'dynamic_role');
                    // 監査ログ
                    $log_params = [
                        'fgid'          => $object_id,
                        'dynamic_role'  => $id,
                        'facilitygroup' => $object_name
                    ];
                    $l->noticeEx('delete', 'privilege', $log_params);
                }
                break;
        }
    }

    $params = $G_INPUT;
    unset($params['eid']);

    cb_redirect('schedule/system/facility_group_privilege_list', $params);
}
