<?php

if (0 == strcasecmp(cb_at($_SERVER, 'REQUEST_METHOD'), 'POST')) {
    global $G_INPUT;

    $advance_select = cb_at($G_INPUT, 'advance_select');
    if ($advance_select != '1') {
        $G_INPUT['advance'] = '1';
        $advance = '0';
    } else {
        $advance_select = '1';
        $advance = preg_replace('/^0+/', '', cb_at($G_INPUT, 'advance'));
    }

    $max_time = cb_at($G_INPUT, 'max_time') != '1' ? '0' : '1';
    $hour = cb_at($G_INPUT, 'scheduled_time_hour');
    $minute = cb_at($G_INPUT, 'scheduled_time_minute');

    $modify_user = cb_at($G_INPUT, 'modify_user');
    if ($modify_user != 'creator' && $modify_user != 'member'
        && $modify_user != 'grantuser'
    ) {
        $modify_user = 'grantuser';
    }

    $show_memo = cb_at($G_INPUT, 'show_memo', '0') != '0' ? '1' : '0';
    $regularly = cb_at($G_INPUT, 'regularly', '0') != '0' ? '1' : '0';
    $approval = cb_at($G_INPUT, 'approval', '0') != '0' ? '1' : '0';

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;
    $target_name = 'schedule/system/facility_common_set';

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($target_name);
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        if ($max_time == '1') {
            if ($hour < 0 || $hour > 23) {
                require_once('schedule/error_code.csp');
                cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
            }

            if (is_numeric($minute) == false) {
                require_once('schedule/error_code.csp');
                cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
            } else {
                if ($minute < 0 || $minute > 60) {
                    require_once('schedule/system/error_code.csp');
                    cb_throw_error(E_GRN_SCHD_INVALID_DATETIME);
                }
            }

            $max_time = $hour * 60 + $minute;
        }

        require_once('schedule/facility_system_logic.csp');
        $logic = GRN_Facility_SystemLogic::getInstance();

        $settingLogic = $logic->getFacilitySettingLogic();
        $settingLogic->setFacilityAdvance($advance);
        $settingLogic->setFacilityMaxTime($max_time);
        $settingLogic->setFacilityModifyUser($modify_user);
        $settingLogic->setFacilityShowMemo($show_memo);
        $settingLogic->setFacilityRepeat($regularly);
        $settingLogic->setFacilityApproval($approval);

        $inherit_from_parent = '1';
        $settingLogic->setFacilityInheritParent($inherit_from_parent);

        // reset all groups facility and facilities setting
        $settingLogic->resetAllFacilitiesSetting();
        $settingLogic->resetAllGroupsSetting();

        // 監査ログ
        require_once('grn/logger.csp');
        $lm = CB_LoggerManager::getInstance();
        $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);

        if ($advance == '0') {
            $log_params = ['reserve_limit' => 'NO'];
        } else {
            $log_params = ['reserve_limit' => $advance];
        }
        $l->noticeEx('config', 'facility_common', $log_params);

        if ($max_time == '0') {
            $log_params = ['reserve_limit_time' => 'NO'];
        } else {
            $hour = intval($max_time / 60);
            $minute = $max_time % 60;
            $log_params = ['reserve_limit_time' => $hour . ':' . $minute];
        }
        $l->noticeEx('config', 'facility_common', $log_params);

        $log_params = ['modify_user' => $modify_user];
        $l->noticeEx('config', 'facility_common', $log_params);

        $log_params = [
            'show_facility_memo' => $show_memo == '1' ? 'ON' : 'OFF'
        ];
        $l->noticeEx('config', 'facility_common', $log_params);

        $log_params = [
            'use_facility_repeat' => $regularly == '1' ? 'ON' : 'OFF'
        ];
        $l->noticeEx('config', 'facility_common', $log_params);

        $log_params = ['facility_approval' => $approval == '1' ? 'ON' : 'OFF'];
        $l->noticeEx('config', 'facility_common', $log_params);

        cb_redirect('schedule/system/facility_select_set');
    } else {
        $t->assign('hour', intval($hour));
        $t->assign('minute', intval($minute));

        $t->assign('advance_select', $advance_select);
        $t->assign('advance', cb_at($G_INPUT, 'advance'));
        $t->assign('max_time', $max_time);
        $t->assign('modify_user', $modify_user);
        $t->assign('show_memo', $show_memo);
        $t->assign('regularly', $regularly);
        $t->assign('approval', $approval);

        //------------------
        $t->setPageInfo($target_name);
        // page title
        $page_title = grn_get_page_display_name($target_name);
        $t->assign('page_title', $page_title);

        // site position
        require_once('grn/controller.csp');
        $controller_util = new GRN_ControllerUtil();
        $page_info = [
            'facility_select_set' => [],
            'facility_common_set' => null
        ];
        $site_position
            = $controller_util->makeSitePosition('schedule/system/',
            $page_info);
        $t->assign('site_position', $site_position);

        $t->display($target_name . '.tpl');
    }
}
