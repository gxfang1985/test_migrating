<?php

// instantiate an Smarty object
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$fagid = cb_at($G_INPUT, 'fagid');
$faid = cb_at($G_INPUT, 'faid');

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

/**
 * @var GRN_Facility_Facility      $facility
 * @var GRN_Facility_FacilityGroup $facility_group
 */
if ($fagid == -1 || $fagid == -2 || strlen($faid) > 0) {
    $facility = $facility_logic->getFacility($faid);
    if ($facility === false) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
    }

    $group_relation = $facility_logic->getFacilityGroupRelation([$faid]);
    if (array_key_exists($faid, $group_relation)
        && ! is_null($group_relation[$faid])
    ) {
        $t->assign('belong_group', true);
        $facility_group
            = $facility_logic->getFacilityGroup($group_relation[$faid]);
        if ($facility_group === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
        }
    }

    $facility_name = $facility->get('name');
    $setting = $facility->get('settings');
    $unserialize_settings = [];
    if (strlen($setting) > 0) {
        $unserialize_settings = cb_unserialize($setting,
            ['allowed_classes' => false]);
    }
    if (is_array($unserialize_settings) && count($unserialize_settings) > 0) {
        $advance = array_key_exists('advance', $unserialize_settings)
            ? $unserialize_settings['advance'] : '0';
        $max_time = array_key_exists('maxtime', $unserialize_settings)
            ? $unserialize_settings['maxtime'] : '0';
        $modify_user = array_key_exists('modifyuser',
            $unserialize_settings) ? $unserialize_settings['modifyuser']
            : 'grantuser';
        $show_memo = array_key_exists('showmemo', $unserialize_settings)
            ? $unserialize_settings['showmemo'] : '0';
        $regularly = array_key_exists('regulary', $unserialize_settings)
            ? $unserialize_settings['regulary'] : '1';
        $approval = array_key_exists('approval', $unserialize_settings)
            ? $unserialize_settings['approval'] : '0';
        $apply_from_parent = array_key_exists('apply_from_parent',
            $unserialize_settings) ? $unserialize_settings['apply_from_parent']
            : '0';
    } else {
        $advance = $facility_logic->getFacilityAdvance();
        $max_time = $facility_logic->getFacilityMaxTime();
        $modify_user = $facility_logic->getFacilityModifyUser();
        $show_memo = $facility_logic->getFacilityShowMemo();
        $regularly = $facility_logic->getFacilityRepeat();
        $approval = $facility_logic->getFacilityApproval();
        $apply_from_parent = $facility_logic->getFacilityInheritParent();
    }
    $t->assign('is_group', false);
    $t->assign('facility_name', $facility_name);
} else {
    $facility_group = $facility_logic->getFacilityGroup($fagid);
    if ($facility_group === false) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
    }
    $group_name = $facility_group->get('name');
    $setting = $facility_group->get('settings');
    $unserialize_settings = [];
    if (strlen($setting) > 0) {
        $unserialize_settings = cb_unserialize($setting,
            ['allowed_classes' => false]);
    }
    if (is_array($unserialize_settings) && count($unserialize_settings) > 0) {
        $advance = array_key_exists('advance', $unserialize_settings)
            ? $unserialize_settings['advance'] : '0';
        $max_time = array_key_exists('maxtime', $unserialize_settings)
            ? $unserialize_settings['maxtime'] : '0';
        $modify_user = array_key_exists('modifyuser',
            $unserialize_settings) ? $unserialize_settings['modifyuser']
            : 'grantuser';
        $show_memo = array_key_exists('showmemo', $unserialize_settings)
            ? $unserialize_settings['showmemo'] : '0';
        $regularly = array_key_exists('regulary', $unserialize_settings)
            ? $unserialize_settings['regulary'] : '1';
        $approval = array_key_exists('approval', $unserialize_settings)
            ? $unserialize_settings['approval'] : '0';
        $apply_from_parent = array_key_exists('apply_from_parent',
            $unserialize_settings) ? $unserialize_settings['apply_from_parent']
            : '0';
    } else {
        $advance = $facility_logic->getFacilityAdvance();
        $max_time = $facility_logic->getFacilityMaxTime();
        $modify_user = $facility_logic->getFacilityModifyUser();
        $show_memo = $facility_logic->getFacilityShowMemo();
        $regularly = $facility_logic->getFacilityRepeat();
        $approval = $facility_logic->getFacilityApproval();
        $apply_from_parent = $facility_logic->getFacilityInheritParent();
    }
    $t->assign('is_group', true);
    $t->assign('group_name', $group_name);
}

$privileges_count = 0;
if (isset($facility_group)) {
    $facility_group_id = $facility_group->getOID();
    $ancestors
        = $facility_logic->getAncestors([$facility_group_id => $facility_group_id]);

    require_once('schedule/facility_privilege.csp');
    $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
    foreach ($ancestors[$facility_group_id] as $ancestor_id) {
        $ancestor_group = $facility_logic->getFacilityGroup($ancestor_id);
        $count = $privilege_logic->getPrivilegesCount($ancestor_group);
        if ($count) {
            $privileges_count += $count;
        }
    }
} else {
    $facility_group_id = null;
}
$t->assign('privileges_count', $privileges_count);
$t->assign('facility_group_id', $facility_group_id);

$t->assign('apply_from_parent', $apply_from_parent);
$t->assign('advance', $advance);
$t->assign('advance_select', $advance > 0 ? true : false);

$hour = intval($max_time / 60);
$minute = $max_time % 60;
$t->assign('hour', $hour);
$t->assign('minute', $minute);

$t->assign('max_time', $max_time);
$t->assign('modify_user', $modify_user);
$t->assign('show_memo', $show_memo);
$t->assign('regularly', $regularly);
$t->assign('approval', $approval);
$t->assign('faid', $faid);
$t->assign('fagid', $fagid);

// force to register
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('schedule/system/facility_facility_set', true);

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();
$page_info = [
    'facility_select_set'   => ['fagid' => $fagid, 'faid' => $faid],
    'facility_facility_set' => null
];
$site_position = $controller_util->makeSitePosition('schedule/system/',
    $page_info);
$t->assign('site_position', $site_position);

// Smarty実行
$t->display(cb_get_pagename() . '.tpl');
