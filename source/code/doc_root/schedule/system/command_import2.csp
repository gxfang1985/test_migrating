<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    /*
        // instantiate an Smarty object
        require_once( "grn/smarty.csp" );
        $t = new GRN_Smarty;

        // Validation check
        require_once('SmartyValidate.class.php');
        SmartyValidate::connect($t);

        // validate after a POST
        if(SmartyValidate::is_valid($G_INPUT)) {
            // the validation session is finished
            SmartyValidate::disconnect();
    */
    // --------
    // brabrabra after success
    // --------
    require_once('schedule/error_code.csp');

    $file_id = @ $G_INPUT['file_id'];
    // セッションに関連付けてあったファイルを取得する。
    $session_manager = CB_SessionManager::getInstance();
    $session =& $session_manager->getSession('schedule/system/import1');
    $file_infos = $session->getFiles('schedule_files');
    $import_option = $session->get('import_option');

    // ファイルがない
    if ( ! is_array($file_infos)) {
        cb_throw_error(E_GRN_SCHD_NOT_FOUND_CSV_FILE);
    }

    if ( ! array_key_exists($file_id, $file_infos)) {
        cb_throw_error(E_GRN_SCHD_NOT_FOUND_CSV_FILE);
    }

    $csv_columns = [
        'setdate',    // 開始日
        'settime',    // 開始時刻
        'enddate',    // 終了日
        'endtime',    // 終了時刻
        'menu',       // 予定
        'detail',     // 予定詳細
        'memo',       // メモ
        'member'      // 参加者
    ];
    $csv_columns_num = count($csv_columns);

    $charset = @ $import_option['charset'];
    if ( ! $charset) {
        global $G_config_common;
        $charset = $G_config_common->get('I18N', 'default_external_encoding');
    }

    // スケジュールのインクルード
    require_once('schedule/application.csp');
    $logic = GRN_Schedule_Application::getInstance();

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l =& $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
    $log_params = [];
    $l->noticeEx('import', 'system_event', $log_params);

    // エラーフックの登録
    require_once('fw/csv.csp');
    $csv = new CB_CSVReader($charset, $file_infos[$file_id]->getPath());
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login = &$uum->getLoginUser();
    if ( ! $login) {
        $login = null;
    }

    $exist_facility = [];
    $skip_lines = (int)@$import_option['skip'];
    require_once('schedule/normal_event_logic.csp');
    while (($line = $csv->readLine()) !== false) {
        if ($skip_lines > 0) {
            $skip_lines--;
            continue;
        }

        if (count($line) < $csv_columns_num) {
            cb_throw_error(E_GRN_SCHD_CSV_INVALID_COLUMNS);
        }

        $event = new GRN_Schedule_NormalEvent();

        $setdate = new CB_Date();

        $str_date = $line[0];
        $str_date = mb_ereg_replace('/', '-', $str_date);
        // 開始日のチェック
        if ( ! $setdate->parse($str_date)
             || ! cb_date_validate_date($setdate)
        ) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETDATE);
        }

        $settime = new CB_Time();

        $str_time = array_key_exists('1', $line) ? $line[1] : '';
        if (strlen($str_time) === 0) {
            $event->setdatetime =& $setdate;
        } elseif ( ! $settime->parse($str_time)) {
            cb_throw_error(E_GRN_SCHD_INVALID_SETTIME);
        } else {
            if ( ! cb_date_validate_time($settime)) {
                cb_throw_error(E_GRN_SCHD_INVALID_SETTIME);
            }

            $event->setdatetime = new CB_DateTime();
            $event->setdatetime->year = $setdate->year;
            $event->setdatetime->month = $setdate->month;
            $event->setdatetime->day = $setdate->day;
            $event->setdatetime->hour = $settime->hour;
            $event->setdatetime->minute = $settime->minute;
            $event->setdatetime->second = $settime->second;
        }

        $enddate = new CB_Date();

        $str_date = $line[2];
        $str_date = mb_ereg_replace('/', '-', $str_date);
        // 終了日
        if ( ! $enddate->parse($str_date)
             || ! cb_date_validate_date($enddate)
        ) {
            cb_throw_error(E_GRN_SCHD_INVALID_ENDDATE);
        }

        // 終了時刻
        $endtime = new CB_Time();
        if (strlen($line[3]) === 0) {
            $event->enddatetime =& $enddate;
        } elseif ( ! $endtime->parse($line[3])) {
            cb_throw_error(E_GRN_SCHD_INVALID_ENDTIME);
        } else {
            if ( ! cb_date_validate_time($endtime)) {
                cb_throw_error(E_GRN_SCHD_INVALID_ENDTIME);
            }

            $event->enddatetime = new CB_DateTime();
            $event->enddatetime->year = $enddate->year;
            $event->enddatetime->month = $enddate->month;
            $event->enddatetime->day = $enddate->day;
            $event->enddatetime->hour = $endtime->hour;
            $event->enddatetime->minute = $endtime->minute;
            $event->enddatetime->second = $endtime->second;
        }


        if (is_a($event->setdatetime, 'CB_DateTime')
            && is_a($event->enddatetime, 'CB_Date')
        ) {
            $event->enddatetime = null;
        }
        // 内容
        $event->menu = $line[4];
        $event->detail = $line[5];
        $event->memo = $line[6];
        $event->private = 0;

        $facility_approval = false;
        // 参加者
        if (($user = $uum->getUserByForeignKey($line[7]))) {
            $event->users = [1 => $user];
        } elseif (($group = &$uum->getGroupByForeignKey($line[7]))) {
            $event->groups = [1 => & $group];
        } elseif (($facility
            = &$facility_logic->getFacilityByForeignKey($line[7]))
        ) {
            // facilty approval
            $scheduleFacilityApprovalSetting
                = new grn\schedule\ScheduleFacilityApprovalSetting();
            $facility_approval
                = $scheduleFacilityApprovalSetting->isRequiredApproval($facility->getOID());

            $event->facilities = [1 => & $facility];
            foreach ($exist_facility as $value) {
                if ($value["faid"] == $facility->getOID()) {
                    if ( ! is_a($event->setdatetime, 'CB_DateTime')
                         || ! is_a($event->enddatetime, 'CB_DateTime')
                    ) {
                        cb_throw_error(E_GRN_FCLT_INVALID_DATETIME);
                    }

                    $tempdatetime = new CB_DateTimeEx($event->setdatetime);
                    $tempdatetime2 = new CB_DateTimeEx($event->enddatetime);
                    if (($tempdatetime->compare($value["event_setdatetime"])
                         >= 0
                         && $tempdatetime->compare($value["event_enddatetime"])
                            < 0)
                        || ($tempdatetime->compare($value["event_setdatetime"])
                            < 0
                            && $tempdatetime2->compare($value["event_setdatetime"])
                               > 0)
                    ) {
                        cb_throw_error(E_GRN_FCLT_CONFLICT_DATETIME,
                            ['facility' => $facility->get('name')], null,
                            ['facility' => $facility->get('name')]);
                    }
                }
            }
            $exist_facility[] = [
                "faid"              => $facility->getOID()
                ,
                "event_setdatetime" => $event->setdatetime
                ,
                "event_enddatetime" => $event->enddatetime
            ];
        } else {
            cb_throw_error(E_GRN_SCHD_INVALID_ATTENDEES_ORGANIZATION_FACILITIES);
        }

        if ((isset($line[8]))
            && ($creator
                = $uum->getUserByForeignKey($line[8]))
        ) {
            $event->creator = $creator;
        } else {
            $event->creator = $login;
        }
        // データのチェック
        $logic->checkEventData($event);
        // データの登録
        $eid = $logic->entryEvent($event);

        //facility using purpose
        if ($facility_approval && $eid) {
            $facility_approval_logic = new grn\schedule\FacilityApprovalLogic();
            $facility_approval_logic->setFacilityUsingPurpose($eid, "");
        }
        // カスタマイズ項目
        if (is_a($event->facilities[1], 'GRN_Facility_facility')) {
            $line_no = 9;
            // カスタマイズ項目取得
            $items = $facility_logic->listItems();
            foreach (array_keys($items) as $item_id) {
                $item =& $items[$item_id];
                if ($item['use']) {
                    if (isset($line[$line_no])) {
                        $item['value'] = $line[$line_no++];
                    } else {
                        $item['value'] = '';
                    }
                }
            }
            $facility_logic->registerCsvData($eid, $items);
        }
    }

    $session->unset_by('import_option');
    $session->unsetFile('schedule_files', $file_id);

    cb_redirect('schedule/system/import_index');
    /*
        } else {
            // if error, show the source form

            //Assign Template Name
            $t->setPageInfo($target_name);

            cb_redirect( 'schedule/system/import2' );
        }
    */
}
