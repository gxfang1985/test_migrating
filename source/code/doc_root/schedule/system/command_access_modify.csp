<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    require_once('_access_util.csp');

    //--access object
    $object = grn_get_schedule_access_object($target, $org_id, $user_id,
        $role_id, $facility_id, $fgroup_id);

    $authorities = [
        'read'   => @ $G_INPUT['read'] ? 1 : 0,
        'add'    => @ $G_INPUT['add'] ? 1 : 0,
        'modify' => @ $G_INPUT['modify'] ? 1 : 0,
        'delete' => @ $G_INPUT['delete'] ? 1 : 0,
    ];

    // 閲覧権限がないのにほかの権限にチェックがあるのはエラー
    if ( ! $authorities['read']
         && ($authorities['add'] || $authorities['modify']
             || $authorities['delete'])
    ) {
        cb_throw_error(E_GRN_SCHD_ACCESS_INVALID_ACCESS_TYPE);
    }

    $item_type = @ $G_INPUT['itype'];
    $item_tid = @ $G_INPUT['itid'];

    require_once('schedule/access_logic.csp');
    $sal = GRN_Schedule_Access_Logic::getInstance();

    // DBに入れるために値を変更
    $security_model = $sal->getSecurityModel($object);
    if ($security_model == 'revoke') {
        foreach ($authorities as $key => $item) {
            $authorities[$key] = $item ? 0 : 1;
        }
    }

    if (array_sum($authorities) == 0) {
        // すべて0の場合は、DBから削除
        $sal->deleteAccess($object, $item_type, $item_tid);
    } else {
        $sal->setAccess($object, $item_type, $item_tid, $authorities);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();
    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
    $authorities_type = [];
    if ($security_model == 'grant') {
        foreach ($authorities as $key => $value) {
            if ($value == 1) {
                $authorities_type[] = $key;
            }
        }
        $authorities_type = implode(',', $authorities_type);
    } else {
        foreach ($authorities as $key => $value) {
            if ($value == 0) {
                $authorities_type[] = $key;
            }
        }
        $authorities_type = implode(',', $authorities_type);
    }
    if (is_a($object, 'CB_User')) {
        $object_id_type = 'uid';
        $object_name = $object->get('display_name');
    } elseif (is_a($object, 'CB_Group')) {
        $object_id_type = 'oid';
        $object_name = $object->get('name');
    } elseif (is_a($object, 'CB_Role')) {
        $object_id_type = 'rid';
        $object_name = $object->get('foreign_key');
    } elseif (is_a($object, 'GRN_Facility_Facility')) {
        $object_id_type = 'fid';
        $object_name = $object->get('name');
    } elseif (is_a($object, 'GRN_Facility_FacilityGroup')) {
        $object_id_type = 'fgid';
        $object_name = $object->get('name');
    }
    switch ($item_type) {
        case 'user':
            if (($target = $uum->getUser($item_tid))) {
                // 監査ログ
                $log_params = [
                    $object_id_type  => $object->getOID(),
                    'uid'            => $item_tid,
                    'security_model' => $security_model,
                    'auth'           => $authorities_type
                ];
                $l->noticeEx('modify', 'access', $log_params);
            }
            break;
        case 'group':
            if (($target = $uum->getGroup($item_tid))) {
                // 監査ログ
                $log_params = [
                    $object_id_type  => $object->getOID(),
                    'oid'            => $item_tid,
                    'security_model' => $security_model,
                    'auth'           => $authorities_type
                ];
                $l->noticeEx('modify', 'access', $log_params);
            }
            break;
        case 'static_role':
            if (($target = $uum->getStaticRole($item_tid))) {
                // 監査ログ
                $log_params = [
                    $object_id_type  => $object->getOID(),
                    'rid'            => $item_tid,
                    'security_model' => $security_model,
                    'auth'           => $authorities_type
                ];
                $l->noticeEx('modify', 'access', $log_params);
            }
            break;
        case 'dynamic_role':
            if (array_key_exists($item_tid, $dynamic_roles)) {
                // 監査ログ
                $log_params = [
                    $object_id_type  => $object->getOID(),
                    'rid'            => $item_tid,
                    'security_model' => $security_model,
                    'auth'           => $authorities_type
                ];
                $l->noticeEx('modify', 'access', $log_params);
            }
            break;
    }

    $params = $G_INPUT;
    unset($params['itype']);
    unset($params['itid']);
    cb_redirect('schedule/system/access_list', $params);
}

