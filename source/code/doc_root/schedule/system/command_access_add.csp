<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    unset($G_INPUT['add']);

    require_once('_access_util.csp');

    $aid = null;
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();

    $session_name = 'schedule.system.access_add';
    $session =& $session_manager->getSession($session_name);

    $aid = $session->get('target_ids');
    //$aid = @ $G_INPUT['aid'];
    $func = @ $G_INPUT['func'];
    if ( ! is_array($aid) || $func == 'search') {
        unset($G_INPUT['aid']);
        unset($G_INPUT['func']);
        unset($G_INPUT['authority_read']);
        unset($G_INPUT['authority_add']);
        unset($G_INPUT['authority_modify']);
        unset($G_INPUT['authority_delete']);
        cb_redirect('schedule/system/access_list', $G_INPUT);
    }

    // access object
    $object = grn_get_schedule_access_object($target, $org_id, $user_id,
        $role_id, $facility_id, $fgroup_id);

    require_once('schedule/access_logic.csp');
    $sal = GRN_Schedule_Access_Logic::getInstance();
    $security_model = $sal->getSecurityModel($object);
    $base_authorities = [
        'read'   => @ $G_INPUT['authority_read'] ? 1 : 0,
        'add'    => @ $G_INPUT['authority_add'] ? 1 : 0,
        'modify' => @ $G_INPUT['authority_modify'] ? 1 : 0,
        'delete' => @ $G_INPUT['authority_delete'] ? 1 : 0,
    ];
    if ($security_model == 'grant') {
        $authorities = $base_authorities;
    } else {
        $authorities = [
            'read'   => @ $G_INPUT['authority_read'] ? 0 : 1,
            'add'    => @ $G_INPUT['authority_add'] ? 0 : 1,
            'modify' => @ $G_INPUT['authority_modify'] ? 0 : 1,
            'delete' => @ $G_INPUT['authority_delete'] ? 0 : 1,
        ];
    }

    $authorities_type = [];
    // アクセス権のチェック
    if ($security_model == 'grant') {
        // 登録/変更/削除のいずれかがあっても閲覧がだめな場合
        if ($authorities['add'] == 1 || $authorities['modify'] == 1
            || $authorities['delete'] == 1
        ) {
            if ($authorities['read'] == 0) {
                cb_throw_error(E_GRN_SCHD_ACCESS_INVALID_ACCESS_TYPE);
            }
        }
        foreach ($authorities as $key => $value) {
            if ($value == 1) {
                $authorities_type[] = $key;
            }
        }
        $authorities_type = implode(',', $authorities_type);
    } else {
        // 登録/変更/削除のいずれかがあっても閲覧がだめな場合
        if ($authorities['add'] == 0 || $authorities['modify'] == 0
            || $authorities['delete'] == 0
        ) {
            if ($authorities['read'] == 1) {
                cb_throw_error(E_GRN_SCHD_ACCESS_INVALID_ACCESS_TYPE);
            }
        }

        foreach ($authorities as $key => $value) {
            if ($value == 0) {
                $authorities_type[] = $key;
            }
        }
        $authorities_type = implode(',', $authorities_type);
    }

    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session
        = $session_manager->getSession('schedule.system.access_list');
    $session->set('authorities', $base_authorities);

    $b_delete = false;
    if (count($authorities) === 4 && array_sum($authorities) === 0) {
        $b_delete = true;
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
    if (is_a($object, 'CB_User')) {
        $object_id_type = 'uid';
        $object_name = $object->get('display_name');
    } elseif (is_a($object, 'CB_Group')) {
        $object_id_type = 'oid';
        $object_name = $object->get('name');
    } elseif (is_a($object, 'CB_Role')) {
        $object_id_type = 'rid';
        $object_name = $object->get('foreign_key');
    } elseif (is_a($object, 'GRN_Facility_Facility')) {
        $object_id_type = 'fid';
        $object_name = $object->get('name');
    } elseif (is_a($object, 'GRN_Facility_FacilityGroup')) {
        $object_id_type = 'fgid';
        $object_name = $object->get('name');
    }

    foreach (array_keys($aid) as $item) {
        $ids = explode(':', $item);
        if (count($ids) < 2) {
            continue;
        }
        $id = $ids[1];
        switch ($ids[0]) {
            case 'user':
                if (($target = &$uum->getUser($id))) {
                    if ($b_delete) {
                        $sal->deleteAccess($object, GRN_SCHD_TARGET_TYPE_USER,
                            $id);
                    } else {
                        $sal->setAccess($object, GRN_SCHD_TARGET_TYPE_USER, $id,
                            $authorities);
                    }
                    // 監査ログ
                    $log_params = [
                        $object_id_type  => $object->getOID(),
                        'uid'            => $id,
                        'security_model' => $security_model,
                        'auth'           => $authorities_type
                    ];
                    $l->noticeEx('create', 'access', $log_params);
                }
                break;

            case 'group':
                if (($target = &$uum->getGroup($id))) {
                    if ($b_delete) {
                        $sal->deleteAccess($object, GRN_SCHD_TARGET_TYPE_GROUP,
                            $id);
                    } else {
                        $sal->setAccess($object, GRN_SCHD_TARGET_TYPE_GROUP,
                            $id, $authorities);
                    }
                    // 監査ログ
                    $log_params = [
                        $object_id_type  => $object->getOID(),
                        'oid'            => $id,
                        'security_model' => $security_model,
                        'auth'           => $authorities_type
                    ];
                    $l->noticeEx('create', 'access', $log_params);
                }
                break;

            case 'static_role':
                if (($target =& $uum->getStaticRole($id))) {
                    if ($b_delete) {
                        $sal->deleteAccess($object,
                            GRN_SCHD_TARGET_TYPE_STATIC_ROLE, $id);
                    } else {
                        $sal->setAccess($object,
                            GRN_SCHD_TARGET_TYPE_STATIC_ROLE, $id,
                            $authorities);
                    }
                    // 監査ログ
                    $log_params = [
                        $object_id_type  => $object->getOID(),
                        'rid'            => $id,
                        'security_model' => $security_model,
                        'auth'           => $authorities_type
                    ];
                    $l->noticeEx('create', 'access', $log_params);
                }
                break;

            case 'dynamic_role':
                if (array_key_exists($id, $dynamic_roles)) {
                    if ($b_delete) {
                        $sal->deleteAccess($object,
                            GRN_SCHD_TARGET_TYPE_DYNAMIC_ROLE, $id);
                    } else {
                        $sal->setAccess($object,
                            GRN_SCHD_TARGET_TYPE_DYNAMIC_ROLE, $id,
                            $authorities);
                    }
                    // 監査ログ
                    $log_params = [
                        $object_id_type  => $object->getOID(),
                        'rid'            => $id,
                        'security_model' => $security_model,
                        'auth'           => $authorities_type
                    ];
                    $l->noticeEx('create', 'access', $log_params);
                }
                break;
        }
    }

    $params = $G_INPUT;
    unset($params['aid']);
    unset($params['func']);
    unset($params['authority_read']);
    unset($params['authority_add']);
    unset($params['authority_modify']);
    unset($params['authority_delete']);
    cb_redirect('schedule/system/access_list', $params);
}


