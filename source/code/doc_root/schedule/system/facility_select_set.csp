<?php
// instantiate an Smarty object
require_once('grn/smarty.csp');
$t = new GRN_Smarty;
// for site position
$t->assign('app_id', 'schedule');
$fgroup_id = cb_at($G_INPUT, 'fagid');   // facility group id

require_once('grn/org_tree.csp');
$page_name = cb_get_pagename();
$orgTreeUtil = GRN_OrgTreeUtil::getInstance();
$tree = $orgTreeUtil->getTree($page_name, 'GRN_FacilityTree');
if (is_null($fgroup_id)) {
    $tree->initialize();
    $fgroup_id = null;
}
if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
    $tree->initialize();
    $fgroup_id = null;
}

$tree->setSelectedNode($fgroup_id);
$orgTreeUtil->setTree($page_name, $tree);
$tree_org = $tree->getRoot();

$t->assign('tree_org', $tree_org);
$t->assign('page_name', $page_name);
$t->assign('async_page', 'schedule/system/json/facility_tree');
$t->assign('link_page', 'schedule/system/facility_select_set');

$info = [];

require_once('schedule/facility_system_logic.csp');
$fsl = GRN_Facility_SystemLogic::getInstance();

$facility_group = $fsl->getFacilityGroup($fgroup_id);

if ($fgroup_id && $facility_group === false && $fgroup_id != -1
    && $fgroup_id != -2
) {
    cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
}

require_once('grn/ui.csp');
$ucm = GRN_UIConfigManager::getInstance();
$login = cb_get_login_user();
$uc = $ucm->getUserConfig($login);
$number_on_page = $uc->getListMax();

require_once('grn/controller.csp');
$controllerUtil = new GRN_ControllerUtil();
$navi_start_position = $controllerUtil->getNaviStartPosition();
$controllerUtil->setNaviStartPosition($navi_start_position);

if ($fgroup_id > 0) {
    // Facility group

    $settings
        = _schedule_system_facility_select_set_getSettings($facility_group->get('settings'));

    $info['facility_group'] = array_merge(
        [
            'fagid' => $fgroup_id,
            'name'  => $facility_group->get('name'),
        ],
        $settings
    );

    $facility_count = $fsl->getFacilitiesCount($fgroup_id);
    $navi_params = ['fagid' => $fgroup_id];
    $info['navi_info'] = $controllerUtil->makeNaviInformation(
        $navi_start_position, $number_on_page, $facility_count, $navi_params
    );

    $facility_rows = $fsl->getGroupFacilities($fgroup_id, $navi_start_position,
        $number_on_page);
} elseif ($fgroup_id == -1) {
    // Uncategorized facilities

    $facility_count = $fsl->getFacilitiescount($fgroup_id);
    $navi_params = ['fagid' => $fgroup_id];
    $info['navi_info'] = $controllerUtil->makeNaviInformation(
        $navi_start_position, $number_on_page, $facility_count, $navi_params
    );

    $facility_rows = $fsl->getIsolatedFacilities($navi_start_position,
        $number_on_page);
} elseif ($fgroup_id == -2) {
    // All facilities

    $navi_start_position = $controllerUtil->getNaviStartPosition();
    $controllerUtil->setNaviStartPosition($navi_start_position);
    $facility_count = $fsl->getFacilityTotalCount();
    $navi_params = ['fagid' => $fgroup_id];
    $info['navi_info'] = $controllerUtil->makeNaviInformation(
        $navi_start_position, $number_on_page, $facility_count, $navi_params
    );

    $facility_rows = $fsl->getGroupFacilities(null, $navi_start_position,
        $number_on_page);
} else {
    // Top

    /** @var GRN_Facility_Facility[] $facility_rows */
    $facility_rows = [];
}

foreach ($facility_rows as $id => $facility) {
    $settings
        = _schedule_system_facility_select_set_getSettings($facility->get('settings'));

    $info['facility_list'][$id] = array_merge(
        [
            'faid' => $id,
            'name' => $facility->get('name'),
        ],
        $settings
    );
}

require_once('schedule/system_logic.csp');
$system_logic = GRN_Schedule_SystemLogic::getInstance();
$t->assign('allow_all_facilities', $system_logic->getAllowAllFacilities());

$t->assign('fgroup_id', $fgroup_id);
$t->assign('info', $info);
if (cb_at($G_INPUT, 'top') || ! cb_at($G_INPUT, 'fagid')) {
    $t->assign('top', 1);
}

$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

$t->assign('site_position', [['page' => '', 'name' => $page_title]]);

$t->display(cb_get_pagename() . '.tpl');

/**
 * @param string|null $raw_settings
 *
 * @return array
 */
function _schedule_system_facility_select_set_getSettings($raw_settings)
{
    require_once('schedule/facility_system_logic.csp');
    $fsl = GRN_Facility_SystemLogic::getInstance();
    $settings = $fsl->getFacilitySettingLogic()->getSettings($raw_settings);

    return _schedule_system_facility_select_set_convertSettingsForView($settings);
}

/**
 * @param array $settings
 *
 * @return array
 */
function _schedule_system_facility_select_set_convertSettingsForView(
    array $settings
) {
    return [
        'advance'     => $settings['advance'],
        'max_time'    => $settings['maxtime'],
        'modify_user' => $settings['modifyuser'],
        'show_memo'   => $settings['showmemo'],
        'regularly'   => $settings['regulary'],
        'approval'    => $settings['approval'],
    ];
}
