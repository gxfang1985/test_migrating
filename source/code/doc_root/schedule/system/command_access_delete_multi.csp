<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    $eid = array_key_exists('eid', $G_INPUT) ? $G_INPUT['eid'] : null;
    if ( ! is_array($eid)) {
        cb_redirect('schedule/system/access_list', $G_INPUT);
    }

    require_once '_access_util.csp';

    // access object
    $object = grn_get_schedule_access_object($target, $org_id, $user_id,
        $role_id, $facility_id, $fgroup_id);

    // access information
    require_once('schedule/access_logic.csp');
    $sal = GRN_Schedule_Access_Logic::getInstance();

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    // 監査ログ
    require_once('grn/logger.csp');
    $lm = CB_LoggerManager::getInstance();
    $l = $lm->getLogger(GRN_SCHEDULE_MODULE_ID);
    if (is_a($object, 'CB_User')) {
        $object_id_type = 'uid';
        $object_name = $object->get('display_name');
    } elseif (is_a($object, 'CB_Group')) {
        $object_id_type = 'oid';
        $object_name = $object->get('name');
    } elseif (is_a($object, 'CB_Role')) {
        $object_id_type = 'rid';
        $object_name = $object->get('foreign_key');
    } elseif (is_a($object, 'GRN_Facility_Facility')) {
        $object_id_type = 'fid';
        $object_name = $object->get('name');
    } elseif (is_a($object, 'GRN_Facility_FacilityGroup')) {
        $object_id_type = 'fgid';
        $object_name = $object->get('name');
    }

    foreach ($eid as $item) {
        $ids = explode(':', $item);
        if (count($ids) < 2) {
            continue;
        }

        $id = $ids[1];
        switch ($ids[0]) {
            case 'user':
                if (($target = $uum->getUser($id))) {
                    $sal->deleteAccess($object, GRN_SCHD_TARGET_TYPE_USER, $id);
                    // 監査ログ
                    $log_params = [
                        $object_id_type => $object->getOID(),
                        'uid'           => $id
                    ];
                    $l->noticeEx('delete', 'access', $log_params);
                }
                break;

            case 'group':
                if (($target = $uum->getGroup($id))) {
                    $sal->deleteAccess($object, GRN_SCHD_TARGET_TYPE_GROUP,
                        $id);
                    // 監査ログ
                    $log_params = [
                        $object_id_type => $object->getOID(),
                        'oid'           => $id
                    ];
                    $l->noticeEx('delete', 'access', $log_params);
                }
                break;

            case 'static_role':
                if (($target = $uum->getStaticRole($id))) {
                    $sal->deleteAccess($object,
                        GRN_SCHD_TARGET_TYPE_STATIC_ROLE, $id);
                    // 監査ログ
                    $log_params = [
                        $object_id_type => $object->getOID(),
                        'rid'           => $id
                    ];
                    $l->noticeEx('delete', 'access', $log_params);
                }
                break;

            case 'dynamic_role':
                if (array_key_exists($id, $dynamic_roles)) {
                    $sal->deleteAccess($object,
                        GRN_SCHD_TARGET_TYPE_DYNAMIC_ROLE, $id);
                    // 監査ログ
                    $log_params = [
                        $object_id_type => $object->getOID(),
                        'rid'           => $id
                    ];
                    $l->noticeEx('delete', 'access', $log_params);
                }
                break;
        }
    }

    $params = $G_INPUT;
    unset($params['eid']);
    cb_redirect('schedule/system/access_list', $params);
}

