<?php

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\schedule\FacilityApprovalLogic;

require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();
if ($util->getUsingDragDropSchedule($login)) {
    // get parameters
    //event
    $event_id = null;
    if (array_key_exists('event_id', $G_INPUT) && $G_INPUT['event_id']) {
        $event_id = $G_INPUT['event_id'];
    }
    $t->assign("event_id", $event_id);

    //uid
    $uid = null;
    if (array_key_exists('uid', $G_INPUT) && $G_INPUT['uid']) {
        $uid = $G_INPUT['uid'];
    }
    $t->assign("uid", $uid);

    //gid
    $gid = null;
    if (array_key_exists('gid', $G_INPUT) && $G_INPUT['gid']) {
        $gid = $G_INPUT['gid'];
    }
    $t->assign("gid", $gid);

    //referer key
    $referer_key = null;
    if (array_key_exists('referer_key', $G_INPUT) && $G_INPUT['referer_key']) {
        $referer_key = $G_INPUT['referer_key'];
    }
    $t->assign("referer_key", $referer_key);

    //facility id
    $facility_id = null;
    if (array_key_exists('facility_id', $G_INPUT) && $G_INPUT['facility_id']) {
        $facility_id = $G_INPUT['facility_id'];
    }
    $t->assign("facility_id", $facility_id);

    //bdate
    $str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : '';
    $date = new CB_Date();
    if ( ! $date->parse($str_date)) {
        $date = null;
    }
    $t->assign("bdate", $str_date);

    //new start date
    $start_date = null;
    if (array_key_exists('start_date', $G_INPUT)) {
        $start_date = $G_INPUT['start_date'];
    }
    $t->assign("start_date", $start_date);

    $sdate = new CB_Date();
    if ( ! $sdate->parse($start_date)) {
        $sdate = null;
    }

    //new end date
    $end_date = null;
    if (array_key_exists('end_date', $G_INPUT)) {
        $end_date = $G_INPUT['end_date'];
    }
    $t->assign("end_date", $end_date);

    $edate = new CB_Date();
    if ( ! $edate->parse($end_date)) {
        $edate = null;
    }
    //timezone
    $timezone = null;
    if (array_key_exists('timezone', $G_INPUT) && $G_INPUT['timezone']) {
        $timezone = $G_INPUT['timezone'];
    }
    $t->assign("timezone", $timezone);

    //start hour
    $start_hour = null;
    if (array_key_exists('start_hour', $G_INPUT)) {
        $start_hour = $G_INPUT['start_hour'];
    }
    $t->assign("start_hour", $start_hour);

    //start minute
    $start_minute = null;
    if (array_key_exists('start_minute', $G_INPUT)) {
        $start_minute = $G_INPUT['start_minute'];
    }
    $t->assign("start_minute", $start_minute);

    //end hour
    $end_hour = null;
    if (array_key_exists('end_hour', $G_INPUT)) {
        $end_hour = $G_INPUT['end_hour'];
    }

    // end minute
    $end_minute = null;
    if (array_key_exists('end_minute', $G_INPUT)) {
        $end_minute = $G_INPUT['end_minute'];
    }

    //is personal
    $is_personal = false;
    if (array_key_exists('is_personal', $G_INPUT)) {
        $is_personal = true;
    }
    $t->assign("is_personal", $is_personal);

    //check existing event
    $deny_access = false;
    require_once('schedule/application.csp');
    $app = GRN_Schedule_Application::getInstance();
    $event = $app->getEvent($login, $event_id, $date);
    if ( ! $event) {
        $deny_access = true;
    } else {
        if (
            $event->enddatetime
            && $event->setdatetime
            && $event->enddatetime->getDate()
                                  ->compare($event->setdatetime->getDate()) != 0
            && $event->enddatetime->hour == 0
            && $event->enddatetime->minute == 0
            && $end_hour == 23
            && $end_minute == 59
        ) {
            // process end-date move +1
            $end_date_tmp = new CB_DateEx($edate);
            $end_date_tmp->moveDays(1);
            $t->assign("end_date", $end_date_tmp->format());

            $end_hour = $event->enddatetime->hour;
            $end_minute = $event->enddatetime->minute;
        }

        //check repeat event type
        $type = '';
        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            $type = 'RP';
        }
        $t->assign("type", $type);

        // check edit right on this event of login user which had facilites
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = &$event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            $deny_access = true;
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者と共有メンバーしか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && (
                                 (is_array($event->users)
                                  && ! array_key_exists($login_id,
                                         $event->users))
                                 || is_null($event->users)
                             )
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id !== $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            $deny_access = true;
                        }
                    }
                }
            }
        }

        //check access right on this event of login user
        if ( ! $deny_access) {
            require_once('schedule/access_logic.csp');
            $acc_logic = GRN_Schedule_Access_Logic::getInstance();
            $dynamic_roles = $uum->listGrantedRoles();
            $access = $acc_logic->getEventAccess($login, $event,
                ['read', 'modify'], $dynamic_roles);

            if ($access['read'] == GRN_SCHD_ACCESS_DENY
                || $access['modify'] == GRN_SCHD_ACCESS_DENY
            ) {
                $deny_access = true;
            }
        }

        if ( ! $deny_access) {
            $setdatetime = $event->setdatetime;
            $setdatetime->hour = $start_hour;
            $setdatetime->minute = $start_minute;
            $setdatetime->setDate($sdate);

            $enddatetime = $event->enddatetime;
            if ($edate && $enddatetime) {
                $enddatetime->hour = $end_hour;
                $enddatetime->minute = $end_minute;
                $enddatetime->setDate($edate);
            } else {
                $enddatetime = $setdatetime;
            }

            //check facilites
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();

            require_once('schedule/facility_privilege.csp');
            $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();

            //check conflict facilities
            $facilities = $event->facilities;
            if (count($facilities) > 0) {
                $event_logic = $app->_getEventBaseLogic();
                $conflict_fids = '';
                $f_conflict = [];
                if ($type == 'RP'
                    && $str_date !== $start_date
                ) //using "$str_date !== $start_date" for case of expand/reduce time.
                {
                    $event_id = time();
                }

                foreach (array_keys($facilities) as $key) {
                    if ($event_logic->_checkConflictMemberEvent($facilities[$key],
                        $setdatetime, $enddatetime, $event_id)
                    ) {
                        $f_conflict[] = $facilities[$key]->getOID();
                        $conflict_fids .= $facilities[$key]->getOID() . ',';
                    }
                }

                //conflict facilities
                $f_conflict_count = count($f_conflict);
                if ($f_conflict_count > 0) {
                    $fg_conflict
                        = $facility_logic->getFacilityGroupRelation($f_conflict);

                    $fg = [];
                    foreach ($fg_conflict as $f => $g) {
                        if ($g == null) {
                            $g = "-1";
                            $fg_conflict[$f] = $g;
                        }
                        $fg[] = $g;
                    }

                    $fg = array_unique($fg);

                    $fg_info = [];
                    foreach ($fg as $fg_key) {
                        $fg_tmp = $facility_logic->getGroupFacilities($fg_key);
                        foreach ($fg_tmp as $fg_tmp_key => $fg_tmp_data) {
                            if (array_search($fg_tmp_key, $f_conflict) === false
                                && array_search($fg_tmp_key,
                                    array_keys($facilities)) === false
                            ) {
                                if ( ! $event_logic->_checkConflictMemberEvent($fg_tmp[$fg_tmp_key],
                                    $setdatetime, $enddatetime, $event_id)
                                ) {
                                    $facilities_tmp
                                        = [$fg_tmp_key => $facility_logic->getFacilityInfo($fg_tmp_key)];
                                    $facilities_tmp
                                        = $acc_logic->evaluateAccessesById($login,
                                        $facilities_tmp, ['modify'],
                                        $dynamic_roles, 'facility');
                                    if (count($facilities_tmp) > 0) {
                                        $fg_info[$fg_key][] = $fg_tmp_key;
                                    }
                                }
                            }
                        }
                    }

                    //assign info
                    $fg_final = [];

                    foreach ($fg as $gid) {
                        if ($gid == -1) {
                            $gdata = [];
                            $gdata["col_name"] = cb_msg('grn.schedule',
                                'unbelonging_facility');
                        } else {
                            $gdata
                                = $facility_logic->getFacilityGroupInfo($gid);
                        }

                        $fg_final[$gid] = [
                            "group_id"   => $gid,
                            "group_name" => $gdata["col_name"],
                            "conflict"   => [],
                            "alter"      => []
                        ];

                        foreach ($fg_conflict as $f => $g) {
                            if ($g == $gid) {
                                $f_info = $facility_logic->getFacilityInfo($f);
                                $fg_final[$gid]["conflict"][$f]
                                    = [
                                    "facility_id"   => $f,
                                    "facility_name" => $f_info["col_name"]
                                ];
                            }
                        }

                        if (array_key_exists($gid, $fg_info)) {

                            $checkRepeatAndApproval
                                = $facility_logic->getSettingsOfFacilities($fg_info[$gid],
                                ['approval', 'regulary']);
                            if ($type == 'RP') {
                                require_once('schedule/facility_privilege.csp');
                                $priv
                                    = GRN_Facility_Privilege_Logic::getInstance();

                                require_once('schedule/netmeeting_system_logic.csp');
                                $netmeeting_system_logic
                                    = GRN_Netmeeting_SystemLogic::getInstance();
                                $netmeeting_system_available
                                    = $netmeeting_system_logic->getNetmeetingAvailable();

                                foreach ($fg_info[$gid] as $f) {
                                    if (($checkRepeatAndApproval[$f]['regulary']
                                         || $priv->hasPrivilegeOfFacility($login,
                                                $facility_logic->getFacility($f)))
                                        && ! $checkRepeatAndApproval[$f]['approval']
                                    ) {
                                        if ($netmeeting_system_available == 1) {
                                            $fa
                                                = $facility_logic->getFacility($f);
                                            if ($fa->get('netmeeting_available')
                                                == 1
                                            ) {
                                                continue;
                                            }
                                        }
                                        $f_info
                                            = $facility_logic->getFacilityInfo($f);
                                        $fg_final[$gid]["alter"][$f]
                                            = [
                                            "facility_id"   => $f,
                                            "facility_name" => $f_info["col_name"],
                                            'approval'      => $checkRepeatAndApproval[$f]['approval']
                                        ];
                                    }
                                }
                            } else {
                                foreach ($fg_info[$gid] as $f) {
                                    $f_info
                                        = $facility_logic->getFacilityInfo($f);
                                    $fg_final[$gid]["alter"][$f]
                                        = [
                                        "facility_id"   => $f,
                                        "facility_name" => $f_info["col_name"],
                                        'approval'      => $checkRepeatAndApproval[$f]['approval']
                                    ];
                                }
                            }
                        }
                    }

                    $facility = true;
                    $t->assign('conflict_fids', $conflict_fids);
                    $t->assign('facility', $facility);
                    $t->assign('fdata', $fg_final);
                } //no conflict facilites
                else {
                    $facility = false;
                    $t->assign('facility', $facility);
                }

                //GTM-1676
                $scheduleFacilityApprovalSetting
                    = new ScheduleFacilityApprovalSetting();
                $hasFacilityNeedApproval
                    = $scheduleFacilityApprovalSetting->hasFacilityNeedApproval(
                    array_keys($event->facilities)
                );
                $t->assign('has_facility_need_approval',
                    $hasFacilityNeedApproval);

                if ($hasFacilityNeedApproval) {
                    $facilityApprovalLogic = new FacilityApprovalLogic();
                    $t->assign('usingPurposeValue',
                        $facilityApprovalLogic->getFacilityUsingPurpose($event->id));
                }
            }

            //GTM-1622
            if ($event->isAttendanceCheckEvent()) {
                $attendanceStatusLogic = new AttendanceStatusLogic();
                $t->assign('use_attendance_check',
                    $attendanceStatusLogic->isEnableAttendanceCheck());
            }
        }
    }

    $t->assign("end_hour", $end_hour);
    $t->assign("end_minute", $end_minute);
    $t->assign("deny_access", $deny_access);
} else {
    $t->assign("deactivateDragDrop", true);
}

$t->display(cb_get_pagename() . ".tpl");
