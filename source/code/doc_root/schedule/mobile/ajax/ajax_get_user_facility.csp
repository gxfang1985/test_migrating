<?php

use grn\schedule\screen\mobile\MobileScheduleScreenBase;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {

    global $G_INPUT;
    $facilities = [];
    $members = [];
    $users_facilities = [];
    if (array_key_exists('p', $G_INPUT) && is_string($G_INPUT['p'])
        && mb_strlen(cb_trim($G_INPUT['p'])) > 0
    ) {
        require_once('grn/uum_util_search.csp');
        $uum_util = \GRN_UumUtil_Search::getInstance();
        $search_text = cb_trim($G_INPUT['p']);
        $rows_candidate = 20;
        //Has evaluation access right
        $members = $uum_util->scheduleIncrementalSearchUsersInfo($search_text,
            $rows_candidate);

        $facilities = [];
        $topN_facilities = 0;
        if (count($members) < $rows_candidate) {
            $topN_facilities = $rows_candidate - count($members);
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();

            $facilities
                = $facility_logic->scheduleIncrementalSearchFacilitiesInfo(
                $search_text, CB_DATABASE_NO_LOCK, $topN_facilities
            );
            $count_loop = count($facilities);

            //Access right
            $facilities_id_access = [];
            for ($i = 0; $i < $count_loop; $i++) {
                $facilities_id_access[$facilities[$i]['_id']]
                    = $facilities[$i]['_id'];//standardize array to input the parameter
            }
            cb_require_role("LoginUser");
            $login = cb_get_login_user();
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $dynamic_roles = $uum->listGrantedRoles();
            require_once('schedule/access_logic.csp');
            $acc_logic = \GRN_Schedule_Access_logic::getInstance();
            $acc_lists = $acc_logic->getEvaluateAccessesListById(
                $login, $facilities_id_access, 'facility', ['read'],
                $dynamic_roles
            );//format (uid=>(read=>1, add=>0)
            if (isset($acc_lists)) {
                foreach ($acc_lists as $key => $value) {
                    if ($value['read'] === 0) {
                        $flag = false;
                        for ($i = 0; $i < $count_loop && $flag == false; $i++) {
                            if (array_key_exists($i, $facilities)
                                && $key == $facilities[$i]["_id"]
                            ) {
                                unset($facilities[$i]);
                                $flag = true;
                            };
                        }
                    }
                }
                // remove the facility no read privilege
            }
            $ii = 0;
            $facilities_f = [];//get $topN_facility
            foreach ($facilities as $facility) {
                if ($ii < $topN_facilities) {
                    $facilities_f[] = $facility;
                    $ii++;
                } else {
                    break;
                }
            }
            $facilities = $facilities_f;
        }

    } elseif (array_key_exists('flag', $G_INPUT)
              && $G_INPUT['flag'] == 'selected'
    ) {
        $uids = [];
        $fids = [];
        if (array_key_exists('uids', $G_INPUT)) {
            $uids = $G_INPUT['uids'];
        };

        //in the case setting "application using" is every one, has a some user id not 999999999
        require_once('grn/uum_util_search.csp');
        $uum_util = \GRN_UumUtil_Search::getInstance();
        $members = $uum_util->SelectedUsersInfo($uids);

        if (array_key_exists('fids', $G_INPUT)) {
            $fids = $G_INPUT['fids'];
            //Checking access right (Read privilege)
            $count_loop = count($fids);
            $facilities_id_access = [];

            $facilities_id_access = array_combine($fids, $fids);

            cb_require_role("LoginUser");
            $login = cb_get_login_user();
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $dynamic_roles = $uum->listGrantedRoles();
            require_once('schedule/access_logic.csp');
            $acc_logic = \GRN_Schedule_Access_logic::getInstance();
            $acc_lists = $acc_logic->getEvaluateAccessesListById(
                $login, $facilities_id_access, 'facility', ['read'],
                $dynamic_roles
            );
            if (isset($acc_lists)) {
                foreach ($acc_lists as $key => $value) {
                    if ($value['read'] === 0) {
                        $flag = false;
                        for ($i = 0; $i < $count_loop && $flag == false; $i++) {
                            if ($key == $fids[$i]) {
                                unset($fids[$i]);
                                $flag = true;
                            };
                        }
                    }
                }
            }
            //end
            $fids = array_values($fids);//re index in the case unset
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = \GRN_Facility_SystemLogic::getInstance();
            $facilitiesResult
                = $facility_logic->getFacilityAndFacilitygroupIdListPartInfoByIds(
                $fids, CB_DATABASE_NO_LOCK
            );
            foreach ($facilitiesResult as $key => $value) {
                $facilities[] = [
                    '_id'              => $value['_id'],
                    'col_display_name' => $value['col_name']
                ];
            }
        }
    }
    $users_facilities = ['user' => $members, 'facility' => $facilities];
    require_once("grn/JSONResponse.csp");
    $json = \grn\grn\JSONResponse::create();
    $json->response($users_facilities);

    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);
    //$G_state_set->set('error_occurred', TRUE);
}
