<?php

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;
// for site position
$t->assign('app_id', 'schedule');

$faid = @ $G_INPUT['faid'];

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

$facility = $facility_logic->getFacility($faid);
if ($facility === false) {
    cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
}

// アクセス権のチェック
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
$dynamic_roles = $uum->listGrantedRoles();
$user_groups = $uum->getUserGroupsInfo($login->getOID(), true);
$user_roles = $uum->getUserRolesInfo($login->getOID(), true);

$facilitygroup
    = $facility_logic->getFacilityAffiliationGroup($facility->getOID());

if ( ! $facilitygroup) {
    // 施設グループに所属していない
    // $access = $acc_logic->evaluateAccess( $login, $facility, array( 'read' ), $dynamic_roles );
    $access = $acc_logic->getEvaluateAccessList($login,
        $facility,
        ['read', 'add'],
        'read_add',
        $dynamic_roles,
        null,
        null);
} else {
    $affiliation_groups = [$facilitygroup->getOID() => $facilitygroup];

    $accesses = $acc_logic->getEvaluateAccessesListById($login,
        $affiliation_groups,
        'facilitygroup',
        ['read', 'add'],
        $dynamic_roles);

    $access_group = $accesses[$facilitygroup->getOID()];

    $access = $acc_logic->getEvaluateAccessList($login,
        $facility,
        ['read', 'add'],
        'read_add',
        $dynamic_roles,
        $user_groups,
        $user_roles);
    foreach (['read', 'add'] as $auth) {
        if ($access_group[$auth] == GRN_SCHD_ACCESS_DENY) {
            $access[$auth] = GRN_SCHD_ACCESS_DENY;
        }
    }
    // $affiliation_groups = array( $facilitygroup->getOID() => $facilitygroup );
    // $have_config = $acc_logic->getHaveAccessSettingList( $login, $affiliation_groups, 'facilitygroup', $dynamic_roles );
    // if (count( $have_config ) > 0)
    // {
    //     // 施設グループのアクセス権を優先的に評価
    //     //$access = $acc_logic->evaluateAccess( $login, $facilitygroup, array( 'read' ), $dynamic_roles );
    //     $access = $acc_logic->_evaluateAccessesFacilityGroupGroup( $login, $have_config, array( 'read', 'add' ), $dynamic_roles );
    // }
    // else
    // {
    //     // 施設グループにアクセス権設定がない
    //     $access = $acc_logic->evaluateAccess( $login, $facility, array( 'read', 'add' ), $dynamic_roles );
    // }
}
if ( ! $access['read']) {
    cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
}

if ($access['add']) {
    $t->assign('user_can_add_schedule', 1);
}

$facility_info = ['faid' => $faid];
$facility_info['title'] = $facility->get('name');
$facility_info['memo'] = $facility->get('memo');
//GRN-337
require_once('grn/controller.csp');
$facility_info['memo'] = grn_prevent_tag_script($facility_info['memo']);

// 施設グループ
if ($facilitygroup) {
    $facility_info['group'] = $facilitygroup->getOID();
    $facility_info['group_name'] = $facilitygroup->get('name');
}

$facility_info['ctime'] = $facility->get('ctime');
$creator = $facility->get('creator');
if ( ! $creator) {
    $facility_info['creator_name'] = $facility->get('creator_name');
} else {
    $facility_info['creator_uid'] = $creator->getOID();
}
$facility_info['mtime'] = $facility->get('mtime');
$modifier = $facility->get('modifier');
if ( ! $modifier) {
    $facility_info['modify_name'] = $facility->get('modifier_name');
} else {
    $facility_info['modify_uid'] = $modifier->getOID();
}

$t->assign('facility', $facility_info);

$page_title = grn_get_current_page_display_name();
// page title
if (isset($facility_info['title'])) {
    $t->assign('page_title', $facility_info['title']);
} else {
    $t->assign('page_title', $page_title);
}

$referer_key = array_key_exists('referer_key', $G_INPUT)
    ? $G_INPUT['referer_key'] : null;
$referer_exists = false;
if ($referer_key) {
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession('schedule.referer');
    $referer = $session->get($referer_key);
    if (is_array($referer)) {
        // Ajaxスケジューラは日付を移動してもrefererを更新しないので変更後のbdateを受け取ってrefererを更新する
        $date = new CB_Date();
        $referer_bdate = array_key_exists('referer_bdate', $G_INPUT)
            ? $G_INPUT['referer_bdate'] : null;
        if ($date->parse($referer_bdate)) {
            $referer['bdate'] = $referer_bdate;
            $session->set($referer_key, $referer);
        }

        // site position 
        $t->assign(
            'site_position', [
                $referer,
                ['page' => "", 'name' => $page_title]
            ]
        );
        $referer_exists = true;
    }
}

if ($referer_exists === false) {
    // site position
    $t->assign(
        'site_position', [
            [
                'page' => 'schedule/index',
                'name' => grn_get_page_display_name('schedule/schedule_index')
            ],
            ['page' => '', 'name' => $page_title]
        ]
    );
}

$t->assign('referer_key', $referer_key);

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


