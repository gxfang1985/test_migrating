<?php

use grn\schedule\FacilityApprovalViewUtil;
use grn\schedule\ScheduleMemberLogic;

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

//------------------

$member_id = @ $G_INPUT['uid'];
$group_id = @ $G_INPUT['gid'];
$event_id = @ $G_INPUT['event'];
$str_date = @ $G_INPUT['bdate'];
$notify_id = @ $G_INPUT['nid'];
$str_start_day = cb_at($G_INPUT, "start_day");

$t->assign("event_id", $event_id);

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date = null;
}

$event = $app->getEvent($login, $event_id, $date);
// 安全対策
if ( ! $event) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
}

// アクセス権のチェック
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
$dynamic_role = $uum->listGrantedRoles();
$access = $acc_logic->getEventAccess($login, $event,
    ['read', 'add', 'modify', 'delete'], $dynamic_role);

if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
}


$temp = ['user_id' => $member_id, 'event_id' => $event->id];

$temp['allday'] = ($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
    ? true : false;

$is_same_day = false;

// Get current timezone of user
$current_timezone = CB_I18N::getInstance()->getCurrentTimezone();

// 日付
if (is_a($event, 'GRN_Schedule_BannerEvent')) {
    // Get current timezone of user
    $tmp_start_date = new CB_Date();
    $tmp_start_date->parse($event->setdate->format());
    $tmp_start_datetime = CB_DateTimeEx::createByDateAndTime($tmp_start_date,
        GRN_Schedule_View_Util::getAlldayStartTime());
    $temp['start_date']
        = CB_I18N::translateDatetimeTimezone($tmp_start_datetime,
        $event->timezone, $current_timezone);
    $tmp_end_date = new CB_Date();
    $tmp_end_date->parse($event->enddate->format());
    $tmp_end_datetime = CB_DateTimeEx::createByDateAndTime($tmp_end_date,
        GRN_Schedule_View_Util::getAlldayEndTime());
    $temp['end_date'] = CB_I18N::translateDatetimeTimezone($tmp_end_datetime,
        $event->timezone, $current_timezone);

    if ($app->compareDate($temp['start_date'], $temp['end_date']) === 0) {
        $is_same_day = true;
    }
} elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
    $temp['repeat_data']['user'] = $util->getRepeatData($event->repeat_type,
        $event->wday, $event->day);
    require_once("fw/i18n/system_config.csp");
    $temp['repeat_data']['system'] = $util->getRepeatData($event->repeat_type,
        $event->wday, $event->day, CB_I18N_SystemConfig::getPrintLanguage());
    $start_time = $event->settime;
    if (is_null($start_time)) {
        $start_time = GRN_Schedule_View_Util::getAlldayStartTime();
    }
    $end_time = $event->endtime;
    if (is_null($end_time)) {
        $end_time = GRN_Schedule_View_Util::getAlldayEndTime();
    }

    $start_datetime = CB_DateTimeEx::createByDateAndTime($event->setdate,
        $start_time);
    $end_datetime = CB_DateTimeEx::createByDateAndTime($event->enddate,
        $end_time);
    $start_datetime = CB_I18N::translateDatetimeTimezone($start_datetime,
        $event->timezone, $current_timezone);
    $end_datetime = CB_I18N::translateDatetimeTimezone($end_datetime,
        $event->timezone, $current_timezone);
    $temp['start_date'] = $start_datetime->getDate()->format();
    $temp['end_date'] = $end_datetime->getDate()->format();

    // Get duration
    $start_timespan = new CB_DateTimeSpan($start_time->toSeconds());
    $end_timespan = new CB_DateTimeSpan($end_time->toSeconds());
    if (is_null($event->endtime)) {
        $one_second = new CB_DateTimeSpan(1);
        $end_timespan->add($one_second);
    }

    if ($start_timespan->compare($end_timespan) > 0) {
        $duration = new CB_DateTimeSpan((24 * 3600)
                                        - $start_timespan->toSeconds()
                                        + $end_timespan->toSeconds());
    } else {
        $duration = new CB_DateTimeSpan($end_timespan->toSeconds()
                                        - $start_timespan->toSeconds());
    }

    // Get times of the displayed day
    if ($str_start_day) {
        if ($start_datetime->parse($str_start_day) == false) {
            $start_day = new CB_Date();
            $start_day->parse($str_start_day);
            $start_datetime = CB_DateTimeEx::createByDateAndTime($start_day,
                $start_time);

            $start_datetime
                = CB_I18N::translateDatetimeTimezone($start_datetime,
                $event->timezone, $current_timezone);
            $start_datetime->setDate($start_day);
        }

        $end_datetime = clone $start_datetime;
        $end_datetime->add($duration);
    } else {
        $start_datetime = CB_DateTimeEx::createByDateAndTime($date,
            $start_time);
        $end_datetime = CB_DateTimeEx::createByDateAndTime($date,
            $end_time);
        $start_datetime_old = clone $start_datetime;
        $end_datetime_old = clone $end_datetime;

        $start_datetime = CB_I18N::translateDatetimeTimezone($start_datetime,
            $event->timezone, $current_timezone);
        $end_datetime = CB_I18N::translateDatetimeTimezone($end_datetime,
            $event->timezone, $current_timezone);

        if ($app->compareDate($start_datetime, $start_datetime_old) !== 0) {
            $start_datetime->setDate($start_datetime_old->getDate());
            $end_datetime->setDate($end_datetime_old->getDate());
        }
    }

    if ($end_datetime->compare($start_datetime) < 0) {
        $end_datetime->moveDays(1);
    }

    if ($app->compareDate($start_datetime, $end_datetime) === 0) {
        $is_same_day = true;
    }
    $temp['start_time'] = $start_datetime->format();
    $temp['end_time'] = $end_datetime->format();
    if (is_null($event->endtime) && ! is_null($event->settime)) {
        $temp['end_time'] = "";
    }
} elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
    $temporary = [];
    if ($event->isORSearch()) {
        foreach ($event->setdates as $facility_data) {
            $facility_dates = [];
            foreach ($facility_data['dates'] as $tp_id => $temp_date) {
                $string_datetime = "DateTimeLong_YMDW_HM";
                if ($app->compareDate($temp_date['setdatetime'],
                        $temp_date['enddatetime']) === 0
                ) {
                    $string_datetime = "TimeShort_HM";
                }
                $facility_dates[] = [
                    'temporary_id'    => $tp_id,
                    'setdatetime'     => $temp_date['setdatetime'],
                    'enddatetime'     => $temp_date['enddatetime'],
                    'string_datetime' => $string_datetime
                ];
            }
            $temporary[]
                = [
                'facility_name' => $facility_data['facility']->get('name'),
                'dates'         => $facility_dates
            ];
        }
        $temp['temporary_type'] = 'or';
    } else {
        foreach ($event->setdates as $tp_id => $temp_date) {
            $string_datetime = "DateTimeLong_YMDW_HM";
            if ($app->compareDate($temp_date['setdatetime'],
                    $temp_date['enddatetime']) === 0
            ) {
                $string_datetime = "TimeShort_HM";
            }
            $temporary[] = [
                'temporary_id'    => $tp_id,
                'setdatetime'     => $temp_date['setdatetime'],
                'enddatetime'     => $temp_date['enddatetime'],
                'string_datetime' => $string_datetime
            ];
        }
        $temp['temporary_type'] = 'normal';
    }
    $temp['temporary'] = $temporary;
} else {
    $temp['start_date'] = $event->setdatetime->format();
    if ($event->enddatetime) {
        $temp['end_date'] = $event->enddatetime->format();
    }

    if ($temp['allday']) {
        $tmp_start_date = new CB_Date();
        $tmp_start_date->parse($temp['start_date']);
        $tmp_start_datetime
            = CB_DateTimeEx::createByDateAndTime($tmp_start_date,
            GRN_Schedule_View_Util::getAlldayStartTime());
        $temp['start_date']
            = CB_I18N::translateDatetimeTimezone($tmp_start_datetime,
            $event->timezone, CB_I18N::getInstance()->getCurrentTimezone());
        if ($event->enddatetime) {
            $tmp_end_date = new CB_Date();
            $tmp_end_date->parse($temp['end_date']);
            $tmp_end_datetime
                = CB_DateTimeEx::createByDateAndTime($tmp_end_date,
                GRN_Schedule_View_Util::getAlldayEndTime());
            $temp['end_date']
                = CB_I18N::translateDatetimeTimezone($tmp_end_datetime,
                $event->timezone, CB_I18N::getInstance()->getCurrentTimezone());
        }

        if ($event->enddatetime
            && $app->compareDate($temp['start_date'], $temp['end_date']) === 0
        ) {
            $is_same_day = true;
        }
    } else {
        if ($event->enddatetime
            && $app->compareDate($event->setdatetime, $event->enddatetime) === 0
        ) {
            $is_same_day = true;
        }
    }
}

$temp['title'] = html_entity_decode($event->getTitle());
if ($event->private == GRN_EVENT_PRIVATE_HIDDEN) {
    $temp['title'] .= cb_msg('grn.schedule', 'event_private');
} elseif ($event->private == GRN_EVENT_PRIVATE_PRIVATE) {
    $temp['title'] .= cb_msg('grn.schedule', 'event_private');
}
$temp['type'] = $util->getViewEventType($event->getEventType(),
    $event->isShared());
$temp['memo'] = $event->memo;

// アドレスデータ
if ( ! is_null($event->company_name)
     ||
     ! is_null($event->zip_code)
     ||
     ! is_null($event->physical_address)
     ||
     ! is_null($event->map)
     ||
     ! is_null($event->route)
     ||
     ! is_null($event->company_telephone_number)
     ||
     ! is_null($event->facsimile_number)
     ||
     ! is_null($event->company_url)
) {
    $address = [];
    $address['company_name'] = $event->company_name;
    $address['zip_code'] = $event->zip_code;
    $address['physical_address'] = $event->physical_address;
    $address['map_image'] = $event->map;
    $t->assign('mp', @ $G_INPUT['mp']);
    $address['route'] = $event->route;
    $address['route_time'] = $event->route_time;
    $address['route_fare'] = $event->route_fare;
    $address['company_telephone_number'] = $event->company_telephone_number;
    $address['facsimile_number'] = $event->facsimile_number;
    $address['URL'] = $event->company_url;

    $temp['address'] = $address;
}

// 参加者の設定
$members = [];
if (is_array($event->groups)) {
    foreach (array_keys($event->groups) as $key) {
        $group = &$event->groups[$key];
        $members['g' . $group->getOID()] = $group->get('name');
    }
}

$b_login = false;
if (is_array($event->users)) {
    foreach (array_keys($event->users) as $key) {
        $user = &$event->users[$key];
        $members[$user->getOID()] = $uum->getOnlyOneNameByUserObject($user);
        if ( ! $b_login && $user->getOID() == $login_id) {
            $b_login = true;
        }
    }
}
$temp['users'] = $members;
$temp['users_count'] = count($members);
if ($b_login) {
    $temp['participate'] = true;
}

//GTM-1677
if (is_a($event, 'GRN_Schedule_NormalEvent')) {
    $params = ['usingPurpose', 'currentStatus'];
    $facilityApprovalViewUtil = new FacilityApprovalViewUtil();
    $facilityApprovalData = $facilityApprovalViewUtil->fetch($params,
        $event);
    $t->assign('facilityApprovalData', $facilityApprovalData);
}
//End GTM-1677

$members = [];
if (is_array($event->facilities)) {
    foreach (array_keys($event->facilities) as $key) {
        $facility = &$event->facilities[$key];

        $members[$facility->getOID()] = $facility->get('name');
    }
}
$temp['facility'] = $members;

// 施設のカスタマイズ項目
if ( ! empty($members)) {
    // カスタマイズ項目を取得
    $extended_items = $facility_logic->getData($event_id);
    $t->assign('extended_items', $extended_items);
} elseif (is_a($event, 'GRN_Schedule_TemporaryEvent') && $event->isORSearch()) {
    // カスタマイズ項目を取得
    $extended_items = $facility_logic->getData($event_id);
    $t->assign('extended_items', $extended_items);
}

// 非公開の場合のみ
if ($event->private && is_array($event->notify_address)
    && count($event->notify_address) > 0
) {
    $temp['private_users'] = ScheduleMemberLogic::getInstance()
                                                ->getNotifyAddressRender($event->notify_address);
}

if (is_null($date)) {
    if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_BANNER)
        == GRN_SCHEDULE_EVENT_TYPE_BANNER
    ) {
        $date = $event->setdate;
    } elseif (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
              == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
    ) {
        $date = $event->setdatetime;
    } elseif ($event->setdatetime) {
        $date = $event->setdatetime->getDate();
    }
}

//GTM-1136
$allow_file_attachment = false;
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
if ($systemlogic->getAllowFileAttachment() == '1') {
    require_once('schedule/file.csp');
    $fm = GRN_Schedule_FileManager::getInstance();
    $files = $fm->getFiles($event_id);

    require_once('grn/controller.csp');
    $utility = new GRN_ControllerUtil();

    $files_for_view = [];
    foreach (array_keys($files) as $fid) {
        $file =& $files[$fid];
        $files_for_view[$fid] = $utility->getFileLinkView($file);
    }

    $temp['attach_files'] = $files_for_view;
    if (count($files_for_view) > 0) {
        $allow_file_attachment = true;
    }
}
$t->assign('allow_file_attachment', $allow_file_attachment);
//End GTM-1136

// GRM-1269 Attendance Check
$attendanceStatLogic = new \grn\schedule\AttendanceStatusLogic();
$temp['isAttendanceCheckEvent'] = $event->isAttendanceCheckEvent()
                                  && $attendanceStatLogic->isEnableAttendanceCheck();
if ($temp["isAttendanceCheckEvent"] === true) {
    $temp["usersStatus"] = $util->getAttendanceStatusForView($event,
        count($temp["users"]), $login);
}
// End GRM-1269

$t->assign('user_id', $member_id);
$t->assign('group_id', $group_id);
if ($date) {
    $t->assign('bdate', $date->format());
}
$t->assign('event', $event->id);
$t->assign('is_same_day', $is_same_day);
$t->assign('schedule_event', $temp);

// 通知の処理
$app->readEvent($login, $event->id);

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
// site position 
$t->assign(
    'site_position', [
        [
            'page' => "schedule/index",
            'name' => grn_get_page_display_name('schedule/schedule_index')
        ],
        ['page' => "", 'name' => $page_title]
    ]
);

// Smarty実行
$t->display(cb_get_pagename() . ".tpl");

