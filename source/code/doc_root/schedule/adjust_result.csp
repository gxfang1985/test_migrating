<?php

use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\schedule\ScheduleMemberLogic;

include('_prepend_post.csp');

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// Validation check
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);
$target_name = 'schedule/adjust_constraint';

// force to register
SmartyValidate::register_form($target_name, @$G_INPUT['is_result']);

// validate after a POST
if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
    $user_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid']
        : null;
    $group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid']
        : null;
    $event_id = array_key_exists('eid', $G_INPUT) ? $G_INPUT['eid']
        : null;
    $workday_condition = isset($G_INPUT['workday_condition'])
        ? $G_INPUT['workday_condition'] : GRN_SCHEDULE_ALL_DAYS;

    $t->assign('user_id', $user_id);
    $t->assign('group_id', $group_id);
    $t->assign('event_id', $event_id);

    $bdate = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate'] : null;

    require_once('fw/date.csp');
    $default_date = new CB_Date();
    if ( ! $default_date->parse($bdate)) {
        // 今日を求める
        $tsex = new CB_TimeStampEx();
        $default_date = $tsex->getDate();
    }

    $t->assign('default_date', $default_date);
    $t->assign('bdate', $default_date->format());

    $sUID = array_key_exists('sUID', $G_INPUT) ? $G_INPUT['sUID'] : [];
    $sITEM = array_key_exists('sITEM', $G_INPUT) ? $G_INPUT['sITEM'] : [];

    // 検索対象が一つも選ばれていない
    if (( ! is_array($sUID) || count($sUID) <= 0)
        && ( ! is_array($sITEM)
             || count($sITEM) <= 0)
    ) {
        cb_throw_error(E_GRN_SCHD_NOT_MEMBER);
    }

    //uum
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    require_once('schedule/system_logic.csp');
    $systemlogic = GRN_Schedule_SystemLogic::getInstance();
    require_once('schedule/personal_logic.csp');
    $personallogic = GRN_Schedule_PersonalLogic::getInstance();
    require_once('schedule/application.csp');
    $application = GRN_Schedule_Application::getInstance();

    // 予定メニュー
    include('_menus.csp');

    $t->assign('use_private', $systemlogic->getUsePrivate());
    $schedule_event = [];
    $schedule_event['private_setting'] = $systemlogic->getDefaultPrivateSet();
    $t->assign('schedule_event', $schedule_event);

    $t->assign('show_group_role', ScheduleMemberLogic::getInstance()
                                                     ->isAllowSettingGroupRoleToWatchers());

    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();

    // メンバーIDのリストを生成
    $members_count = 0;
    $user_id_list = [];
    $group_id_list = [];
    $member_id_list_for_view = [];
    foreach ($sUID as $uid) {
        if (mb_substr($uid, 0, 1) == 'g') {
            $gid = mb_substr($uid, 1);
            $group_id_list[$gid] = $gid;
        } else {
            $user_id_list[$uid] = $uid;
        }
    }

    $facility_id_list = [];
    $facility_id_list_for_view = [];
    foreach ($sITEM as $selected_fid) {
        $facility_id_list[$selected_fid] = $selected_fid;
    }

    // アクセス権のチェック
    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();
    $dynamic_role = $uum->listGrantedRoles();

    $add_permitted = true;

    // ユーザーへのアクセス権をチェック
    if (is_array($user_id_list) && count($user_id_list) > 0) {
        $user_access_list = $acc_logic->getEvaluateAccessesListById($login,
            $user_id_list,
            'user',
            ['read', 'add'],
            $dynamic_role);
        foreach ($user_access_list as $access) {
            if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
            }
            if ($access['add'] == GRN_SCHD_ACCESS_DENY) {
                $add_permitted = false;
            }
        }

        $t->assign('user_access_list', $user_access_list);
        $users_info
            = GRN_ControllerUtil::getUserInfoToShowUserName($user_id_list,
            $login);
        $t->assign('users_info', $users_info);

        $members_count += count($users_info);
        // ユーザー情報が取得できなかったIDをメンバーから外す
        foreach ($user_id_list as $key => $val) {
            if (array_key_exists($val, $users_info)) {
                $member_id_list_for_view[$key] = $val;
            }
        }

        unset($user_id_list);
    }

    // グループへのアクセス権をチェック
    if (is_array($group_id_list) && count($group_id_list) > 0) {
        $group_access_list = $acc_logic->getEvaluateAccessesListById($login,
            $group_id_list,
            'group',
            ['read', 'add'],
            $dynamic_role);
        foreach ($group_access_list as $access) {
            if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
            }
            if ($access['add'] == GRN_SCHD_ACCESS_DENY) {
                $add_permitted = false;
            }
        }

        // テンプレート側では組織はgXX形式でアクセス権配列にアクセスするので付与する
        $group_access_list_for_view = [];
        foreach ($group_access_list as $key => $group_access) {
            $group_access_list_for_view['g' . $key] = $group_access;
        }
        $t->assign('group_access_list', $group_access_list_for_view);

        $groups_info = $uum->getGroupInfoList($group_id_list);
        $t->assign('groups_info', $groups_info);

        $members_count += count($groups_info);
        // 組織情報が取得できなかったIDをメンバーから外す
        foreach ($group_id_list as $key => $val) {
            if (array_key_exists($val, $groups_info)) {
                $member_id_list_for_view['g' . $key] = 'g' . $val;
            }
        }

        unset($group_id_list);
    }

    // AND検索の登録権限チェックに使うために定義
    $facility_access_list = [];

    // 施設へのアクセス権をチェック
    if (is_array($facility_id_list) && count($facility_id_list) > 0) {
        $target_facility_id_list = $facility_id_list;
        $facility_access_list
            = $acc_logic->getFacilityGroupAccessList($login,
            $target_facility_id_list,
            ['read', 'add'],
            $dynamic_role);
        $facility_access_list += $acc_logic->getEvaluateAccessesListById($login,
            $target_facility_id_list,
            'facility',
            ['read', 'add'],
            $dynamic_role);
        foreach ($facility_access_list as $access) {
            if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
            }
        }

        $t->assign('facility_access_list', $facility_access_list);
        $facilities_info = $facility_logic->getFacilitiesInfo($facility_id_list,
            CB_DATABASE_NO_LOCK);
        // GTM-1676
        $checkApprovalFacilities
            = ScheduleFacilityApprovalSetting::evaluateSettingForFacilityObjects($facilities_info);
        $approvalFacilityIds = array_keys(array_filter($checkApprovalFacilities,
            function ($k) {
                return $k;
            }));
        if (count($approvalFacilityIds) > 0) {
            $t->assign('approvalFacilityIds', $approvalFacilityIds);
        }
        // end GTM-1676
        $t->assign('facilities_info', $facilities_info);
        // 組織情報が取得できなかったIDを施設から外す
        foreach ($facility_id_list as $key => $val) {
            if (array_key_exists($val, $facilities_info)) {
                $facility_id_list_for_view[$key] = $val;
            }
        }
    }

    // ユーザー情報が取れないユーザー指定があった場合のために再度チェック
    if (( ! is_array($member_id_list_for_view)
          || count($member_id_list_for_view) <= 0)
        && ( ! is_array($facility_id_list_for_view)
             || count($facility_id_list_for_view) <= 0)
    ) {
        cb_throw_error(E_GRN_SCHD_NOT_MEMBER);
    }

    // 登録権限の無いユーザー/グループが含まれていないか
    $t->assign('add_permitted', $add_permitted);

    // 参加者(ユーザー＋グループ)
    $t->assign('members_count', $members_count);
    $selected_members_ids = array_keys($member_id_list_for_view);
    $selected_members = ScheduleMemberLogic::getInstance()
                                           ->getAttendeesRenderFromParam($selected_members_ids,
                                               false, false);
    $t->assign('selected_members', $selected_members);
    $t->assign('selected_members_ids', $selected_members_ids);

    // 公開先
    $notify_address_candidate = ScheduleMemberLogic::getInstance()
                                                   ->getDefaultPublicByUserId($login->getOID(),
                                                       ScheduleMemberLogic::PLUG_IN_TYPE_VIEW,
                                                       true, true);
    if (count($notify_address_candidate) > 0) {
        $schedule_event['notify_address'] = ScheduleMemberLogic::getInstance()
                                                               ->getDisplayMemberList($notify_address_candidate);
        $t->assign('schedule_event', $schedule_event);
    }

    // 施設
    $t->assign('selected_facilities', $facility_id_list_for_view);

    // カスタマイズ項目取得
    $extended_items = $facility_logic->listItemsView();
    $t->assign('extended_items', $extended_items);

    require_once('schedule/search_logic.csp');
    $search_logic = GRN_Schedule_AdjustSearchLogic::getInstance();

    $adjust_display = array_key_exists('adjust_display', $G_INPUT)
        ? $G_INPUT['adjust_display'] : ['1' => true];
    // 検索する候補日
    $target_date_list = [];
    foreach ($adjust_display as $key => $display) {
        if ($display == true) {
            $start_prefix = 'target_' . $key;
            if (array_key_exists($start_prefix . '_year', $G_INPUT) == false) {
                break;
            }
            $date = new CB_Date();
            $date->year = array_key_exists($start_prefix . '_year',
                $G_INPUT) ? $G_INPUT[$start_prefix . '_year'] : 0;
            $date->month = array_key_exists($start_prefix . '_month',
                $G_INPUT) ? $G_INPUT[$start_prefix . '_month'] : 0;
            $date->day = array_key_exists($start_prefix . '_day',
                $G_INPUT) ? $G_INPUT[$start_prefix . '_day'] : 0;
            $target_date_list[] = $date;
        }
    }

    $t->assign('selected_date_list', $target_date_list);

    $personallogic->getViewHour($login, $set_hour, $end_hour);

    // 検索する時間帯
    $target_start_hour = 0;
    $target_end_hour = 0;
    if (array_key_exists('target_start_hour', $G_INPUT) === true) {
        $target_start_hour = intval($G_INPUT['target_start_hour']);
        $t->assign('set_hour', $target_start_hour);
    } else {
        $t->assign('set_hour', $set_hour);
    }
    if (array_key_exists('target_end_hour', $G_INPUT) === true) {
        $target_end_hour = intval($G_INPUT['target_end_hour']);
        $t->assign('end_hour', $target_end_hour);
    } else {
        $t->assign('end_hour', $end_hour);
    }

    // 時間帯のチェック
    $target_start_time = new CB_Time();
    $target_start_time->hour = $target_start_hour;
    $target_end_time = new CB_Time();
    $target_end_time->hour = $target_end_hour;
    $application->checkDateTime($target_start_time, $target_end_time);

    // 検索する空き時間の範囲
    $term_hour = 0;
    $term_minute = 0;
    if (array_key_exists('term_hour', $G_INPUT) === true
        && $G_INPUT['term_hour'] !== ''
    ) {
        $term_hour = intval($G_INPUT['term_hour']);
        $t->assign('term_hour', $term_hour);
    }
    if (array_key_exists('term_minute', $G_INPUT) === true
        && $G_INPUT['term_minute'] !== ''
    ) {
        $term_minute = intval($G_INPUT['term_minute']);
        $t->assign('term_minute', $term_minute);
    }

    // 施設検索条件
    $search_method = 'OR';
    if (array_key_exists('searchMethod', $G_INPUT) === true) {
        $search_method = $G_INPUT['searchMethod'];
    }

    // exception hours
    $around_time = 0;
    if (array_key_exists('event_around', $G_INPUT)
        && $G_INPUT['event_around']
    ) {
        $around_time = array_key_exists('around_time', $G_INPUT)
            ? $G_INPUT['around_time'] : 0;
        $t->assign('event_around', $G_INPUT['event_around']);
        $t->assign('around_time', $around_time);
    }

    $except_hours = [];
    foreach ($G_INPUT as $key => $value) {
        $matches = [];
        if (preg_match('#^except_hours_(\d+)$#', $key, $matches)) {
            $num = $matches[1];
            if ($value && isset($G_INPUT['except_start_' . $num . '_hour'])
                && isset($G_INPUT['except_end_' . $num . '_hour'])
            ) {
                $start_time = new CB_Time();
                $start_time->hour = $G_INPUT['except_start_' . $num
                                             . '_hour'];
                $end_time = new CB_Time();
                $end_time->hour = $G_INPUT['except_end_' . $num . '_hour'];
                $except_hours[$num] = [
                    'start_time' => $start_time,
                    'end_time'   => $end_time
                ];
            }
        }
    }
    $t->assign('except_hours', $except_hours);

    // 空き時間の検索
    $candidates = $search_logic->searchFreeTimes($target_date_list,
        $target_start_hour,
        $target_end_hour,
        $term_hour,
        $term_minute,
        $member_id_list_for_view,
        $facility_id_list_for_view,
        $search_method,
        $around_time,
        $except_hours,
        $workday_condition);
    $t->assign('candidates', $candidates);
    $t->assign('candidates_count', $search_logic->getCandidatesCount());

    // 検索条件
    $searchMethod = 'OR';
    if (array_key_exists('searchMethod', $G_INPUT) === true
        && $G_INPUT['searchMethod'] === 'AND'
    ) {
        $searchMethod = 'AND';
    }
    $t->assign('searchMethod', $searchMethod);

    // 施設の登録権限のチェック
    $add_permitted_facilities = false;
    if ($searchMethod == 'OR') {
        // OR検索
        $no_facilities = array_key_exists(GRN_SCHD_ADJUST_NO_FACILITY,
            $candidates);
        if ( ! $no_facilities) {
            // OR検索で施設が選択されている
            foreach (array_keys($candidates) as $faid) {
                // 検索結果内に一つでも登録権限のある施設があったら登録できる
                if (array_key_exists($faid, $facility_access_list) === true
                    && $facility_access_list[$faid]['add']
                       !== GRN_SCHD_ACCESS_DENY
                ) {
                    $add_permitted_facilities = true;
                    break;
                }
            }
        } else {
            // OR検索で施設が選択されていない
            $add_permitted_facilities = true;
        }
    } else {
        // AND検索
        if (is_array($facility_access_list)
            && count($facility_access_list) > 0
        ) {
            // 全ての施設に登録権限が無いと登録できないようにする
            foreach ($facility_access_list as $access) {
                if ($access['add'] === GRN_SCHD_ACCESS_DENY) {
                    $add_permitted_facilities = false;
                    break;
                }
                $add_permitted_facilities = true;
            }
        } else {
            // 施設が選択されていない場合
            $add_permitted_facilities = true;
        }
    }

    $t->assign('add_permitted_facilities', $add_permitted_facilities);

    // 公開先用のアクセスプラグイン
    require_once('fw/session_manager.csp');
    $sm = CB_SessionManager::getInstance();
    $sm->destroy(cb_get_pagename());
    $sm->destroy(cb_get_pagename() . '/view');

    $t->assign('add_plugin', [
        'name'   => 'schedule',
        'params' => [
            'action'       => ['read', 'add'],
            'session_name' => cb_get_pagename()
        ]
    ]);

    $t->assign('view_plugin', [
        'name'   => 'schedule',
        'params' => [
            'action'       => ['read'],
            'session_name' => cb_get_pagename() . '/view'
        ]
    ]);

    $backlink = cb_pageurl('schedule/index');
    $referer_key = array_key_exists('referer_key', $G_INPUT)
        ? $G_INPUT['referer_key'] : null;
    $referer_exists = false;
    if ($referer_key) {
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession('schedule.referer');
        $referer = $session->get($referer_key);
        if (is_array($referer)) {
            // page title
            $page_title = grn_get_current_page_display_name();
            $t->assign('page_title', $page_title);
            // site position
            $t->assign(
                'site_position', [
                    $referer,
                    [
                        'page'        => 'schedule/adjust_search',
                        'name'        => cb_msg('grn.schedule',
                            'adjust_site_position'),
                        'uid'         => $user_id,
                        'gid'         => $group_id,
                        'event'       => $event_id,
                        'bdate'       => $bdate,
                        'referer_key' => $referer_key
                    ],
                    ['page' => "", 'name' => $page_title]
                ]
            );
            $referer_exists = true;

            $page = 'schedule/index';
            if (array_key_exists('page', $referer) === true) {
                $page = $referer['page'];
            }

            $backlink = cb_pageurl($page);
        }
    }

    if ($referer_exists === false) {
        $page = 'schedule/index';
        // page title
        $page_title = grn_get_current_page_display_name();
        $t->assign('page_title', $page_title);
        // site position
        $t->assign(
            'site_position', [
                [
                    'page' => 'schedule/index',
                    'name' => grn_get_page_display_name('schedule/schedule_index')
                ],
                [
                    'page'  => 'schedule/adjust_search',
                    'name'  => cb_msg('grn.schedule', 'adjust_site_position'),
                    'uid'   => $user_id,
                    'gid'   => $group_id,
                    'event' => $event_id,
                    'bdate' => $bdate
                ],
                ['page' => '', 'name' => $page_title]
            ]
        );
    }

    $t->assign('referer_key', $referer_key);
    $t->assign('backlink', $backlink);
    $t->assign('page', $page);

    SmartyValidate::disconnect();

    $t->assign('delimiter', GRN_SCHD_ADJUST_DELIMITER);

    $t->display(cb_get_pagename() . '.tpl');
} else {
    $t->setPageInfo($target_name);

    include('_adjust_result_validate.csp');

    $t->display("{$target_name}.tpl");
}


