<?php

class GRN_Schedule_Dropdown_Util
{
    /**
     *
     * @var
     */
    private static $_instance = null;

    /**
     * @return
     */
    public static function getInstance()
    {
        if ( ! isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }

        return self::$_instance;
    }

    /**
     * 施設グループ選択ツリーの中身を作る
     *
     */
    static function makeFacilityGroupsTreeMenu(
        $page_name,
        $selected_id,
        $extra_param = 0
    ) {
        require_once('schedule/portlet_view_util.csp');

        return GRN_Schedule_Portlet_Dropdown_Util::makeFacilityGroupsTreeMenu($page_name,
            $selected_id, $extra_param);
    }

    /**
     * 組織選択ドロップダウンメニューの中身を作る
     *
     */
    static function makeGroupsDropDownMenu(
        &$login,
        &$dynamic_roles,
        &$group_id,
        &$group,
        &$group_list
    ) {
        require_once('grn/ui.csp');
        $manager = GRN_UIConfigManager::getInstance();
        $config = $manager->getUserConfig($login);

        if ($config->getMyGroupPosition() == 'upper') {
            // Myグループを最初に表示
            GRN_Schedule_Dropdown_Util::getMyGroupsInfo($login, $dynamic_roles,
                $group_id, $group, $group_list);
            // よく使う組織
            GRN_Schedule_Dropdown_Util::getOftenusedGroupsInfo($login,
                $dynamic_roles, $group_id, $group, $group_list);
        } else {
            // よく使う組織
            GRN_Schedule_Dropdown_Util::getOftenusedGroupsInfo($login,
                $dynamic_roles, $group_id, $group, $group_list);
            // Myグループを最初に表示
            GRN_Schedule_Dropdown_Util::getMyGroupsInfo($login, $dynamic_roles,
                $group_id, $group, $group_list);
        }

        $primary_group_id
            = GRN_Schedule_Dropdown_Util::getPrimaryGroupInfo($login,
            $dynamic_roles, $group_id, $group, $group_list);
        GRN_Schedule_Dropdown_Util::getBelongingGroupsInfo($login,
            $dynamic_roles, $group_id, $group, $group_list, $primary_group_id);
        GRN_Schedule_Dropdown_Util::getFrequentGroupsInfo($login,
            $dynamic_roles, $group_id, $group, $group_list);
        GRN_Schedule_Dropdown_Util::getFrequentUsersInfo($login, $dynamic_roles,
            $group_id, $group, $group_list);
    }

    /**
     * My グループの一覧を追加する
     *
     */
    static function getMyGroupsInfo(
        $login,
        &$dynamic_roles,
        &$group_id,
        &$group,
        &$group_list
    ) {
        $uum = cb_lwc_uum();
        $groups = $uum->getMyGroupsInfo($login->getOID());
        foreach (array_keys($groups) as $options_group_id) {
            $options_group_name = $groups[$options_group_id]['col_name'];
            $group_list[] = [
                'id'   => 'm' . $options_group_id,
                'name' => cb_plain_msg('grn.common', 'title_my_group',
                    ['name' => $options_group_name])
            ];
            if (is_string($group) && $group == 'noselect') {
                $group_id = 'm' . $options_group_id;
                $group = [
                    'type' => 'mygroup',
                    'id'   => $options_group_id,
                    'name' => $options_group_name
                ];
            }
        }
    }

    /**
     * 優先する組織を追加する
     *
     */
    static function getPrimaryGroupInfo(
        $login,
        &$dynamic_roles,
        &$group_id,
        &$group,
        &$group_list
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        $primary_group = $uum->getUserPrimaryGroupInfo($login->getOID(), true);
        if ($primary_group !== false) {
            // アクセス権確認
            $access = $acc_logic->evaluateAccessesById($login,
                [$primary_group['_id'] => $primary_group], ['read'],
                $dynamic_roles, 'group');
            if (count($access) > 0) {
                // 優先する組織にアクセス権がある場合
                $options_group_id = $primary_group['_id'];
                $options_group_name = $primary_group['col_name'];

                // グループ選択セレクトボックスに、組織名（優先する組織）を表示
                $group_list[] = [
                    'id'   => $options_group_id,
                    'name' => cb_plain_msg(
                        'grn.common', 'title_primary_group',
                        ['name' => $options_group_name]
                    ),
                    'type' => 'primary'
                ];
                if (is_string($group) && $group == 'noselect') {
                    $group_id = $options_group_id;
                    $group = [
                        'type' => 'group',
                        'id'   => $options_group_id,
                        'name' => $options_group_name
                    ];
                }

                return $primary_group['_id'];
            }
        }

        return '';
    }

    /**
     * 所属する組織の一覧を追加する
     *
     */
    static function getBelongingGroupsInfo(
        $login,
        &$dynamic_roles,
        &$group_id,
        &$group,
        &$group_list,
        $primary_group_id
    ) {
        // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わない

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        $groups = $uum->getUserGroupsInfo($login->getOID(), true);
        $groups = $acc_logic->evaluateAccessesById($login, $groups, ['read'],
            $dynamic_roles, 'group');
        foreach (array_keys($groups) as $options_group_id) {
            $options_group_name = $groups[$options_group_id]['col_name'];

            // 優先する組織と重複するものは登録しない
            if ($options_group_id == $primary_group_id) {
                continue;
            }

            $group_list[] = [
                'id'   => $options_group_id,
                'name' => cb_plain_msg(
                    'grn.common', 'title_belonging_group',
                    ['name' => $options_group_name]
                ),
                'type' => 'membership'
            ];
            if (is_string($group) && $group == 'noselect') {
                $group_id = $options_group_id;
                $group = [
                    'type' => 'group',
                    'id'   => $options_group_id,
                    'name' => $options_group_name
                ];
            }
        }
    }

    /**
     * よく使う組織の一覧を追加する
     *
     */
    static function getOftenusedGroupsInfo(
        &$login,
        &$dynamic_roles,
        &$group_id,
        &$group,
        &$group_list
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        require_once('grn/uum_util.csp');
        $oftenused_groups = $uum->getOftenusedGroupsInfo($login->getOID());

        $oftenused_groups = $acc_logic->evaluateAccessesById($login,
            $oftenused_groups, ['read'], $dynamic_roles, 'group');

        foreach (array_keys($oftenused_groups) as $options_group_id) {
            $options_group_name
                = $oftenused_groups[$options_group_id]['col_name'];

            $group_list[] = [
                'id'          => $options_group_id,
                'name'        => cb_plain_msg('grn.common',
                    'title_oftenused_group', ['name' => $options_group_name]),
                'extra_param' => '1'
            ]; // 優先する組織、所属組織よりもよく使う組織のほうを優先する
            if (is_string($group) && $group == 'noselect') {
                $group_id = $options_group_id;
                $group = [
                    'type' => 'group',
                    'id'   => $options_group_id,
                    'name' => $options_group_name
                ];
            }
        }
    }

    /**
     * 最近選択した組織の一覧を追加する
     *
     */
    static function getFrequentGroupsInfo(
        &$login,
        &$dynamic_roles,
        &$group_id,
        &$group,
        &$group_list
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        require_once('grn/uum_util.csp');
        $frequent_groups
            = $uum->getFrequentGroupsInfo($login->getOID());// よく使う組織と所属する組織は省かれている
        $frequent_groups = $acc_logic->evaluateAccessesById($login,
            $frequent_groups, ['read'], $dynamic_roles, 'group');
        foreach (array_keys($frequent_groups) as $options_group_id) {
            $options_group_name
                = $frequent_groups[$options_group_id]['col_name'];

            $group_list[] = [
                'id'   => $options_group_id,
                'name' => cb_plain_msg('grn.common', 'title_frequent_group',
                    ['name' => $options_group_name])
            ];
            if (is_string($group) && $group == 'noselect') {
                $group_id = $options_group_id;
                $group = [
                    'type' => 'group',
                    'id'   => $options_group_id,
                    'name' => $options_group_name
                ];
            }
        }
    }

    /**
     * 最近選択したユーザーの項目を追加する
     *
     */
    static function getFrequentUsersInfo(
        &$login,
        &$dynamic_roles,
        &$group_id,
        &$group,
        &$group_list
    ) {
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_logic::getInstance();

        require_once('grn/uum_util.csp');

        $frequentusers = $uum->getFrequentUsersInfo($login->getOID(), -1, null,
            'schedule');
        $frequentusers = $acc_logic->evaluateAccessesById($login,
            $frequentusers, ['read'], $dynamic_roles, 'user');
        if (is_array($frequentusers) && count($frequentusers) > 0) {
            $group_list[] = [
                'id'   => 'r',
                'name' => cb_plain_msg('grn.common', 'title_group_caption', [
                    'caption' => cb_plain_msg('grn.common',
                        'title_frequent_users')
                ])
            ];
        } elseif (is_string($group) && $group == 'frequent') {
            $group = 'noselect';
        }
    }

}
