<?php

use grn\schedule\EventListView;
use grn\schedule\EventMemberListUtil;
use grn\schedule\EventMemberParamUtil;

global $G_INPUT;

$referer_key = cb_at($G_INPUT, 'referer_key', '');
$date = cb_at($G_INPUT, 'begin_date', '');
$number_of_days = cb_at($G_INPUT, 'number_of_days', 1);
$param_gid = cb_at($G_INPUT, 'gid');
$selected_group_type = cb_at($G_INPUT, 'selected_group_type');
$members_json = cb_at($G_INPUT, 'members');

$login_user = cb_get_login_user();

//------------
// get members
//------------

$view_state = new \grn\schedule\ViewState();
$view_state->handleRequest($G_INPUT);
$members = [];
$is_selected_members = false;

if (array_key_exists('members', $G_INPUT)) {
    $is_selected_members = true;
    if (is_array($members_json)) {
        foreach ($members_json as $index => $member) {
            $members[] = json_decode($member, true);
        }
    }

    $members = EventMemberListUtil::filterMembersForView($login_user, $members);
} else {
    $members = $view_state->getMembers();

    $is_selected_members = ! empty(cb_at($G_INPUT, 'uid'));
}

$members = array_slice($members, 0, EventListView::MEMBERS_LIMIT);
$members = EventMemberListUtil::getMembersInfoForView($login_user, $members);

//------------------------
// get facility group name
//------------------------

$param_group = EventMemberParamUtil::parseParamValue($param_gid,
    EventMemberParamUtil::TYPE_ORGANIZATION);
if ($param_group['type'] === EventMemberParamUtil::TYPE_FACILITY
    && $param_group['id']
) {
    require_once('schedule/facility_system_logic.csp');
    $facility_logic = \GRN_Facility_SystemLogic::getInstance();
    $selected_facility_group
        = $facility_logic->getFacilityGroup($param_group['id']);
}

//-----------
// save state
//-----------

if ($is_selected_members) {
    $view_state->setMembers($members);
}

$view_state->setReferer(
    $referer_key,
    [
        'bdate' => $date,
        'gid'   => $param_gid,
        'p'     => $selected_group_type,
        'uid'   => null
    ]
);

//---------------------
// prepare input params
//---------------------

$selected_members = array_filter(
    $members, function ($member) {
    return cb_at($member, 'selected', true);
}
);
$user_ids = EventMemberListUtil::listIdOf($selected_members,
    EventMemberParamUtil::TYPE_USER);
$facility_ids = EventMemberListUtil::listIdOf($selected_members,
    EventMemberParamUtil::TYPE_FACILITY);
$organization_ids = EventMemberListUtil::listIdOf($selected_members,
    EventMemberParamUtil::TYPE_ORGANIZATION);

//-----------
// fetch data
//-----------

$event_list_view = new EventListView();
$event_list_view->setBeginDate($date);
$event_list_view->setNumberOfDays($number_of_days);
$event_list_view->setUserIDs($user_ids);
$event_list_view->setFacilityIDs($facility_ids);
$event_list_view->setOrganizationIDs($organization_ids);

require_once('schedule/system_logic.csp');
$system_logic = GRN_Schedule_SystemLogic::getInstance();
$facility_placement = $system_logic->getAllowFacilitiesNameOnRight() == '1'
    ? 'after_subject' : 'before_subject';

$events = $event_list_view->fetch();
$hours_to_display = $event_list_view->getViewHour();

//--------------
// response data
//--------------

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

require_once("grn/JSONResponse.csp");
$json = \grn\grn\JSONResponse::create();

$data = [
    'dates'             => $event_list_view->getDatesForView(),
    'minTime'           => cb_at($hours_to_display, 'minTime'),
    'maxTime'           => cb_at($hours_to_display, 'maxTime'),
    'calendarWeekStart' => $event_list_view->getCalendarWeekStart(),
    'facilityPlacement' => $facility_placement,
    'events'            => $events,
    'members'           => $members
];

if (isset($selected_facility_group)) {
    $data['group'] = [
        'type' => 'facility',
        'id'   => $selected_facility_group->getOID(),
        'name' => htmlspecialchars($selected_facility_group->get('name')),
    ];
}

$json->response(
    $data,
    true,
    $json::JSON_HEADER,
    JSON_HEX_QUOT | JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS
);
