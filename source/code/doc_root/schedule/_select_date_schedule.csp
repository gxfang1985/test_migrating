<?php

global $G_INPUT;

// ログインユーザを取得
if ( ! isset($login)) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();
}

// 今日の日付を取得
require_once('fw/date.csp');
$tsex = new CB_TimeStampEx();
$today = $tsex->getDate();

$view_date = null;
if (array_key_exists('vwdate', $G_INPUT)) {
    $view_date = new CB_Date();
    if ( ! $view_date->parse($G_INPUT['vwdate'])) {
        $view_date = null;
    }
}
if (is_null($view_date)) {
    if (array_key_exists('bdate', $G_INPUT)) {
        $view_date = new CB_Date();
        if ( ! $view_date->parse($G_INPUT['bdate'])) {
            $view_date->year = $today->year;
            $view_date->month = $today->month;
            $view_date->day = $today->day;
        }
    } else {
        $view_date = new CB_Date();
        $view_date->year = $today->year;
        $view_date->month = $today->month;
        $view_date->day = $today->day;
    }
}
if ( ! is_null($view_date)) {
    $t->assign('view_date', $view_date->format());
}

// 指定された日付を取得
if (array_key_exists('cndate', $G_INPUT)) {
    $str_calendar_date = $G_INPUT['cndate'];
} else {
    $str_calendar_date = @ $G_INPUT['bdate'];
}

$calendar_date = new CB_Date();
if ( ! $calendar_date->parse($str_calendar_date)) {
    $calendar_date->year = $today->year;
    $calendar_date->month = $today->month;
    $calendar_date->day = $today->day;
}

// カレンダー上の開始日と終了日を取得
$start_date = getCalendarStartDate($calendar_date);
$end_date = getCalendarEndDate($calendar_date);

// カレンダーサービスからカレンダーを取得
require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($start_date, $end_date,
    $login);

// 日付配列の生成
$day_list = [];
$dateex = new CB_DateEx($start_date);

require_once('schedule/view_util.csp');
$view_util = GRN_Schedule_View_Util::getInstance();

while ($dateex->compare($end_date) <= 0) {
    $day_event = [];
    $day_event['wday_type'] = getDayType($dateex);

    $day_event['workday'] = $view_util->isWorkday($dateex, $calendars,
        $login);
    $day_event['holiday'] = isHoliday($dateex, $calendars);
    $day_event['view_date'] = ( ! is_null($view_date)
                                && $dateex->compare($view_date) == 0);

    if ($dateex->month != $calendar_date->month) {
        // 仮に設定
        $day_event['date_type'] = 's_date_other_month';
    }

    $day_event['format'] = $dateex->format();
    $day_event['year'] = $dateex->year;
    $day_event['month'] = $dateex->month;
    $day_event['day'] = $dateex->day;

    $dateex->moveDays(1);

    $day_list[] = $day_event;
}

$require_items = ['event_date', 'event_id', 'user_id', 'selected_group_type'];
foreach ($require_items as $item) {
    if (is_null($t->get_template_vars($item))) {
        $t->assign($item, '');
    }
}

$t->assign('calendar_day_list', $day_list);

// 前月・翌月を取得
$prev_date = new CB_DateEx($calendar_date);
$prev_date->moveMonths(-1);
$prev_date->day = 1;
$next_date = new CB_DateEx($calendar_date);
$next_date->moveMonths(1);
$next_date->day = 1;

$t->assign('calendar_prev_date', $prev_date->format());
$t->assign('calendar_next_date', $next_date->format());

//表示月から1年分

$year_month = [];
$ym = new CB_DateEx($calendar_date);
$ym->moveMonths(-3);

for ($i = 0; $i < 15; $i++) {
    $ym->day = 1;
    $year_month[] = $ym->format();
    $ym->moveMonths(1);

}

$t->assign('calendar_year_month', $year_month);

//-------共通化

/**
 * カレンダーの最初の日付を求める
 *
 * @param  CB_Date $date　求める日付
 *
 * @return CB_DateEx カレンダーの最初の日付
 */
function getCalendarStartDate($date)
{
    $dateex = new CB_DateEx($date);
    $dateex->day = 1;

    return $dateex;
}

/**
 * カレンダーの最終の日付を求める
 *
 * @param  CB_Date $date　求める日付
 *
 * @return CB_DateEx カレンダーの最終の日付
 */
function getCalendarEndDate($date)
{
    $dateex = new CB_DateEx($date);
    $dateex->day = $dateex->getEndOfMonthDay();

    return $dateex;
}

/**
 * 曜日のタイプを取得する
 *
 * @param  CB_DateEx $date 日付
 *
 * @return string 文字列
 */
function getDayType($date, $country = null)
{
    switch ($date->getDayOfWeek()) {
        case 0: // 日曜
            return 's_date_sunday';
            break;
        case 1: // 月曜
            return 's_date_monday';
            break;
        case 2: // 火曜
            return 's_date_tuesday';
            break;
        case 3: // 水曜
            return 's_date_wednesday';
            break;
        case 4: // 木曜
            return 's_date_thursday';
            break;
        case 5: // 金曜
            return 's_date_friday';
            break;
        case 6: // 土曜日
            return 's_date_saturday';
            break;
    }

    return 's_date';
}

/**
 * 指定された日付が祝日かどうかをチェックする
 *
 * @param CB_Date $date
 * @param array   $calendars
 * retrun boolean
 */
function isHoliday($date, $calendars)
{
    if ( ! is_array($calendars) || count($calendars) == 0) {
        return false;
    }

    if (array_key_exists($date->format(), $calendars)) {
        $calendar = $calendars[$date->format()];
        foreach ($calendar as $calendar_event) {
            if ($calendar_event['type'] == GRN_CALENDAR_TYPE_PUBLICHOLIDAY) {
                return true;
            }
        }
    }

    return false;
}
