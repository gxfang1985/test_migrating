<?php

use grn\schedule\AttendanceStatusLogic;
use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\ScheduleMemberLogic;

//GTM-1136
require_once('fw/ui.csp');
$browser = cb_ui_get_browser();
if ((($browser['type'] == 'msie' && $browser['ver_major'] <= 9) || cb_is_ios()
     || cb_is_android())
    && ( ! isset($_SERVER['HTTP_X_REQUESTED_WITH'])
         || $_SERVER['HTTP_X_REQUESTED_WITH'] != 'XMLHttpRequest')
) {
    $_SERVER['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest';
    require_once("grn/JSONResponse.csp");
    \grn\grn\JSONResponse::$json_header = true;
}
//End GTM-1136

//GTM-143
$_facilityConflictHandler = function ($ob_conflict, &$continue) {
    global $flag;
    if ($flag == "") {
        $continue = false;
        if (count($ob_conflict) > 0) {
            echo json_encode($ob_conflict);
        }
        exit;
    } else {
        $continue = true;
    }
};
//End GTM-143
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    require_once("grn/controller.csp");

    include('_prepend_post.csp');

    // instantiate an Smarty object
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    $referer_key = array_key_exists('referer_key', $G_INPUT)
        ? $G_INPUT['referer_key'] : null;
    $referer = null;
    if ($referer_key) {
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession('schedule.referer');
        $referer = $session->get($referer_key);
        $t->assign('referer_key', $referer_key);
    }

    $b_validation = true;

    //GTM-1136
    if (array_key_exists('RP', $G_INPUT) && $G_INPUT['RP']) {
        $target_name = 'schedule/repeat_modify';
    } elseif (array_key_exists('BN', $G_INPUT) && $G_INPUT['BN']) {
        $target_name = 'schedule/banner_modify';
    } elseif (array_key_exists('temporary', $G_INPUT)
              && $G_INPUT['temporary']
    ) {
        $target_name = 'schedule/adjust_modify';
    } else {
        $target_name = 'schedule/modify';
    }
    //End GTM-1136

    // Validation check
    if (array_key_exists('RP', $G_INPUT) && $G_INPUT['RP']) {
        require_once('SmartyValidate.class.php');
        SmartyValidate::connect($t);
        SmartyValidate::register_form($target_name);

        // validate after a POST
        if ( ! SmartyValidate::is_valid($G_INPUT, $target_name)) {
            $b_validation = false;
        }
    }

    if ($b_validation) {
        //uum
        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');
        $login = $uum->getLoginUser();
        $login_id = $login->getOID();
        //GTM-143, flag declare run or not run conflict throw popup events
        //if(array_key_exists('hfExcept',$G_INPUT))
        //{
        //    $flag = $G_INPUT['hfExcept'];
        //}
        //end GTM-143
        //頻度更新
        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $input_keys = array_keys($G_INPUT);
        foreach ($input_keys as $input_key) {
            if (preg_match('#^selected_users_.*$#', $input_key)) {
                $input_value = $G_INPUT[$input_key];
                if (is_array($input_value)) {
                    $input_value = $input_value[0];
                }
                $input_values = explode(':', $input_value);
                if ($input_value && is_array($input_values)) {
                    $uum_util->selectUsers($login, $input_values);
                }
            } elseif (preg_match('#^selected_groups_.*$#', $input_key)) {
                $input_value = $G_INPUT[$input_key];
                if (is_array($input_value)) {
                    $input_value = $input_value[0];
                }
                $input_values = explode(':', $input_value);
                if ($input_value && is_array($input_values)) {
                    $uum_util->selectGroups($login, $input_values);
                }
            }
        }

        // -------- 
        // brabrabra after success
        // --------
        // イベントの取得
        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        $event_id = array_key_exists('event_id', $G_INPUT)
            ? $G_INPUT['event_id'] : null;
        $str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate']
            : '';
        $date = new CB_Date();
        if ( ! $date->parse($str_date)) {
            $date = null;
        }

        $apply = array_key_exists('apply', $G_INPUT) ? $G_INPUT['apply']
            : false;
        if ( ! $apply) {
            $apply = null;
        }

        $this_year = array_key_exists('this_year', $G_INPUT)
            ? $G_INPUT['this_year'] : null;
        $this_month = array_key_exists('this_month', $G_INPUT)
            ? $G_INPUT['this_month'] : null;
        $this_day = array_key_exists('this_day', $G_INPUT)
            ? $G_INPUT['this_day'] : null;
        $this_date = $util->createDateTimeFromParameters($this_year,
            $this_month, $this_day);

        if (array_key_exists('RP', $G_INPUT) && $G_INPUT['RP']) {
            // 繰り返しの変更条件が入っていないのでNG
            if ( ! $apply) {
                cb_throw_error(E_GRN_SCHD_NOT_REPEAT_MODIFY_TYPE);
            }
            if ($apply == 'after') {
                $this_date = new CB_DateEx($date);
            }
        }
        //GTM-143
        $app->facilityConflictHandler
            = $_facilityConflictHandler;//if conflict and flag is true, execute method builder event conflict of facilities
        //END GTM-143
        // 変更前のイベントの取得
        $old_event = $app->getEvent($login, $event_id, $date);
        if ( ! $old_event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }
        if (is_a($old_event, 'GRN_Schedule_RepeatEvent')
            || is_a($old_event, 'GRN_Schedule_NormalEvent')
        ) {
            require_once("fw/i18n.csp");
            $current_timezone = \CB_I18N::getInstance()->getCurrentTimezone();
            if (is_a($old_event->setdatetime, 'CB_DateTime')) {
                $start_datetime_converted
                    = \CB_I18N::translateDatetimeTimezone($old_event->setdatetime,
                    $current_timezone, $old_event->timezone);
                $old_event->setdatetime = $start_datetime_converted;
            }
            if (is_a($old_event->enddatetime, 'CB_DateTime')) {
                $end_datetime_converted
                    = \CB_I18N::translateDatetimeTimezone($old_event->enddatetime,
                    $current_timezone, $old_event->end_timezone);
                $old_event->enddatetime = $end_datetime_converted;
            }
        }
        // 以降の変更の場合は、繰り返し開始日を以降の日付以外にすることはできない
        if (is_a($old_event, 'GRN_Schedule_RepeatEvent')
            && ($apply == 'after')
        ) {
            $start_year = array_key_exists('start_year', $G_INPUT)
                ? $G_INPUT['start_year'] : null;
            $start_month = array_key_exists('start_month', $G_INPUT)
                ? $G_INPUT['start_month'] : null;
            $start_day = array_key_exists('start_day', $G_INPUT)
                ? $G_INPUT['start_day'] : null;
            $set_date = $util->createDateTimeFromParameters($start_year,
                $start_month, $start_day);

            if (is_a($set_date, 'CB_Date')
                && $this_date->compare($set_date) != 0
            ) {
                cb_throw_error(E_GRN_SCHD_DENYMODIFY_REPEAT_SETDATE, null, null,
                    ['date' => cb_date_format('DateFull_YMDW', $this_date)]);
            }
        }

        if (is_array($old_event->facilities)
            && count($old_event->facilities) > 0
        ) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($old_event->facilities));
            foreach (array_keys($old_event->facilities) as $key) {
                $object = &$old_event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if ((is_array($old_event->facilities)
                         && count($old_event->facilities) > 0)
                        || is_a($old_event, 'GRN_Schedule_TemporaryEvent')
                           && $old_event->isORSearch()
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $old_event->facilities, 'OR')
                             && ((is_a($old_event->creator, 'CB_User')
                                  && $login_id != $old_event->creator->getOID())
                                 || is_string($old_event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者と共有メンバーしか変更を許していない場合
                    if ((is_array($old_event->facilities)
                         && count($old_event->facilities) > 0)
                        || is_a($old_event, 'GRN_Schedule_TemporaryEvent')
                           && $old_event->isORSearch()
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $old_event->facilities, 'OR')
                             && (
                                 (is_array($old_event->users)
                                  && ! array_key_exists($login_id,
                                         $old_event->users))
                                 || is_null($old_event->users)
                             )
                             && ((is_a($old_event->creator, 'CB_User')
                                  && $login_id
                                     !== $old_event->creator->getOID())
                                 || is_string($old_event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }
        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $old_event,
            ['read', 'modify'], $dynamic_role);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
        }

        $new_event = $util->createEvent($G_INPUT);
        $new_event->id = $old_event->id;
        if ($new_event->map != null) {
            $new_event->map = $old_event->map;
        }

        // GTM-1676
        if (is_a($new_event, 'GRN_Schedule_NormalEvent')) {
            $new_event->setUsingPurpose(cb_at($G_INPUT, 'using_purpose'));
        }
        // end GTM-1676

        // GTM-1622
        $attendanceStatusLogic = new AttendanceStatusLogic();
        $use_attendance_check
            = $attendanceStatusLogic->isEnableAttendanceCheck();

        // in case that OFF Attendance check
        // GRB-GRB-16916
        if ( ! $use_attendance_check) {
            $new_event->attendanceCheck = $old_event->isAttendanceCheckEvent()
                ? 1 : null;
        }
        // end GRB-GRB-16916

        // logging: add attendance_status_initialize
        if (cb_at($G_INPUT, 'show_refresh_status_dialog')) {
            $new_event->refreshAttendanceStatus = cb_at($G_INPUT,
                'refresh_status') ? 1 : 0;
        }

        if (array_key_exists('RP', $G_INPUT) && $G_INPUT['RP']) {
            $new_event->setdatetime = $old_event->setdatetime;
            $new_event->enddatetime = $old_event->enddatetime;
            $apply = array_key_exists('apply', $G_INPUT)
                ? $G_INPUT['apply'] : '';
            //GTM-143: HTVS updated expected of event and exclusive date 
            if (array_key_exists('hfExcept', $G_INPUT)) {
                $timestamp = new CB_TimeStampEx();
                require_once('schedule/repeat_event_logic.csp');
                $logic = GRN_Schedule_RepeatEventLogic::getInstance();
                $excepts = [];
                if (strlen($G_INPUT['hfExcept']) > 0) {
                    $excepts = explode(";", substr($G_INPUT['hfExcept'], 1));
                }
                $exceptDate = [];
                if (isset($old_event->except) && $apply == 'after') {
                    foreach ($old_event->except as $instance) {
                        $exceptDate[] = $instance;
                        //$logic->setExcept( $login, $old_event->id, $instance, $new_event->timezone, TRUE );
                    }
                }
                foreach ($excepts as $except) {
                    //CB_Date $date
                    $timestamp->unix_ts = intval($except);
                    $date = $timestamp->getDate();
                    $exceptDate[] = $date;
                    $logic->setExcept($login, $old_event->id, $date,
                        $new_event->timezone, true);
                }
                $new_event->except = $exceptDate;
            }

            if ($apply == 'after') {
                $new_event->setdate = $this_date;
            } elseif ($apply == 'this') {
                $new_event->setdate = $this_date;
                $new_event->enddate = $this_date;
            }
        } elseif (is_a($old_event, 'GRN_Schedule_TemporaryEvent')) {
            $new_event->setdates = $old_event->setdates;
            $new_event->users = $old_event->users;
            $new_event->groups = $old_event->groups;
            $new_event->facilities = $old_event->facilities;
        }

        // データのチェック
        $app->checkEventData($new_event);

        // 公開先のチェック
        ScheduleMemberLogic::getInstance()
                           ->checkModifyPublicToUser($new_event, $old_event);

        if (is_a($new_event, 'GRN_Schedule_NormalEvent')) {
            if (is_a($new_event->setdatetime, 'CB_DateTime')
                && is_a($new_event->enddatetime, 'CB_Date')
            ) {
                $new_event->enddatetime = null;
            }
        } elseif (is_a($new_event, 'GRN_Schedule_RepeatEvent')) {
            if ( ! $app->checkRepeatLimit($new_event->enddate,
                $new_event->setdate)
            ) {
                cb_throw_error(E_GRN_SCHD_REPEAT_LIMIT,
                    ['limit' => cb_date_format($app->getRepeatLimitDate($new_event->setdate))]);
            }
        }

        // 施設の予約期間,最大時間をチェック(運用管理者は無制限)
        require_once('schedule/facility_privilege.csp');
        $facility_privilege = GRN_Facility_Privilege_Logic::getInstance();
        if ($obj_facilities
            = $facility_privilege->getFacilitiesWithoutAuthority($login,
            $new_event->facilities)
        ) {
            if (is_a($new_event, 'GRN_Schedule_NormalEvent')) {
                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $new_event->enddatetime, $new_event->setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $new_event->enddatetime);
            } elseif (is_a($new_event, 'GRN_Schedule_RepeatEvent')) {
                $facility_logic->checkFacilityRepeat($obj_facilities);

                // Create today's CB_DateTime for facility max time check
                $ts = new CB_TimeStamp();
                $ts->unix_ts = time();
                $tsex = new CB_TimeStampEx($ts);

                $setdatetime = &$tsex->getDateTime();
                $setdatetime->setTime($new_event->settime);

                $enddatetime = &$tsex->getDateTime();
                $enddatetime->setTime($new_event->endtime);

                if ($enddatetime->compare($setdatetime) < 0) {
                    $enddatetime->moveDays(1);
                }

                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $enddatetime, $setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $new_event->enddate);
            }
        }

        if ($new_event instanceof \GRN_Schedule_RepeatEvent
            && is_array($new_event->facilities)
        ) {
            FacilityApprovalLogic::validateRepeatEventFacilitiesForEdit($new_event->facilities,
                $old_event->facilities, $login);
        }

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        // 通知のメンバーの取得
        $add_members = [];
        $mod_members = [];
        $del_members = [];
        if ($old_event->users && count($old_event->users) > 0) {
            // 人がいなくなったら削除
            if ( ! $new_event->users || count($new_event->users) == 0) {
                $del_members = $old_event->users;
            } else {
                foreach (array_keys($old_event->users) as $key_old) {
                    $old_user = &$old_event->users[$key_old];
                    if ( ! $old_user) {
                        continue;
                    }
                    $b_found = false;
                    foreach (array_keys($new_event->users) as $key_new) {
                        $new_user = &$new_event->users[$key_new];
                        if ( ! $new_user) {
                            continue;
                        }
                        if ($old_user->getOID() == $new_user->getOID()) {
                            // 見つかった場合は変更
                            $b_found = true;
                            $mod_members[] = &$old_user;
                            break;
                        }
                    }
                    // 見つからなかった場合は削除
                    if ( ! $b_found) {
                        $del_members[] = &$old_user;
                    }
                }
            }
        }
        // 新規に追加された人
        if ($new_event->users && count($new_event->users) > 0) {
            if ($old_event->users && count($old_event->users) > 0) {
                foreach (array_keys($new_event->users) as $key_new) {
                    $new_user = &$new_event->users[$key_new];
                    if ( ! $new_user) {
                        continue;
                    }
                    $b_found = false;
                    foreach (array_keys($old_event->users) as $key_old) {
                        $old_user = &$old_event->users[$key_old];
                        if ( ! $old_user) {
                            continue;
                        }
                        if ($old_user->getOID() == $new_user->getOID()) {
                            $b_found = true;
                            break;
                        }
                    }
                    if ( ! $b_found) {
                        $add_members[] = &$new_user;
                    }
                }
            } else {
                // 今までユーザーがいなかったのですべて新規登録
                $add_members = $new_event->users;
            }

        }
        // アクセス権チェック用
        $add_groups = null;
        $add_facilities = null;
        // 新規に追加された組織
        if ($new_event->groups && count($new_event->groups) > 0) {
            $add_groups = [];
            if ($old_event->groups && count($old_event->groups) > 0) {
                foreach (array_keys($new_event->groups) as $key_new) {
                    $new_group = &$new_event->groups[$key_new];
                    if ( ! $new_group) {
                        continue;
                    }
                    $b_found = false;
                    foreach (array_keys($old_event->groups) as $key_old) {
                        $old_group = &$old_event->groups[$key_old];
                        if ( ! $old_group) {
                            continue;
                        }
                        if ($old_group->getOID() == $new_group->getOID()) {
                            $b_found = true;
                            break;
                        }
                    }
                    if ( ! $b_found) {
                        $add_groups[] = &$new_group;
                    }
                }
            } else {
                // 今までユーザーがいなかったのですべて新規登録
                $add_groups = $new_event->groups;
            }

        }
        // 新規に追加された施設
        if ($new_event->facilities && count($new_event->facilities) > 0) {
            $add_facilities = [];
            if ($old_event->facilities && count($old_event->facilities) > 0) {
                foreach (array_keys($new_event->facilities) as $key_new) {
                    $new_facility = &$new_event->facilities[$key_new];
                    if ( ! $new_facility) {
                        continue;
                    }
                    $b_found = false;
                    foreach (array_keys($old_event->facilities) as $key_old) {
                        $old_facility = &$old_event->facilities[$key_old];
                        if ( ! $old_facility) {
                            continue;
                        }
                        if ($old_facility->getOID()
                            == $new_facility->getOID()
                        ) {
                            $b_found = true;
                            break;
                        }
                    }
                    if ( ! $b_found) {
                        $add_facilities[] = &$new_facility;
                    }
                }
            } else {
                $add_facilities = $new_event->facilities;
            }

        }

        //GTM-1676 invalidate removed facilities between 2 list facility (old, new)
        if (is_a($new_event, 'GRN_Schedule_NormalEvent')
            && is_a($old_event, 'GRN_Schedule_NormalEvent')
        ) {
            $facilityApprovalLogic = new FacilityApprovalLogic();
            $facilityApprovalLogic->invalidateFacilitiesForEventUpdate($old_event,
                $new_event);
            // process applying info for facilities
            $facilityApprovalLogic->processApplyingInfoFacilitiesForUpdate($old_event,
                $new_event);
        }
        //end GTM-1676

        $dynamic_roles = $uum->listGrantedRoles();
        // 追加された人/組織/施設のアクセス権のチェック
        if (count($add_members) > 0) {
            // ログインユーザーを抜く
            foreach (array_keys($add_members) as $key) {
                $add_user = &$add_members[$key];
                if ($add_user->getOID() == $login_id) {
                    unset($add_members[$key]);
                    break;
                }
            }

            $access = $acc_logic->evaluateAccesses($login, $add_members,
                ['read', 'add', 'modify'], $dynamic_roles, 'user', true);
            if (count($add_members) != count($access)) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
            }
        }
        if (is_array($add_groups) && count($add_groups) > 0) {
            $access = $acc_logic->evaluateAccesses($login, $add_groups,
                ['read', 'add', 'modify'], $dynamic_roles, 'group', true);
            if (count($add_groups) != count($access)) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
            }
        }
        if (is_array($add_facilities) && count($add_facilities) > 0) {
            $access = $acc_logic->evaluateAccesses($login, $add_facilities,
                ['read', 'add', 'modify'], $dynamic_roles, 'facility', true);
            if (count($add_facilities) != count($access)) {
                cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
            }
        }

        /* -------------- VCBSCH0010 START ----------------- */
        require_once('schedule/netmeeting_event_logic.csp');
        $vcb_event_logic = GRN_Netmeeting_EventLogic::getInstance();

        $vcb_input_data = null;
        $coop_data = null;

        // NETMEETING連携あり
        if ($vcb_available
            = $vcb_event_logic->isNetmeetingAvailable($new_event)
        ) {
            // 連携データ取得
            $coop_data
                = $vcb_event_logic->getNetmeetingCoopDataByEventId($event_id);

            // 時間のチェック
            $event_status
                = $vcb_event_logic->getEventStatus($old_event->setdatetime,
                $old_event->enddatetime);

            // 会議中予定の場合
            if (($event_status === GRN_NETMEETING_MEETING_STATUS_NOW)
                && isset($coop_data)
            ) {
                // 入力チェック
                if ($vcb_event_logic->checkNetmeetingInputNow_event($new_event,
                        $old_event, $coop_data) === false
                ) {
                    $vcb_event_logic->throwError();
                }
                // 連携エラーの場合は連携なし
                if ($coop_data->cooperation_status
                    != GRN_NETMEETING_COOPERATION_STATUS_COMPLETE
                ) {
                    // V-CUBE連携なし
                    $vcb_available = false;
                } else {
                    // NETMEETING入力値取得
                    if (($vcb_input_data
                        = $vcb_event_logic->getNetmeetingEventParam($new_event,
                        $login))
                    ) {
                        $vcb_event_logic->getNetmeetingInputParam($G_INPUT,
                            $vcb_input_data);

                        // 入力チェック
                        if ($vcb_event_logic->checkNetmeetingInputNow_input($vcb_input_data)
                            === false
                        ) {
                            $vcb_event_logic->throwError();
                        }
                    }
                }
            } // 終了予定の場合
            elseif (($event_status === GRN_NETMEETING_MEETING_STATUS_END)
                    && isset($coop_data)
            ) {
                // 入力チェック
                if ($vcb_event_logic->checkNetmeetingInputEnd($new_event,
                        $old_event, $coop_data) === false
                ) {
                    $vcb_event_logic->throwError();
                }
                // V-CUBE連携なし
                $vcb_available = false;
            } // 開始前予定の場合
            else {
                // NETMEETING入力値取得
                if (($vcb_input_data
                    = $vcb_event_logic->getNetmeetingEventParam($new_event,
                    $login))
                ) {
                    $vcb_event_logic->getNetmeetingInputParam($G_INPUT,
                        $vcb_input_data);

                    // 入力チェック
                    if ($vcb_event_logic->checkNetmeetingInput($vcb_input_data)
                        === false
                    ) {
                        $vcb_event_logic->throwError();
                    }
                }
            }
        }
        /* -------------- VCBSCH0010 END   ----------------- */

        //GTM-1136
        require_once('schedule/system_logic.csp');
        $systemlogic = GRN_Schedule_SystemLogic::getInstance();
        if ($systemlogic->getAllowFileAttachment() == '1') {
            if (cb_at($G_INPUT, 'allow_file_attachment')) {
                //get files
                $tmp_key = grn_get_temporary_key();
                $files = grn_get_attached_files($target_name . $tmp_key,
                    'schedule');

                require_once('grn/upload.csp');
                $upload_files = GRN_UploadFile::getUploadedFiles(cb_at($G_INPUT,
                    'upload_ticket'), cb_at($G_INPUT, 'upload_fileids'), true);
                foreach ($upload_files as $fid => $file) {
                    $files[$fid] = $file;
                }

                require_once('schedule/file.csp');
                $fm = GRN_Schedule_FileManager::getInstance();
                $current_files = $fm->getFiles($event_id);

                //delete files
                foreach (array_keys($current_files) as $key) {
                    if ( ! array_key_exists($key, $files)) {
                        $fm->deleteFile($event_id, $key);
                    } else {
                        unset($files[$key]);
                    }
                }

                //add files
                require_once('schedule/event_base_logic.csp');
                $event_base_logic = new GRN_Schedule_EventBaseLogic();
                $event_table = $event_base_logic->_getEventTable();
                $event_row = $event_table->getRow($event_id);
                if ( ! $event_row) {
                    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
                }

                foreach (array_keys($files) as $key) {
                    $fm->addFile($login, $event_row, $files[$key]);
                }
            }
        }
        //End GTM-1136

        // 登録情報
        $new_event->modifier = &$login;
        $eid = $app->modifyEvent($new_event, $this_date,
            $apply);
        $new_event->id = $eid;

        // 施設があれば、カスタマイズ項目を登録する
        if (is_array($new_event->facilities)
            && count($new_event->facilities) > 0
        ) {
            // カスタマイズ項目登録
            $facility_logic->registerData($eid);
        } // 施設が削除された場合
        elseif (is_array($old_event->facilities)
                && count($old_event->facilities) > 0
        ) {
            // カスタマイズ項目を削除する
            $facility_logic->removeData($eid);
        }

        // GTM-1622 GRB-16952
        if ($old_event->isAttendanceCheckEvent()) {
            if (( ! $new_event->isAttendanceCheckEvent())
                || (cb_at($G_INPUT, 'refresh_status') && $use_attendance_check)
            ) {
                // delete all attendance check data in table tab_grn_schedule_event_attendance_status
                $attendanceStatusLogic->deleteAttendanceStatusByEventId($new_event->id);
                if ( ! $new_event->isAttendanceCheckEvent()) {
                    $attendanceStatusLogic->deleteLastAccessTimeOfEvent($new_event->id);
                }
            } else {
                // delete data attendance check of user which was removed for attendees list
                if ($new_event->isAttendanceCheckEvent()
                    && count($del_members) > 0
                ) {
                    $del_members_id = [];
                    foreach ($del_members as $del_member) {
                        $del_members_id[] = $del_member->getOID();
                    }
                    $attendanceStatusLogic->deleteAttendanceStatusByEventIdAndUsersId($new_event->id,
                        $del_members_id);
                }
            }
        }

        // GRN2-4506
        // 通知用にnew_eventのsetdatetime、enddatetimeを変更する
        if ($new_event instanceof GRN_Schedule_RepeatEvent) {
            require_once('fw/i18n.csp');
            if ($new_event->setdatetime instanceof CB_DatetimeEx) {
                // 通常予定の繰り返しは、そのまま変換する
                $settimestamp = new CB_TimeStampEx(null, $new_event->timezone);
                $settimestamp->setDateTime($new_event->setdatetime,
                    CB_I18N::getInstance()->getCurrentTimezone());
                $new_event->setdatetime = $settimestamp->getDateTime();
                if (isset($new_event->enddatetime)) {
                    $endtimestamp = new CB_TimeStampEx(null,
                        $new_event->timezone);
                    $endtimestamp->setDateTime($new_event->enddatetime,
                        CB_I18N::getInstance()->getCurrentTimezone());
                    $new_event->enddatetime = $endtimestamp->getDateTime();
                } else {
                    $new_event->enddateitme = $new_event->setdatetime;
                }
            } elseif ($new_event->setdatetime instanceof CB_Date) {
                // 終日予定の場合、イベントとユーザーのタイムゾーンの時差を見る。
                // その時差によって、終日予定が1日早くなっているかどうか確認する。
                $dateTimeZoneEvent = new DateTimeZone($new_event->timezone);
                $dateTimeZoneUser = new DateTimeZone(CB_I18N::getInstance()
                                                            ->getCurrentTimezone());
                $dateTimeEvent = new DateTime("now", $dateTimeZoneEvent);
                $dateTimeUser = new DateTime("now", $dateTimeZoneUser);
                $timeOffset
                    = $dateTimeZoneEvent->getOffset($dateTimeUser);
                if ($timeOffset <= 0) {
                    // イベントのタイムゾーンがユーザーのタイムゾーンと同じか、遅い場合。
                    // 開始日はイベントのタイムゾーンと同じなので、そのまま。終了日を同日にしておく。
                    $new_event->enddatetime = $new_event->setdatetime;
                } else {
                    // イベントのタイムゾーンがユーザーのタイムゾーンより早い場合。
                    // イベントのタイムゾーンの開始日は1日後となるので、変更する。
                    // enddatetimeはsetdatetimeの1日後になっているため、それを利用する。
                    $new_event->setdatetime = $new_event->enddatetime;
                }
            }
        }
        // 今日を求める
        $tsex = new CB_TimeStampEx();
        $today = $tsex->getDate();

        if (array_key_exists('RP', $G_INPUT) && ($apply == 'this')) {
            $bdate = $this_date;
        } else {
            $bdate = $new_event->getFirstDate($today);
        }

        if ($today->compare($bdate) <= 0
            || (is_a($new_event, 'GRN_Schedule_RepeatEvent')
                && $today->compare($new_event->enddate) <= 0)
        ) {
            // tuning GRB-15157
            // param for load and cache setting
            $param_loadAndCache = ['user', 'locale'];

            require_once('grn/application.csp');
            $app_locator = GRN_ApplicationLocator::instance();
            $arr_members = $add_members + $mod_members + $del_members;
            if (count($arr_members) > 0) {
                $app_locator->loadAndCacheUsersSetting($arr_members,
                    $param_loadAndCache);
            }

            $remote_notification_list = [];

            // 登録の通知
            if (count($add_members) > 0) {
                $title = _schedule_command_modify_getNotifyTitle($new_event);
                $app->setNotify($add_members, $login, $new_event, $bdate,
                    $title, '', GRN_SCHEDULE_NOTIFY_ENTRY, $tsex);
                $remote_notification_list[GRN_SCHEDULE_NOTIFY_ENTRY]
                    = $add_members;
            }

            // 変更の通知
            if (count($mod_members) > 0) {
                $title = _schedule_command_modify_getNotifyTitle($new_event);
                $app->setNotify($mod_members, $login, $new_event, $bdate,
                    $title, '', GRN_SCHEDULE_NOTIFY_MODIFY, $tsex);
                $remote_notification_list[GRN_SCHEDULE_NOTIFY_MODIFY]
                    = $mod_members;
            }

            // 削除の通知
            if (count($del_members) > 0) {
                $title = _schedule_command_modify_getNotifyTitle($new_event);
                $app->setNotify($del_members, $login, $new_event, $bdate,
                    $title, '', GRN_SCHEDULE_NOTIFY_DELETE, $tsex);
                $remote_notification_list[GRN_SCHEDULE_NOTIFY_DELETE]
                    = $del_members;
            }
            if (count($remote_notification_list) > 0) {
                $app->forwardMail($new_event, $remote_notification_list,
                    $login);
                $app->sendPushNotification(
                    $new_event, $remote_notification_list, $login, true, $bdate,
                    null);
            }

            // GTM-1676
            if (is_a($new_event, 'GRN_Schedule_NormalEvent')
                && is_a($old_event, 'GRN_Schedule_NormalEvent')
            ) {
                $app->sendFacilityApprovalRequestNotifyForUpdate($old_event,
                    $new_event, $login, $tsex);
                // GTM-1675
                $app->forwardFacilityRelyMailForUpdate($old_event, $new_event);
                // end GTM-1675
                $app->sendPushNotificationOfUpdatedFacilityRequest($old_event,
                    $new_event);
            }
            // end GTM-1676

            // 通知先の指定がある場合
            if ($new_event->private && is_array($new_event->notify_address)
                && count($new_event->notify_address) > 0
            ) {
                $title = _schedule_command_modify_getNotifyTitle($new_event);
                $app->sendNotificationsToPublic($login, $new_event, $bdate, '',
                    $tsex, $title, true, true, GRN_SCHEDULE_NOTIFY_MODIFY);
            }
        }
        /**
         * 最近選択した施設を更新
         */
        require_once('schedule/facility_system_logic.csp');
        $f_his = GRN_Facility_HistoryManager::getInstance();
        $f_his->updateHistory($login, $new_event);

        /* -------------- VCBSCH0010 START ----------------- */
        // NETMEETING連携あり
        if ($vcb_available) {
            // 入力値あり
            if (isset($vcb_input_data)) {
                // 連携データあり
                if (isset($coop_data)) {
                    // 予約変更
                    $vcb_event_logic->cmmandNetmeetingReservationUpdate($new_event->id,
                        $coop_data, $vcb_input_data);
                } // 連携データなし
                else {
                    // 予約追加
                    $vcb_event_logic->cmmandNetmeetingReservationAdd($new_event->id,
                        $vcb_input_data);
                }
            } // 入力値なし
            else {
                // 選択されている施設がある場合
                if ($vcb_event_logic->getNetmeetingFacilityById($old_event)) {
                    // 予約削除
                    $vcb_event_logic->cmmandNetmeetingReservationDelete($new_event->id);
                }
            }
        }
        /* -------------- VCBSCH0010 END   ----------------- */

        /* -------------- kintone relation START ----------------- */
        if (defined('ON_FOREST')
            && is_a($new_event, 'GRN_Schedule_NormalEvent')
        ) {
            // get login user is available for kintone
            require_once('kintone/Logic.csp');
            require_once('fw/slash_util.csp');
            $kintone_available = (GRN_Kintone_Logic::isAvailable()
                                  && CB_SlashUtil::isGaiaLicenseapiRequest());
            if ($kintone_available) {
                $schedule_kintone_logic
                    = new grn\schedule\scheduleKintoneAppRelationLogic();
                if (preg_match('/(.*)(;#)(\d+)$/', $new_event->menu, $matches)
                    && $new_event->menucolor <= 0
                ) {
                    $menuName = $matches[1];
                } else {
                    $menuName = $new_event->menu;
                }
                $schedule_kintone_logic->modifyRelationRecord($eid, $menuName,
                    $G_INPUT);
            }
        }
        /* -------------- kintone relation END ----------------- */

        // あっちゃいけないけどどうしよう？
        if ( ! $bdate) {
            $bdate = new CB_DateEx($today);
        }

        $b_view = true;
        // 非公開の場合
        if ($new_event->private != 0) {
            $b_view = false;
            if (is_array($new_event->users) && count($new_event->users)) {
                foreach (array_keys($new_event->users) as $key) {
                    $user = &$new_event->users[$key];
                    if ( ! $user) {
                        continue;
                    }

                    // 自分がいる場合は詳細画面に
                    if ($user->getOID() == $login_id) {
                        $b_view = true;
                        break;
                    }
                }
            }
            // 自分がいない場合は、登録者を見る
            if ( ! $b_view) {
                if (is_a($new_event->creator, 'CB_User')
                    && $new_event->creator->getOID() == $login_id
                ) {
                    $b_view = true;
                }
            }
        }

        if ($b_view) {
            // リダイレクト先の情報の設定
            $user_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid']
                : $login->getOID();
            if ( ! $user_id) {
                $user_id = $login->getOID();
            }

            $b_contain = false;
            $facility_ids = null;
            $member_ids = null;
            if ((mb_substr($user_id, 0, 1)) === 'f') {
                $fid = mb_substr($user_id, 1);
                $facility_ids = array_key_exists('sITEM', $G_INPUT)
                    ? $G_INPUT['sITEM'] : false;
                if (is_array($facility_ids) && count($facility_ids) > 0) {
                    foreach ($facility_ids as $key) {
                        if ($key === $fid) {
                            $b_contain = true;
                            break;
                        }
                    }
                }
            } else {
                $member_ids = array_key_exists('sUID', $G_INPUT)
                    ? $G_INPUT['sUID'] : false;
                if (is_array($member_ids) && count($member_ids) > 0) {
                    foreach ($member_ids as $key) {
                        if ($key === $user_id) {
                            $b_contain = true;
                            break;
                        }
                    }
                }
            }

            // 登録した内容にいない場合
            if ( ! $b_contain) {
                $user_id = null;

                if (is_null($member_ids)) {
                    $member_ids = array_key_exists('sUID', $G_INPUT)
                        ? $G_INPUT['sUID'] : false;
                }

                if (is_array($member_ids) && count($member_ids) > 0) {
                    $user_id = reset($member_ids);
                }

                if (is_null($user_id)) {
                    if (is_null($facility_ids)) {
                        $facility_ids = array_key_exists('sITEM', $G_INPUT)
                            ? $G_INPUT['sITEM'] : false;
                    }

                    if (is_array($facility_ids) && count($facility_ids) > 0) {
                        $user_id = 'f' . reset($facility_ids);
                    }
                }
            }

            // GRN35-1122
            $link = cb_get_full_url('schedule/view', [
                'event'       => $eid,
                'bdate'       => $bdate->format(),
                'uid'         => $user_id,
                'referer_key' => $referer_key
            ]);
            echo json_encode(['link' => $link]);
            cb_safe_exit();
            // GRN35-1122
        }

        // 自分がいなくなった場合で見れない予定の場合は、一覧画面に飛ぶ
        if (is_array($referer)) {
            $page = $referer['page'];
            unset($referer['page']);
            unset($referer['name']);
            // GRN35-1122
            $link = cb_get_full_url($page, $referer);
            echo json_encode(['link' => $link]);
            cb_safe_exit();
            // GRN35-1122
        } else {
            // GRN35-1122
            $link = cb_get_full_url('schedule/index');
            echo json_encode(['link' => $link]);
            cb_safe_exit();
            // GRN35-1122
        }

    } else {
        // GRN35-1122
        header(CB_ERROR_HEADER . 'error_validation');
        echo json_encode(['validation' => 'false']);
        cb_safe_exit();
        // GRN35-1122
    }
}


function _schedule_command_modify_getNotifyTitle($new_event)
{
    require_once('schedule/view_util.csp');
    $util = GRN_Schedule_View_Util::getInstance();

    return $util->getNotifyTitle(html_entity_decode($new_event->getTitle()));
}
