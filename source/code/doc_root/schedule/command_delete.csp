<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    $referer_key = array_key_exists('referer_key', $G_INPUT)
        ? $G_INPUT['referer_key'] : null;
    $referer = null;
    if ($referer_key) {
        require_once('fw/session_manager.csp');
        $session_manager = CB_SessionManager::getInstance();
        $session = $session_manager->getSession('schedule.referer');
        $referer = $session->get($referer_key);
        $t->assign('referer_key', $referer_key);
    }

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'schedule/delete';
    SmartyValidate::register_form($target_name);

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        // -------- 
        // brabrabra after success
        // --------
        $event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event']
            : null;
        $str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate']
            : null;
        $user_id = array_key_exists('uid', $G_INPUT) ? $G_INPUT['uid'] : null;
        $group_id = array_key_exists('gid', $G_INPUT) ? $G_INPUT['gid'] : null;
        $apply = array_key_exists('apply', $G_INPUT) ? $G_INPUT['apply']
            : null;
        $member = array_key_exists('member', $G_INPUT) ? $G_INPUT['member']
            : null;
        $did = array_key_exists('did', $G_INPUT) ? $G_INPUT['did'] : null;

        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();

        global $G_container_base;
        $uum = $G_container_base->getInstance('uum');

        $login = $uum->getLoginUser();
        $login_id = $login->getOID();

        $date = new CB_Date();
        if ( ! $date->parse($str_date)) {
            $date = null;
        }

        $event = $app->getEvent($login, $event_id, $date);
        if ( ! $event) {
            cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
        }

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($login, $event,
            ['read', 'delete'], $dynamic_role);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
        }
        if ($access['delete'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_DELETE);
        }

        $temporary_dates = null;
        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
            // 繰り返しの変更条件が入っていないのでNG
            if ( ! $apply) {
                cb_throw_error(E_GRN_SCHD_NOT_REPEAT_DELET_TYPE);
            }
            if ($apply != 'all') {
                if (is_null($date)) {
                    cb_throw_error(E_GRN_SCHD_NOT_SPECIFIED_DATE);
                }
            }
        } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
            if ( ! $did) {
                cb_throw_error(E_GRN_SCHD_NOT_TEMPORARY_DELET_DATE);
            }
            $temporary_dates = $app->getEventDate($event->id, $did);
            if ( ! $temporary_dates) {
                cb_throw_error(E_GRN_SCHD_NOT_FOUND_TEMPORARY_DATE);
            }
            $date = $temporary_dates['setdatetime'];
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();
        if (is_array($event->facilities) && count($event->facilities) > 0) {
            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach (array_keys($event->facilities) as $key) {
                $object = &$event->facilities[$key];
                $faid = $object->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // 登録者にのみ変更を許可する
                if ($modify_user === 'creator') {
                    // 施設で登録者しか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                            && $event->isORSearch())
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id != $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                } // 登録者と共有メンバーに変更を許可する
                elseif ($modify_user === 'member') {
                    // 施設で登録者と共有メンバーしか変更を許していない場合
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                        || (is_a($event, 'GRN_Schedule_TemporaryEvent')
                            && $event->isORSearch())
                    ) {
                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        if ( ! $privilege_logic->hasPrivilegeOfFacilities($login,
                                $event->facilities, 'OR')
                             && (
                                 (is_array($event->users)
                                  && ! array_key_exists($login_id,
                                         $event->users))
                                 || is_null($event->users)
                             )
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id !== $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
                        }
                    }
                }
            }
        }

        $b_notify = true;
        $tsex = new CB_TimeStampEx();
        $notify_date = $tsex->getDate();
        // 参加イベントから抜ける
        if ($member) {
            $bFind = false;
            foreach (array_keys($event->users) as $index) {
                $user = &$event->users[$index];
                if ($user->getOID() == $login_id) {
                    unset($event->users[$index]);
                    $event->modifier = &$login;
                    if (is_a($event, 'GRN_Schedule_RepeatEvent')
                        && ($apply == 'after')
                    ) {
                        $event->setdate = $date;
                    }

                    $event_id = $app->modifyEventWithoutDateTime($event, $date,
                        $apply);

                    if (is_a($event, 'GRN_Schedule_RepeatEvent')
                        && ($apply == 'this')
                    ) {
                        $bdate = $date;
                    } else {
                        $bdate = $event->getFirstDate($notify_date);
                    }

                    $title = '';
                    //GRN2-596
                    $b_notify = true;
                    if (is_null($bdate) || $bdate === false) {
                        $bdate = $notify_date;
                        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                            if ($notify_date->compare($event->enddate) > 0) {
                                $b_notify = false;
                            }
                        }
                    } else {
                        if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                            if ($notify_date->compare($bdate) > 0
                                && $notify_date->compare($event->enddate) > 0
                            ) {
                                $b_notify = false;
                            }
                        } else {
                            if ($notify_date->compare($bdate) > 0) {
                                $b_notify = false;
                            }
                        }
                    }

                    // GRB-16976 Remove attendance status when delete from my schedule
                    if ($event instanceof \GRN_Schedule_NormalEvent) {
                        $attendanceStatLogic
                            = new \grn\schedule\AttendanceStatusLogic();
                        $attendanceStatLogic->deleteAttendanceStatusByEventIdAndUserId($event->id,
                            $login_id);
                    }

                    /* -------------- VCBSCH0010 START ----------------- */
                    require_once('schedule/netmeeting_event_logic.csp');
                    $vcb_event_logic = GRN_Netmeeting_EventLogic::getInstance();

                    // NETMEETING連携あり
                    if ($vcb_event_logic->isNetmeetingAvailable($event)) {
                        // 選択されている施設がある場合
                        if ($vcb_event_logic->getNetmeetingFacilityById($event)) {
                            // 招待者削除
                            $vcb_event_logic->cmmandNetmeetingInviteDelete($event->id,
                                $login_id);
                        }
                    }
                    /* -------------- VCBSCH0010 END   ----------------- */

                    // GRN2-4583
                    $event->id = $event_id;

                    // ----- GRN2-4506 -----
                    // 通知のタイムゾーン対応のために、setdatetimeなどを変換する。
                    if ($event instanceof GRN_Schedule_RepeatEvent) {
                        require_once('fw/i18n.csp');
                        if ($event->setdatetime instanceof CB_DatetimeEx) {
                            // 通常予定の繰り返しは、そのまま変換する
                            $settimestamp = new CB_TimeStampEx(null,
                                $event->timezone);
                            $settimestamp->setDateTime($event->setdatetime,
                                CB_I18N::getInstance()->getCurrentTimezone());
                            $event->setdatetime = $settimestamp->getDateTime();
                            if (isset($event->enddatetime)) {
                                $endtimestamp = new CB_TimeStampEx(null,
                                    $event->timezone);
                                $endtimestamp->setDateTime($event->enddatetime,
                                    CB_I18N::getInstance()
                                           ->getCurrentTimezone());
                                $event->enddatetime
                                    = $endtimestamp->getDateTime();
                            } else {
                                $event->enddateitme = $event->setdatetime;
                            }
                        } elseif ($event->setdatetime instanceof CB_Date) {
                            // 終日予定の場合、イベントとユーザーのタイムゾーンの時差を見る。
                            // その時差によって、終日予定が1日早くなっているかどうか確認する。
                            $dateTimeZoneEvent
                                = new DateTimeZone($event->timezone);
                            $dateTimeZoneUser
                                = new DateTimeZone(CB_I18N::getInstance()
                                                          ->getCurrentTimezone());
                            $dateTimeEvent = new DateTime("now",
                                $dateTimeZoneEvent);
                            $dateTimeUser = new DateTime("now",
                                $dateTimeZoneUser);
                            $timeOffset
                                = $dateTimeZoneEvent->getOffset($dateTimeUser);
                            if ($timeOffset <= 0) {
                                // イベントのタイムゾーンがユーザーのタイムゾーンと同じか、遅い場合。
                                // 開始日はイベントのタイムゾーンと同じなので、そのまま。終了日を同日にしておく。
                                $event->enddatetime = $event->setdatetime;
                            } else {
                                // イベントのタイムゾーンがユーザーのタイムゾーンより早い場合。
                                // イベントのタイムゾーンの開始日は1日後となるので、変更する。
                                // enddatetimeはsetdatetimeの1日後になっているため、それを利用する。
                                $event->setdatetime = $event->enddatetime;
                            }
                        }
                    } elseif ($event instanceof GRN_Schedule_NormalEvent) {
                        // 通常予定（終日以外）も、イベントのタイムゾーンに変更する
                        if ($event->setdatetime instanceof CB_DateTimeEx) {
                            require_once('fw/i18n.csp');
                            $settimestamp = new CB_TimeStampEx(null,
                                $event->timezone);
                            $settimestamp->setDateTime($event->setdatetime,
                                CB_I18N::getInstance()->getCurrentTimezone());
                            $event->setdatetime = $settimestamp->getDateTime();
                            if (isset($event->enddatetime)) {
                                $endtimestamp = new CB_TimeStampEx(null,
                                    $event->timezone);
                                $endtimestamp->setDateTime($event->enddatetime,
                                    CB_I18N::getInstance()
                                           ->getCurrentTimezone());
                                $event->enddatetime
                                    = $endtimestamp->getDateTime();
                            } else {
                                $event->enddatetime = $event->setdatetime;
                            }
                        }
                    }
                    // ----- GRN2-4506 -----

                    if ($b_notify && is_array($event->users)
                        && count($event->users) > 0
                    ) {
                        $title
                            = _schedule_command_delete_getNotifyTitle($event);
                        $app->setNotify($event->users, $login, $event, $bdate,
                            $title, '', GRN_SCHEDULE_NOTIFY_MODIFY, $tsex);
                        $app->forwardMail($event,
                            [GRN_SCHEDULE_NOTIFY_MODIFY => $event->users],
                            $login);
                        $app->sendPushNotification(
                            $event,
                            [GRN_SCHEDULE_NOTIFY_MODIFY => $event->users],
                            $login, true, $bdate, null);
                    }

                    // 通知先の指定がある場合
                    if ($b_notify && $event->private
                        && is_array($event->notify_address)
                        && count($event->notify_address) > 0
                    ) {
                        $title
                            = _schedule_command_delete_getNotifyTitle($event);
                        $app->sendNotificationsToPublic($login, $event, $bdate,
                            '', $tsex, $title, false, true,
                            GRN_SCHEDULE_NOTIFY_MODIFY);
                    }

                    break;
                }
            }

        } // イベントの削除
        else {
            /* -------------- VCBSCH0010 START ----------------- */
            require_once('schedule/netmeeting_event_logic.csp');
            $vcb_event_logic = GRN_Netmeeting_EventLogic::getInstance();

            // NETMEETING連携あり
            if ($vcb_event_logic->isNetmeetingAvailable($event)) {
                // 選択されている施設がある場合
                if ($vcb_event_logic->getNetmeetingFacilityById($event)) {
                    // 予約削除
                    $vcb_event_logic->cmmandNetmeetingReservationDelete($event->id);
                }
            }
            /* -------------- VCBSCH0010 END   ----------------- */

            $title = '';
            //GRN2-596
            $b_notify = true;
            if (is_null($date)) {
                $date = $notify_date;
                if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                    if ($notify_date->compare($event->enddate) > 0) {
                        $b_notify = false;
                    }
                }
            } else {
                if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
                    if ($notify_date->compare($date) > 0
                        && $notify_date->compare($event->enddate) > 0
                    ) {
                        $b_notify = false;
                    }
                } else {
                    if ($notify_date->compare($date) > 0) {
                        $b_notify = false;
                    }
                }
            }

            // ----- GRN2-4506 -----
            // 通知のタイムゾーン対応のために、setdatetimeなどを変換する。
            if ($event instanceof GRN_Schedule_RepeatEvent) {
                require_once('fw/i18n.csp');
                if ($event->setdatetime instanceof CB_DatetimeEx) {
                    // 通常予定の繰り返しは、そのまま変換する
                    $settimestamp = new CB_TimeStampEx(null, $event->timezone);
                    $settimestamp->setDateTime($event->setdatetime,
                        CB_I18N::getInstance()->getCurrentTimezone());
                    $event->setdatetime = $settimestamp->getDateTime();
                    if (isset($event->enddatetime)) {
                        $endtimestamp = new CB_TimeStampEx(null,
                            $event->timezone);
                        $endtimestamp->setDateTime($event->enddatetime,
                            CB_I18N::getInstance()->getCurrentTimezone());
                        $event->enddatetime = $endtimestamp->getDateTime();
                    } else {
                        $event->enddateitme = $event->setdatetime;
                    }
                } elseif ($event->setdatetime instanceof CB_Date) {
                    // 終日予定の場合、イベントとユーザーのタイムゾーンの時差を見る。
                    // その時差によって、終日予定が1日早くなっているかどうか確認する。
                    $dateTimeZoneEvent = new DateTimeZone($event->timezone);
                    $dateTimeZoneUser = new DateTimeZone(CB_I18N::getInstance()
                                                                ->getCurrentTimezone());
                    $dateTimeEvent = new DateTime("now",
                        $dateTimeZoneEvent);
                    $dateTimeUser = new DateTime("now", $dateTimeZoneUser);
                    $timeOffset
                        = $dateTimeZoneEvent->getOffset($dateTimeUser);
                    if ($timeOffset <= 0) {
                        // イベントのタイムゾーンがユーザーのタイムゾーンと同じか、遅い場合。
                        // 開始日はイベントのタイムゾーンと同じなので、そのまま。終了日を同日にしておく。
                        $event->enddatetime = $event->setdatetime;
                    } else {
                        // イベントのタイムゾーンがユーザーのタイムゾーンより早い場合。
                        // イベントのタイムゾーンの開始日は1日後となるので、変更する。
                        // enddatetimeはsetdatetimeの1日後になっているため、それを利用する。
                        $event->setdatetime = $event->enddatetime;
                    }
                }
            } elseif ($event instanceof GRN_Schedule_NormalEvent
                      || $event instanceof GRN_Schedule_TemporaryEvent
            ) {
                // 通常予定（終日以外）も、イベントのタイムゾーンに変更する
                if ($event->setdatetime instanceof CB_DateTimeEx) {
                    require_once('fw/i18n.csp');
                    $settimestamp = new CB_TimeStampEx(null, $event->timezone);
                    $settimestamp->setDateTime($event->setdatetime,
                        CB_I18N::getInstance()->getCurrentTimezone());
                    $event->setdatetime = $settimestamp->getDateTime();
                    if (isset($event->enddatetime)) {
                        $endtimestamp = new CB_TimeStampEx(null,
                            $event->timezone);
                        $endtimestamp->setDateTime($event->enddatetime,
                            CB_I18N::getInstance()->getCurrentTimezone());
                        $event->enddatetime = $endtimestamp->getDateTime();
                    } else {
                        $event->enddatetime = $event->setdatetime;
                    }
                }
            }
            // ----- GRN2-4506 -----

            $event_type = $event->getEventType();
            // 削除前に通知（別に消えないから後でもいいけど）
            if ($b_notify && is_array($event->users)
                && count($event->users) > 0
            ) {
                $title = _schedule_command_delete_getNotifyTitle($event);
                $app->setNotify($event->users, $login, $event, $date, $title,
                    '', GRN_SCHEDULE_NOTIFY_DELETE, $tsex);
                $app->forwardMail($event,
                    [GRN_SCHEDULE_NOTIFY_DELETE => $event->users], $login,
                    $did);
                $app->sendPushNotification(
                    $event, [GRN_SCHEDULE_NOTIFY_DELETE => $event->users],
                    $login, true, $date, $did);
            }

            // 通知先の指定がある場合
            if ($b_notify && $event->private && is_array($event->notify_address)
                && count($event->notify_address) > 0
            ) {
                $title = _schedule_command_delete_getNotifyTitle($event);
                $app->sendNotificationsToPublic($login, $event, $date, '',
                    $tsex, $title, false, true, GRN_SCHEDULE_NOTIFY_DELETE,
                    $did);
            }

            if (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
                $date = $did;
            }

            // 削除
            $app->deleteEvent($login, $event_id, $event_type, $date, $apply);
        }

        if (is_array($referer)) {
            $page = $referer['page'];
            unset($referer['page']);
            unset($referer['name']);
            //delete gid in case virtual
            if (isset($referer['gid']) && $referer['gid'] == 'virtual') {
                unset($referer['gid']);
            }

            cb_redirect($page, $referer);
        } else {
            cb_redirect('schedule/index');
        }
    } else {
        // if error, show the source form

        //Assign Template Name
        $t->setPageInfo($target_name);

        include('_delete.csp');

        $t->display('schedule/delete.tpl');
    }
}

function _schedule_command_delete_getNotifyTitle($event)
{
    require_once('schedule/notification.csp');
    $util = GRN_Schedule_Notify_Logic::getInstance();

    return $util->getNotifyTitle(html_entity_decode($event->getTitle()));
}

