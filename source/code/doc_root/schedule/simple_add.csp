<?php

use grn\grn\Validate;
use grn\schedule\AttendanceStatusLogic;
use grn\schedule\ScheduleFacilityApprovalSetting;

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);
$G_state_set->set("error_page_type", "json");

global $G_container_base;
/* @var GRN_Uum $uum */
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();
$dynamic_roles = $uum->listGrantedRoles();

// 今日を求める
$str_date = cb_at($G_INPUT, 'bdate');
$tsex = new CB_TimeStampEx();
$today = $tsex->getDate();

$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}
$t->assign('bdate', $date->format());
$t->assign('login_id', $login_id);

$users_info = [];
$facilities_info = [];
$users_id = [];
$facilities_id = [];
$groups_id = [];
$no_add_permission_users_id = [];
$no_add_permission_groups_id = [];
$no_add_permission_users_groups_info = [];
$no_add_permission_facilities = [];
$need_login_user = array_key_exists('members', $G_INPUT)
                   === false;

$members = cb_at($G_INPUT, 'members');
if ($members) {
    $members = explode(",", $members);
    foreach ($members as $member) {
        $prefix = mb_substr($member, 0, 1);
        if ($prefix === 'g') {
            $groups_id[] = mb_substr($member, 1);
        } elseif ($prefix === 'f') {
            $facilities_id[] = mb_substr($member, 1);
        } else {
            if (Validate::isNumber($member)) {
                $users_id[] = $member;
            }
        }
    }
} else {
    $members = [];
}

$user_id = cb_at($G_INPUT, 'uid');
$group_id = cb_at($G_INPUT, 'gid');

if ($user_id !== $login_id && ! in_array($user_id, $members)) {
    array_push($members, $user_id);
}

if (mb_substr($user_id, 0, 1) === 'g') {
    $user_id = mb_substr($user_id, 1);
    if ( ! in_array($user_id, $groups_id)) {
        array_push($groups_id, $user_id);
    }
} elseif (mb_substr($user_id, 0, 1) === 'f') {
    $user_id = mb_substr($user_id, 1);
    if ( ! in_array($user_id, $facilities_id)) {
        array_push($facilities_id, $user_id);
    }
} else {
    if ($user_id !== $login_id && Validate::isNumber($user_id)
        && ! in_array($user_id, $users_id)
    ) {
        array_push($users_id, $user_id);
    }
}
// add login user
if ($need_login_user) {
    if ( ! in_array($login_id, $members)) {
        array_push($members, $login_id);
    }
    if ( ! in_array($login_id, $users_id)) {
        array_push($users_id, $login_id);
    }
}

require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
if (count($users_id) > 0) {
    $evaluated_users = $acc_logic->evaluateAccessesById($login,
        $users_id, ['add'], $dynamic_roles, 'user', true);
    $no_add_permission_users_id = array_diff($users_id, $evaluated_users);
    $users_id = $evaluated_users;
}
if (count($groups_id) > 0) {
    $evaluated_groups = $acc_logic->evaluateAccessesById($login,
        $groups_id, ['add'], $dynamic_roles, 'group', true);
    $no_add_permission_groups_id = array_diff($groups_id, $evaluated_groups);
    $groups_id = $evaluated_groups;
}
if (count($facilities_id) > 0) {
    $evaluated_facilities = $acc_logic->evaluateAccessesById($login,
        $facilities_id, ['add'], $dynamic_roles, 'facility', true);
    $no_add_permission_facilities = array_diff($facilities_id,
        $evaluated_facilities);
    $facilities_id = $evaluated_facilities;
}
if (is_array($members)) {
    foreach ($members as $member_id) {
        if (in_array($member_id, $users_id)) {
            $users_info[$member_id] = $member_id;
        } elseif (mb_substr($member_id, 0, 1) === 'g') {
            $gid = mb_substr($member_id, 1);
            if (in_array($gid, $groups_id)) {
                $users_info[$member_id] = $gid;
            } else {
                // groups or users without add permission
                $no_add_permission_users_groups_info[$member_id] = $gid;
            }
        } elseif (Validate::isNumber($member_id)) {
            $no_add_permission_users_groups_info[$member_id] = $member_id;
        }
    }
}
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// get localization name of users
if (count($users_id) > 0) {
    $users_name = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
        $login);
    foreach ($users_id as $uid) {
        if ( ! array_key_exists($uid, $users_name)) {
            unset($users_info[$uid]);
            continue;
        }
        $users_info[$uid] = GRN_ControllerUtil::getUserNameText($login_id, $uid,
            $users_name);
    }
}
if (count($no_add_permission_users_id) > 0) {
    $users_name
        = GRN_ControllerUtil::getUserInfoToShowUserName($no_add_permission_users_id,
        $login);
    foreach ($no_add_permission_users_id as $index => $uid) {
        if ( ! array_key_exists($uid, $users_name)) {
            unset($no_add_permission_users_groups_info[$uid]);
            continue;
        }
        $no_add_permission_users_groups_info[$uid]
            = GRN_ControllerUtil::getUserNameText($login_id, $uid, $users_name);
    }
}
if (count($groups_id) > 0) {
    $groups = $uum->getGroupListByIds($groups_id, 0, -1);
    foreach ($groups_id as $gid) {
        if ( ! array_key_exists($gid, $groups)) {
            unset($users_info["g" . $gid]);
            continue;
        }
        $group = $groups[$gid];
        $users_info["g" . $group->getOID()] = "[" . $group->get("name") . "]";
    }
}
if (count($no_add_permission_groups_id) > 0) {
    $groups = $uum->getGroupListByIds($no_add_permission_groups_id, 0, -1);
    foreach ($groups as $group) {
        $no_add_permission_users_groups_info["g" . $group->getOID()] = "["
                                                                       . $group->get("name")
                                                                       . "]";
    }
}
// get localization name of facility
if (count($facilities_id) > 0) {
    $info = $facility_logic->getFacilitiesInfo($facilities_id);
    foreach ($facilities_id as $fid) {
        if ( ! array_key_exists($fid, $info)) {
            continue;
        }
        $facilities_info[$fid] = $info[$fid];
    }
    $facilityApprovalSetting = new ScheduleFacilityApprovalSetting();
    $facilities_approval_info
        = $facilityApprovalSetting->getSettings($facilities_id);
    foreach ($facilities_info as $id => $info) {
        $facilities_info[$id]["approval"] = $facilities_approval_info[$id];
    }
}
if (count($no_add_permission_facilities) > 0) {
    $info = $facility_logic->getFacilitiesInfo($no_add_permission_facilities);
    foreach ($no_add_permission_facilities as $index => $fid) {
        $no_add_permission_facilities[$index] = $info[$fid];
    }
}

$t->assign('user_id', $user_id);
$t->assign('group_id', $group_id);
$t->assign('users_info', $users_info);
$t->assign('no_add_permission_users_info',
    $no_add_permission_users_groups_info);
$t->assign('login_info', [
    $login->getOID() => GRN_ControllerUtil::getUserNameText($login->getOID(),
        $login->getOID())
]);
$t->assign('referer_key', cb_at($G_INPUT, 'referer_key'));
$t->assign('facilities_info', $facilities_info);
$t->assign('no_add_permission_facilities_info', $no_add_permission_facilities);

require_once('grn/ui.csp');
$manager = GRN_UIConfigManager::getInstance();
$config = $manager->getUserConfig($login);
$t->assign('truncate_width', $config->getTruncateWidth('truncate_width'));

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();

$private_setting = $systemlogic->getDefaultPrivateSet();
$t->assign('private_setting', $private_setting);

$t->assign('use_private', $systemlogic->getUsePrivate());
$t->assign('minute_interval', $systemlogic->getScheduleUnit());
if (array_key_exists('set_hour', $G_INPUT) && $G_INPUT['set_hour']) {
    require_once('schedule/view_util.csp');
    $util = GRN_Schedule_View_Util::getInstance();

    $start_hour = $G_INPUT['set_hour'];
    $start_minute = null;
    $end_hour = cb_at($G_INPUT, 'end_hour');
    $end_minute = null;
    $start_time = $util->createDateTimeFromParameters(null, null, null,
        $start_hour, $start_minute);
    $end_time = $util->createDateTimeFromParameters(null, null, null,
        $end_hour, $end_minute);
    if ( ! $end_time) {
        $end_time = clone $start_time;
        $end_time->hour += 1;
        if ($end_time->hour >= 24) {
            $end_time->hour = $start_time->hour;
        }
    }
    $t->assign('start_time', $start_time);
    $t->assign('end_time', $end_time);
}

include('_menus.csp');

//GTM-1622
if ($user_id !== $login_id && mb_substr($user_id, 0, 1) != 'g'
    && mb_substr($user_id, 0, 1) != 'f'
) {
    $attendanceStatusLogic = new AttendanceStatusLogic();
    $t->assign('use_attendance_check',
        $attendanceStatusLogic->isEnableAttendanceCheck());
    $t->assign('default_attendance_check',
        $attendanceStatusLogic->defaultAttendanceCheck());
}

// Smarty実行
$t->display(cb_get_pagename() . ".tpl");


