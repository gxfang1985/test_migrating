<?php
require_once("schedule/facility_tree.csp");
$oid = @$G_INPUT['oid'];
$page = @$G_INPUT['page'];
grn_schedule_rebuild_facility_group_tree_operation_modify($page,
    "GRN_FacilityGroupMovePrivilegeTree", $oid);
facility_move_tree_json($oid, @$G_INPUT['action'], $page,
    "GRN_FacilityGroupMovePrivilegeTree");

function grn_schedule_rebuild_facility_group_tree_operation_modify(
    $page_name,
    $class_name,
    $fag_id
) {
    require_once("grn/org_tree.csp");
    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name, $class_name, ['fagid' => $fag_id]);
    if ($tree->containNode($fag_id)) {
        return;
    }
    $tree->rebuild();

    require_once('schedule/facility_system_logic.csp');
    $fsl = GRN_Facility_SystemLogic::getInstance();

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    require_once('schedule/facility_privilege.csp');
    $priv = GRN_Facility_Privilege_Logic::getInstance();
    $expanded_fagid = $fag_id;
    if ( ! is_null($expanded_fagid)) {
        $ancestors = $fsl->getAncestors([$expanded_fagid => $expanded_fagid]);
        $ancestors = array_reverse($ancestors[$expanded_fagid]);
        $auth_fgroups = $priv->getFacilityGroupWithAuthority($login);
        $auth_fgroups_ids = [];
        foreach ($auth_fgroups as $auth_fgroup) {
            $auth_fgroups_ids[] = $auth_fgroup->getOID();
        }

        foreach ($ancestors as $id) {
            if (array_search($id, $auth_fgroups_ids) !== false) {
                break;
            } else {
                array_shift($ancestors);
            }
        }
        array_unshift($ancestors, null);
    } else {
        $ancestors = [null];
    }

    foreach ($ancestors as $a) {
        $tree->buildChild($a);
    }

    $util->setTree($page_name, $tree);
}
