<?php

$org_id = @ $G_INPUT['oid'];
$top = @ $G_INPUT['top'];
$fag_id = @ $G_INPUT['fagid'];
$search_text = @ $G_INPUT['search_text'];
$searched = @ $G_INPUT['s'];

require_once('schedule/facility_tree.csp');
require_once('schedule/facility_system_logic.csp');
$fsl = GRN_Facility_SystemLogic::getInstance();

require_once('schedule/facility_privilege.csp');
$priv = GRN_Facility_Privilege_Logic::getInstance();

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();

$page_name = cb_get_pagename();

if (strlen($fag_id) === 0) {
    cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
}

// 権限がある施設グループ
$priv_facility_group = $priv->getFacilityGroupWithAuthorityEx($login);

$initialize = false;

$fgroup = $fsl->getFacilityGroup($fag_id);

if ($fgroup === false) {
    cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
} else {
    $fag_id = $fgroup->getOID();
}
if ( ! $priv->hasPrivilegeOfFacilityGroupByID($login, $fag_id)) {
    cb_throw_error(E_GRN_SCHD_PRIVILEGE_ACCESS_DENY);
}

if (array_key_exists('search_text', $G_INPUT))//検索画面
{
    $t->assign('is_search', true);
    $result = $fsl->searchFacilityGroupsInfo($search_text);

    //権限がある施設グループのみに絞りこみ
    $priv_result = [];
    foreach (array_keys($result) as $key) {
        if ($priv->hasPrivilegeOfFacilityGroupById($login, $key)) {
            $priv_result[$key] = $result[$key];
        }
    }
    unset($result);

    //３階層の制限で移動先に指定できない施設グループを外す
    $children_count = $fsl->countTreeChildrenLength($fag_id);
    if (count($priv_result)) {
        $ancestors = $fsl->getAncestors($priv_result);
        foreach (array_keys($priv_result) as $priv_result_key) {
            $parent_counts = count($ancestors[$priv_result_key]);
            if ($parent_counts + $children_count
                > GRN_SCHD_MAX_FACILITY_GROUP_TREE
                || array_search($fag_id, $ancestors[$priv_result_key]) !== false
            ) {
                unset($priv_result[$priv_result_key]);
            }
        }
    }

    if (count($priv_result)) {
        foreach (array_keys($priv_result) as $key) {
            if ( ! $priv->hasPrivilegeOfFacilityGroupByID($login,
                $priv_result[$key]['_id'])
            ) {
                unset($priv_result[$key]);
            }
        }
    }

    // 検索結果として表示する階層を作る
    $search_result = [];
    if (count($priv_result)) {
        $fgroups = [];
        foreach ($ancestors as $key => $ancestor) {
            foreach ($ancestor as $a) {
                $fgroups[$a] = $a;
            }
        }

        $fgroups_info = $fsl->getFacilityGroupsInfo($fgroups);

        foreach (array_keys($priv_result) as $r) {
            $values = ['fagid' => $r];
            $values['ancestor'] = [];
            foreach ($ancestors[$r] as $a) {
                //権限がない親施設グループは外す
                if ( ! array_key_exists($a, $priv_facility_group)) {
                    continue;
                }
                $values['ancestor'][] = $fgroups_info[$a];
            }
            $values['ancestor'] = array_reverse($values['ancestor']);
            $search_result[] = $values;
            // 先祖は一番上の階層まで表示するわけではない。
            // トップの直下は、運用管理権限を持っている施設グループ
        }
    }

    $t->assign('search_result', $search_result);
    $t->assign('search_text', $search_text);
} else {
    $t->assign('is_search', false);

    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($page_name, 'GRN_FacilityGroupMovePrivilegeTree',
        ['fagid' => $fag_id]);

    if (($org_id == null) || $searched) {
        if ($org_id == null) {
            $ancestors = $fsl->getAncestors([$fag_id => $fag_id]);
            $ancestors = $ancestors[$fag_id];
            if (count($ancestors) > 1) {
                $org_id = $ancestors[1];
                $ancestors = $fsl->getAncestors([$org_id => $org_id]);
                $ancestors = $ancestors[$org_id];
                $ancestors[] = null;
                unset($ancestors[0]);
            } else {
                $org_id = null;
                $ancestors = [null];
            }
        } else {
            $ancestors = $fsl->getAncestors([$org_id => $org_id]);
            $ancestors = $ancestors[$org_id];
            $ancestors[] = null;
            unset($ancestors[0]);
        }
        $tree->setFAGID($fag_id);

        $tree->initialize();

        foreach (array_reverse($ancestors) as $key) {
            $tree->buildChild($key);
        }
        $tree->setSelectedNode($org_id);

        $tree->collapse($org_id);

    } else {
        if (isset($org_id)) {
            $is_facility_group = $fsl->getFacilityGroup($org_id);
            if ($is_facility_group === false) {
                cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITYGROUP);
            } else {
                $org_id = $is_facility_group->getOID();
            }
        }
    }
    $tree->setSelectedNode($org_id);

    $util->setTree($page_name, $tree);
    $org = $tree->getRoot();
    $t->assign('org', $org);
}

$id_keys = [$fag_id => $fag_id];
if ($org_id != 0 && ! $top) {
    $id_keys[$org_id] = $org_id;
}

$ancestors_array = $fsl->getAncestors($id_keys);

$ancesntors_key = [];
foreach ($ancestors_array as $ancestors) {
    foreach ($ancestors as $ancestor_id) {
        $ancestors_key[$ancestor_id] = $ancestor_id;
    }
}
$ancestors_info = $fsl->getFacilityGroupsInfo($ancestors_key);

$oidgroup = [];
$oidgroup['ancestors'] = [];


//移動後の施設グループ欄を作る
if ($org_id != 0 && ! $top) {
    foreach (array_reverse($ancestors_array[$org_id]) as $key) {
        if ($key == null) {
            continue;
        }
        //権限がない親施設グループは外す
        if ( ! array_key_exists($key, $priv_facility_group)) {
            continue;
        }
        $oidgroup['ancestors'][]
            = ['col_name' => $ancestors_info[$key]['col_name']];
    }
}

$fagidgroup = [];
$fagidgroup['ancestors'] = [];

//移動前の施設グループ欄を作る
foreach (array_reverse($ancestors_array[$fag_id]) as $key) {
    if ($key == null || $key == $fag_id) {
        continue;
    }
    //権限がない親施設グループは外す
    if ( ! array_key_exists($key, $priv_facility_group)) {
        continue;
    }
    $fagidgroup['ancestors'][]
        = ['col_name' => $ancestors_info[$key]['col_name']];
}

$fagidgroup['name'] = $fgroup->get('name');

$t->assign('page_name', $page_name);
$t->assign('ftree_async_page',
    'schedule/operation/json/facility_group_move_privilege_tree');
$t->assign('org_id', $org_id);
$t->assign('oidgroup', $oidgroup);
$t->assign('fagidgroup', $fagidgroup);
$t->assign('fagid', $fag_id);
$t->assign('page_title', grn_get_current_page_display_name());

$t->assign(
    'site_position', [
        [
            'page' => 'schedule/index',
            'name' => grn_get_page_display_name('schedule/schedule_index')
        ],
        [
            'page' => 'schedule/operation/facility_list',
            'name' => grn_get_page_display_name('schedule/operation/facility_list'),
            'oid'  => $fag_id
        ],
        [
            'page'  => 'schedule/operation/facility_group_view',
            'name'  => grn_get_page_display_name('schedule/operation/facility_group_view'),
            'fagid' => $fag_id
        ],
        ['page' => '', 'name' => grn_get_current_page_display_name()]
    ]
);

