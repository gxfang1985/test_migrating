<?php
function _schedule_rebuild_facility_group_tree($expanded_fagid = null)
{
    $tree_session_page = 'schedule/operation/facility_list';
    require_once('schedule/facility_tree.csp');

    require_once('schedule/facility_system_logic.csp');
    $fsl = GRN_Facility_SystemLogic::getInstance();

    require_once('schedule/facility_privilege.csp');
    $priv = GRN_Facility_Privilege_Logic::getInstance();

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $login = $uum->getLoginUser();

    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($tree_session_page, 'GRN_FacilityPrivilegeTree');
    $tree->rebuild();

    // update init time
    $modules = ['schedule', 'grn', 'personal'];
    $util->updateInitPageList($modules, $tree);

    if ( ! is_null($expanded_fagid)) {
        $ancestors = $fsl->getAncestors([$expanded_fagid => $expanded_fagid]);
        $ancestors = array_reverse($ancestors[$expanded_fagid]);
        $auth_fgroups = $priv->getFacilityGroupWithAuthority($login);
        $auth_fgroups_ids = [];
        foreach ($auth_fgroups as $auth_fgroup) {
            $auth_fgroups_ids[] = $auth_fgroup->getOID();
        }

        foreach ($ancestors as $id) {
            if (array_search($id, $auth_fgroups_ids) !== false) {
                break;
            } else {
                array_shift($ancestors);
            }
        }
        array_unshift($ancestors, null);
    } else {
        $ancestors = [null];
    }


    foreach ($ancestors as $a) {
        $tree->buildChild($a);
    }
    $util->setTree($tree_session_page, $tree);
}
