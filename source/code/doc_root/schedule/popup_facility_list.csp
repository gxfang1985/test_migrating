<?php

cb_require_role('LoginUser');

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

////////////////////////////////////////////////////////////////

// GET/POSTされたパラメータを取得する
$cid = [];
if (array_key_exists('cid', $G_INPUT) && is_array($G_INPUT['cid'])) {
    $cid = $G_INPUT['cid'];
}
$system_display = '0';
if (array_key_exists('system_display', $G_INPUT)) {
    $system_display = $G_INPUT['system_display'];
}
require_once('schedule/facility_system_logic.csp');
$fsl = GRN_Facility_SystemLogic::getInstance();
require_once('schedule/access_logic.csp');
$acc = GRN_Schedule_Access_Logic::getInstance();
// ログインユーザーを取得する
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$dynamic_roles = $uum->listGrantedRoles();

if (count($cid) > 0) {
    $facilities = [];
    foreach ($cid as $id) {
        $facilities[$id] = $id;
    }

    $facility_info = $fsl->getFacilitiesInfo($facilities, CB_DATABASE_NO_LOCK);

    //GRN2-337
    require_once('grn/controller.csp');


    if (count($facility_info) > 0) {
        $f_settings = $fsl->getFacilitySetting(array_keys($facilities));
        foreach (array_keys($facility_info) as $facility_id) {
            $advance = '0';
            $maxtime = '0';
            $modifyuser = '';
            $approval = '0';
            if (is_array($f_settings)
                && array_key_exists($facility_id, $f_settings)
                && strlen($f_settings[$facility_id]) > 0
            ) {
                $unserialize_settings
                    = cb_unserialize($f_settings[$facility_id],
                    ['allowed_classes' => false]);

                if (is_array($unserialize_settings)
                    && count($unserialize_settings) > 0
                ) {
                    $advance = $unserialize_settings['advance'];
                    if ($advance == 0) {
                        $advance = 'unlimit';
                    }
                    $maxtime = $unserialize_settings['maxtime'];
                    if ($maxtime == 0) {
                        $maxtime = 'unlimit';
                    }
                    $modifyuser = $unserialize_settings['modifyuser'];

                    // GTM-1676
                    $approval = cb_at($unserialize_settings, 'approval');
                }
            } else {
                // get facility setting in group
                $g_settings = $fsl->getGroupFacilitySetting($facility_id);
                if (array_key_exists($facility_id, $g_settings)
                    && strlen($g_settings[$facility_id]) > 0
                ) {
                    $unserialize_settings
                        = cb_unserialize($g_settings[$facility_id],
                        ['allowed_classes' => false]);
                    if (is_array($unserialize_settings)
                        && count($unserialize_settings) > 0
                    ) {
                        $advance = $unserialize_settings['advance'];
                        if ($advance == 0) {
                            $advance = 'unlimit';
                        }
                        $maxtime = $unserialize_settings['maxtime'];
                        if ($maxtime == 0) {
                            $maxtime = 'unlimit';
                        }
                        $modifyuser = $unserialize_settings['modifyuser'];

                        // GTM-1676
                        $approval = cb_at($unserialize_settings, 'approval');
                    }
                } else {
                    $advance = $fsl->getFacilityAdvance();
                    if ($advance == 0) {
                        $advance = 'unlimit';
                    }
                    $maxtime = $fsl->getFacilityMaxTime();
                    if ($maxtime == 0) {
                        $maxtime = 'unlimit';
                    }
                    $modifyuser = $fsl->getFacilityModifyUser();

                    // GTM-1676
                    $approval = '0';
                }
            }

            $facility_info[$facility_id]['advance'] = $advance;
            $facility_info[$facility_id]['maxtime'] = $maxtime;
            $facility_info[$facility_id]['modifyuser'] = $modifyuser;
            // GTM-1676
            $facility_info[$facility_id]['approval'] = $approval;

            //GRN2-337
            $facility_info[$facility_id]['col_memo']
                = grn_prevent_tag_script($facility_info[$facility_id]['col_memo']);
        }
    }

    $evaluated = $acc->evaluateAccessesById($login, $facility_info, ['read'],
        $dynamic_roles, 'facility');

    $facility_id_list = [];
    foreach ($evaluated as $f) {
        $facility_id_list[] = $f['_id'];
    }

    $fg_map = $fsl->getFacilityGroupRelation($facility_id_list);

    $groups = [];
    foreach ($fg_map as $f) {
        if ( ! is_null($f)) {
            $groups[$f] = $f;
        }
    }
    $ancestors = $fsl->getAncestors($groups);
    $all_facilities = [];
    foreach ($ancestors as $ancestor) {
        foreach ($ancestor as $i) {
            $all_facilities[$i] = $i;
        }
    }
    $all_facilities_info = $fsl->getFacilityGroupsInfo($all_facilities);

    foreach ($evaluated as $key => $f) {
        $group_id = $fg_map[$f['_id']];
        $evaluated[$key]['ancestors'] = [];
        if (is_null($group_id)) {
            continue;
        }
        foreach (array_reverse($ancestors[$group_id]) as $i) {
            $evaluated[$key]['ancestors'][] = $all_facilities_info[$i];
        }
    }
} else {
    $evaluated = [];
}

$t->assign('system_display', $system_display);
$t->assign('facility_list', $evaluated);

// ////////////////////////////////////////////////////////////////

// Smartyにページタイトルを割り当てる
$page_title = grn_get_page_display_name('schedule/popup_facility_list');
$t->assign('page_title', $page_title);

// Smartyを実行する
$t->display('schedule/popup_facility_list.tpl');


