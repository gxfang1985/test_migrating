<?php

// 表示するメンバーの初期化が行われていない場合
if ( ! isset($member)) {
    if ( ! isset($user_id)) {
        $user_id = isset($member_id) ? $member_id : false;
    }

    if ( ! $user_id) {
        $user_id = $login_id;
        $member = $login;
    } // 組織
    elseif (mb_substr($user_id, 0, 1) == 'g') {
        $member = $uum->getGroup(mb_substr($user_id, 1));
        if ( ! $member) {
            $user_id = $login_id;
            $member = $login;
        }
    } // 施設
    elseif (mb_substr($user_id, 0, 1) == 'f') {
        $member = $facility_logic->getFacility(mb_substr($user_id, 1));
        if ($member === false) {
            $user_id = $login_id;
            $member = $login;
        }
    } else {
        $member = $uum->getUser($user_id);
        if ( ! $member) {
            $user_id = $login_id;
            $member = $login;
        }
    }
    $member_access = 1;
    if ( ! is_a($member, 'CB_User') || ($member->getOID() != $login_id)) {
        if (is_a($member, 'GRN_Facility_Facility')) {
            // 施設のアクセス権はグループをたどって評価する
            $tmp_array = [$member->getOID() => $member];
            $member_access = $acc_logic->evaluateAccessesById($login,
                $tmp_array, ['read'], $dynamic_roles, 'facility');
        } else {
            $member_access = $acc_logic->evaluateAccess($login, $member,
                ['read'], $dynamic_roles);
        }
    }

    if ( ! $member_access) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_ENTRY);
    }
}

// 登録アイコンなどのリンクを表示するかどうか
if ( ! isset($disable_link)) {
    $disable_link = false;
}

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
$showendtime = $personallogic->getShowEndTime($login);
$hiddenprivate = $systemlogic->getHiddenPrivate();
$showholiday = $systemlogic->getShowHoliday();
$personallogic->getViewHour($login, $set_hour, $end_hour);
$unit = $systemlogic->getScheduleUnit();

if ( ! isset($util)) {
    require_once('schedule/view_util.csp');
    $util = GRN_Schedule_View_Util::getInstance();
}

if ( ! isset($app)) {
    require_once('schedule/application.csp');
    $app = GRN_Schedule_Application::getInstance();
}

$tsex = new CB_TimeStampEx();
// 日付の準備
$get_settime = null;
$get_endtime = null;
$dateex = new CB_DateEx($date);
$date_info = [
    'format' => $dateex->format(),
    'type'   => $util->getDayType($dateex),
    'date'   => $dateex
];
$week = [$date_info];

// 祝日などのデータの取得
require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($dateex, $dateex, $login);

if ($util->isWorkday($date_info['date'], $calendars, $login)) {
    $date_info['type'] = 's_date_workday';
} elseif ($showholiday) {
    if ($util->isHoliday($date_info['date'], $calendars)) {
        $date_info['type'] = 's_date_holiday';
    }
}

$shared_calendar = $calendar_service->getDaysInfoFromSharedCalendar($dateex,
    $dateex, $login);
$calendars = array_merge_recursive($calendars, $shared_calendar);

// カレンダーから余計なデータを削除
if ( ! is_a($member, 'CB_User') || $member->getOID() != $login_id) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 個人データの削除
            if (($calendars[$key1][$key2]['type']
                 == GRN_CALENDAR_TYPE_MEMORIALDAY)
                || ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_USER_MEMO)
            ) {
                unset($calendars[$key1][$key2]);
                continue;
            }
            if ( ! $showholiday) {
                if ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
                ) {
                    unset($calendars[$key1][$key2]);
                }
            }
        }
    }
} elseif ( ! $showholiday) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 祝日以外は削除
            if ($calendars[$key1][$key2]['type']
                == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
            ) {
                unset($calendars[$key1][$key2]);
            }
        }
    }
}

$get_settime = $dateex;
$get_endtime = $dateex;

if (is_a($member, 'GRN_Facility_Facility')) {
    $title_type = $facility_logic->getFacilityTitle();
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL;
} else {
    $sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL
               + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;
}
//GTM-1625: (Note: No support attendance check for facility and group)
$isUserMember = is_a($member, 'CB_User');
$isEnableAttendanceStatus = false;
if ($isUserMember) {
    //GTM-1625 Get attendance status setting;
    $attendanceStatusLogic = new grn\schedule\AttendanceStatusLogic();
    $isEnableAttendanceStatus
        = $attendanceStatusLogic->isEnableAttendanceCheck();
}
$users_event = [];

//        $events = $app->getEvents( $member, $get_settime, $get_endtime, $login, $sc_type, $hiddenprivate);
$events = $app->getEventsForWeek($member, $get_settime, $get_endtime, $login,
    $sc_type, $hiddenprivate, $week, true, $isEnableAttendanceStatus);
$day_event = [];

// 終日
if (array_key_exists($date_info['format'], $events['allday'])) {
    foreach (array_keys($events['allday'][$date_info['format']]) as $key) {
        $member_event = &$events['allday'][$date_info['format']][$key];
        $temp = [];
        $temp['id'] = $member_event['id'];
        $temp['type'] = $util->getViewEventType($member_event['event_type'],
            $member_event['share']);
        //GTM-103
        $temp['event_detail'] = $member_event['event_detail'];
        $temp['event_menu'] = $member_event['event_menu'];
        $temp['event_menu_color'] = $member_event['event_menu_color'];
        //End GTM-103
        if ($member_event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
            $temp['data'] = cb_msg('grn.schedule', 'event_hidden');
            $temp['type'] = 'normal';
            $temp['private'] = true;
            $temp['event_detail'] = $temp['data'];
            $temp['event_menu'] = '';
            $temp['event_menu_color'] = '';
        } elseif ($member_event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
            $temp['data'] = $member_event['title'];
            $temp['is_private'] = true;
        } else {
            $temp['data'] = $member_event['title'];
        }
        $temp['start_date'] = $member_event['setdate']->format();
        $temp['end_date'] = $member_event['enddate']->format();
        $temp['allday'] = true;
        //GTM-1625
        //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
        if ($isUserMember) {
            if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                $temp, $member_event)
            ) {
                continue;
            }
        }
        $day_event[] = $temp;
    }
}

// 通常のスケジュール
if (array_key_exists($date_info['format'], $events['normal'])) {
    foreach (array_keys($events['normal'][$date_info['format']]) as $key) {
        $member_event = &$events['normal'][$date_info['format']][$key];

        // 週表示で行っている時間のスキップは、取得時にできているので行わない
        $temp = [];
        $temp['id'] = $member_event['id'];
        $temp['type'] = $util->getViewEventType($member_event['event_type'],
            $member_event['share']);
        //GTM-103
        $temp['event_detail'] = $member_event['event_detail'];
        $temp['event_menu'] = $member_event['event_menu'];
        $temp['event_menu_color'] = $member_event['event_menu_color'];
        //End GTM-103

        if (is_a($member, 'GRN_Facility_Facility')) {
            $temp['data']
                = $facility_logic->getEventTitle($member_event['title'],
                $member_event['creator_name'], $member_event['private'],
                $title_type);
            if ($member_event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['type'] = 'normal';
                $temp['private'] = true;
            }
        } else {
            if ($member_event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['type'] = 'normal';
                $temp['data'] = cb_msg('grn.schedule',
                    'event_hidden');
                $temp['private'] = true;
                $temp['event_detail'] = $temp['data'];
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
            } elseif ($member_event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['data'] = $member_event['title'];
                $temp['is_private'] = true;
            } else {
                $temp['data'] = $member_event['title'];
            }
        }
        $temp['start_date'] = $member_event['setdatetime']->format();
        if ($member_event['enddatetime']) {
            $temp['end_date'] = $member_event['enddatetime']->format();
        }
        $temp['conflict'] = array_key_exists('conflict', $member_event)
            ? $member_event['conflict'] : false;

        $util->checkViewTime($date_info['date'], $member_event['setdatetime'],
            $member_event['enddatetime'], $set_hour, $end_hour);
        //GTM-1625
        //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
        if ($isUserMember) {
            if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                $temp, $member_event)
            ) {
                continue;
            }
        }
        $day_event[] = $temp;
    }
}
// スケジュールの入れ込み
$schedule_event = [
    'date_type' => $date_info['type'],
    'date'      => $date_info['format'],
    'event'     => $day_event
];


if (array_key_exists($date_info['format'], $calendars)) {
    $schedule_event['calendar'] = $calendars[$date_info['format']];
}

// バナーの取得処理
//        $banners = $app->getEvents( $member, $date_info['date'], $date_info['date'], $login, GRN_SCHEDULE_EVENT_TYPE_BANNER );
$banner_events = [];
foreach (array_keys($events['banner']) as $key) {
    $member_event = &$events['banner'][$key];
    $temp = ['id' => $member_event['id']];
    $temp['type'] = $util->getViewEventType($member_event['event_type'],
        $member_event['share']);
    $temp['data'] = $member_event['title'];

    //GTM-103
    $temp['event_detail'] = $member_event['event_detail'];
    $temp['event_menu'] = $member_event['event_menu'];
    $temp['event_menu_color'] = $member_event['event_menu_color'];
    //End GTM-103
    $banner_events[] = $temp;
}

$member_access = null;
if (is_a($member, 'CB_User') && $login_id == $user_id) {
    $member_access = ['read' => '1', 'add' => '1'];
} else {
    // CB_Userからuidを取得しているので、第2引数にTRUEを渡して削除フラグチェックを行わない
    $user_groups = $uum->getUserGroupsInfo($login_id, true);
    $user_roles = $uum->getUserRolesInfo($login_id, true);

    if (is_a($member, 'GRN_Facility_Facility')) {
        $affiliation_group
            = $facility_logic->getFacilityAffiliationGroup($member->getOID());

// 施設だったら施設グループと合わせて評価して、厳しいほうにする
        if ( ! $affiliation_group) {
            // 施設グループに所属していない
            $member_access = $acc_logic->getEvaluateAccessList($login,
                $member,
                ['read', 'add'],
                'read_add',
                $dynamic_roles,
                $user_groups,
                $user_roles);

        } else {
            $affiliation_groups
                = [$affiliation_group->getOID() => $affiliation_group];

            $member_accesses = $acc_logic->getEvaluateAccessesListById($login,
                $affiliation_groups,
                'facilitygroup',
                ['read', 'add'],
                $dynamic_roles);

            $access_group = $member_accesses[$affiliation_group->getOID()];

            $member_access = $acc_logic->getEvaluateAccessList($login,
                $member,
                ['read', 'add'],
                'read_add',
                $dynamic_roles,
                $user_groups,
                $user_roles);
            foreach (['read', 'add'] as $auth) {
                if ($access_group[$auth] == GRN_SCHD_ACCESS_DENY) {
                    $member_access[$auth] = GRN_SCHD_ACCESS_DENY;
                }
            }
        }
    } else {
        $member_access = $acc_logic->getEvaluateAccessList($login, $member,
            ['read', 'add'], 'read_add', $dynamic_roles, $user_groups,
            $user_roles);
    }
}

$users_event = [
    'user_id'        => $user_id,
    'group_id'       => $group_id,
    'schedule_event' => $schedule_event,
    'banner_event'   => $banner_events,
    'access'         => $member_access,
    'timezone'       => ($member instanceof CB_User) ? CB_I18N::getInstance()
                                                              ->getUserTimezone($member)
        : CB_I18N::getInstance()->getDefaultTimezone()
];

if (is_a($member, 'GRN_Facility_Facility')) {
    // get facility setting to show memo or not
    $facility_memo = '';
    $faid = $member->getOID();
    $f_settings = $facility_logic->getFacilitySetting([$faid], true);
    // get show memo by facility setting
    $facility_memo = $facility_logic->getShowMemoByPriority($f_settings, $faid);

    $users_event['facility_id'] = $member->getOID();
    $users_event['facility_title'] = $member->get('name');

    //GRN2-337
    require_once('grn/controller.csp');
    $users_event['facility_memo'] = grn_prevent_tag_script($facility_memo);
}

$t->assign('schedule_params', [
    'set_hour'  => $set_hour,
    'end_hour'  => $end_hour,
    'unit'      => $unit,
    'col_span'  => (int)(60 / $unit) * ($end_hour - $set_hour),
    'satr_date' => $date_info['format'],
    'end_date'  => $date_info['format']
]);

// カスタマイズ項目処理
foreach (array_keys($users_event['schedule_event']['event']) as $key) {
    $event_temp = &$users_event['schedule_event']['event'][$key];
    if (array_key_exists('private', $event_temp) === true
        && $event_temp['private'] === true
    ) {
        continue;
    }
    $event_temp['data'] .= $facility_logic->getDataTitle($event_temp['id']);
}
$t->assign('schedule', $users_event);

