<?php

use grn\schedule\AttendanceStatusLogic;

// 使用するパラメータの定義
$day = @ $G_INPUT['day'];
$mid = @ $G_INPUT['mid'];
if ( ! $mid) {
    $mid = $G_login_user->getOID();
}
$gid = @ $G_INPUT['gid'];

// 初期定義
$assign_allday_map = [
    'eid'     => 'id',            // ＩＤ
    'title'   => 'title',         // 表題
    'joint'   => 'share',         // 共有
    'repeat'  => 'repeat',        // 繰り返し
    'private' => 'private',
];
$assign_normal_map = [
    'eid'     => 'id',            // ＩＤ
    'title'   => 'title',         // 表題
    'start'   => 'setdatetime',   // 開始時刻
    'end'     => 'enddatetime',   // 終了時刻
    'joint'   => 'share',         // 共有
    'repeat'  => 'repeat',        // 繰り返し
    'temp'    => 'temporary',     // 仮
    'private' => 'private',
];
$assign_banner_map = [
    'eid'     => 'id',            // ＩＤ
    'title'   => 'title',         // 表題
    'start'   => 'setdate',       // 開始日
    'end'     => 'enddate',       // 終了日
    'joint'   => 'share',         // 共有
    'repeat'  => 'repeat',        // 繰り返し
    'private' => 'private',
];

// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;

// ページタイトル
$smarty->assign('pagetitle', grn_get_current_page_display_name());
// パス情報
$smarty->assign('pagepath', $G_pagepath);

// config
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular_app = $locator->getInstance('cellular');
$user_config = $cellular_app->getUserConfig($G_login_user);
$width = $user_config->getSubjectWidth();

// ログインユーザーの各種設定の取得
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
//$unit = $systemlogic->getScheduleUnit();
$hiddenprivate = $systemlogic->getHiddenPrivate();
//$showholiday = $systemlogic->getShowHoliday();

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
//$showendtime = $personallogic->getShowEndTime( $G_login_user );
//$startwday = $personallogic->getCalendarWeekStart( $G_login_user );
$set_hour = 0;
$end_hour = 0;
$personallogic->getViewHour($G_login_user, $set_hour, $end_hour);

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// 表示するものにアクセス権があるかどうかのチェック
$dynamic_roles = $G_uum->listGrantedRoles();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_logic::getInstance();

//ターゲット
// 施設
if (mb_substr($mid, 0, 1) == 'f') {
    $target = $facility_logic->getFacility(mb_substr($mid, 1));
    if ($target === false) {
        cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
    }

    $affiliation_group
        = $facility_logic->getFacilityAffiliationGroup($target->getOID());
    if ($affiliation_group !== false) {
        $affiliation_groups
            = [$affiliation_group->getOID() => $affiliation_group];
        $have_config = $acc_logic->getHaveAccessSettingList($G_login_user,
            $affiliation_groups, 'facilitygroup', $dynamic_roles);
        if (count($have_config) > 0) {
            $access['read'] = $acc_logic->evaluateAccess($G_login_user,
                $affiliation_group, ['read'], $dynamic_roles);
            $access['add'] = $acc_logic->evaluateAccess($G_login_user,
                $affiliation_group, ['add'], $dynamic_roles);
        } else {
            $access['read'] = $acc_logic->evaluateAccess($G_login_user, $target,
                ['read'], $dynamic_roles);
            $access['add'] = $acc_logic->evaluateAccess($G_login_user, $target,
                ['add'], $dynamic_roles);
        }
    } else {
        $access['read'] = $acc_logic->evaluateAccess($G_login_user, $target,
            ['read'], $dynamic_roles);
        $access['add'] = $acc_logic->evaluateAccess($G_login_user, $target,
            ['add'], $dynamic_roles);
    }

    if ( ! $access['read']) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
    }
    $smarty->assign('member_name', $target->get('name'));
    $smarty->assign('facility_info', true);
} // 組織
elseif (mb_substr($mid, 0, 1) == 'g') {
    $target = $G_uum->getGroup(mb_substr($mid, 1));
    if ( ! $target) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }
    $access['read'] = $acc_logic->evaluateAccess($G_login_user, $target,
        ['read'], $dynamic_roles);
    $access['add'] = $acc_logic->evaluateAccess($G_login_user, $target,
        ['add'], $dynamic_roles);
    if ( ! $access['read']) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
    }
    $smarty->assign('member_name', $target->get('name'));
} // 人
else {
    $target = $G_uum->getUser($mid);
    if ( ! $target) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $access['read'] = $acc_logic->evaluateAccess($G_login_user, $target,
        ['read'], $dynamic_roles);
    $access['add'] = $acc_logic->evaluateAccess($G_login_user, $target,
        ['add'], $dynamic_roles);
    if ( ! $access['read']) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_VIEW);
    }
    $smarty->assign('member_name', $target->get('display_name'));
}
$smarty->assign('mid', $mid);
$event_add = ($access['add'] == GRN_SCHD_ACCESS_DENY) ? false : true;

$smarty->assign('event_add', $event_add);

// 日付時刻（タイムスタンプ）クラス生成
require_once("fw/date.csp");
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$day_today = $tsex->getDate();

// 表示日の設定
$day_disp = new CB_Date();
if ( ! $day_disp->parse($day)) {
    // 今日をdefault
    $day = $day_today->format();
    $day_disp->parse($day);
}
$smarty->assign('day', $day);

// 前週 week before 
$day_before = new CB_DateEx($day_disp);
$day_before->moveDays(-7);
$smarty->assign('before_week', $day_before->format());

// 翌週 week after 
$day_after = new CB_DateEx($day_disp);
$day_after->moveDays(7);
$smarty->assign('after_week', $day_after->format());

// イベントの取得範囲
$setdate_tmp = new CB_DateEx($day_disp);
$enddate_tmp = new CB_DateEx($day_disp);

//一週間の情報を配列に詰め込み。
$week = [];
$day_tmp = new CB_DateEx($day_disp);
for ($i = 0; $i < 7; ++$i) {
    $week[] = [
        'format'  => $day_tmp->format(),           //
        'settime' => clone $setdate_tmp,
        'endtime' => clone $enddate_tmp
    ];
    $day_tmp->moveDays(1);
    $setdate_tmp->moveDays(1);
    $enddate_tmp->moveDays(1);
}

$attendanceStatusLogic = new AttendanceStatusLogic();
$isEnableAttendanceStatus = $attendanceStatusLogic->isEnableAttendanceCheck();
$schedule_event = [];
foreach ($week as $date_info) {
    /** @var GRN_Schedule_Application $G_application */
    $schedata = $G_application->getEvents(
        $target,
        $date_info['settime'],
        $date_info['endtime'],
        $G_login_user,
        GRN_SCHEDULE_EVENT_TYPE_ALLDAY | GRN_SCHEDULE_EVENT_TYPE_NORMAL
        | GRN_SCHEDULE_EVENT_TYPE_BANNER,
        $hiddenprivate,
        true,
        $isEnableAttendanceStatus
    );

    if ($isEnableAttendanceStatus) {
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();
        foreach (['normal', 'allday'] as $type) {
            $schedata[$type] = $util->filterAbsentEvents($schedata[$type]);
        }
    }

    // allday schedule
    $allday_for_view = [];
    if (count($schedata['allday'])) {
        foreach ($schedata['allday'] as $event => $data) {
            foreach ($assign_allday_map as $view_name => $data_name) {
                $allday_for_view[$event][$view_name] = @$data[$data_name];
            }
            $allday_for_view[$event]['title'] = preg_replace([
                '/&lt;/',
                '/&gt;/',
                '/&quot;/',
                '/&amp;/'
            ], ['<', '>', '"', '&'], $allday_for_view[$event]['title']);
        }
    }

    // normal schedule
    $normal_for_view = [];
    if (count($schedata['normal'])) {
        foreach ($schedata['normal'] as $event => $data) {
            foreach ($assign_normal_map as $view_name => $data_name) {
                $normal_for_view[$event][$view_name] = @$data[$data_name];

                //スケジュールのstart_dateとend_dateが異なる場合のため。
                if ($data['setdatetime']->getDate()
                    != $data['enddatetime']->getDate()
                ) {
                    $normal_for_view[$event]['sdate']
                        = $data['setdatetime']->getDate();
                    $normal_for_view[$event]['edate']
                        = $data['enddatetime']->getDate();
                }
            }
            $normal_for_view[$event]['end_time_available'] = true;
            if (isset($data['end_time_available'])) {
                $normal_for_view[$event]['end_time_available']
                    = $data['end_time_available'];
            }
            $normal_for_view[$event]['title'] = preg_replace([
                '/&lt;/',
                '/&gt;/',
                '/&quot;/',
                '/&amp;/'
            ], ['<', '>', '"', '&'],
                $normal_for_view[$event]['title']);
        }
    }
    // カスタマイズ項目処理
    foreach ($normal_for_view as $key => $value) {
        $item_data = &$normal_for_view[$key];
        if (array_key_exists('private', $item_data) === true
            && $item_data['private'] === true
        ) {
            continue;
        }
        if (isset($value['eid'])) {
            $item_data['title'] .= $facility_logic->getDataTitle($value['eid']);
            $item_data['title'] = preg_replace([
                '/&lt;/',
                '/&gt;/',
                '/&quot;/',
                '/&amp;/'
            ], ['<', '>', '"', '&'], $item_data['title']);
        }
    }

    // banner schedule
    $banner_for_view = [];
    if (count($schedata['banner'])) {
        foreach ($schedata['banner'] as $event => $data) {
            foreach ($assign_banner_map as $view_name => $data_name) {
                $banner_for_view[$event][$view_name] = @$data[$data_name];
            }
            $banner_for_view[$event]['title'] = preg_replace([
                '/&lt;/',
                '/&gt;/',
                '/&quot;/',
                '/&amp;/'
            ], ['<', '>', '"', '&'], $banner_for_view[$event]['title']);
        }
    }

    $schedule_event[] = [
        'day_info' => $date_info['settime'],
        'format'   => $date_info['format'],

        'allday' => $allday_for_view,
        'normal' => $normal_for_view,
        'banner' => $banner_for_view,
    ];
}


$smarty->assign('weekdata', $schedule_event);

$smarty->assign('width', $width);

$smarty->assign('hiddenprivate', $hiddenprivate);

// smartyの出力
$smarty->display(cb_get_pagename() . '.tpl');
