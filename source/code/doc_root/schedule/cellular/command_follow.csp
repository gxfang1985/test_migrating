<?php
// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;

// SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'schedule/cellular/follow';
SmartyValidate::register_form($form_name);

// G_INPUT
$day = $G_INPUT['day'];
$mid = $G_INPUT['mid'];
$eid = $G_INPUT['eid'];
$follow = @ $G_INPUT['follow'];
/*
if( mb_strlen(  $follow ) == 0 )
{
    cb_throw_error( E_GRN_SCHD_NOTINPUT_EVENTFOLLOW );
}
*/
$date = new CB_Date();
if ( ! $date->parse($day)) {
    $date = null;
}

// validate after a POST
if (SmartyValidate::is_valid($G_INPUT, $form_name)) {

    $follow = @ $G_INPUT['follow'];
    if (mb_strlen(cb_trim($follow)) == 0) {
        cb_throw_error(E_GRN_SCHD_NOTINPUT_EVENTFOLLOW);
    }

    $event = $G_application->getEvent($G_login_user, $eid, $date);
    if ( ! $event) {
        cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
    }
    // アクセス権のチェック
    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();
    $dynamic_role = $G_uum->listGrantedRoles();
    $access = $acc_logic->getEventAccess($G_login_user, $event,
        ['read', 'add', 'modify', 'delete'], $dynamic_role);

    require_once('schedule/view_util.csp');
    $util = GRN_Schedule_View_Util::getInstance();

    if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
    }

    if ($access['add'] == GRN_SCHD_ACCESS_DENY
        && $access['modify'] == GRN_SCHD_ACCESS_DENY
        && $access['delete'] == GRN_SCHD_ACCESS_DENY
    ) {
        cb_throw_error(E_GRN_SCHD_DENYENTRY_EVENTFOLLOW);
    }

    $event_id = $G_application->writeFollow($G_login_user, $follow, $eid,
        $date);
    $event->id = $event_id;

    $tsex = new CB_TimeStampEx();
    $notify_date = $tsex->getDate();

    // ----- GRN2-4506 -----
    // 通知のタイムゾーン対応のために、setdatetimeなどを変換する。
    if ($event instanceof GRN_Schedule_RepeatEvent) {
        require_once('fw/i18n.csp');
        if ($event->setdatetime instanceof CB_DatetimeEx) {
            // 通常予定の繰り返しは、そのまま変換する
            $settimestamp = new CB_TimeStampEx(null, $event->timezone);
            $settimestamp->setDateTime($event->setdatetime,
                CB_I18N::getInstance()->getCurrentTimezone());
            $event->setdatetime = $settimestamp->getDateTime();
            if (isset($event->enddatetime)) {
                $endtimestamp = new CB_TimeStampEx(null, $event->timezone);
                $endtimestamp->setDateTime($event->enddatetime,
                    CB_I18N::getInstance()->getCurrentTimezone());
                $event->enddatetime = $endtimestamp->getDateTime();
            } else {
                $event->enddateitme = $event->setdatetime;
            }
        } elseif ($event->setdatetime instanceof CB_Date) {
            // 終日予定の場合、イベントとユーザーのタイムゾーンの時差を見る。
            // その時差によって、終日予定が1日早くなっているかどうか確認する。
            $dateTimeZoneEvent = new DateTimeZone($event->timezone);
            $dateTimeZoneUser = new DateTimeZone(CB_I18N::getInstance()
                                                        ->getCurrentTimezone());
            $dateTimeEvent = new DateTime("now", $dateTimeZoneEvent);
            $dateTimeUser = new DateTime("now", $dateTimeZoneUser);
            $timeOffset = $dateTimeZoneEvent->getOffset($dateTimeUser);
            if ($timeOffset <= 0) {
                // イベントのタイムゾーンがユーザーのタイムゾーンと同じか、遅い場合。
                // 開始日はイベントのタイムゾーンと同じなので、そのまま。終了日を同日にしておく。
                $event->enddatetime = $event->setdatetime;
            } else {
                // イベントのタイムゾーンがユーザーのタイムゾーンより早い場合。
                // イベントのタイムゾーンの開始日は1日後となるので、変更する。
                // enddatetimeはsetdatetimeの1日後になっているため、それを利用する。
                $event->setdatetime = $event->enddatetime;
            }
        }
    } elseif ($event instanceof GRN_Schedule_NormalEvent) {
        // 通常予定（終日以外）も、イベントのタイムゾーンに変更する
        if ($event->setdatetime instanceof CB_DateTimeEx) {
            require_once('fw/i18n.csp');
            $settimestamp = new CB_TimeStampEx(null, $event->timezone);
            $settimestamp->setDateTime($event->setdatetime,
                CB_I18N::getInstance()->getCurrentTimezone());
            $event->setdatetime = $settimestamp->getDateTime();
            if (isset($event->enddatetime)) {
                $endtimestamp = new CB_TimeStampEx(null, $event->timezone);
                $endtimestamp->setDateTime($event->enddatetime,
                    CB_I18N::getInstance()->getCurrentTimezone());
                $event->enddatetime = $endtimestamp->getDateTime();
            } else {
                $event->enddatetime = $event->setdatetime;
            }
        }
    }
    // ----- GRN2-4506 -----

    if ($notify_date->compare($date) <= 0) {
        if ($event->users && count($event->users) > 0) {
            $title = _schedule_cellular_command_follow_getNotifyTitle($event);
            $G_application->setNotify($event->users, $G_login_user, $event,
                $date, $title, $follow, GRN_SCHEDULE_NOTIFY_FOLLOWENTRY, $tsex);
        }

        // 通知先の指定がある場合
        if ($event->private && is_array($event->notify_address)
            && count($event->notify_address) > 0
        ) {
            $title = _schedule_cellular_command_follow_getNotifyTitle($event);
            $G_application->sendNotificationsToPublic($G_login_user, $event,
                $date, $follow, $tsex, $title, false, false,
                GRN_SCHEDULE_NOTIFY_FOLLOWENTRY);
        }
    }
    // the validation session is finished
    SmartyValidate::unregister_form($form_name);
    // redirect
    grn_cellular_redirect($G_pagepath . "/look1", [
        'eid' => $event_id,
        'mid' => @$mid,
        'day' => $day
    ]);
} else {
    grn_cellular_switch_page($G_pagepath . '/follow');
}

function _schedule_cellular_command_follow_getNotifyTitle($event)
{
    require_once('schedule/notification.csp');
    $util = GRN_Schedule_Notify_Logic::getInstance();

    return $util->getNotifyTitle(html_entity_decode($event->getTitle()));
}

