<?php

require_once('schedule/cellular_utils.csp');

// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;

// ページタイトル
$smarty->assign('pagetitle', grn_get_current_page_display_name());
// アプリケーション名
$smarty->assign('appname', $G_application->getName());
// パス情報
$smarty->assign('pagepath', $G_pagepath);

// get
$eid =  $G_INPUT['eid'] ?? '';
$mid =  $G_INPUT['mid'] ?? '';
$day =  $G_INPUT['day'] ?? '';
$from = $G_INPUT['from'] ?? '';
$fgid = $G_INPUT['fgid'] ?? '';
$is_page_numeric = is_numeric($G_INPUT['pg'] ?? null);
$page = $is_page_numeric ? $G_INPUT['pg'] : null;

$smarty->assign('eid', $eid);
$smarty->assign('mid', $mid);
$smarty->assign('day', $day);
$smarty->assign('from', $from);

$lax_evaluate = false;

// 遷移先（遷移してきた元に戻る
if ($from == 'add') {
    $to_pagename = $G_pagepath . '/command_add_02';
    $sess_event = $G_cellular_session->get('sess_sche_add');
    $is_access = ['add'];
} else {
    $to_pagename = $G_pagepath . '/command_change_body';
    $sess_event = $G_cellular_session->get('sess_sche_edit');
    $is_access = ['read', 'add', 'modify'];
    $lax_evaluate = true;
}
$smarty->assign('to_pagename', $to_pagename);

$datetime_options_unserialize = [
    'allowed_classes' => [
        'CB_DateTimeEx',
        'CB_Date'
    ]
];
$start_date = cb_unserialize($sess_event['start_date'],
    $datetime_options_unserialize);
$end_date = cb_unserialize($sess_event['end_date'],
    $datetime_options_unserialize);

$params = (isset($G_INPUT)) ? $G_INPUT : null;
unset($params['pg']);
unset($params['fgid']);
$smarty->assign('params', $params);

require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular = $locator->getInstance('cellular');
$uconfig = $cellular->getUserConfig($G_login_user);
$limit = $uconfig->getListMax();

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();

//$show_organize =  $systemlogic->getShowOrganize ();
$dynamic_roles = $G_uum->listGrantedRoles();

// 施設グループ
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

if (($p = strpos($fgid, '_')) !== false) {
    $tmp_fgid = substr($fgid, 0, $p);
} else {
    $tmp_fgid = $fgid;
}
if (strlen($tmp_fgid) == 0 || $tmp_fgid == 'a' || $tmp_fgid == '0') {
    $tmp_fgid = null;
    $fgid = '0';
}

$select_list = GRN_ScheduleCellularUtil::makeFacilityGroupArray($tmp_fgid,
    $G_login_user, $dynamic_roles, $is_access, $facility_logic, $acc_logic,
    $systemlogic, '', cb_get_pagename(), $lax_evaluate);

$smarty->assign('select_list', $select_list);
if (strlen($fgid)) {
    $smarty->assign('fgid', $fgid);
}


$facilities = GRN_ScheduleCellularUtil::makeFacilityArray($tmp_fgid,
    $G_login_user, $dynamic_roles, $is_access, $facility_logic, $acc_logic,
    $systemlogic, $lax_evaluate);

//--- add VCBSCH0010 ---s
// V-CUBEシステムが利用可能かを取得する。
require_once('schedule/netmeeting_system_logic.csp');
$netmeeting_system_logic = GRN_Netmeeting_SystemLogic::getInstance();
$netmeeting_system_available
    = $netmeeting_system_logic->getNetmeetingAvailable();
//--- add VCBSCH0010 ---e

// 絞り込む
$display_obj = [];
if ($facilities) {
    require_once('schedule/event_base_logic.csp');
    // _checkConflictMemberEventはprivateなのでpublicを提供して頂く必要がある
    $logic = new GRN_Schedule_EventBaseLogic;
    foreach ($facilities as $id => $obj) {
        //--- update VCBSCH0010 ---s
        //$set_flag = isset($sess_event['facilities'])?(array_key_exists( $obj->getOID(), $sess_event['facilities'] )) : false;
        //$display_obj[] = array( 'fid'  => $obj->getOID(),
        //                        'name' => $obj->get('name'),
        //                        'set' => $set_flag,
        //                        'conflict' => $logic->_checkConflictMemberEvent( $obj, $start_date, $end_date, $eid ),
        //                      );
        // V-CUBE利用可能状態で施設がV-CUBE連携対象の場合、表示しない。
        if (($netmeeting_system_available == 1)
            && ($obj->get('netmeeting_available') == 1)
        ) {
        } else {

            $set_flag = isset($sess_event['facilities'])
                ? (array_key_exists($obj->getOID(), $sess_event['facilities']))
                : false;

            $display_obj[] = [
                'fid'      => $obj->getOID(),
                'name'     => $obj->get('name'),
                'set'      => $set_flag,
                'conflict' => $logic->_checkConflictMemberEvent($obj,
                    $start_date, $end_date, $eid),
            ];
        }
        //--- update VCBSCH0010 ---e
    }
}

//ページ毎に表示するリストを取得。
$total_count = count($display_obj);
if ($total_count > $limit) {
    $start_point = ($page) * $limit;
    $end_point = ($page + 1) * $limit;

    $temp = [];
    for ($i = $start_point; $i < $end_point && $i < $total_count; $i++) {
        if ($display_obj[$i]) {
            array_push($temp, $display_obj[$i]);
        }
    }
    if ($end_point < $total_count) {
        $next = $page + 1;
        $smarty->assign('next_page', $next);
        $smarty->assign('next', true);
    }
    if ($page > 0) {
        $prev = $page - 1;
        $smarty->assign('prev_page', $prev);
        $smarty->assign('prev', true);
    }
    $smarty->assign('objects', $temp);
} else {
    $smarty->assign('objects', $display_obj);
}

$smarty->display(cb_get_pagename() . '.tpl');


