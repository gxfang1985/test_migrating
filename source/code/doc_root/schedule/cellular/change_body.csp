<?php
//parameters
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\ScheduleFacilityApprovalSetting;

$day = (isset($G_INPUT['day'])) ? $G_INPUT['day'] : null;
$eid = (isset($G_INPUT['eid'])) ? $G_INPUT['eid'] : null;
$mid = (isset($G_INPUT['mid'])) ? $G_INPUT['mid'] : null;

require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular_app = $locator->getInstance('cellular');
$user_config = $cellular_app->getUserConfig($G_login_user);
$width = $user_config->getSubjectWidth();

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();

// sesstion
$sess_sche_edit = $G_cellular_session->get('sess_sche_edit');
//echo "<pre>".nl2br(print_r($sess_sche_edit,true))."</pre>";
//echo "<pre>".nl2br(print_r($eid,true))."</pre>";

$s_eid = (isset($sess_sche_edit['eid'])) ? $sess_sche_edit['eid'] : null;

if ($eid != $s_eid || @$G_INPUT['cs']) {
    // 最初に来た場合、又はセッション切れ
    // スケジュール情報をセッションに入れる
    $sess_sche_edit['day'] = $day;
    $sess_sche_edit['eid'] = $eid;
    $sess_sche_edit['mid'] = $mid;

    require_once("fw/date.csp");
    $date = new CB_Date();
    if ( ! $date->parse($day)) {
        $date = null;
    }
    $event = $app->getEvent($G_login_user, $eid, $date);

    if ( ! $event) {
        cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
    }

    // アクセス権のチェック
    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();
    $dynamic_role = $G_uum->listGrantedRoles();
    $access = $acc_logic->getEventAccess($G_login_user, $event,
        ['read', 'modify', 'delete', 'add'], $dynamic_role);

    if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
    }

    if ($access['modify'] == GRN_SCHD_ACCESS_DENY) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_MODIFY);
    }

    //スケジュールタイプ
    $sess_sche_edit['all_day'] = false;
    $sess_sche_edit['banner_flag'] = false;
    $sess_sche_edit['facility_flag'] = true;
    if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_BANNER)
        == GRN_SCHEDULE_EVENT_TYPE_BANNER
    ) {
        //バナー予定の場合
        $sess_sche_edit['banner_flag'] = true;
        $sess_sche_edit['facility_flag'] = false;

        $sess_sche_edit['start_date'] = serialize($event->setdate);
        $sess_sche_edit['end_date'] = serialize($event->enddate);
    } elseif (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
              == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
    ) {
        //終日予定の場合
        $sess_sche_edit['all_day'] = true;
        $sess_sche_edit['facility_flag'] = false;

        $sess_sche_edit['start_date'] = serialize($event->setdatetime);
        $sess_sche_edit['end_date'] = serialize($event->enddatetime);
    } else {
        if ( ! $event->enddatetime) {
            $sess_sche_edit['facility_flag'] = false;
            $sess_sche_edit['start_date'] = serialize($event->setdatetime);
            $sess_sche_edit['end_date'] = serialize($event->enddatetime);
        } else {
            $sess_sche_edit['start_date'] = serialize($event->setdatetime);
            $sess_sche_edit['end_date'] = serialize($event->enddatetime);
        }
    }

    $sess_sche_edit['menu'] = $event->menu . ";#" . $event->menucolor;
    $sess_sche_edit['title'] = $event->detail;
    $sess_sche_edit['use_private'] = $systemlogic->getUsePrivate();
    $sess_sche_edit['info'] = $event->memo;
    //本文が長い時、編集禁止
    if (mb_strlen($event->memo) > 1024) {
        $sess_sche_edit['info_edit'] = false;
    } else {
        $sess_sche_edit['info_edit'] = true;
    }
    //参加者
    $members = [];
    if ($event->groups) {
        foreach ($event->groups as $group) {
            $members['g' . $group->getOID()] = $group->get('name');
        }
    }
    if ($event->users) {
        foreach ($event->users as $user) {
            $members[$user->getOID()] = $user->get('display_name');
        }
    }
    $sess_sche_edit['joint'] = $members;

    //参加者が30人以上の場合、編集禁止
    $sess_sche_edit['joint_edit'] = (count($sess_sche_edit['joint']) <= 30
        ? true : false);

    //施設
    $members = [];
    if ($event->facilities) {
        foreach ($event->facilities as $facility) {
            $members[$facility->getOID()] = $facility->get('name');
        }

        if ((new ScheduleFacilityApprovalSetting())->hasFacilityNeedApproval(array_keys($event->facilities))) {
            $sess_sche_edit['default_using_purpose']
                = (new FacilityApprovalLogic())->getFacilityUsingPurpose($eid);
            $sess_sche_edit['using_purpose']
                = $sess_sche_edit['default_using_purpose'];
        }
    }
    $sess_sche_edit['facilities'] = $members;

    //施設が5以上の場合、編集禁止
    $sess_sche_edit['facilities_edit'] = (count($sess_sche_edit['facilities'])
                                          <= 5 ? true : false);

    $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);
} else {
    // セッションに情報がある
}

// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;

// SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'schedule/cellular/change_body';
SmartyValidate::register_form($form_name, true);
$smarty->assign('form_name', $form_name);

// ページタイトル
$smarty->assign('pagetitle', grn_get_current_page_display_name());
// アプリケーション名
$smarty->assign('appname', $G_application->getName());
// パス情報
$smarty->assign('pagepath', $G_pagepath);
// assign
$smarty->assign('day', $sess_sche_edit['day']);
$smarty->assign('eid', $sess_sche_edit['eid']);
$smarty->assign('mid', $sess_sche_edit['mid']);
$smarty->assign('width', $width);

// 予定ニュー
$menu_option = [];
$menus = $systemlogic->getMenus();
foreach ($menus as $menu) {
    $menu_option[] = $menu;
}
$menus = $personallogic->getMenus($G_login_user);
foreach ($menus as $menu) {
    $menu_option[] = [$menu, ''];
}

foreach ($menu_option as $key => $_temp_menu) {
    if (strcmp($_temp_menu[0] . ";#" . $_temp_menu[1], @$sess_sche_edit['menu'])
        == 0
    ) {
        $menu_option[$key][2] = true;
    }
}

$smarty->assign('menu_option', $menu_option);

$datetime_options_unserialize = [
    'allowed_classes' => [
        'CB_DateTimeEx',
        'CB_Date'
    ]
];
$schedule_event = array_merge($sess_sche_edit,
    [
        'start_date' => cb_unserialize($sess_sche_edit['start_date'] ?? null,
            $datetime_options_unserialize),
        'end_date'   => cb_unserialize($sess_sche_edit['end_date'] ?? null,
            $datetime_options_unserialize),
    ]
);

if ($schedule_event['info_edit']) {
    if (mb_strlen($schedule_event['info']) > 1024) {
        $schedule_event['info'] = mb_substr($schedule_event['info'], 0, 1024);
    }
}

//参加者が30人以下の時、追加禁止
$schedule_event['joint_add'] = (count($schedule_event['joint']) < 30 ? true
    : false);
//施設が5以下の時、追加禁止
$schedule_event['facilities_add'] = (count($schedule_event['facilities']) < 5
    ? true : false);

$smarty->assign('schedata', $schedule_event);


$conflict = [];
if (count($schedule_event['facilities'])) {
    // _checkConflictMemberEventはprivateなのでpublicを提供して頂く必要がある
    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();
    require_once('schedule/event_base_logic.csp');
    $logic = new GRN_Schedule_EventBaseLogic;
    foreach ($schedule_event['facilities'] as $_id => $_name) {
        $_obj = $facility_logic->getFacility($_id);
        if ($_obj === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }

        if ($logic->_checkConflictMemberEvent($_obj,
            $schedule_event['start_date'], $schedule_event['end_date'],
            $schedule_event['eid'])
        ) {
            $conflict[$_id] = true;
        }
    }

    // カスタマイズ項目取得
    $extended_items = $facility_logic->getData($eid);
    $smarty->assign('extended_items', $extended_items);
}
$smarty->assign('conflict', $conflict);

$required_facility_using_purpose = false;
if (isset($schedule_event['facilities'])
    && ! empty($schedule_event['facilities'])
) {
    $required_facility_using_purpose
        = (new ScheduleFacilityApprovalSetting())->hasFacilityNeedApproval(
        array_keys($schedule_event['facilities'])
    );
}
$smarty->assign('required_facility_using_purpose',
    $required_facility_using_purpose);

$smarty->display(cb_get_pagename() . '.tpl');

