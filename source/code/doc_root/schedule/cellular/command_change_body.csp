<?php

//noemal(modify)
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\ScheduleFacilityApprovalSetting;

require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'schedule/cellular/change_body';
SmartyValidate::register_form($form_name);
$smarty->assign('form_name', $form_name);

// このページで使用するセッション情報の取得
$sess_sche_edit = $G_cellular_session->get('sess_sche_edit');

if ( ! isset($sess_sche_edit['eid'])) {
    SmartyValidate::unregister_form($form_name);
    // セッション切れ
    grn_cellular_switch_page("cellular/menu");
}

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'GET') == 0) {
    //GET
    if (isset($G_INPUT['mid'])) {
        //参加者追加処理
        if ( ! array_key_exists($G_INPUT['mid'], $sess_sche_edit['joint'])) {
            if (mb_substr($G_INPUT['mid'], 0, 1) == 'g') {
                //組織追加
                $group_id = mb_substr($G_INPUT['mid'], 1);
                $group = $G_uum->getGroup($group_id);
                if ($group) {
                    $sess_sche_edit['joint'][$G_INPUT['mid']]
                        = $group->get('name');
                }
            } else {
                $user_id = $G_INPUT['mid'];
                $user = $G_uum->getUser($user_id);
                if ($user) {
                    $sess_sche_edit['joint'][$G_INPUT['mid']]
                        = $user->get('display_name');
                }
            }

            if (count($sess_sche_edit['joint']) > 30) {
                $sess_sche_edit['joint_edit'] = false;
            }
        }
    }
    if (isset($G_INPUT['fid'])) {
        //施設追加処理
        if ( ! array_key_exists($G_INPUT['fid'],
            $sess_sche_edit['facilities'])
        ) {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            $facility = $facility_logic->getFacility($G_INPUT['fid']);
            if ($facility !== false) {
                $sess_sche_edit['facilities'][$G_INPUT['fid']]
                    = $facility->get('name');

                $needApprovalFacilityIds
                    = (new ScheduleFacilityApprovalSetting())->filterNeedApprovalFacilityIds(
                    array_keys($sess_sche_edit['facilities'])
                );
                if (count($needApprovalFacilityIds) === 1
                    && $needApprovalFacilityIds[0] == $facility->getOID()
                ) {
                    // Restore "facility using purpose" value when the number of "need approval facility" was increased from 0 to 1.
                    $sess_sche_edit['using_purpose'] = cb_at($sess_sche_edit,
                        'default_using_purpose');
                }
            }

            if (count($sess_sche_edit['facilities']) > 5) {
                $sess_sche_edit['facilities_edit'] = false;
            }
        }
    }
    $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);

    // redirect
    grn_cellular_switch_page($G_pagepath . "/change_body", [
            'eid' => $sess_sche_edit['eid'],
            'mid' => $sess_sche_edit['mid'],
            'day' => $sess_sche_edit['day']
        ]
    );
} else {
    //POST
    $menutmp = @$G_INPUT['menu'];
    if ( ! is_null($menutmp) && substr($menutmp, -2) === ";#") {
        //appointment menu which defined personal setting
        //it is posted with ";#", but it does not have a color code
        $menutmp = substr($menutmp, 0, -2);
    }
    $sess_sche_edit['menu'] = $menutmp;
    $sess_sche_edit['title'] = @$G_INPUT['title'];
    if ($sess_sche_edit['info_edit']) {
        $sess_sche_edit['info'] = @$G_INPUT['info'];
    }

    $sess_sche_edit['using_purpose'] = cb_at($G_INPUT, 'using_purpose');

    // validate after a POST
    if ( ! SmartyValidate::is_valid($G_INPUT, $form_name)) {
        // validate error
        $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);
        // redirect
        grn_cellular_switch_page($G_pagepath . "/change_body", [
                'eid' => $sess_sche_edit['eid'],
                'mid' => $sess_sche_edit['mid'],
                'day' => $sess_sche_edit['day']
            ]
        );
    }

    if (array_key_exists('add_joint', $G_INPUT)) {
        //参加者追加ページへ
        $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_user", [
                'eid'  => $sess_sche_edit['eid'],
                'mid'  => $sess_sche_edit['mid'],
                'day'  => $sess_sche_edit['day'],
                'from' => 'chg'
            ]
        );
    } elseif (array_key_exists('delete_joint', $G_INPUT)) {
        //参加者削除
        $delete_users = array_keys($G_INPUT['delete_joint']);
        foreach ($delete_users as $_id) {
            unset($sess_sche_edit['joint'][$_id]);
        }
        $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/change_body", [
                'eid' => $sess_sche_edit['eid'],
                'mid' => $sess_sche_edit['mid'],
                'day' => $sess_sche_edit['day']
            ]
        );
    } elseif (array_key_exists('add_fac', $G_INPUT)) {
        //施設追加ページへ
        $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_facility", [
                'eid'  => $sess_sche_edit['eid'],
                'mid'  => $sess_sche_edit['mid'],
                'day'  => $sess_sche_edit['day'],
                'from' => 'chg'
            ]
        );
    } elseif (array_key_exists('delete_fac', $G_INPUT)) {
        //施設削除
        $delete_facilities = array_keys($G_INPUT['delete_fac']);
        foreach ($delete_facilities as $_id) {
            unset($sess_sche_edit['facilities'][$_id]);
        }
        $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/change_body", [
                'eid' => $sess_sche_edit['eid'],
                'mid' => $sess_sche_edit['mid'],
                'day' => $sess_sche_edit['day']
            ]
        );
    } else {
        // イベントの変更処理
        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();

        require_once('schedule/system_logic.csp');
        $systemlogic = GRN_Schedule_SystemLogic::getInstance();
        require_once('schedule/personal_logic.csp');
        $personallogic = GRN_Schedule_PersonalLogic::getInstance();

        $datetime_options_unserialize = [
            'allowed_classes' => [
                'CB_DateTimeEx',
                'CB_Date'
            ]
        ];
        $start_date
            = cb_unserialize($sess_sche_edit['start_date'],
            $datetime_options_unserialize);
        $end_date
            = cb_unserialize($sess_sche_edit['end_date'],
            $datetime_options_unserialize);

        $s_uids = array_keys(@$sess_sche_edit['joint']);
        if (count($s_uids) == 0) {
            cb_throw_error(E_GRN_SCHD_NOT_MEMBER);
        }
        $s_fids = array_keys(@$sess_sche_edit['facilities']);

        // 変更前のイベントの取得
        $old_event = $app->getEvent($G_login_user, $sess_sche_edit['eid'],
            $start_date);

        // GRN_Schedule_View_Util::createEvent用データ
        $sche_input = [
            'start_year'   => $start_date->year,
            'start_month'  => $start_date->month,
            'start_day'    => $start_date->day,
            'start_hour'   => @$start_date->hour,
            'start_minute' => @$start_date->minute,
            'end_year'     => @$end_date->year,
            'end_month'    => @$end_date->month,
            'end_day'      => @$end_date->day,
            'end_hour'     => @$end_date->hour,
            'end_minute'   => @$end_date->minute,
            'menu'         => $sess_sche_edit['menu'],
            'title'        => $sess_sche_edit['title'],
            'memo'         => $sess_sche_edit['info_edit']
                ? $sess_sche_edit['info'] : $old_event->memo,
            'sUID'         => $s_uids,
            'sITEM'        => $s_fids,
        ];
        if (isset($sess_sche_edit['banner_flag'])
            && $sess_sche_edit['banner_flag']
        ) {
            $sche_input['BN'] = $sess_sche_edit['banner_flag'];
        }

        $event_id = $sess_sche_edit['eid'];
        $str_date = $sess_sche_edit['day'];
        $sche_input['using_purpose'] = cb_at($sess_sche_edit, 'using_purpose');
        include('_modify.csp');
        $event_id = $eid;
        $mid = $sess_sche_edit['mid'];
        $day = $sess_sche_edit['day'];
        $sess_sche_edit = [];
        $G_cellular_session->set('sess_sche_edit', $sess_sche_edit);

        // 施設があれば、カスタマイズ項目を登録する
        if (is_array($s_fids) && count($s_fids) > 0) {
            // カスタマイズ項目登録
            $facility_logic->registerData($eid);
        } // 施設が削除された場合
        elseif (is_array($old_event->facilities)
                && count($old_event->facilities) > 0
        ) {
            // カスタマイズ項目を削除する
            $facility_logic->removeData($eid);
        }

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $G_uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($G_login_user, $new_event,
            ['read'], $dynamic_role);

//        SmartyValidate::disconnect();
        SmartyValidate::unregister_form($form_name);
        if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
            // redirect
            grn_cellular_redirect($G_pagepath . "/day",
                ['mid' => $mid, 'day' => $day]);
        } else {
            // redirect
            grn_cellular_redirect($G_pagepath . "/look1",
                ['eid' => $event_id, 'mid' => $mid, 'day' => $day]);
        }
    }
}

