<?php

use grn\schedule\AttendanceStatusLogic;

// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;

require_once('schedule/cellular_utils.csp');


// 
$smarty->assign('pagetitle', grn_get_current_page_display_name());
$smarty->assign('pagepath', $G_pagepath);
$smarty->assign('pagename', cb_get_pagename());

// 使用するパラメータ
$day  = $G_INPUT['day'] ?? '';
$gid =  $G_INPUT['gid'] ?? null;
$is_page_numeric = is_numeric($G_INPUT['pa'] ?? null);
$page = $is_page_numeric ? $G_INPUT['pa'] : null;

$params = (isset($G_INPUT)) ? $G_INPUT : null;
unset($params['gid']);
unset($params['pa']);
$smarty->assign('params', $params);

$tab = [
    'mode'   => 'b',
    'page'   => cb_get_pagename(),
    'params' => $params,
    'add'    => [
        // 施設tab
        [
            'mode' => 'f',
            'name' => cb_msg('grn.schedule.cellular', 'tab_facility'),
        ],
        // 検索tab
        [
            'mode' => 's',
            'name' => cb_msg('grn.cellular.common', 'tab_search'),
        ],
    ],
];

// config
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular_app = $locator->getInstance('cellular');
$user_config = $cellular_app->getUserConfig($G_login_user);
$width = $user_config->getSubjectWidth();
$limit = $user_config->getListMax();

$limit = (int)($limit / 2);              // 暫定処理

// 初期定義
$assign_allday_map = [
    'sid'     => 'id',            // ＩＤ
    'title'   => 'title',         // 表題
    'joint'   => 'share',         // 共有
    'repeat'  => 'repeat',        // 繰り返し
    'private' => 'private',
];
$assign_normal_map = [
    'sid'     => 'id',            // ＩＤ
    'title'   => 'title',         // 表題
    'start'   => 'setdatetime',   // 開始時刻
    'end'     => 'enddatetime',   // 終了時刻
    'joint'   => 'share',         // 共有
    'repeat'  => 'repeat',        // 繰り返し
    'temp'    => 'temporary',     // 仮
    'private' => 'private',
];
$assign_banner_map = [
    'sid'     => 'id',            // ＩＤ
    'title'   => 'title',         // 表題
    'start'   => 'setdate',       // 開始日
    'end'     => 'enddate',       // 終了日
    'joint'   => 'share',         // 共有
    'repeat'  => 'repeat',        // 繰り返し
    'private' => 'private',
];

// 日付時刻（タイムスタンプ）クラス生成
require_once("fw/date.csp");
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$day_today = $tsex->getDate();

// 表示日の設定
$day_disp = new CB_Date();

if ( ! $day_disp->parse($day)) {
    // 今日をdefault
    $day_disp = $day_today;
//    $day_disp->parse( $day );
}

$smarty->assign('day', $day_disp->format());

//スケジュールのstart_dateとend_dateが異なる場合のために使う。
$day_disp_ex = new CB_DateEx($day_disp);
$smarty->assign('day_ex', $day_disp_ex);

// 前日 before 
$day_before = new CB_DateEx($day_disp);
$day_before->moveDays(-1);
$smarty->assign('before_day', $day_before->format());

// 翌日 after 
$day_after = new CB_DateEx($day_disp);
$day_after->moveDays(1);
//$after_params = array_merge( $params, array( 'day' => $day_after->format() ) );
$smarty->assign('after_day', $day_after->format());

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// ログインユーザーの各種設定の取得
require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
//$unit = $systemlogic->getScheduleUnit();
$hiddenprivate = $systemlogic->getHiddenPrivate();
//$showholiday = $systemlogic->getShowHoliday();
$show_organize = $systemlogic->getShowOrganize();
$smarty->assign('hiddenprivate', $hiddenprivate);

require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
//$showendtime = $personallogic->getShowEndTime( $G_login_user );
//$startwday = $personallogic->getCalendarWeekStart( $G_login_user );
$set_hour = 0;
$end_hour = 0;
$personallogic->getViewHour($G_login_user, $set_hour, $end_hour);

// アクセス権logic
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_logic::getInstance();
$dynamic_roles = $G_uum->listGrantedRoles();

$smarty->assign('access_plugin', [
    'name'   => 'schedule',
    'params' => ['action' => ['read']],
]);

if ( ! strlen($gid)) {
    $smarty->assign('gid', 'b');
} else {
    // gid分割
    $smarty->assign('gid', $gid);
    if (($p = strpos($gid, ':')) !== false) {
        $group_id = substr($gid, 0, $p);
    } elseif (($p = strpos($gid, '_')) !== false) {
        $group_id = substr($gid, 0, $p);
    } else {
        $group_id = $gid;
    }
    $prefix = substr($group_id, 0, 1);
    if ( ! is_numeric($prefix)) {
        $group_id = substr($group_id, 1);
    } else {
        $prefix = 'g';
    }
    $tab['mode'] = $prefix;

    $display_obj = [];

    if ($prefix == 's') {
        // 検索ページにswitch
        $G_cellular_session->set('schedule_search_group', cb_get_pagename());
        $G_cellular_session->set('schedule_search_user', "");
        $G_cellular_session->set('schedule_search_access', ['read']);
        grn_cellular_switch_page($G_pagepath . '/search_object');
    } elseif ($prefix == 'f') {
        $smarty->assign('facility_page', true);
        // 施設グループ
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();
        //$facility_history_manager = GRN_Facility_HistoryManager::getInstance();

        $tmp_access = ['read'];
        $f_list
            = GRN_ScheduleCellularUtil::makeFacilityGroupArray($group_id,
            $G_login_user, $dynamic_roles, $tmp_access, $facility_logic,
            $acc_logic, $systemlogic, 'f', cb_get_pagename());
        // 施設グループのassign
        $smarty->assign('option_list', $f_list);

        $facilities = GRN_ScheduleCellularUtil::makeFacilityArray($group_id,
            $G_login_user, $dynamic_roles, $tmp_access, $facility_logic,
            $acc_logic, $systemlogic);

        // 絞り込む
        if ($facilities) {
            foreach ($facilities as $id => $obj) {
                $display_obj[] = [
                    'mid'  => 'f' . $obj->getOID(),
                    'name' => $obj->get('name'),
                    'obj'  => $obj
                ];
            }
        }
    } elseif ($prefix == 'm') {
        if ($group_id) {
            // Myグループ
            $group = $G_uum->getMyGroup($group_id);
            if ( ! $group) {
                cb_throw_error(E_GRN_MYGROUP_NOT_FOUND);
            }
            // ユーザーの取得
            $members = $G_uum->getMyGroupUsers($group->getOID(), 0, -1, null,
                null, GRN_SCHEDULE_APPLICATION_ID);
            // アクセス権 絞り込み
            $members = $acc_logic->evaluateAccesses($G_login_user, $members,
                ['read'], $dynamic_roles, "user");

            if ($members) {
                foreach ($members as $id => $obj) {
                    $display_obj[] = [
                        'mid'  => $obj->getOID(),
                        'name' => $obj->get('display_name'),
                        'obj'  => $obj
                    ];
                }
            }

            //Facility
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            $dynamic_roles = $G_uum->listGrantedRoles();

            $facilities_tmp = $facility_logic->getOrderedFacilityPartInfoList();
            $facilities_tmp
                = $acc_logic->evaluateAccessesById($G_login_user,
                $facilities_tmp, ['read'], $dynamic_roles, 'facility');
            $facilities_in_mygroup
                = $G_uum->getMyGroupFacilitiesId($group->getOID());
            foreach ($facilities_in_mygroup as $key) {
                if (array_key_exists($key, $facilities_tmp)) {
                    $facility = $facility_logic->getFacility($key);
                    $display_obj[] = [
                        'mid'  => 'f' . $key,
                        'name' => $facilities_tmp[$key]['col_name'],
                        'obj'  => $facility
                    ];
                }
            }
        }
    } elseif ($prefix == 'u') {
        // 最近選択したユーザー
        $lists = $G_uum->getFrequentUsersInfo($G_login_user->getOID(), -1,
            null, GRN_SCHEDULE_APPLICATION_ID);
        $members = [];
        foreach (array_keys($lists) as $_id) {
            $members[$_id] = $G_uum->getUser($_id);
        }
        // アクセス権 絞り込み
        $members = $acc_logic->evaluateAccesses($G_login_user, $members,
            ['read'], $dynamic_roles, "user");

        if ($members) {
            foreach ($members as $id => $obj) {
                $display_obj[] = [
                    'mid'  => $obj->getOID(),
                    'name' => $obj->get('display_name'),
                    'obj'  => $obj
                ];
            }
        }
    } elseif ($prefix == 'q') {
        // 最近選択した施設
        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();
        $facility_history_manager = GRN_Facility_HistoryManager::getInstance();

        $lists
            = $facility_history_manager->getFacilityHistory($G_login_user->getOID());

        $facilities = [];
        if (count($lists)) {
            foreach ($lists as $_id) {
                $facilities[$_id] = $facility_logic->getFacility($_id);
            }
        }
        // アクセス権 絞り込み
        $facilities = $acc_logic->evaluateAccesses($G_login_user, $facilities,
            ['read'], $dynamic_roles, 'facility');

        // 絞り込む
        if ($facilities) {
            foreach ($facilities as $id => $obj) {
                $display_obj[] = [
                    'mid'  => 'f' . $obj->getOID(),
                    'name' => $obj->get('name'),
                    'obj'  => $obj
                ];
            }
        }
    } else {
        if ($group_id) {
            // 組織
            $group = $G_uum->getGroup($group_id);
            if ( ! $group) {
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);
            }
            if ($show_organize) {
                // アクセス権
                $accecc = $acc_logic->evaluateAccess($G_login_user, $group,
                    ['read'], $dynamic_roles);
                if ($accecc) {
                    $display_obj[] = [
                        'mid'  => 'g' . $group->getOID(),
                        'name' => $group->get('name'),
                        'obj'  => $group
                    ];
                }
            }
            // ユーザーの取得
            $members = $G_uum->getGroupUsers($group->getOID(), 0, -1, null,
                null, GRN_SCHEDULE_APPLICATION_ID);
            // アクセス権 絞り込み
            $members = $acc_logic->evaluateAccesses($G_login_user, $members,
                ['read'], $dynamic_roles, "user");
            // 絞り込む
            if ($members) {
                foreach ($members as $id => $obj) {
                    $display_obj[] = [
                        'mid'  => $obj->getOID(),
                        'name' => $obj->get('display_name'),
                        'obj'  => $obj
                    ];
                }
            }
        }
    }

    $list_count = $limit;
    $total_count = count($display_obj);
    if ($total_count > $list_count) {
        $start_point = ($page) * $list_count;
        $end_point = ($page + 1) * $list_count;

        $temp = [];
        for ($i = $start_point; $i < $end_point; $i++) {
            if (isset($display_obj[$i])) {
                array_push($temp, $display_obj[$i]);
            }
        }
        if ($end_point < $total_count) {
            $next = $page + 1;
            $smarty->assign('next_p', @$next);
            $smarty->assign('next', true);
        }
        if ($page > 0) {
            $before = $page - 1;
            $smarty->assign('prev_p', @$before);
            $smarty->assign('prev', true);
        }
        $display_obj = $temp;
    }

    // 人物ごとにスケジュールの取得
    if (count($display_obj)) {
        $attendanceStatusLogic = new AttendanceStatusLogic();
        $isEnableAttendanceStatus
            = $attendanceStatusLogic->isEnableAttendanceCheck();

        $group_sche_data = [];

        // 人物ごとにスケジュールの取得
        foreach ($display_obj as $member) {
            $setdate = $day_disp;
            $enddate = $day_disp;

            /** @var GRN_Schedule_Application $G_application */
            $schedata = $G_application->getEvents(
                $member['obj'],
                $setdate,
                $enddate,
                $G_login_user,
                GRN_SCHEDULE_EVENT_TYPE_ALLDAY | GRN_SCHEDULE_EVENT_TYPE_NORMAL
                | GRN_SCHEDULE_EVENT_TYPE_BANNER,
                $hiddenprivate,
                true,
                $isEnableAttendanceStatus
            );

            if ($isEnableAttendanceStatus) {
                require_once('schedule/view_util.csp');
                $util = GRN_Schedule_View_Util::getInstance();
                foreach (['normal', 'allday'] as $type) {
                    $schedata[$type]
                        = $util->filterAbsentEvents($schedata[$type]);
                }
            }

            // allday schedule
            $allday_for_view = [];
            if (count($schedata['allday'])) {
                foreach ($schedata['allday'] as $event => $data) {
                    foreach ($assign_allday_map as $view_name => $data_name) {
                        $allday_for_view[$event][$view_name]
                            = @$data[$data_name];
                    }
                    $allday_for_view[$event]['title'] = preg_replace([
                        '/&lt;/',
                        '/&gt;/',
                        '/&quot;/',
                        '/&amp;/'
                    ], ['<', '>', '"', '&'], $allday_for_view[$event]['title']);
                }
            }

            // normal schedule
            $normal_for_view = [];
            if (count($schedata['normal'])) {
                foreach ($schedata['normal'] as $event => $data) {
                    foreach ($assign_normal_map as $view_name => $data_name) {
                        $normal_for_view[$event][$view_name]
                            = @$data[$data_name];
                        //スケジュールのstart_dateとend_dateが異なる場合のため。
                        if ($data['setdatetime']->getDate()
                            != $data['enddatetime']->getDate()
                        ) {
                            $normal_for_view[$event]['sdate']
                                = $data['setdatetime']->getDate();
                            $normal_for_view[$event]['edate']
                                = $data['enddatetime']->getDate();
                        }
                    }
                    $normal_for_view[$event]['title'] = preg_replace([
                        '/&lt;/',
                        '/&gt;/',
                        '/&quot;/',
                        '/&amp;/'
                    ], ['<', '>', '"', '&'], $normal_for_view[$event]['title']);
                }
            }
            // カスタマイズ項目処理
            foreach ($normal_for_view as $key => $value) {
                $normal_data = &$normal_for_view[$key];
                if (array_key_exists('private', $normal_data) === true
                    && $normal_data['private'] === true
                ) {
                    continue;
                }
                if (isset($value['sid'])) {
                    $normal_data['title'] .= $facility_logic->getDataTitle($value['sid']);
                    $normal_data['title'] = preg_replace([
                        '/&lt;/',
                        '/&gt;/',
                        '/&quot;/',
                        '/&amp;/'
                    ], ['<', '>', '"', '&'], $normal_data['title']);
                }
            }

            // banner schedule
            $banner_for_view = [];
            if (count($schedata['banner'])) {
                foreach ($schedata['banner'] as $event => $data) {
                    foreach ($assign_banner_map as $view_name => $data_name) {
                        $banner_for_view[$event][$view_name]
                            = @$data[$data_name];
                    }
                    $banner_for_view[$event]['title'] = preg_replace([
                        '/&lt;/',
                        '/&gt;/',
                        '/&quot;/',
                        '/&amp;/'
                    ], ['<', '>', '"', '&'], $banner_for_view[$event]['title']);
                }
            }

            $group_sche_data[] = [
                'mid'    => $member['mid'],
                'name'   => $member['name'],
                'allday' => $allday_for_view,
                'normal' => $normal_for_view,
                'banner' => $banner_for_view,
            ];
        }
        $smarty->assign('group_sche_data', $group_sche_data);
    }
}

$smarty->assign('tab', $tab);

$smarty->assign('width', $width);
$smarty->assign('pa', $page);

// smartyの出力
$smarty->display(cb_get_pagename() . '.tpl');
