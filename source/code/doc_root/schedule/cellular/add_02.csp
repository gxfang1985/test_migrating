<?php

use grn\schedule\ScheduleFacilityApprovalSetting;

//parameters
$day = (isset($G_INPUT['day'])) ? $G_INPUT['day'] : null;
$mid = (isset($G_INPUT['mid'])) ? $G_INPUT['mid'] : null;

require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular_app = $locator->getInstance('cellular');
$user_config = $cellular_app->getUserConfig($G_login_user);
$width = $user_config->getSubjectWidth();

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();
require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();

// session
$sess_sche_add = $G_cellular_session->get('sess_sche_add');

if ( ! isset($sess_sche_add['flag'])) {
    // 最初に来た場合、又はセッション切れ
    // セッション情報作成

    grn_cellular_switch_page($G_pagepath . "/add_01", [
            'mid' => $mid,
            'day' => $day
        ]
    );
}


// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;

// SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'schedule/cellular/add_02';
SmartyValidate::register_form($form_name, true);
$smarty->assign('form_name', $form_name);

// ページタイトル
$smarty->assign('pagetitle', grn_get_current_page_display_name());
// アプリケーション名
$smarty->assign('appname', $G_application->getName());
// パス情報
$smarty->assign('pagepath', $G_pagepath);

// 日付
require_once("fw/date.csp");

// 予定ニュー
$menu_option = [];
$menus = $systemlogic->getMenus();
foreach ($menus as $menu) {
    $menu_option[] = $menu;
}
$menus = $personallogic->getMenus($G_login_user);
foreach ($menus as $menu) {
    $menu_option[] = [$menu, ''];
}

foreach ($menu_option as $key => $_temp_menu) {
    if (strcmp($_temp_menu[0] . ";#" . $_temp_menu[1], @$sess_sche_add['menu'])
        == 0
    ) {
        $menu_option[$key][2] = true;
    }
}

$smarty->assign('menu_option', $menu_option);

$start_date = null;
$end_date = null;
$datetime_options_unserialize = [
    'allowed_classes' => [
        'CB_DateTimeEx',
        'CB_Date'
    ]
];
if (isset($sess_sche_add['start_date'])) {
    $start_date = cb_unserialize($sess_sche_add['start_date'],
        $datetime_options_unserialize);
}
if (isset($sess_sche_add['end_date'])) {
    $end_date = cb_unserialize($sess_sche_add['end_date'],
        $datetime_options_unserialize);
}
$schedule_event = array_merge($sess_sche_add, [
        'start_date' => $start_date,
        'end_date'   => $end_date
    ]
);

if (isset($schedule_event['info'])
    && mb_strlen($schedule_event['info']) > 1024
) {
    $schedule_event['info'] = mb_substr($schedule_event['info'], 0, 1024);
}
//参加者が30人以下の時、追加禁止
$schedule_event['joint_add'] = (count($schedule_event['joint']) < 30 ? true
    : false);
//施設が5以下の時、追加禁止
$schedule_event['facilities_add'] = (count($schedule_event['facilities']) < 5
    ? true : false);

$smarty->assign('schedata', $schedule_event);

$conflict = [];
if (isset($schedule_event['facilities'])
    && count($schedule_event['facilities'])
) {
    // _checkConflictMemberEventはprivateなのでpublicを提供して頂く必要がある
    require_once('schedule/facility_system_logic.csp');
    $facility_logic = GRN_Facility_SystemLogic::getInstance();
    require_once('schedule/event_base_logic.csp');
    $logic = new GRN_Schedule_EventBaseLogic;
    foreach ($schedule_event['facilities'] as $_id => $_name) {
        $_obj = $facility_logic->getFacility($_id);
        if ($_obj === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }

        if ($logic->_checkConflictMemberEvent($_obj,
            $schedule_event['start_date'], $schedule_event['end_date'], null)
        ) {
            $conflict[$_id] = true;
        }
    }

    // カスタマイズ項目取得
    $extended_items = $facility_logic->listItemsView();
    foreach (array_keys($extended_items) as $key) {
        $item = &$extended_items[$key];
        if (array_key_exists($item['oid'], $G_INPUT)) {
            if ($item['type'] == GRN_SCHEDULE_ITEM_MENU) {
                $item['item_menu_text'] = $G_INPUT[$item['oid']];
            } else {
                $item['value'] = $G_INPUT[$item['oid']];
            }
        }
    }
    $smarty->assign('extended_items', $extended_items);
}
$smarty->assign('conflict', $conflict);

$required_facility_using_purpose = false;
if (isset($schedule_event['facilities'])
    && ! empty($schedule_event['facilities'])
) {
    $required_facility_using_purpose
        = (new ScheduleFacilityApprovalSetting())->hasFacilityNeedApproval(
        array_keys($schedule_event['facilities'])
    );
}
$smarty->assign('required_facility_using_purpose',
    $required_facility_using_purpose);

if ($start_date) {
    $smarty->assign('day',
        $start_date->year . '-' . $start_date->month . '-' . $start_date->day);
}
if (isset($sess_sche_add['mid'])) {
    $smarty->assign('mid', $sess_sche_add['mid']);
}

$smarty->display(cb_get_pagename() . '.tpl');
