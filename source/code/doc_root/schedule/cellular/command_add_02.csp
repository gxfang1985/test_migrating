<?php

use grn\schedule\FacilityApprovalLogic;
use grn\schedule\ScheduleMemberLogic;

require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'schedule/cellular/add_02';
SmartyValidate::register_form($form_name);
$smarty->assign('form_name', $form_name);

// このページで使用するセッション情報の取得
$sess_sche_add = $G_cellular_session->get('sess_sche_add');

$day = '';
$start_date = null;
$datetime_options_unserialize = [
    'allowed_classes' => [
        'CB_DateTimeEx',
        'CB_Date'
    ]
];
if (array_key_exists('start_date', $sess_sche_add)) {
    $start_date = cb_unserialize($sess_sche_add['start_date'],
        $datetime_options_unserialize);
}
if (is_a($start_date, 'CB_Date') || is_a($start_date, 'CB_DateTime')) {
    $day = $start_date->format();
}
$smarty->assign('day', $day);

$eid = (isset($sess_sche_add['eid'])) ? $sess_sche_add['eid'] : '';
//$day = (isset($sess_sche_add['day']))?$sess_sche_add['day']:'';
$mid = (isset($sess_sche_add['mid'])) ? $sess_sche_add['mid'] : '';

if ( ! @$sess_sche_add['flag']) {
    SmartyValidate::unregister_form($form_name);
    // セッション切れ
    grn_cellular_switch_page("cellular/menu");
}

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'GET') == 0) {
    //GET
    if (isset($G_INPUT['mid'])) {
        //参加者追加処理
        if ( ! array_key_exists($G_INPUT['mid'], $sess_sche_add['joint'])) {
            if (mb_substr($G_INPUT['mid'], 0, 1) == 'g') {
                //組織追加
                $group_id = mb_substr($G_INPUT['mid'], 1);
                $group = $G_uum->getGroup($group_id);
                if ($group) {
                    $sess_sche_add['joint'][$G_INPUT['mid']]
                        = $group->get('name');
                }
            } else {
                $user_id = $G_INPUT['mid'];
                $user = $G_uum->getUser($user_id);
                if ($user) {
                    $sess_sche_add['joint'][$G_INPUT['mid']]
                        = $user->get('display_name');
                }
            }

            if (count($sess_sche_add['joint']) > 30) {
                $sess_sche_add['joint_edit'] = false;
            }
        }
    }
    if (isset($G_INPUT['fid'])) {
        $sess_sche_add['facilities'] = (isset($sess_sche_add['facilities']))
            ? $sess_sche_add['facilities'] : [];
        //施設追加処理
        if ( ! array_key_exists($G_INPUT['fid'],
            $sess_sche_add['facilities'])
        ) {
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            $facility = $facility_logic->getFacility($G_INPUT['fid']);
            if ($facility !== false) {
                $sess_sche_add['facilities'][$G_INPUT['fid']]
                    = $facility->get('name');
            }

            if (count($sess_sche_add['facilities']) > 5) {
                $sess_sche_add['facilities_edit'] = false;
            }
        }
    }
    $G_cellular_session->set('sess_sche_add', $sess_sche_add);

    // redirect
    grn_cellular_switch_page($G_pagepath . "/add_02", [
            'eid' => $eid,
            'mid' => $mid,
            'day' => $day
        ]
    );
} else {
    //POST
    $menutmp = @$G_INPUT['menu'];
    if ( ! is_null($menutmp) && substr($menutmp, -2) === ";#") {
        //appointment menu which defined personal setting
        //it is posted with ";#", but it does not have a color code
        $menutmp = substr($menutmp, 0, -2);
    }
    $sess_sche_add['menu'] = $menutmp;
    $sess_sche_add['title'] = @$G_INPUT['title'];
    $sess_sche_add['info'] = @$G_INPUT['info'];
    $sess_sche_add['using_purpose'] = cb_at($G_INPUT, 'using_purpose');

    if ( ! SmartyValidate::is_valid($G_INPUT, $form_name)) {
        // validate error
        $G_cellular_session->set('sess_sche_add', $sess_sche_add);
        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_02", [
                'eid' => $eid,
                'mid' => $mid,
                'day' => $day
            ]
        );
    }

    if (array_key_exists('add_joint', $G_INPUT)) {
        //参加者追加ページへ
        $G_cellular_session->set('sess_sche_add', $sess_sche_add);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_user", [
                'mid'  => $mid,
                'day'  => $day,
                'from' => "add"
            ]
        );
    } elseif (array_key_exists('delete_joint', $G_INPUT)) {
        //参加者削除
        $delete_users = array_keys($G_INPUT['delete_joint']);
        foreach ($delete_users as $_id) {
            unset($sess_sche_add['joint'][$_id]);
        }
        $G_cellular_session->set('sess_sche_add', $sess_sche_add);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_02", [
                'eid' => $eid,
                'mid' => $mid,
                'day' => $day
            ]
        );
    } elseif (array_key_exists('add_fac', $G_INPUT)) {
        //施設追加ページへ
        $G_cellular_session->set('sess_sche_add', $sess_sche_add);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_facility", [
                'mid'  => $mid,
                'day'  => $day,
                'from' => "add"
            ]
        );
    } elseif (array_key_exists('delete_fac', $G_INPUT)) {
        //施設削除
        $delete_facilities = array_keys($G_INPUT['delete_fac']);
        foreach ($delete_facilities as $_id) {
            unset($sess_sche_add['facilities'][$_id]);
        }
        $G_cellular_session->set('sess_sche_add', $sess_sche_add);

        // redirect
        grn_cellular_switch_page($G_pagepath . "/add_02", [
                'eid' => $eid,
                'mid' => $mid,
                'day' => $day
            ]
        );
    } else {
        // イベントの新規登録
        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        require_once('schedule/view_util.csp');
        $util = GRN_Schedule_View_Util::getInstance();

        require_once('schedule/system_logic.csp');
        $systemlogic = GRN_Schedule_SystemLogic::getInstance();
        require_once('schedule/personal_logic.csp');
        $personallogic = GRN_Schedule_PersonalLogic::getInstance();

        $start_date = cb_unserialize($sess_sche_add['start_date'],
            $datetime_options_unserialize);
        $end_date = cb_unserialize($sess_sche_add['end_date'],
            $datetime_options_unserialize);

        $s_uids = (isset($sess_sche_add['joint']))
            ? array_keys($sess_sche_add['joint']) : null;
        $s_fids = (isset($sess_sche_add['facilities']))
            ? array_keys($sess_sche_add['facilities']) : null;

        // GRN_Schedule_View_Util::createEvent用データ
        $sche_input = [
            'start_year'   => $start_date->year,
            'start_month'  => $start_date->month,
            'start_day'    => $start_date->day,
            'start_hour'   => @$start_date->hour,
            'start_minute' => @$start_date->minute,

            'end_year'   => is_null($end_date) ? null : $end_date->year,
            'end_month'  => is_null($end_date) ? null : $end_date->month,
            'end_day'    => is_null($end_date) ? null : $end_date->day,
            'end_hour'   => @$end_date->hour,
            'end_minute' => @$end_date->minute,
            'menu'       => $sess_sche_add['menu'],
            'title'      => $sess_sche_add['title'],
            'memo'       => $sess_sche_add['info'],
            'sUID'       => $s_uids,
            'sITEM'      => $s_fids,
        ];
        if (@$sess_sche_add['banner_flag']) {
            $sche_input['BN'] = $sess_sche_add['banner_flag'];
        }
        // 新しいイベント
        $event = $util->createEvent($sche_input);

        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            $event->setUsingPurpose(
                cb_at($sess_sche_add, 'using_purpose'), function () {
                cb_throw_error(E_GRN_SCHD_FACILITY_USING_PURPOSE_IS_REQUIRED);
            }
            );
        }

        // アクセス権のチェック
        require_once('schedule/access_logic.csp');
        $acc_logic = GRN_Schedule_Access_Logic::getInstance();
        $dynamic_role = $G_uum->listGrantedRoles();
        $access = $acc_logic->getEventAccess($G_login_user, $event,
            ['read', 'add'], $dynamic_role, false);
        if ($access['add'] == GRN_SCHD_ACCESS_DENY) {
            cb_throw_error(E_GRN_SCHD_ACCESSDENY_ENTRY);
        }

        // データのチェック
        $app->checkEventData($event);

        // 公開先のチェック
        ScheduleMemberLogic::getInstance()->checkAddPublicToUser($event);

        if (is_a($event, 'GRN_Schedule_NormalEvent')) {
            if (is_a($event->setdatetime, 'CB_DateTime')
                && is_a($event->enddatetime, 'CB_Date')
            ) {
                $event->enddatetime = null;
            }
        }

        require_once('schedule/facility_system_logic.csp');
        $facility_logic = GRN_Facility_SystemLogic::getInstance();

        // 施設の予約期間,最大時間をチェック(運用管理者は無制限)
        require_once('schedule/facility_privilege.csp');
        $facility_privilege = GRN_Facility_Privilege_Logic::getInstance();
        if ($obj_facilities
            = $facility_privilege->getFacilitiesWithoutAuthority($G_login_user,
            $event->facilities)
        ) {
            if (is_a($event, 'GRN_Schedule_NormalEvent')) {
                $facility_logic->checkFacilityMaxTime($obj_facilities,
                    $event->enddatetime, $event->setdatetime);
                $facility_logic->checkFacilityLimit($obj_facilities,
                    $event->enddatetime);
            }
        }

        // 登録情報
        $event->creator = $G_login_user;
        $eid = $app->entryEvent($event);

        if (is_array($event->facilities) && count($event->facilities) > 0) {
            // 施設があれば、カスタマイズ項目を登録する
            $facility_logic->registerData($eid);

            if (is_a($event, 'GRN_Schedule_NormalEvent')) {
                $facilityApprovalLogic = new FacilityApprovalLogic();
                $facilityIds
                    = $facilityApprovalLogic->objectArrayToIdArray($event->facilities);
                $facilityApprovalLogic->setFacilitiesApplyingInfo($event,
                    $facilityIds);
            }
        }

        // 今日を求める
        $ts = new CB_TimeStamp();
        $ts->unix_ts = time();
        $tsex = new CB_TimeStampEx($ts);
        $today = $tsex->getDate();

        $day = $event->getFirstDate($today);

        $b_notify = true;
        if ($today->compare($day) <= 0) {
            if ($event->users && count($event->users) > 0) {
                $title
                    = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
                $app->setNotify($event->users, $G_login_user, $event, $day,
                    $title, '', GRN_SCHEDULE_NOTIFY_ENTRY, $ts);
                // メール通知
                $app->forwardMail($event,
                    [GRN_SCHEDULE_NOTIFY_ENTRY => $event->users],
                    $G_login_user);
                $app->sendPushNotification(
                    $event, [GRN_SCHEDULE_NOTIFY_ENTRY => $event->users],
                    $G_login_user, true, $day, null);
            }

            if (is_array($event->facilities) && count($event->facilities) > 0) {
                $app->sendFacilityApprovalRequestNotify($event->facilities,
                    $event, $G_login_user, $tsex);
                $app->forwardFacilityRelyMail($event, $G_login_user);
                $app->sendPushNotificationOfFacilityRequest($event, [],
                    $G_login_user);
            }
        }
        $mid = $sess_sche_add['mid'];
        $sess_sche_add = [];
        $G_cellular_session->set('sess_sche_add', $sess_sche_add);

//        SmartyValidate::disconnect();
        SmartyValidate::unregister_form($form_name);
        // redirect
        grn_cellular_redirect($G_pagepath . "/day", [
                'eid' => $eid,
                'mid' => $mid,
                'day' => $day->format()
            ]
        );
    }
}

