<?php
// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;

// 使用するパラメータの定義
$from = (isset($G_INPUT['from'])) ? $G_INPUT['from'] : null;
$day = (isset($G_INPUT['day'])) ? $G_INPUT['day'] : null;
$mid = (isset($G_INPUT['mid'])) ? $G_INPUT['mid'] : null;
$gid = (isset($G_INPUT['gid'])) ? $G_INPUT['gid'] : null;
$page = (isset($G_INPUT['pg'])) ? $G_INPUT['pg'] : null;

require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular = $locator->getInstance('cellular');
$uconfig = $cellular->getUserConfig($G_login_user);
$limit = $uconfig->getListMax();

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();
require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();

$show_organize = $systemlogic->getShowOrganize();
/** @var GRN_Uum $G_uum */
$dynamic_roles = $G_uum->listGrantedRoles();

// 遷移先（遷移してきた元に戻る
if ($from == 'day') {
    $to_pagename = $G_pagepath . '/day';
} else {
    $to_pagename = $G_pagepath . '/week';
}
$smarty->assign('to_pagename', $to_pagename);
$smarty->assign('from', $from);
$smarty->assign('day', $day);
$smarty->assign('mid', $mid);

// 施設グループ
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

$f_list['0'] = cb_msg('grn.schedule', 'facility_all');
$groups = $facility_logic->getFacilityGroups();
if ( ! is_null($groups)) {
    $groups = $acc_logic->evaluateAccesses($G_login_user, $groups, ['read'],
        $dynamic_roles, 'facilitygroup');
    foreach ($groups as $_group) {
        if ($facility_logic->getFacilitiesCount($_group->getOID()) > 0) {
            $f_list[$_group->getOID()] = $_group->get('name');
        }
    }
}

$smarty->assign('option_add', [
    // 検索オプション
    's' => [
        'name' => cb_msg('grn.schedule.cellular', 'search_object'),
        'list' => false,
    ],
    // 施設グループオプション
    'f' => [
        'name' => cb_msg('grn.schedule.cellular', 'menu_facility_group'),
        'list' => $f_list,
    ],
]);

$smarty->assign('access_plugin', [
    'name'   => 'schedule',
    'params' => ['action' => ['read']],
]);

if (strlen($gid)) {
    $display_obj = [];

    $smarty->assign('gid', $gid);

    // グループ
    $prefix = mb_substr($gid, 0, 1);
    $group_id = mb_substr($gid, 1);
    if ($prefix == 's') {
        // 検索ページにswitch
        $G_cellular_session->set('schedule_search_group', cb_get_pagename());
        $G_cellular_session->set('schedule_search_user', $to_pagename);
        $G_cellular_session->set('schedule_search_access', ['read']);
        cb_switch_page($G_pagepath . '/search_object.csp');
    }
    if (strlen($group_id) && strncmp($group_id, '-', 1)) {
        if ($prefix == 'f') {
            // 施設のリスト
            require_once('schedule/facility_system_logic.csp');
            $facility_logic = GRN_Facility_SystemLogic::getInstance();
            if ($group_id) {
                // １グループ
                $group = $facility_logic->getFacilityGroup($group_id);
                $facilities
                    = $facility_logic->getGroupFacilities($group->getOID());
            } else {
                // 全施設
                $facilities = $facility_logic->getGroupFacilities();
            }

            // アクセス権
            $target_facilities = $facilities;
            $facilities = $acc_logic->evaluateAccesses($G_login_user,
                $target_facilities, ['read'], $dynamic_roles, 'facility');

            // 絞り込む
            $display_obj = [];
            if ($facilities) {
                foreach ($facilities as $id => $obj) {
                    $display_obj[] = [
                        'mid'  => 'f' . $obj->getOID(),
                        'name' => $obj->get('name'),
                    ];
                }
            }
        } else {
            $display_obj = [];
            if ($prefix == 'm') {
                // Myグループ
                $group = $G_uum->getMyGroup($group_id);
                // ユーザーの取得
                $members = $G_uum->getMyGroupUsers($group->getOID(), 0, -1,
                    null, null, GRN_SCHEDULE_APPLICATION_ID);
            } elseif ($prefix == 'u') {
                // 最近選択したユーザー
                $lists = $G_uum->getFrequentUsersInfo($G_login_user->getOID(),
                    -1, null, GRN_SCHEDULE_APPLICATION_ID);
                $members = [];
                foreach (array_keys($lists) as $_id) {
                    $members[$_id] = $G_uum->getUser($_id);
                }
            } else {
                // 組織
                $group = $G_uum->getGroup($group_id);
                if ($show_organize) {
                    // アクセス権
                    $accecc = $acc_logic->evaluateAccess($G_login_user, $group,
                        ['read'], $dynamic_roles);
                    if ($accecc) {
                        $display_obj[] = [
                            'mid'  => 'g' . $group->getOID(),
                            'name' => $group->get('name'),
                        ];
                    }
                }
                // ユーザーの取得
                $members = $G_uum->getGroupUsers($group->getOID(), 0, -1, null,
                    null, GRN_SCHEDULE_APPLICATION_ID);
            }

            // アクセス権 絞り込み
            $members = $acc_logic->evaluateAccesses($G_login_user, $members,
                ['read'], $dynamic_roles, "user");

            if ($members) {
                foreach ($members as $id => $obj) {
                    $display_obj[] = [
                        'mid'  => $obj->getOID(),
                        'name' => $obj->get('display_name'),
                    ];
                }
            }
        }
    }

    //ページ毎に表示するリストを取得。
    $total_count = count($display_obj);
    if ($total_count > $limit) {
        $start_point = ($page) * $limit;
        $end_point = ($page + 1) * $limit;

        $temp = [];
        for ($i = $start_point; $i < $end_point; $i++) {
            if (isset($display_obj[$i])) {
                array_push($temp, $display_obj[$i]);
            }
        }
        if ($end_point < $total_count) {
            $next = $page + 1;
            $smarty->assign('next_page', @$next);
            $smarty->assign('next', true);
        }
        if ($page > 0) {
            $before = $page - 1;
            $smarty->assign('prev_page', @$before);
            $smarty->assign('prev', true);
        }
        $smarty->assign('objects', $temp);
    } else {
        $smarty->assign('objects', $display_obj);
    }

}

// ページタイトル
$smarty->assign('pagetitle', grn_get_current_page_display_name());
// パス情報
$smarty->assign('pagepath', $G_pagepath);
// smartyの出力
$smarty->display(cb_get_pagename() . '.tpl');


