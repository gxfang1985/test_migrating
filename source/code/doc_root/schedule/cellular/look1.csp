<?php
// Smarty をインスタンス化
use grn\schedule\FacilityApprovalLogic;
use grn\schedule\ScheduleFacilityApprovalSetting;
use grn\grn\access\service\AppAccess;

require_once('cellular/smarty.csp');
require_once('schedule/view_util.csp');
$smarty = new GRN_Cellular_Smarty;

// ページタイトル
$smarty->assign('pagetitle', grn_get_current_page_display_name());
// アプリケーション名
$smarty->assign('appname', $G_application->getName());
// パス情報
$smarty->assign('pagepath', $G_pagepath);

// param
$day = @ $G_INPUT['day'];
$member_id = @ $G_INPUT['mid'];
$event_id = @ $G_INPUT['eid'];
$body_page = @ $G_INPUT['bp'];
$follow_page = @ $G_INPUT['fp'];
$item_limit = 5;

// config
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular_app = $locator->getInstance('cellular');
$user_config = $cellular_app->getUserConfig($G_login_user);
$width = $user_config->getSubjectWidth();
$limit = $user_config->getListMax();

// 対象
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

if ( ! $member_id) {
    $member_id = $G_login_user->getOID();
}    // 自分をdefault

switch (mb_substr($member_id, 0, 1)) {
    case 'f':
        // 施設
        $target = $facility_logic->getFacility(mb_substr($member_id, 1));
        if ($target === false) {
            cb_throw_error(E_GRN_FCLT_NOTFOUND_FACILITY);
        }
        $smarty->assign('mid', $member_id);
        $smarty->assign('target_name', $target->get('name'));
        break;
    case 'g':
        // 組織
        $target = $G_uum->getGroup(mb_substr($member_id, 1));
        if ( ! $target) {
            cb_throw_error(E_GRN_GROUP_NOT_FOUND);
        }
        $smarty->assign('mid', $member_id);
        $smarty->assign('target_name', $target->get('name'));
        break;
        break;
    default:
        // 人物
        $target = $G_uum->getUser($member_id);
        if ( ! $target) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        $smarty->assign('mid', $member_id);
        $smarty->assign('target_name', $target->get('display_name'));
        break;
}

// 日付
require_once("fw/date.csp");
$date = new CB_Date();

if ( ! $date->parse($day)) {
    $tsex = new CB_TimeStampEx();
    $date = $tsex->getDate();
}

// else
// {
// $smarty->assign( 'day', $date->format() );
// }

//スケジュールのstart_dateとend_dateが異なる場合のために使う。
$day_disp_ex = new CB_DateEx($date);
$smarty->assign('day_ex', $day_disp_ex);

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

//スケジュール情報取得
$event = $G_application->getEvent($G_login_user, $event_id, null);
// 安全対策
if ( ! $event) {
    // 通知の処理
    $G_application->readEvent($G_login_user, $event_id);
    $smarty->assign('event_deleted_flag', true);

    // display
    $smarty->display(cb_get_pagename() . '.tpl');
    cb_safe_exit();

//        cb_throw_error( E_GRN_SCHD_NOTFOUND_EVENT );
} else {
    // アクセス権のチェック
    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();
    $dynamic_role = $G_uum->listGrantedRoles();
    $access = $acc_logic->getEventAccess($G_login_user, $event,
        ['read', 'modify', 'delete', 'add'], $dynamic_role);
    if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
        cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
    }

    $event_modify = $access['modify'];
    $event_delete = $access['delete'];

    if (($access['add'] != GRN_SCHD_ACCESS_DENY)
        || ($access['delete'] != GRN_SCHD_ACCESS_DENY)
        || ($access['modify'] != GRN_SCHD_ACCESS_DENY)
    ) {
        $event_follow = true;
    } else {
        $event_follow = false;
    }
    $smarty->assign('event_follow', $event_follow);

    $smarty->assign('eid', $event_id);

    if (is_a($event, 'GRN_Schedule_NormalEvent')) {
        if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_START)
            == GRN_SCHEDULE_EVENT_TYPE_START
        ) {
            // 日付が違う場合は、元の日付に戻す
            if ($G_application->compareDate($event->setdatetime, $date) !== 0) {
                $date->year = $event->setdatetime->year;
                $date->month = $event->setdatetime->month;
                $date->day = $event->setdatetime->day;
            }
        } else {
            if (($G_application->compareDate($date, $event->setdatetime) < 0)
                || ($G_application->compareDate($date, $event->enddatetime) > 0)
            ) {
                $date->year = $event->setdatetime->year;
                $date->month = $event->setdatetime->month;
                $date->day = $event->setdatetime->day;
            }
        }
    } elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
        // 日付が違う場合は、元の日付に戻す
        require_once('schedule/banner_event_logic.csp');
        $banner_logic = GRN_Schedule_BannerEventLogic::getInstance();
        if ( ! $banner_logic->isInDateSpan($event, $date)) {
            $banner_setdatetime
                = $banner_logic->getStartDateTimeInUserTimezone($event);
            $date->year = $banner_setdatetime->year;
            $date->month = $banner_setdatetime->month;
            $date->day = $banner_setdatetime->day;
        }
    } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
        // 例外日ではなかった場合
        if ($event) {
            require_once('schedule/repeat_event_logic.csp');
            $repeat_logic = GRN_Schedule_RepeatEventLogic::getInstance();
            $event_date = $repeat_logic->getRepeatFirstDate($event, $date);

            //for bug 1820
            $event_type = $event->getEventType();
            // sh only date
            //if true -->getdata have datetime

            if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
                $repeat_id_arr = $repeat_logic->getIDScheduleNormal($event->id,
                    false);
            } else {
                $repeat_id_arr = $repeat_logic->getIDScheduleNormal($event->id,
                    true);
            }

            $event_date_format = null;
            if (isset($event_date['setdatetime'])) {
                $event_date_format
                    = CB_Date::valueOf($event_date['setdatetime']->year,
                    $event_date['setdatetime']->month,
                    $event_date['setdatetime']->day)->format();
            }

            for ($i = 0; $i < count($repeat_id_arr); $i++) {
                if (($event_type & GRN_SCHEDULE_EVENT_TYPE_ALLDAY) > 0) {
                    $datetime = $repeat_id_arr[$i]['setdatetime'];
                } else {
                    $datetime = date("Y-m-d",
                        $repeat_id_arr[$i]['setdatetime']);
                }

                if ($datetime === $day && $event_date_format !== $day) {
                    $event = $G_application->getEvent($G_login_user,
                        $repeat_id_arr[$i]['event_id'], null,
                        CB_DATABASE_NO_LOCK, false,
                        GRN_SCHEDULE_GET_MEMBER_OBJECT);

                    if ($event == false) {
                        continue;
                    }

                    if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_START)
                        == GRN_SCHEDULE_EVENT_TYPE_START
                    ) {
                        // 日付が違う場合は、元の日付に戻す
                        if ($G_application->compareDate($event->setdatetime,
                                $date) !== 0
                        ) {
                            $date->year = $event->setdatetime->year;
                            $date->month = $event->setdatetime->month;
                            $date->day = $event->setdatetime->day;
                        }
                    } else {
                        if (($G_application->compareDate($date,
                                    $event->setdatetime) < 0)
                            || ($G_application->compareDate($date,
                                    $event->enddatetime) > 0)
                        ) {
                            $date->year = $event->setdatetime->year;
                            $date->month = $event->setdatetime->month;
                            $date->day = $event->setdatetime->day;
                        }
                    }
                    $event_id = $repeat_id_arr[$i]['event_id'];
                    break;
                }
            }

            if (@ $datetime != @ $day) {
                if (is_a($event_date['setdatetime'], 'CB_Date')
                    || is_a($event_date['setdatetime'], 'CB_DateTime')
                ) {
                    $date->year = $event_date['setdatetime']->year;
                    $date->month = $event_date['setdatetime']->month;
                    $date->day = $event_date['setdatetime']->day;

                    $event->setdatetime = &$event_date['setdatetime'];
                    $event->enddatetime = &$event_date['enddatetime'];
                } else {
                    // イベントとして日付がなくなった場合
                    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
                }
            }
        }
    } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')
              && is_a($date, 'CB_Date')
    ) {
        require_once('schedule/temporary_event_logic.csp');
        $temporary_event_logic
            = GRN_Schedule_TemporaryEventLogic::getInstance();
        $date = $temporary_event_logic->getDisplayDate($event, $date);
    }

    $smarty->assign('day', $date->format());

    // イベントタイプ
    if (is_a($event, 'GRN_Schedule_BannerEvent')) {
        // バナー
        $temp['start_date'] = $event->setdate->format();
        $temp['end_date'] = $event->enddate->format();
    } elseif (is_a($event, 'GRN_Schedule_RepeatEvent')) {
        // 繰り返し
        $temp['repeat_data'] = $util->getRepeatData($event->repeat_type,
            $event->wday, $event->day);
        if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
            != GRN_SCHEDULE_EVENT_TYPE_ALLDAY
        ) {
            $temp['start_time'] = $event->settime->format();;
            if ($event->endtime) {
                $temp['end_time'] = $event->endtime->format();
            };
        }
        $event_modify = GRN_SCHD_ACCESS_DENY;
        $event_delete = GRN_SCHD_ACCESS_DENY;
    } elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
        $temporary = [];
        if ($event->isORSearch()) {
            foreach ($event->setdates as $facility_data) {
                $facility_dates = [];
                foreach ($facility_data['dates'] as $tp_id => $temp_date) {
                    $facility_dates[] = [
                        'temporary_id' => $tp_id,
                        'setdatetime'  => $temp_date['setdatetime'],
                        'enddatetime'  => $temp_date['enddatetime']
                    ];
                }
                $temporary[]
                    = [
                    'facility_name' => $facility_data['facility']->get('name'),
                    'dates'         => $facility_dates
                ];
            }
            $temp['temporary_type'] = 'or';
        } else {
            foreach ($event->setdates as $tp_id => $temp_date) {
                $temporary[] = [
                    'temporary_id' => $tp_id,
                    'setdatetime'  => $temp_date['setdatetime'],
                    'enddatetime'  => $temp_date['enddatetime']
                ];
            }
            $temp['temporary_type'] = 'normal';
        }
        $temp['temporary'] = $temporary;

        $event_modify = GRN_SCHD_ACCESS_DENY;
        $event_delete = GRN_SCHD_ACCESS_DENY;
    } else {
        // その他
        $temp['start_date'] = $event->setdatetime->format();
        if ($event->enddatetime) {
            $temp['end_date'] = $event->enddatetime->format();

            if (($event->setdatetime->year != $event->enddatetime->year)
                || ($event->setdatetime->month != $event->enddatetime->month)
                || ($event->setdatetime->day != $event->enddatetime->day)
            ) {
                $temp['sdate'] = new CB_DateEx($event->setdatetime);
                $temp['edate'] = new CB_DateEx($event->enddatetime);
            }
        }

        if (is_array($event->facilities) && count($event->facilities) > 0) {
            //--- add VCBSCH0010 ---s
            // V-CUBEシステムが利用可能かを取得する。
            require_once('schedule/netmeeting_system_logic.csp');
            $netmeeting_system_logic
                = GRN_Netmeeting_SystemLogic::getInstance();
            $netmeeting_system_available
                = $netmeeting_system_logic->getNetmeetingAvailable();
            //--- add VCBSCH0010 ---e

            $f_settings
                = $facility_logic->getFacilitySetting(array_keys($event->facilities));
            foreach ($event->facilities as $facility) {
                //--- add VCBSCH0010 ---s
                // V-CUBEシステムが利用可能で、施設がV-CUBE連携対象の場合
                if (($netmeeting_system_available == 1)
                    && ($facility->get('netmeeting_available') == 1)
                ) {
                    $event_modify = GRN_SCHD_ACCESS_DENY;
                    $event_delete = GRN_SCHD_ACCESS_DENY;
                    break;
                }
                //--- add VCBSCH0010 ---s


                $faid = $facility->getOID();
                $modify_user
                    = $facility_logic->getModifyUserByPriority($f_settings,
                    $faid);
                // Only registrant can change
                if ($modify_user === 'creator') {
                    $login_id = $G_login_user->getOID();
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                    ) {
                        if ((is_a($event->creator, 'CB_User')
                             && $login_id != $event->creator->getOID())
                            || is_string($event->creator)
                        ) {
                            $event_modify = GRN_SCHD_ACCESS_DENY;
                            $event_delete = GRN_SCHD_ACCESS_DENY;
                        }

                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        // Anything OK when login user have operation permission on facility
                        if ($privilege_logic->hasPrivilegeOfFacilitiesById($G_login_user,
                            array_keys($event->facilities), 'OR')
                        ) {
                            $event_modify = GRN_SCHD_ACCESS_AFFIRM;
                            $event_delete = GRN_SCHD_ACCESS_AFFIRM;
                        }
                        if ($event_modify == GRN_SCHD_ACCESS_AFFIRM
                            || $event_delete == GRN_SCHD_ACCESS_AFFIRM
                        ) {
                            continue;
                        } elseif ($event_modify == GRN_SCHD_ACCESS_DENY
                                  || $event_delete == GRN_SCHD_ACCESS_DENY
                        ) {
                            break;
                        }
                    }
                } //Registrant and shared member can change
                elseif ($modify_user === 'member') {
                    $login_id = $G_login_user->getOID();
                    if ((is_array($event->facilities)
                         && count($event->facilities) > 0)
                    ) {
                        $b_login = false;
                        if (is_array($event->users)) {
                            //Check whether login user is shared member or not?
                            foreach (array_keys($event->users) as $object_id) {
                                if ( ! $b_login && $object_id == $login_id) {
                                    $b_login = true;
                                    break;
                                }
                            }
                        }
                        // Login user is not a member
                        if ( ! $b_login
                             && ((is_a($event->creator, 'CB_User')
                                  && $login_id !== $event->creator->getOID())
                                 || is_string($event->creator))
                        ) {
                            $event_modify = GRN_SCHD_ACCESS_DENY;
                            $event_delete = GRN_SCHD_ACCESS_DENY;
                        }

                        require_once('schedule/facility_privilege.csp');
                        $privilege_logic
                            = GRN_Facility_Privilege_Logic::getInstance();
                        // Anything OK when login user have operation permission on facility
                        if ($privilege_logic->hasPrivilegeOfFacilitiesById($G_login_user,
                            array_keys($event->facilities), 'OR')
                        ) {
                            $event_modify = GRN_SCHD_ACCESS_AFFIRM;
                            $event_delete = GRN_SCHD_ACCESS_AFFIRM;
                        }
                        if ($event_modify == GRN_SCHD_ACCESS_AFFIRM
                            || $event_delete == GRN_SCHD_ACCESS_AFFIRM
                        ) {
                            continue;
                        } elseif ($event_modify == GRN_SCHD_ACCESS_DENY
                                  || $event_delete == GRN_SCHD_ACCESS_DENY
                        ) {
                            break;
                        }
                    }
                }
            }
        }
    }

    $smarty->assign('event_modify', $event_modify);
    $smarty->assign('event_delete', $event_delete);

    if (($event->getEventType() & GRN_SCHEDULE_EVENT_TYPE_ALLDAY)
        == GRN_SCHEDULE_EVENT_TYPE_ALLDAY
    ) {
        $temp['allday'] = true;
    }

    // title
    //$temp['title'] = $event->getTitle();
    //$temp['title'] = htmlspecialchars_decode($event->getTitle());  php 5
    $temp['title'] = preg_replace(['/&lt;/', '/&gt;/', '/&quot;/', '/&amp;/'],
        ['<', '>', '"', '&'], $event->getTitle());
    if ($event->private == GRN_EVENT_PRIVATE_HIDDEN) {
        $temp['title'] .= cb_msg('grn.schedule', 'event_private');
    } elseif ($event->private == GRN_EVENT_PRIVATE_PRIVATE) {
        $temp['title'] .= cb_msg('grn.schedule', 'event_private');
    }
    $temp['type'] = $util->getViewEventType($event->getEventType(),
        $event->isShared());

    $temp['memo'] = $event->memo;
    //
    $timestamp = new CB_TimeStampEx($event->ctime);
    $datetime = $timestamp->getDateTime();
    $temp['ctime'] = $datetime->format();
    if (is_a($event->creator, 'CB_User')) {
        $temp['creator_uid'] = $event->creator->getOID();
        $temp['creator_name'] = $event->creator->get('display_name');
    } else {
        $temp['creator_uid'] = null;
        $temp['creator_name'] = $event->creator;
    }

    if ($event->mtime) {
        $timestamp = new CB_TimeStampEx($event->mtime);
        $datetime = $timestamp->getDateTime();
        $temp['mtime'] = $datetime->format();
        if (is_a($event->modifier, 'CB_User')) {
            $temp['modify_uid'] = $event->modifier->getOID();
            $temp['modify_name'] = $event->modifier->get('display_name');
        } else {
            $temp['modify_uid'] = null;
            $temp['modify_name'] = $event->modifier;
        }
    } else {
        $temp['mtime'] = $datetime->format();
        if (is_a($event->creator, 'CB_User')) {
            $temp['modify_uid'] = $event->creator->getOID();
            $temp['modify_name'] = $event->creator->get('display_name');
        } else {
            $temp['modify_uid'] = null;
            $temp['modify_name'] = $event->creator;
        }
    }

    // 施設
    $members = [];
    if ($event->facilities) {
        foreach ($event->facilities as $facility) {
            if (count($members) >= $item_limit) {
                $temp['facilities_more'] = true;
                break;
            }
            $members[$facility->getOID()] = $facility->get('name');
        }
    }
    $temp['facilities'] = $members;

    $has_required_approval_facility = false;
    if (is_a($event, 'GRN_Schedule_NormalEvent')) {
        $has_required_approval_facility
            = (new ScheduleFacilityApprovalSetting())->hasFacilityNeedApproval(
            array_keys($members)
        );
        if ($has_required_approval_facility) {
            $using_purpose
                = (new FacilityApprovalLogic())->getFacilityUsingPurpose($event->id);
            $temp['facility_using_purpose'] = $using_purpose;
        }
    }
    $temp['has_required_approval_facility'] = $has_required_approval_facility;

    // 施設のカスタマイズ項目
    if ( ! empty($members)) {
        // カスタマイズ項目を取得
        $extended_items = $facility_logic->getData($event_id);
        $smarty->assign('extended_items', $extended_items);
    }

    // 参加者の設定
    $members = [];
    if ($event->groups) {
        foreach ($event->groups as $group) {
            if (count($members) >= $item_limit) {
                $temp['users_more'] = true;
                break;
            }
            $members['g' . $group->getOID()] = $group->get('name');
        }
    }

    if ($event->users) {
        foreach ($event->users as $user) {
            if (count($members) >= $item_limit) {
                $temp['users_more'] = true;
                break;
            }
            $members[$user->getOID()] = $user->get('display_name');
        }
    }
    $temp['users'] = $members;

    //require_once( 'grn/controller.csp' );
    //$utility = new GRN_ControllerUtil();
    //$navi_start_position = $utility->getNaviStartPosition();
    //$limit = 3;
    // フォロー
    $follow_offset = $follow_page * $limit;
    //$follow_limit  = $limit + 1;
    $follow_limit = $limit;
    $follows = $G_application->getEventFollows($G_login_user, $event_id,
        $follow_offset, $follow_limit);

    if ($follow_page > 0) {
        $smarty->assign([
            'follow_prev'   => true,
            'follow_prev_p' => $follow_page - 1
        ]);
    }
    if (count($follows) > $follow_limit) {
        array_pop($follows);
        $smarty->assign([
            'follow_next'   => true,
            'follow_next_p' => $follow_page + 1
        ]);
    }

    $temp_follow = [];
    foreach ($follows as $fid => $follow) {
        $tsex = new CB_TimeStampEx($follow['ctime']);
        $datetime = $tsex->getDateTime();

        $temp_foll_data = (mb_strlen($follow['data']) >= $width)
            ? mb_substr($follow['data'], 0, $width) : $follow['data'];

        $temp_follow[] = [
            'follow_id'    => $fid,
            'creator_uid'  => $follow['creator_id'],
            'creator_name' => $follow['creator_name'],
            'ctime'        => $datetime->format(),
            'data'         => $follow['data']
        ];
    }
    $temp['follow'] = $temp_follow;

    //マルチレポートを利用可能かどうか
    //GTM-259 tv
    /* require_once('schedule/report_util.csp');
     require_once('report/application.csp');
     $report_app = new GRN_Report_Application();
     if(isEnableReport() && $report_app->isAvailableFor($G_login_user))*/
    require_once('report/resources.csp');
    require_once('grn/application.csp');
    $locator = GRN_ApplicationLocator::instance();
    if (AppAccess::isAppAvailableInternalAccess(GRN_REPORT_APPLICATION_ID)) {
        //関連する報告書があるかどうか
        require_once('report/controller_util.csp');
        $report_util
            = GRN_Report_Report_Schedule_Controller_Utility::getInstance();
        $report_list = $report_util->getListView($event_id, $G_login_user);
        $smarty->assign('count_list', count($report_list));
    }

    require_once('schedule/system_logic.csp');
    $systemlogic = GRN_Schedule_SystemLogic::getInstance();
    // 連携用のメニューの取得
    $menupage = $systemlogic->getMenuPageByMenu($event->menu);
    if ($menupage) {
        $_search = ['%Name%', '%ID%', '%Account%', '%Mail%'];
        $_replace = [
            $G_login_user->get('display_name'),
            $G_login_user->getOID(),
            $G_login_user->get('foreign_key'),
            $G_login_user->get('email_address')
        ];

        // 文字列の置き換え
        $menupage = str_replace($_search, $_replace, $menupage);
        $temp['menupage'] = ['menu' => $event->menu, 'data' => $menupage];

    }

    $temp['view_creator'] = ($temp['creator_uid'] == $G_login_user->getOID())
        ? true : false;

    // 通知の処理
    $G_application->readEvent($G_login_user, $event_id);

    if ( ! isset($temp['start_time']) && ! isset($temp['end_time'])
         && ! isset($temp['start_date'])
    ) {
        $temp['start_time'] = GRN_Schedule_View_Util::getAlldayStartTime();;
        $temp['end_time'] = GRN_Schedule_View_Util::getAlldayEndTime();
    }

    $smarty->assign('schedata', $temp);

    //echo "<pre>".print_r($temp,true)."</pre>";

    $smarty->assign('width', $width);

    //GTM-1136
    $allow_file_attachment = false;
    if ($systemlogic->getAllowFileAttachment() == '1') {
        require_once('schedule/file.csp');
        $fm = GRN_Schedule_FileManager::getInstance();
        $files = $fm->getFiles($event_id);

        if (count($files) > 0) {
            $allow_file_attachment = true;
        }
    }
    $smarty->assign('allow_file_attachment', $allow_file_attachment);
    //End GRM-1136

    // display
    $smarty->display(cb_get_pagename() . '.tpl');
}

