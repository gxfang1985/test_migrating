<?php

use grn\schedule\AttendanceStatusLogic;
use grn\grn\access\service\AppAccess;

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);

//------------------

$str_date = array_key_exists('bdate', $G_INPUT) ? $G_INPUT['bdate']
    : null;
$parent_page_name = array_key_exists('parent_page_name', $G_INPUT)
    ? $G_INPUT['parent_page_name'] : "";

$isDisplayTimeSetElement = (strpos($parent_page_name, 'banner') === false)
    ? true : false;     // 時間の反映機能を表示するか否か
$isSetParentDate = (strpos($parent_page_name, 'repeat') === false)
    ? true : false;     // 反映対象に日付を含めるか否か
//GTM-1625 Get attendance status setting;
$attendanceStatusLogic = new AttendanceStatusLogic();
$isEnableAttendanceStatus = $attendanceStatusLogic->isEnableAttendanceCheck();
// hide display time set element
$hide_display_time_set = @$G_INPUT['hide_display_time_set'];

if ($hide_display_time_set) {
    $isDisplayTimeSetElement = false;
}
$t->assign('hide_display_time_set', $hide_display_time_set);
$t->assign('isDisplayTimeSetElement', $isDisplayTimeSetElement);
$t->assign('isSetParentDate', $isSetParentDate);
$t->assign('parent_page_name', $parent_page_name);

//------------------
$current_timezone = CB_I18N::getInstance()->getCurrentTimezone();

require_once('schedule/eventfactory.csp');
$factory = GRN_Schedule_EventFactory::getInstance();

require_once('schedule/view_util.csp');
$util = GRN_Schedule_View_Util::getInstance();

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

require_once('fw/session_manager.csp');
$sm = CB_SessionManager::getInstance();

// 今日を求める
$tsex = new CB_TimeStampEx();
$today = $tsex->getDate();


if ($parent_page_name == "") {
    $start_time_hour = array_key_exists('candidate_hour', $G_INPUT)
        ? $G_INPUT['candidate_hour'] : null;
    if ($start_time_hour > 23 || $start_time_hour < 0) {
        $start_time_hour = null;
    }
    $start_time_hour = strlen($start_time_hour == 0) ? null
        : $start_time_hour;
    $start_time_minute = array_key_exists('candidate_minute', $G_INPUT)
        ? $G_INPUT['candidate_minute'] : null;
    $start_time_minute = strlen($start_time_minute == 0) ? null
        : $start_time_minute;
} else {
    $start_time_hour = array_key_exists('start_hour', $G_INPUT)
        ? $G_INPUT['start_hour'] : null;
    if ($start_time_hour > 23 || $start_time_hour < 0) {
        $start_time_hour = null;
    }
    $start_time_hour = strlen($start_time_hour == 0) ? null
        : $start_time_hour;
    $start_time_minute = array_key_exists('start_minute', $G_INPUT)
        ? $G_INPUT['start_minute'] : null;
    $start_time_minute = strlen($start_time_minute == 0) ? null
        : $start_time_minute;
}
$end_time_hour = array_key_exists('end_hour', $G_INPUT) ? $G_INPUT['end_hour']
    : null;
$end_time_hour = strlen($end_time_hour == 0) ? null : $end_time_hour;
$end_time_minute = array_key_exists('end_minute', $G_INPUT)
    ? $G_INPUT['end_minute'] : null;
$end_time_minute = strlen($end_time_minute == 0) ? null : $end_time_minute;

//<GRN2-1933>
$start_time = new CB_Time();
$start_time->hour = $start_time_hour;
$start_time->minute = $start_time_minute;
$start_time->second = 0;

$end_time = new CB_Time();
$end_time->hour = $end_time_hour;
$end_time->minute = $end_time_minute;
$end_time->second = 0;
//</GRN2-1933>


// セッションを使用する
if (array_key_exists('session_no_use', $G_INPUT)
    && $G_INPUT['session_no_use'] == '1'
) {
    // セッションのクリア
    $sm->destroy(cb_get_pagename());
    $session = $sm->getSession(cb_get_pagename());

    $s_uids = array_key_exists('sUID', $G_INPUT) ? $G_INPUT['sUID'] : null;
    $c_uids = array_key_exists('CID', $G_INPUT) ? $G_INPUT['CID'] : null;
    $s_faids = array_key_exists('sITEM', $G_INPUT) ? $G_INPUT['sITEM'] : null;
    $c_faids = array_key_exists('cITEM', $G_INPUT) ? $G_INPUT['cITEM'] : null;

    $session->set('selected_users', $s_uids);
    $session->set('confirm_users', $c_uids);
    $session->set('selected_facilities', $s_faids);
    $session->set('confirm_facilities', $c_faids);

    // 表示する日付(繰り返し予定の変更時は押下した予定の日付（ｂｄａｔｅ）を表示させたいので除く)
    if (strpos($parent_page_name, 'repeat_modify') === false) {
        if ($parent_page_name == "") {
            $start_year = array_key_exists('candidate_year', $G_INPUT)
                ? $G_INPUT['candidate_year'] : null;
            $start_month = array_key_exists('candidate_month', $G_INPUT)
                ? $G_INPUT['candidate_month'] : null;
            $start_day = array_key_exists('candidate_day', $G_INPUT)
                ? $G_INPUT['candidate_day'] : null;
        } else {
            $start_year = array_key_exists('start_year', $G_INPUT)
                ? $G_INPUT['start_year'] : null;
            $start_month = array_key_exists('start_month', $G_INPUT)
                ? $G_INPUT['start_month'] : null;
            $start_day = array_key_exists('start_day', $G_INPUT)
                ? $G_INPUT['start_day'] : null;
        }

        $set_datetime = $util->createDateTimeFromParameters($start_year,
            $start_month, $start_day, $start_time_hour, $start_time_minute);
        if (is_a($set_datetime, 'CB_DateTime')
            || is_a($set_datetime, 'CB_Date')
        ) {
            $str_date = $set_datetime->format();
        }
    }
} else {
    $session = $sm->getSession(cb_get_pagename());

    $s_uids = $session->get('selected_users');
    $c_uids = $session->get('confirm_users');
    $s_faids = $session->get('selected_facilities');
    $c_faids = $session->get('confirm_facilities');
}

//GRB-15637
$timezone = cb_at($G_INPUT, 'timezone');
$end_timezone = cb_at($G_INPUT, 'end_timezone');
if (CB_I18N::isAvailableTimezone($timezone)
    && CB_I18N::isAvailableTimezone($end_timezone)
) {
    $t->assign('timezone', $timezone);
    $t->assign('end_timezone', $end_timezone);

    $start_datetime = new CB_DateTime();
    $start_datetime->year = $today->year;
    $start_datetime->month = $today->month;
    $start_datetime->day = $today->day;
    $start_datetime->hour = $start_time_hour;
    $start_datetime->minute = $start_time_minute;

    $end_datetime = new CB_DateTime();
    $end_datetime->year = $today->year;
    $end_datetime->month = $today->month;
    $end_datetime->day = $today->day;
    $end_datetime->hour = $end_time_hour;
    $end_datetime->minute = $end_time_minute;

    $start_datetime = CB_I18N::getInstance()
                             ->translateDatetimeTimezone($start_datetime,
                                 $timezone, $current_timezone);
    $end_datetime = CB_I18N::getInstance()
                           ->translateDatetimeTimezone($end_datetime,
                               $end_timezone, $current_timezone);

    $start_time_hour = $start_datetime->hour;
    $start_time_minute = $start_datetime->minute;

    $end_time_hour = $end_datetime->hour;
    $end_time_minute = $end_datetime->minute;
}
//End GRB-15637

$t->assign('start_time_hour', $start_time_hour);
$t->assign('end_time_hour', $end_time_hour);
$t->assign('start_time_minute', $start_time_minute);
$t->assign('end_time_minute', $end_time_minute);
$t->assign('start_time', $start_time);
$t->assign('end_time', $end_time);

global $G_container_base;
/** @var GRN_Uum $uum */
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();
$login_id = $login->getOID();
$login_timezone = CB_I18N::getInstance()->getUserTimezone($login);
$t->assign('login_id', $login_id);
$t->assign('login_timezone', $login_timezone);


// 表示するリストの作成
$users_id = [];
$groups_id = [];
$select_users = [];
$select_groups = [];
$select_facilities = [];


// 表示するリストの作成準備(ユーザー、グループ)
$count_user_selected = 0;
$uid_list = [];
if (is_array($s_uids) && count($s_uids) > 0) {
    $count_user_selected = count($s_uids);
    foreach ($s_uids as $uid) {
        if (mb_substr($uid, 0, 1) == 'g') {
            $member = $uum->getGroup(mb_substr($uid, 1));

            if ( ! $member) {
                continue;
            }

            $select_groups[$member->getOID()] = $member;
        } else {
            $uid_list[] = $uid;
        }
    }
}

if (is_array($c_uids) && count($c_uids) > 0) {
    foreach ($c_uids as $uid) {
        if (mb_substr($uid, 0, 1) == 'g') {
            $uid = mb_substr($uid, 1);
            // 既にあるものは処理しない
            if (array_key_exists($uid, $select_groups)) {
                continue;
            }

            $member = $uum->getGroup($uid);

            if ( ! $member) {
                continue;
            }

            $select_groups[$member->getOID()] = $member;
        } else {
            // 既にあるものは処理しない
            if (array_search($uid, $uid_list) !== false) {
                continue;
            }

            $uid_list[] = $uid;
        }
    }
}
$uid_list = AppAccess::filterUserIdsInternalAccessByAppId($uid_list,
    GRN_SCHEDULE_APPLICATION_ID);
$uid_list = array_values($uid_list);

$select_users = $uum->getUsersById($uid_list);

// 表示するリストの作成準備(施設)
if (is_array($s_faids) && count($s_faids) > 0) {
    foreach ($s_faids as $faid) {
        $member = $facility_logic->getFacility($faid);
        if ($member === false) {
            continue;
        }

        $select_facilities[$faid] = $member;
    }
}

if (is_array($c_faids) && count($c_faids) > 0) {
    foreach ($c_faids as $faid) {
        // 既にあるものは処理しない
        if (array_key_exists($faid, $select_facilities)) {
            continue;
        }

        $member = $facility_logic->getFacility($faid);
        if ($member === false) {
            continue;
        }

        $select_facilities[$faid] = $member;
    }
}


// ユーザー、グループ、施設が選択されていない
if ((count($select_users) == 0) && (count($select_groups) == 0)
    && (count($select_facilities) == 0)
    && $count_user_selected == 0
) {
    cb_throw_error(E_GRN_SCHD_NOT_SELECT_CONFIRM_USER);
}


require_once('schedule/personal_logic.csp');
$personallogic = GRN_Schedule_PersonalLogic::getInstance();

require_once('schedule/system_logic.csp');
$systemlogic = GRN_Schedule_SystemLogic::getInstance();

// ログインユーザーの各種設定の取得
$unit = $systemlogic->getScheduleUnit();
$startwday = $personallogic->getCalendarWeekStart($login);
$hiddenprivate = $systemlogic->getHiddenPrivate();
$showholiday = $systemlogic->getShowHoliday();
$showorganize = $systemlogic->getShowOrganize();


// 表示時間の計算 ---START
$set_hour = 0;
$end_hour = 0;
$personallogic->getViewHour($login, $set_hour, $end_hour);

if ( ! is_null($start_time_hour)) {
    $start_time_hour = intval($start_time_hour);
}

if ( ! is_null($start_time_hour) && $set_hour > $start_time_hour) {
    $set_hour = $start_time_hour;
}

if ( ! is_null($end_time_hour)) {
    $end_time_hour = intval($end_time_hour);
}

if ( ! is_null($end_time_hour) && $end_hour < $end_time_hour) {
    $end_hour = $end_time_hour;
}
// 表示時間の計算 ---END


// 日付の準備 ---START
$date = new CB_Date();
if ( ! $date->parse($str_date)) {
    $date->year = $today->year;
    $date->month = $today->month;
    $date->day = $today->day;
}

$dateex = new CB_DateEx($date);
$datetime = $tsex->getDateTime();
$datetime->setDate($dateex);
$datetime->hour = 0;
$datetime->minute = 0;
$datetime->second = 0;

$tsex->setDateTime($datetime);
$timestamp = $tsex->unix_ts;
$date_info = [
    'format'    => $dateex->format(),
    'timestamp' => $timestamp,
    'type'      => $util->getDayType($dateex),
    'date'      => $dateex
];

$date_info_e = [
    'format'    => $date_info['format'],
    'timestamp' => $timestamp + 86400
];

$week = [$date_info];

require_once('grn/calendar.csp');
$calendar_service = GRN_CalendarService::getInstance();
$calendars = $calendar_service->getDaysInfo($dateex, $dateex, $login);

if ($util->isWorkday($date_info['date'], $calendars, $login)) {
    $date_info['type'] = 's_date_workday';
} elseif ($showholiday) {
    if ($util->isHoliday($date_info['date'], $calendars)) {
        $date_info['type'] = 's_date_holiday';
    }
}

$shared_calendar = $calendar_service->getDaysInfoFromSharedCalendar($dateex,
    $dateex, $login);
$calendars = array_merge_recursive($calendars, $shared_calendar);

if ( ! $showholiday) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            if ($calendars[$key1][$key2]['type']
                == GRN_CALENDAR_TYPE_PUBLICHOLIDAY
            ) {
                unset($calendars[$key1][$key2]);
            }
        }
    }
}
// 日付の準備 ---END


$users_event = [];
$b_calendar = false;

$sc_type = GRN_SCHEDULE_EVENT_TYPE_NORMAL + GRN_SCHEDULE_EVENT_TYPE_DAILYEVENT;


// ログインユーザーのスケジュールを表示する場合 ---START
if ($select_users && array_key_exists($login_id, $select_users)) {
    // 自分自身を抜いておく（アクセス権のチェックを抜くため）
    unset($select_users[$login_id]);

    // いればそこでログインユーザーのみ処理
    $events = $factory->getEventsForWeek(
        $login_id, 'user', $date_info, $date_info_e, $login_id, $sc_type,
        $hiddenprivate, $week, true, false,
        $isEnableAttendanceStatus
    );
    $day_event = [];
    foreach (array_keys($events['allday'][$date_info['format']]) as $key) {
        $event = &$events['allday'][$date_info['format']][$key];

        $temp = [];
        $temp['id'] = $event['id'];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        //GTM-103
        $temp['event_detail'] = $event['event_detail'];
        $temp['event_menu'] = $event['event_menu'];
        $temp['event_menu_color'] = $event['event_menu_color'];
        //End GTM-103
        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
            $temp['data'] = cb_msg('grn.schedule', 'event_hidden');
            $temp['type'] = 'normal';
            $temp['private'] = true;
            $temp['event_detail'] = $temp['data'];
            $temp['event_menu'] = '';
            $temp['event_menu_color'] = '';
        } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
            $temp['data'] = $event['title'];
            $temp['is_private'] = true;
        } else {
            $temp['data'] = $event['title'];
        }

        $temp['start_date'] = $event['setdate']->format();
        $temp['end_date'] = $event['enddate']->format();
        $temp['allday'] = true;

        //GTM-1625
        //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
            $temp, $event)
        ) {
            continue;
        }
        $day_event[] = $temp;
    }

    foreach (array_keys($events['normal'][$date_info['format']]) as $key) {
        $event = &$events['normal'][$date_info['format']][$key];

        $temp = [];
        $temp['id'] = $event['id'];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        //GTM-103
        $temp['event_detail'] = $event['event_detail'];
        $temp['event_menu'] = $event['event_menu'];
        $temp['event_menu_color'] = $event['event_menu_color'];
        //End GTM-103
        if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
            $temp['data'] = cb_msg('grn.schedule', 'event_hidden');
            $temp['type'] = 'normal';
            $temp['private'] = true;
            $temp['event_detail'] = $temp['data'];
            $temp['event_menu'] = '';
            $temp['event_menu_color'] = '';
        } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
            $temp['data'] = $event['title'];
            $temp['is_private'] = true;
        } else {
            $temp['data'] = $event['title'];
        }

        $temp['start_date'] = $event['setdatetime']->format();

        if ($event['enddatetime']) {
            $temp['end_date'] = $event['enddatetime']->format();
        }
        $temp['conflict'] = array_key_exists('conflict', $event)
            ? $event['conflict'] : false;

        // 表示時間のチェック
        $util->checkViewTime($date_info['date'], $event['setdatetime'],
            $event['enddatetime'], $set_hour, $end_hour);
        //GTM-1625
        //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
        if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
            $temp, $event)
        ) {
            continue;
        }
        $day_event[] = $temp;
    }

    // スケジュールの入れ込み
    $schedule_event = [
        'date_type' => $date_info['type'],
        'date'      => $date_info['format'],
        'event'     => $day_event
    ];

    if (array_key_exists($date_info['format'], $calendars)) {
        $schedule_event['calendar'] = $calendars[$date_info['format']];
    }


    $b_calendar = true;


    // バナーの取得処理
    $banner_events = [];
    foreach (array_keys($events['banner']) as $key) {
        $event = &$events['banner'][$key];

        $temp = ['id' => $event['id']];
        $temp['type'] = $util->getViewEventType($event['event_type'],
            $event['share']);
        $temp['data'] = $event['title'];
        //GTM-103
        $temp['event_detail'] = $event['event_detail'];
        $temp['event_menu'] = $event['event_menu'];
        $temp['event_menu_color'] = $event['event_menu_color'];
        //End GTM-103
        $banner_events[] = $temp;
    }


    $users_event[] = [
        'user_id'        => $login->getOID(),
        'banner_event'   => $banner_events,
        'schedule_event' => $schedule_event,
        'timezone'       => $login_timezone
    ];

    $users_id[] = $login->getOID();
}
// ログインユーザーのスケジュールを表示する場合 ---END


// カレンダーから余計なデータを削除
if ( ! $b_calendar) {
    foreach (array_keys($calendars) as $key1) {
        foreach (array_keys($calendars[$key1]) as $key2) {
            // 個人データの削除
            if (($calendars[$key1][$key2]['type']
                 == GRN_CALENDAR_TYPE_MEMORIALDAY)
                || ($calendars[$key1][$key2]['type']
                    == GRN_CALENDAR_TYPE_USER_MEMO)
            ) {
                unset($calendars[$key1][$key2]);
            }
        }
    }
}


// 組織スケジュールを表示する場合 ---START
$dynamic_roles = $uum->listGrantedRoles();
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_logic::getInstance();

if (count($select_groups) > 0 && $showorganize == 1) {
    $select_groups = $acc_logic->evaluateAccesses($login, $select_groups,
        ['read'], $dynamic_roles, 'group');

    foreach (array_keys($select_groups) as $key) {
        $group = $select_groups[$key];
        $events = $factory->getEventsForWeek($group->getOID(), 'group',
            $date_info, $date_info_e, $login_id, $sc_type, $hiddenprivate,
            $week, true);
        $day_event = [];
        foreach (array_keys($events['allday'][$date_info['format']]) as $key) {
            $event = &$events['allday'][$date_info['format']][$key];

            $temp = [];
            $temp['id'] = $event['id'];
            $temp['type']
                = $util->getViewEventType($event['event_type'],
                $event['share']);
            $temp['event_detail'] = $event['event_detail'];
            $temp['event_menu'] = $event['event_menu'];
            $temp['event_menu_color'] = $event['event_menu_color'];

            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['data'] = cb_msg('grn.schedule',
                    'event_hidden');
                $temp['type'] = 'normal';
                $temp['private'] = true;
                $temp['event_detail'] = $temp['data'];
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
            } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['data'] = $event['title'];
                $temp['is_private'] = true;
            } else {
                $temp['data'] = $event['title'];
            }

            $temp['start_date'] = $event['setdate']->format();
            $temp['end_date'] = $event['enddate']->format();
            $temp['allday'] = true;
            $day_event[] = $temp;
        }

        foreach (array_keys($events['normal'][$date_info['format']]) as $key) {
            $event = &$events['normal'][$date_info['format']][$key];

            $temp = [];
            $temp['id'] = $event['id'];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            //GTM-103
            $temp['event_detail'] = $event['event_detail'];
            $temp['event_menu'] = $event['event_menu'];
            $temp['event_menu_color'] = $event['event_menu_color'];
            //End GTM-103
            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['data'] = cb_msg('grn.schedule',
                    'event_hidden');
                $temp['type'] = 'normal';
                $temp['private'] = true;
                $temp['event_detail'] = $temp['data'];
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
            } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['data'] = $event['title'];
                $temp['is_private'] = true;
            } else {
                $temp['data'] = $event['title'];
            }

            $temp['start_date'] = $event['setdatetime']->format();

            if ($event['enddatetime']) {
                $temp['end_date'] = $event['enddatetime']->format();
            }

            $temp['conflict'] = array_key_exists('conflict', $event)
                ? $event['conflict'] : false;

            // 表示時間のチェック
            $util->checkViewTime($date_info['date'], $event['setdatetime'],
                $event['enddatetime'], $set_hour, $end_hour);

            $day_event[] = $temp;
        }

        // スケジュールの入れ込み
        $schedule_event = [
            'date_type' => $date_info['type'],
            'date'      => $date_info['format'],
            'event'     => $day_event
        ];

        if ( ! $b_calendar) {
            if (array_key_exists($date_info['format'], $calendars)) {
                $schedule_event['calendar'] = $calendars[$date_info['format']];
            }
            $b_calendar = true;
        }

        // バナーの取得処理
        $banner_events = [];
        foreach (array_keys($events['banner']) as $key) {
            $event = &$events['banner'][$key];

            $temp = ['id' => $event['id'],];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            $temp['data'] = $event['title'];
            //GTM-103
            $temp['event_detail'] = $event['event_detail'];
            $temp['event_menu'] = $event['event_menu'];
            $temp['event_menu_color'] = $event['event_menu_color'];
            //End GTM-103
            $banner_events[] = $temp;
        }

        $users_event[] = [
            'user_id'        => 'g' . $group->getOID(),
            'schedule_event' => $schedule_event,
            'banner_event'   => $banner_events,
            'timezone'       => $current_timezone
        ];

        $groups_id[] = $group->getOID();
    }
}
// 組織スケジュールを表示する場合 ---END


// ユーザースケジュールを表示する場合 （ログインユーザー以外）---START
// メンバーのアクセス権のチェック
$select_users = $acc_logic->evaluateAccesses($login, $select_users, ['read'],
    $dynamic_roles, 'user');
if (count($select_users) > 0) {
    $uum->loadAndCache(array_keys($select_users));
    $factory->loadAndCacheUserEventRelation(array_keys($select_users), 'user',
        $date_info, $date_info_e, true, true, $isEnableAttendanceStatus);
    // GRB-15152
    CB_UserWorkHours::loadAndCache(array_keys($select_users));
    CB_UserBaseSetting::loadAndCache(array_keys($select_users));
    $users = $util->getViewUsers(array_keys($select_users));
    foreach (array_keys($select_users) as $uid) {
        $day_event = [];
        $events = $factory->getEventsForWeek(
            $uid, 'user', $date_info, $date_info_e, $login_id, $sc_type,
            $hiddenprivate, $week, true, false, $isEnableAttendanceStatus
        );

        foreach (array_keys($events['allday'][$date_info['format']]) as $key) {
            $event = &$events['allday'][$date_info['format']][$key];

            $temp = [];
            $temp['id'] = $event['id'];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            //GTM-103
            $temp['event_detail'] = $event['event_detail'];
            $temp['event_menu'] = $event['event_menu'];
            $temp['event_menu_color'] = $event['event_menu_color'];
            //End GTM-103

            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['data'] = cb_msg('grn.schedule',
                    'event_hidden');
                $temp['private'] = true;
                $temp['type'] = 'normal';
                $temp['event_detail'] = $temp['data'];
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
            } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['data'] = $event['title'];
                $temp['is_private'] = true;
            } else {
                $temp['data'] = $event['title'];
            }

            $temp['start_date'] = $event['setdate']->format();
            $temp['end_date'] = $event['enddate']->format();
            $temp['allday'] = true;
            //GTM-1625
            //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
            if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                $temp, $event)
            ) {
                continue;
            }
            $day_event[] = $temp;
        }

        foreach (array_keys($events['normal'][$date_info['format']]) as $key) {
            $event = &$events['normal'][$date_info['format']][$key];

            $temp = [];
            $temp['id'] = $event['id'];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            //GTM-103
            $temp['event_detail'] = $event['event_detail'];
            $temp['event_menu'] = $event['event_menu'];
            $temp['event_menu_color'] = $event['event_menu_color'];
            //End GTM-103
            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['data'] = cb_msg('grn.schedule',
                    'event_hidden');
                $temp['type'] = 'normal';
                $temp['private'] = true;
                $temp['event_detail'] = $temp['data'];
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
            } elseif ($event['private'] == GRN_EVENT_PRIVATE_PRIVATE) {
                $temp['data'] = $event['title'];
                $temp['is_private'] = true;
            } else {
                $temp['data'] = $event['title'];
            }

            $temp['start_date'] = $event['setdatetime']->format();
            if ($event['enddatetime']) {
                $temp['end_date'] = $event['enddatetime']->format();
            }

            $temp['conflict'] = array_key_exists('conflict', $event)
                ? $event['conflict'] : false;

            // 表示時間のチェック
            $util->checkViewTime($date_info['date'], $event['setdatetime'],
                $event['enddatetime'], $set_hour, $end_hour);
            //GTM-1625
            //Using attendance check function and in the case end user confirmed absent, this event not show in schedule list.
            if ( ! $util->createAttendanceStatusForUserEvent($isEnableAttendanceStatus,
                $temp, $event)
            ) {
                continue;
            }
            $day_event[] = $temp;
        }

        // スケジュールの入れ込み
        $schedule_event = [
            'date_type' => $date_info['type'],
            'date'      => $date_info['format'],
            'event'     => $day_event
        ];

        if ( ! $b_calendar) {
            if (array_key_exists($date_info['format'], $calendars)) {
                $schedule_event['calendar'] = $calendars[$date_info['format']];
            }

            $b_calendar = true;
        }

        // バナーの取得処理
        $banner_events = [];
        foreach (array_keys($events['banner']) as $key) {
            $event = &$events['banner'][$key];

            $temp = ['id' => $event['id']];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            $temp['data'] = $event['title'];
            //GTM-103
            $temp['event_detail'] = $event['event_detail'];
            $temp['event_menu'] = $event['event_menu'];
            $temp['event_menu_color'] = $event['event_menu_color'];
            //End GTM-103
            $banner_events[] = $temp;
        }

        $users_event[] = [
            'user_id'        => $uid,
            'schedule_event' => $schedule_event,
            'banner_event'   => $banner_events,
            'timezone'       => CB_I18N::getInstance()
                                       ->getUserTimezone($users[$uid])
        ];

        $users_id[] = $uid;
    }
}
// ユーザースケジュールを表示する場合 （ログインユーザー以外）---END


// 施設スケジュールを表示する場合 ---START
if (count($select_facilities) > 0) {
    $title_type = $facility_logic->getFacilityTitle();

    // メンバーのアクセス権のチェック
    $select_facilities = $acc_logic->evaluateAccesses($login,
        $select_facilities, ['read'], $dynamic_roles, 'facility');

    $f_settings
        = $facility_logic->getFacilitySetting(array_keys($select_facilities),
        true);

    foreach (array_keys($select_facilities) as $faid) {
        $member = $select_facilities[$faid];

        $day_event = [];
        $events = $factory->getEventsForWeek($faid, 'facility', $date_info,
            $date_info_e, $login_id, GRN_SCHEDULE_EVENT_TYPE_NORMAL,
            $hiddenprivate, $week);

        foreach (array_keys($events['normal'][$date_info['format']]) as $key) {
            $event = &$events['normal'][$date_info['format']][$key];

            $temp = [];
            $temp['id'] = $event['id'];
            $temp['type'] = $util->getViewEventType($event['event_type'],
                $event['share']);
            $temp['data'] = $facility_logic->getEventTitle($event['title'],
                $event['creator_name'], $event['private'], $title_type);
            //GTM-103
            $temp['event_detail'] = $event['event_detail'];
            $temp['event_menu'] = $event['event_menu'];
            $temp['event_menu_color'] = $event['event_menu_color'];
            //End GTM-103

            if ($event['private'] == GRN_EVENT_PRIVATE_HIDDEN) {
                $temp['type'] = 'normal';
                $temp['private'] = true;
                //GTM-103
                $temp['event_detail'] = $temp['data'];
                $temp['event_menu'] = '';
                $temp['event_menu_color'] = '';
                //End GTM-103
            }

            $temp['start_date'] = $event['setdatetime']->format();

            if ($event['enddatetime']) {
                $temp['end_date'] = $event['enddatetime']->format();
            }

            $temp['conflict'] = false;

            // 表示時間のチェック
            $util->checkViewTime($date_info['date'], $event['setdatetime'],
                $event['enddatetime'], $set_hour, $end_hour);
            $day_event[] = $temp;
        }

        // スケジュールの入れ込み
        $schedule_event = [
            'date_type' => $date_info['type'],
            'date'      => $date_info['format'],
            'event'     => $day_event
        ];

        if ( ! $b_calendar) {
            if (array_key_exists($date_info['format'], $calendars)) {
                $schedule_event['calendar'] = $calendars[$date_info['format']];
            }

            $b_calendar = true;
        }

        // get show memo by facility setting
        $facility_memo = $facility_logic->getShowMemoByPriority($f_settings,
            $faid);

        //GRN2-337
        require_once('grn/controller.csp');
        $facility_memo = grn_prevent_tag_script($facility_memo);

        $users_event[] = [
            'user_id'        => 'f' . $member->getOID(),
            'facility_id'    => $member->getOID(),
            'facility_title' => $member->get('name'),
            'facility_memo'  => $facility_memo,
            'schedule_event' => $schedule_event,
            'banner_event'   => [],
            'timezone'       => $current_timezone
        ];
    }
}
// 施設スケジュールを表示する場合 ---END


// カスタマイズ項目処理
foreach (array_keys($users_event) as $key) {
    $events = &$users_event[$key]['schedule_event']['event'];
    foreach (array_keys($events) as $key2) {
        $event = &$events[$key2];

        if (array_key_exists('private', $event) === true
            && $event['private'] === true
        ) {
            continue;
        }

        $event['data'] .= $facility_logic->getDataTitle($event['id']);
    }
}

$t->assign('schedule', ['users' => $users_event]);
$t->assign('schedule_params', [
    'set_hour'  => $set_hour,
    'end_hour'  => $end_hour,
    'unit'      => $unit,
    'col_span'  => (int)(60 / $unit) * ($end_hour - $set_hour),
    'satr_date' => $date_info['format'],
    'end_date'  => $date_info['format']
]);
$t->assign('bdate', $date->format());
$t->assign('confirm', ['add' => false]);

// ナビゲーションのための日付の算出
$prev_date = new CB_DateEx($date_info['date']);
$prev_date->moveDays(-1);

$next_date = new CB_DateEx($date_info['date']);
$next_date->moveDays(1);

$prev_week = $util->getPrevWeekDate($date_info['date'], $startwday);
$next_week = $util->getNextWeekDate($date_info['date'], $startwday);

require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login);
$t->assign('users_info', $users_info);

$groups_info = $uum->getGroupInfoList($groups_id);
$t->assign('groups_info', $groups_info);

$t->assign('today', $today->format());
$t->assign('bdate_prevday', $prev_date->format());
$t->assign('bdate_nextday', $next_date->format());
$t->assign('bdate_prevweek', $prev_week->format());
$t->assign('bdate_nextweek', $next_week->format());
$t->assign('minute_interval', $systemlogic->getScheduleUnit());
$show_full_title = $personallogic->getShowFullTitle($login, "confirm", 0);
$t->assign('show_full_title', $show_full_title);
$member_tz = $personallogic->getShowUsersTimezone($login, "confirm");
$t->assign('member_tz', $member_tz);


// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position 
$t->assign(
    'site_position', [
        [
            'page' => "schedule/index",
            'name' => grn_get_page_display_name('schedule/schedule_index')
        ],
        ['page' => "", 'name' => $page_title]
    ]
);

// Smarty実行
$t->display(cb_get_pagename() . ".tpl");

