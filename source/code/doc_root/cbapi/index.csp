<?php
require_once('cbapi/logic.csp');

global $G_grn_cbapi_code;
$G_grn_cbapi_code = '00';

// common parameters
global $G_INPUT;
$api_id = array_key_exists('api_id', $G_INPUT) ? $G_INPUT['api_id'] : null;
$ver = array_key_exists('a_ver', $G_INPUT) ? floatval($G_INPUT['a_ver'])
    : null;

if (is_null($api_id) || is_null($ver)) {
    require_once('cbapi/error_code.csp');
    grn_cbapi_throw_error(E_GRN_CBAPI_NO_PARAMETER);
}

// api version
$G_api_version = null;
$version_list = explode(',', GRN_CBAPI_VERSION_LIST);
rsort($version_list, SORT_NUMERIC);
foreach ($version_list as $v) {
    if (floatval($v) <= $ver) {
        $G_api_version = $v;
        break;
    }
}
if (is_null($G_api_version)) {
    require_once('cbapi/error_code.csp');
    grn_cbapi_throw_error(E_GRN_CBAPI_INVALID_VERSION);
}

// check api id
if (defined('GRN_CBAPI_API_CODE_' . strtoupper($api_id)) === false
    || is_readable('_' . $api_id . '.csp') === false
) {
    require_once('cbapi/error_code.csp');
    grn_cbapi_throw_error(E_GRN_CBAPI_INVALID_API_ID);
}

// locale
require_once('fw/i18n.csp');
require_once('fw/i18n/locale.csp');
$i18n = CB_I18N::getInstance();
$available_locales = $i18n->getAvailableLanguages();
$current_locale = $i18n->getCurrentLanguage();
$locale = array_key_exists('locale', $G_INPUT)
    ? strtolower($G_INPUT['locale']) : $current_locale;
if (in_array($locale, $available_locales) === false) {
    require_once('cbapi/error_code.csp');
    grn_cbapi_throw_error(E_GRN_CBAPI_INVALID_LOCALE);
}

// smarty
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

include('_' . $api_id . '.csp');

grn_cbapi_display($t, 'cbapi/' . $api_id . '.tpl');


