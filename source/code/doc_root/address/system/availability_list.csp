<?php

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

////////////////////////////////////////////////////////////////

// GET/POSTされたパラメータを取得する
$poid = null;
if (array_key_exists('poid', $G_INPUT)) {
    $poid = $G_INPUT['poid'];
}
$no_reset = null;
if (array_key_exists('no_reset', $G_INPUT)) {
    $no_reset = $G_INPUT['no_reset'];
}

// アドレス帳を取得する
require_once('address/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
/** @var GRN_Address_Application $app */
$app = $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
    cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
}

// 使用権限を取得する
require_once('address/access.csp');
$access_manager = GRN_Address_AccessManager::getInstance();
if ( ! ($row = $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
    assert('FALSE');
}

// アクセス一覧を取得する
$accesses = $access_manager->listAccesses($row);

// アクセス情報一覧を取得する
$allowed_access_values = GRN_ADDRESS_AUTHORITY_PRIVATE_ADDRESS
                         | GRN_ADDRESS_AUTHORITY_SHARED_ADDRESS;
require_once('address/view_util.csp');
$view_util = GRN_Address_ViewUtil::getInstance();
$accesses_for_view = $view_util->listAccesses($accesses,
    $allowed_access_values);

$list = [];
$security_model = $access_manager->getSecurityModel($row);
require_once('grn/access_resources.csp');
$users_id = [];
foreach (array_keys($accesses_for_view) as $target_type) {
    $access_for_view =& $accesses_for_view[$target_type];

    switch ($access_for_view['type']) {
        case GRN_ADDRESS_TARGET_DYNAMICROLE:
            $type = GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE;
            break;
        case GRN_ADDRESS_TARGET_STATICROLE:
            $type = GRN_ACCESS_TARGET_TYPE_STATIC_ROLE;
            break;
        case GRN_ADDRESS_TARGET_USER:
            $type = GRN_ACCESS_TARGET_TYPE_USER;
            $users_id[] = $access_for_view['tid'];
            break;
        case GRN_ADDRESS_TARGET_GROUP:
            $type = GRN_ACCESS_TARGET_TYPE_GROUP;
            break;
        default:
            assert('FALSE');
    }

    if (GRN_ADDRESS_SECURITYMODEL_REVOKE == $security_model) {
        switch ($access_for_view['value']) {
            case 8:
                $data = cb_msg('grn.address', 'shared_only');
                break;
            case 16:
                $data = cb_msg('grn.address', 'private_only');
                break;
            default:
                $data = cb_msg('grn.address', 'no_available');
                break;
        }
    } else {
        switch ($access_for_view['value']) {
            case 24:
                $data = cb_msg('grn.address', 'all_available');
                break;
            case 16:
                $data = cb_msg('grn.address', 'shared_only');
                break;
            default:
                $data = cb_msg('grn.address', 'private_only');
                break;
        }
    }

    $list[$target_type] = [
        'type' => $type,
        'tid'  => $access_for_view['tid'],
        'data' => $data
    ];
}

$access = [];
$access['list'] = $list;
$access['count'] = count($list);
$access['security_model'] = GRN_ADDRESS_SECURITYMODEL_REVOKE == $security_model
    ? 'revoke' : 'grant';

$ours_params = $G_INPUT;
unset($ours_params['no_reset']);

// GTM-529 tuning
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();

require_once('grn/controller.csp');
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login);
$t->assign('users_info', $users_info);
// GTM-529 tuning

// rhs organization information
require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');
// search
$text = null;
if (array_key_exists('text', $G_INPUT)) {
    $text = $G_INPUT['text'];
    $t->assign('text', $text);
}

$is_search = (strlen($text) > 0);
$t->assign('is_search', $is_search);

if ($is_search) {
    $org_row = null;
    $org = [];
    if (0 < $poid) {
        $org_row =& grn_get_org_row($poid);
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] =& grn_get_org_ancestors($org_row);
        $org['children'] =& grn_get_org_children($poid);
    } elseif (-1 == $poid) {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] = null;
    } else {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] =& grn_get_org_children('0');
        $poid = null;
    }

    $condition = grn_get_user_info_search_condition($poid, $text, true);
    $count = grn_get_user_info_search_count($poid, $condition);
    $org['navi_info'] = grn_get_user_navigation_info($count, $G_INPUT, 10);
    $org['user_list'] =& grn_search_user_info($poid, $condition,
        $org['navi_info']);
    unset($ours_params['text']);
    $t->assign('org', $org);
} else {
    $org =& grn_get_user_or_role_list($poid, $ours_params, 10);
    if ( ! array_key_exists('user_list', $org)) {
        $org['navi_info'] = grn_get_user_navigation_info(0, $G_INPUT, 10);
    }
    $t->assign('org', $org);
}

unset($ours_params['poid']);

// セッションから権限の値を取得する
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session
    = $session_manager->getSession('address.system.availability_list');
$access_value = $session->get('access_value');

if (is_null($access_value) || ! $no_reset) {
    $access_value = GRN_ADDRESS_AUTHORITY_PRIVATE_ADDRESS
                    | GRN_ADDRESS_AUTHORITY_SHARED_ADDRESS;
    $session->set('access_value', $access_value);
}

$private_address = [];
$shared_address = [];
$all_address = [];
$private_address['value'] = GRN_ADDRESS_AUTHORITY_PRIVATE_ADDRESS;
$private_address['selected'] = $access_value == $private_address['value'];
$shared_address['value'] = GRN_ADDRESS_AUTHORITY_SHARED_ADDRESS;
$shared_address['selected'] = $access_value == $shared_address['value'];
$all_address['value'] = $private_address['value']
                        + $shared_address['value'];
$all_address['selected'] = $access_value == $all_address['value'];
if (GRN_ADDRESS_SECURITYMODEL_REVOKE == $security_model) {
    $private_address['label'] = cb_msg('grn.address', 'shared_only');
    $shared_address['label'] = cb_msg('grn.address', 'private_only');
    $all_address['label'] = cb_msg('grn.address', 'no_available');
} else {
    $all_address['label'] = cb_msg('grn.address', 'all_available');
    $private_address['label'] = cb_msg('grn.address', 'private_only');
    $shared_address['label'] = cb_msg('grn.address', 'shared_only');
}
$authority_types = [
    $all_address,
    $private_address,
    $shared_address
];

unset($ours_params['sp']);
$t->assign('poid', $poid);
$t->assign('access', $access);
$t->assign('is_grant', $access['security_model'] == 'grant');
$t->assign('is_revoke', $access['security_model'] == 'revoke');
$t->assign('org', $org);
$t->assign('ours_params', $ours_params);
$t->assign('authority_types', $authority_types);
$t->assign('authority_count', count($authority_types));

////////////////////////////////////////////////////////////////

// Smartyにページタイトルを割り当てる
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// Smartyにサイトポジションを割り当てる
$page_info = ['availability_list' => null];
require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();
$site_position = $controller_util->makeSitePosition('address/system/',
    $page_info);
$t->assign('site_position', $site_position);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');


