<?php

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

////////////////////////////////////////////////////////////////

require_once('_access_util.csp');

// GET/POSTされたパラメータを取得する
if (0 == strlen($node_id)) {
    cb_throw_error(E_GRN_ADDRESS_INVALID_BOOK_ID);
}

$reset = null;
if (array_key_exists('reset', $G_INPUT)) {
    $reset = $G_INPUT['reset'];
}

// アクセス一覧を取得する
$row =& $node_row->getRow();
require_once('address/access.csp');
$access_manager = GRN_Address_AccessManager::getInstance();
$accesses = $access_manager->listAccesses($row);

// アクセス情報一覧を取得する
$allowed_access_values = GRN_ADDRESS_AUTHORITY_BROWSE
                         | GRN_ADDRESS_AUTHORITY_EDITING;
$accesses_for_view = $view_util->listAccesses($accesses,
    $allowed_access_values);

$list = [];
$users_id = [];
$security_model = $node['security_model'];
require_once('grn/access_resources.csp');
foreach (array_keys($accesses_for_view) as $target_type) {
    $access_for_view =& $accesses_for_view[$target_type];

    switch ($access_for_view['type']) {
        case GRN_ADDRESS_TARGET_DYNAMICROLE:
            $type = GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE;
            break;
        case GRN_ADDRESS_TARGET_STATICROLE:
            $type = GRN_ACCESS_TARGET_TYPE_STATIC_ROLE;
            break;
        case GRN_ADDRESS_TARGET_USER:
            $type = GRN_ACCESS_TARGET_TYPE_USER;
            break;
        case GRN_ADDRESS_TARGET_GROUP:
            $type = GRN_ACCESS_TARGET_TYPE_GROUP;
            break;
        default:
            assert('FALSE');
    }

    if (GRN_ADDRESS_SECURITYMODEL_REVOKE == $security_model) {
        switch ($access_for_view['value']) {
            case 3:
                $data = ['browse' => 1, 'editing' => 1];
                break;
            case 2:
                $data = ['browse' => 0, 'editing' => 1];
                break;
            default:
                $data = ['browse' => 0, 'editing' => 0];
                break;
        }
    } else {
        switch ($access_for_view['value']) {
            case 0:
                $data = ['browse' => 0, 'editing' => 0];
                break;
            case 1:
                $data = ['browse' => 1, 'editing' => 0];
                break;
            default:
                $data = ['browse' => 1, 'editing' => 1];
                break;
        }
    }

    $list[$target_type] = [
        'type' => $type,
        'tid'  => $access_for_view['tid'],
        'data' => $data,
    ];

    if (GRN_ADDRESS_TARGET_USER == $access_for_view['type']) {
        $users_id[] = $access_for_view['tid'];
    }
}

$access['list'] = $list;
$access['count'] = count($list);
$access['security_model'] = GRN_ADDRESS_SECURITYMODEL_REVOKE == $security_model
    ? 'revoke' : 'grant';

// GTM-529 tuning
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();

require_once('grn/controller.csp');
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login);
$t->assign('users_info', $users_info);
// GTM-529 tuning

//--N-navigation params
$ours_params = $G_INPUT;
unset($ours_params['reset']);

$t->assign('access', $access);
$t->assign('is_grant', $access['security_model'] == 'grant');
$t->assign('is_revoke', $access['security_model'] == 'revoke');

// rhs organization information
require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');
// search
$text = null;
if (array_key_exists('text', $G_INPUT)) {
    $text = $G_INPUT['text'];
    $t->assign('text', $text);
}

$is_search = (strlen($text) > 0);
$t->assign('is_search', $is_search);

$poid = null;
if (isset($G_INPUT['poid'])) {
    $poid = $G_INPUT['poid'];
}
if ($poid === 'role' && $is_search) {
    unset($G_INPUT['poid']);
    $poid = null;
    $t->assign('poid', $poid);
}

if ($is_search) {
    $org_row = null;
    $org = [];
    if (0 < $poid) {
        $org_row =& grn_get_org_row($poid);
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] =& grn_get_org_ancestors($org_row);
        $org['children'] =& grn_get_org_children($poid);
    } elseif (-1 == $poid) {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] = null;
    } else {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] =& grn_get_org_children('0');
        $poid = null;
    }

    $condition = grn_get_user_info_search_condition($poid, $text, true);
    $count = grn_get_user_info_search_count($poid, $condition);
    $org['navi_info'] = grn_get_user_navigation_info($count, $G_INPUT, 10);
    $org['user_list'] =& grn_search_user_info($poid, $condition,
        $org['navi_info']);
    unset($ours_params['text']);
    $t->assign('org', $org);
} else {
    $org =& grn_get_user_or_role_list($poid, $ours_params, 10);
    if ( ! array_key_exists('user_list', $org)) {
        $org['navi_info'] = grn_get_user_navigation_info(0, $G_INPUT, 10);
    }
    $t->assign('org', $org);
}

unset($ours_params['poid']);
unset($ours_params['sp']);
$t->assign('ours_params', $ours_params);

// （ビューで表示するための）権限情報一覧を取得する
$authority_types = [
    'browse'  => cb_msg('grn.address', 'browse'),
    'editing' => cb_msg('grn.address', 'editing')
];
$t->assign('authority_types', $authority_types);
$t->assign('authority_count', count($authority_types));

// （GRANTの）権限一覧を取得する
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session
    =& $session_manager->getSession('address.system.access_list');
$authority_browse = $session->get('authority_browse');
$authority_editing = $session->get('authority_editing');
$authorities = [];
if ((is_null($authority_browse) && is_null($authority_editing)) || $reset) {
    if (GRN_ADDRESS_SECURITYMODEL_REVOKE == $security_model) {
        $authority_browse = 0;
        $authority_editing = 0;
    } else {
        $authority_browse = 1;
        $authority_editing = 1;
    }
    $session->set('authority_browse', $authority_browse);
    $session->set('authority_editing', $authority_editing);
}
$authorities['browse'] = $authority_browse;
$authorities['editing'] = $authority_editing;
$t->assign('authorities', $authorities);

////////////////////////////////////////////////////////////////

require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();

// Smartyにページタイトルを割り当てる
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// Smartyにサイトポジションを割り当てる
$page_info = [
    'access_index' => [],
    'access_list'  => null
];
$site_position = $controller_util->makeSitePosition('address/system/',
    $page_info);
$t->assign('site_position', $site_position);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');


