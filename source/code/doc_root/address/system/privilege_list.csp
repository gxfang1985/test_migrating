<?php

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

////////////////////////////////////////////////////////////////

$forced_check = true;
require_once('_access_util.csp');

// 共有アドレス帳を取得する
$books = $book_manager->listSharedAddressBooks();
// 共有アドレス帳情報を取得する
$books_for_view = $view_util->listBooks($books, $books);

$accesses_for_view = [];
$nid = null;
if (array_key_exists('nid', $G_INPUT)) {
    $nid = $G_INPUT['nid'];
}
if (0 < strlen($nid)) {
    $books_for_view[$nid]['focus'] = true;
    $book =& $books[$nid];

    // アクセス一覧を取得する
    $row =& $book->getRow();
    require_once('address/access.csp');
    $access_manager = GRN_Address_AccessManager::getInstance();
    $accesses = $access_manager->listAccesses($row);

    // アクセス情報一覧を取得する
    $allowed_access_values = GRN_ADDRESS_AUTHORITY_OPERATION;
    $accesses_for_view = $view_util->listAccesses($accesses,
        $allowed_access_values);

    $list = [];
    $users_id = []; //GRB-15046
    foreach (array_keys($accesses_for_view) as $target_type) {
        $access_for_view =& $accesses_for_view[$target_type];

        require_once('grn/access_resources.csp');
        switch ($access_for_view['type']) {
            case 'DynamicRole':
                $type = GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE;
                break;
            case 'StaticRole':
                $type = GRN_ACCESS_TARGET_TYPE_STATIC_ROLE;
                break;
            case 'User':
                $type = GRN_ACCESS_TARGET_TYPE_USER;
                break;
            default:
                $type = GRN_ACCESS_TARGET_TYPE_GROUP;
                break;
        }

        $list[$target_type] = [
            'type' => $type,
            'tid'  => $access_for_view['tid']
        ];
        if ($type == GRN_ACCESS_TARGET_TYPE_USER) {
            $users_id[] = $access_for_view['tid']; //GRB-15046
        }
    }
    //start GRB-15046
    //Login User
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getLoginUser();
    require_once("grn/controller.csp");
    $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
        $user);
    $t->assign('users_info', $users_info);
    //end GRB-15046

    $access = [];
    $access['list'] = $list;
    $access['count'] = count($list);
    $t->assign('access', $access);
}

$ours_params = $G_INPUT;
unset($ours_params['reset']);

// rhs organization information
require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');
// search
$text = null;
if (array_key_exists('text', $G_INPUT)) {
    $text = $G_INPUT['text'];
    $t->assign('text', $text);
}

$is_search = (strlen($text) > 0);
$t->assign('is_search', $is_search);

$poid = null;
if (isset($G_INPUT['poid'])) {
    $poid = $G_INPUT['poid'];
}
if ($poid === 'role' && $is_search) {
    unset($G_INPUT['poid']);
    $poid = null;
    $t->assign('poid', $poid);
}

if ($is_search) {
    $org_row = null;
    $org = [];
    if (0 < $poid) {
        $org_row =& grn_get_org_row($poid);
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] =& grn_get_org_ancestors($org_row);
        $org['children'] =& grn_get_org_children($poid);
    } elseif (-1 == $poid) {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] = null;
    } else {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] =& grn_get_org_children('0');
        $poid = null;
    }

    $condition = grn_get_user_info_search_condition($poid, $text, true);
    $count = grn_get_user_info_search_count($poid, $condition);
    $org['navi_info'] = grn_get_user_navigation_info($count, $G_INPUT, 10);
    $org['user_list'] =& grn_search_user_info($poid, $condition,
        $org['navi_info']);
    unset($ours_params['text']);
    $t->assign('org', $org);
} else {
    $org =& grn_get_user_or_role_list($poid, $ours_params, 10);
    if ( ! array_key_exists('user_list', $org)) {
        $org['navi_info'] = grn_get_user_navigation_info(0, $G_INPUT, 10);
    }
    $t->assign('org', $org);
}

unset($ours_params['poid']);
unset($ours_params['sp']);
$t->assign('ours_params', $ours_params);

////////////////////////////////////////////////////////////////

require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();

// Smartyにページタイトルを割り当てる
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// Smartyにサイトポジションを割り当てる
$page_info = [
    'privilege_index' => [],
    'privilege_list'  => null
];
$site_position = $controller_util->makeSitePosition('address/system/',
    $page_info);
$t->assign('site_position', $site_position);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');


