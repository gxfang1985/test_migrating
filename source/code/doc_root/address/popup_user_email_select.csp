<?php

cb_require_role('LoginUser');

global $G_INPUT;

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// パラメタリスト
// $select_func: 'init':初期化 'browse':再描画 'add':追加 'remove':削除 'apply':適用
$select_func = 'init';
// $searchword: 検索文字列
$searchword = '';
// $no_multiple: '0':複数選択可 '1':複数選択不可
$no_multiple = '0';
// $send_cgi_parameter: '0':通常 '1':親ページのcgi引数に渡す（スケジュールで使用）
$send_cgi_parameter = '0';
// $include_org: '0':組織を表示しない '1':組織を表示する
$include_org = '0';
// $system: '0':システム設定として表示しない '1':システム設定として表示する
$system = '0';
// $system_display: '0':システム設定として表示しない '1':システム設定として表示する
$system_display = '0';
// $form_name: 親ページのフォーム名
$form_name = cb_get_pagename();
// $select_name: 親ページのセレクトボックス名
$select_name = 'sUID[]';
// $plugin_name: アクセス権評価用プラグインデータ名
$plugin_data_name = 'access_plugin';
// $plugin_session_name: アクセス権評価用プラグインセッション名
$plugin_session_name = cb_get_pagename();
// $item_data_name: 追加アイテムデータ名
$item_data_name = 'item';
// $item_session_name: 追加アイテムセッション名
$item_session_name = cb_get_pagename();
// $s_oid: '0':ルート '-1':検索結果 '-2':未所属のユーザー その他:組織ID
$s_oid = '0';
// $selected_tab: '0':通常 '1':追加アイテム
$selected_tab = '0';

$org_id = '';

$param_names = [
    'select_func',
    'searchword',
    'no_multiple',
    'include_org',
    'system',
    'system_display',
    'form_name',
    'select_name',
    's_oid',
    'plugin_data_name',
    'plugin_session_name',
    'item_data_name',
    'item_session_name',
    'selected_tab',
    'send_cgi_parameter'
];
foreach ($param_names as $name) {
    if (array_key_exists($name, $G_INPUT)) {
        $$name = $G_INPUT[$name];
    }
}

if ( ! is_numeric($s_oid)) {
    $s_oid = '0';
}
if ( ! is_numeric($no_multiple)) {
    $no_multiple = '0';
}
if ( ! is_numeric($send_cgi_parameter)) {
    $send_cgi_parameter = '0';
}
if ( ! is_numeric($include_org)) {
    $include_org = '0';
}
if ( ! is_numeric($system)) {
    $system = '0';
}
if ( ! is_numeric($system_display)) {
    $system_display = '0';
}

// user information format
$columns[] = 'tab_cb_user.col_display_name';
$columns[] = 'tab_cb_user.col_foreign_key';
$columns[] = 'tab_cb_user.col_email_address';
$columns[] = 'tab_cb_user.col_display_name_language';
$columns[] = 'tab_cb_user.col_nickname';

// uum
global $G_container_base;
/** @var GRN_Uum $uum */
$uum =& $G_container_base->getInstance('uum');

require_once('grn/uum_util_search.csp');
$uum_util = GRN_UumUtil_Search::getInstance();

// セッション取得
require_once('fw/session_manager.csp');
$sm = CB_SessionManager::getInstance();
if ($select_func === 'init') {
    $sm->destroy(cb_get_pagename());
}
$session =& $sm->getSession(cb_get_pagename());
$selected = $session->get('selected');
if ( ! is_array($selected)) {
    $selected = [];
}
$candidate = $session->get('candidate');
if ( ! is_array($candidate)) {
    $candidate = [];
}

// 追加アイテムがあれば取得
$extension_items = null;
$item_session =& $sm->getSession($item_session_name);
if ($item_session) {
    $item_data = $item_session->get($item_data_name);
    if (is_array($item_data) && array_key_exists('caption', $item_data)
        && array_key_exists('prefix', $item_data)
        && array_key_exists('data', $item_data)
        && is_string($item_data['prefix'])
        && preg_match('#^[a-f,h-z]$#', $item_data['prefix'])
    ) {
        $extension_items = $item_data;
    }
}

if ($select_func === 'apply') {
    $login = $uum->getLoginUser();
    if ($no_multiple
        && ( ! array_key_exists('s_id', $G_INPUT)
             ||
             ! is_array($G_INPUT['s_id'])
             ||
             ! array_key_exists(0, $G_INPUT['s_id']))
    ) {
        $select_func === 'browse';
    } elseif ($no_multiple) {
        $id = $G_INPUT['s_id'][0];
        if (preg_match('#^([0-9]+):g([0-9]+)$#', $id, $regs)) {
            $uid = $regs[1];
            $oid = $regs[2];
            $user = $uum->getUserInfo($uid, $columns);
            $org = $uum->getGroupInfo($oid);
            if ($user) {
                $result = [
                    'value' => $uid,
                    'type'  => 'user',
                    'name'  => $uum->getNameOf($login, $user, true),
                    'email' => $user['col_email_address']
                ];

                $t->assign('item', $result);
                if ( ! $system && $login) {
                    $uum_util->selectUsers($login, [$uid]);
                    if ($org) {
                        $uum_util->selectGroups($login, [$oid]);
                    }
                }
            }
        } elseif (preg_match('#^([0-9]+)$#', $id, $regs)) {
            $uid = $regs[1];
            $user = $uum->getUserInfo($uid, $columns);
            if ($user) {
                $result = [
                    'value' => $uid,
                    'type'  => 'user',
                    'name'  => $uum->getNameOf($login, $user, true),
                    'email' => $user['col_email_address']
                ];

                $t->assign('item', $result);
                if ( ! $system && $login) {
                    $uum_util->selectUsers($login, [$uid]);
                }
            }
        } elseif (preg_match('#^g([0-9]+)$#', $id, $regs)) {
            $oid = $regs[1];
            $org = $uum->getGroupInfo($oid);
            if ($org) {
                $result = [
                    'value' => $id,
                    'type'  => 'group',
                    'name'  => $org['col_name']
                ];
                $t->assign('item', $result);
                if ( ! $system && $login) {
                    $uum_util->selectGroups($login, [$oid]);
                }
            }
        } elseif ($extension_items
                  && preg_match('#^' . $extension_items['prefix'] . '(.*)$#',
                $id, $regs)
        ) {
            $item_id = $regs[1];
            if (array_key_exists($item_id, $extension_items['data'])) {
                $result = [
                    'value' => $id,
                    'type'  => 'item',
                    'name'  => $extension_items['data'][$item_id]
                ];
                $t->assign('item', $result);
            }
        }
    } else {
        $apply_result = [];
        $chk_users = [];
        $chk_groups = [];
        foreach ($selected as $item) {
            if ($item['uid']) {
                $chk_users[] = $item['uid'];
                $result = [
                    'value' => $item['uid'],
                    'type'  => 'user',
                    'name'  => $item['name'],
                    'email' => $item['email']
                ];

                if ($item['oid']) {
                    $chk_groups[] = $item['oid'];
                }
                if (array_key_exists('group_name', $item)) {
                    $result['group_name'] = $item['group_name'];
                }
                $apply_result[] = $result;
            } elseif ($item['oid']) {
                $chk_groups[] = $item['oid'];
                $apply_result[] = [
                    'value' => $item['id'],
                    'type'  => 'group',
                    'name'  => $item['name']
                ];
            } else {
                $apply_result[] = [
                    'value' => $item['id'],
                    'type'  => 'item',
                    'name'  => $item['name']
                ];
            }
        }
        if (count($chk_users) > 0 && ! $system && $login) {
            $uum_util->selectUsers($login, $chk_users);
        }
        if (count($chk_groups) > 0 && ! $system && $login) {
            $uum_util->selectGroups($login, $chk_groups);
        }

        $t->assign('apply_result', $apply_result);
        $t->assign('apply_result_count', count($apply_result));
    }
}
if ($select_func === 'init' || $select_func === 'browse') {
    $login_user = cb_get_login_user();
    $candidate = [];

    if ($extension_items && $selected_tab) {
        $prefix = $extension_items['prefix'];
        $caption = $extension_items['caption'];
        foreach ($extension_items['data'] as $id => $name) {
            $candidate[] = [
                'id'   => $prefix . $id,
                'type' => 'item',
                'name' => $name
            ];
        }
    } else {

        // access_plugin
        $plugin = null;
        $plugin_param = [];
        $plugin_session =& $sm->getSession($plugin_session_name);
        if ($plugin_session) {
            $plugin_data = $plugin_session->get($plugin_data_name);
            if (is_array($plugin_data)
                && array_key_exists('name', $plugin_data)
            ) {
                $loader = new CB_PluginLoader('grn.common.user.select');
                $plugin =& $loader->loadDriver($plugin_data['name']);
            }
            if (is_array($plugin_data)
                && array_key_exists('params', $plugin_data)
            ) {
                $plugin_param = $plugin_data['params'];
            }
        }

        $selected_organization = null;

        // 選択ツリー
        if ($s_oid > 0) {
            $selected_organization = $uum->getGroupInfo($s_oid);
        }

        // 選択候補
        if ($selected_organization) {
            $users_id = [];
            $disabled = true;
            if ($plugin) {
                // 所属ユーザーの中に許可されている人がいたら表示
                $users_id = $uum->getGroupUsersId($s_oid);
                $users_id = $plugin->evalUsers($users_id, $plugin_param);
                if (count($users) > 0) {
                    $disabled = false;
                } else {
                    $disabled = true;
                }
            } else {
                $users_id = $uum->getGroupUsersId($s_oid);
                $disabled = false;
            }
            $org_name = $selected_organization['col_name'];
            if ($include_org && ! $disabled) {
                $item_name = $org_name;
                $candidate[] = [
                    'id'   => 'g' . $s_oid,
                    'type' => 'group',
                    'name' => $item_name
                ];
            }

            $users = $uum->getUsersInfo($users_id, $columns);
            foreach ($users as $user) {
                $item_name = $uum->getNameOf($login_user, $user, true);
                $user_id = $user['_id'];
                $candidate[] = [
                    'id'         => $user_id . ':g' . $s_oid,
                    'type'       => 'user',
                    'name'       => $item_name,
                    'group_name' => $org_name,
                    'email'      => $user['col_email_address']
                ];
            }

        } elseif ($s_oid == -1) // Search by input text
        {
            require_once('grn/org_util.csp');
            require_once('grn/org_util_search.csp');


            if (array_key_exists('search_org_id', $G_INPUT)
                && $G_INPUT['search_org_id'] != '0'
            ) {
                $org_id = $G_INPUT['search_org_id'];
            }

            $condition = grn_get_user_info_search_condition($org_id,
                $searchword, false /*system_flg*/);
            $count = grn_get_user_info_search_count($org_id, $condition);

            $navi_params = ['oid' => $org_id, 'search_text' => $searchword];
            $navigation_info = grn_get_user_navigation_info($count,
                $navi_params);

            $users =& grn_search_user_info($org_id, $condition,
                $navigation_info);
            $primary_groups
                = $uum->getManyUserPrimaryGroupInfoList(array_keys($users));
            $user_info_format = [
                'col_display_name'          => 'display_name',
                'col_display_name_language' => 'display_name_language',
                'col_nickname'              => 'nickname',
            ];
            foreach ($users as $uid => $user) {
                $user_row = $user['row'];

                $user_info = [];
                foreach ($user_info_format as $col => $val) {
                    $user_info[$col] = $user_row->get($val);
                }
                $info = [
                    'id'    => $uid,
                    'type'  => 'user',
                    'name'  => $uum->getNameOf($login_user, $user_info, true),
                    'email' => $user_row->get('email_address')
                ];
                $user_id = $uid;
                $group = cb_at($primary_groups, $user_id, false);
                if ($group !== false) {
                    $group_id = $group['_id'];
                    $group_name = $group['col_name'];
                    $eval = [$group_id => $group];

                    if ($plugin) {
                        $eval = $plugin->evalGroups($eval, $plugin_param);
                    }

                    if (count($eval) > 0) {
                        $info['id'] .= ':g' . $group_id;
                        $info['group_name'] = $group_name;
                    }
                }
                $candidate[] = $info;
            }
            $s_oid = $org_id;
            $org_id = ( ! $org_id) ? '-3'
                : $org_id; //to keep the search word when search at top (トッ）).
        } elseif ($s_oid == -2) {
            $users_id = $uum->getNoGroupIdUsers();
            if ($plugin) {
                $users_id = $plugin->evalUsers($users_id, $plugin_param);
            }

            $users = $uum->getUsersInfo($users_id, $columns);
            foreach ($users as $user) {
                $item_name = $uum->getNameOf($login_user, $user, true);
                $user_id = $user['_id'];
                $candidate[] = [
                    'id'    => $user_id,
                    'type'  => 'user',
                    'name'  => $item_name,
                    'email' => $user['col_email_address']
                ];
            }
        }
    }
} elseif ($select_func === 'add') {
    $ids = [];
    if (array_key_exists('c_id', $G_INPUT)) {
        $ids = $G_INPUT['c_id'];
    }
    $userIds = [];
    $groupIds = [];
    $newInputs = [];
    foreach ($ids as $id) {
        $input = [];
        if (preg_match('#^([0-9]+):g([0-9]+)$#', $id, $regs)) {
            $uid = (int)$regs[1];
            $oid = (int)$regs[2];
            $userIds[] = $uid;
            $groupIds[] = $oid;
            $input['id'] = $id;
            $input['type'] = 'user';
            $input['uid'] = $uid;
            $input['oid'] = $oid;
        } elseif (preg_match('#^([0-9]+)$#', $id, $regs)) {
            $uid = (int)$regs[1];
            $userIds[] = $uid;
            $input['id'] = $id;
            $input['type'] = 'user';
            $input['uid'] = $uid;
            $input['oid'] = 0;

        } elseif (preg_match('#^g([0-9]+)$#', $id, $regs)) {
            $oid = (int)$regs[1];
            $groupIds[] = $oid;
            $input['id'] = $id;
            $input['type'] = 'group';
            $input['uid'] = 0;
            $input['oid'] = $oid;

        } elseif ($extension_items
                  && preg_match('#^' . $extension_items['prefix'] . '(.*)$#',
                $id, $regs)
        ) {
            $item_id = $regs[1];
            if (array_key_exists($item_id, $extension_items['data'])) {
                $input['id'] = $id;
                $input['type'] = 'item';
                $input['name'] = $extension_items['data'][$item_id];
                $input['uid'] = 0;
                $input['oid'] = 0;
            }
        }

        if ( ! empty($input)) {
            foreach ($selected as $key => $item) {
                if ($input['uid'] !== 0 && $item['uid'] === $input['uid']) {
                    unset($selected[$key]);
                }
            }
            $newInputs[$input["id"]] = $input;
        }
    }// end of foreach

    $login = cb_get_login_user();
    $users_info = $uum->getUsersInfo($userIds, $columns);
    $groups = $uum->getGroupListByIds($groupIds);
    foreach ($newInputs as $id => $input) {
        if ($input["type"] === "user") {
            $userId = $input["uid"];
            $groupId = $input["oid"];

            if (isset($users_info[$userId])) {
                $input["name"] = '';
                if (array_key_exists('col_display_name',
                    $users_info[$userId])
                ) {
                    $input["name"] = $uum->getNameOf($login,
                        $users_info[$userId], true);
                }
                $input['email'] = cb_at($users_info[$userId],
                    'col_email_address', "");
                $input["oid"] = isset($groups, $groupId) ? $groupId : 0;
                if ($groupId !== 0) {
                    $input['group_name'] = $groups[$groupId]->get('name');
                }
                $selected[$id] = $input;
            } else {
                unset($selected[$id]);
            }
        } elseif ($input["type"] === "group") {
            $userId = $input["uid"];
            $groupId = $input["oid"];
            if (isset($groups[$groupId])) {
                $input['name'] = $groups[$groupId]->get("name");
                $selected[$id] = $input;
            } else {
                unset($selected[$id]);
            }
        } else {
            $selected[$id] = $input;
        }
    }
} elseif ($select_func === 'remove') {
    $ids = [];
    if (array_key_exists('s_id', $G_INPUT)) {
        $ids = $G_INPUT['s_id'];
    }
    foreach ($ids as $id) {
        unset($selected[$id]);
    }
}

// org tree view
require_once('grn/org_tree.csp');

$page_name = cb_get_pagename();

$util = GRN_OrgTreeUtil::getInstance();
$tree =& $util->getTree($page_name);

if (is_null($s_oid)) {
    $s_oid = $tree->getSelectedNode();
}

if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
    $tree->initialize();
    $s_oid = null;
}
$tree->setSelectedNode($s_oid);
$util->setTree($page_name, $tree);
$org = $tree->getRoot();

$t->assign('org_id', $s_oid);
$t->assign('page_name', $page_name);
$t->assign('org', $org);
// tree view end

// Smartyにページタイトルを割り当てる
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

$session->set('selected', $selected);
$session->set('candidate', $candidate);
$t->assign('selected', $selected);
$t->assign('candidate', $candidate);

$url_param_names = [
    'searchword',
    'no_multiple',
    'form_name',
    'include_org',
    'system',
    'system_display',
    'select_name',
    'plugin_data_name',
    'plugin_session_name',
    'item_data_name',
    'item_session_name',
    'send_cgi_parameter'
];
$url_params = [];
foreach ($url_param_names as $url_param_name) {
    $url_params[$url_param_name] = $$url_param_name;
}

$t->assign('search_org_id', $org_id);
$t->assign('url_params', $url_params);
$t->assign('select_func', $select_func);
$t->assign('selected_tab', $selected_tab);
$t->assign('s_oid', $s_oid);
$t->assign('extension_items', $extension_items);
$t->display(cb_get_pagename() . '.tpl');


