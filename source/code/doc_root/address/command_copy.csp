<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);

    $target_name = 'address/copy';
    SmartyValidate::register_form($target_name);

    $params = $G_INPUT;
    if (array_key_exists('bids', $params)) {
        $params['bids'] = serialize($params['bids']);
    }

    if (SmartyValidate::is_valid($params, $target_name)) {
        // GET/POSTされたパラメータを取得する
        $bid = null;
        if (array_key_exists('bid', $G_INPUT)) {
            $bid = $G_INPUT['bid'];
        }
        if (0 == strlen($bid)) {
            cb_throw_error(E_GRN_ADDRESS_INVALID_BOOK_ID);
        }
        $cid = null;
        if (array_key_exists('cid', $G_INPUT)) {
            $cid = $G_INPUT['cid'];
        }
        if (0 == strlen($cid)) {
            cb_throw_error(E_GRN_ADDRESS_INVALID_CARD_ID);
        }
        $bids = null;
        if (array_key_exists('bids', $G_INPUT)) {
            $bids = $G_INPUT['bids'];
        }
        if ( ! is_array($bids) || 0 == count($bids)) {
            cb_throw_error(E_GRN_ADDRESS_SHARED_ADDRESS_BOOK_NOT_FOUND);
        }

        // アドレス帳を取得する
        require_once('address/application.csp');
        $app_locator = GRN_ApplicationLocator::instance();
        /** @var GRN_Address_Application $app */
        $app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
        if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
            cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
        }
        $book_manager =& $app->getBookManager();

        // ログインユーザーを取得する
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $login =& $uum->getLoginUser();
        if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
            cb_throw_error(E_GRN_USER_NOT_FOUND);
        }
        $login_id = $login->getOID();

        // 使用権限を取得する
        require_once('address/access.csp');
        $access_manager = GRN_Address_AccessManager::getInstance();
        if ( ! ($row
            =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))
        ) {
            assert('FALSE');
        }

        // ダイナミックロールを取得する
        $dynamic_roles = $uum->listGrantedRoles();

        // 使用権限を評価する
        $authorities = ['private_address', 'shared_address'];
        $security_model = $access_manager->getSecurityModel($row);
        $access = $access_manager->evaluateAccess($row, $login,
            $dynamic_roles, $authorities, $security_model);

        // 共有アドレス帳の使用権限を評価する
        $authorities = ['shared_address'];
        $access_shared_address = $access_manager->isAllowedAccess($access,
            $authorities, $security_model);

        $books = [];
        $allowed_books = [];
        if ($access_shared_address) {
            // 共有アドレスブック一覧を取得する
            $books = $book_manager->listSharedAddressBooks();

            if (0 < count($books)) {
                // アクセス可能な共有アドレスブック一覧を取得する
                $rows = [];
                foreach (array_keys($books) as $book_id) {
                    $book = $books[$book_id];
                    $rows[$book_id] = $book->getRow();
                }
                $authorities = ['browse', 'editing'];
                $allowed_books = $access_manager->pickAllowedObjects($rows,
                    $login, $dynamic_roles, $authorities);
            }
        }

        // コピー元のブックを取得する
        if (0 > $bid) {
            // 個人アドレス帳の使用権限を評価する
            $authorities = ['private_address'];
            if ( ! $access_manager->isAllowedAccess($access, $authorities,
                $security_model)
            ) {
                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
            }

            // 個人アドレスブックを取得する
            if ( ! ($book
                =& $book_manager->getPrivateAddressBookByUserId($login_id))
            ) {
                cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
            }
        } else {
            // 共有アドレス帳の使用権限を評価する
            if ( ! $access_shared_address) {
                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
            }

            // 共有アドレスブックを取得する
            if ( ! array_key_exists($bid, $allowed_books)) {
                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_EDITING);
            }
            $book =& $books[$bid];
        }

        // アドレスを取得する
        if ( ! ($data =& $book->getData($cid))) {
            cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
        }

        // アドレスをコピー
        $properties = $data->getProperties('copy', 'item_id');
        unset($properties['creator']);
        unset($properties['creator_name']);
        unset($properties['ctime']);
        unset($properties['modifier']);
        unset($properties['modifier_name']);
        unset($properties['mtime']);
        unset($properties['map']); // remove the "map" item before copy
        foreach ($bids as $book_id) {
            if (array_key_exists($book_id, $allowed_books)) {
                $book =& $books[$book_id];
                $book->copyData($properties);
            }
        }

        cb_redirect('address/index', ['sf' => 1, 'bid' => $bid]);
    } else {
        $t->setPageInfo($target_name);
        include('_copy.csp');
        $t->display($target_name . '.tpl');
    }
}

