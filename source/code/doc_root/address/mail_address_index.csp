<?php

use grn\address\screen\MailAddressIndex;

require_once('grn/smarty.csp');
require_once('mail/utility.csp');
$t = new GRN_Smarty;

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

////////////////////////////////////////////////////////////////

// GET/POSTされたパラメータを取得する
global $G_INPUT;
$bid = null;
if (array_key_exists('bid', $G_INPUT)) {
    $bid = $G_INPUT['bid'];
    if (( ! empty($bid))
        && ( ! is_numeric($G_INPUT['bid']))
    ) {
        cb_throw_error(E_GRN_ADDRESS_INVALID_BOOK_ID);
    }
}

$s_oid = null;
if (array_key_exists('s_oid', $G_INPUT)) {
    $s_oid = $G_INPUT['s_oid'];
}
$func = 'browse';

if (array_key_exists('func', $G_INPUT)) {
    $func = $G_INPUT['func'];
}

$selectType = cb_at($G_INPUT, "selectType", "default");
$page = new MailAddressIndex();
$page->validateSelectType($selectType);

// アドレス帳を取得する
require_once('address/application.csp');

$app_locator = GRN_ApplicationLocator::instance();
/** @var GRN_Address_Application $app */
$app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
    cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
}
$book_manager =& $app->getBookManager();

// ログインユーザーを取得する
global $G_container_base;
/** @var GRN_Uum $uum */
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}
$login_id = $login->getOID();

// アドレス帳の設定を取得する
require_once('address/config.csp');
$config_manager = GRN_Address_ConfigManager::getInstance();
$system_config =& $config_manager->getSystemConfig();
$personal_config =& $config_manager->getPersonalConfig($login);
require_once('grn/ui.csp');
$ui_config_manager = GRN_UIConfigManager::getInstance();
$ui_config =& $ui_config_manager->getUserConfig($login);

// 使用権限を取得する
require_once('address/access.csp');
$access_manager = GRN_Address_AccessManager::getInstance();
if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
    assert('FALSE');
}

// ダイナミックロールを取得する
$dynamic_roles = $uum->listGrantedRoles();

// 使用権限を評価する
$authorities = ['private_address', 'shared_address'];
$security_model = $access_manager->getSecurityModel($row);
$access = $access_manager->evaluateAccess($row, $login, $dynamic_roles,
    $authorities, $security_model);

// 個人アドレス帳の使用権限を評価する
$authorities = ['private_address'];
$access_for_view = [];
$access_for_view['private_address'] = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

// 共有アドレス帳の使用権限を評価する
$authorities = ['shared_address'];
$access_for_view['shared_address'] = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

$private_address_book = null;
if ($access_for_view['private_address']) {
    // 個人アドレスブックを取得する
    if ( ! ($private_address_book
        =& $book_manager->getPrivateAddressBookByUserId($login_id))
    ) {
        if ( ! ($private_address_book
            =& $book_manager->addPrivateAddressBook('cyde', $login_id, []))
        ) {
            cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
        }
    }
}

require_once('address/view_util.csp');
$view_util = GRN_Address_ViewUtil::getInstance();
$builtin_items = [];
$shared_address_books = [];
$allowed_books = [];
$books_for_view = [];
if ($access_for_view['shared_address']) {
    // 共有アドレスブック一覧を取得する
    $shared_address_books = $book_manager->listSharedAddressBooks();

    if (0 < count($shared_address_books)) {
        // 閲覧権限を持つ共有アドレスブック一覧を取得する
        $rows = [];
        foreach (array_keys($shared_address_books) as $book_id) {
            $book =& $shared_address_books[$book_id];
            $rows[$book_id] =& $book->getRow();
        }
        $authorities = ['browse'];
        $allowed_books = $access_manager->pickAllowedObjects($rows, $login,
            $dynamic_roles, $authorities);

        // 共有アドレスブック情報一覧を取得する
        $books_for_view = $view_util->listBooks($shared_address_books,
            $allowed_books);
    }
}
////////////////////////////////////////////////////////
//add my address group
require_once('address/mygroup_logic.csp');
$address_group_logic = GRN_Address_MyGroup_Logic::getInstance();
$address_mygroups = $address_group_logic->getMyGroupList($login);
if (is_array($address_mygroups) && count($address_mygroups) > 0) {
    $t->assign('address_mygroups', $address_mygroups);

    if ($bid == null) {
        if ( ! array_key_exists('tab', $G_INPUT)
             && ! array_key_exists('func', $G_INPUT)
        ) {
            $bid = -3;
        }
    }
} else {
    if ($bid == -3) {
        $bid = null;
    }
}

////////////////////////////////////////////////////////
// Myグループがあればそれを取得する
$mygroups = $uum->getMyGroupsInfo($login_id, 'user');

if (is_array($mygroups) && count($mygroups) > 0) {
    $t->assign('mygroups', $mygroups);
} else {
    // Myグループがない場合でMyグループの選択が行われた場合は通常の組織にする
    if ($bid == -2) {
        $bid = null;
    }
}

////////////////////////////////////////////////////////////////

// セッションを初期化する
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$st = null;

$session =& $session_manager->getSession('address/mail_address_index');

if (array_key_exists('reset', $G_INPUT)) {
    // 前回のセッションの削除
    $session_manager->destroy('address/mail_address_index');

    // 新規にセッションの作成
    $session =& $session_manager->getSession('address/mail_address_index');

    // GET/POSTされたパラメータを取得する
    $form_name = @ $G_INPUT['form_name'];
    $tag_name = @ $G_INPUT['tag_name'];

    $session->set('form_name', $form_name);
    $session->set('tag_name', $tag_name);
    $session->set('selected_users', null);
} else {
    $session =& $session_manager->getSession('address/mail_address_index');
    $form_name = $session->get('form_name');
    $tag_name = $session->get('tag_name');
    $st = $session->get('search_text' . $bid);
}

$selected_users = $page->getSelectedUser($G_INPUT, $selectType);

$users_list = $session->get('selected_users');

if ( ! is_array($users_list)) {
    $users_list = [];
}
$user_list_conditions = [];
$address_conditions = [];
foreach ($users_list as $field => $users) {
    foreach (array_keys($users) as $user_id) {
        if (0 == strlen($user_id)) {
            continue;
        }

        switch ($user_id{0}) {
            case 'u':   // ユーザー名簿
                if ( ! ($user = $uum->getUser(substr($user_id, 1)))) {
                    break;
                }
                // 選択ユーザー情報一覧を生成する
                $display_name = $uum->getOnlyOneNameByUserObject($user);
                $email_address = $user->get('email_address');
                if (0 < strlen($display_name) && 0 < strlen($email_address)) {
                    $email_address
                        = GRN_Mail_Utility::static_addEmailBracket($email_address,
                        "remove");
                    $selected_users[$field][$user_id] = [
                        'uid'            => $user_id,
                        'display_name'   => $display_name,
                        'email_address'  => $email_address,
                        'escape_address' => '"'
                                            . GRN_Mail_Utility::static_escapeDisplayName($display_name)
                                            . '" <' . $email_address . '>',
                        'raw_address'    => $users[$user_id]['raw_address']
                    ];
                }
                break;
            case 'a':   // アドレス帳
                // IDを取得する
                $id = explode('.', substr($user_id, 1));
                if (is_array($id) && 1 < count($id)) {
                    list($book_id, $card_id) = $id;
                } else {
                    $book_id = -1;
                    $card_id = $id[0];
                }

                if (0 > $book_id && $access_for_view['private_address']) {
                    // 個人アドレスブックを取得する
                    $book =& $private_address_book;
                } elseif (array_key_exists($book_id, $allowed_books)) {
                    // 共有アドレスブックを取得する
                    $book =& $shared_address_books[$book_id];
                } else {
                    break;
                }

                // アドレスを取得する
                if ( ! ($data =& $book->getData($card_id))) {
                    cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
                }

                // 選択ユーザー情報一覧を生成する
                $display_name = $data->getProperty('subject');
                $email_address = $data->getProperty('email_address');
                if (0 < strlen($display_name) && 0 < strlen($email_address)) {
                    $email_address
                        = GRN_Mail_Utility::static_addEmailBracket($email_address,
                        "remove");
                    $selected_users[$field][$user_id] = [
                        'uid'            => $user_id,
                        'display_name'   => $display_name,
                        'email_address'  => $email_address,
                        'escape_address' => '"'
                                            . GRN_Mail_Utility::static_escapeDisplayName($display_name)
                                            . '" <' . $email_address . '>',
                        'raw_address'    => $users[$user_id]['raw_address']
                    ];
                }

                break;
            case 'r':   // mail address selected
                $selected_users[$field][$user_id] = [
                    'uid'            => $user_id,
                    'email_address'  => $users[$user_id]['email_address'],
                    'escape_address' => $users[$user_id]['escape_address'],
                    'raw_address'    => $users[$user_id]['raw_address']
                ];
                break;
            default:
                assert('FALSE');
                break;
        }
    }
}
////////////////////////////////////////////////////////////////

$app_locator = GRN_ApplicationLocator::instance();
$dbconn =& $app_locator->getConnection('address');

$candidate_users = [];
$conditions = [];
$condition = null;
if (-3 == $bid) {
    if ($s_oid != null && ! array_key_exists($s_oid, $address_mygroups)) {
        cb_throw_error(E_GRN_ADDRESS_MYGROUP_NOT_FOUND);
    }
    if ( ! $s_oid) {
        $address_mygroup = reset($address_mygroups);
        $s_oid = $address_mygroup['id'];
    }
    // MyAddressグループ
    $users = [];
    require_once('fw/string_util.csp');
    $texts = cb_parse_search_text($st);
    if ('search' == $func && count($texts) > 0) {
        //************START SEARCH ***********************************************************
        // 検索
        $group =& $address_group_logic->getMyGroup($login, $s_oid);
        require_once('address/mygroup_data_logic.csp');
        $mygroup_data = GRN_Address_MyGroupData_Logic::getInstance();
        $mygroupdata_for_view = $mygroup_data->listGroupData($group,
            $allowed_books, 0, -1);
        $shared_datas_for_view = [];
        $user_datas_for_view = null;
        $private_datas_for_view = null;
        foreach (array_keys($mygroupdata_for_view) as $user_id) {
            $conditions = [];
            $user = &$mygroupdata_for_view[$user_id];
            $prefix = 'a';
            switch ($user['type']) {
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_USER:
                    // ユーザー名簿
                    if (is_null($user_datas_for_view)) {
                        if ( ! ($book =& $book_manager->getUserListBook())) {
                            cb_throw_error(E_GRN_ADDRESS_USER_LIST_BOOK_NOT_FOUND);
                        }
                        // 組み込み項目情報一覧を取得する
                        $builtin_items = $view_util->listBuiltinItems($book);
                        foreach ($texts as $text) {
                            $text = $dbconn->escapeLike($text);
                            $sub_conditions = [];
                            $sub_conditions[]
                                = '( tab_cb_user.col_display_name LIKE \'%'
                                  . $text . '%\' )';
                            $sub_conditions[]
                                = '( tab_cb_user.col_nickname LIKE \'%'
                                  . $text . '%\' )';
                            if ($builtin_items['foreign_key']['use']
                                && $builtin_items['foreign_key']['show']
                            ) {
                                $sub_conditions[]
                                    = '( tab_cb_user.col_foreign_key LIKE \'%'
                                      . $text . '%\' )';
                            }
                            if ($builtin_items['sort_key']['use']
                                && $builtin_items['sort_key']['show']
                            ) {
                                $sub_conditions[]
                                    = '( tab_cb_user.col_normalized_sort_key LIKE \'%'
                                      . cb_normalize_sort_key($text) . '%\' )';
                            }
                            if ($builtin_items['email_address']['use']
                                && $builtin_items['email_address']['show']
                            ) {
                                $sub_conditions[]
                                    = '( tab_cb_user.col_email_address LIKE \'%'
                                      . $text . '%\' )';
                            }
                            if ($builtin_items['post']['use']
                                && $builtin_items['post']['show']
                            ) {
                                $sub_conditions[]
                                    = '( tab_grn_userinfo.col_post LIKE \'%'
                                      . $text . '%\' )';
                            }
                            //--
                            $extend_condition = 'r.col_user=tab_cb_user._id'
                                                . ' AND i.col_use=1 AND i.col_type<>"password"'
                                                . ' AND i.col_show=1'
                                                . ' AND i.col_search=1';

                            $extend_query
                                = "((SELECT GROUP_CONCAT(r.col_string SEPARATOR ' ')"
                                  . " FROM tab_grn_itemuserrelation r INNER JOIN tab_grn_useritem i ON r.col_item=i._id"
                                  . " WHERE " . $extend_condition . ") LIKE '%"
                                  . $text . "%')";

                            $sub_conditions[] = $extend_query;
                            //--
                            $conditions[] = '( ' . implode(' OR ',
                                    $sub_conditions) . ' )';
                        }
                        $order_by
                            = 'tab_cb_user.col_list_index, tab_cb_user._id';
                        $conditions[]
                            = "( ( tab_cb_user.col_email_address IS NOT NULL ) AND ( tab_cb_user.col_email_address <> '' ) ";
                        $conditions = array_merge($user_list_conditions,
                            $conditions);
                        $condition = implode(' AND ', $conditions);

                        require_once('address/mygroup_data_logic.csp');
                        $mygroup_data
                            = GRN_Address_MyGroupData_Logic::getInstance();
                        $user_datas_for_view
                            = $mygroup_data->getDataSearchUsersGroup($group,
                            $order_by, 0, -1, $condition);
                    }
                    // 候補ユーザー情報一覧を生成する
                    if (array_key_exists($user_id, $user_datas_for_view)) {
                        $user =& $user_datas_for_view[$user_id];
                        $user_id = 'u' . $user['uid'];
                        $display_name = $user['display_name'];
                        $email_address = $user['email_address'];
                        if (0 < strlen($display_name)
                            && 0 < strlen($email_address)
                        ) {
                            $candidate_users[$user_id] = [
                                'uid'           => $user_id,
                                'display_name'  => $display_name,
                                'email_address' => $email_address
                            ];
                        }
                    }

                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED:
                    // 共有アドレスブック
                    $bid = $user['book_id'];
                    if ( ! array_key_exists($bid, $shared_datas_for_view)) {
                        if ($bid > 0
                            && array_key_exists($bid, $allowed_books)
                        ) {
                            $book =& $shared_address_books[$bid];
                        }
                        $builtin_items = $view_util->listBuiltinItems($book);
                        $order_by = 'd.col_subject, d._id';
                        $se = false;
                        $datas
                            = $book->listFullTextSearchDatas(0,
                            -1, $order_by, $texts, $se, $builtin_items);
                        $datas_for_view
                            = $view_util->listDatas($datas,
                            $bid);
                        $shared_datas_for_view[$bid] = $datas_for_view;
                    }
                    if (array_key_exists($user['card_id'],
                        $shared_datas_for_view[$bid])
                    ) {
                        $prefix .= $bid . '.';
                        $card_id = $user['card_id'];
                        $user_id = $prefix . $user['card_id'];
                        $display_name
                            = $shared_datas_for_view[$bid][$card_id]['subject'];
                        $email_address
                            = $shared_datas_for_view[$bid][$card_id]['email_address'];
                        if (0 < strlen($display_name)
                            && 0 < strlen($email_address)
                        ) {
                            $candidate_users[$user_id] = [
                                'uid'           => $user_id,
                                'display_name'  => $display_name,
                                'email_address' => $email_address
                            ];
                        }
                    }
                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE:
                    // 個人アドレスブック
                    if (is_null($private_datas_for_view)) {
                        $bid = -1;
                        $book =& $private_address_book;
                        $builtin_items
                            = $view_util->listBuiltinItems($book);
                        $order_by = 'd.col_subject, d._id';
                        $se = false;
                        $datas
                            = $book->listFullTextSearchDatas(0,
                            -1, $order_by, $texts, $se, $builtin_items);
                        $private_datas_for_view = $view_util->listDatas($datas,
                            $bid);
                    }

                    if (array_key_exists($user['card_id'],
                        $private_datas_for_view)
                    ) {
                        $card = $private_datas_for_view[$user['card_id']];
                        $user_id = $prefix . $user['card_id'];
                        $display_name = $card['subject'];
                        $email_address = $card['email_address'];
                        if (0 < strlen($display_name)
                            && 0 < strlen($email_address)
                        ) {
                            $candidate_users[$user_id] = [
                                'uid'           => $user_id,
                                'display_name'  => $display_name,
                                'email_address' => $email_address
                            ];
                        }
                    }
                    break;
            }
        }
        $bid = -3;
        $t->assign('select_organization_id', $s_oid);
        //****** END SEARCH ******************************************************************
    } else {
        if (0 < strlen($s_oid)) {
            // Group Data
            $group =& $address_group_logic->getMyGroup($login, $s_oid);
            require_once('address/mygroup_data_logic.csp');
            $mygroup_data = GRN_Address_MyGroupData_Logic::getInstance();
            $mygroupdata_for_view = $mygroup_data->listGroupData($group,
                $allowed_books);
            if ($mygroupdata_for_view === false) {
                require_once('grn/error_code.csp');
                cb_throw_error(E_GRN_PERSONAL_MYGROUP_NOT_FOUND);
            }
        }
        foreach (array_keys($mygroupdata_for_view) as $user_id) {
            $user = &$mygroupdata_for_view[$user_id];
            $prefix = 'a';
            switch ($user['type']) {
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_USER:
                    $user_id = 'u' . $user['card_id'];
                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_SHARED:
                    // 共有アドレスブック
                    $prefix .= $user['book_id'] . '.';
                    $user_id = $prefix . $user['card_id'];
                    break;
                case GRN_ADDRESS_MYGROUP_DATA_TYPE_PRIVATE:
                    $user_id = $prefix . $user['card_id'];
                    break;
                default:
                    assert('FALSE');
            }
            $display_name = $user['name'];
            $email_address = $user['email'];
            if (0 < strlen($display_name) && 0 < strlen($email_address)) {
                $candidate_users[$user_id] = [
                    'uid'           => $user_id,
                    'display_name'  => $display_name,
                    'email_address' => $email_address
                ];
            }
        }
        $t->assign('select_organization_id', $s_oid);
    }
} // Tab My Group
elseif (-2 == $bid) {
    require_once('grn/uum_search.csp');
    $uum_search = new GRN_Uum_Search();
    $post_condition = false;

    if ( ! $s_oid) {
        $mygroup = reset($mygroups);
        $s_oid = $mygroup['_id'];
    }
    $condition = null;
    $post_condition = false;
    // Myグループ
    $users = [];
    if ('search' == $func) {
        // 検索
        if ( ! ($book =& $book_manager->getUserListBook())) {
            cb_throw_error(E_GRN_ADDRESS_USER_LIST_BOOK_NOT_FOUND);
        }
        $builtin_items = $view_util->listBuiltinItems($book);
        require_once('fw/string_util.csp');
        $texts = cb_parse_search_text($st);
        if (0 < count($texts)) {
            foreach ($texts as $text) {
                $text = $dbconn->escapeLike($text);
                $sub_conditions = [];

                $sub_conditions[] = '( tab_cb_user.col_display_name LIKE \'%'
                                    . $text . '%\' )';
                $sub_conditions[] = '( tab_cb_user.col_nickname LIKE \'%'
                                    . $text . '%\' )';
                if ($builtin_items['foreign_key']['use']
                    && $builtin_items['foreign_key']['show']
                ) {
                    $sub_conditions[] = '( tab_cb_user.col_foreign_key LIKE \'%'
                                        . $text . '%\' )';
                }
                if ($builtin_items['sort_key']['use']
                    && $builtin_items['sort_key']['show']
                ) {
                    $sub_conditions[]
                        = '( tab_cb_user.col_normalized_sort_key LIKE \'%'
                          . cb_normalize_sort_key($text) . '%\' )';
                }
                if ($builtin_items['email_address']['use']
                    && $builtin_items['email_address']['show']
                ) {
                    $sub_conditions[]
                        = '( tab_cb_user.col_email_address LIKE \'%' . $text
                          . '%\' )';
                }
                if ($builtin_items['post']['use']
                    && $builtin_items['post']['show']
                ) {
                    $sub_conditions[] = '( tab_grn_userinfo.col_post LIKE \'%'
                                        . $text . '%\' )';
                    $post_condition = true;
                }
                //--
                $extend_condition = 'r.col_user=tab_cb_user._id'
                                    . ' AND i.col_use=1 AND i.col_type<>"password"'
                                    . ' AND i.col_show=1'
                                    . ' AND i.col_search=1';

                $extend_query
                    = "((SELECT GROUP_CONCAT(r.col_string SEPARATOR ' ')"
                      . " FROM tab_grn_itemuserrelation r INNER JOIN tab_grn_useritem i ON r.col_item=i._id"
                      . " WHERE " . $extend_condition . ") LIKE '%" . $text
                      . "%')";

                $sub_conditions[] = $extend_query;
                //--
                $conditions[] = '( ' . implode(' OR ', $sub_conditions) . ' )';
            }
        }
        $conditions[]
            = "( tab_cb_user.col_email_address IS NOT NULL ) AND ( tab_cb_user.col_email_address <> '' )";
        $conditions = array_merge($user_list_conditions, $conditions);
        $condition = implode(' AND ', $conditions);
    } else {
        // 通常
        if (is_array($user_list_conditions) && count($user_list_conditions)) {
            $condition = implode(' AND ', $user_list_conditions);
        }
    }

    if (0 < strlen($s_oid)) {
        if ($post_condition) {
            $order_by
                = 'tab_grn_mygroupuserrelation.col_list_index, tab_grn_mygroupuserrelation._id';
            $users = $uum_search->getMyGroupUserInfos($s_oid, 0, -1, $order_by,
                $condition);
        } else {
            $order_by = 'col_list_index, _id';
            $users = $uum->getMyGroupUsers($s_oid, 0, -1, $condition,
                $login_id);
        }
        if ($users === false) {
            require_once('grn/error_code.csp');
            cb_throw_error(E_GRN_PERSONAL_MYGROUP_NOT_FOUND);
        }
    }


    // 候補ユーザー情報一覧を生成する
    foreach (array_keys($users) as $user_id) {
        $user =& $users[$user_id];
        $user_id = 'u' . $user_id;

        $display_name = $uum->getOnlyOneNameByUserObject($user);
        $email_address = $user->get('email_address');
        if (0 < strlen($display_name) && 0 < strlen($email_address)) {
            $candidate_users[$user_id] = [
                'uid'           => $user_id,
                'display_name'  => $display_name,
                'email_address' => $email_address
            ];
        }
    }
    $t->assign('select_organization_id', $s_oid);
} elseif (0 < strlen($bid)) {
    $prefix = 'a';
    if (0 < $bid || (0 > $bid && ! $access_for_view['private_address'])) {
        // 共有アドレスブックを取得する
        if (array_key_exists($bid, $allowed_books)) {
            // 共有アドレスブック
            $book =& $shared_address_books[$bid];
            $prefix .= $bid . '.';
        } else {
            // 個人アドレスブック
            $bid = -1;
        }
    }
    if (0 > $bid) {
        if ($access_for_view['private_address']) {
            // 個人アドレスブック
            $book =& $private_address_book;
        } else {
            // ユーザー名簿ブック
            $bid = null;
        }
    }

    if (0 < strlen($bid)) {
        require_once('grn/controller.csp');
        $controller_util = new GRN_ControllerUtil();
        $offset = $controller_util->getNaviStartPosition();
        $controller_util->setNaviStartPosition($offset);
        $limit = $ui_config->getListMax();

        // アドレス一覧を取得する
        $builtin_items = $view_util->listBuiltinItems($book);

        // Incremental Find on Reading name
        require_once('address/charmap_util.csp');
        $char_map = GRN_Address_CharMap_Util::getInstance();

        $cidx = null;
        if (array_key_exists('cidx', $G_INPUT)) {
            $cidx = $G_INPUT['cidx'];
        }
        $selected_hira_char = null;
        if ($builtin_items['personal_sort_key']['use']) {
            $selected_chars = $char_map->getCharsByIndex($cidx);
            $personal_key_conditions = [];
            if ( ! is_null($selected_chars)) {
                $selected_hira_char = $selected_chars[0];

                foreach ($selected_chars as $c) {
                    $personal_key_conditions[]
                        = "concat( ltrim(col_family_sort_key), ltrim(col_given_sort_key) ) LIKE '"
                          . $c . "%'";
                }
                $conditions[] = "( " . implode(" OR ", $personal_key_conditions)
                                . " )";
            }

        }

        $t->assign('selected_char', $selected_hira_char);

        if ('search' == $func) {
            require_once('fw/string_util.csp');
            $texts = cb_parse_search_text($st);
            if (0 < count($texts)) {
                foreach ($texts as $text) {
                    $text = $dbconn->escapeLike($text);
                    $sub_conditions = [];
                    if ($builtin_items['subject']['use']) {
                        $sub_conditions[] = '( col_subject LIKE \'%' . $text
                                            . '%\' )';
                    }
                    if ($builtin_items['personal_name']['use']) {
                        $sub_conditions[] = '( col_given_name LIKE \'%' . $text
                                            . '%\' )';
                        $sub_conditions[] = '( col_family_name LIKE \'%' . $text
                                            . '%\' )';
                    }
                    if ($builtin_items['personal_sort_key']['use']) {
                        $sub_conditions[] = '( col_given_sort_key LIKE \'%'
                                            . $text . '%\' )';
                        $sub_conditions[] = '( col_family_sort_key LIKE \'%'
                                            . $text . '%\' )';
                    }
                    if ($builtin_items['company_name']['use']) {
                        $sub_conditions[] = '( col_company_name LIKE \'%'
                                            . $text . '%\' )';
                    }
                    if ($builtin_items['company_sort_key']['use']) {
                        $sub_conditions[] = '( col_company_sort_key LIKE \'%'
                                            . $text . '%\' )';
                    }
                    if ($builtin_items['email_address']['use']) {
                        $sub_conditions[] = '( col_email_address LIKE \'%'
                                            . $text . '%\' )';
                    }
                    $conditions[] = '( ' . implode(' OR ', $sub_conditions)
                                    . ' )';
                }
            }
        }
        $conditions[]
            = "( col_email_address IS NOT NULL ) AND ( col_email_address <> '' )";
        $conditions = array_merge($address_conditions, $conditions);
        $condition = implode(' AND ', $conditions);

        $datas = $book->listDatasByPronunciationFast($offset, $limit,
            $condition);

        // n件ナビゲーション情報を取得する
        $data_count = $book->countDatas($condition);
        $params = [
            'bid'        => $bid,
            'func'       => $func,
            'cidx'       => $cidx,
            "selectType" => $selectType
        ];
        $view_set = $controller_util->makeNaviInformation($offset, $limit,
            $data_count, $params);

        // 候補ユーザー情報一覧を生成する
        foreach (array_keys($datas) as $user_id) {
            $data =& $datas[$user_id];
            $user_id = $prefix . $user_id;
            $display_name = $data['subject'];
            $email_address = $data['email_address'];
            $company_name = $data['company_name'];

            $candidate_users[$user_id] = [
                'uid'           => $user_id,
                'display_name'  => $display_name,
                'email_address' => $email_address,
                'company_name'  => $company_name
            ];
        }

        $t->assign('view_set', $view_set);
    }
} elseif (0 == strlen($bid)) {
    require_once('grn/org_util.csp');
    require_once('grn/org_tree.csp');
    require_once('grn/uum_search.csp');
    $uum_search = new GRN_Uum_Search();
    $org_id = $s_oid;

    $page_name = cb_get_pagename();

    $util = GRN_OrgTreeUtil::getInstance();
    $tree =& $util->getTree($page_name);

    if ((array_key_exists('top', $G_INPUT) && $G_INPUT['top'])
        || is_null($tree->getRoot())
    ) {
        $tree->initialize();
        $org_id = null;
    }
    $tree->setSelectedNode($org_id);
    $util->setTree($page_name, $tree);
    $org = $tree->getRoot();

    $t->assign('org_id', $org_id);
    $t->assign('page_name', $page_name);
    $t->assign('org', $org);

    // ユーザー名簿ブック
    $bid = null;
    if ( ! ($book =& $book_manager->getUserListBook())) {
        cb_throw_error(E_GRN_ADDRESS_USER_LIST_BOOK_NOT_FOUND);
    }

    // ユーザー一覧を取得する
    $condition = null;
    $post_condition = false;
    $users = [];
    if ('search' == $func) {
        $builtin_items = $view_util->listBuiltinItems($book);
        require_once('fw/string_util.csp');
        $texts = cb_parse_search_text($st);
        if (0 < count($texts)) {
            foreach ($texts as $text) {
                $text = $dbconn->escapeLike($text);
                $sub_conditions = [];

                $sub_conditions[] = '( tab_cb_user.col_display_name LIKE \'%'
                                    . $text . '%\' )';
                $sub_conditions[] = '( tab_cb_user.col_nickname LIKE \'%'
                                    . $text . '%\' )';
                if ($builtin_items['foreign_key']['use']
                    && $builtin_items['foreign_key']['show']
                ) {
                    $sub_conditions[] = '( tab_cb_user.col_foreign_key LIKE \'%'
                                        . $text . '%\' )';
                }
                if ($builtin_items['sort_key']['use']
                    && $builtin_items['sort_key']['show']
                ) {
                    $sub_conditions[]
                        = '( tab_cb_user.col_normalized_sort_key LIKE \'%'
                          . cb_normalize_sort_key($text) . '%\' )';
                }
                if ($builtin_items['email_address']['use']
                    && $builtin_items['email_address']['show']
                ) {
                    $sub_conditions[]
                        = '( tab_cb_user.col_email_address LIKE \'%' . $text
                          . '%\' )';
                }
                if ($builtin_items['post']['use']
                    && $builtin_items['post']['show']
                ) {
                    $sub_conditions[] = '( tab_grn_userinfo.col_post LIKE \'%'
                                        . $text . '%\' )';
                    $post_condition = true;
                }
                //--
                $extend_condition = 'r.col_user=tab_cb_user._id'
                                    . ' AND i.col_use=1 AND i.col_type<>"password"'
                                    . ' AND i.col_show=1'
                                    . ' AND i.col_search=1';

                $extend_query
                    = "((SELECT GROUP_CONCAT(r.col_string SEPARATOR ' ')"
                      . " FROM tab_grn_itemuserrelation r INNER JOIN tab_grn_useritem i ON r.col_item=i._id"
                      . " WHERE " . $extend_condition . ") LIKE '%" . $text
                      . "%')";

                $sub_conditions[] = $extend_query;
                //--
                $conditions[] = '( ' . implode(' OR ', $sub_conditions) . ' )';
            }
        }
        $conditions[]
            = "( tab_cb_user.col_email_address IS NOT NULL ) AND ( tab_cb_user.col_email_address <> '' )";
        $conditions = array_merge($user_list_conditions, $conditions);
        $condition = implode(' AND ', $conditions);
        if (0 == $org_id) {
            // 全体
            $order_by = 'col_position, _id';
            if ($post_condition) {
                $users = $uum_search->getUserInfos(0, -1, $order_by,
                    $condition);
            } else {
                $users = $uum->getUsers(0, -1, $order_by, $condition);
            }
        }
    } else {
        $condition = implode(' AND ', $user_list_conditions);
    }

    if (0 < strlen($org_id)) {
        if (0 < $org_id) {
            // 組織の存在確認
            if ( ! $uum->getGroup($org_id)) {
                // Group Not Found
                require_once('grn/error_code.csp');
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);

            }

            // 組織に所属するユーザー
            $order_by = 'tab_cb_user.col_position, tab_cb_user._id';
            if ($post_condition) {
                $users = $uum_search->getGroupUserInfos($org_id, 0, -1,
                    $order_by, $condition);
            } else {
                $users = $uum->getGroupUsers($org_id, 0, -1, $order_by,
                    $condition);
            }
        } elseif (0 > $org_id) {
            // 組織に未所属のユーザー
            $order_by = 'tab_cb_user.col_position, tab_cb_user._id';
            if ($post_condition) {
                $users = $uum_search->getNoGroupUserInfos(0, -1, $order_by,
                    $condition);
            } else {
                $users = $uum->getNoGroupUsers(0, -1, $order_by, $condition);
            }
        }
    }

    // 候補ユーザー情報一覧を生成する
    foreach ($users as $user_id => $user) {
        $user_id = 'u' . $user_id;

        $display_name = $uum->getOnlyOneNameByUserObject($user);
        $email_address = $user->get('email_address');
        if (0 < strlen($display_name) && 0 < strlen($email_address)) {
            $candidate_users[$user_id] = [
                'uid'           => $user_id,
                'display_name'  => $display_name,
                'email_address' => $email_address
            ];
        }
    }

    // グループ選択UIの組織階層を取得する
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    //$tree_of_groups = $uum_util->getGroupSelectionTree( $s_oid );

    $t->assign('select_organization_id', $org_id);
    //$t->assign( 'organization', $tree_of_groups );
}
$session->set('selected_users', $selected_users);
$t->assign('form_name', $form_name);
$t->assign('tag_name', $tag_name);
$t->assign('func', $func);
$t->assign('book_id', $bid);
$t->assign('search_text', $st);
$t->assign('books', $books_for_view);
$t->assign('access', $access_for_view);
$t->assign('candidate_users', $candidate_users);
$t->assign('selected_users', $selected_users);
$t->assign('builtin_items', $builtin_items);
$t->assign('selectType', $selectType);
////////////////////////////////////////////////////////////////


// Smartyにページタイトルを割り当てる
$page_title = cb_msg('grn.address', 'mail_address_index');
$t->assign('page_title', $page_title);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');

