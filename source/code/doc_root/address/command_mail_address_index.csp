<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    $bid = null;
    global $G_INPUT;
    if (array_key_exists('bid', $G_INPUT)) {
        $bid = $G_INPUT['bid'];
    }
    $selectType = cb_at($G_INPUT, "selectType", "default");
    // アドレス帳を取得する
    require_once('address/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Address_Application $app */
    $app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
    if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
        cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
    }
    $book_manager =& $app->getBookManager();

    // ログインユーザーを取得する
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');
    $login =& $uum->getLoginUser();
    if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }
    $login_id = $login->getOID();

    // アドレス帳の設定を取得する
    require_once('address/config.csp');
    $config_manager = GRN_Address_ConfigManager::getInstance();
    $system_config =& $config_manager->getSystemConfig();
    $personal_config =& $config_manager->getPersonalConfig($login);
    require_once('grn/ui.csp');
    $ui_config_manager = GRN_UIConfigManager::getInstance();
    $ui_config =& $ui_config_manager->getUserConfig($login);

    // 個人アドレスブックを取得する
    if ( ! ($private_address_book
        =& $book_manager->getPrivateAddressBookByUserId($login_id))
    ) {
        if ( ! ($private_address_book
            =& $book_manager->addPrivateAddressBook('cyde', $login_id, []))
        ) {
            cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
        }
    }

    // 使用権限を取得する
    require_once('address/access.csp');
    $access_manager = GRN_Address_AccessManager::getInstance();
    if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
        assert('FALSE');
    }

    // ダイナミックロールを取得する
    $dynamic_roles = $uum->listGrantedRoles();

    // 共有アドレスブック一覧を取得する
    $shared_address_books = $book_manager->listSharedAddressBooks();

    $allowed_books = [];
    if (0 < count($shared_address_books)) {
        // アクセス可能な共有アドレスブック一覧を取得する
        $rows = [];
        foreach (array_keys($shared_address_books) as $book_id) {
            $book =& $shared_address_books[$book_id];
            $rows[$book_id] =& $book->getRow();
        }
        $authorities = ['browse'];
        $allowed_books = $access_manager->pickAllowedObjects($rows, $login,
            $dynamic_roles, $authorities);
    }

    // セッションから選択ユーザーを取得する
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session
        =& $session_manager->getSession('address/mail_address_index');
    $selected_users = $session->get('selected_users');
    if ( ! is_array($selected_users)) {
        $selected_users = ['to' => [], 'cc' => [], 'bcc' => []];
    }

    // GET/POSTされたパラメータを取得する
    $func = @ $G_INPUT['func'];
    $select_field_to = false;
    $select_field_cc = false;
    $select_field_bcc = false;
    $select_field_forwardTo = false;
    $b_search = false;
    switch ($func) {
        case 'add_search_users_forwardTo':
            $select_field_forwardTo = true;
        case 'add_search_users_to':    // ユーザーの追加
            $select_field_to = true;
        case 'add_search_users_cc':    // ユーザーの追加
            $select_field_cc = true;
        case 'add_search_users_bcc':    // ユーザーの追加
            $select_field_bcc = true;
            $func = 'search';
            $b_search = true;
        case 'add_users_forwardTo':
            $select_field_forwardTo = $b_search ? $select_field_forwardTo
                : true;
        case 'add_users_to':           // ユーザーの追加
            $select_field_to = $b_search ? $select_field_to : true;
        case 'add_users_cc':           // ユーザーの追加
            $select_field_cc = $b_search ? $select_field_cc : true;
        case 'add_users_bcc':           // ユーザーの追加
            $select_field_bcc = $b_search ? $select_field_bcc : true;
            if ('add_users' == $func) {
                $func = 'browse';
            }
            require_once('grn/multi_select_utility.csp');
            $G_INPUT = grn_deploy_selected_users('selected_users_c_uid',
                'c_uid', $G_INPUT);
            $c_uid = isset($G_INPUT['c_uid']) && is_array($G_INPUT['c_uid'])
                ? $G_INPUT['c_uid'] : [];

            if ($select_field_to && $select_field_cc && $select_field_bcc) {
                $field = 'to';
            } elseif ($select_field_cc && $select_field_bcc) {
                $field = 'cc';
            } else {
                $field = 'bcc';
            }

            if ($select_field_forwardTo) {
                $field = "forwardTo";
            }

            foreach ($c_uid as $user_id) {
                if (0 == strlen($user_id)) {
                    continue;
                }

                switch ($user_id{0}) {
                    case 'u':   // ユーザー名簿
                        $user =& $uum->getUser(substr($user_id, 1));
                        if ( ! is_object($user) || ! is_a($user, 'CB_User')) {
                            break;
                        }

                        // 選択ユーザー情報一覧を生成する
                        $display_name = $user->get('display_name');
                        $email_address = $user->get('email_address');
                        if (0 < strlen($display_name)
                            && 0 < strlen($email_address)
                        ) {
                            $selected_users[$field][$user_id] = [
                                'uid'           => $user_id,
                                'display_name'  => $display_name,
                                'email_address' => $email_address,
                                'raw_address'   => false
                            ];
                        }
                        break;
                    case 'a':   // アドレス帳
                        // IDを取得する
                        $id = explode('.', substr($user_id, 1));
                        if (is_array($id) && 1 < count($id)) {
                            list($book_id, $card_id) = $id;
                        } else {
                            $book_id = -1;
                            $card_id = $id[0];
                        }

                        // 使用権限を評価する
                        $authorities = ['private_address', 'shared_address'];
                        $security_model
                            = $access_manager->getSecurityModel($row);
                        $access = $access_manager->evaluateAccess($row,
                            $login, $dynamic_roles, $authorities,
                            $security_model);

                        if (0 > $book_id) {
                            // 個人アドレス帳の使用権限を評価する
                            $authorities = ['private_address'];
                            if ( ! $access_manager->isAllowedAccess($access,
                                $authorities, $security_model)
                            ) {
                                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
                            }

                            $book =& $private_address_book;
                        } else {
                            // 共有アドレス帳の使用権限を評価する
                            $authorities = ['shared_address'];
                            if ( ! $access_manager->isAllowedAccess($access,
                                $authorities, $security_model)
                            ) {
                                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
                            }

                            if ( ! array_key_exists($book_id, $allowed_books)) {
                                cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_BROWSE);
                            }
                            $book =& $shared_address_books[$book_id];
                        }

                        // アドレスを取得する
                        if ( ! ($data =& $book->getData($card_id))) {
                            cb_throw_error(E_GRN_ADDRESS_CARD_NOT_FOUND);
                        }

                        // 選択ユーザー情報一覧を生成する
                        $display_name = $data->getProperty('subject');
                        $email_address = $data->getProperty('email_address');
                        if (0 < strlen($display_name)
                            && 0 < strlen($email_address)
                        ) {
                            $selected_users[$field][$user_id] = [
                                'uid'           => $user_id,
                                'display_name'  => $display_name,
                                'email_address' => $email_address,
                                'raw_address'   => false
                            ];
                        }
                        break;
                    default:
                        assert('FALSE');
                }
            }
            $session->set('selected_users', $selected_users);
            break;
        case 'remove_search_users_forwardTo':
            $select_field_forwardTo = true;
        case 'remove_search_users_to':    // ユーザーの削除
            $select_field_to = true;
        case 'remove_search_users_cc':    // ユーザーの削除
            $select_field_cc = true;
        case 'remove_search_users_bcc':    // ユーザーの削除
            $select_field_bcc = true;
            $func = 'search';
            $b_search = true;
        case 'remove_users_forwardTo' :
            $select_field_forwardTo = $b_search ? $select_field_forwardTo
                : true;
        case 'remove_users_to':    // ユーザーの削除
            $select_field_to = $b_search ? $select_field_to : true;
        case 'remove_users_cc':    // ユーザーの削除
            $select_field_cc = $b_search ? $select_field_cc : true;
        case 'remove_users_bcc':    // ユーザーの削除
            $select_field_bcc = $b_search ? $select_field_bcc : true;

            if ('remove_users' == $func) {
                $func = 'browse';
            }

            if ($select_field_to && $select_field_cc && $select_field_bcc) {
                $field = 'to';
            } elseif ($select_field_cc && $select_field_bcc) {
                $field = 'cc';
            } else {
                $field = 'bcc';
            }

            if ($select_field_forwardTo) {
                $field = "forwardTo";
            }
            require_once('grn/multi_select_utility.csp');
            $G_INPUT = grn_deploy_selected_users('selected_users_s_uid_'
                                                 . $field, 's_uid_' . $field,
                $G_INPUT);
            $s_uid = isset($G_INPUT['s_uid_' . $field]) ? $G_INPUT['s_uid_'
                                                                   . $field]
                : false;
            if (is_array($s_uid)) {
                foreach ($s_uid as $user_id) {
                    if (array_key_exists($user_id, $selected_users[$field])) {
                        unset($selected_users[$field][$user_id]);
                    }
                }
                $session->set('selected_users', $selected_users);
            }
            break;
        case 'search':  // 検索
            $st = null;
            if (array_key_exists('st', $G_INPUT)) {
                $st = $G_INPUT['st'];
            }
            $session->set('search_text' . $bid, $st);
            break;
        default:
            break;
    }

    if ($func) {
        $params = [
            'bid'        => $bid,
            's_oid'      => $G_INPUT['s_oid'],
            'func'       => $func,
            'selectType' => $selectType
        ];
    } else {
        $session->set('selected_users', null);
        $params = [
            'bid'        => $G_INPUT['bid'],
            'selectType' => $selectType
        ];
    }

    cb_redirect('address/mail_address_index', $params);

}

