<?php

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

////////////////////////////////////////////////////////////////

global $G_INPUT;

// GET/POSTされたパラメータを取得する
$gid = null;
$users = null;
if (array_key_exists('gid', $G_INPUT)) {
    $gid = $G_INPUT['gid'];
    if (strpos($gid, ',')) {
        $users = substr($gid, strpos($gid, ',') + 1);
        $gid = substr($gid, 0, strpos($gid, ','));
    }
}

// アドレス帳を取得する
require_once('address/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
/** @var GRN_Address_Application $app */
$app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
    cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
}

$application_id = $app->getApplicationId();

$book_manager =& $app->getBookManager();

// ログインユーザーを取得する
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}
$login_id = $login->getOID();

$selected_item_list = false;

// 組織IDを取得する
if ('selected' == $gid) {
    // Sessionから選択したリストを取得
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session
        =& $session_manager->getSession('grn.common_multiple_user_select');
    if ($session) {
        $selected_item_list = $session->get($application_id);
    }

    if ( ! $selected_item_list) {
        // 優先する組織から取得する
        $group = $uum->getUserPrimaryGroup($login_id);
        $gid = ($group === false) ? -1 : $group->getOID();
    } else {
        $gid = 'selected';
    }
} elseif (0 == strlen($gid)) {
    // 優先する組織から取得する
    $group = $uum->getUserPrimaryGroup($login_id);
    $gid = ($group === false) ? -1 : $group->getOID();
} elseif ('m' == $gid{0}) {
    // Myグループから取得する
    $group = &$uum->getMyGroup(substr($gid, 1));
    if ( ! is_object($group) || ! is_a($group, 'GRN_MyGroup')) {
        cb_throw_error(E_GRN_MYGROUP_NOT_FOUND);
    }
} elseif (0 >= $gid) {
    // 全体を取得する
    $gid = -1;
} else {
    // 組織から取得する
    $group = &$uum->getGroup($gid);
    if ( ! is_object($group) || ! is_a($group, 'CB_Group')) {
        cb_throw_error(E_GRN_GROUP_NOT_FOUND);
    }
}

// アドレス帳の設定を取得する
require_once('address/config.csp');
$config_manager = GRN_Address_ConfigManager::getInstance();
$system_config =& $config_manager->getSystemConfig();
$personal_config =& $config_manager->getPersonalConfig($login);
require_once('grn/ui.csp');
$ui_config_manager = GRN_UIConfigManager::getInstance();
$ui_config =& $ui_config_manager->getUserConfig($login);

// User icon setting
require_once('grn/controller.csp');
$imageIcon = GRN_ControllerUtil::getUserIconFormat($login);
$t->assign('imageIcon', $imageIcon);

// 使用権限を取得する
require_once('address/access.csp');
$access_manager = GRN_Address_AccessManager::getInstance();
if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
    assert('FALSE');
}

// ダイナミックロールを取得する
$dynamic_roles = $uum->listGrantedRoles();

// 使用権限を評価する
$authorities = ['private_address', 'shared_address'];
$security_model = $access_manager->getSecurityModel($row);
$access = $access_manager->evaluateAccess($row, $login, $dynamic_roles,
    $authorities, $security_model);

// 個人アドレス帳の使用権限を評価する
$authorities = ['private_address'];
$access_for_view['private_address'] = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

// 共有アドレス帳の使用権限を評価する
$authorities = ['shared_address'];
$access_for_view['shared_address'] = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

require_once('address/view_util.csp');
$view_util = GRN_Address_ViewUtil::getInstance();

$books_for_view = [];
if ($access_for_view['shared_address']) {
    // 共有アドレスブック一覧を取得する
    $books = $book_manager->listSharedAddressBooks();

    if (0 < count($books)) {
        // 閲覧権限を持つ共有アドレスブック一覧を取得する
        $rows = [];
        foreach (array_keys($books) as $book_id) {
            $book =& $books[$book_id];
            $rows[$book_id] =& $book->getRow();
        }
        $authorities = ['browse'];
        $allowed_books = $access_manager->pickAllowedObjects($rows, $login,
            $dynamic_roles, $authorities);

        // 共有アドレスブック情報一覧を取得する
        $books_for_view = $view_util->listBooks($books, $allowed_books);
    }
}

// ユーザー名簿ブックを取得する
if ( ! ($book =& $book_manager->getUserListBook())) {
    cb_throw_error(E_GRN_ADDRESS_USER_LIST_BOOK_NOT_FOUND);
}

// 組み込み項目情報一覧を取得する
$builtin_items = $view_util->listBuiltinItems($book);

// カスタマイズ項目情報一覧を取得する
$extended_items = $view_util->listExtendedItems($book);

// 一覧表示フラグを取得する
$personal_config->getDisplayFlag($book, $builtin_items, $extended_items);

// n件ナビゲーション情報を取得する
$controller_util = new GRN_ControllerUtil();
$offset = $controller_util->getNaviStartPosition();
$controller_util->setNaviStartPosition($offset);
$limit = $ui_config->getListMax();

// ユーザー情報一覧を取得する
if (is_array($selected_item_list)) {
    // 複数ユーザー選択
    $selected_uids = [];
    foreach ($selected_item_list as $selected_item) {
        if (is_array($selected_item)
            && array_key_exists('type', $selected_item) === true
        ) {
            if ($selected_item['type'] != 'user') {
                continue;
            }

            $selected_uids[$selected_item['value']] = $selected_item['value'];
        }
    }
    $datas = $book->listDatasByUsersId($selected_uids, $offset, $limit + 1);
} elseif (-1 == $gid) {
    $datas = $book->listDatas($offset, $limit + 1);
} else {
    if ('m' == $gid{0}) {
        $order_by
            = 'tab_grn_mygroupuserrelation.col_list_index, tab_cb_user.col_position, tab_cb_user._id';
        $datas = $book->listDatasByGroupId($gid, $offset, $limit + 1,
            $order_by);
    } else {
        if ( ! is_null($users)) {
            $datas = $book->listDatasByGroupId($G_INPUT['gid'], $offset,
                $limit + 1);
        } else {
            $datas = $book->listDatasByGroupId($gid, $offset, $limit + 1);
        }
    }
}
$isExistsNextPage = count($datas) > $limit;
if ($isExistsNextPage) {
    array_pop($datas);
}

$users_id = array_keys($datas);
// fix bug GRB-15150
require_once('fw/i18n/base.csp');
// cache data for user list
CB_UserBaseSetting::loadAndCache($users_id);
CB_UserLocaleSetting::loadAndCache($users_id);
require_once('presence/logic.csp');
GRN_Presence_Logic::getInstance()->loadAndCache($users_id);
$uum->getUsersGroupsInfo($users_id);
if (defined('ON_FOREST')) {
    // get col_slash in tab_cb_user
    $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
        $login, null, true);
} else {
    $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id,
        $login);
}

$datas_for_view = $view_util->listDatas($datas, null, $builtin_items,
    $extended_items, $users_info);

$params = ['gid' => $gid];
$view_set = $controller_util->makeSimpleNaviInformation($offset, $limit,
    count($datas_for_view), $isExistsNextPage, $params);

// 最後に開いたブックを記録する
$personal_config->setLastOpenedBook($book);

// リソース一覧を生成する
$resources = ['application_name' => $app->getName()];

$timestamp = new CB_TimeStampEx();
$datetime = $timestamp->getDateTime();
$datetime->hour = 0;
$datetime->minute = 0;
$datetime->second = 0;
$timestamp->setDateTime($datetime);

//get presence info
if (count($datas_for_view) > 0) {
    require_once('presence/access_logic.csp');
    $access_logic = GRN_Presence_Access_Logic::getInstance();
    $access_logic->loadAndCacheAccessForPresence(array_keys($datas_for_view),
        $login_id);
}

//get presence info
$presence_logic = GRN_Presence_Logic::getInstance();
foreach (array_keys($datas_for_view) as $id) {
    $datas_for_view[$id]['presence'] = $presence_logic->getPresence($id,
        $users_info);
}
//save current page
$presence_logic->setPreviousPage('address/user_list', $params);

// add photo image path to user info
if ($imageIcon) {
    $users_info = GRN_ControllerUtil::addPhotoUrlForMultiUserByUsersInfo($users_info,
        GRN_ControllerUtil::getUserProfilePhotoLargeSize());
    $t->assign('iconSize', GRN_ControllerUtil::ICON_SIZE_LARGE);
}

$t->assign('app_id', $application_id);
$t->assign('unix_timestamp', $timestamp->unix_ts);
$t->assign('loginId', $login_id);
$t->assign('selected_id', $gid);
$t->assign('access', $access_for_view);
$t->assign('books', $books_for_view);
$t->assign('cards', $datas_for_view);
$t->assign('builtin_items', $builtin_items);
$t->assign('extended_items', $extended_items);
$t->assign('view_set', $view_set);
$t->assign('resources', $resources);
$t->assign('users_info', $users_info);

////////////////////////////////////////////////////////////////

// Smartyにページタイトルを割り当てる
$page_title = grn_get_page_display_name('address/user_list');
$t->assign('page_title', $page_title);

// Smartyにサイトポジションを割り当てる
$page_info = ['user_list' => null];
$site_position = $controller_util->makeSitePosition('address/', $page_info);
$t->assign('site_position', $site_position);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');


