<?php

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

////////////////////////////////////////////////////////////////

// アドレス帳を取得する
require_once('address/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
/** @var GRN_Address_Application $app */
$app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
    cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
}
$book_manager =& $app->getBookManager();

// ログインユーザーを取得する
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}
$login_id = $login->getOID();

// アドレス帳の設定を取得する
require_once('address/config.csp');
$config_manager = GRN_Address_ConfigManager::getInstance();
$system_config =& $config_manager->getSystemConfig();
$personal_config =& $config_manager->getPersonalConfig($login);
require_once('grn/ui.csp');
$ui_config_manager = GRN_UIConfigManager::getInstance();
$ui_config =& $ui_config_manager->getUserConfig($login);

// GET/POSTされたパラメータを取得する
$bid = null;


// n件移動中かをチェックする
if (1 == @ $G_INPUT['sf']) {
    // セッションからパラメータを取得する
    $session =& $app->getSession();
    $search_for_view = $session->get('search_info');
    $st = $search_for_view['text'];
    $se = $search_for_view['sensitive'];
    $bid = $search_for_view['bid'];
} else {
    if (array_key_exists('bid', $G_INPUT)) {
        $bid = $G_INPUT['bid'];
    }
    // GET/POSTされたパラメータを取得する
    $st = null;
    if (array_key_exists('st', $G_INPUT)) {
        $st = $G_INPUT['st'];
    }
    $se = null;
    if (array_key_exists('se', $G_INPUT)) {
        $se = $G_INPUT['se'];
    }
}
if (0 == strlen($bid)) {
    $bid = $personal_config->getLastOpenedBook();

    if (0 == strlen($bid)) {
        cb_throw_error(E_GRN_ADDRESS_INVALID_BOOK_ID);
    }
}
require_once('fw/string_util.csp');
$st = cb_trim($st);
$search_for_view = [];
$search_for_view['text'] = $st;
$search_for_view['sensitive'] = $se;
$search_for_view['bid'] = $bid;

if (0 < strlen($st)) {
    $st = cb_parse_search_text($st);
}

// 使用権限を取得する
require_once('address/access.csp');
$access_manager = GRN_Address_AccessManager::getInstance();
if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
    assert('FALSE');
}

// ダイナミックロールを取得する
$dynamic_roles = $uum->listGrantedRoles();

// 使用権限を評価する
$authorities = ['private_address', 'shared_address'];
$security_model = $access_manager->getSecurityModel($row);
$access = $access_manager->evaluateAccess($row, $login, $dynamic_roles,
    $authorities, $security_model);

// 個人アドレス帳の使用権限を評価する
$authorities = ['private_address'];
$access_private_address = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

// 共有アドレス帳の使用権限を評価する
$authorities = ['shared_address'];
$access_shared_address = $access_manager->isAllowedAccess($access, $authorities,
    $security_model);

$books = [];
$allowed_books = [];
if ($access_shared_address) {
    // 共有アドレスブック一覧を取得する
    $books = $book_manager->listSharedAddressBooks();

    if (0 < count($books)) {
        // 閲覧権限を持つ共有アドレスブック一覧を取得する
        $rows = [];
        foreach (array_keys($books) as $book_id) {
            $book =& $books[$book_id];
            $rows[$book_id] =& $book->getRow();
        }

        $authorities = ['browse'];
        $allowed_books = $access_manager->pickAllowedObjects($rows, $login,
            $dynamic_roles, $authorities);
    }
}

if (0 < $bid || (0 > $bid && ! $access_private_address)) {
    // 共有アドレスブックの使用権限を評価する
    if ( ! $access_shared_address) {
        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
    }

    // 共有アドレスブックの閲覧権限を評価する
    if ( ! array_key_exists($bid, $allowed_books)) {
        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_BROWSE);
    }

    // 共有アドレスブックを取得する
    $book =& $books[$bid];
}
if (0 > $bid) {
    // 個人アドレスブックの使用権限を評価する
    if ( ! $access_private_address) {
        cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
    }

    // 個人アドレスブックを取得する
    if ( ! ($book =& $book_manager->getPrivateAddressBookByUserId($login_id))) {
        if ( ! ($book =& $book_manager->addPrivateAddressBook('cyde', $login_id,
            []))
        ) {
            cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
        }
    }
}

// 組み込み項目情報一覧を取得する
require_once('address/view_util.csp');
$view_util = GRN_Address_ViewUtil::getInstance();
$builtin_items = $view_util->listBuiltinItems($book);

// カスタマイズ項目情報一覧を取得する
$extended_items = $view_util->listExtendedItems($book);

// 一覧表示フラグを取得する
$personal_config->getDisplayFlag($book, $builtin_items, $extended_items);

$offset = 0;
$limit = $ui_config->getListMax();
$data_count = 0;
$datas_for_view = [];
require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();
$isExistsNextPage = false;
if (is_array($st) && ! empty($st)) {
    // n件ナビゲーション情報を取得する
    $offset = $controller_util->getNaviStartPosition();
    $controller_util->setNaviStartPosition($offset);

    $datas_for_view = $book->listFTSDatasByPronunciationFast($offset,
        $limit + 1, $st, $se, $builtin_items);
    $isExistsNextPage = count($datas_for_view) > $limit;
    if ($isExistsNextPage) {
        array_pop($datas_for_view);
    }
}

// リソース一覧を生成する
$resources = ['application_name' => $app->getName()];

// ブックオプション一覧を取得する
$book_options = $view_util->listBookOptions($allowed_books, $book,
    $access_private_address, false, $resources);

// n件ナビゲーション情報を取得する
$view_set = $controller_util->makeSimpleNaviInformation($offset, $limit,
    count($datas_for_view), $isExistsNextPage, ['sf' => 1]);

$t->assign('book_id', $bid);
$t->assign('cards', $datas_for_view);
$t->assign('builtin_items', $builtin_items);
$t->assign('extended_items', $extended_items);
$t->assign('book_options', $book_options);
$t->assign('view_set', $view_set);
$t->assign('search', $search_for_view);
$t->assign('resources', $resources);

// セッションにパラメータを割り当てる
$session =& $app->getSession();
$session->set('search_info', $search_for_view);

////////////////////////////////////////////////////////////////

// Smartyにページタイトルを割り当てる
$page_title = grn_get_page_display_name('address/search');
$t->assign('page_title', $page_title);

// Smartyにサイトポジションを割り当てる
$page_info = [
    'index'  => ['sf' => 1],
    'search' => null
];
$site_position = $controller_util->makeSitePosition('address/', $page_info);
$t->assign('site_position', $site_position);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');


