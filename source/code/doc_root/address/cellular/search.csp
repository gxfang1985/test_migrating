<?php
// Smarty をインスタンス化
require_once('cellular/smarty.csp');
$smarty = new GRN_Cellular_Smarty;
// ページタイトル
$smarty->assign('pagetitle', grn_get_current_page_display_name());
// パス情報
$smarty->assign('pagepath', $G_pagepath);

require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();
require_once('address/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
require_once('address/access.csp');
$access_manager = GRN_Address_AccessManager::getInstance();
if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
    assert('FALSE');
}

require_once('address/config.csp');
$config_manager = GRN_Address_ConfigManager::getInstance();
require_once('address/view_util.csp');
$view_util = GRN_Address_ViewUtil::getInstance();

// アドレス帳を取得する
/** @var GRN_Address_Application $app */
$app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
$book_manager =& $app->getBookManager();

// ログインユーザー
$login_id = $G_login_user->getOID();

// config
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$cellular_app =& $locator->getInstance('cellular');
$user_config =& $cellular_app->getUserConfig($G_login_user);

$width = $user_config->getSubjectWidth();

$smarty->assign('width', $width);

// アドレス帳の設定を取得する
$system_config =& $config_manager->getSystemConfig();
$personal_config =& $config_manager->getPersonalConfig($G_login_user);

// ダイナミックロールを取得する
$dynamic_roles = $G_uum->listGrantedRoles();

$authorities = ['private_address', 'shared_address'];
$security_model = $access_manager->getSecurityModel($row);
$access = $access_manager->evaluateAccess($row, $G_login_user,
    $dynamic_roles, $authorities, $security_model);

// 個人アドレス帳の使用権限を評価する
$authorities = ['private_address'];
$access_for_view['private_address'] = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

// 共有アドレス帳の使用権限を評価する
$authorities = ['shared_address'];
$access_for_view['shared_address'] = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

//ヒントを表示するかどうか判断フラグ？
$start_flag = true;

//Pulldownでの次へ、前への移動
$temp_bid = (isset($G_INPUT['bid'])) ? $G_INPUT['bid'] : null;
if (mb_substr($temp_bid, 0, 1) == 'm') {
    $menu_listing = true;
    $bid = 0;
    $menu_pg = mb_substr($temp_bid, 1);
} else {
    $bid = $temp_bid;
    $menu_pg = (isset($G_INPUT['me_pg'])) ? $G_INPUT['me_pg'] : 1;
}

// 個人アドレスブックを取得する
if ( ! ($book =& $book_manager->getPrivateAddressBookByUserId($login_id))) {
    if ( ! ($book =& $book_manager->addPrivateAddressBook('cyde', $login_id,
        []))
    ) {
        cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
    }
}

// 共有アドレスブック一覧を取得する
$books = [];
$allow_books = [];
if ($access_for_view['shared_address']) {
    // 共有アドレスブック一覧を取得する
    $books = $book_manager->listSharedAddressBooks();
    if (0 < count($books)) {

        $rows = [];
        foreach (array_keys($books) as $book_id) {
            $rows[$book_id] =& $books[$book_id]->getRow();
        }
        $authorities = ['browse'];
        $accesses = $access_manager->evaluateAccesses($rows, $G_login_user,
            $dynamic_roles, $authorities);

        foreach ($accesses as $book_id => $access) {
            $row =& $rows[$book_id];
            $security_model = $access_manager->getSecurityModel($row);
            if ($access_manager->isAllowedAccess($accesses[$book_id],
                $authorities, $security_model)
            ) {
                $allow_books[$book_id] =& $row;
            }
        }
    }
}

if ($bid) {
    // request パラメータを取得する
    $search_for_view = [];
    $search_for_view['s_name'] = (isset($G_INPUT['s_name']))
        ? $G_INPUT['s_name'] : null;

    if (0 > $bid) {
        // 個人アドレスブックの使用権限を評価する
        if ( ! $access_for_view['private_address']) {
            cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS);
        }
    }
    if (0 < $bid) {
        // 共有アドレスブックの使用権限を評価する
        if ( ! $access_for_view['shared_address']) {
            cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
        }
        if ( ! array_key_exists($bid, $allow_books)) {
            cb_throw_error(E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS);
        }
        // 共有アドレスブックを取得する
        $book =& $books[$bid];
    }

    // n件ナビゲーション情報を取得する
    $offset = $controller_util->getNaviStartPosition();
    $controller_util->setNaviStartPosition($offset);
    $limit = (int)($user_config->getListMax() / 3);
//	$limit = 2;

//    $orders = array( GRN_ADDRESS_ORDER_SUBJECT,
//                     GRN_ADDRESS_ORDER_OID );

    if (0 < strlen($search_for_view['s_name'])) {
        $smarty->assign('search_str', $search_for_view['s_name']);
        require_once('fw/string_util.csp');
        $search_for_view['s_name']
            = cb_parse_search_text(cb_trim($search_for_view['s_name']));

        // 組み込み項目情報一覧を取得する
        $builtin_items = $view_util->listBuiltinItems($book);

        // アドレス情報一覧を取得する
        $data_count
            = $book->getFullTextSearchDataCount($search_for_view['s_name'],
            false, $builtin_items);
        $order_by = 'd.col_subject, d._id';
        $datas = $book->listFullTextSearchDatas($offset, $limit, $order_by,
            $search_for_view['s_name'], false, $builtin_items);

    } else {
        //search keyに何も入ってない場合すべてのリストを取得。
        $books_for_view = [];
        // ブックを取得する
        if (0 < $bid
            || (0 > $bid
                && false === $access_for_view['private_address'])
        ) {
            if (array_key_exists($bid, $allow_books)) {
                // 共有アドレスブックを取得する
                $book =& $books[$bid];
            } else {
                $indices = array_keys($allow_books);
                if (0 < count($indices)) {
                    // 表示順番が最初の共有アドレスブックを取得する
                    $bid = $indices[0];
                    $book =& $books[$bid];
                } else {
                    // 個人アドレスブックを取得する
                    $bid = -1;
                }
            }
            if (0 < $bid) {
                // 共有アドレスブックの閲覧、編集権限を評価する
                $book =& $books[$bid];
            }
        }
        if (0 > $bid) {
            if ($access_for_view['private_address']) {
                // 個人アドレスブックを取得する
                if ( ! ($book
                    =& $book_manager->getPrivateAddressBookByUserId($login_id))
                ) {
                    if ( ! ($book
                        =& $book_manager->addPrivateAddressBook('cyde',
                        $login_id, []))
                    ) {
                        cb_throw_error(E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND);
                    }
                }
            }
        }
        $data_count = $book->countDatas();

        // アドレス一覧を取得する
        $datas = $book->listDatas($offset, $limit);
    }

    $datas_for_view = $view_util->listDatas($datas, $bid);

    $book_data = [];
    foreach ($datas_for_view as $key => $value) {
        array_push($book_data, [
                'cid'     => $value['sso']['cid'],
                'subject' => $value['subject'],
                'tel'     => isset($value['personal_telephone_number'])
                    ?
                    $value['personal_telephone_number']
                    :
                    $value['company_telephone_number'],
                'email'   => isset($value['email_address'])
                    ? $value['email_address'] : null,
                'bid'     => $value['sso']['bid'],
            ]
        );
    }
    $view_set = $controller_util->makeNaviInformation($offset, $limit,
        $data_count);
    $start_flag = false;
}

// ブックオプション一覧を取得する
$book_options = [];
if ($access_for_view['private_address']) {
    $book_options[] = [
        'value'    => -1,
        'label'    => cb_msg('grn.address.cellular', 'private_address_book'),
        'selected' => -1 == $bid
    ];
}
$shared_book_options = $view_util->listBookOptions($allow_books, $book, false);
$book_options = array_merge($book_options, $shared_book_options);

$view_navi = (isset($view_set['navi'])) ? $view_set['navi'] : null;

$smarty->assign('navi', $view_navi);
$smarty->assign('book_data', (isset($book_data)) ? $book_data : null);

$smarty->assign('me_pg', $menu_pg);
$menu_count_per_page = 30;
$menu_count = count($book_options);


if ($menu_count <= $menu_count_per_page) {
    $smarty->assign('book_options', $book_options);
} else {
    $menu_page = isset($menu_pg) ? $menu_pg : 1;
    $menu_list_per_page = $menu_count_per_page - 2;

//    $total_pages = 0;
    if (($menu_count % ($menu_count_per_page - 2)) == 0) {
        $total_pages = $menu_count / ($menu_count_per_page - 2);
    } else {
        $total_pages = 1 + (int)($menu_count / ($menu_count_per_page - 2));
    }

    $menu_start_point = ($menu_page - 1) * $menu_list_per_page;
    $menu_end_point = $menu_page * $menu_list_per_page;

    $temp_menu = [];

    if ($menu_page != 1) {
        array_push($temp_menu, [
                'value' => 'm' . ($menu_page - 1),
                'label' => cb_msg('grn.cellular.common', 'link_back')
            ]
        );
    }
    for ($i = $menu_start_point; $i < $menu_end_point; $i++) {
        if ( ! isset($book_options[$i])) {
            continue;
        }
        array_push($temp_menu, $book_options[$i]);
    }

    if ($total_pages != $menu_page) {
        array_push($temp_menu, [
                'value' => 'm' . ($menu_page + 1),
                'label' => cb_msg('grn.cellular.common', 'link_next')
            ]
        );
    }

    $smarty->assign('book_options', $temp_menu);
}

$smarty->assign('start_flag', $start_flag);
$smarty->assign('bid', $bid);

$smarty->display(cb_get_pagename() . '.tpl');

