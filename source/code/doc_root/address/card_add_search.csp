<?php

cb_require_role('LoginUser');

global $G_INPUT;

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// パラメタリスト
// $keyword: 検索キーワード
$keyword = '';
// $target_form_name: 書き換えターゲットフォーム名
$target_form_name = '';
// $target_category_select_name: 書き換えカテゴリターゲットセレクトボックス名
$target_category_select_name = '';
// $target_item_select_name: 書き換えアイテムターゲットセレクトボックス名
$target_item_select_name = '';

$book_id = '';

$param_names = [
    'keyword',
    'target_form_name',
    'target_category_select_name',
    'target_item_select_name',
    'book_id'
];

$suffix = '';
foreach (array_keys($G_INPUT) as $input_key) {
    if (preg_match('#target_form_name(_.*)#', $input_key, $regs)
        && strlen($G_INPUT[$input_key]) > 0
    ) {
        $suffix = $regs[1];
    }
}
foreach ($param_names as $name) {
    if (array_key_exists($name . $suffix, $G_INPUT)) {
        $$name = $G_INPUT[$name . $suffix];
    }
}

$st = $keyword;
require_once('fw/string_util.csp');
$st = cb_trim($st);
if (0 < strlen($keyword)) {
    $st = cb_parse_search_text($keyword);
}
$item_options = [];

//--

// アドレス帳を取得する
require_once('address/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
/** @var GRN_Address_Application $app */
$app =& $app_locator->getInstance(GRN_ADDRESS_APPLICATION_ID);
if ( ! is_object($app) || ! is_a($app, 'GRN_Address_Application')) {
    cb_throw_error(E_GRN_APPLICATION_NOT_AVAILABLE);
}
$book_manager =& $app->getBookManager();

// ログインユーザーを取得する
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();
if ( ! is_object($login) || ! is_a($login, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}
$login_id = $login->getOID();

//--

// 使用権限を取得する
require_once('address/access.csp');
$access_manager = GRN_Address_AccessManager::getInstance();
if ( ! ($row =& $access_manager->getAbstractData(GRN_ADDRESS_AVAILABLE))) {
    assert('FALSE');
}

// ダイナミックロールを取得する
$dynamic_roles = $uum->listGrantedRoles();

// 使用権限を評価する
$authorities = ['private_address', 'shared_address'];
$security_model = $access_manager->getSecurityModel($row);
$access = $access_manager->evaluateAccess($row, $login, $dynamic_roles,
    $authorities, $security_model);

// 個人アドレス帳の使用権限を評価する
$authorities = ['private_address'];
$access_private_address = $access_manager->isAllowedAccess($access,
    $authorities, $security_model);

// 共有アドレス帳の使用権限を評価する
$authorities = ['shared_address'];
$access_shared_address = $access_manager->isAllowedAccess($access, $authorities,
    $security_model);

$books = [];
$allowed_books = [];
if ($access_shared_address) {
    // 共有アドレスブック一覧を取得する
    $books = $book_manager->listSharedAddressBooks();

    if (0 < count($books)) {
        // 閲覧権限を持つ共有アドレスブック一覧を取得する
        $rows = [];
        foreach (array_keys($books) as $bid) {
            $book =& $books[$bid];
            $rows[$bid] =& $book->getRow();
        }

        $authorities = ['browse'];
        $allowed_books = $access_manager->pickAllowedObjects($rows, $login,
            $dynamic_roles, $authorities);
    }
}

// --

if (0 < $book_id || (0 > $book_id && ! $access_private_address)) {
    // 共有アドレスブックの使用権限を評価する
    if ( ! $access_shared_address) {
        //cb_throw_error( E_GRN_ADDRESS_ACCESS_DENY_SHARED_ADDRESS );
        $t->assign('is_error', true);
    }

    // 共有アドレスブックの閲覧権限を評価する
    if ( ! array_key_exists($book_id, $allowed_books)) {
        //cb_throw_error( E_GRN_ADDRESS_ACCESS_DENY_BROWSE );
        $t->assign('is_error', true);
    }

    // 共有アドレスブックを取得する
    $book =& $books[$book_id];
}
if (0 > $book_id) {
    // 個人アドレスブックの使用権限を評価する
    if ( ! $access_private_address) {
        //cb_throw_error( E_GRN_ADDRESS_ACCESS_DENY_PRIVATE_ADDRESS );
        $t->assign('is_error', true);
    }

    // 個人アドレスブックを取得する
    if ( ! ($book =& $book_manager->getPrivateAddressBookByUserId($login_id))) {
        if ( ! ($book =& $book_manager->addPrivateAddressBook('cyde', $login_id,
            []))
        ) {
            //cb_throw_error( E_GRN_ADDRESS_PRIVATE_ADDRESS_BOOK_NOT_FOUND );
            $t->assign('is_error', true);
        }
    }
}

// 組み込み項目情報一覧を取得する
require_once('address/view_util.csp');
$view_util = GRN_Address_ViewUtil::getInstance();
$builtin_items = $view_util->listBuiltinItems($book);

// not search these items : image, route, map
$not_search_fields = ['image', 'route', 'map'];
foreach ($not_search_fields as $col) {
    if (array_key_exists($col, $builtin_items)) {
        $builtin_items[$col]['use'] = false;
    }
}

$datas_for_view = [];
if (0 < strlen($keyword)) {
    $order_by = 'd.col_subject, d._id';
    $se = false;
    $datas = $book->listFullTextSearchDatas(0, -1, $order_by, $st, $se,
        $builtin_items);
    $datas_for_view = $view_util->listDatas($datas, $book_id);

    $book_type = (0 > $book_id) ? 'privatebook' : 'sharedbook';
    foreach ($datas_for_view as $card_id => $card) {
        $item_options[] = [
            'value' => $card_id,
            'name'  => $card['subject'],
            'email' => $card['email_address'],
            'type'  => $book_type
        ];
    }
}

$t->assign('item_options', $item_options);

$t->assign('target_form_name', $target_form_name);
$t->assign('target_category_select_name', $target_category_select_name);
$t->assign('target_item_select_name', $target_item_select_name);

$t->display(cb_get_pagename() . '.tpl');


