<?php

use grn\schedule\ScheduleMemberLogic;

$facilities = [];
$default_group_name = cb_msg('grn/schedule', 'choice_facility_group');
$show_affiliation_group = false;

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

require_once('schedule/system_logic.csp');
$system_logic = GRN_Schedule_SystemLogic::getInstance();
$allow_all_facilities = $system_logic->getAllowAllFacilities();
if ($allow_all_facilities) {
    $facilities_tmp = $facility_logic->getOrderedFacilityPartInfoList();

    // 順番を保持するためにキーを取得
    $facilities_order = array_keys($facilities_tmp);

    $uum = cb_lwc_uum();
    $dynamic_roles = $uum->listGrantedRoles();

    $login = cb_get_login_user();

    require_once('schedule/access_logic.csp');
    $acc_logic = GRN_Schedule_Access_Logic::getInstance();
    $facilities_tmp = $acc_logic->evaluateAccessesById($login, $facilities_tmp,
        ['read'], $dynamic_roles, 'facility');

    foreach ($facilities_order as $key) {
        // アクセス権があったものだけ返す
        if (array_key_exists($key, $facilities_tmp)) {
            $facilities[$key] = $facilities_tmp[$key];
        }
    }
    $facilities = ScheduleMemberLogic::getInstance()
                                     ->getFacilitiesRender($facilities, true);

    $default_group_name = cb_msg('grn/schedule', 'facility_all');
    $show_affiliation_group = true;
}

$t->assign('all_facilities', $facilities);
$t->assign('default_group_name', $default_group_name);
$t->assign('show_affiliation_group', $show_affiliation_group);

// For tree
require_once('../../schedule/_view_util.csp');
$group_id = 'f';
$extra_node = true;
$tree_data
    = GRN_Schedule_Dropdown_Util::makeFacilityGroupsTreeMenu(cb_get_pagename(),
    $group_id, $extra_node);
$t->assign('fgroup_list', $tree_data['org']);
$t->assign('fgroup_selected_id', $tree_data['selected_id']);
$t->assign('ftree_name', cb_get_pagename());
$t->assign('ftree_async_page', "schedule/json/accessible_facility_tree");
