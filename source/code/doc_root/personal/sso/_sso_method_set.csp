<?php

//Get SSO Method ID
$sso_method_id = @ $G_INPUT['smid'];

//Get Display SSO Method & User SSO Method
require_once('grn/sso.csp');
$sso_service = GRN_SSO_Service::getInstance();
$sso_method = $sso_service->getSSOMethod($sso_method_id);

//Create Parameter Translation Map
$translation_map = [
    //SSO Method Infomation
    'smid'               => '_smid',                //SSO Method ID
    'said'               => 'application',          //SSO Application ID
    'display_name'       => 'display_name',         //Display Name
    'driver_type'        => 'driver_type',          //Driver Type
    'driver_settings'    => 'driver_settings',      //Driver Name
    'available_personal' => 'available_personal',   //Available Personal
    'available_window'   => 'available_window',     //Available Window
    'ctime'              => 'ctime',                //Create Time
    'creator_uid'        => 'creator',              //Creator ID
    'creator_name'       => 'creator_name',         //Creator Name
    'mtime'              => 'mtime',                //Modify Time
    'modify_uid'         => 'modifier',             //Modifier ID
    'modify_name'        => 'modifier_name',        //Modifier Name
];

//Do Parameter Translation
$sso_method_for_view = [];
foreach ($translation_map as $view_name => $model_name) {
    switch ($model_name) {
        case '_smid':
            $sso_method_for_view[$view_name] = $sso_method->getOID();
            break;
        case 'driver_settings':
            $driver_settings = $sso_method->get($model_name);
            if ($driver_settings) {
                $driver_settings = cb_unserialize($driver_settings,
                    ["allowed_classes" => false]);
            }
            $sso_method_for_view[$view_name] = $driver_settings;
            break;
        case 'creator':
        case 'modifier':
            $user = $sso_method->get($model_name);
            $sso_method_for_view[$view_name] = is_null($user) ? null
                : $user->getOID();
            break;
        default:
            $sso_method_for_view[$view_name] = $sso_method->get($model_name);
            break;
    }
}

//Replace By User Driver Settings
$user_sso_method = $sso_service->getUserDriverSettings($sso_method_id);
$sso_method_for_view['driver_settings']
    = $sso_service->replaceDriverSettings($user_sso_method,
    $sso_method_for_view['driver_settings']);

//Get Application Identifier List
require_once("grn/sso.csp");
$sso_service = GRN_SSO_Service::getInstance();
$app_identifier_list
    = $sso_service->getSSOIdentifierList($sso_method_for_view['said']);

//Get Application Locator for Application Name
require_once('grn/application.csp');
$app_locator = GRN_ApplicationLocator::instance();

//Create Parameter Translation Map
$translation_map_for_identifier = [
    'id'     => 'id',       //Application ID
    'title'  => 'title',    //Application Name
    'option' => [
        'label' => 'name',  //Identifier Name
        'value' => 'value', //Identifier Value
    ],
];

//Do Parameter Translation
$app_identifier_list_for_view = [];
foreach (array_keys($app_identifier_list) as $app_id) {
    $app_identifier_for_view = [];
    foreach ($translation_map_for_identifier as $view_name => $model_name) {
        switch ($view_name) {
            case 'id':
                $app_identifier_for_view[$view_name] = $app_id;
                break;
            case 'title':
                if ($app_id === 'uum' || $app_id === 'login') {
                    $app_identifier_for_view[$view_name] = cb_msg('grn.common',
                        $app_id);
                } else {
                    $app_identifier_for_view[$view_name]
                        = $app_locator->getName($app_id);
                }
                break;
            case 'option':
                foreach (
                    $app_identifier_list[$app_id] as $identifier_name =>
                    $identifier_value
                ) {
                    $app_identifier_for_view[$view_name][]
                        = [
                        'title' => $identifier_name,
                        'id'    => $identifier_value
                    ];
                }
                break;
        }
    }
    $app_identifier_list_for_view[$app_id] = $app_identifier_for_view;
}

//Assign Display Infomation
$t->assign('sso_method', $sso_method_for_view);
$t->assign('identifier', $app_identifier_list_for_view);

//var_dump($sso_method_for_view);
//die();

//-- set page title and site position

// page title
$page_title = grn_get_page_display_name('personal/sso/sso_method_set');
$t->assign('page_title', $page_title);

// site position
$t->assign(
    'site_position', [
        [
            'page' => "personal/sso/sso_method_list",
            'name' => grn_get_page_display_name('personal/sso/sso_method_list'),
            'sf'   => 1
        ],
        [
            'page' => "personal/sso/sso_method_view",
            'name' => grn_get_page_display_name('personal/sso/sso_method_view'),
            'smid' => $sso_method_id
        ],
        ['page' => "", 'name' => $page_title]
    ]
);


