<?php

/** @global $G_INPUT */
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    require_once('fw/i18n.csp');
    $i18n = CB_I18N::getInstance();

    require_once("grn/smarty.csp");
    require_once("SmartyValidate.class.php");
    require_once("fw/i18n/locale.csp");
    require_once("fw/i18n/system_config.csp");

    $target_name = "personal/i18n/config";
    $t = new GRN_Smarty();
    SmartyValidate::connect($t);
    SmartyValidate::register_form($target_name);

    global $G_container_base;
    /** @var CB_Uum $uum */
    $uum = $G_container_base->getInstance('uum');
    $login_user = $uum->getLoginUser();

    if (defined('ON_FOREST')) {
        // on Forest, users are not related to locales
        $locale_id = CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED;
    } else {
        if ( ! array_key_exists("locale", $G_INPUT)) {
            // Invalid. Do nothing.
            assert(false);
            cb_redirect('personal/common_list', ['id' => 'i18n']);
        }

        $locale_id = strlen($G_INPUT["locale"]) == 0
            ? CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED : $G_INPUT["locale"];

        // GRN35-872
        if ( ! isset($G_INPUT['timezone'])
             || ! CB_I18N::isAvailableTimezone($G_INPUT['timezone'])
        ) {
            require_once('fw/error_code.csp');
            cb_throw_error(E_COMMON_MISSING_TIMEZONE, null, null,
                ['timezone' => $G_INPUT['timezone']]);
        }

        CB_I18N::getInstance()
               ->setUserTimezone($login_user, $G_INPUT['timezone']);
        // GRN35-872
    }

    if ( ! CB_I18N_SystemConfig::isUserChangeableLocale()) {
        CB_LocaleManager::setUserLocaleSetting($login_user->getOID(),
            $locale_id);
        cb_redirect('personal/common_list', ['id' => 'i18n']);
    }

    if ( ! array_key_exists("long-date-format", $G_INPUT)
         ||
         ! array_key_exists("short-date-format", $G_INPUT)
         ||
         ! array_key_exists("time-format", $G_INPUT)
    ) {
        // Invalid. Do nothing.
        assert(false);
        cb_redirect('personal/common_list', ['id' => 'i18n']);
    }

    $language = CB_LanguageManager::$LANGUAGE_CODE_PREFER_BROWSER_SETTING;
    $user_setting = CB_UserLocaleSetting::select($login_user->getOID());
    if ( ! is_null($user_setting)) {
        $language = $user_setting->getLanguageCode();
    }
    if (array_key_exists('language', $G_INPUT)) {
        $language = $G_INPUT['language'];
    }

    if (defined('ON_FOREST')
        && $language
           === CB_LanguageManager::$LANGUAGE_CODE_PREFER_BROWSER_SETTING
    ) {
        // on Forest, select date-time formats by the current language
        $current_language = $i18n->getCurrentLanguage();
        $long_date_format
            = CB_DateTimeformatManager::getDateFormat($current_language,
            $G_INPUT["long-date-format"]);
        $short_date_format
            = CB_DateTimeformatManager::getDateFormat($current_language,
            $G_INPUT["short-date-format"]);
        $time_format
            = CB_DateTimeformatManager::getTimeFormat($current_language,
            $G_INPUT["time-format"]);
    } else {
        $long_date_format = CB_DateTimeformatManager::getDateFormat($language,
            $G_INPUT["long-date-format"]);
        $short_date_format = CB_DateTimeformatManager::getDateFormat($language,
            $G_INPUT["short-date-format"]);
        $time_format = CB_DateTimeformatManager::getTimeFormat($language,
            $G_INPUT["time-format"]);
    }

    // a user can not update his setting when his language is "auto detect" and Garoon works with Slash.
    if ( ! ($language
            == CB_LanguageManager::$LANGUAGE_CODE_PREFER_BROWSER_SETTING
            && defined('ON_FOREST'))
    ) {
        if ( ! is_null($user_setting)) {
            $user_setting->setlocale($locale_id);
            $user_setting->setLanguage($language);
            $user_setting->setLongDateFormat($long_date_format);
            $user_setting->setShortDateFormat($short_date_format);
            $user_setting->setTimeFormat($time_format);
            $user_setting->update();
        } else {
            $user_setting_array = [
                "_id"                   => $login_user->getOID(),
                "col_locale"            => $locale_id,
                "col_language"          => CB_LanguageManager::getLanguageId($language),
                "col_long_date_format"  => $long_date_format,
                "col_short_date_format" => $short_date_format,
                "col_time_format"       => $time_format,
            ];
            $user_setting = new CB_UserLocaleSetting($user_setting_array);
            $user_setting->insert();
        }
    }
}

cb_redirect('personal/common_list', ['id' => 'i18n']);


