<?php

class PersonalI18nCommandcommonsetController
{
    public function execute($input)
    {
        $uum = $this->getUum();
        $login_user = $uum->getLoginUser();

        //Set user name languages
        $userNameLanguageList
            = CB_LocaleManager::getUserNameLanguages($login_user->getOID(),
            true);
        $language_selected = is_array(@$input["language-selected"])
            ? @$input["language-selected"] : [];
        foreach ($language_selected as $selected_language) {
            if ( ! $this->findLanguage($selected_language,
                $userNameLanguageList)
            ) {
                CB_LocaleManager::setUserNameLanguages($login_user->getOID(),
                    $selected_language);
            }
        }
        foreach ($userNameLanguageList as $oldLanguage) {
            if (array_search($oldLanguage->getLanguageCode(),
                    $language_selected) === false
            ) {
                CB_LocaleManager::deleteUserNameLangauge($login_user->getOID(),
                    $oldLanguage->getLanguageCode());
            }
        }

        // Set receiving_email_charset
        $receiving_email_charset = @$input['receiving_email_charset'];
        require_once('grn/locale.csp');
        $config_manager = GRN_Locale_ConfigManager::getInstance();
        $config = $config_manager->getPersonalConfig($login_user);
        $config->setReceivingEmailCharset($receiving_email_charset);

        $this->redirect('personal/common_list', ['id' => 'i18n']);
    }

    /**
     *
     * @param string $needleLangaugeCode
     * @param array<CbUserNameLanguage> $userNameLanguageList
     */
    private function findLanguage($needleLangaugeCode, $userNameLanguageList)
    {
        foreach ($userNameLanguageList as $userNameLanguage) {
            if ($userNameLanguage->getLanguageCode() == $needleLangaugeCode) {
                return $userNameLanguage;
            }
        }

        return false;
    }

    public function redirect($page, $parameters)
    {
        cb_redirect($page, $parameters);
    }

    private $uum = null;

    /**
     *
     * @return GRN_Uum
     */
    public function getUum()
    {
        if (is_null($this->uum)) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $this->setUum($uum);
        }

        return $this->uum;
    }

    public function setUum($uum)
    {
        $this->uum = $uum;
    }
}
