<?php
require_once("fw/i18n.csp");
require_once("fw/i18n/locale.csp");

class PersonalI18nCommonsetController
{
    public function execute($g_input)
    {
        $t = $this->createSmarty();

        $i18n = $this->getI18N();
        $uum = $this->getUum();

        //Set language code list
        $login_user = $uum->getLoginUser();
        $availableLanguage = $i18n->getAvailableLanguages();
        $t->assign("language_code_list", $availableLanguage);


        //Set user name languages
        $user_name_languages
            = CB_LocaleManager::getUserNameLanguages($login_user->getOID(),
            true);
        $array_user_name_languages = [];
        foreach ($user_name_languages as $user_name_langauge) {
            $array_user_name_languages[] = $user_name_langauge->toArray();
        }
        $t->assign("user_name_languages", $array_user_name_languages);

        //Set whether the nickname function is enabled.
        require_once("fw/i18n/system_config.csp");
        $t->assign("nickname_enabled", CB_I18N_SystemConfig::isNickname());

        //Set receiving email charset
        $config_manager = $this->getLocaleConfigManager();
        $config
            = $config_manager->getPersonalConfig($login_user);
        $receiving_email_charset = $config->getReceivingEmailCharset();

        $t->assign('receiving_email_charset', $receiving_email_charset);

        $t->assign('page_title',
            grn_get_page_display_name("personal/i18n/common_set"));

        $t->assign(
            'site_position', [
                [
                    'page' => '',
                    'name' => grn_get_page_display_name("personal/i18n/common_set"),
                ],
            ]
        );

        return $t;
    }

    private $uum = null;

    /**
     *
     * @return GRN_Uum
     */
    public function getUum()
    {
        if (is_null($this->uum)) {
            global $G_container_base;
            $uum = $G_container_base->getInstance('uum');
            $this->setUum($uum);
        }

        return $this->uum;
    }

    public function setUum($uum)
    {
        $this->uum = $uum;
    }

    public function createSmarty()
    {
        require_once("grn/smarty.csp");

        return new GRN_Smarty();
    }

    private $i18n;

    /**
     *
     * @return CB_I18N
     */
    public function getI18N()
    {
        if (is_null($this->i18n)) {
            $this->i18n = CB_I18n::getInstance();
        }

        return $this->i18n;
    }

    public function setI18N($i18n)
    {
        $this->i18n = $i18n;
    }

    private $localeConfigManager = null;

    /**
     *
     * @return GRN_Locale_ConfigManager
     */
    public function getLocaleConfigManager()
    {
        if (is_null($this->localeConfigManager)) {
            require_once('grn/locale.csp');
            $this->setLocaleConfigManager(GRN_Locale_ConfigManager::getInstance());
        }

        return $this->localeConfigManager;
    }

    public function setLocaleConfigManager($localeConfigManager)
    {
        $this->localeConfigManager = $localeConfigManager;
    }
}
