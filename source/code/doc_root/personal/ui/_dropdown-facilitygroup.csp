<?php
$page_name = cb_get_pagename() . '-facilitygrouop';

// Get the id of login user
$uum = $G_container_base->getInstance('uum');
require_once('grn/uum_util.csp');
$login_user = $uum->getLoginUser();
$user_id = $login_user->getOID();

// Selected group
$current_oid = @ $G_INPUT['poid'];
if ( ! $current_oid) {
    $current_oid = null;
}

// load selected groups from session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session
    = $session_manager->getSession('grn.personal.ui.dropdown-facilitygroup');
$org_ids = $session->get('org_ids');
if ( ! is_array($org_ids)) {
    $org_ids = [];
}

// Build facility group tree
require_once('schedule/facility_tree.csp');

$util = GRN_OrgTreeUtil::getInstance();
$tree = $util->getTree($page_name, 'GRN_FacilityAccessTree');

if (is_null($current_oid)) {
    $current_oid = $tree->getSelectedNode();
}
if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
    $tree->initialize();
    $current_oid = null;
}
$tree->setSelectedNode($current_oid);
$util->setTree($page_name, $tree);
$org = $tree->getRoot();

require_once("schedule/facility_system_logic.csp");
$hm = GRN_Facility_HistoryManager::getInstance();


//Reset selected organization list
//Cancell button was clicked
if (@ $G_INPUT['reset']) {
    $org_ids = [];

    $facilitygroups = $hm->getOftenusedFacilityGroups($user_id);

    if ($facilitygroups) {
        $org_ids = list2hash($facilitygroups);
    }
} else {
    // Add button was clicked 
    if (@ $G_INPUT['add'] && $current_oid) {
        $org_ids[$current_oid] = 1;
        $t->assign('add', true);
    } //remove button was clicked
    elseif (@ $G_INPUT['remove']) {
        $sids = @ $G_INPUT['sid'];
        if (is_array($sids) && count($sids)) {
            foreach ($sids as $sid) {
                unset($org_ids[$sid]);
            }
        }
    }

    $facilitygroups = $hm->getOftenusedFacilityGroups($user_id);
    $orig_org_ids = list2hash($facilitygroups);
    if ($orig_org_ids != $org_ids) {
        $t->assign('confirm_on', true);
    }
}

//store the selected groups into session
$session->set('org_ids', $org_ids);

//--construct selected organization list
$org_list = _dropdown_facilitygroup_info($org_ids);

// Assing parameters
$t->assign('poid', $current_oid);
$t->assign('page_name', $page_name);
$t->assign('org', $org);
$t->assign('org_list', $org_list);

function _dropdown_facilitygroup_info($fg_ids)
{
    require_once('schedule/facility_system_logic.csp');
    $fsl = GRN_Facility_SystemLogic::getInstance();
    $ancestors_array = $fsl->getAncestors($fg_ids);

    $ret = [];
    foreach (array_keys($fg_ids) as $fg_id) {
        $ancestor = [];
        foreach (array_reverse($ancestors_array[$fg_id]) as $ancestor_id) {
            $ancestors[$ancestor_id] =& $fsl->getFacilityGroup($ancestor_id);
        }
        $ret_name = $ancestors[$fg_id]->get('name');
        $ret_oid = $ancestors[$fg_id]->getOID();
        $ret_foreign_key = $ancestors[$fg_id]->get('foreign_key');
        $ret_description = $ancestors[$fg_id]->get('memo');

        $ret_path = [];
        foreach (array_reverse($ancestors_array[$fg_id]) as $ancestor_id) {
            $ret_path[] = $ancestors[$ancestor_id]->get('name');
        }
        $ret_path = implode(' > ', $ret_path);
        $ret[$fg_id] = [
            'name'        => $ret_name,
            'oid'         => $ret_oid,
            'foreign_key' => $ret_foreign_key,
            'description' => $ret_description,
            'path'        => $ret_path,
        ];
    }

    return $ret;

}

function list2hash($list)
{
    $ret = [];
    foreach ($list as $value) {
        $ret[$value] = 1;
    }

    return $ret;
}
