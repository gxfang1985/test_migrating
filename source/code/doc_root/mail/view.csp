<?php

use grn\mail\HtmlMailInlineContents;
use grn\mail\HtmlMailProcessor;
use grn\mail\screen\MailThreePane;
use grn\mail\GrnMailSitePosition;
use grn\grn\access\service\AppAccess;

global $G_INPUT;

require_once('mail/utility.csp');
$utility = GRN_Mail_Utility::getInstance();
$pane_info = $utility->getPaneInfo();
if ($pane_info['pane'] === 3) {
    $mail_three_pane = new MailThreePane($G_INPUT);
    $mail_three_pane->redirectToIndexFromView();
}

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();
$user_id = $user->getOID();
if ( ! is_object($user)) {
    cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
}

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

$t->assign('app_name', $G_mail_name);

$system_config = $utility->getSystemConfig();
$personal_config = $utility->getPersonalConfig($user);
$folder_logic = $utility->getFolderLogic();
$mail_logic = $utility->getMailLogic();

// メールの使用が許可されているか
$system_config->getGeneralSetting($general_settings);
$disable_mail = $general_settings['disable_mail'];
$check_mail_on_login = $general_settings['check_mail_on_login'];

// 開封確認設定使用権限
$can_use_confirm = $system_config->canUserUseConfirm();

// 総メールサイズ上限を取得
$system_config->getSizeUserLimitSetting($size_settings, $user_id);

// ユーザーの総メールサイズを取得
$mail_size = $personal_config->getMailSize(null);

// 総サイズチェック
$size_over = false;
if (($size_settings['user_limit_' . $user_id] >= 0)
    && ($mail_size >= $size_settings['user_limit_' . $user_id] * 1024 * 1024)
) {
    $size_over = true;
}
$t->assign('size_over', $size_over);

//------------------

require_once('grn/ui.csp');
$uim = GRN_UIConfigManager::getInstance();
$system_ui_config = $uim->getSystemConfig();
$user_ui_config = $uim->getUserConfig($user);
unset($uim);

// インライン表示設定
$inline = $user_ui_config->getInlineSetting();

// 送受信記録機能の使用が許可されているか
if ($system_config->canUserUseHistory()) {
    $useAddressHistory = true;
    $name_type = 'history';
} else {
    $useAddressHistory = false;
    $name_type = null;
}

//------------------

$mail_id = @ $G_INPUT['mid'];

// charset select value
$charset_on = @ $G_INPUT['charset_on'];
$t->assign('charset_on', $charset_on);

$charset_body = '';
if (array_key_exists('charset_body', $G_INPUT)) {
    $charset_body = $G_INPUT['charset_body'];
    $t->assign('charset_body', $charset_body);
}
$charset_header = '';
if (array_key_exists('charset_header', $G_INPUT)) {
    $charset_header = $G_INPUT['charset_header'];
    $t->assign('charset_header', $charset_header);
}

$mail_data = $mail_logic->getMailData($mail_id, true, false, false,
    $charset_body,
    $charset_header);

$category_id = $mail_data['folder_id'];
$folder_data = $folder_logic->getFolderData($category_id);
$account_id = $folder_data['account_id'];

$page_title = grn_get_current_page_display_name(['app_name' => $G_mail_name]);

// 既読処理
$mail_logic->readMail($mail_id);

// 開封確認処理
$confirmation_status = $mail_logic->confirmMail($account_id, $mail_id);

//------------------

$from = $mail_data['from'];
$to = $mail_data['to'];
$cc = $mail_data['cc'];
$bcc = $mail_data['bcc'];

$truncated = GRN_Mail_Utility::truncateMailData($mail_data['data']);
$t->assign('truncated', $truncated);

// メール情報
$mail_for_view = [
    'aid'                   => $account_id, //user_acount_ID
    'cid'                   => $category_id, //category_ID
    'mid'                   => $mail_id,
    'from'                  => $from,
    'ctime'                 => $mail_data['send_ts'], //送信日時
    'to'                    => $to,
    'cc'                    => $cc,
    'bcc'                   => $bcc,
    'subject'               => htmlspecialchars_decode($mail_data['subject']),
    'data'                  => $mail_data['data'],
    'html_data'             => strlen($mail_data['html_data']) > 0,
    'sent'                  => $mail_data['sent'],
    'source_id'             => $mail_data['source_id'],
    'no_source'             => ! $mail_data['source_flag'],
    'status'                => $mail_data['status'],
    'confirmation_request'  => $mail_data['confirmation_request'],
    'confirmation_response' => $mail_data['confirmation_response'],
    'confirmation_to'       => $mail_data['confirmation_to'],
];

if (strcmp($mail_data['sent'], '0') == 0 && is_null($mail_data['data'])
    && $mail_for_view['no_source']
) {
    $t->assign('no_body', true);
}

// initial display status for html mail?
$can_show_html = true;
if ((strcmp($mail_data['sent'], '1') != 0)
    && $general_settings['mail_display_plaintext']
) {
    $can_show_html = false;
}
$t->assign('can_show_html', $can_show_html);

if ($mail_for_view['html_data']) {
    $show_picture = $utility->isHtmlMailShowPicture($user_id, $mail_id,
        $mail_data['sent']);
    $files = new HtmlMailInlineContents(cb_at($mail_data, 'files',
        []), $mail_id);
    $htmlMailProcessor = new HtmlMailProcessor();
    $html = $htmlMailProcessor->process($mail_data['html_data'],
        $files, $show_picture);
    $inline_file_ids = $htmlMailProcessor->getInlineFileIds();

    if ($can_show_html) {
        $mail_for_view['data'] = $html;
        $t->assign(
            "show_display_image_button",
            $utility->isShowDisplayImageButton($mail_data['html_data'],
                $show_picture)
        );
    }
} else {
    $inline_file_ids = [];
}

// is Content-Type 'message/partial'?
$mail_for_view['is_partial'] = strncasecmp(ltrim($mail_data['content_type']),
        'message/partial', 15) == 0;

// 開封確認
if ($can_use_confirm) {
    $message_id = null;
    if (is_string($mail_data['message_id'])
        && (strlen($mail_data['message_id']) > 0)
    ) {
        $message_id = $mail_data['message_id'];
    }

    // 送信開封確認要求メール
    if ($mail_data['confirmation_request']) {
        if ( ! isset($mail_for_view['confirm'])) {
            $mail_for_view['confirm'] = [];
        }

        // 開封通知メールリスト取得
        if ( ! is_null($message_id)) {
            $response_list = $mail_logic->getConfirmResponseDataList($user,
                $message_id);
            if (is_array($response_list) && (count($response_list) > 0)) {
                $response_list_for_view = [];
                foreach ($response_list as $key => $response_data) {
                    $response_list_for_view[$key] = [
                        'mid'     => $response_data['mail_id'],
                        'from'    => $response_data['from'],
                        'subject' => $response_data['subject'],
                        'ctime'   => $response_data['send_ts'],
                    ];
                }

                $mail_for_view['confirm']['response_mails']
                    = $response_list_for_view;
            }

            // 設定取得
            $personal_config->getConfirmSetting($confirm_settings);

            // 手動返信
            if ($confirm_settings['response'] == 'manual'
                || $confirm_settings['response'] == 'auto'
            ) {
                if (is_null($confirmation_status)
                    || ($confirmation_status == 'none')
                    || ($confirmation_status == 'opened')
                ) {
                    // まだ返信してない
                    $mail_for_view['open'] = '1';
                }
            }

            if (strncasecmp($confirmation_status, 'sent', 4) == 0) {
                // 開封確認返信済み
                $mail_for_view['open'] = '2';
            }
        }
    } // 開封通知メール
    elseif ($mail_data['confirmation_response']) {
        if ( ! isset($mail_for_view['confirm'])) {
            $mail_for_view['confirm'] = [];
        }

        // 開封確認要求メールリスト取得
        if (is_string($mail_data['confirmation_org_message_id'])
            && (strlen($mail_data['confirmation_org_message_id']) > 0)
        ) {
            $request_list_for_view = [];
            $request_list
                = $mail_logic->getConfirmRequestDataList($user,
                $mail_data['confirmation_org_message_id'], $mail_id);
            if (is_array($request_list) && (count($request_list) > 0)) {
                foreach ($request_list as $key => $request_data) {
                    $request_list_for_view[$key] = [
                        'mid'     => $request_data['mail_id'],
                        'subject' => $request_data['subject'],
                    ];
                }

            }

            $mail_for_view['confirm']['org_mail'] = $request_list_for_view;
        }
    }
}

// 添付ファイル
$file_exists = false;
if (array_key_exists('files', $mail_data)) {
    $mail_for_view['inline_files'] = [];
    $mail_for_view['attach_files'] = [];

    foreach ($mail_data['files'] as $key => $file) {
        if (in_array($file['fid'], $inline_file_ids)) {
            $mail_for_view['inline_files'][$key] = $file;
        } else {
            $mail_for_view['attach_files'][$key] = $file;
        }
    }

    if (strcmp($mail_for_view['sent'], '1') === 0) {
        $mail_for_view['receive'] = false;

        // 送信メールの場合は添付ファイルの実体が存在するかチェック
        foreach ($mail_data['files'] as $file) {
            if (array_key_exists('exists', $file) && $file['exists']) {
                $file_exists = true;
                break;
            }
        }
    } else {
        $mail_for_view['receive'] = true;
    }
}

// 1: 添付ファイルもファイルデータも存在する
// 2: 添付ファイルはあるが実体もしくはメールソースが削除されている
if (strcmp($mail_for_view['sent'], '1') === 0) // 送信メール
{
    $mail_for_view['attach_file_type'] = $file_exists ? 1 : 2;
} else                                              // 受信メール
{
    $mail_for_view['attach_file_type'] = $mail_data['source_flag'] ? 1 : 2;
}

// フォルダ情報
$folder_detail = false;
include('_folder_common.csp');

if ($folder_code != null) {
    $t->assign('folder_name', $page_folder);
} else {
    $t->assign('folder_name', $folder_data['name']);
}

//------------------

// アカウント情報
include('_account_common.csp');


// 全アカウントのフォルダ情報取得
$folder_list_for_view = [];
$folder_list_for_view['data'] = [];
if (is_array($account_list)) {
    foreach (array_keys($account_list) as $key) {
        if ($key == $account_id) {
            $temp_cid = $category_id;
        } else {
            // 受信箱データ取得
            $temp_data = $folder_logic->getSpecialFolderData($key,
                GRN_MAIL_FOLDER_CODE_INBOX, false);
            $temp_cid = $temp_data['id'];
        }
        $folder_list_for_view['data'][] = ['aid' => $key, 'cid' => $temp_cid];
    }
}
$folder_list_for_view['selected'] = $account_id;

//------------------

// ソート設定をプロファイルからロード
$sort = null;
$sort_time = null;
$reverse = null;
$result = $personal_config->getSortCondition($sort, $sort_time, $reverse);
assert('$result');

$sort_key = $sort;

if ($sort === 'time') {
    if ($folder_code == GRN_MAIL_FOLDER_CODE_TRASH) {
        $sort_time = 'dtime';
    }

    $sort_key = $sort_time;
} elseif ($sort === 'name') {
    if (($folder_code == GRN_MAIL_FOLDER_CODE_SENTBOX)
        || ($folder_code == GRN_MAIL_FOLDER_CODE_UNSENT)
    ) {
        $sort_key = 'to';
    } else {
        $sort_key = 'from';
    }

    // 表示する形式
    $name_format = $personal_config->getListNameFormatSetting();
    if ($name_format == 'name') {
        $sort_key .= '_name';
    } elseif ($name_format == 'email') {
        $sort_key .= '_email';
    }
}

// ソート用比較対象文字列
$sort_var = $mail_data['send_ts']->unix_ts;
$sort_column = substr($mail_logic->_getSortColumnName($sort_key), 4);
if (strcmp($sort_key, 'rtime') == 0 || strcmp($sort_key, 'ctime') == 0
    || strcmp($sort_key, 'dtime') == 0
) {
    $sort_var = $mail_data[$sort_column]->unix_ts;
} elseif (strcmp($sort_key, 'size') == 0) {
    $sort_var = $mail_data[$sort_column];
} else {
    $simple_mail_data = $mail_logic->getMailData($mail_id, false, false, false);
    $sort_var = $simple_mail_data[substr($sort_column, 9)];
}

// 前後の情報取得
$pn_ids = $mail_logic->getPreviousNextIDs($user, $category_id, $mail_id,
    $sort_key,
    $sort_var, $reverse);

// previous
$previous_navi_params_for_view
    = $mail_logic->getPreviousNextNaviParams('previous', $pn_ids);
if ($previous_navi_params_for_view) {
    $t->assign('previous_navi_params', $previous_navi_params_for_view);
}

$next_navi_params_for_view = $mail_logic->getPreviousNextNaviParams('next',
    $pn_ids);
if ($next_navi_params_for_view) {
    $t->assign('next_navi_params', $next_navi_params_for_view);
}

//------------------

$t->assign('inline', $inline);

$t->assign('category', $category_for_view);

// アカウントごとのフォルダ表示切替のためのフォルダ一覧データ
$t->assign('folder_list', $folder_list_for_view);

// page title
$t->assign('page_title', $page_title);

// user_account
$t->assign('user_account', $account_list_for_view);

// set_data
$t->assign('mail', $mail_for_view);
if (isset($mail_for_view['subject'])
    && mb_strlen($mail_for_view['subject']) > 0
) {
    $t->assign('page_title', $mail_for_view['subject']);
} else {
    $t->assign('page_title', cb_msg('grn.mail', 'no_title'));
}

// メール使用不許可フラグ
$t->assign('disable_mail', $disable_mail);
$t->assign('name_type', $name_type);

$t->assign('name_format', 'full');

// Cc が表示できるか
// Cc にグループリストのみ入っている場合には Cc 欄が表示されてしまうのでそれへの対応
$has_cc = false;
$cc_count = 0;
$cc_list = GRN_Mail_Utility::static_formatAddressString($cc, true, false,
    true, false, 'array');
if (is_array($cc_list) && (count($cc_list) > 0)) {
    $has_cc = true;
    $cc_count = count($cc_list);
}
$t->assign('has_cc', $has_cc);
$t->assign('cc_count', $cc_count);

$t->assign('use_confirm', $can_use_confirm);  // 開封確認使用権限

//
$to_count = 0;
$to_list = GRN_Mail_Utility::static_formatAddressString($to, true, false,
    true, false, 'array');
if (is_array($to_list) && (count($to_list) > 0)) {
    $to_count = count($to_list);
}

$t->assign('to_count', $to_count);

//
$has_bcc = false;
$bcc_count = 0;
$bcc_list = GRN_Mail_Utility::static_formatAddressString($bcc, true, false,
    true, false, 'array');
if (is_array($bcc_list) && (count($bcc_list) > 0)) {
    if ($mail_for_view['sent'] == true) {
        $has_bcc = true;
    }
    $bcc_count = count($bcc_list);
}

$t->assign('has_bcc', $has_bcc);
$t->assign('bcc_count', $bcc_count);
$t->assign('status_mail', -1);
// statuses
if ($system_config->canUserUseStatus() && $personal_config->useStatus()) {
    require_once('mail/status.csp');
    $status_list = grn_mail_get_status_list($user);
    $status_infos_for_view = [];
    $status_infos_for_view[] = [
        'value' => 0,
        'label' => cb_msg('grn.mail', 'GRN_MAIL-418')
    ];
    foreach ($status_list as $status_oid => $status) {
        $status_info = [];
        $status_info['value'] = $status_oid;
        $status_info['label'] = $status['name'];
        $status_info['selected'] = ($mail_data['status'] == $status_oid);
        $status_info['color'] = $status['color'];
        if ($status_oid == 1) {
            $status_info['class'] = "mail-statusNormal-grn";
        } elseif ($status_oid == 2) {
            $status_info['class'] = "mail-statusUnCheck-grn";
        } elseif ($status_oid == 3) {
            $status_info['class'] = "mail-statusNeedSend-grn";
        } elseif ($status_oid == 4) {
            $status_info['class'] = "mail-statusCheck-grn";
        } elseif ($status_oid == 5) {
            $status_info['class'] = "mail-statusHold-grn";
        } elseif ($status_oid == 6) {
            $status_info['class'] = "mail-statusWaitSend-grn";
        }

        if ($status_info['selected'] == true) {
            $status_info['selected'] = false;
            $temp['value'] = $status_info['value'];
            $temp['label'] = $status_info['label'];
            $t->assign('status_mail', $temp);
        }
        $status_infos_for_view[] = $status_info;
    }
    $t->assign('status_infos', $status_infos_for_view);
}

// Set site position.
$mailSitePosition = new GrnMailSitePosition();
$t->assign('site_position',
    $mailSitePosition->getSitePositionArray("mail/view", [
        GrnMailSitePosition::ARG_USER             => $user,
        GrnMailSitePosition::ARG_ACCOUNT_ID       => $account_id,
        GrnMailSitePosition::ARG_FOLDER_ID        => $category_id,
        GrnMailSitePosition::ARG_APPLICATION_NAME => $G_mail_name
    ])
);

require_once('fw/ui.csp');
$browser = cb_ui_get_browser();
$t->assign('browser', $browser);

$subject = array_key_exists('subject', $mail_data) ? $mail_data['subject'] : '';
if (strlen($subject) == 0) {
    require_once('fw/i18n.csp');
    require_once('mail/resources.csp');
    $subject = cb_msg(GRN_MAIL_MODULE_ID, 'no_title');
}
// get Trash personal setting
$use_trash = $personal_config->useTrash();
$folder_type = null;
if (isset($category_for_view) && is_array($category_for_view)) {
    $folder_type = $category_for_view['type'];
}

$no_confirm = false;
//mail delete info
$delete_info = [
    'title'      => grn_get_page_display_name('mail/delete',
        ['app_name' => $G_mail_name]),
    'page'       => 'mail/delete.tpl',
    'no_confirm' => $no_confirm,
    'data'       => [
        'mail'           => [
            'aid'     => $account_id,
            'cid'     => $category_id,
            'mid'     => $mail_id,
            'subject' => $subject
        ],
        'folder_type'    => $folder_type,
        'truncate_len'   => GRN_MAIL_SUBJECT_TRUNCATE_WIDTH,
        'use_garbagebox' => $use_trash
    ],
    'handler'    => 'lnk_delete',
];
$t->assign('delete_info', $delete_info);

//file delete info
if (array_key_exists('attach_file_type', $mail_for_view)
    && $mail_for_view['attach_file_type'] != 2
) {
    $file_delete_info = [
        'title'      => grn_get_page_display_name('mail/file_delete',
            ['app_name' => $G_mail_name]),
        'page'       => 'mail/file_delete.tpl',
        'no_confirm' => false,
        'data'       => [
            'mail'         => $mail_for_view,
            'truncate_len' => GRN_MAIL_SUBJECT_TRUNCATE_WIDTH
        ],
        'handler'    => 'lnk_detele_file',
    ];
    $t->assign('file_delete_info', $file_delete_info);
}
// star
require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$use_star = $star_logic->isActive();
$use_star = $use_star && ($folder_code != GRN_MAIL_FOLDER_CODE_TRASH);
$t->assign('use_star', $use_star);
if ($use_star) {
    $t->assign('star_infos',
        $star_logic->getStatusByIDs($user, GRN_MAIL_MODULE_ID, [$mail_id]));
}
// end star
// Smarty実行

// check whether module Messages is active or not for link transfer
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$app = $locator->getInstance('message');
$link_transfer_mail_to_message = true;
if ( ! (AppAccess::isAppAvailable('message'))) {
    $link_transfer_mail_to_message = false;
} else {
    $t->assign('message_name', $app->getName());
}

if ( ! AppAccess::isAppAvailableExternalAccess('message')) {
    $link_transfer_mail_to_message = false;
}

$t->assign('link_transfer_mail_to_message', $link_transfer_mail_to_message);

$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");
