<?php
global $G_INPUT;

use grn\mail\HtmlMailInlineContents;
use grn\mail\HtmlMailProcessor;

$uum = cb_lwc_uum();
$user = $uum->getLoginUser();
if ( ! is_object($user)) {
    cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
}

require_once('mail/table.csp');
require_once('mail/utility.csp');
$utility = GRN_Mail_Utility::getInstance();
$mail_logic = $utility->getMailLogic();

$mail_id = @ $G_INPUT['mid'];
$text_only = @ $G_INPUT['text'];
$new_page = cb_at($G_INPUT, 'newpage', false);

$pids = @ $G_INPUT['pids'];
$pid_array = null;
if (is_string($pids) && (strlen($pids) > 0)) {
    $pid_array = explode('.', $pids);
}
$pids_count = is_array($pid_array) ? count($pid_array) : 0;

$html_body = null;
$sign_data = '';
if ($pids_count == 0) {
    if (array_key_exists('frm', $G_INPUT)
        && strcmp($G_INPUT['frm'], 'prvw') === 0
    ) {
        $mail_id = array_key_exists('tmpid', $G_INPUT) ? $G_INPUT['tmpid'] : '';
        if ( ! is_numeric($mail_id)) {
            require_once('mail/error_code.csp');
            cb_throw_error(E_GRN_MAIL_MAIL_DATA_NOT_FOUND);
        }
        $mail_data = $mail_logic->getTemporaryMailData($mail_id, true);
        if (is_string($mail_data['sign_data'])) {
            $sign_data = $mail_data['sign_data'];
        }
    } else {
        $mail_data = $mail_logic->getMailData($mail_id, true);
        if (array_key_exists('draft', $mail_data) && $mail_data['draft'] == 1
            && array_key_exists('sign_data', $mail_data)
            && is_string($mail_data['sign_data'])
        ) {
            $sign_data = $mail_data['sign_data'];
        }
    }
} else {
    // 内包メールをパーズ
    // セッションファイルに保存されているメールソースを読み込む
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session = $session_manager->getSession(GRN_MAIL_BREVITY_CODE
                                            . '_rfc822_' . $pids);

    // 指定したセクションに関連付けられている連想配列を取得する。
    // (キー=ID 値=CB_ServerFile のもの)
    $ids = $session->getFiles('temp_files');
    foreach (array_keys($ids) as $id) {
        $temp_file = $ids[$id];

        // $draft_file は CB_ServerFile と同じメソッドを持つので、
        // fopen したり削除したりすることができる。

        $mail_source = $temp_file->getPath();
        break;
    }

    $mail_data = $utility->getMailLogic()
                         ->parseIncludingMailData($mail_source, null,
                             $including_mail_source, true);
}

$html_body = $mail_data['html_data'];

if ($text_only) {
    $html_body = preg_replace("#<br>\r\n#i", "\r\n", $html_body);
    $html_body = preg_replace("#<br>#i", "\r\n", $html_body);
    $html_body = strip_tags($html_body);

    require_once("grn/smarty.csp");
    $smarty = new GRN_Smarty();
    $html_tag_lang = $smarty->getHtmlTagLanguage();
    echo '<html lang="' . $html_tag_lang . '"><body><pre>' . $html_body
         . '</pre>' . '</body></html>';
} else {
    $show_picture = $utility->getSystemConfig()->canUserUseHtmlMailPicture();
    $files = new HtmlMailInlineContents(cb_at($mail_data, 'files', []),
        $mail_id, $pids);
    $html_body = (new HtmlMailProcessor())->process($html_body, $files,
        $show_picture);

    if ( ! $new_page) {
        $utility->updateSessionOfHtmlMailShowPicture($user->getOID(), $mail_id,
            true);
        echo $html_body;
    } else {
        $utility->updateSessionOfHtmlMailShowPicture($user->getOID(), $mail_id,
            $show_picture);
        require_once("grn/smarty.csp");
        $t = new GRN_Smarty;

        $subject = htmlspecialchars_decode($mail_data['subject']);
        if (isset($subject) && mb_strlen($subject) > 0) {
            $t->assign('page_title', $subject);
        } else {
            $t->assign('page_title', cb_msg('grn.mail', 'no_title'));
        }
        $t->assign('data', $html_body);
        $doc_name = cb_get_pagename();
        $t->display("{$doc_name}.tpl");
    }
}
cb_safe_exit();

