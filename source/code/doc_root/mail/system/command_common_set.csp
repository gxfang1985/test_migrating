<?php

use grn\grn\Validate;

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;
    $settings = [
        'disable_mail'        => $G_INPUT['not_use_mail'],
        'check_mail_on_login' => $G_INPUT['check_mail_login'],
        'incremental_search'  => $G_INPUT['incremental_search'],
    ];
    $settings['mail_display_plaintext']
        = array_key_exists('mail_display_plaintext', $G_INPUT)
        ? $G_INPUT['mail_display_plaintext'] : '';

    $is_setting = $G_INPUT['auto_receive'];

    $scheduled_times = [];
    foreach ($G_INPUT as $key => $value) {
        if (preg_match('/^scheduled_time_([1-9]*[0-9]+)_(hour|minute)/i', $key,
            $matches)
        ) {
            $key = $matches[1];
            $unit = $matches[2];

            if ( ! array_key_exists($key, $scheduled_times)) {
                $scheduled_times[$key] = new CB_Time();
            }
            $scheduled_time = $scheduled_times[$key];

            switch ($unit) {
                case 'hour':
                    $scheduled_time->hour = $value;
                    break;
                case 'minute':
                    $scheduled_time->minute = $value;
                    break;
                default:
                    break;
            }
        }
    }
    //GRN2-3129
    require_once('schedule/view_util.csp');
    require_once('grn/uum.csp');
    $uum =& $G_container_base->getInstance('uum');
    $login_user = $uum->getLoginUser();
    $I18N = CB_I18N::getInstance();
    $timezone = $I18N->getUserTimezone($login_user);
    $today = getdate();
    $set_date_time = new CB_DateTime();
    $set_date_time->year = $today['year'];
    $set_date_time->month = $today['mon'];
    $set_date_time->day = $today['mday'];
    //GRN2-3129
    $interval_time = $G_INPUT['interval_time'];

    $event_prefix = 'grn_mail_auto_receive';

    // メールの自動受信イベントをすべて停止する
    require_once('fw/schedule.csp');
    $service = CB_SchedulingService::getInstance();
    $events = $service->listEvents();
    foreach (array_keys($events) as $event_name) {
        if ($event_prefix == substr($event_name, 0, 21)) {
            $service->unregisterEvent($event_name);
        }
    }

    if ($is_setting) {
        // トリガーが定時のイベントを登録する
        $i = 0;
        foreach (array_keys($scheduled_times) as $key) {
            $scheduled_time = $scheduled_times[$key];
            if (Validate::isNumber($scheduled_time->hour)
                && Validate::isIn($scheduled_time->hour, [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23
                ])
            ) {
                //GRN2-3129
                $set_date_time->hour = $scheduled_time->hour;
                $minute = $scheduled_time->minute;
                $set_date_time->minute = Validate::isNumber($minute)
                                         && Validate::isIn($minute,
                    [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]) ? $minute
                    : '0';
                $scheduled_time
                    = grn_schedule_convert_datetime_tz1_to_tz2($set_date_time,
                    $timezone, "UTC");
                $scheduled_times[$key] = $scheduled_time;
                //GRN2-3129
                $hour = $scheduled_time->hour;
                $min = $scheduled_time->minute;
                if (0 == strlen($min) || 0 == $min) {
                    $min = '0';
                }
                $command = $min . ' ' . $hour . ' * * *';
                $service->registerRepeatEvent($event_prefix . $i,
                    $event_prefix . '.csp', $command);
                $i++;
            } else {
                unset($scheduled_times[$key]);
            }
        }

        // トリガーが一定間隔のイベントを登録する
        if (0 < $interval_time) {
            $timestamp = new CB_TimeStampEx;
            $datetime = $timestamp->getDateTime();
            $min = $datetime->minute;
            $hour = $interval_time;
            $day = intval($hour / 24);
            if (0 == $day) {
                $day = '*';
                $hours = [];
                if (1 < $hour) {
                    for ($i = $datetime->hour % $hour; $i < 24; $i += $hour) {
                        $hours[] = $i;
                    }
                    $hour = implode(',', $hours);
                } else {
                    $hour = '*';
                }
            } else {
                // n日おきとするときは考え直さす必要あり
                $day = '*';
                $hour = $datetime->hour;
            }
            $command = "${min} ${hour} ${day} * *";
            $service->registerRepeatEvent($event_prefix . $i,
                $event_prefix . '.csp', $command);
        }
    } else {
        // トリガーが定時の空イベントを削除する
        foreach (array_keys($scheduled_times) as $key) {
            $scheduled_time = $scheduled_times[$key];
            $set_date_time->hour = $scheduled_time->hour;
            $set_date_time->minute = $scheduled_time->minute;
            $scheduled_time
                = grn_schedule_convert_datetime_tz1_to_tz2($set_date_time,
                $timezone, "UTC");
            $scheduled_times[$key] = $scheduled_time;
            if (0 == strlen($scheduled_time->hour)) {
                unset($scheduled_times[$key]);
            }
        }
    }

    if (0 == count($scheduled_times) && 0 == $interval_time) {
        $is_setting = 0;
    }

    $settings['auto_receive'] = [
        'is_setting'      => $is_setting,
        'scheduled_times' => $scheduled_times,
        'interval_time'   => $interval_time
    ];

    require_once('mail/utility.csp');
    $utility = GRN_Mail_Utility::getInstance();
    $system_config = $utility->getSystemConfig();

    $screen_layout = $system_config->getScreenLayout();
    if (array_key_exists('screen_layout_3pane', $G_INPUT)) {
        $screen_layout['3pane'] = intval($G_INPUT['screen_layout_3pane']) != 0;
    }
    if (array_key_exists('screen_layout_2pane', $G_INPUT)) {
        $screen_layout['2pane'] = intval($G_INPUT['screen_layout_2pane']) != 0;
    }
    $settings['screen_layout'] = $screen_layout;

    $settings['automatic_mail'] = intval($G_INPUT['automatic_mail']) != 0;

    $user_account_operation = cb_at($G_INPUT, 'user_account_operation');
    if ( ! is_null($user_account_operation)
         && intval($user_account_operation) == 1
    ) {
        $user_account_permission = cb_at($G_INPUT, 'user_account_permission');
        if ($user_account_permission == 'all') {
            $all_permission = '1';
            $modify_account = '1';
        } elseif ($user_account_permission == 'modify') {
            $all_permission = '0';
            $modify_account = '1';
        } else {
            $all_permission = '0';
            $modify_account = '0';
        }
    } else {
        $all_permission = '0';
        $modify_account = '0';
    }

    $settings['all_permission'] = $all_permission;
    $settings['modify_account'] = $modify_account;
    $settings['leave'] = cb_at($G_INPUT, 'leaves_server_mail');
    $settings['all_receive'] = cb_at($G_INPUT, 'all_receive');
    $settings['check_mails'] = cb_at($G_INPUT, 'mail_check');
    $settings['send_html_mail'] = cb_at($G_INPUT, 'send_html_mail');
    $settings['use_confirm'] = cb_at($G_INPUT, 'use_confirm');
    $settings['use_status'] = cb_at($G_INPUT, 'use_status');
    $settings['use_history'] = cb_at($G_INPUT, 'use_history');
    $settings['use_html_pict'] = cb_at($G_INPUT, 'use_html_pict');

    // メールの使用が許可されているか
    $system_config->setGeneralSetting($settings);
}

cb_redirect('system/application_list', ['app_id' => 'mail']);


