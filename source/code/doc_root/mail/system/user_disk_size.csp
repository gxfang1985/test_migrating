<?php
function compareValueToSort($size_limit_a, $size_limit_b)
{
    $category_limit = null;
    switch ($size_limit_a['sort_by']) {
        case 'mtl':
            $category_limit_a = $size_limit_a['user_limit'];
            $category_limit_b = $size_limit_b['user_limit'];
            break;
        case 'mrl':
            $category_limit_a = $size_limit_a['receive_limit'];
            $category_limit_b = $size_limit_b['receive_limit'];
            break;
        case 'msl':
            $category_limit_a = $size_limit_a['send_limit'];
            $category_limit_b = $size_limit_b['send_limit'];
            break;
    }
    if ($category_limit_a == $category_limit_b
        && $size_limit_a['position'] == $size_limit_b['position']
    ) {
        return 0;
    }
    if ($category_limit_a == $category_limit_b) {
        if ($size_limit_a['position'] > $size_limit_b['position']) {
            return 1;
        } else {
            return -1;
        }
    }
    if ($size_limit_a['reverse']) {
        if ($category_limit_a > $category_limit_b) {
            return 1;
        } else {
            return -1;
        }
    } else {
        if ($category_limit_a < $category_limit_b) {
            return 1;
        } else {
            return -1;
        }
    }
}

global $G_INPUT;
//-- instantiate Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

$t->assign('app_name', $G_mail_name);

//-- get parameters from URL parameters
if (array_key_exists('sort', $G_INPUT)) {
    $sort_by_column = $G_INPUT['sort'];
} else {
    $sort_by_column = 'size';
}
//-- prepare uum and uum_util
global $G_container_base;
$uum = $G_container_base->getInstance('uum');

require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');

require_once('mail/system_config.csp');
$system_config = GRN_Mail_SystemConfig::getInstance();

// ソート
$sort_size_params = ['sort' => 'size', 'reverse' => '', 'disabled' => false];
$sort_mtl_params = ['sort' => 'mtl', 'reverse' => '', 'disabled' => true];
$sort_mrl_params = ['sort' => 'mrl', 'reverse' => '', 'disabled' => true];
$sort_msl_params = ['sort' => 'msl', 'reverse' => '', 'disabled' => true];
$sort_reverse = '';
if (array_key_exists('reverse', $G_INPUT)) {
    $sort_reverse = $G_INPUT['reverse'] === '0' ? '1' : '';
}
$search_text = array_key_exists('search_text', $G_INPUT)
    ? cb_trim($G_INPUT['search_text']) : '';
if (array_key_exists('clear', $G_INPUT)) {
    $search_text = '';
}
$is_search = strlen($search_text) > 0 ? true : false;
if ($is_search) {
    // search

    //--N-navigation
    $condition = grn_get_user_info_search_condition(null, $search_text, true);
    $count = grn_get_user_info_search_count(null, $condition);

    $navi_params = ['search_text' => $search_text];
    $navigation_info = grn_get_user_navigation_info($count, $navi_params);

    //user list
    $t->assign('search_text', $search_text);

    $user_list = $system_config->getUsersAccountList(null,
        $navigation_info, $search_text, $sort_by_column, $sort_reverse);
    $sort_size_params['search_text'] = $search_text;
    $sort_mtl_params['search_text'] = $search_text;
    $sort_mrl_params['search_text'] = $search_text;
    $sort_msl_params['search_text'] = $search_text;
} else {
    //list
    $user_count = $uum->getUserCount();

    //--N-navigation
    $navi_params = [];
    $navigation_info = grn_get_user_navigation_info($user_count, $navi_params);

    //--user list
    $user_list = $system_config->getUsersAccountList(null, $navigation_info,
        $search_text, $sort_by_column, $sort_reverse);
}
//sort 
if ($sort_by_column === 'mtl' || $sort_by_column === 'mrl'
    || $sort_by_column === 'msl'
) {
    uasort($user_list, 'compareValueToSort');
}

if (is_array($navigation_info) && array_key_exists('offset', $navigation_info)
    && array_key_exists('limit', $navigation_info)
) {
    $offset = $navigation_info['offset'];
    $limit = $navigation_info['limit'];
    if ( ! is_numeric($offset) || ! is_numeric($limit)) {
        cb_throw_error(E_COMMON_INTERNAL);
    }
    if ($limit < 0) {
        $limit = '18446744073709551615';
    }
    $limit = $limit + $offset;
}

// optimize extract item
$keys = array_keys($user_list);
if (count($keys) > 0) {
    $user_list_tmp = [];
    for ($i = $offset; $i < $limit; $i++) {
        if (array_key_exists($i, $keys)) {
            $user_list_tmp[$keys[$i]] = $user_list[$keys[$i]];
        }
    }
    $user_list = $user_list_tmp;
}

// ソートのパラメータ
if ($sort_by_column === 'size') {
    $navigation_info['navi']['params']['sort'] = $sort_by_column;
    $sort_size_params['disabled'] = false;
    $sort_mtl_params['disabled'] = true;
    $sort_mrl_params['disabled'] = true;
    $sort_msl_params['disabled'] = true;
    $sort_size_params['sort'] = $sort_by_column;
    switch ($sort_reverse) {
        case '1':
            $navigation_info['navi']['params']['reverse'] = '0';
            $sort_size_params['reverse'] = '1';
            $sort_size_params['sort'] = '';
            break;
        default:
            $sort_size_params['reverse'] = '0';
            break;
    }
}
if ($sort_by_column === 'mtl') {
    $navigation_info['navi']['params']['sort'] = $sort_by_column;
    $sort_size_params['disabled'] = true;
    $sort_mtl_params['disabled'] = false;
    $sort_mrl_params['disabled'] = true;
    $sort_msl_params['disabled'] = true;
    $sort_mtl_params['sort'] = $sort_by_column;
    switch ($sort_reverse) {
        case '1':
            $navigation_info['navi']['params']['reverse'] = '0';
            $sort_mtl_params['reverse'] = '1';
            $sort_mtl_params['sort'] = '';
            break;
        default:
            $sort_mtl_params['reverse'] = '0';
            break;
    }
}
if ($sort_by_column === 'mrl') {
    $navigation_info['navi']['params']['sort'] = $sort_by_column;
    $sort_size_params['disabled'] = true;
    $sort_mtl_params['disabled'] = true;
    $sort_mrl_params['disabled'] = false;
    $sort_msl_params['disabled'] = true;
    $sort_mrl_params['sort'] = $sort_by_column;
    switch ($sort_reverse) {
        case '1':
            $navigation_info['navi']['params']['reverse'] = '0';
            $sort_mrl_params['reverse'] = '1';
            $sort_mrl_params['sort'] = '';
            break;
        default:
            $sort_mrl_params['reverse'] = '0';
            break;
    }
}
if ($sort_by_column === 'msl') {
    $navigation_info['navi']['params']['sort'] = $sort_by_column;
    $sort_size_params['disabled'] = true;
    $sort_mtl_params['disabled'] = true;
    $sort_mrl_params['disabled'] = true;
    $sort_msl_params['disabled'] = false;
    $sort_msl_params['sort'] = $sort_by_column;
    switch ($sort_reverse) {
        case '1':
            $navigation_info['navi']['params']['reverse'] = '0';
            $sort_msl_params['reverse'] = '1';
            $sort_msl_params['sort'] = '';
            break;
        default:
            $sort_msl_params['reverse'] = '0';
            break;
    }
}

$t->assign('sort_order_column', $sort_by_column);
$t->assign('sort_size', $sort_size_params);
$t->assign('sort_mtl', $sort_mtl_params);
$t->assign('sort_mrl', $sort_mrl_params);
$t->assign('sort_msl', $sort_msl_params);
require_once('mail/utility.csp');
$utility = GRN_Mail_Utility::getInstance();
$system_config = $utility->getSystemConfig();
//--user account information
$users_id = [];
foreach (array_keys($user_list) as $uid) {
    $users_id[] = $uid;
    unset($user_list[$uid]['row']);
    unset($user_list[$uid]['valid']);
    unset($user_list[$uid]['position']);

    if ($user_list[$uid]['receive_limit'] >= 1024) {
        $receive_limit = $user_list[$uid]['receive_limit'];
        if ($receive_limit % 1024 == 0) {
            $user_list[$uid]['receive_limit'] = $receive_limit / 1024;
            $user_list[$uid]['receive_unit'] = true;
        }
    } else {
        $user_list[$uid]['receive_unit'] = false;
    }
    if ($user_list[$uid]['send_limit'] >= 1024) {
        $send_limit = $user_list[$uid]['send_limit'];
        if ($send_limit % 1024 == 0) {
            $user_list[$uid]['send_limit'] = $send_limit / 1024;
            $user_list[$uid]['send_unit'] = true;
        }
    } else {
        $user_list[$uid]['send_unit'] = false;
    }

    $user_list[$uid]['account_list'] = [];
    $account_list
        = $system_config->getAccountDataListByUserID($uid,
        true);
    if ( ! is_array($account_list) || 0 === count($account_list)) {
        continue;
    }
    $mail_size = 0;

    foreach (array_keys($account_list) as $account_id) {
        $account_data =& $account_list[$account_id];
        if (is_array($account_data)) {
            $account_name = $account_data['title'];
            $size = $account_data['mail_size'];
        } else {
            $account_name = '';
            $size = 0;
        }

        $mail_size += $size;
        $user_list[$uid]['account_list'][$account_id] = [
            'aid'   => $account_id,
            'title' => $account_name,
            'size'  => $size
        ];

    }

    if (($mail_size > 0) && ($mail_size < 1024)) {
        $mail_size = 1024;
    }
    $user_list[$uid]['mail_size'] = $mail_size;
}


$login =& $uum->getLoginUser();
// GTM-529 tuning
require_once('grn/controller.csp');
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login);
$t->assign('users_info', $users_info);

//-- set variables for view
$t->assign('is_search', $is_search);
$t->assign('user_list', $user_list);
$t->assign('navi_info', $navigation_info);

// Smartyにページタイトルを割り当てる
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
$t->assign(
    'site_position', [
        [
            'page' => '',
            'name' => $page_title
        ]
    ]
);
//-- show page
$t->display(cb_get_pagename() . '.tpl');



