<?php
global $G_INPUT;
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();
$user_id = $user->getOID();
if ( ! is_object($user)) {
    cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
}

require_once('mail/utility.csp');
$utility = GRN_Mail_Utility::getInstance();
$mail_app = $utility->getMailApp();
$system_config = $utility->getSystemConfig();
$personal_config = $utility->getPersonalConfig($user);
$folder_logic = $utility->getFolderLogic();
$mail_logic = $utility->getMailLogic();
$reply_data = null;
$send_logic = $utility->getSendLogic();

// メールの使用が許可されているか
$system_config->getGeneralSetting($general_settings);
$disable_mail = $general_settings['disable_mail'];
$check_mail_on_login = $general_settings['check_mail_on_login'];
if ($disable_mail) {
    // メール使用停止中
    cb_throw_error(E_GRN_MAIL_CANNOT_USE);
}

// 総メールサイズをチェック
$system_config->getSizeUserLimitSetting($size_settings, $user_id);
$mail_size = $personal_config->getMailSize(null);
if ((0 <= $size_settings['user_limit_' . $user_id])
    && ($mail_size >= $size_settings['user_limit_' . $user_id] * 1024 * 1024)
) {
    cb_throw_error(E_GRN_MAIL_LIMIT, null,
        ['limit' => $size_settings['user_limit_' . $user_id] . 'MB']);
}

// 送信前確認を行う
$personal_config->getGeneralSetting($personal_general_settings);
$b_preview = $personal_general_settings['preview'];

// 開封確認設定
$send_set = $system_config->canUserUseConfirm()
            && $personal_config->useConfirmMail();

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//------------------
$doc_name = cb_get_pagename();

$temp_mail_id = @ $G_INPUT['tmpid'];
$category_id = @ $G_INPUT['bcid'];
$account_id = @ $G_INPUT['baid'];
$draft_id = array_key_exists('draft_id', $G_INPUT) ? $G_INPUT['draft_id']
    : '';

$temp_mail_data = $mail_logic->getTemporaryMailData($temp_mail_id, true);
$preview_account_id = $temp_mail_data['temp_account_id'];
$action = cb_at($G_INPUT, 'action', '');

// 再送信用ファイル情報取得
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);
$reuse_files = grn_init_attached_file($doc_name . $tmp_key,
    $send_logic->makeReuseFiles($temp_mail_data, true));

$use_editor = $utility->checkAvailableForRicheditor();
$mail_for_view = [
    'aid'             => $preview_account_id,
    'cid'             => $category_id,
    'mid'             => $temp_mail_data['id'],
    'to'              => $temp_mail_data['to'],
    'cc'              => $temp_mail_data['cc'],
    'bcc'             => $temp_mail_data['bcc'],
    'subject'         => $temp_mail_data['subject'],
    'data'            => $temp_mail_data['data'],
    'attached_files'  => $reuse_files,
    'sign'            => $temp_mail_data['sign_data'],
    'html_data'       => $use_editor ? $temp_mail_data['html_data'] : '',
    'give_open_check' => $temp_mail_data['confirmation_request'] && $send_set
    // 開封確認メールの要求する/しない
];
//from page compose mail
//not signature position

if (is_null($action) == true or $action == "") {
    $t->assign('page_send', true);
} else {
    $mail_id = @ $G_INPUT['mid'];
    $t->assign('mid', $mail_id);
    //from reply page and reply all page
    //have signature position
    if ($action == "reply" or $action == "reply-all") {
        $t->assign('action', $action);
    }
    //from forward page
    //have signature position
    elseif ($action == "forward") {
        $t->assign('action', $action);
    } elseif ($action == "reuse") {
        $t->assign('action', $action);
        $t->assign('page_send', true);
    }
}

$sign_id = $temp_mail_data['sign_id'];
$mail_for_view['sign_id'] = $sign_id;

//------------------

$t->assign('app_name', $G_mail_name);

if (is_string($action) && (strlen($action) > 0)) {
    $temp_action = ($action === 'reuse') ? 'resend' : $action;
    $page_title = grn_get_page_display_name('mail/' . str_replace("-", "_",
            $temp_action),
        ['app_name' => $G_mail_name]);
} else {
    $page_title = grn_get_page_display_name('mail/send',
        ['app_name' => $G_mail_name]);
}


//------------------

// ユーザー情報
$user_for_view = [
    'uid'  => $user->getOID(),
    'name' => $user->get('display_name')
];


$page_index = 'mail/index';
$site_position = [];
$site_position[] = $utility->getIndexSitePosition($user, $account_id);

//------------------

// アカウント設定数を取得する
$account_data_count = $personal_config->getAccountDataCount();
if ($account_data_count == 0) {
    // サーバー設定数を取得する
    $server_data_count = $system_config->getServerDataCount();
    if (($account_data_count == 0) && ($server_data_count == 0)) {
        $no_setting = '3';
    } elseif ($account_data_count == 0) {
        $no_setting = '2';
    } elseif ($server_data_count == 0) {
        $no_setting = '1';
    } else {
        $no_setting = '0';
    }
} else {
    // SmartyValidate should be initialized when an input form is there.
    require('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($doc_name, true);

    $b_sign_display_none = true;
    include('_preview.csp');

    // カレントフォルダ
    $t->assign('category', $category_for_view);

    // アカウントリスト
    foreach ($account_list_for_view as $key => $account) {
        $account_list_for_view[$key]['label'] = '"'
                                                . $account_from_list_for_view[$key]['from']
                                                . '" <'
                                                . $account_from_list_for_view[$key]['email']
                                                . ">";
    }
    $t->assign('user_account', $account_list_for_view);

    // 差出人データリス
    $t->assign('from_data', $account_from_list_for_view);

    // 署名データリスト
    $t->assign('sign_value', $signature_data_list_for_view);

    // position list signature
    $t->assign('sign_position', $signature_position_list_for_view);

    // アカウントごとの署名名称リスト
    $t->assign('user_sign', $account_signature_name_list_for_view);

    if (count($account_signature_name_list_for_view) > 0) {
        $t->assign('sign_set', 1); //サインの設定がある:1 なし:0
    }

    $site_position[] = [
        'page' => $page_index,
        'name' => $page_folder,
        'aid'  => $account_id,
        'cid'  => $category_id
    ];
}

$site_position[] = [
    'page' => '',
    'name' => $page_title
];

//--------------------------------------------------------------

$t->assign('uid', $user->getOID());

// 0はOK、1はメールサーバーがまだ 2はアカウントがまだ 3は両方まだ
$t->assign('no_setting', $no_setting);

// page title
$t->assign('page_title', $page_title);

// user_data
$t->assign('user', $user_for_view);

$t->assign('aid', $preview_account_id);
$t->assign('baid', $account_id);
$t->assign('bcid', $category_id);
$t->assign('tempid', $temp_mail_id);
$t->assign('draft_id', $draft_id);
$t->assign('preview', $b_preview);

$t->assign('mail', $mail_for_view);
$t->assign('position', $signature_default_position);
$t->assign('send_set', $send_set); //開封確認メール on:1 off:0


$t->assign('site_position', $site_position);

// リッチエディタ
$t->assign('use_editor', $use_editor);

require_once('grn/ui.csp');
$cm = GRN_UIConfigManager::getInstance();
$ui_config = $cm->getUserConfig($user);
$t->assign('rows', $ui_config->getAreaHeight());
$t->assign('cols', $ui_config->getAreaWidth() * 2 - 3);

//generate upload ticket
include('grn/_upload_prepend.csp');

// Smarty実行
$t->display("{$doc_name}.tpl");

