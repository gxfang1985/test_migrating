<?php
global $G_INPUT;
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();
$user_id = $user->getOID();
if ( ! is_object($user)) {
    cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
}

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();

if ($user === false) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

// Smarty をインスタンス化
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

require_once('mail/utility.csp');
$utility = GRN_Mail_Utility::getInstance();
$system_config = $utility->getSystemConfig();
$personal_config = $utility->getPersonalConfig($user);
$folder_logic = $utility->getFolderLogic();
$mail_logic = $utility->getMailLogic();

// メールの使用が許可されているか
$system_config->getGeneralSetting($general_settings);
$disable_mail = $general_settings['disable_mail'];
$check_mail_on_login = $general_settings['check_mail_on_login'];

// 総メールサイズ上限を取得
$system_config->getSizeUserLimitSetting($size_settings, $user_id);

// ユーザーの総メールサイズを取得
$mail_size = $personal_config->getMailSize(null);

// 総サイズチェック
$size_over = false;
if (($size_settings['user_limit_' . $user_id] >= 0)
    && ($mail_size >= $size_settings['user_limit_' . $user_id] * 1024 * 1024)
) {
    $size_over = true;
}
$t->assign('size_over', $size_over);

//------------------

require_once('grn/ui.csp');
$uim = GRN_UIConfigManager::getInstance();
$system_ui_config = $uim->getSystemConfig();
$user_ui_config = $uim->getUserConfig($user);
unset($uim);

// インライン表示設定
$inline = $user_ui_config->getInlineSetting();

// 送受信記録を使用する設定
$use_address_history = $system_config->canUserUseHistory();

// 開封確認設定
$send_set = $system_config->canUserUseConfirm()
            && ($personal_config->useConfirmMail());

$name_type = null;
if ($use_address_history) {
    $name_type = 'history';
}

//------------------

$mail_id = @ $G_INPUT['mid'];

$mail_data = $mail_logic->getMailData($mail_id, true);
$category_id = $mail_data['folder_id'];
$folder_data = $folder_logic->getFolderData($category_id);
$account_id = $folder_data['account_id'];
$account_data = $personal_config->getAccountData($account_id, false, false);
if (is_array($account_data) && array_key_exists('deleted', $account_data)) {
    $t->assign('account_deleted', $account_data['deleted']);
}

$page_title = grn_get_current_page_display_name();

$from = $mail_data['from'];
$to = $mail_data['to'];
$cc = $mail_data['cc'];
$bcc = $mail_data['bcc'];

// メール情報
$mail_for_view = [
    'aid'             => $account_id, //user_acount_ID
    'cid'             => $category_id, //category_ID
    'mid'             => $mail_id,
    'from'            => $from,
    'ctime'           => $mail_data['send_ts'], //送信日時
    'to'              => $to,
    'cc'              => $cc,
    'bcc'             => $bcc,
    'subject'         => $mail_data['subject'],
    'html_data'       => strlen($mail_data['html_data']) > 0,
    'sent'            => $mail_data['sent'],
    'source_id'       => $mail_data['source_id'],
    'no_source'       => ! $mail_data['source_flag'],
    'open'            => 3,
    'give_open_check' => $mail_data['confirmation_request'] && $send_set,
    'status'          => 1
];


// 送信メールの場合はHTMLメールがデフォルト
if ($mail_for_view['sent'] && $mail_for_view['html_data']) {
    $data = $mail_data['html_data'];
} elseif ($mail_for_view['html_data']) {
    $data = GRN_Mail_Utility::washHtmlMail($mail_data['html_data'], false);
} else {
    $data = $mail_data['data'];
}

if ( ! is_string($data)) {
    $data = '';
}

$sign_data = $mail_data['sign_data'];
if (is_string($sign_data) && 0 < strlen($sign_data)) {
    $len = strlen($data);
    $action = $mail_data['action'];
    if ($len > 0) {
        $sign_data_temp
            = $personal_config->getSignatureData($mail_data['sign_id'],
            true, false);
        $sign_position = $sign_data_temp != null ? $sign_data_temp['position']
            : null;
        if ($sign_position === null || $sign_position == "") {
            $sign_position = 'bottom';
        }
        $temp_datas = [];
        $origin_mail_data = $mail_logic->getMailData($mail_id, true);
        if (is_null($origin_mail_data['origin_mid']) == true
            || intval($origin_mail_data['origin_mid']) == 0 or $action
                                                               == "reuse"
        ) {
            $sign_position = 'bottom';
        } else {
            $mail_data_origin
                = $mail_logic->getMailData($origin_mail_data['origin_mid'],
                true);
        }
        $send_logic = $utility->getSendLogic();
        //reply, reply all
        if ($action == "reply" or $action == "reply-all") {
            $original_data = GRN_Mail_Utility::makeReplyInfo($mail_data_origin,
                false);
        }

        //forward
        if ($action == "forward") {
            $original_data
                = GRN_Mail_Utility::makeForwardInfo($mail_data_origin, false);
        }

        if ($mail_for_view['html_data']) {
            $ret = [];
            $original_mid = $origin_mail_data['origin_mid'];
            GRN_Mail_Utility::insertSignData($data, $sign_data, [
                'action'       => $action,
                'position'     => $sign_position,
                'original_mid' => $original_mid
            ], $ret, $utility);
            $data = $ret['data'];
        } else {
            if ($sign_position == 'bottom') {
                $data .= "\r\n";
                $data .= $sign_data;
            } else {
                $data = preg_replace("'(?:\r\n|\r|\n)'s", "\r\n", $data);
                $temp_datas = explode(trim($original_data), $data);
                if (count($temp_datas) > 1) {
                    $temp_datas[0] = preg_replace("'(\r\n)$'s", "",
                            $temp_datas[0])
                                     . "\r\n"
                                     . preg_replace("'^\r\n|\r\n$'s", "",
                            $sign_data)
                                     . "\r\n";
                    $data = implode(trim($original_data), $temp_datas);
                } else {
                    $data = preg_replace("'(\r\n)$'s", "", $data)
                            . "\r\n"
                            . preg_replace("'^\r\n|\r\n$'s", "", $sign_data)
                            . "\r\n";
                }
            }
        }
    } else {
        $data .= $sign_data;
    }
}
$mail_for_view['data'] = $data;

// 添付ファイル
if (array_key_exists('files', $mail_data)) {
    $mail_for_view['attach_files'] = $mail_data['files'];
}

$mail_for_view['attach_file_type'] = $mail_data['source_flag'] ? 1 : 2;

// フォルダ情報
$folder_detail = false;
include('_folder_common.csp');

//------------------

// アカウント情報
include('_account_common.csp');


// 全アカウントのフォルダ情報取得
$folder_list_for_view = [];
$folder_list_for_view['data'] = [];
if (is_array($account_list)) {
    foreach (array_keys($account_list) as $key) {
        if ($key == $account_id) {
            $temp_cid = $category_id;
        } else {
            // 受信箱データ取得
            $temp_data = $folder_logic->getSpecialFolderData($key,
                GRN_MAIL_FOLDER_CODE_INBOX, false);
            $temp_cid = $temp_data['id'];
        }
        $folder_list_for_view['data'][] = ['aid' => $key, 'cid' => $temp_cid];
    }
}
$folder_list_for_view['selected'] = $account_id;

//------------------

// ソート設定をプロファイルからロード
$sort = null;
$sort_time = null;
$reverse = null;
$result = $personal_config->getSortCondition($sort, $sort_time, $reverse);
assert('$result');

$sort_key = $sort;

if ($sort === 'time') {
    if ($folder_code == GRN_MAIL_FOLDER_CODE_TRASH) {
        $sort_time = 'dtime';
    }

    $sort_key = $sort_time;
} elseif ($sort === 'name') {
    if (($folder_code == GRN_MAIL_FOLDER_CODE_SENTBOX)
        || ($folder_code == GRN_MAIL_FOLDER_CODE_UNSENT)
    ) {
        $sort_key = 'to';
    } else {
        $sort_key = 'from';
    }

    // 表示する形式
    $name_format = $personal_config->getListNameFormatSetting();
    if ($name_format == 'name') {
        $sort_key .= '_name';
    } elseif ($name_format == 'email') {
        $sort_key .= '_email';
    }
}

// ソート用比較対象文字列
$sort_var = $mail_data['send_ts']->unix_ts;
// $sort_key : rtime/ctime/dtime/subject/from_name/from_email/to_name/to_email/size/from/to
$sort_column = substr($mail_logic->_getSortColumnName($sort_key), 4);
if (strcmp($sort_key, 'rtime') == 0 || strcmp($sort_key, 'ctime') == 0
    || strcmp($sort_key, 'dtime') == 0
) {
    $sort_var = $mail_data[$sort_column]->unix_ts;
} elseif (strcmp($sort_key, 'size') == 0) {
    $sort_var = $mail_data[$sort_column];
} else {
    $simple_mail_data = $mail_logic->getMailData($mail_id, false, false, false);
    $sort_var = $simple_mail_data[substr($sort_column, 9)];
}

// 前後の情報取得
$pn_ids = $mail_logic->getPreviousNextIDs($user, $category_id, $mail_id,
    $sort_key,
    $sort_var, $reverse);
//echo '<pre>';print_r($pn_ids);echo '</pre>';

// previous
$previous_navi_params_for_view
    = $mail_logic->getPreviousNextNaviParams('previous', $pn_ids);
if ($previous_navi_params_for_view) {
//    $previous_navi_params_for_view['page_params']['cid'] = $category_id;
    $t->assign('previous_navi_params', $previous_navi_params_for_view);
}

$next_navi_params_for_view = $mail_logic->getPreviousNextNaviParams('next',
    $pn_ids);
if ($next_navi_params_for_view) {
//    $next_navi_params_for_view['page_params']['cid'] = $category_id;
    $t->assign('next_navi_params', $next_navi_params_for_view);
}

//------------------

$t->assign('inline', $inline);

$t->assign('category', $category_for_view);

// アカウントごとのフォルダ表示切替のためのフォルダ一覧データ
$t->assign('folder_list', $folder_list_for_view);

// page title
$t->assign('page_title', $page_title);

// user_account
$t->assign('user_account', $account_list_for_view);

// set_data
$t->assign('mail', $mail_for_view);

// メール使用不許可フラグ
$t->assign('disable_mail', $disable_mail);
$t->assign('name_type', $name_type);

$t->assign('name_format', 'full');

$t->assign('send_set', $send_set); //開封確認メール on:1 off:0

//------------------------------------------------------------

// page title
if (isset($mail_for_view['subject'])
    && mb_strlen($mail_for_view['subject']) > 0
) {
    $t->assign('page_title', $mail_for_view['subject']);
} else {
    $mail_for_view['subject'] = cb_msg('grn.mail', 'no_title');
    $t->assign('page_title', $mail_for_view['subject']);
}
$t->assign(
    'site_position',
    [
        $utility->getIndexSitePosition($user, $account_id),
        [
            'page' => $page_index,
            'name' => $page_folder,
            'aid'  => $account_id,
            'cid'  => $category_id,
            'sf'   => 1
        ],
        [
            'page' => '',
            'name' => $page_title
        ]
    ]
);

// get Trash personal setting
$use_trash = $personal_config->useTrash();
$folder_type = null;
if (isset($category_for_view) && is_array($category_for_view)) {
    $folder_type = $category_for_view['type'];
}
$no_confirm = true;
if ( ! $use_trash || ($use_trash && $folder_type == 4)) {
    $no_confirm = false;
}
$subject = '';
if (isset($mail_for_view['subject'])
    && mb_strlen($mail_for_view['subject']) > 0
) {
    $subject = $mail_for_view['subject'];
}
//delete info
$delete_info = [
    'title'      => grn_get_page_display_name('mail/draft_delete',
        ['app_name' => $G_mail_name]),
    'page'       => 'mail/draft_delete.tpl',
    'no_confirm' => $no_confirm,
    'data'       => [
        'mail'         => [
            'aid'     => $account_id,
            'cid'     => $category_id,
            'mid'     => $mail_id,
            'subject' => $subject
        ],
        'app_name'     => $G_mail_name,
        'folder_type'  => $folder_type,
        'truncate_len' => GRN_MAIL_SUBJECT_TRUNCATE_WIDTH,
        'use_garbage'  => $use_trash
    ],
    'handler'    => 'lnk_delete',
];
$t->assign('delete_info', $delete_info);
// star
require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$use_star = $star_logic->isActive();
$use_star = $use_star && ($folder_code != GRN_MAIL_FOLDER_CODE_TRASH);
$t->assign('use_star', $use_star);
$t->assign('star_infos',
    $star_logic->getStatusByIDs($user, GRN_MAIL_MODULE_ID, [$mail_id]));

// Smarty実行
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


