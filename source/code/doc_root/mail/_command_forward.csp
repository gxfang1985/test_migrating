<?php

use grn\grn\JSONResponse;

global $G_INPUT;
$aid = @ $G_INPUT['aid'];
$origin_mid = @ $G_INPUT['mid'];
$account_id = @ $G_INPUT['user_account'];
$category_id = @ $G_INPUT['cid'];
$user_id = @ $G_INPUT['uid'];
$command = @ $G_INPUT['cmd'];
$action = @ $G_INPUT['action'];

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $user = $uum->getUser($user_id);
    if ( ! is_object($user)) {
        cb_throw_error(E_GRN_USER_NOT_FOUND);
    }

    // STM-402
    $G_mail_login = $uum->getLoginUser();
    if ( ! is_object($G_mail_login) || ! is_a($G_mail_login, 'cb_user')) {
        require_once('fw/error_code.csp');
        cb_throw_error(E_COMMON_ACCOUNT_INVALIDATED);
    }
    $_personal = $_utility->getPersonalConfig($G_mail_login);
    $_account = $_personal->getAccountData($account_id);
    if ( ! array_key_exists('user_id', $_account)
         || $_account['user_id'] != $G_mail_login->getOID()
    ) {
        require_once('mail/error_code.csp');
        cb_throw_error(E_GRN_MAIL_ACCOUNT_DATA_NOT_FOUND);
    }
    // END STM-402

    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    require_once('mail/utility.csp');
    $utility = GRN_Mail_Utility::getInstance();
    $send_logic = $utility->getSendLogic();

    // メールの使用が許可されているか
    $system_config = $utility->getSystemConfig();
    $personal_config = $utility->getPersonalConfig($user);
    $system_config->getGeneralSetting($general_settings);
    $disable_mail = $general_settings['disable_mail'];
    $check_mail_on_login = $general_settings['check_mail_on_login'];
    if ($disable_mail) {
        // メール使用停止中
        cb_throw_error(E_GRN_MAIL_CANNOT_USE);
    }

    // 総メールサイズをチェック
    $system_config->getSizeUserLimitSetting($size_settings, $user_id);
    $mail_size = $personal_config->getMailSize(null);
    if ((0 <= $size_settings['user_limit_' . $user_id])
        && ($mail_size >= $size_settings['user_limit_' . $user_id] * 1024
                          * 1024)
    ) {
        cb_throw_error(E_GRN_MAIL_LIMIT, null,
            ['limit' => $size_settings['user_limit_' . $user_id] . 'MB']);
    }

    $to = '';
    $cc = '';
    $bcc = '';
    if (array_key_exists('to', $G_INPUT)) {
        $to = $G_INPUT['to'];
    }
    if (array_key_exists('cc', $G_INPUT)) {
        $cc = $G_INPUT['cc'];
    }
    if (array_key_exists('bcc', $G_INPUT)) {
        $bcc = $G_INPUT['bcc'];
    }

    if (strlen($to) > 0 || strlen($cc) > 0 || strlen($bcc) > 0
        || strcmp($command, 'draft') === 0
    ) {
        $G_INPUT['recipient'] = 'dummy';
    }

    // selected signature OID
    $sign_id = '';
    if (array_key_exists('user_sign' . $account_id, $G_INPUT)) {
        $sign_id = $G_INPUT['user_sign' . $account_id];
    }

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $page_path = cb_get_pagename();
    $page_dir = dirname($page_path);
    $page_name = basename($page_path);
    $target_name = $page_dir . '/' . substr($page_name, 8);
    SmartyValidate::register_form($target_name);

    $json = JSONResponse::create();

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        require_once('mail/include_send.csp');

        $properties = [];
        $properties['subject'] = @ $G_INPUT['subject'];
        $properties['to'] = @ $G_INPUT['to'];
        $properties['cc'] = @ $G_INPUT['cc'];
        $properties['bcc'] = @ $G_INPUT['bcc'];
        $properties['sign_data'] = @ $G_INPUT['sign_value'];
        $properties['confirmation_request'] = @ $G_INPUT['give_open_check'];

        // for rich editor
        if (array_key_exists('editor', $G_INPUT) && $G_INPUT['editor']) {
            require_once('grn/controller.csp');
            $washed_data = grn_wash_script_without_style_attribute($G_INPUT['data']);
            $properties['data'] = grn_strip_tags($washed_data);
            $properties['html_data'] = $washed_data;
        } else {
            $properties['data'] = $G_INPUT['data'];
        }

        // 署名ID
        $properties['sign_id'] = $sign_id;

        // attached files
        require_once('grn/controller.csp');
        $tmp_key = grn_get_temporary_key();
        $files = grn_get_attached_files($target_name . $tmp_key);

        require_once('grn/upload.csp');
        $upload_files
            = GRN_UploadFile::getUploadedFiles(@$G_INPUT['upload_ticket'],
            @$G_INPUT['upload_fileids'], true);
        foreach ($upload_files as $fid => $file) {
            $files[$fid] = $file;
        }

        if (array_key_exists('position', $G_INPUT)) {
            $position = $G_INPUT['position'];
        } else {
            $position = "";
        }
        if ($command == 'send') {
            // メールの送信
            $mail_logic = $utility->getMailLogic();
            $personal_config = $utility->getPersonalConfig($user);
            $personal_config->getGeneralSetting($general_settings);
            if ($position != "top" || is_null($action) == true
                || strlen(trim($action)) == 0
                || $action == "reuse"
            ) {
                $data = null;
                $position = "bottom";
            } else {
                $position = "top";
                $data = "";
                $temp_datas = [];
                if (array_key_exists('editor', $G_INPUT)
                    && $G_INPUT['editor']
                ) {
                    include('_command_direct_send.csp');
                } else {
                    $mail_data_origin = $mail_logic->getMailData($origin_mid,
                        true);
                    // reply, reply-all
                    if ($action == "reply" || $action == "reply-all") {
                        $original_data
                            = GRN_Mail_Utility::makeReplyInfo($mail_data_origin,
                            false);
                    }
                    if ($action == "forward") {
                        $original_data
                            = GRN_Mail_Utility::makeForwardInfo($mail_data_origin,
                            false);
                    }
                    $temp_data = cb_at($G_INPUT, 'data', '');
                    $temp_data = preg_replace("'(?:\r\n|\r|\n)'s", "\r\n",
                        $temp_data);
                    $temp_datas = explode($original_data, $temp_data);
                    if (count($temp_datas) > 1) {
                        $temp_datas[0] = preg_replace("'(\r\n)$'s", "",
                                $temp_datas[0])
                                         . "\r\n"
                                         . preg_replace("'(\r\n)$'s", "",
                                $properties['sign_data'])
                                         . "\r\n";
                        $data = implode($original_data, $temp_datas);
                    } else {
                        $data = cb_at($G_INPUT, 'data', '');
                        $data = preg_replace("'(\r\n)$'s", "", $data)
                                . "\r\n"
                                . $properties['sign_data'];
                    }
                }
            }
            $mail_id = $send_logic->sendMail($user, $account_id, $properties,
                $files, null, $action, $origin_mid, null, true,
                $general_settings['save_sentfile'], true, null, false,
                $position, $data);
            $utility->addIncrementalSearch($to, $cc, $bcc);

            $redirect_page = (isset($is_popup) && $is_popup)
                ? 'mail/close_popup' : 'mail/index';
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url($redirect_page,
                        ['aid' => $aid, 'cid' => $category_id])
                ]);
                cb_safe_exit();
            }
            cb_redirect($redirect_page, ['aid' => $aid, 'cid' => $category_id]);
        } elseif ($command == 'preview') {
            $redirect_page = (isset($is_popup) && $is_popup)
                ? 'mail/preview_popup' : 'mail/preview';
            // メールの保存
            $mail_id = $send_logic->savePreviewMail($user, $account_id,
                $properties, $files, null, null, $action, $origin_mid);
            if ($action == "forward")// from page forward
            {
                if (defined('AJAX_REQUEST')) {
                    $json->response([
                        'link' => cb_get_full_url($redirect_page, [
                            'baid'          => $aid,
                            'bcid'          => $category_id,
                            'tmpid'         => $mail_id,
                            'sign_position' => $position,
                            'mid'           => $origin_mid,
                            'action'        => $action
                        ])
                    ]);
                    cb_safe_exit();
                }
                cb_redirect($redirect_page, [
                    'baid'          => $aid,
                    'bcid'          => $category_id,
                    'tmpid'         => $mail_id,
                    'sign_position' => $position,
                    'mid'           => $origin_mid,
                    'action'        => $action
                ]);
            } else // from page reuse
            {
                if (defined('AJAX_REQUEST')) {
                    $json->response([
                        'link' => cb_get_full_url($redirect_page, [
                            'baid'  => $aid,
                            'bcid'  => $category_id,
                            'tmpid' => $mail_id,
                            'mid'   => $origin_mid
                        ])
                    ]);
                    cb_safe_exit();
                }
                cb_redirect($redirect_page, [
                    'baid'  => $aid,
                    'bcid'  => $category_id,
                    'tmpid' => $mail_id,
                    'mid'   => $origin_mid
                ]);
            }
        } elseif ($command == 'draft') {
            // メールの保存
            $properties['data'] = $G_INPUT['data'];
            $mail_id = $send_logic->saveMail($user, $account_id,
                $properties, $files, null, null, $action, $origin_mid);

            // 下書きフォルダへ遷移
            require_once('mail/utility.csp');
            $utility = GRN_Mail_Utility::getInstance();
            $folder_logic = $utility->getFolderLogic();
            $folder_data = $folder_logic->getSpecialFolderData($aid,
                GRN_MAIL_FOLDER_CODE_UNSENT, false);

            $redirect_page = (isset($is_popup) && $is_popup)
                ? 'mail/close_popup' : 'mail/index';
            if (defined('AJAX_REQUEST')) {
                $json->response([
                    'link' => cb_get_full_url($redirect_page,
                        ['aid' => $aid, 'cid' => $folder_data['id']])
                ]);
                cb_safe_exit();
            }
            cb_redirect($redirect_page,
                ['aid' => $aid, 'cid' => $folder_data['id']]);
        }
    } elseif (defined('AJAX_REQUEST')) {
        header(CB_ERROR_HEADER . 'error_validation');
        $json->response([
            'validation'    => false,
            'error_message' => $t->fetch('grn/show_validation_errors.tpl')
        ]);
        cb_safe_exit();
    }
}


