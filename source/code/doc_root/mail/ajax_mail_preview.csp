<?php

use grn\grn\JSONResponse;
use grn\mail\HtmlMailInlineContents;
use grn\mail\HtmlMailProcessor;


$uum = cb_lwc_uum();
$login = $uum->getLoginUser();

global $G_INPUT, $G_mail_name;
$mail_id = @$G_INPUT['mail_id'];

require_once('mail/utility.csp');
$utility = GRN_Mail_Utility::getInstance();
$system_config = $utility->getSystemConfig();
$system_config->getGeneralSetting($general_settings);
$disable_mail = $general_settings['disable_mail'];
$mail_logic = $utility->getMailLogic();
$mail_data = $mail_logic->getMailData($mail_id, true, false, false);
$confirm_type = 0;
$can_show_html = true;
if ((strcmp($mail_data['sent'], '1') != 0)
    && $general_settings['mail_display_plaintext']
) {
    $can_show_html = false;
}

$mail_for_view = [];
$data = (strlen($mail_data['html_data']) > 0 && $can_show_html)
    ? $mail_data['html_data'] : $mail_data['data'];
if (strlen($mail_data['html_data']) > 0 && $can_show_html) {
    $show_picture = $utility->isHtmlMailShowPicture($login->getOID(), $mail_id,
        $mail_data['sent']);
    $files = new HtmlMailInlineContents(cb_at($mail_data, 'files', []),
        $mail_id);
    $data = (new HtmlMailProcessor())->process($mail_data['html_data'],
        $files, $show_picture);
}

$folder_logic = $utility->getFolderLogic();
$personal_config = $utility->getPersonalConfig($login);
$category_id = $mail_data['folder_id'];
$folder_data = $folder_logic->getFolderData($category_id);
$account_id = $folder_data['account_id'];
if ($mail_data['confirmation_request']) {
    $message_id = null;
    if (is_string($mail_data['message_id'])
        && (strlen($mail_data['message_id']) > 0)
    ) {
        $message_id = $mail_data['message_id'];
    }
    if ( ! is_null($message_id)) {
        $response_list = $mail_logic->getConfirmResponseDataList($login,
            $message_id);
        if (is_array($response_list) && (count($response_list) > 0)) {
            $response_list_for_view = [];
            foreach ($response_list as $key => $response_data) {
                $response_list_for_view[$key] = [
                    'mid'     => $response_data['mail_id'],
                    'from'    => $response_data['from'],
                    'subject' => $response_data['subject'],
                    'ctime'   => $response_data['send_ts'],
                ];
            }
            $mail_for_view['confirm']['response_mails']
                = $response_list_for_view;
        }
        $confirmation_status = $mail_logic->confirmMail($account_id, $mail_id);
        $personal_config->getConfirmSetting($confirm_settings);
        if ($confirm_settings['response'] == 'manual'
            || $confirm_settings['response'] == 'auto'
        ) {
            if (is_null($confirmation_status)
                || ($confirmation_status == 'none')
                || ($confirmation_status == 'opened')
            ) {
                $confirm_type = '1';
            }
        }

        if (strncasecmp($confirmation_status, 'sent', 4) == 0) {
            $confirm_type = '2';
        }
    }
} elseif ($mail_data['confirmation_response']) {
    // 開封確認要求メールリスト取得
    if (is_string($mail_data['confirmation_org_message_id'])
        && (strlen($mail_data['confirmation_org_message_id']) > 0)
    ) {
        $request_list_for_view = [];
        $request_list = $mail_logic->getConfirmRequestDataList($login,
            $mail_data['confirmation_org_message_id'], $mail_id);
        if (is_array($request_list) && (count($request_list) > 0)) {
            foreach ($request_list as $key => $request_data) {
                $request_list_for_view[$key] = [
                    'mid'     => $request_data['mail_id'],
                    'subject' => $request_data['subject'],
                ];
            }
        }
        $mail_for_view['confirm']['org_mail'] = $request_list_for_view;
    }
}
$from = $mail_data['from'];

$mail_data['body'] = $mail_data['data'];
// change mail from unread to read
$mail_logic->readMail($mail_id);

global $G_state_set;
$G_state_set->set('copyright_should_be_written', false);
$G_state_set->set('html_should_be_closed', false);

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$t->assign('app_name', $G_mail_name);

$mail_data['span_mode'] = "";
require_once $t->_get_plugin_filepath('function', 'grn_format');
$temp = smarty_function_grn_format($mail_data, $t);
$count = 0;
$rows = count(explode("<br>", $temp));

$use_trash = $personal_config->useTrash();
$delete_info = [
    'title'      => grn_get_page_display_name('mail/delete',
        ['app_name' => $G_mail_name]),
    'page'       => 'mail/delete.tpl',
    'no_confirm' => false,
    'data'       => [
        'mail'           => [
            'aid'     => $account_id,
            'cid'     => $category_id,
            'mid'     => $mail_id,
            'subject' => $mail_data['subject']
        ],
        'folder_type'    => 1,
        'truncate_len'   => GRN_MAIL_SUBJECT_TRUNCATE_WIDTH,
        'use_garbagebox' => $use_trash
    ],
    'handler'    => 'lnk_delete',
];
$t->assign('delete_info', $delete_info);

$folder_code = is_array($folder_data) ? $folder_data['code'] : '';
switch ($folder_code) {
    case GRN_MAIL_FOLDER_CODE_ROOT:
        $folder_type = '0';
        break;
    case GRN_MAIL_FOLDER_CODE_INBOX:
        $folder_type = '1';
        break;
    case GRN_MAIL_FOLDER_CODE_SENTBOX:
        $folder_type = '2';
        break;
    case GRN_MAIL_FOLDER_CODE_UNSENT:
        $folder_type = '3';
        break;
    case GRN_MAIL_FOLDER_CODE_TRASH:
        $folder_type = '4';
        break;
    default:
        $folder_type = '5';
        break;
}
$t->assign('folder_type', $folder_type);
$t->assign('from', $from);
$t->assign('data', $data);
$t->assign('mail_id', $mail_id);
$t->assign('rows', $rows);
$t->assign('div_id', "div_" . $mail_id);
$t->assign('note_id', "note_" . $mail_id);
$t->assign('flag', "flag_" . $mail_id);
$t->assign('confirm_type', $confirm_type);
$t->assign('mail_for_view', $mail_for_view);
$t->assign('mail_data', $mail_data);
$t->assign('disable_mail', $disable_mail);
$t->assign('can_show_html', $can_show_html);
if (array_key_exists("from_portlet", $G_INPUT)) {
    $t->assign('from_portlet', true);
}

$json = JSONResponse::create();
$json->response(['content' => $t->fetch('mail/ajax_mail_preview.tpl')]);

