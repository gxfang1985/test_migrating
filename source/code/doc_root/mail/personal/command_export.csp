<?php
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$user = $uum->getLoginUser();
if ( ! is_object($user)) {
    cb_throw_error(E_COMMON_AUTHENTICATION_FAILED);
}

require_once('mail/utility.csp');
$utility = GRN_Mail_Utility::getInstance();

global $G_INPUT;
if ( ! isset($G_INPUT['ncid']) || (strlen($G_INPUT['ncid']) == 0)) {
    cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
}

$folder_id = $G_INPUT['ncid'];
$folder_logic = $utility->getFolderLogic();
$folder_data = $folder_logic->getFolderData($folder_id, false, true);
if (is_null($folder_data['user_id'])
    || ($folder_data['user_id'] != $user->getOID())
) {
    cb_throw_error(E_GRN_MAIL_FOLDER_DATA_NOT_FOUND);
}

$format_type = $G_INPUT['format'];

if ($format_type == 'eml') {
    require_once('mail/resources.csp');
    $folder_code = is_array($folder_data) ? $folder_data['code'] : '';
    $mail_app = $utility->getMailApp();
    $filename = '';
    switch ($folder_code) {
        case GRN_MAIL_FOLDER_CODE_ROOT:
            $filename = cb_msg($mail_app->getModuleId(),
                GRN_MAIL_FOLDER_CODE_ROOT);
            break;
        case GRN_MAIL_FOLDER_CODE_INBOX:
            $filename = cb_msg($mail_app->getModuleId(),
                GRN_MAIL_FOLDER_CODE_INBOX);
            break;
        case GRN_MAIL_FOLDER_CODE_SENTBOX:
            $filename = cb_msg($mail_app->getModuleId(),
                GRN_MAIL_FOLDER_CODE_SENTBOX);
            break;
        case GRN_MAIL_FOLDER_CODE_UNSENT:
            $filename = cb_msg($mail_app->getModuleId(),
                GRN_MAIL_FOLDER_CODE_UNSENT);
            break;
        case GRN_MAIL_FOLDER_CODE_TRASH:
            $filename = cb_msg($mail_app->getModuleId(),
                GRN_MAIL_FOLDER_CODE_TRASH);
            break;
        default:
            if (array_key_exists('name', $folder_data)) {
                $filename = $folder_data['name'];
            }
            break;
    }

    // replace special character that can not create file name
    $pattern = '/["\?\*\/\\:|<>]/';
    $filename = preg_replace($pattern, '_', $filename);
    $filename = str_replace('\\', '_', $filename);

    // httpヘッダーを先に出力
    cb_prepare_download($filename . '.zip', 'application/x-zip-compressed',
        false);

    // 出力をバッファリングして、指定チャンクサイズ毎にフラッシュする。
    // バッファリングを行わないと、リモートサービスを経由した場合に処理が遅くなる。
    ob_start(null, 8192);

    // In an folder, each mail is write by each file that extension .eml of user
    $mail_logic = $utility->getMailLogic();
    $mail_logic->exportMailDatasToEmlFile($user, $folder_id);

    // バッファリングしている内容を書き出し、バッファリングをオフにする
    ob_end_flush();
} else {
    // httpヘッダーを先に出力
    cb_prepare_download('mbox', 'application/octet-stream', false);

    // 出力をバッファリングして、指定チャンクサイズ毎にフラッシュする。
    // バッファリングを行わないと、リモートサービスを経由した場合に処理が遅くなる。
    ob_start(null, 8192);

    // mbox形式に変換して、echoで出力する
    $mail_logic = $utility->getMailLogic();
    $mail_logic->exportMailDatasToMboxFile($user, $folder_id);

    // バッファリングしている内容を書き出し、バッファリングをオフにする
    ob_end_flush();
}


