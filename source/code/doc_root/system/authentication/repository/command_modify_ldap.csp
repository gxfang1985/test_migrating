<?php

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'system/authentication/repository/modify_ldap';
    SmartyValidate::register_form($target_name);

    // Create Parameter Translation Map
    $translation_map = [
        'rmid'              => '_rmid',
        //Repository Method ID
        'display_name'      => 'display_name',
        //Repository Method Display Name
        'server'            => 'server',
        //LDAP Server
        'port'              => 'port',
        //LDAP Port Number
        'ssl'               => 'ssl',
        //LDAP SSL Setting
        'use_anonymous'     => 'use_anonymous',
        //LDAP Use Anonymous Account
        'account'           => 'account',
        //LDAP Account
        'password'          => 'password',
        //LDAP Password
        'retype'            => 'retype',
        //LDAP Password
        'base_dn'           => 'base_dn',
        //LDAP Base DN
        'search_filter'     => 'search_filter',
        //LDAP Search Filter
        'authenticate_type' => 'authenticate_type',
        //LDAP Authenticate Type
        'affix_condition'   => 'affix_condition',
        'affix_type'        => 'affix_type',
        'affix_strip'       => 'affix_strip',
    ];

    // Do Parameter Translation
    $properties = [];
    require_once('fw/string_util.csp');
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ cb_trim($G_INPUT[$view_name]);
    }
    $properties['affix_string'] = cb_at($G_INPUT,
        'affix_string'); // don't trim it

    //Check Use Anonymous Flag
    if ($properties['use_anonymous'] == 1) {
        //Escape Smarty Validation
        $dummy = 'dummy';
        $properties['account'] = $dummy;
        $properties['password'] = $dummy;
        $properties['retype'] = $dummy;
    }

    //Check Use Affix condition
    if ( ! $properties['affix_condition']) {
        $dummy = 'dummy';
        $properties['affix_string'] = $dummy;
    }

    // validate after a POST
    if (SmartyValidate::is_valid($properties, $target_name)) {

        //Check Use Anonymous Flag
        if ($properties['use_anonymous'] == 1) {
            //Restore Properties
            $dummy = 'dummy';
            $properties['account'] = "";
            $properties['password'] = "";
            $properties['retype'] = "";
        }

        //Check Use Affix condition
        if ( ! $properties['affix_condition']) {
            $properties['affix_string'] = "";
        } else {
            // check affix_type
            if ($properties['affix_type'] !== 'suffix') {
                $properties['affix_type'] = 'prefix';
            }
        }

        require_once('grn/authentication.csp');
        $authentication_service = GRN_Authentication_Service::getInstance();

        //Get Repository Method
        $repository_method
            = $authentication_service->getRepositoryMethod($properties['_rmid']);

        //Check Driver
        \grn\system\authentication\AvailableDriverChecker::getInstanceOfRepositoryMethod()
                                                         ->canModify(
                                                             $repository_method->getDriverType(),
                                                             GRN_AUTH_REPOSITORY_LDAP
                                                         );

        //Get Previous Driver Settings
        $driver_settings = $repository_method->get('driver_settings');
        if ($driver_settings) {
            $driver_settings = cb_unserialize($driver_settings,
                ["allowed_classes" => false]);
        }

        // check use ssl
        if ($properties['ssl'] == 1) {
            $properties['port'] = "";
        }

        //Create Infomation Login Driver Settings
        $driver_settings['server']
            = $properties['server'];            //LDAP Server
        $driver_settings['port']
            = $properties['port'];              //LDAP Port Number
        $driver_settings['ssl']
            = (int)$properties['ssl'];              //LDAP SSL Setting
        $driver_settings['use_anonymous']
            = $properties['use_anonymous'];     //LDAP Use Anonymous Account
        $driver_settings['account']
            = $properties['account'];           //LDAP Account
        $driver_settings['base_dn']
            = $properties['base_dn'];           //LDAP Base DN
        $driver_settings['search_filter']
            = $properties['search_filter'];     //LDAP Search Filter
        $driver_settings['authenticate_type']
            = $properties['authenticate_type']; //LDAP Authenticate Type
        $driver_settings['affix_condition'] = $properties['affix_condition'];
        $driver_settings['affix_type'] = $properties['affix_type'];
        $driver_settings['affix_string'] = $properties['affix_string'];
        $driver_settings['affix_strip'] = $properties['affix_strip'];

        if ($properties['use_anonymous'] != 1) {
            if ($properties['password'] !== '***************'
                && $properties['retype'] !== '---------------'
            ) {
                if ($properties['password'] !== $properties['retype']) {
                    cb_throw_error(E_GRN_PASSWORD_NOT_MATCH);
                }
                if (strlen($properties['password']) == 0) {
                    cb_throw_error(E_GRN_MISSING_MANDATORY);
                }
                $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();
                $driver_settings['password']
                    = $crypt_util->encrypt2($properties['password']);
            }
        }

        //Modify Repository Method
        $authentication_service = GRN_Authentication_Service::getInstance();
        $authentication_service->modifyRepositoryMethod($properties['_rmid'],
            $properties['display_name'], $driver_settings);

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        cb_redirect('system/authentication/repository_method_view',
            ['rmid' => $properties['_rmid']]);
    } else {
        //Assign Template Name
        $t->setPageInfo('../_repository_method_modify');

        //include sharing codes with command_*
        include('../_repository_method_modify.csp');

        //Rewrite Repository Method Infomation
        $repository_method_for_view
            = &$t->get_template_vars('repository_method');
        $repository_method_for_view['amid']
            = @ $G_INPUT['amid'];
        $repository_method_for_view['display_name']
            = @ $G_INPUT['display_name'];
        $repository_method_for_view['driver_settings']['server']
            = @ $G_INPUT['server'];
        $repository_method_for_view['driver_settings']['port']
            = @ $G_INPUT['port'];
        $repository_method_for_view['driver_settings']['use_anonymous']
            = @ $G_INPUT['use_anonymous'];
        $repository_method_for_view['driver_settings']['account']
            = @ $G_INPUT['account'];
        $repository_method_for_view['driver_settings']['password']
            = @ $G_INPUT['password'];
        $repository_method_for_view['driver_settings']['base_dn']
            = @ $G_INPUT['base_dn'];
        $repository_method_for_view['driver_settings']['search_filter']
            = @ $G_INPUT['search_filter'];
        $repository_method_for_view['driver_settings']['authenticate_type']
            = @ $G_INPUT['authenticate_type'];
        $repository_method_for_view['driver_settings']['affix_condition']
            = @ $G_INPUT['affix_condition'];
        $repository_method_for_view['driver_settings']['affix_type']
            = @ $G_INPUT['affix_type'];
        $repository_method_for_view['driver_settings']['affix_string']
            = @ $G_INPUT['affix_string'];
        $repository_method_for_view['driver_settings']['affix_strip']
            = @ $G_INPUT['affix_strip'];

        //Display Previous Page
        $t->display('system/authentication/repository_method_modify.tpl');
    }
}


