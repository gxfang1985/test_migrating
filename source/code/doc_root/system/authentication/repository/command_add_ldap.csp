<?php

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'system/authentication/repository/add_ldap';
    SmartyValidate::register_form($target_name);

    // Create Parameter Translation Map
    $translation_map = [
        'rmid'              => '_rmid',
        //Repository Method ID
        'display_name'      => 'display_name',
        //Repository Method Display Name
        'server'            => 'server',
        //LDAP Server
        'port'              => 'port',
        //LDAP Port Number
        'ssl'               => 'ssl',
        //LDAP SSL Setting
        'use_anonymous'     => 'use_anonymous',
        //LDAP Use Anonymous Account
        'account'           => 'account',
        //LDAP Account
        'password'          => 'password',
        //LDAP Password
        'retype'            => 'retype',
        //LDAP Password
        'base_dn'           => 'base_dn',
        //LDAP Base DN
        'search_filter'     => 'search_filter',
        //LDAP Search Filter
        'authenticate_type' => 'authenticate_type',
        //LDAP Authenticate Type
        'affix_condition'   => 'affix_condition',
        'affix_type'        => 'affix_type',
        'affix_strip'       => 'affix_strip',
    ];

    // Do Parameter Translation
    $properties = [];
    require_once('fw/string_util.csp');
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ cb_trim($G_INPUT[$view_name]);
    }
    $properties['affix_string'] = cb_at($G_INPUT,
        'affix_string'); // don't trim it

    //Check Use Anonymous Flag
    if ($properties['use_anonymous'] == 1) {
        //Escape Smarty Validation
        $dummy = 'dummy';
        $properties['account'] = $dummy;
        $properties['password'] = $dummy;
        $properties['retype'] = $dummy;
    }

    //Check Use Affix condition
    if ( ! $properties['affix_condition']) {
        $dummy = 'dummy';
        $properties['affix_string'] = $dummy;
    }

    // validate after a POST
    if (SmartyValidate::is_valid($properties, $target_name)) {

        //Check Use Anonymous Flag
        if ($properties['use_anonymous'] == 1) {
            //Restore Properties
            $dummy = 'dummy';
            $properties['account'] = "";
            $properties['password'] = "";
            $properties['retype'] = "";
        }

        //Check Use Affix condition
        if ( ! $properties['affix_condition']) {
            $properties['affix_string'] = "";
        } else {
            // check affix_type
            if ($properties['affix_type'] !== 'suffix') {
                $properties['affix_type'] = 'prefix';
            }
        }

        // check use ssl
        if ($properties['ssl'] == 1) {
            $properties['port'] = "";
        }

        //Create Infomation Repository Driver Settings
        $driver_settings = [
            'server'            => $properties['server'],
            //LDAP Server
            'port'              => $properties['port'],
            //LDAP Port Number
            'ssl'               => (int)$properties['ssl'],
            //LDAP SSL Setting
            'use_anonymous'     => $properties['use_anonymous'],
            //LDAP Use Anonymous Account
            'account'           => $properties['account'],
            //LDAP Account
            'base_dn'           => $properties['base_dn'],
            //LDAP Base DN
            'search_filter'     => $properties['search_filter'],
            //LDAP Search Filter
            'authenticate_type' => $properties['authenticate_type'],
            //LDAP Authenticate Type
            'affix_condition'   => $properties['affix_condition'],
            'affix_type'        => $properties['affix_type'],
            'affix_string'      => $properties['affix_string'],
            'affix_strip'       => $properties['affix_strip'],
        ];
        if ($properties['use_anonymous'] != 1) {
            if ($properties['password'] !== $properties['retype']) {
                cb_throw_error(E_GRN_PASSWORD_NOT_MATCH);
            }
            if (strlen($properties['password']) == 0) {
                cb_throw_error(E_GRN_MISSING_MANDATORY);
            }
            $crypt_util = GRN_Authentication_Crypt_Utility::getInstance();
            $driver_settings['password']
                = $crypt_util->encrypt2($properties['password']);
        }

        //Add Repository Method
        $authentication_service = GRN_Authentication_Service::getInstance();
        $authentication_service->addRepositoryMethod($properties['display_name'],
            GRN_AUTH_REPOSITORY_LDAP,
            $driver_settings);

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        cb_redirect('system/authentication/repository_method_list');
    } else {
        //Assign Template Name
        $t->setPageInfo('../_repository_method_add2');

        //Rewrite Repository Method Infomation
        $assign_input_values = [
            'display_name'      => cb_at($G_INPUT, 'display_name'),
            'server'            => cb_at($G_INPUT, 'server'),
            'port'              => cb_at($G_INPUT, 'port'),
            'ssl'               => cb_at($G_INPUT, 'ssl'),
            'use_anonymous'     => cb_at($G_INPUT, 'use_anonymous'),
            'account'           => cb_at($G_INPUT, 'account'),
            'base_dn'           => cb_at($G_INPUT, 'base_dn'),
            'search_filter'     => cb_at($G_INPUT, 'search_filter'),
            'authenticate_type' => cb_at($G_INPUT, 'authenticate_type'),
            'affix_condition'   => cb_at($G_INPUT, 'affix_condition'),
            'affix_type'        => cb_at($G_INPUT, 'affix_type'),
            'affix_string'      => cb_at($G_INPUT, 'affix_string'),
            'affix_strip'       => cb_at($G_INPUT, 'affix_strip')
        ];
        $t->assign($assign_input_values);

        //include sharing codes with command_*
        include('../_repository_method_add2.csp');

        //Display Previous Page
        $t->display('system/authentication/repository_method_add2.tpl');
    }
}


