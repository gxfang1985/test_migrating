<?php
require_once(cb_basedir()
             . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');

$COOKIES = ['CB_CLOGIN', 'CB_PLOGIN', 'CB_API', 'GRN_Account', session_name()];

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'system/authentication/authenticate/add_cybozu';
    SmartyValidate::register_form($target_name);

    // Check parameter
    if ( ! array_key_exists('cookie_mode', $G_INPUT)) {
        $G_INPUT['cookie_mode'] = null;
    }
    if ( ! array_key_exists('expire_time', $G_INPUT)) {
        $G_INPUT['expire_time'] = null;
    }

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {

        // Create Parameter Translation Map
        $translation_map = [
            'amid'          => '_amid',
            //Authenticate Method ID
            'rmid'          => '_rmid',
            //Repository Method ID
            'display_name'  => 'display_name',
            //Authenticate Method Display Name
            'cookie_name'   => 'cookie_name',
            //Cookie Name
            'cookie_domain' => 'cookie_domain',
            //Cookie Domain
            'cookie_mode'   => 'cookie_mode',
            //Cookie Mode
            'password'      => 'password',
            //Passwowrd
            'retype'        => 'retype',
            //Retype Passwowrd
            'expire_time'   => 'expire_time',
            //Expire Time
        ];

        // Do Parameter Translation
        $properties = [];
        foreach ($translation_map as $view_name => $model_name) {
            $properties[$model_name] = @ cb_trim($G_INPUT[$view_name]);
        }

        //Check Cookie Name
        foreach ($COOKIES as $name) {
            if (strcasecmp($name, $properties['cookie_name']) == 0) {
                cb_throw_error(E_GRN_CMMN_AUTH_INVALID_COOKIE_NAME);
            }
        }

        //Create Infomation Authenticate Driver Settings
        $driver_settings['cookie_mode']
            = $properties['cookie_mode'];     //Cookie Mode
        $driver_settings['expire_time']
            = $properties['expire_time'];     //Expire Time
        if ($properties['password'] !== '***************'
            && $properties['retype'] !== '---------------'
        ) {
            if ($properties['password'] !== $properties['retype']) {
                cb_throw_error(E_GRN_PASSWORD_NOT_MATCH);
            }
            $driver_settings['password'] = $properties['password'];
            $driver_settings['raw_password'] = true;
        }

        if ($driver_settings['cookie_mode'] == "1") {
            if (strlen($properties['cookie_name']) <= 0) {
                $properties['cookie_name'] = GRN_AUTH_OPEN2_COOKIE;
            }
            $driver_settings['cookie_name'] = $properties['cookie_name'];
        } else {
            $driver_settings['cookie_name'] = GRN_AUTH_OPEN2_COOKIE;
        }

        //Parse Cookie Domain
        $driver_settings['cookie_domain'] = "";
        $driver_settings['cookie_path'] = "";
        $domain_elements = explode(';',
            $properties['cookie_domain']);
        if (count($domain_elements) > 0) {
            $pos = strpos($domain_elements[0], "domain=");
            if ($pos !== false) {
                $domain = substr($domain_elements[0], $pos + strlen("domain="));
                if (strlen($domain) > 0) {
                    $driver_settings['cookie_domain'] = $domain;
                }
            } else {
                $driver_settings['cookie_domain'] = $domain_elements[0];
            }
        }
        if (count($domain_elements) > 1
            && strlen($driver_settings['cookie_domain']) > 0
        ) {
            $pos = strpos($domain_elements[1], "path=");
            if ($pos !== false) {
                $path = substr($domain_elements[1], $pos + strlen("path="));
                if (strlen($path) > 0) {
                    $driver_settings['cookie_path'] = $path;
                }
            }
        }

        //  v2モードなら、他にオープン統合認証v2が登録されていないか確認する
        if (strcmp($properties['cookie_mode'], '1') === 0) {
            require_once(cb_basedir()
                         . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
            $v2
                = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthMethod();
            if ( ! is_null($v2)) {
                cb_throw_error(E_GRN_CMMN_AUTH_V2_ALREADY_EXISTS);
            }
        }

        //Get Repository Method
        require_once('grn/authentication.csp');
        $authentication_service = GRN_Authentication_Service::getInstance();
        $repository_method
            = $authentication_service->getRepositoryMethod($properties['_rmid']);

        //Add Authenticate Method
        $authentication_service->addAuthenticateMethod($properties['display_name'],
            GRN_AUTH_AUTHENTICATE_CYBOZU,
            $driver_settings, $repository_method);

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        cb_redirect('system/authentication/authenticate_method_list');
    } else {
        //Assign Template Name
        $t->setPageInfo('../_authenticate_method_add2');

        //Rewrite Authenticate Method Infomation
        $assign_input_values = [
            'display_name'  => cb_at($G_INPUT, 'display_name'),
            'expire_time'   => cb_at($G_INPUT, 'expire_time'),
            'cookie_name'   => cb_at($G_INPUT, 'cookie_name'),
            'cookie_domain' => cb_at($G_INPUT, 'cookie_domain'),
            'cookie_mode'   => cb_at($G_INPUT, 'cookie_mode')
        ];
        $t->assign($assign_input_values);

        //include sharing codes with command_*
        include('../_authenticate_method_add2.csp');

        //Display Previous Page
        $t->display('system/authentication/authenticate_method_add2.tpl');
    }
}


