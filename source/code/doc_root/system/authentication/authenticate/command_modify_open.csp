<?php

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'system/authentication/authenticate/modify_open';
    SmartyValidate::register_form($target_name);

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        // Create Parameter Translation Map
        $translation_map = [
            'amid'          => '_amid',
            //Authenticate Method ID
            'rmid'          => '_rmid',
            //Repository Method ID
            'display_name'  => 'display_name',
            //Authenticate Method Display Name
            'cookie_domain' => 'cookie_domain',
            //Cookie Domain
            'cookie_path'   => 'cookie_path',
            //Cookie Path
            'password'      => 'password',
            //Passwowrd
            'retype'        => 'retype',
            //Retype Passwowrd
            'expire_time'   => 'expire_time',
            //Expire Time
        ];

        // Do Parameter Translation
        $properties = [];
        foreach ($translation_map as $view_name => $model_name) {
            $properties[$model_name] = @ $G_INPUT[$view_name];
        }

        require_once('grn/authentication.csp');
        $authentication_service = GRN_Authentication_Service::getInstance();

        //Get Authenticate Method
        $authentication_method
            = $authentication_service->getAuthenticateMethod($properties['_amid']);

        //Check Driver
        \grn\system\authentication\AvailableDriverChecker::getInstanceOfAuthenticateMethod()
                                                         ->canModify(
                                                             $authentication_method->getDriverType(),
                                                             GRN_AUTH_AUTHENTICATE_OPEN
                                                         );

        //Get Previous Driver Settings
        $driver_settings = $authentication_method->get('driver_settings');
        if ($driver_settings) {
            $driver_settings = cb_unserialize($driver_settings,
                ["allowed_classes" => false]);
        }

        //Create Infomation Login Driver Settings
        $driver_settings['cookie_domain']
            = $properties['cookie_domain'];   //Cookie Domain
        $driver_settings['cookie_path']
            = $properties['cookie_path'];     //Cookie Path
        $driver_settings['expire_time']
            = $properties['expire_time'];     //Expire Time
        if ($properties['password'] !== '***************'
            && $properties['retype'] !== '---------------'
        ) {
            if ($properties['password'] !== $properties['retype']) {
                cb_throw_error(E_GRN_PASSWORD_NOT_MATCH);
            }
            if ($properties['password'] !== '') {
                $driver_settings['password'] = md5($properties['password']);
            } else {
                $driver_settings['password'] = $properties['password'];
            }
        }

        //Get Repository Method
        $repository_method
            = $authentication_service->getRepositoryMethod($properties['_rmid']);

        //Modify Authenticate Method
        $authentication_service->modifyAuthenticateMethod(
            $properties['_amid'], $properties['display_name'], $driver_settings,
            $repository_method
        );

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        cb_redirect('system/authentication/authenticate_method_view',
            ['amid' => $properties['_amid']]);
    } else {
        //Assign Template Name
        $t->setPageInfo('../_authenticate_method_modify');

        //include sharing codes with command_*
        include('../_authenticate_method_modify.csp');

        //Rewrite Authenticate Method Infomation
        $authenticate_method_for_view
            = &$t->get_template_vars('authenticate_method');
        $authenticate_method_for_view['amid']
            = @ $G_INPUT['amid'];
        $authenticate_method_for_view['display_name']
            = @ $G_INPUT['display_name'];
        $authenticate_method_for_view['driver_settings']['expire_time']
            = @ $G_INPUT['expire_time'];
        $authenticate_method_for_view['driver_settings']['cookie_domain']
            = @ $G_INPUT['cookie_domain'];
        $authenticate_method_for_view['driver_settings']['cookie_path']
            = @ $G_INPUT['cookie_path'];
        $authenticate_method_for_view['rmid']
            = @ $G_INPUT['rmid'];

        //Display Previous Page
        $t->display('system/authentication/authenticate_method_modify.tpl');
    }
}


