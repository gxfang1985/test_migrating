<?php

require_once(cb_basedir()
             . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');

$COOKIES = ['CB_CLOGIN', 'CB_PLOGIN', 'CB_API', 'GRN_Account', session_name()];

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'system/authentication/authenticate/modify_cybozu';
    SmartyValidate::register_form($target_name);

    // Check parameter
    if ( ! array_key_exists('cookie_mode', $G_INPUT)) {
        $G_INPUT['cookie_mode'] = null;
    }
    if ( ! array_key_exists('expire_time', $G_INPUT)) {
        $G_INPUT['expire_time'] = null;
    }

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        // Create Parameter Translation Map
        $translation_map = [
            'amid'          => '_amid',
            //Authenticate Method ID
            'rmid'          => '_rmid',
            //Repository Method ID
            'display_name'  => 'display_name',
            //Authenticate Method Display Name
            'cookie_name'   => 'cookie_name',
            //Cookie Name
            'cookie_domain' => 'cookie_domain',
            //Cookie Domain
            'cookie_mode'   => 'cookie_mode',
            //Cookie Mode
            'password'      => 'password',
            //Passwowrd
            'retype'        => 'retype',
            //Retype Passwowrd
            'expire_time'   => 'expire_time',
            //Expire Time
        ];

        // Do Parameter Translation
        $properties = [];
        foreach ($translation_map as $view_name => $model_name) {
            $properties[$model_name] = @ cb_trim($G_INPUT[$view_name]);
        }

        //Check Cookie Name
        foreach ($COOKIES as $name) {
            if (strcasecmp($name, $properties['cookie_name']) == 0) {
                cb_throw_error(E_GRN_CMMN_AUTH_INVALID_COOKIE_NAME);
            }
        }

        require_once('grn/authentication.csp');
        $authentication_service = GRN_Authentication_Service::getInstance();

        //Get Authenticate Method
        $authentication_method
            = $authentication_service->getAuthenticateMethod($properties['_amid']);

        //Check Driver
        \grn\system\authentication\AvailableDriverChecker::getInstanceOfAuthenticateMethod()
                                                         ->canModify(
                                                             $authentication_method->getDriverType(),
                                                             GRN_AUTH_AUTHENTICATE_CYBOZU
                                                         );

        //Get Previous Driver Settings
        $driver_settings = $authentication_method->get('driver_settings');
        if ($driver_settings) {
            $driver_settings = cb_unserialize($driver_settings,
                ["allowed_classes" => false]);
        }

        //Create Infomation Authenticate Driver Settings
        $driver_settings['cookie_mode']
            = $properties['cookie_mode'];     //Cookie Mode
        $driver_settings['expire_time']
            = $properties['expire_time'];     //Expire Time
        if ($properties['password'] !== '***************'
            && $properties['retype'] !== '---------------'
        ) {
            if ($properties['password'] !== $properties['retype']) {
                cb_throw_error(E_GRN_PASSWORD_NOT_MATCH);
            }
            $driver_settings['password'] = $properties['password'];
            $driver_settings['raw_password'] = true;
        } elseif ( ! isset($driver_settings['raw_password'])
                   || ! $driver_settings['raw_password']
        ) {
            if ($driver_settings['cookie_mode'] == "1") {
                cb_throw_error(E_GRN_CMMN_AUTH_INVALID_PASSWORD);
            }
        }

        if ($driver_settings['cookie_mode'] == "1") {
            if (strlen($properties['cookie_name']) <= 0) {
                $properties['cookie_name'] = GRN_AUTH_OPEN2_COOKIE;
            }
            $driver_settings['cookie_name'] = $properties['cookie_name'];
        }

        //Parse Cookie Domain
        $driver_settings['cookie_domain'] = "";
        $driver_settings['cookie_path'] = "";
        $domain_elements = explode(';',
            $properties['cookie_domain']);
        if (count($domain_elements) > 0) {
            $pos = strpos($domain_elements[0], "domain=");
            if ($pos !== false) {
                $domain = substr($domain_elements[0], $pos + strlen("domain="));
                if (strlen($domain) > 0) {
                    $driver_settings['cookie_domain'] = $domain;
                }
            } else {
                $driver_settings['cookie_domain'] = $domain_elements[0];
            }
        }
        if (count($domain_elements) > 1
            && strlen($driver_settings['cookie_domain']) > 0
        ) {
            $pos = strpos($domain_elements[1], "path=");
            if ($pos !== false) {
                $path = substr($domain_elements[1], $pos + strlen("path="));
                if (strlen($path) > 0) {
                    $driver_settings['cookie_path'] = $path;
                }
            }
        }

        //  v2モードなら、他にオープン統合認証v2が登録されていないか確認する
        if (strcmp($properties['cookie_mode'], '1') === 0) {
            require_once(cb_basedir()
                         . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
            $v2
                = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthMethod();
            if (( ! is_null($v2))
                && (strcmp($v2->getOID(), $properties['_amid']) !== 0)
            ) {
                cb_throw_error(E_GRN_CMMN_AUTH_V2_ALREADY_EXISTS);
            }
        }

        //[Dezielink] Force remove sync user scheduling event when cookie mode is not v2
        require_once('dezielink/system_logic.csp');
        $dz_logic = GRN_DezieLink_SystemLogic::getInstance();
        $dz_logic->onOffAutoSyncUser($authentication_method,
            ! $dz_logic->getSyncUserAvailable());

        $of_logic = GRN_OfficeLink_SystemLogic::getInstance();
        $of_logic->onOffAutoSyncUser($authentication_method,
            ! $of_logic->getSyncUserAvailable());

        //Get Repository Method
        $repository_method
            = $authentication_service->getRepositoryMethod($properties['_rmid']);

        //Modify Authenticate Method
        $authentication_service->modifyAuthenticateMethod(
            $properties['_amid'], $properties['display_name'], $driver_settings,
            $repository_method
        );

        //[Dezielink] on/off scheduling event after modification depend on auth method.
        $dz_logic->onOffAutoSyncUser($authentication_method,
            ! $dz_logic->getSyncUserAvailable());
        $of_logic->onOffAutoSyncUser($authentication_method,
            ! $of_logic->getSyncUserAvailable());

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        cb_redirect('system/authentication/authenticate_method_view',
            ['amid' => $properties['_amid']]);
    } else {
        //Assign Template Name
        $t->setPageInfo('../_authenticate_method_modify');

        //include sharing codes with command_*
        include('../_authenticate_method_modify.csp');

        //Rewrite Authenticate Method Infomation
        $authenticate_method_for_view
            = &$t->get_template_vars('authenticate_method');
        $authenticate_method_for_view['amid']
            = @ $G_INPUT['amid'];
        $authenticate_method_for_view['display_name']
            = @ $G_INPUT['display_name'];
        $authenticate_method_for_view['driver_settings']['expire_time']
            = @ $G_INPUT['expire_time'];
        $authenticate_method_for_view['driver_settings']['cookie_name']
            = @ $G_INPUT['cookie_name'];
        $authenticate_method_for_view['driver_settings']['cookie_domain']
            = @ $G_INPUT['cookie_domain'];
        $authenticate_method_for_view['driver_settings']['cookie_mode']
            = @ $G_INPUT['cookie_mode'];
        $authenticate_method_for_view['rmid']
            = @ $G_INPUT['rmid'];

        //Display Previous Page
        $t->display('system/authentication/authenticate_method_modify.tpl');
    }
}


