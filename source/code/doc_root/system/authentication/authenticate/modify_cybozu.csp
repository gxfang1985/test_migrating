<?php

//Get Smarty Instance
require_once("grn/smarty.csp");
$t = $smarty;

// SmartyValidate should be initialized when an input form is there.
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('system/authentication/authenticate/modify_cybozu',
    true);

//Get Repository Method List
require_once('grn/authentication.csp');
$authentication_service = GRN_Authentication_Service::getInstance();
$repository_method_list = $authentication_service->getRepositoryMethodList();
if ( ! $repository_method_list) {
    $default_repository_method
        =& $authentication_service->getDefaultRepositoryMethod();
    $repository_method_list[$default_repository_method->getOID()]
        =& $default_repository_method;
}

//Create Parameter Translation Map for Repository Method List
$translation_map_repository_method = [
    'rmid'         => '_id',                  //Repository Method ID
    'display_name' => 'display_name',         //Repository Method Display Name
];

//Do Parameter Translation for Repository Method List
$repository_method_list_for_view = [];
foreach (array_keys($repository_method_list) as $repository_method_id) {
    $repository_method_for_view = [];
    foreach ($translation_map_repository_method as $view_name => $model_name) {
        switch ($model_name) {
            case '_id':
                $repository_method_for_view[$view_name] = $repository_method_id;
                break;
            case 'display_name':
                $display_name
                    = $repository_method_list[$repository_method_id]->get(GRN_AUTH_PROPERTY_DISPLAY_NAME);
                if ( ! $display_name) {
                    $driver_type
                        = $repository_method_list[$repository_method_id]->get(GRN_AUTH_PROPERTY_DRIVER_TYPE);
                    $driver_type_elements = explode('.', $driver_type);
                    $display_name = cb_msg($driver_type,
                        $driver_type_elements[4]);
                }
                $repository_method_for_view[$view_name] = $display_name;
                break;
            default:
                break;
        }
    }
    //Add Repository Method List for View
    $repository_method_list_for_view[$repository_method_id]
        = $repository_method_for_view;
}

//Create Expire Time Options
$expire_time_options = [
    [
        'value' => 10,
        'label' => '10' . cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'minute')
    ],
    [
        'value' => 30,
        'label' => '30' . cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'minute')
    ],
    [
        'value' => 60,
        'label' => '1' . cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'hour')
    ],
    [
        'value' => 180,
        'label' => '3' . cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'hour')
    ],
    [
        'value' => 360,
        'label' => '6' . cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'hour')
    ],
    [
        'value' => 720,
        'label' => '12' . cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'hour')
    ],
    [
        'value' => 1440,
        'label' => '1' . cb_msg(GRN_AUTH_AUTHENTICATE_CYBOZU, 'day')
    ],
];
foreach (array_keys($expire_time_options) as $index) {
    if ($expire_time_options[$index]['value']
        == $method['driver_settings']['expire_time']
    ) {
        $expire_time_options[$index]['selected'] = true;
    }
}

//Replace Cookie Domain
if (strlen($method['driver_settings']['cookie_domain']) > 0
    && strlen($method['driver_settings']['cookie_path']) > 0
) {
    $method['driver_settings']['cookie_domain'] .= ";path="
                                                   . $method['driver_settings']['cookie_path']
                                                   . ";";
}

// When the value of 'cookie_mode' is not defined it is regarded as old cybozu authentication
if ( ! isset($method['driver_settings']['cookie_mode'])) {
    $method['driver_settings']['cookie_mode'] = '2';
}

//Create Repository Method Options
foreach (array_keys($repository_method_list_for_view) as $repository_method_id) {
    $repository_method_options[] = [
        'value' => $repository_method_id,
        'label' => $repository_method_list_for_view[$repository_method_id]['display_name']
    ];
}
foreach (array_keys($repository_method_options) as $index) {
    if ($repository_method_options[$index]['value'] == $method['rmid']) {
        $repository_method_options[$index]['selected'] = true;
    }
}

//  オープン統合認証が他に登録されていないか確認する
$isV2Disable = false;
require_once(cb_basedir()
             . '/code/plugin/grn/common/authentication/authenticate/cybozu.csp');
$v2
    = plugin_grn_common_authentication_authenticate_cybozu::static_getV2AuthMethod();
if (( ! is_null($v2)) && (strcmp($v2->getOID(), $method['amid']) !== 0)) {
    $isV2Disable = true;
}
$t->assign('isV2Disable', $isV2Disable);

//Assign Display Infomation

//Login Driver Display Infomation
$t->assign('authenticate_method', $method);
//Display Infomation
$t->assign('display', $display);
//Expire Time Display Infomation
$t->assign('expire_time_options', $expire_time_options);
//Repository Method Display Infomation
$t->assign('repository_method_options', $repository_method_options);

// Ignore Licence Warnning
$t->skipWarning();

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("system/authentication/authenticate/modify_cybozu.tpl");


