<?php

$scid = @$G_INPUT['scid'];
$all = @$G_INPUT['all'];

if ($scid && ! $all) {
    $start_date = new CB_Date;
    $start_date->year = @$G_INPUT['start_year'];
    $start_date->month = @$G_INPUT['start_month'];
    $start_date->day = @$G_INPUT['start_day'];

    $end_date = new CB_Date;
    $end_date->year = @$G_INPUT['end_year'];
    $end_date->month = @$G_INPUT['end_month'];
    $end_date->day = @$G_INPUT['end_day'];

    require_once('fw/date.csp');
    $s_date_ex = new CB_DateEx($start_date);

    if ($s_date_ex->compare($end_date) > 0) {
        cb_throw_error(E_GRN_INVALID_START_END_DATE);
    }
}

$charset = 'SJIS';
if (array_key_exists('charset', $G_INPUT)) {
    $charset = $G_INPUT['charset'];
}
$put_title = @$G_INPUT['title'];

cb_prepare_download('calendar.csv', 'application/csv', false);

require_once('fw/csv.csp');
$csv = new CB_CSVWriter($charset);

require_once('grn/calendar.csp');

if ($put_title) {
    $line = [];
    $cs = GRN_CalendarService::getInstance();
    $line[] = $cs->getMessage('date');
    $line[] = $cs->getMessage('event_type');
    $line[] = $cs->getMessage('event_detail');
    $csv->writeLine($line);
}

$cm = GRN_CalendarManager::getInstance();
$c = $cm->getSystemCalendar($scid);
if ( ! $c) {
    cb_throw_error(E_GRN_CALENDAR_CALENDAR_NOT_FOUND);
}

if ($all) {
    $rowset = new CB_RowSet($c->getAttributeTable());
    $condition = $rowset->queryf("col_calendar='@S'", $scid);
    $rowset->addCondition($condition);
    $rowset->addOrderColumn('col_date, col_type, _id');
} else {
    $rowset = $c->getDaysInfo($start_date, $end_date);
}

while ($row = $rowset->iterate()) {
    $line = [];
    $date = $row->get('date');
    // The format of date and time is fixed.
    // It makes no difference which language/format a user/system administrator selects.
    // This specification could be changed someday.    
    $line[] = sprintf('%04d/%02d/%02d', $date->year, $date->month, $date->day);
    $line[] = $row->get('type');
    $line[] = $row->get('info');
    $csv->writeLine($line);
}

$csv->close();


