<?php
require_once('grn/smarty.csp');
$t = new GRN_Smarty();

// Validation check
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);

// force to register
$target_name = 'system/license/register';
SmartyValidate::register_form($target_name);

// validate after a POST
if (SmartyValidate::is_valid($G_INPUT, $target_name)) {

    $page_title = grn_get_current_page_display_name();
    $t->assign('page_title', $page_title);
    $t->assign('site_position', [
        [
            'page' => '',
            'name' => $page_title
        ]
    ]);

    require_once('grn/license_validator.csp');
    $license_key = _construct_license();

    if (false === $license_key) {
        // 登録キーの書式が異常です。
        cb_throw_error(E_GRN_LICENSE_INVALID_FORMAT);
    }

    $generator = new GRN_LicenseValidator;
    if (false === $generator->validate($license_key)) {
        // クラック対策
        sleep(5);
        // 登録キーの検証に失敗しました。
        cb_throw_error(E_GRN_LICENSE_FAIL_VARIDATION);
    }

    $customer = @$G_INPUT['customer'];
    if ($customer != $generator->getCustomerId()) {
        // お客様番号が一致しません。
        cb_throw_error(E_GRN_LICENSE_INVALIDE_CUSTOMER);
    }

    require_once('grn/license.csp');
    $license_info = $generator->getLicenseInfo();
    $lm = GRN_LicenseManager::getInstance();
    $logic = $lm->getLogic($license_info['type']);
    if ($logic === false) {
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_LICENSE_DONT_REGISTER);
    }
    $for_view = $logic->getPropertiesArray($license_info);

    $t->assign('key', $license_key);
    $t->assign('license', $for_view);

    // site position
    $page_admin = 'system/license/admin';
    $page_register = 'system/license/register';
    $page_title = grn_get_current_page_display_name();

    $t->assign(
        'site_position',
        [
            [
                'page' => $page_admin,
                'name' => grn_get_page_display_name($page_admin)
            ],
            [
                'page' => $page_register,
                'name' => grn_get_page_display_name($page_register)
            ],
            ['page' => "", 'name' => $page_title],
        ]
    );

    // the validation session is finished
    SmartyValidate::unregister_form($target_name);

    $t->display(cb_get_pagename() . '.tpl');
} else {
    // include sharing codes with command_*
    include('_register.csp');

    $name = 'license';
    for ($i = 1; $i <= 9; $i++) {
        $license[$name . $i] = cb_at($G_INPUT, $name . $i);
    }
    $t->assign($license);

    $t->assign('customer', cb_at($G_INPUT, 'customer'));

    $t->display($target_name . '.tpl');
}


function _construct_license()
{
    global $G_INPUT;

    $name = 'license';
    for ($i = 1; $i <= 9; $i++) {
        $token = @$G_INPUT[$name . $i];
        if (strlen($token) !== GRN_LICENSE_KEY_TOKEN_LENGTH) {
            return false;
        }

        $license[] = @$G_INPUT[$name . $i];
    }

    return implode('-', $license);
}


