<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    $validation = $G_INPUT;

    require_once('grn/system_mail.csp');
    $smm = GRN_SystemMailConfigManager::getInstance();

    if (@$validation['available']) {
        require_once('SmartyValidate.class.php');
        $target_name = 'system/external/mail';

        // Validation check
        SmartyValidate::connect($t);

        // force to register
        SmartyValidate::register_form($target_name);

        ////////////////////////////////////////
        // バリデーション用ダミーデータ設定
        ////////////////////////////////////////
        if (@$validation['smtp_auth'] == 'NONE') {
            $validation['smtp_user'] = 'dummy';

            if ( ! @$validation['is_pop_before_smtp']) {
                $validation['pop3_server'] = 'dummy';
                $validation['pop3_port'] = 1;
                $validation['pop3_user'] = 'dummy';
            }
        } else {
            $validation['pop3_server'] = 'dummy';
            $validation['pop3_port'] = 1;
            $validation['pop3_user'] = 'dummy';
            unset($G_INPUT['is_pop_before_smtp']);
        }

        $invalid = false;
        if ($smm->isAvailableBuiltinMailServer()
            && isset($validation['use_builtin'])
            && $validation['use_builtin'] === '1'
        ) {
            // set dummy data for validation
            $validation['smtp_user'] = 'dummy';
            $validation['smtp_server'] = 'dummy';
            $validation['smtp_port'] = 1;

            if (SmartyValidate::is_valid($validation, $target_name)) {
                $smm->setProperty('available', true);
                $smm->setProperty('use_builtin', true);
                if (defined('ON_FOREST')) {
                    //$smm->setProperty('mailaddress', $smm::BUILT_IN_SYSTEM_MAIL_ADDRESS );
                } else {
                    $smm->setProperty('mailaddress',
                        $validation['mailaddress']);
                }
                cb_redirect('system/common_list', ['id' => 'external']);
            } else {
                $invalid = true;
            }
        } else {
            $smm->setProperty('use_builtin', false);
        }

        if ( ! $invalid
             && SmartyValidate::is_valid($validation, $target_name)
        ) {
            require_once('fw/string_util.csp');
            require_once('grn/uum_util.csp');
            $uu = GRN_UumUtil::getInstance();

            $smm->setProperty('available', true);

            // SMTPサーバーの設定
            require_once('fw/mailserver_config.csp');
            $mailserver_config = CB_MailServerConfig::getInstance();
            if (strlen(cb_trim(@$G_INPUT['smtp_server'])) <= 0
                ||
                ! $mailserver_config->isValidHost($G_INPUT['smtp_server'])
            ) {
                cb_throw_error(E_GRN_EXTSERVER_INVALID_SMTP_MAILSERVER_NAME);
            }
            $smm->setProperty('smtp_server', @$G_INPUT['smtp_server']);

            // SMTPポートの設定
            if (0 > (int)@$G_INPUT['smtp_port']
                || 0xFFFF < (int)@$G_INPUT['smtp_port']
            ) {
                cb_throw_error(E_GRN_EXTSERVER_INVALID_SMTP_MAILSERVER_PORT);
            }
            $smm->setProperty('smtp_port', (int)@$G_INPUT['smtp_port']);

            $smm->setProperty('smtp_ssl',
                $G_INPUT['encrypted_connection'] == 'SSL' ? 1 : 0);
            $smm->setProperty('smtp_tls',
                $G_INPUT['encrypted_connection'] == 'TLS' ? 1 : 0);

            // メールアドレスの設定
            $smm->setProperty('mailaddress', @$G_INPUT['mailaddress']);

            // SMTPタイムアウトの設定
            $smm->setProperty('smtp_timeout', (int)@$G_INPUT['smtp_timeout']);

            // SMTP Authの設定
            $smm->setProperty('smtp_auth', @$G_INPUT['smtp_auth']);
            if (@$G_INPUT['smtp_auth'] != 'NONE') {
                if (strlen(cb_trim(@$G_INPUT['smtp_user'])) <= 0) {
                    cb_throw_error(E_GRN_EXTSERVER_EMPTY_SMTP_MAILSERVER_ACCOUNT);
                }
                $smm->setProperty('smtp_user', @$G_INPUT['smtp_user']);

                if ($uu->isValidPassword(@$G_INPUT['smtp_pass'])) {
                    $smm->setProperty('smtp_pass', @$G_INPUT['smtp_pass']);
                } else {
                    if ( ! $smm->getProperty('smtp_pass', $dummy)) {
                        $smm->setProperty('smtp_pass', '');
                    }
                }
            } else {
                $smm->removeProperty('smtp_user');
                $smm->removeProperty('smtp_pass');
            }

            // POP before SMTPの設定
            $is_pop_before_smtp = (bool)@$G_INPUT['is_pop_before_smtp'];
            $smm->setProperty('is_pop_before_smtp', $is_pop_before_smtp);
            if ($is_pop_before_smtp) {
                $smm->setProperty('pop_before_smtp_wait',
                    (int)@$G_INPUT['pop_before_smtp_wait']);
                $smm->setProperty('pop3_auth', @$G_INPUT['pop3_auth']);

                if (strlen(cb_trim(@$G_INPUT['pop3_server'])) <= 0) {
                    cb_throw_error(E_GRN_EXTSERVER_INVALID_POP3_MAILSERVER_NAME);
                }
                $smm->setProperty('pop3_server', @$G_INPUT['pop3_server']);

                if (0 > (int)@$G_INPUT['pop3_port']
                    || 0xFFFF < (int)@$G_INPUT['pop3_port']
                ) {
                    cb_throw_error(E_GRN_EXTSERVER_INVALID_POP3_MAILSERVER_PORT);
                }
                $smm->setProperty('pop3_port', (int)@$G_INPUT['pop3_port']);

                $smm->setProperty('pop3_ssl', (int)@$G_INPUT['pop3s']);

                if (strlen(cb_trim(@$G_INPUT['pop3_user'])) <= 0) {
                    cb_throw_error(E_GRN_EXTSERVER_EMPTY_POP3_MAILSERVER_ACCOUNT);
                }
                $smm->setProperty('pop3_user', @$G_INPUT['pop3_user']);
                if ($uu->isValidPassword(@$G_INPUT['pop3_pass'])) {
                    $smm->setProperty('pop3_pass', @$G_INPUT['pop3_pass']);
                } else {
                    if ( ! $smm->getProperty('pop3_pass', $dummy)) {
                        $smm->setProperty('pop3_pass', '');
                    }
                }

                $smm->setProperty('pop3_timeout',
                    (int)@$G_INPUT['pop3_timeout']);
            } else {
                $smm->removeProperty('pop_before_smtp_wait');
                $smm->removeProperty('pop3_auth');
                $smm->removeProperty('pop3_server');
                $smm->removeProperty('pop3_port');
                $smm->removeProperty('pop3_user');
                $smm->removeProperty('pop3_pass');
                $smm->removeProperty('pop3_timeout');
            }

            // 接続確認
            $smm->testConnect();

            SmartyValidate::unregister_form($target_name);

            cb_redirect('system/common_list', ['id' => 'external']);
        } else {
            $t->setPageInfo($target_name);

            $init = false;
            include('_mail.csp');

            $t->display($target_name . '.tpl');
        }
    } else {
        $smm->setProperty('available', false);
        cb_redirect('system/common_list', ['id' => 'external']);
    }
}


