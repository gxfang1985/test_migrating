<?php

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

require_once('fw/i18n.csp');

require_once('grn/logger.csp');
$config = GRN_Logging_SystemConfig::getInstance();

//Retention period
$retention_period = $config->getRetentionPeriod();
if (empty($retention_period)) {
    $retention_period = 3; //Default value is 0
}

$resources = [
    '1'  => '1 ' . cb_msg('grn.system.logging', 'year'),
    '2'  => '2 ' . cb_msg('grn.system.logging', 'years'),
    '3'  => '3 ' . cb_msg('grn.system.logging', 'years'),
    '4'  => '4 ' . cb_msg('grn.system.logging', 'years'),
    '5'  => '5 ' . cb_msg('grn.system.logging', 'years'),
    '6'  => '6 ' . cb_msg('grn.system.logging', 'years'),
    '7'  => '7 ' . cb_msg('grn.system.logging', 'years'),
    '8'  => '8 ' . cb_msg('grn.system.logging', 'years'),
    '9'  => '9 ' . cb_msg('grn.system.logging', 'years'),
    '10' => '10 ' . cb_msg('grn.system.logging', 'years')
];

$options = [];
foreach ($resources as $value => $label) {
    $selected = false;
    if ($value == $retention_period) {
        $selected = true;
    }
    $options[] = [
        'label'    => $label,
        'value'    => $value,
        'selected' => $selected
    ];
}

$retention_periods = [
    'name'    => 'retention_period',
    'options' => $options
];

//Export format
$export_format = $config->getExportFormat();
if (empty($export_format)) {
    $export_format = 'xlsx'; //Default value is xlsx
}

$resources = [
    'xlsx'       => cb_msg('grn.system.logging', 'xlsx'),
    'csv(utf-8)' => cb_msg('grn.system.logging', 'csv(utf-8)'),
    'csv(s-jis)' => cb_msg('grn.system.logging', 'csv(s-jis)'),
];

$options = [];
foreach ($resources as $value => $label) {
    $selected = false;
    if ($value == $export_format) {
        $selected = true;
    }
    $options[] = [
        'label'    => $label,
        'value'    => $value,
        'selected' => $selected
    ];
}

$export_formats = [
    'name'    => 'export_format',
    'options' => $options
];

//Get current timezone
require_once('grn/uum.csp');
$uum =& $G_container_base->getInstance('uum');
$login_user = $uum->getLoginUser();
$I18N = CB_I18N::getInstance();
$timezone_user = $I18N->getUserTimezone($login_user);
$timezone = cb_msg('fw.timezone', $timezone_user);
$timezone_sign = substr($timezone, 4, 1);
if ($timezone_sign == '+') {
    $timezone_sign = true;
} else {
    $timezone_sign = false;
}

$timezone_hour = substr($timezone, 5, 2);
$timezone_hour = intval($timezone_hour);

$timezone_minute = substr($timezone, 8, 2);
$timezone_minute = intval($timezone_minute);

//Export minute
$export_minute = $config->getExportMinute();
if (is_bool($export_minute)) {
    $export_minute = 0; //Default value is 0
}

//Export hour
$export_hour = $config->getExportHour();
if (is_bool($export_hour)) {
    $export_hour = 15; //Default value is 15
}

//Export day
$export_day = $config->getExportDay();
if (is_bool($export_day)) {
    $export_day = 6; //Default value is saturday
}

//UTC
$UTC_day = $export_day;
$UTC_hour = $export_hour;
$UTC_minute = $export_minute;

//Convert timezone
if ($timezone_sign) {
    $export_minute += $timezone_minute;
    if ($export_minute >= 60) {
        $export_minute -= 60;
        $export_hour++;
    }

    $export_hour += $timezone_hour;
    if ($export_hour >= 24) {
        $export_hour -= 24;
        $export_day++;
    }

    if ($export_day >= 7) {
        $export_day -= 7;
    }
} else {
    $export_minute -= $timezone_minute;
    if ($export_minute < 0) {
        $export_minute += 60;
        $export_hour--;
    }

    $export_hour -= $timezone_hour;
    if ($export_hour < 0) {
        $export_hour += 24;
        $export_day--;
    }

    if ($export_day < 0) {
        $export_day += 7;
    }
}

//Day
$resources = [
    '0' => cb_msg('grn.system.logging', 'sunday'),
    '1' => cb_msg('grn.system.logging', 'monday'),
    '2' => cb_msg('grn.system.logging', 'tuesday'),
    '3' => cb_msg('grn.system.logging', 'wednesday'),
    '4' => cb_msg('grn.system.logging', 'thursday'),
    '5' => cb_msg('grn.system.logging', 'friday'),
    '6' => cb_msg('grn.system.logging', 'saturday')
];

$options = [];
foreach ($resources as $value => $label) {
    $selected = false;
    if ($value == $export_day) {
        $selected = true;
    }
    $options[] = [
        'label'    => $label,
        'value'    => $value,
        'selected' => $selected
    ];
}

$export_days = [
    'name'    => 'export_day',
    'options' => $options
];

//Hour
$options = [];
for ($i = 0; $i < 24; $i++) {
    $selected = false;
    if ($i == $export_hour) {
        $selected = true;
    }
    $options[] = [
        'label'    => $i,
        'value'    => $i,
        'selected' => $selected
    ];
}

$export_hours = [
    'name'    => 'export_hour',
    'options' => $options
];

//Minute
$options = [];
for ($i = 0; $i < 12; $i++) {
    $selected = false;
    if (($i * 5) == $export_minute) {
        $selected = true;
    }
    $options[] = [
        'label'    => ($i * 5) < 10 ? '0' . ($i * 5) : ($i * 5),
        'value'    => ($i * 5),
        'selected' => $selected
    ];
}

$export_minutes = [
    'name'    => 'export_minute',
    'options' => $options
];

$UTC_day = $resources[$UTC_day];
$UTC_hour = $UTC_hour < 10 ? '0' . $UTC_hour : $UTC_hour;
$UTC_minute = $UTC_minute < 10 ? '0' . $UTC_minute : $UTC_minute;

//assign
$t->assign('config', [
    'retention_period' => $retention_periods,
    'export_format'    => $export_formats,
    'export_day'       => $export_days,
    'export_hour'      => $export_hours,
    'export_minute'    => $export_minutes,
    'UTC_day'          => $UTC_day,
    'UTC_hour'         => $UTC_hour,
    'UTC_minute'       => $UTC_minute
]);

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign('site_position', [['page' => '', 'name' => $page_title]]);

$t->display(cb_get_pagename() . ".tpl");
