<?php

use grn\grn\access\logic\AvailabilitySettingLogic;
use grn\grn\access\logic\InternalIpAddressLogic;
use grn\grn\access\bean\InternalIpAddress;
use grn\grn\access\utility\IpUtil;

require_once('grn/application.csp');
define('NUMBER_OF_COLUMNS_IN_CSV_FILE', 3);

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    $charset = cb_at($G_INPUT, 'charset', null);
    if (0 == strlen($charset)) {
        global $G_config_common;
        $charset = $G_config_common->get('I18N', 'default_external_encoding');
    }

    $skip = cb_at($G_INPUT, 'skip', null);

    $file_id = cb_at($G_INPUT, 'file_id', null);
    if (0 == strlen($file_id)) {
        cb_throw_error(E_GRN_CSV_FILE_NOT_FOUND);
    }

    //Check import files
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session
        = $session_manager->getSession('system/application/ip_address_import1');
    $files = $session->getFiles('import_files');
    if ( ! array_key_exists($file_id, $files)) {
        cb_throw_error(E_GRN_CSV_FILE_NOT_FOUND);
    }

    require_once('system/resources.csp');
    require_once('fw/csv.csp');
    $csv_reader = new CB_CSVReader($charset, $files[$file_id]->getPath());

    //Skip header
    if ($skip) {
        $csv_reader->readLine();
    }

    //Import new data
    $ip_setting_logic = new InternalIpAddressLogic();
    $log_params = [];
    $log_format = "ip_address:'%s'";
    $count_ip = 1;
    $array_ip_setting = [];
    while (false !== ($line = $csv_reader->readLine())) {
        if ($count_ip > AvailabilitySettingLogic::MAX_IP_NUMBER) {
            break;
        }
        if ( ! is_array($line)
             || (NUMBER_OF_COLUMNS_IN_CSV_FILE != count($line))
        ) {
            cb_throw_error(E_GRN_CSV_INCORRECT_COLUMNS);
        }

        $ip_version = IpUtil::validateIp($line[0]);
        if ($ip_version === false) {
            cb_throw_error(E_GRN_CSV_VALUE_INVALID);
        }

        if (strlen($line[1]) > 0
            && ! IpUtil::isValidCIDR($line[1], $ip_version)
        ) {
            cb_throw_error(E_GRN_CSV_VALUE_INVALID);
        }

        $ip_setting = new InternalIpAddress();
        $ip_setting->setIpAddress($line[0]);
        $ip_setting->setCidr($line[1]);
        $ip_setting->setMemo($line[2]);
        $array_ip_setting[] = $ip_setting;

        if (strlen($line[1]) > 0) {
            $log_params[] = sprintf($log_format,
                addslashes($line[0] . "/" . $line[1]));
        } else {
            $log_params[] = sprintf($log_format, addslashes($line[0]));
        }

        $count_ip++;
    }

    if (count($array_ip_setting) > 0) {
        $ip_setting_logic->deleteAll();
        $ip_setting_logic->insert($array_ip_setting);
    }

    // Write log
    require_once('grn/logger.csp');
    $logger_manager = CB_LoggerManager::getInstance();
    $_logger = $logger_manager->getLogger('grn.common');
    $log_msg = '[import] external_use_permit';
    if (count($log_params) > 0) {
        $log_msg = sprintf("{$log_msg} (%s)", implode(", ", $log_params));
    }
    $_logger->log(CB_LOGGER_NOTICE, $log_msg, 'import', 'external_use_permit');

    require_once('fw/error_handler.csp');
    $error_handler = CB_ErrorHandler::getInstance();
    $error_handler->removeHook('cb_csv_error_hook');
    unset($error_handler);

    foreach (array_keys($files) as $file_id) {
        $session->unsetFile('import_files', $file_id);
    }

    cb_redirect('system/application/external_access_detail');
}
