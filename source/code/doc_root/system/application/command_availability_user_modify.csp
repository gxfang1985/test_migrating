<?php

use grn\grn\access\utility\AppAvailabilityUtil;
use grn\grn\access\bean\Availability;
use grn\grn\access\logic\AvailabilitySettingLogic;
use grn\grn\Validate;

if (array_key_exists('REQUEST_METHOD', $_SERVER)
    && 0 == strcasecmp($_SERVER['REQUEST_METHOD'], 'POST')
) {
    if ( ! array_key_exists('id', $G_INPUT)
         || ! array_key_exists('type', $G_INPUT)
    ) {
        cb_redirect('system/application/availability_user_list');
    }
    $id = $G_INPUT['id'];
    $type = $G_INPUT['type'];
    $target_type_map = [
        'cb_user'      => Availability::USER,
        'cb_group'     => Availability::GROUP,
        'cb_role'      => Availability::STATIC_ROLE,
        'dynamic_role' => Availability::DYNAMIC_ROLE
    ];
    if (empty($type)
        || ! in_array(strtolower($type), array_keys($target_type_map))
    ) {
        cb_throw_error(E_GRN_CAN_NOT_CHANGE_SETTING);
    }
    if ($type != 'dynamic_role') {
        if ( ! Validate::isNumber($id) || $id < 1) {
            cb_throw_error(E_GRN_CAN_NOT_CHANGE_SETTING);
        }
    }

    $uum = cb_lwc_uum();
    //Add Availability Right
    if (isset($id) && isset($type)) {
        $external_setting
            = AvailabilitySettingLogic::getExternalAccessSetting();
        $app_setting_logic = new AvailabilitySettingLogic();
        $apps_availability = $app_setting_logic->getByTargetId($id,
            $target_type_map[$type])->getAppsAvailability();
        if (count($apps_availability) === 0) {
            cb_throw_error(E_GRN_CAN_NOT_CHANGE_SETTING);
        }
        $apps_active = $app_setting_logic->getActiveAppIds();

        $apps = array_filter(cb_at($G_INPUT, 'appIds', []),
            function ($app_id) {
                global $apps_active;

                return in_array($app_id, $apps_active);
            });
        $app_for_external = array_fill_keys(cb_at($G_INPUT, 'ext_appIds',
            []), true);
        $available_apps
            = array_fill_keys(array_keys(AppAvailabilityUtil::$appIdsPrefix),
            false);
        $available_apps = array_merge($available_apps, $app_for_external);
        $apps_active = array_merge(array_fill_keys($apps_active,
            false), array_fill_keys($apps, true));
        $apps_log = [];
        $application_settings = [];
        foreach ($apps_active as $app_id => $is_active_app) {
            $application_settings[$app_id]
                = [
                'internal' => AppAvailabilityUtil::ACCESS_DENIED,
                'external' => AppAvailabilityUtil::ACCESS_DENIED
            ];
            $log_app_key = cb_at(AppAvailabilityUtil::$appIdsPrefix,
                $app_id);
            $apps_log[$log_app_key] = AppAvailabilityUtil::APP_USE_PROHIBITED;

            if ($is_active_app) {
                $application_settings[$app_id]['internal']
                    = AppAvailabilityUtil::ACCESS_ALLOWED;
                $apps_log[$log_app_key]
                    = AppAvailabilityUtil::APP_USE_UNPROHIBITED;

                if ((int)$external_setting
                    === AvailabilitySettingLogic::ACCESS_TYPE_UNRESTRICTED
                ) {
                    $application_settings[$app_id]['external']
                        = AppAvailabilityUtil::ACCESS_ALLOWED;
                } elseif (array_key_exists($app_id, $available_apps)
                          && $available_apps[$app_id]
                ) {
                    $application_settings[$app_id]['external']
                        = AppAvailabilityUtil::ACCESS_ALLOWED;
                }
                if ($app_id !== 'cellular'
                    && $application_settings[$app_id]['external']
                       === AppAvailabilityUtil::ACCESS_DENIED
                ) {
                    $apps_log[$log_app_key]
                        = AppAvailabilityUtil::APP_USE_EXTERNAL_PROHIBITED;
                }
            }
        }
        $str_log_body = http_build_query($apps_log, null, ",");
        $str_log_body = str_replace("=", ":", $str_log_body);
        $log_key_map = [
            'cb_user'      => 'user',
            'cb_group'     => 'group',
            'cb_role'      => 'static_role',
            'dynamic_role' => 'dynamic_role'
        ];
        $item_log = [$log_key_map[$type] . "_{$id}" => $str_log_body];

        $availability = new Availability();
        $availability->setCreationTime(time());
        $availability->setAppsAvailability(['availability' => $application_settings]);
        $availability->setTarget($id);

        $app_setting_logic->deleteByTargetId($id, $target_type_map[$type]);
        $app_setting_logic->insert($availability, $target_type_map[$type]);

        //write log
        if (count($item_log) > 0) {
            require_once('grn/logger.csp');
            $logger_manager = CB_LoggerManager::getInstance();
            $_logger = &$logger_manager->getLogger('grn.common');
            $_logger->noticeEx('modify', 'availability_user_modify', $item_log);
        }
    }

    cb_redirect('system/application/availability_user_list');
}
