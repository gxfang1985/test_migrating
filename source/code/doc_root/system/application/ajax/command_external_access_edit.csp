<?php

use grn\grn\access\logic\InternalIpAddressLogic;
use grn\grn\access\bean\InternalIpAddress;
use grn\grn\access\utility\IpUtil;
use grn\grn\Validate;
use grn\grn\access\logic\AvailabilitySettingLogic;

if (strcasecmp(cb_at($_SERVER, 'REQUEST_METHOD'), 'POST') == 0) {
    global $G_INPUT;
    global $G_state_set;

    $G_state_set->set('html_should_be_closed', false);
    $G_state_set->set('copyright_should_be_written', false);

    $ip_list = json_decode(cb_at($G_INPUT, 'ip_list'), true);
    $setting_value = intval(cb_at($G_INPUT, 'setting'));

    if ( ! is_array($ip_list)) {
        $ip_list = [];
    }

    $result = [];
    $is_valid = true;

    require_once('grn/logger.csp');
    $logger_manager = CB_LoggerManager::getInstance();
    $logger = $logger_manager->getLogger('grn.common');
    $settings = [
        AvailabilitySettingLogic::ACCESS_TYPE_UNRESTRICTED   => AvailabilitySettingLogic::NOT_USE,
        AvailabilitySettingLogic::ACCESS_TYPE_REMOTE_SERVICE => AvailabilitySettingLogic::USE_RSM,
        AvailabilitySettingLogic::ACCESS_TYPE_INTERNAL       => AvailabilitySettingLogic::USE_INTERNAL_ADDRESS
    ];

    if (cb_is_forest()) {
        unset($settings[AvailabilitySettingLogic::ACCESS_TYPE_REMOTE_SERVICE]);
    }

    if ( ! array_key_exists($setting_value, $settings)) {
        $setting_value = AvailabilitySettingLogic::ACCESS_TYPE_UNRESTRICTED;
    }

    $log_params[] = sprintf("mode:'%s'", $settings[$setting_value]);
    $internal_ip_addresses = [];
    if ($setting_value == AvailabilitySettingLogic::ACCESS_TYPE_INTERNAL) {
        $ip_list = array_slice($ip_list, 0,
            AvailabilitySettingLogic::MAX_IP_NUMBER);

        $order = 0;
        foreach ($ip_list as $ip_setting) {
            $ip_address = cb_trim(cb_at($ip_setting, 'subject'));
            if ("" === $ip_address) {
                $result['message'][$order++] = cb_msg('grn.system.application',
                    'required_ip_address');
                continue;
            }

            $validate_ip_result = IpUtil::validateIp($ip_address);
            if ( ! $validate_ip_result) {
                $result['message'][$order++] = cb_msg('grn.system.application',
                    'invalid_ip_address');
                continue;
            }

            $cidr = cb_trim(cb_at($ip_setting, 'cidr'));

            if (strlen($cidr) > 0
                && ! IpUtil::isValidCIDR($cidr, $validate_ip_result)
            ) {
                if ($validate_ip_result === IpUtil::IPV4) {
                    $result['message'][$order++]
                        = cb_msg('grn.system.application', 'invalid_cidr_ipv4');
                } else {
                    $result['message'][$order++]
                        = cb_msg('grn.system.application', 'invalid_cidr_ipv6');
                }

                continue;
            }

            $internal_ip_address = new InternalIpAddress();
            $internal_ip_address->setIpAddress($ip_address);
            $internal_ip_address->setCidr($cidr);
            $internal_ip_address->setMemo(cb_trim(cb_at($ip_setting, 'memo')));
            $internal_ip_addresses[] = $internal_ip_address;

            $combined_ip = [$ip_address];
            if (strlen($cidr) > 0) {
                $combined_ip[] = $cidr;
            }
            $log_params[] = sprintf("ip_address:'%s'",
                implode('/', $combined_ip));

            $order++;
        }

        $is_valid = count($result) === 0;
        if ($is_valid) {
            $ip_setting_logic = new InternalIpAddressLogic();
            $ip_setting_logic->deleteAll();
            $ip_setting_logic->insert($internal_ip_addresses);
        }
    }

    if ($is_valid) {
        // Save setting when there is no error
        AvailabilitySettingLogic::setExternalAccessSetting($setting_value);
        $log_message = sprintf("[modify] external_use_permit (%s)",
            implode(', ', $log_params));
        $logger->noticeEx('modify', 'external_use_permit', $log_message);
    }

    $result['success'] = $is_valid;

    $json = \grn\grn\JSONResponse::create();
    $json->response($result);
}
