<?php

use grn\grn\access\logic\AvailabilitySettingLogic;
use grn\grn\access\bean\Availability;

function filter_id_available($user_id)
{
    if (is_numeric($user_id) && $user_id > 0) {
        return $user_id;
    }
}

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    require_once('grn/multi_select_utility.csp');
    $G_INPUT = grn_deploy_selected_users('selected_dynamic_roles',
        'selected_dynamic_roles', $G_INPUT);
    $G_INPUT = grn_deploy_selected_users('selected_static_roles',
        'selected_static_roles', $G_INPUT);
    $G_INPUT = grn_deploy_selected_users('selected_groups', 'selected_groups',
        $G_INPUT);
    $G_INPUT = grn_deploy_selected_users('selected_users', 'selected_users',
        $G_INPUT);

    $selected_dynamic_roles = [];
    if (array_key_exists('selected_dynamic_roles', $G_INPUT)
        && is_array($G_INPUT['selected_dynamic_roles'])
    ) {
        $selected_dynamic_roles = $G_INPUT['selected_dynamic_roles'];
    }

    $selected_static_roles = [];
    if (array_key_exists('selected_static_roles', $G_INPUT)
        && is_array($G_INPUT['selected_static_roles'])
    ) {
        $selected_static_roles = $G_INPUT['selected_static_roles'];
    }

    $selected_groups = [];
    if (array_key_exists('selected_groups', $G_INPUT)
        && is_array($G_INPUT['selected_groups'])
    ) {
        $selected_groups = $G_INPUT['selected_groups'];
    }

    $selected_users = [];
    if (array_key_exists('selected_users', $G_INPUT)
        && is_array($G_INPUT['selected_users'])
    ) {
        $selected_users = $G_INPUT['selected_users'];
    }

    if (count($selected_dynamic_roles) == 0
        && count($selected_static_roles) == 0
        && count($selected_groups) == 0
        && count($selected_users) == 0
    ) {
        cb_redirect('system/application/availability_user_list', []);
    } else {
        $app_setting_logic = new AvailabilitySettingLogic();
        $str_log_dynamic_role = "";
        $str_log_static_role = "";
        $str_log_group = "";
        $str_log_user = "";
        $item_log = [];

        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        if (is_array($selected_dynamic_roles)
            && count($selected_dynamic_roles) > 0
        ) {
            require_once('grn/uum_util.csp');
            $uum_util = GRN_UumUtil::getInstance();
            $dynamic_roles = array_keys($uum_util->listDynamicRoles());
            foreach ($selected_dynamic_roles as $key => $role_name) {
                if ( ! in_array(strtolower($role_name),
                    array_map('strtolower', $dynamic_roles))
                ) {
                    unset($selected_dynamic_roles[$key]);
                }
            }
            $app_setting_logic->deleteByTargetIds($selected_dynamic_roles,
                Availability::DYNAMIC_ROLE);
            $item_log['dynamic_role'] = implode(", ", $selected_dynamic_roles);
        }

        if (is_array($selected_static_roles)
            && count($selected_static_roles) > 0
        ) {
            $selected_static_roles = array_filter($selected_static_roles,
                "filter_id_available");
            $app_setting_logic->deleteByTargetIds($selected_static_roles,
                Availability::STATIC_ROLE);
            $item_log['static_role'] = implode(", ", $selected_static_roles);
        }

        if (is_array($selected_groups) && count($selected_groups) > 0) {
            $selected_groups = array_filter($selected_groups,
                "filter_id_available");
            $app_setting_logic->deleteByTargetIds($selected_groups,
                Availability::GROUP);
            $item_log['group'] = implode(", ", $selected_groups);

        }

        if (is_array($selected_users) && count($selected_users) > 0) {
            $selected_users = array_filter($selected_users,
                "filter_id_available");
            $app_setting_logic->deleteByTargetIds($selected_users,
                Availability::USER);
            $item_log['user'] = implode(", ", $selected_users);
        }

        //writing the log
        if (count($item_log) > 0) {
            require_once('grn/logger.csp');
            $logger_manager = CB_LoggerManager::getInstance();
            $_logger = &$logger_manager->getLogger('grn.common');
            $_logger->noticeEx('delete', 'availability_user_delete_multi',
                $item_log,
                ['user', 'group', 'static_role', 'dynamic_role']);
        }
    }

    cb_redirect('system/application/availability_user_list', []);
}
