<?php

$charset = cb_at($G_INPUT, 'charset', null);
if (0 == strlen($charset)) {
    global $G_config_common;
    $charset = $G_config_common->get('I18N', 'default_external_encoding');
}
$item_name = cb_at($G_INPUT, 'item_name', null);

require_once('fw/csv.csp');
$temp_dir = cb_tmpdir();
$temp_file_name = tempnam($temp_dir, 'path_');
$csv_writer = new CB_CSVWriter($charset, $temp_file_name);
require_once('system/resources.csp');

$ip_setting_logic = new \grn\grn\access\logic\InternalIpAddressLogic();

//Write header
if ($item_name) {
    require_once('fw/i18n.csp');
    $header = [];
    $header[] = cb_msg('grn.system.application', 'ip_address_csv_ip');
    $header[] = cb_msg('grn.system.application', 'ip_address_csv_cidr');
    $header[] = cb_msg('grn.system.application', 'ip_address_csv_memo');
    $csv_writer->writeLine($header);
}

//write ip address
$log_params = [];
$log_format = "ip_address:'%s'";
$ipList = $ip_setting_logic->getAll();
foreach ($ipList as $ip) {
    $ip_row = $ip->toArray();
    unset($ip_row['id']);
    unset($ip_row['order']);
    $csv_writer->writeLine($ip_row);
    if (strlen($ip_row['cidr']) > 0) {
        $log_params[] = sprintf($log_format,
            addslashes($ip_row['ip_address'] . "/" . $ip_row['cidr']));
    } else {
        $log_params[] = sprintf($log_format, addslashes($ip_row['ip_address']));
    }
}
$csv_writer->close();

// Write log
require_once('grn/logger.csp');
$logger_manager = CB_LoggerManager::getInstance();
$_logger = &$logger_manager->getLogger('grn.common');
$log_msg = '[export] external_use_permit';
if (count($log_params) > 0) {
    $log_msg = sprintf("{$log_msg} (%s)", implode(", ", $log_params));
}
$_logger->log(CB_LOGGER_NOTICE, $log_msg, 'export', 'external_use_permit');

cb_prepare_download('paths.csv', 'application/csv', false);
$fp = fopen($temp_file_name, 'rb');
$file_size = filesize($temp_file_name);
if (0 < $file_size) {
    echo fread($fp, $file_size);
}
fclose($fp);
unlink($temp_file_name);
