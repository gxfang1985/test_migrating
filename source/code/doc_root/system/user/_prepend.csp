<?php

global $G_container_base;
/** @var GRN_Uum $uum */
$uum = $G_container_base->getInstance('uum');

$user = $uum->getLoginUser();

global $G_INPUT;

require_once('grn/org_privilege.csp');
$privilege_logic = GRN_OrganizationPrivilegeLogic::getInstance();

require_once('grn/system_logic.csp');
$system = GRN_System::getInstance();
$logged_in_user = $uum->getLoginUser();
if ( ! $system->adminSubSystem('user', $logged_in_user)) {
    $org_id = @$G_INPUT['oid'];
    if ( ! is_null($org_id)) {
        $gids = [];
        if (is_array($org_id)) {
            $gids = $org_id;
        } elseif (strlen($org_id) > 0) {
            $gids[] = $org_id;
        } else {
            if ( ! $privilege_logic->hasPrivilege($user)) {
                cb_throw_error(E_GRN_NO_SYSTEM_PRIVILEGE);
            }
        }
        foreach ($gids as $gid) {
            $group = $uum->getGroup($gid);
            if ( ! $group) {
                cb_throw_error(E_GRN_GROUP_NOT_FOUND);
            }
            if ( ! $privilege_logic->isPrivileged($user, $group)) {
                cb_throw_error(E_GRN_NO_SYSTEM_PRIVILEGE);
            }
        }
    } else {
        if ( ! $privilege_logic->hasPrivilege($user)) {
            cb_throw_error(E_GRN_NO_SYSTEM_PRIVILEGE);
        }
    }

} else {
    $privilege_logic->setAdmin();
}

unset($user);

// check sandbox mode
require_once('system/sandbox/misc.csp');
if (in_array(
    cb_get_pagename(),
    [
        'system/user/org_add', // 組織の追加
        'system/user/command_org_add', // 組織の追加
        'system/user/org_order', // 組織の順番変更
        'system/user/command_org_order', // 組織の順番変更
        'system/user/org_modify', // 組織情報の変更
        'system/user/command_org_modify', // 組織情報の変更
        'system/user/org_parent_modify', // 組織の移動
        'system/user/command_org_parent_modify', // 組織の移動
        'system/user/org_delete', // 組織の削除
        'system/user/command_org_delete', // 組織の削除
        'system/user/organization_import1', // 組織の読み込み
        'system/user/command_organization_import1', // 組織の読み込み
        'system/user/organization_import2', // 組織の読み込み
        'system/user/command_organization_import2', // 組織の読み込み
        'system/user/organization_name_import1', // 組織名の読み込み
        'system/user/command_organization_name_import1', // 組織名の読み込み
        'system/user/organization_name_import2', // 組織名の読み込み
        'system/user/command_organization_name_import2', // 組織名の読み込み
    ]
)
) {
    \grn\system\sandbox\validateSandboxStatusIsInitial();
}

function _grn_get_privilege_logic($privileged_page = true)
{
    $privilege_logic = GRN_OrganizationPrivilegeLogic::getInstance();
    // set privileged page
    if ($privileged_page) {
        $privilege_logic->setPrivilegedPage();
    }

    return $privilege_logic;
}

function _grn_rebuild_tree($expand_oid = null)
{
    require_once('grn/org_tree.csp');
    $list_page = 'system/user/org_list';
    $util = GRN_OrgTreeUtil::getInstance();
    $tree = $util->getTree($list_page, 'GRN_PrivilegedOrgTree');
    $tree->rebuild();

    // update init time
    $modules = [
        'system',
        'personal',
        'grn',
        'address',
        'schedule',
        'mail',
        'phonemessage',
        'portal',
        'presence',
        'timecard',
        'workflow'
    ];
    $util->updateInitPageList($modules, $tree);


    if ( ! is_null($expand_oid)) {
        require_once('grn/nested_set_model.csp');
        $nested_group = GRN_NestedGroup::getInstance();
        $ancestors =& $nested_group->getAncestorsByID($expand_oid, true);
        if ($ancestors !== false) {
            foreach (array_keys($ancestors) as $ancestor) {
                $tree->buildChild($ancestor);
            }
        }
    }
    $util->setTree($list_page, $tree);
}

/**
 * アプリケーションにライセンスがあって、かつ使用中になっている場合のみ TRUE
 *
 */
function _isApplicationLicensed($app_id)
{
    //return FALSE;
    require_once('grn/application.csp');
    $locator = GRN_ApplicationLocator::instance();
    $app = $locator->getInstance($app_id);
    if (is_null($app)) {
        return false;
    }

    return $app->isLicensed();
}

/**
 * 組込み項目の設定を返す。
 *
 * ケータイの設定は、ケータイのライセンスがある場合のみ含まれる。
 *
 * @param string $item_id 対象項目の名前(ID)
 *
 * @return array $ret['necessary'] 必須項目かどうか(bool)
 *               $ret['necessary_disabled'] necessary設定を変更可能かどうか(bool)
 *               $ret['use'] 使用するかどうか(bool)
 *               $ret['use_disabled'] use設定を変更可能かどうか(bool)
 *               $ret['not_modify'] ユーザーが変更可能かどうか(bool)
 *               $ret['not_modify_disabled'] not_modify設定を変更可能かどうか(bool)
 *               $ret['display'] 一覧表示に使用するかどうか(bool)
 *               $ret['display_disabled'] display設定を変更可能かどうか(bool)
 *               $ret['cellular'] ケータイ画面で表示するかどうか(bool)
 *               $ret['cellular_disabled'] cellular設定を変更可能かどうか(bool)
 *
 */
function _getDefaultItemProperty($item_id)
{
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    $properties = $uum->getDefaultItemProperty($item_id);

    if ( ! _isApplicationLicensed('cellular')) {
        if (array_key_exists('cellular', $properties)) {
            unset($properties['cellular']);
        }
        if (array_key_exists('cellular_disabled', $properties)) {
            unset($properties['cellular_disabled']);
        }
    }

    return $properties;
}


?>


