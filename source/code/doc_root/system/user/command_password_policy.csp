<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    //-- prepare
    $target_page = 'system/user/password_policy';

    $is_personal_config = (bool)$G_INPUT['is_personal_config'];
    $is_empty_login = (bool)$G_INPUT['is_empty_login'];
    $password_length = (int)$G_INPUT['password_length'];

    if ($is_personal_config && (bool)@$G_INPUT['is_expiration']) {
        $expiration_interval = (int)$G_INPUT['expiration_interval'];
    } else {
        $expiration_interval = 0;
        $G_INPUT['expiration_interval'] = '1';
    }

    if ($is_personal_config && (bool)@$G_INPUT['is_warning']) {
        $warning_before = (int)$G_INPUT['warning_before'];
    } else {
        $warning_before = 0;
        $G_INPUT['warning_before'] = '1';
    }

    $is_strong_password = (bool)$G_INPUT['is_strong_password'];
    $strong_passwd_options = 0;
    $strong_passwd_available_options = [
        'pwd_alpha',
        'pwd_alphamix',
        'pwd_numeral',
        'pwd_symbol',
        'pwd_banned_words'
    ];
    foreach ($strong_passwd_available_options as $option) {
        if (isset($G_INPUT[$option])) {
            $strong_passwd_options |= (int)$G_INPUT[$option];
        }
    }

    //-- instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //-- Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    // register the target_form, or you get an error if you go back to the previous page by using 
    // your browser 'back' button
    SmartyValidate::register_form($target_page);

    //-- validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_page)) {

        if ($expiration_interval > 0
            && $expiration_interval <= $warning_before
        ) {
            include('_password_policy.csp');
            $t->assign('warning_before_is_greater', true);
            $t->setPageInfo($target_page);

            $t->display($target_page . '.tpl');
            cb_safe_exit();
        }

        require_once('grn/system_logic.csp');
        $system = GRN_System::getInstance();

        $expiration_interval_old = $system->getPasswordExpirationInterval();
        $warning_before_old = $system->getPasswordWarningBefore();

        $system->setPasswordEnablePersonalConfig($is_personal_config);
        $system->setPasswordEmptyLogin($is_empty_login);
        $system->setPasswordLength($password_length);
        $system->setPasswordExpirationInterval($expiration_interval);
        $system->setPasswordWarningBefore($warning_before);

        if ($password_length === 0 && ! $is_empty_login) {
            cb_throw_error(E_GRN_PASSWORD_NOT_EMPTY_BUT_LENGTH_0);
        }

        if ($expiration_interval_old != $expiration_interval
            || $warning_before != $warning_before_old
        ) {
            //-- modify user password
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');
            $uum->resetPasswordExpired();
        }

        if ($password_length === 0 && $is_strong_password) {
            cb_throw_error(E_GRN_PASSWORD_COMPLEX_BUT_LENGTH_0);
        }

        $system->setPasswordComplex($is_strong_password,
            $strong_passwd_options);

        // the validation session is finished
        SmartyValidate::unregister_form($target_page);

        cb_redirect('system/common_list', ['id' => 'user']);
    } else {
        include('_password_policy.csp');

        //Assign Template Name
        $t->setPageInfo($target_page);

        $t->display($target_page . '.tpl');
    }
}

