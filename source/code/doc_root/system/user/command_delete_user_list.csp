<?php
require_once('grn/smarty.csp');
$smarty = new GRN_Smarty();

$command = isset($G_INPUT['cmd']) ? $G_INPUT['cmd'] : null;

if (isset($G_INPUT['eid'])) {
    $eid_list = $G_INPUT['eid'];
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session
        = $session_manager->getSession('system/user/delete_user_list');
    $session->set('eid', $eid_list);
}

switch ($command) {
    case 'restore':
        cb_redirect('system/user/delete_user_restore_multi');
        break;
    case 'delete':
        cb_redirect('system/user/delete_user_permanent_delete_multi');
        break;
}

require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'system/user/delete_user_list';
SmartyValidate::register_form($form_name);

if (SmartyValidate::is_valid($G_INPUT, $form_name)) {
    SmartyValidate::unregister_form($form_name);

    require_once('grn/system_logic.csp');
    $system = GRN_System::getInstance();

    if (array_key_exists('start_hour', $G_INPUT)
        && array_key_exists('end_hour', $G_INPUT)
    ) {
        // 削除する
        //GRN2-3129
        require_once('schedule/view_util.csp');
        require_once('grn/uum.csp');
        /** @var GRN_Uum $uum */
        $uum =& $G_container_base->getInstance('uum');
        $login_user = $uum->getLoginUser();
        $I18N = CB_I18N::getInstance();
        $timezone = $I18N->getUserTimezone($login_user);
        $set_date_time = new CB_DateTime();
        $today = getdate();
        $set_date_time->year = $today['year'];
        $set_date_time->month = $today['mon'];
        $set_date_time->day = $today['mday'];
        $set_date_time->hour = $G_INPUT['start_hour'];
        $start_cutover
            = grn_schedule_convert_datetime_tz1_to_tz2($set_date_time,
            $timezone, "UTC");
        $start_hour = $start_cutover->hour;
        $start_minute_UTC = $start_cutover->minute;
        $set_date_time->hour = $G_INPUT['end_hour'];
        $end_cutover
            = grn_schedule_convert_datetime_tz1_to_tz2($set_date_time,
            $timezone, "UTC");
        $end_hour = $end_cutover->hour;
        $end_minute_UTC = $end_cutover->minute;
        //GRN2-3129
        $disable = false;
    } else {
        // 削除しない
        $schedule = $system->getDeleteUserSchedule();
        $start_hour = $schedule['start'];
        $end_hour = $schedule['end'];
        $disable = true;
    }
    if (isset($start_minute_UTC) && isset($end_minute_UTC)) {
        $system->setDeleteUserSchedule($start_hour, $end_hour, $disable,
            $start_minute_UTC, $start_minute_UTC, $end_minute_UTC);
    } else {
        $system->setDeleteUserSchedule($start_hour, $end_hour, $disable);
    }

    // スケジュールの更新


    require_once('fw/schedule.csp');
    $ss = CB_SchedulingService::getInstance();

    $name = 'grn_delete_user_data';
    $filename = $name . '.csp';
    if (isset($start_minute_UTC)) {
        $command = "$start_minute_UTC $start_hour * * *";
    } else {
        $command = "0 $start_hour * * *";
    }

    if ($disable) {
        $ss->unregisterEvent($name);
    } else {
        $ss->registerRepeatEvent($name, $filename, $command);
    }

    cb_redirect('system/user/delete_user_list');
} else {
    require_once('_delete_user_list.csp');
    $smarty->assign('invalid', true);
    $smarty->display('system/user/delete_user_list.tpl');
}

