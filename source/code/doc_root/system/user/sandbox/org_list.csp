<?php

use grn\system\sandbox\GRN_Uum_Sandbox;
use grn\system\sandbox\GRN_Uum_SearchSandbox;
use grn\system\sandbox\SandboxConstants;

//-- instantiate Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_license_mode;
$license_deny = true;
if ($G_license_mode === GRN_LICENSE_SUCCESS) {
    $license_deny = false;
}

//-- get parameters from URL parameters
global $G_INPUT;
$org_id = cb_at($G_INPUT, 'oid');
if (strlen($org_id) === 0) {
    $org_id = null;
}

//-- prepare uum and uum_util
$uum = GRN_Uum_Sandbox::getInstance();

require_once('grn/org_util.csp');

require_once('grn/org_util_search.csp');

require_once('grn/org_tree.csp');

$page_name = cb_get_pagename();

$util = GRN_OrgTreeUtil::getInstance();
$tree =& $util->getTree($page_name, 'grn\system\sandbox\GRN_OrgSandboxTree');

if (is_null($org_id)) {
    $org_id = $tree->getSelectedNode();
}

if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
    $tree->initialize();

    if (array_key_exists('top', $G_INPUT)) {
        $org_id = null;
    }
}
$tree->setSelectedNode($org_id);
$util->setTree($page_name, $tree);
$org = $tree->getRoot();

$user = cb_get_login_user();
$group =& $uum->getGroup($org_id);

//--group information structure
require_once('grn/ui.csp');
$ucm = GRN_UIConfigManager::getInstance();
$uc = $ucm->getUserConfig($user);
$limit = $uc->getListMax();
unset($ucm, $uc);

require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();
$current_start_position = $controller_util->getNaviStartPosition();
$controller_util->setNaviStartPosition($current_start_position);

$is_nogroups = (-2 != $org_id && -3 != $org_id && 0 > $org_id);

$is_search = @array_key_exists('search_text', @$G_INPUT);
if ($is_search) {
    //search

    //--N-navigation
    $search_text = $G_INPUT['search_text'];
    $condition = grn_get_user_info_search_condition($org_id, $search_text,
        true);

    $navi_params = ['oid' => $org_id, 'search_text' => $search_text];

    if ($org_id != -3) {
        // group users, unassigned users, inactive users, all user

        if ($org_id != -2) {
            $count = grn_get_user_info_search_count($org_id, $condition,
                SandboxConstants::SANDBOX_MODE);
        } else {
            $count = 0;
            require_once('fw/string_util.csp');
            if (strlen(cb_trim($condition)) >= 1) {
                $uum_search = new GRN_Uum_SearchSandbox();
                $count
                    = $uum_search->getDeactiveUserInfoCountWithCondition($condition);
            }
        }

        $navigation_info = grn_get_user_navigation_info($count, $navi_params);
        $user_list =& grn_search_user_info(
            $org_id, $condition, $navigation_info, false, null,
            SandboxConstants::SANDBOX_MODE
        );
        $user_list = $uum->addUpdatedUserFlag($user_list);
    } else {
        // updated users

        // get updated users
        require_once('fw/string_util.csp');
        if (strlen(cb_trim($condition)) > 0) {
            $uum_search = new GRN_Uum_SearchSandbox();
            $result
                = $uum_search->getUpdatedUserInfos($current_start_position,
                $limit, $condition);
            $user_count = $result['total_count'];
            $user_list = $result['user_list'];
        } else {
            $user_list = [];
            $user_count = 0;
        }

        // create navigation info
        $navigation_info = $controller_util->makeNaviInformation(
            $current_start_position, $limit, $user_count, $navi_params
        );
    }

    $t->assign('search_text', $search_text);
} elseif ($org_id) {
    //list

    $navi_params = ['oid' => $org_id];

    if ($org_id != -3) {
        // group users, unassigned users, inactive users

        $navigation_info = grn_get_user_list_info($org_id, $navi_params, null,
            SandboxConstants::SANDBOX_MODE);
        $user_list = grn_get_user_list($org_id, $navigation_info, null,
            SandboxConstants::SANDBOX_MODE);
        $user_list = $uum->addUpdatedUserFlag($user_list);
    } else {
        // updated users

        // get updated users
        $result = $uum->getUpdatedUsers($limit, $current_start_position);
        $user_count = $result['total_count'];
        $user_list = $result['user_list'];

        // create navigation info
        $navigation_info = $controller_util->makeNaviInformation(
            $current_start_position, $limit, $user_count, $navi_params
        );
    }
}

if ($is_search || $org_id) {
    foreach ($user_list as $key => $value) {
        $user_list[$key]['privileged']
            = true; // on sandbox page, login user has always administration.
    }
}

// get sandbox display info
$sandbox_view = \grn\system\sandbox\SandboxStatus::getInstance()
                                                 ->getSandboxView();
$t->assign('sandbox_view', $sandbox_view);

//-- clear authority types
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session =& $session_manager->getSession('grn.common.org_sandbox_list');
$session->unset_by('authorities');

// Make an array for tree view.
// This array is used with page/master/grn/org_tree_26.tpl
$folder_tree = [
    "tree_name"        => "folder_tree",
    "async_url"        => "system/user/sandbox/org_json",
    "link_url"         => "system/user/sandbox/org_list",
    "link_url_params"  => [],
    "page_name"        => $page_name,
    "selected_oid"     => $org_id,
    "root_caption"     => cb_msg('grn.system.user', 'GRN_SY_US-422'),
    "no_root"          => false,
    "on_select"        => null,
    "tree_view_ele_id" => "tree_view",
    "view_part_ele_id" => "view_part",
    "set_tree_height"  => true,
    "root"             => $org
];
$t->assign('folder_tree', $folder_tree);

//-- set variables for view
$t->assign('org_id', $org_id);
$t->assign('page_name', $page_name);
$t->assign('org', $org);
$t->assign('is_nogroups', $is_nogroups);
$t->assign('is_deactive', -2 == $org_id);
$t->assign('is_updated', -3 == $org_id);
$t->assign('is_root', ! $org_id);
$t->assign('is_search', $is_search);
$t->assign('is_admin',
    true);  // on sandbox page, login user has always administration.
$t->assign('transferable',
    false); // In sandbox page, we can not set a privilege.
$t->assign('admin_user_id', GRN_UUM_ADMINISTRATION_USER);

if ($is_search || $org_id) {
    $t->assign('user_list', $user_list);
    $t->assign('navi_info', $navigation_info);
} else {
    $t->assign('group_count', $uum->getGroupCount());
    $t->assign('user_count', $uum->getUserCount());
    $t->assign('active_count', $uum->getActiveUserCount());

    if (defined('ON_SAAS')) {
        $t->assign('saas_license_user', $uum->checkSaasLincense());
    }
}

//-- page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);
$t->assign('title_of_grn_title', cb_msg("grn.system.user", "org_list"));

//-- site position
require_once('grn/controller.csp');
$page_infos = [
    'index'    => [],
    'org_list' => null
];
$util = new GRN_ControllerUtil();
$site_position = $util->makeSitePosition('system/user/sandbox/', $page_infos);
$t->assign('site_position', $site_position);

$t->assign('license_deny', $license_deny);

$t->assign('form_name', $page_name);
$t->assign('dir_name', 'system/user/sandbox');
$t->assign('is_sandbox_page', true);

// exec smarty
$t->display('system/user/org_list.tpl');

