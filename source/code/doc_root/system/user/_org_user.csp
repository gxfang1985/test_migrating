<?php

//-- instantiate Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_license_mode;
$license_deny = true;
if ($G_license_mode === GRN_LICENSE_SUCCESS) {
    $license_deny = false;
}

// GET/POSTされたパラメータを取得する
$user_id = '';
$org_id = '';
if (array_key_exists('uid', $G_INPUT)) {
    $user_id = $G_INPUT['uid'];
}
if (array_key_exists('oid', $G_INPUT)) {
    $org_id = $G_INPUT['oid'];
}
if (0 == strlen($user_id)) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

$logic = &_grn_get_privilege_logic();
$is_admin = $logic->isAdmin();

// 詳細を表示するユーザーを取得する
global $G_container_base;
/** @var GRN_Uum $uum */
$uum =& $G_container_base->getInstance('uum');
$user =& $uum->getUser($user_id);
if ( ! is_object($user) || ! is_a($user, 'CB_User')) {
    cb_throw_error(E_GRN_USER_NOT_FOUND);
}

// 組み込み項目を取得する
require_once('grn/controller.csp');
$controller_util = new GRN_ControllerUtil();
$builtin_items = $controller_util->listBuiltinItems($user);
//unset( $builtin_items['usergroups'] );
unset($builtin_items['attendee']);

// カスタマイズ項目を取得する
$extended_items = $controller_util->listExtendedItems($user);

// Add 'extended' field
// Smarty module will see this field and
// add a prefix ext_ to variable names to make it not collide with
// other default Garoon's field names
foreach (array_keys($extended_items) as $item_id) {
    $extended_items[$item_id]['extended'] = 1;
}

// 表示優先度
$user_info = [];
$user_info['position'] = $user->get('position');

// 停止中かどうか
$user_info['valid'] = $uum->isActiveUser($user_id);

// タイトルに使用する
$user_info['display_name'] = $user->get('display_name');

require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
// 優先する組織
require_once('grn/org_util.csp');
$primary_group = $uum->getUserPrimaryGroupInfo($user_id);
if ($primary_group !== false) {
    $user_info['primary_group'] = [];
    $user_info['primary_group']['oid'] = $primary_group['_id'];
    $user_info['primary_group']['name'] = $primary_group['col_name'];
    $user_info['primary_group']['path']
        = $uum_util->getGroupPathString($primary_group['_id'],
        ' > ');
//    $user_info['primary_group'] = grn_get_org_info( $primary_group, TRUE, FALSE );
}

// 所属する組織
$user_info['groups'] = [];
$groups = $uum->getUserGroupsInfo($user_id);
foreach ($groups as $group_id => $group) {
//    $group =& $groups[$id];
//    $user_info['groups'][$id] = grn_get_org_info( $groups[$id], TRUE, FALSE );

    $user_info['groups'][$group_id] = [];
    $user_info['groups'][$group_id]['oid'] = $group['_id'];
    $user_info['groups'][$group_id]['name'] = $group['col_name'];
    $user_info['groups'][$group_id]['path']
        = $uum_util->getGroupPathString($group['_id'],
        ' > ');
}

// 優先する組織
if (is_array($groups) && count($groups)) {
    $primary_group_id = ($primary_group === false) ? -1 : $primary_group['_id'];

    $group_options = [];
    foreach ($user_info['groups'] as $key => $group) {
        $selected = ($key == $primary_group_id);
        $group_options[$key] = [
            'value'    => $key,
            'label'    => $group['name'] . ' （' .
                          $group['path'] .
                          '）',
            'selected' => $selected
        ];
    }

    $user_info['group_options'] = $group_options;
}

// ロール情報
$roles = $uum->getUserRoles($user_id);
$user_info['roles'] = [];
foreach ($roles as $rid => $role) {
    $user_info['roles'][$rid] = [
        'rid'         => $rid,
        'foreign_key' => $role->get('foreign_key'),
    ];
}

// 登録情報&更新情報
$info = $uum->getUserCreationInfo($user_id);
$creator =& $info->get('creator');
$modifier =& $info->get('modifier');
$user_info['creator_uid'] = is_null($creator) ? '0' : $creator->getOID();
$user_info['modifier_uid'] = is_null($modifier) ? '0' : $modifier->getOID();
$user_info['creator_name'] = $info->get('creator_name');
$user_info['modifier_name'] = $info->get('modifier_name');
$user_info['ctime'] = $info->get('ctime');
$user_info['mtime'] = $info->get('mtime');

// 権限
$logged_in_user = $uum->getLoginUser();
$user_info['privileged'] = $logic->isPrivilegedUser($logged_in_user, $user);

// Locale
require_once("fw/i18n/locale.csp");
$user_locale_setting = CB_UserLocaleSetting::select($user_id);
if (is_null($user_locale_setting)
    || $user_locale_setting->getLocale()
       == CB_UserLocaleSetting::$LOCALE_IS_NOT_RELATED
) {
    $user_info["locale"] = "";
} else {
    $locale = CB_Locale::select($user_locale_setting->getLocale());
    $user_info["locale"] = $locale->getLocalName();
}

// Base
require_once('fw/i18n/base.csp');
$user_base_setting = CB_UserBaseSetting::select($user_id);
$user_info['base'] = [];
if ( ! is_null($user_base_setting)
     && ! is_null($user_base_setting->getBase())
) {
    $base = CB_Base::select($user_base_setting->getBase());
    $user_info['base']['local_name'] = $base->getLocalName();
}

// シングルサインオンの設定を取得する
$sso_for_view = ['user' => $user_id];

$t->assign('org_id', $org_id);
$t->assign('user_id', $user_id);
$t->assign('builtin_items', $builtin_items);
$t->assign('extended_items', $extended_items);
$t->assign('user', $user_info);
$t->assign('is_super', ($user_id == GRN_UUM_ADMINISTRATION_USER));
$t->assign('is_admin', $is_admin);
$t->assign('sso', $sso_for_view);


