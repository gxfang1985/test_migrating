<?php

//Get Smarty Instance
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//SmartyValidate should be initialized when an input form is there.
require('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('system/sso/sso_method_add1', true);

//Get SSO Driver List
require_once('grn/sso.csp');
$sso_service = GRN_SSO_Service::getInstance();
$sso_driver_list =& $sso_service->getSSODriverList();

//Get Application Instance
require_once('grn/application.csp');
$app_locator = GRN_ApplicationLocator::instance();
$apps = $app_locator->getInstancesWithMethod('getSSOIdentifierList',
    false);

//Create Parameter Translation Map for SSO Driver
$translation_map_sso_driver = [
    'title' => 'name',                 //Driver Name
    'type'  => 'type',                 //Driver Type
];

//Create Parameter Translation Map for Application Options
$translation_map_application = [
    'id'    => 'id',                   //Application ID
    'title' => 'name',                 //Application Name
];

//Do Parameter Translation for SSO Driver
foreach (array_keys($sso_driver_list) as $sso_driver_index) {
    $sso_driver_for_view = [];
    foreach ($translation_map_sso_driver as $view_name => $model_name) {
        switch ($model_name) {
            case 'name':
                $sso_driver_for_view[$view_name]
                    = $sso_driver_list[$sso_driver_index]->getName();
                break;
            case 'type':
                $sso_driver_for_view[$view_name]
                    = $sso_driver_list[$sso_driver_index]->getType();
                break;
            default:
                break;
        }
    }

    //Add SSO Driver List for View
    $sso_driver_list_for_view[] = $sso_driver_for_view;
}

//Do Parameter Translation for Repository Method List
$application_list_for_view = [];
$application_list_for_view['uum'] = [
    'id'    => 'uum',
    'title' => cb_msg('grn.common', 'uum')
];
foreach (array_keys($apps) as $app_id) {
    $application_for_view = [];
    foreach ($translation_map_application as $view_name => $model_name) {
        switch ($model_name) {
            case 'id':
                $application_for_view[$view_name] = $app_id;
                break;
            default:
                $application_for_view[$view_name] = $apps[$app_id]->getName();
                break;
        }
    }
    //Add Application List for View
    $application_list_for_view[$app_id] = $application_for_view;
}

//Create Application Options
foreach (array_keys($application_list_for_view) as $app_id) {
    $application_options[] = [
        'value' => $app_id,
        'label' => $application_list_for_view[$app_id]['title']
    ];
}

//Assign SSO Driver Display Infomation
$t->assign('sso_driver', $sso_driver_list_for_view);
$t->assign('application_options', $application_options);

//-- set page title and site position

// set page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
$t->assign(
    'site_position', [
        [
            'page' => "system/sso/sso_method_list",
            'name' => grn_get_page_display_name('system/sso/sso_method_list'),
            'sf'   => 1
        ],
        ['page' => "", 'name' => $page_title]
    ]
);

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


