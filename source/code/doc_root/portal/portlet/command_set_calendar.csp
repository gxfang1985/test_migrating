<?php

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    require_once('portal/error_code.csp');
    if ( ! isset($portlet)) {
        cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ACCESS);
    }

    global $G_INPUT;

    // instantiate an Smarty object
    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    // Create Parameter Translation Map
    $translation_map = [
        'pid'             => '_pid',
        'plid'            => '_plid',
        'ppid'            => '_ppid',
        'font_size'       => 'font_size',
        'system_calendar' => 'system_calendar',
        'start_wday'      => 'start_wday',
        'month_type'      => 'month_type'
    ];

    require_once('grn/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    /** @var GRN_Portal_Application $app_portal */
    $app_portal =& $app_locator->getInstance('portal');


    // Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Create Infomation Portlet Settings
    $settings = [
        'font_size'       => $properties['font_size'],
        'system_calendar' => $properties['system_calendar'],
        'start_wday'      => $properties['start_wday'],
        'month_type'      => $properties['month_type'],
    ];

    require_once('grn/calendar.csp');
    $cs = GRN_CalendarService::getInstance();
    $extensions = $cs->listExtensions();
    $current_settings = $app_portal->getSettingsOfPortlet($properties['_plid']);
    foreach ($extensions as $extension) {
        $logic =& $cs->getLogic($extension);
        if ($logic->isAvailable()) {
            $p = $cs->parseParameter($G_INPUT,
                $extension . '_');
            $settings[$extension] = $p;
        } else {
            // When the extension is not available, use origin setting data if it is set.
            if (array_key_exists($extension, $current_settings)) {
                $settings[$extension] = $current_settings[$extension];
            }
        }
    }

    $basic_event = [];
    if ($G_INPUT['display'] === 'set-system'
        || $G_INPUT['display'] === 'set-operation'
    ) {
        $basic_event = [
            GRN_CALENDAR_TYPE_PUBLICHOLIDAY,
            GRN_CALENDAR_TYPE_SYSTEM_MEMO,
            GRN_CALENDAR_TYPE_WORKDAY
        ];
    } else {
        $basic_event = [
            GRN_CALENDAR_TYPE_PUBLICHOLIDAY,
            GRN_CALENDAR_TYPE_MEMORIALDAY,
            GRN_CALENDAR_TYPE_SYSTEM_MEMO,
            GRN_CALENDAR_TYPE_USER_MEMO,
            GRN_CALENDAR_TYPE_WORKDAY
        ];
    }

    $settings['basic_event'] = $basic_event;

    $app_portal->setPortletSettings($properties['_plid'], $settings);

    //Switch Redirect Page
    if ($G_INPUT['display'] === 'set-system') {
        //redirect System page
        cb_redirect('portal/system/view', ['pid' => $G_INPUT['pid']]);
    } elseif ($G_INPUT['display'] === 'set-operation') {
        //redirect Operation page
        cb_redirect('portal/operation/view', ['pid' => $G_INPUT['pid']]);
    } else {
        //redirect Personal page
        cb_redirect('portal/personal/view', ['pid' => $G_INPUT['pid']]);
    }
}


