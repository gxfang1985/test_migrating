<?php

require_once('portal/error_code.csp');
if ( ! isset($portlet)) {
    cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ACCESS);
}

global $G_INPUT;

//Get Login User
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();

require_once('grn/calendar.csp');
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

//Create Now TimeStamp
$ts = new CB_TimeStamp();
$ts->unix_ts = time();
$tsex = new CB_TimeStampEx($ts);
$now = $tsex->getDate();

//Get Browse Date
$bdate = @$G_INPUT['bdate'];
$date = new CB_Date();
if ( ! $date->parse($bdate)) {
    $date->year = $now->year;
    $date->month = $now->month;
    $date->day = $now->day;
}

//Check System Portal
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$app_portal =& $locator->getInstance('portal');
$is_system_portal = $app_portal->isSystemPortal($portlet['pid']);

//Get Portlet Settings
$portlet_settings = [];
if (array_key_exists('settings', $portlet)) {
    $portlet_settings =& $portlet['settings'];
}
if ( ! array_key_exists('font_size', $portlet_settings)) {
    //Font Size
    $portlet_settings['font_size'] = 'normal';
}

$scid = GRN_CALENDAR_SYSTEM_DEFAULT;
if (array_key_exists('system_calendar', $portlet_settings)) {
    //System Calendar ID
    $scid = $portlet_settings['system_calendar'];
}
$start_wday = 0;
if (array_key_exists('start_wday', $portlet_settings)) {
    //Start WeekDay
    $start_wday = $portlet_settings['start_wday'];
}
$month_type = 0;
if (array_key_exists('month_type', $portlet_settings)) {
    //Month Type(0:1month/1:2month-type1/2:2month-type2/3:3month-type1/4:3month-type2/5:3month-type3)
    $month_type = $portlet_settings['month_type'];
}

//Get My Calendar ID
$cm = GRN_CalendarManager::getInstance();
$cs = GRN_CalendarService::getInstance();
$my_cal = null;
if ( ! $is_system_portal) {
    $cal =& $cm->getPreferenceUserCalendar($login);
    $my_cal = $cal->getOID();
}

//Create Calendar Settings
$calendar_setting = [
    'system_calendar' => $scid,
    'my_calendar'     => $my_cal,
    'basic_event'     => $portlet_settings['basic_event'],
];
$extensions = $cs->listExtensions();
foreach ($extensions as $extension) {
    $calendar_setting['extension'][$extension] = $portlet_settings[$extension];
}

//Create Table Information
$table_info = [];
$start_list = [];
$end_list = [];
$navi = [];
$cu = GRN_CalendarUtil::getInstance();
$p_date = $cu->getPrevMonth($date);
$pp_date = $cu->getPrevMonth($p_date);
$n_date = $cu->getNextMonth($date);
$nn_date = $cu->getNextMonth($n_date);
switch ($month_type) {
    case '0':
        //Table Layout
        $table_info['first'] = '0';
        $table_info['last'] = '0';
        $table_info['months'] = [$date];
        //Start and End Date
        $start_list[0] = $cu->getStartDate($date, $start_wday);
        $end_list[0] = $cu->getEndDate($date, $start_wday);
        break;
    case '1':
        //Table Layout
        $table_info['first'] = '0';
        $table_info['last'] = '1';
        $table_info['months'] = [$date, $n_date];
        //Start and End Date
        $start_list[0] = $cu->getStartDate($date, $start_wday);
        $end_list[0] = $cu->getEndDate($date, $start_wday);
        $start_list[1] = $cu->getStartDate($n_date, $start_wday);
        $end_list[1] = $cu->getEndDate($n_date, $start_wday);
        break;
    case '2':
        //Table Layout
        $table_info['first'] = '0';
        $table_info['last'] = '1';
        $table_info['months'] = [$p_date, $date];
        //Start and End Date
        $start_list[0] = $cu->getStartDate($p_date, $start_wday);
        $end_list[0] = $cu->getEndDate($p_date, $start_wday);
        $start_list[1] = $cu->getStartDate($date, $start_wday);
        $end_list[1] = $cu->getEndDate($date, $start_wday);
        break;
    case '3':
        //Table Layout
        $table_info['first'] = '0';
        $table_info['last'] = '2';
        $table_info['months'] = [$p_date, $date, $n_date];
        //Start and End Date
        $start_list[0] = $cu->getStartDate($p_date, $start_wday);
        $end_list[0] = $cu->getEndDate($p_date, $start_wday);
        $start_list[1] = $cu->getStartDate($date, $start_wday);
        $end_list[1] = $cu->getEndDate($date, $start_wday);
        $start_list[2] = $cu->getStartDate($n_date, $start_wday);
        $end_list[2] = $cu->getEndDate($n_date, $start_wday);
        break;
    case '4':
        //Table Layout
        $table_info['first'] = '0';
        $table_info['last'] = '2';
        $table_info['months'] = [$date, $n_date, $nn_date];
        //Start and End Date
        $start_list[0] = $cu->getStartDate($date, $start_wday);
        $end_list[0] = $cu->getEndDate($date, $start_wday);
        $start_list[1] = $cu->getStartDate($n_date, $start_wday);
        $end_list[1] = $cu->getEndDate($n_date, $start_wday);
        $start_list[2] = $cu->getStartDate($nn_date, $start_wday);
        $end_list[2] = $cu->getEndDate($nn_date, $start_wday);
        break;
    case '5':
        //Table Layout
        $table_info['first'] = '0';
        $table_info['last'] = '2';
        $table_info['months'] = [$pp_date, $p_date, $date];
        //Start and End Date
        $start_list[0] = $cu->getStartDate($pp_date, $start_wday);
        $end_list[0] = $cu->getEndDate($pp_date, $start_wday);
        $start_list[1] = $cu->getStartDate($p_date, $start_wday);
        $end_list[1] = $cu->getEndDate($p_date, $start_wday);
        $start_list[2] = $cu->getStartDate($date, $start_wday);
        $end_list[2] = $cu->getEndDate($date, $start_wday);
        break;
    default:
        break;
}

//Navigation
$navi['prev'] = $p_date->format();
$navi['next'] = $n_date->format();

//Create Calendar Information
$months = [];
foreach (array_keys($start_list) as $index) {
    //Get Calendar Information
    $cs = GRN_CalendarService::getInstance();
    $calendars = $cs->getDaysInfoBySetting($start_list[$index],
        $end_list[$index], $calendar_setting);

    $cals = $cm->listSystemCalendarNames();
    $shared_cids = $cm->getPreferenceSharedCalendar($login);
    $all_calendars = $calendars;
    foreach ($shared_cids as $cid) {
        if ($cid != $scid && array_key_exists($cid, $cals)) {
            $csetting = ['system_calendar' => $cid, 'my_calendar' => null];
            $temp_calendar = $cs->getDaysInfoBySetting($start_list[$index],
                $end_list[$index], $csetting);
            foreach (array_keys($temp_calendar) as $key1) {
                foreach (array_keys($temp_calendar[$key1]) as $key2) {
                    $temp_calendar[$key1][$key2]['type']
                        = GRN_CALENDAR_TYPE_SYSTEM_MEMO;
                }
            }
            $all_calendars = array_merge_recursive($all_calendars,
                $temp_calendar);
        }
    }

    $dx = new CB_DateEx($start_list[$index]);
    $weeks = [];
    while ($dx->compare($end_list[$index]) <= 0) {
        $week = [];
        $s = new CB_DateEx($dx);
        for ($i = 0; $i < 7; $i++) {
            $week[$s->format()]['day'] = $s->day;
            $week[$s->format()]['real_type'] = $cu->getDateType($s, [], $login);
            $week[$s->format()]['type'] = '';
            if ($table_info['months'][$index]->month === $s->month) {
                $week[$s->format()]['type'] = $cu->getDateType($s, $calendars,
                    $login);
                $week[$s->format()]['enable'] = 1;
            }
            $week[$s->format()]['day_of_week'] = $cu->getNameDayOfWeek($s);

            if (array_key_exists($s->format(), $all_calendars)) {
                $week[$s->format()]['events'] = $all_calendars[$s->format()];
            } else {
                $week[$s->format()]['events'] = [];
            }
            $s->moveDays(1);
        }
        $dx->moveWeeks(1);

        $weeks[] = $week;
    }
    $months[$index] = $weeks;
}

$t->assign('portlet', $portlet);
$t->assign('settings', $portlet_settings);

$t->assign('titie', @$portlet['title']);
$t->assign('bdate', $date->format());
$t->assign('navi', $navi);
$t->assign('months', $months);
$t->assign('today', $now->format());
$t->assign('table_info', $table_info);

//Set Page Title
if ($portlet['title'] === '') {
    global $G_portal_app_name;
    $page_title = cb_plain_msg('grn.portal', 'portlet_view_calendar',
        ['app_name' => $G_portal_app_name]);
} else {
    $page_title = $portlet['title'];
}

$t->assign('page_title', $page_title);

// Ignore Licence Warnning
$t->skipWarning();

// Display Smarty Template
$t->display('portal/portlet/view_calendar.tpl');


