<?php

require_once("grn/smarty.csp");
$t = new GRN_Smarty;

global $G_INPUT;
//--------------------------------------------------------------

require_once("_access_util.csp");

// Smartyに削除するアクセス権情報を割り当てる
$security_model = $logic->getSecurityModel($object_id);
$accesses = $logic->getAccesses($object_id);
$access = [];
$access['list'] =& $accesses;
$access['count'] = count($accesses);
$access['security_model'] = $security_model;
$t->assign('access', $access);
$t->assign('is_grant', $access['security_model'] == 'grant');
$t->assign('is_revoke', $access['security_model'] == 'revoke');

//--N-navigation params
$ours_params = $G_INPUT;
unset($ours_params['reset']);
$app_id = null;
if (array_key_exists('pid', $ours_params) && $ours_params['pid'] != ''
    && array_key_exists('plid', $ours_params)
    && $ours_params['plid'] != ''
) {
    require_once('fw/string_util.csp');
    require_once('portal/error_code.csp');

    $portal_id = $ours_params['pid'];
    $layout_id = $ours_params['plid'];

    cb_trim_check($layout_id, E_GRN_PRTL_PORTLET_LAYOUT_INVALID_ID);

    //Get Column Items
    require_once('portal/portal_logic.csp');
    $system_portalLogic = GRN_Portal_SystemPortalLogic::getInstance();
    $column_items
        =& $system_portalLogic->getColumnItemsWithoutPrivilege($portal_id);

    //Get Layout Object
    $layout = null;
    foreach (array_keys($column_items) as $column_key) {
        $layout_items =& $column_items[$column_key];
        foreach (array_keys($layout_items) as $layout_key) {
            if ($layout_items[$layout_key]->getOID() === $layout_id) {
                $layout =& $layout_items[$layout_key];
            }
        }
    }
    if ( ! $layout) {
        /** Portlet Layout Not Found **/
        cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_NOT_FOUND);
    }

    $portlet =& $layout->get('portlet');
    if ( ! $portlet) {
        /** Portlet Not Found **/
        cb_throw_error(E_GRN_PRTL_PORTLET_NOT_FOUND);
    }
    $portlet_type = explode(".", $portlet->get('type'));
    $app_id = $portlet_type[1];
}

// GTM-529 tuning
$users_id = [];
foreach ($accesses as $access_item) {
    if ('user' == $access_item['type']) {
        $users_id[] = $access_item['tid'];
    }
}

global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login =& $uum->getLoginUser();

require_once('grn/controller.csp');
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login,
    $app_id);
$t->assign('users_info', $users_info);
// GTM-529 tuning

// rhs organization information
require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');

// search text
$text = '';
if (array_key_exists('text', $G_INPUT)) {
    $text = $G_INPUT['text'];
    $t->assign('text', $text);
}

require_once('fw/string_util.csp');
$is_search = (strlen(cb_trim($text)) > 0);
$t->assign('is_search', $is_search);

$poid = null;
if (isset($G_INPUT['poid'])) {
    $poid = $G_INPUT['poid'];
}
if ($poid === 'role' && $is_search) {
    unset($G_INPUT['poid']);
    $poid = null;
    $t->assign('poid', $poid);
}

if ($is_search) {
    $org_row = null;
    $org = [];
    if (0 < $poid) {
        $org_row =& grn_get_org_row($poid);
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] =& grn_get_org_ancestors($org_row);
        $org['children'] =& grn_get_org_children($poid);
    } elseif (-1 == $poid) {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] = null;
    } else {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] =& grn_get_org_children('0');
        $poid = null;
    }

    $condition = grn_get_user_info_search_condition($poid, $text, true);
    $count = grn_get_user_info_search_count($poid, $condition);
    $org['navi_info'] = grn_get_user_navigation_info($count, $G_INPUT, 10);
    $org['user_list'] =& grn_search_user_info($poid, $condition,
        $org['navi_info']);
    unset($ours_params['text']);
    $t->assign('org', $org);
} else {
    $org =& grn_get_user_or_role_list($poid, $ours_params, 10);
    if ( ! array_key_exists('user_list', $org)) {
        $org['navi_info'] = grn_get_user_navigation_info(0, $G_INPUT, 10);
    }
    $t->assign('org', $org);
}

unset($ours_params['poid']);
unset($ours_params['sp']);
$t->assign('ours_params', $ours_params);

//--authority types
$authority_types = ['browse' => cb_msg('grn.portal.lang', 'access_browse')];
$t->assign('authority_types', $authority_types);
$t->assign('authority_count', count($authority_types));

//--------------------------------------------------------------

// Smartyにページタイトルを割り当てる
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

require_once('grn/controller.csp');

// Smartyにサイトポジションを割り当てる
$page_infos = [
    'list'        => [],
    'view'        => ['pid' => $portal_id],
    'access_list' => null,
];
$util = new GRN_ControllerUtil();
$site_position = $util->makeSitePosition('portal/system/', $page_infos);
$t->assign('site_position', $site_position);

// Smartyを実行する
$t->display(cb_get_pagename() . '.tpl');


