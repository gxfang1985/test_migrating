<?php

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Parameters
$selected_portal_operation_id
    = @ $G_INPUT['opid']; //Selected Portal Operation ID
$portal_id = @ $G_INPUT['pid'];  //Portal ID
$target_id = @ $G_INPUT['tid'];  //Target ID
$target_type = @ $G_INPUT['type']; //Target Type

//Get Manage Logic
require_once('portal/manage_logic.csp');
$portal_manage_logic = GRN_Portal_SystemPortalManageLogic::getInstance();
$portlet_group_manage_logic
    = GRN_Portal_SystemPortletGroupManageLogic::getInstance();

//Get Portal Manage
$portal_manage =& $portal_manage_logic->getManage($portal_id, $target_type,
    $target_id);

$portal_manage_for_view = [];
switch ($target_type) {
    case 'user':
        $portal_manage_for_view['id'] = $portal_manage['target_id'];
        $portal_manage_for_view['name'] = $portal_manage['target_name'];
        $portal_manage_for_view['target'] = 'users';
        break;
    case 'group':
        require_once('grn/uum.csp');
        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');
        $portal_manage_for_view['id'] = $portal_manage['target_id'];
        $portal_manage_for_view['name'] = $portal_manage['target_name'];
        $portal_manage_for_view['target'] = 'groups';
        $group
            =& $uum->getGroup($portal_manage['target_id']);
        $portal_manage_for_view['foreign_key'] = $group->get('foreign_key');
        break;
    case 'static_role':
    case 'synamic_role':
        $portal_manage_for_view['id'] = $portal_manage['target_id'];
        $portal_manage_for_view['name'] = $portal_manage['target_name'];
        $portal_manage_for_view['target'] = 'roles';
        break;
    default:
        break;
}

//Get Allow System Portal & System Portlet Group List
$allow_portal_list = [];
$allow_porlet_group_list = [];
require_once('portal/portal_logic.csp');
$portal_logic = GRN_Portal_SystemPortalLogic::getInstance();
$portal_list = $portal_logic->getList();
require_once('portal/portlet_group_logic.csp');
$portlet_group_logic = GRN_Portal_SystemPortletGroupLogic::getInstance();
$portlet_group_list = $portlet_group_logic->getList();
switch ($target_type) {
    case 'user':
        $allow_portal_list
            = $portal_manage_logic->evaluateManageListByUser($portal_list,
            $target_id);
        $allow_portlet_group_list
            = $portlet_group_manage_logic->evaluateManageListByUser($portlet_group_list,
            $target_id);
        break;
    case 'group':
        $allow_portal_list
            = $portal_manage_logic->evaluateManageListByGroup($portal_list,
            $target_id);
        $allow_portlet_group_list
            = $portlet_group_manage_logic->evaluateManageListByGroup($portlet_group_list,
            $target_id);
        break;
    case 'static_role':
    case 'dynamic_role':
        $allow_portal_list
            = $portal_manage_logic->evaluateManageListByRole($portal_list,
            $target_id);
        $allow_portlet_group_list
            = $portlet_group_manage_logic->evaluateManageListByRole($portlet_group_list,
            $target_id);
        break;
    default:
        break;
}

//Create Parameter Translation Map for Portal List
$translation_map_for_portal = [
    'id'    => '_pid',
    'title' => 'name',
];

// Do Parameter Translation
$portal_list_for_view = [];
foreach (array_keys($allow_portal_list) as $portal_id) {
    $portal_for_view = [];
    foreach ($translation_map_for_portal as $view_name => $model_name) {
        switch ($model_name) {
            case '_pid':
                $portal_for_view[$view_name] = $portal_id;
                break;
            default:
                $portal_for_view[$view_name]
                    = $allow_portal_list[$portal_id]->get($model_name);
                break;
        }
    }
    $portal_list_for_view[$portal_id] = $portal_for_view;
}

//Create Parameter Translation Map for Portlet Group List
$translation_map_for_portlet_group = [
    'pgid'  => '_pgid',
    'title' => 'name',
];

// Do Parameter Translation
$portlet_group_list_for_view = [];
foreach (array_keys($allow_portlet_group_list) as $portlet_group_id) {
    $portlet_group_for_view = [];
    foreach ($translation_map_for_portlet_group as $view_name => $model_name) {
        switch ($model_name) {
            case '_pgid':
                $portlet_group_for_view[$view_name] = $portlet_group_id;
                break;
            default:
                $portlet_group_for_view[$view_name]
                    = $allow_portlet_group_list[$portlet_group_id]->get($model_name);
                break;
        }
    }
    $portlet_group_list_for_view[$portlet_group_id] = $portlet_group_for_view;
}

//Assign Display Infomation
//Portal Operation ID
$t->assign('portal_operation_id', $selected_portal_operation_id);
//Portal ID
$t->assign('portal_id', $portal_id);
//Target ID
$t->assign('target_id', $target_id);
//Target Type
$t->assign('target_type', $target_type);
//Assign Portal List
$t->assign('portal_list', $portal_list_for_view);
//Assign Privilege Info
$t->assign('privilege_info', $portal_manage_for_view);
//Assign Allow Portal List
$t->assign('portal_list', $portal_list_for_view);
//Assign Allow Portlet Group List
$t->assign('portlet_group_list', $portlet_group_list_for_view);

//-- set page title and site position

//Page Title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//Site Position
$t->assign(
    'site_position', [
        [
            'page' => 'portal/system/privilege_list',
            'name' => grn_get_page_display_name('portal/system/privilege_list'),
            'pid'  => $portal_id
        ],
        ['page' => '', 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");

