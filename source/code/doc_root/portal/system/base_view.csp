<?php

use grn\grn\access\service\AppAccess;

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get System Portal
require_once("portal/portal_logic.csp");
$system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
$portal_list = $system_portallogic->getList();

// Get My Portlet Template ID
require_once("portal/system_logic.csp");
$system_logic = GRN_Portal_SystemLogic::getInstance();
$my_portal_template_id = $system_logic->getMyPortaltemplate();
if ( ! $my_portal_template_id
     || ! array_key_exists($my_portal_template_id, $portal_list)
) {
    //Add System Portal
    $portal =& $system_portallogic->add(GRN_PRTL_PORTAL_TEMPLATE);
    $my_portal_template_id = $portal->getOID();

    // Set My Portal Template ID
    require_once("portal/system_logic.csp");
    $system_logic = GRN_Portal_SystemLogic::getInstance();
    $system_logic->setMyPortalTemplate($my_portal_template_id);

    //Check Inspection Message Enabled
    require_once('portal/inspection.csp');
    $inspection = GRN_Portal_Template_Portal_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        //Write Inspection Message
        $message_type = 'template_portal_add';
        $message_args = ['pid' => $portal->getOID()];
        $inspection->record($message_type, $message_args);
    }
} else {
    $portal =& $portal_list[$my_portal_template_id];
}


//Get My Portal Template Column Items
$column_items
    =& $system_portallogic->getColumnItemsWithoutPrivilege($my_portal_template_id);

//Get Embedded Portlet Logic
require_once('portal/system_portlet_logic.csp');
$embedded_portlet_logic = GRN_Portal_SystemEmbeddedPortletLogic::getInstance();
$embedded_portlet_logic->register();

//Create Parameter Translation Map for Portal
$translation_map_portal = [
    'pid' => '_id',              //Portal ID
];

// Create Parameter Translation Map for Portlet Layout
$translation_map_portlet_layout = [
    'pid'               => '_id',
    //Portal ID
    'ppid'              => '_id',
    //Portlet layout ID
    'plid'              => '_id',
    //Portlet ID
    'title'             => 'display_name',
    //Portlet Display Name
    'name'              => 'name',
    //Portlet Name
    'type'              => 'type',
    //Portlet Type
    'version'           => 'version',
    //Portlet Version
    'set_template'      => 'set_template',
    //Portlet Setting Template
    'view_template'     => 'view_template',
    //Portlet View Template
    'settings'          => 'settings',
    //Portlet Settings
    'source'            => 'source',
    //Portlet Source (Only HTML/PHP Portlet)
    'is_open'           => 'is_open',
    //Portlet Open Flag (Only HTML/PHP Portlet)
    'display_name_mode' => 'display_name_mode',
    //Portlet Display Name Mode
];

// Do Parameter Translation for Portal
$portal_for_view = [];
foreach ($translation_map_portal as $view_name => $model_name) {
    switch ($model_name) {
        case '_id':
            $portal_for_view[$view_name] = $portal->getOID();
            break;
        default:
            $portal_for_view[$view_name] = $portal->get($model_name);
            break;
    }
}
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
$login = cb_get_login_user();
$login_id = $login->getOID();
$app_ids_availability
    = AppAccess::getAvailabilityAppIdsInternalByUserId($login_id);
$send_portlet_available = (
    (array_key_exists('message', $app_ids_availability)
     && $app_ids_availability['message'])
    || (array_key_exists('mail', $app_ids_availability)
        && $app_ids_availability['mail'])
);
//Do Parameter Translation for Portal Layout
$column_items_for_view = [];
foreach (array_keys($column_items) as $column_key) {
    //Get Layout Items
    $layout_items =& $column_items[$column_key];

    $layout_items_for_view = [];
    foreach (array_keys($layout_items) as $layout_key) {
        $layout_item_for_view = [];
        $portlet =& $layout_items[$layout_key]->get('portlet');

        //Check Available MyPortal Flag
        $available_myportal
            = $portlet->get(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL);
        if ($available_myportal != 1) {
            continue;
        }

        foreach ($translation_map_portlet_layout as $view_name => $model_name) {
            switch ($view_name) {
                case 'pid':
                    $layout_item_for_view[$view_name] = $portal->getOID();
                    break;
                case 'plid':
                    $layout_item_for_view[$view_name]
                        = $layout_items[$layout_key]->getOID();
                    break;
                case 'ppid':
                    $layout_item_for_view[$view_name] = $portlet->getOID();
                    break;
                case 'settings':
                    $serialized_settings
                        = $layout_items[$layout_key]->get($model_name);
                    if ($serialized_settings) {
                        $layout_item_for_view[$view_name]
                            = cb_unserialize($serialized_settings,
                            ["allowed_classes" => false]);
                    }
                    break;
                case 'title':
                    $portlet_type = $portlet->get('type');
                    if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML
                        || $portlet_type === GRN_PRTL_PORTLET_TYPE_PHP
                    ) {
                        $layout_item_for_view[$view_name]
                            = $portlet->get('name');
                    } else {
                        $layout_item_for_view[$view_name]
                            = $embedded_portlet_logic->getDisplayName($portlet,
                            $layout_items[$layout_key]);
                    }
                    $layout_item_for_view['class'] = implode('_',
                        array_slice(explode('.', $portlet_type), 1));
                    //In the case this app is disable, then do not display this portlet
                    $app_id = explode(".",
                        $portlet_type);
                    $layout_item_for_view['isActive'] = false;
                    if ($portlet_type === GRN_PRTL_PORTLET_TYPE_SEND_LINK) {
                        $layout_item_for_view['isActive']
                            = ($locator->isActive('message')
                               || $locator->isActive('mail'));
                        $layout_item_for_view['no_availability']
                            = ( ! $send_portlet_available);
                    } else {
                        $layout_item_for_view['isActive']
                            = $locator->isActive($app_id[1]);
                        //In the case not privilege in this app, then empty content portlet
                        if (array_key_exists($app_id[1],
                            $app_ids_availability)
                        ) {
                            $layout_item_for_view['no_availability']
                                = ! $app_ids_availability[$app_id[1]];
                        } else {
                            $layout_item_for_view['no_availability'] = false;
                        }
                    }
                    break;
                case 'name':
                    $portlet_type = $portlet->get('type');
                    if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML
                        || $portlet_type === GRN_PRTL_PORTLET_TYPE_PHP
                    ) {
                        $layout_item_for_view[$view_name]
                            = $portlet->get($model_name);
                    } else {
                        $dummy = null;
                        $layout_item_for_view[$view_name]
                            = $embedded_portlet_logic->getDisplayName($portlet,
                            $dummy);
                    }
                    break;
                case 'display_name_mode':
                case 'is_open':
                    $layout_item_for_view[$view_name]
                        = $layout_items[$layout_key]->get($model_name);
                    break;
                default:
                    $layout_item_for_view[$view_name]
                        = $portlet->get($model_name);
                    break;
            }
        }

        $layout_items_for_view[$layout_item_for_view['plid']]
            = $layout_item_for_view;
    }

    $column_item_for_view =& $layout_items_for_view;
    $column_items_for_view[$column_key] = $column_item_for_view;
}

//Assign Display Infomation
//Assign Portal ID
$t->assign('portal_id', $portal->getOID());
//Assign Portal
$t->assign('portal', $portal_for_view);
//Assign Column List
$t->assign('column_list', $column_items_for_view);

// Get System Portlet List
require_once('portal/system_portlet_logic.csp');
$system_embedded_portletlogic
    = GRN_Portal_SystemEmbeddedPortletLogic::getInstance();
$embedded_portlet_list = $system_embedded_portletlogic->getList();
$system_html_portletlogic = GRN_Portal_SystemHTMLPortletLogic::getInstance();
$html_portlet_list = $system_html_portletlogic->getList();

$system_php_portletlogic = GRN_Portal_SystemPHPPortletLogic::getInstance();
$php_portlet_list = $system_php_portletlogic->getList();

/** @var GRN_Portal_Portlet[] $portlet_list */
$portlet_list = $embedded_portlet_list + $html_portlet_list + $php_portlet_list;

// Create Parameter Translation Map for portlet
$translation_map_portlet = [
    'ppid'  => '_id',
    'title' => 'name',
    'type'  => 'type'
];
// Do Parameter Translation for Portlet
$portlet_list_for_view = [];
$portlet_app = ['all' => cb_msg('grn.portal', 'all_portlet')];

foreach ($portlet_list as $portlet_id => $portlet) {
    //Check Available MyPortal Flag
    if ($portlet->get(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL) != '1') {
        continue;
    }

    $portlet_for_view = [];
    foreach ($translation_map_portlet as $view_name => $model_name) {
        switch ($model_name) {
            case '_id':
                $portlet_for_view[$view_name] = $portlet_id;
                break;
            case 'name':
                $portlet_type = $portlet->get('type');
                if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML
                    || $portlet_type === GRN_PRTL_PORTLET_TYPE_PHP
                ) {
                    $portlet_for_view[$view_name] = $portlet->get($model_name);
                } else {
                    $layout = false;
                    $portlet_for_view[$view_name]
                        = $system_embedded_portletlogic->getDisplayName($portlet,
                        $layout);
                }
                break;
            case 'type':
                /** @var string $portlet_type */
                $portlet_type = $portlet->get('type');
                $array = explode('.', $portlet_type);
                if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML
                    || $portlet_type === GRN_PRTL_PORTLET_TYPE_PHP
                ) {
                    $portlet_for_view[$view_name] = 'ptype_' . $array[2];
                    if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML) {
                        $portlet_app[$portlet_for_view[$view_name]]
                            = cb_msg('grn.portal', 'all_html_portlet');
                    } else {
                        $portlet_app[$portlet_for_view[$view_name]]
                            = cb_msg('grn.portal', 'all_php_portlet');
                    }
                } else {
                    if ($portlet_type === GRN_PRTL_PORTLET_TYPE_SEND_LINK) {
                        if ( ! $send_portlet_available) {
                            continue 3; // remove send portlet
                        }
                    }
                    $portlet_for_view[$view_name] = 'ptype_' . $array[1]
                                                    . ' ptype_embedded';
                    $portlet_app[$portlet_for_view[$view_name]]
                        = $locator->getName($array[1]);
                }
                $portlet_for_view['class'] = implode('_',
                    array_slice($array, 1));
                break;
            default:
                break;
        }
    }

    $key = 'p' . $portlet_for_view['ppid'];
    $portlet_list_for_view = $portlet_list_for_view + [
            $key => [
                'title' => $portlet_for_view['title'],
                'type'  => $portlet_for_view['type'],
                'class' => $portlet_for_view['class']
            ]
        ];
}

//Get System Portlet Group List
require_once('portal/portlet_group_logic.csp');
$system_portlet_grouplogic = GRN_Portal_SystemPortletGroupLogic::getInstance();
$portlet_group_list = $system_portlet_grouplogic->getlist();

foreach ($portlet_group_list as $key => $group) {
    $typeKey = 'ptype_' . $key;
    $portlet_app[$typeKey] = $group->get('name');
    $portlet_list = $group->getPortletList();
    foreach ($portlet_list as $portlet) {
        //Check Available MyPortal Flag
        if ($portlet->get(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL) != '1') {
            continue;
        }
        $portletKey = 'p' . $portlet->getOID();
        $portlet_list_for_view[$portletKey]['type']
            = $portlet_list_for_view[$portletKey]['type'] . ' '
              . $typeKey;
    }
}

$t->assign('portlet_filter', $portlet_app);
$t->assign('portlet_list', $portlet_list_for_view);

// set initialize info
$init_info = [
    'title'   => grn_get_page_display_name('portal/system/base_reset'),
    'page'    => 'portal/system/base_reset.tpl',
    'handler' => 'lnk_init_template',
    'data'    => ['portal' => ['pid' => $portal_for_view['pid']]]
];
$t->assign('init_info', $init_info);

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

//site position
$t->assign(
    'site_position', [
        ['page' => "", 'name' => $page_title]
    ]
);

//Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("{$doc_name}.tpl");


