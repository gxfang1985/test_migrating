<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    unset($G_INPUT['add']);

    require_once("_access_util.csp");

    $text = null;
    if (array_key_exists('text', $G_INPUT)) {
        $text = $G_INPUT['text'];
    }

    $func = $G_INPUT['func'];
    if ($func == 'search') {
        cb_redirect('portal/system/access_list', [
            'nid'  => $node_id,
            'poid' => $poid,
            'pid'  => $portal_id,
            'plid' => $layout_id,
            'text' => $text
        ]);
    }

    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();

    $session_name = 'portal.system.access_add';
    $session =& $session_manager->getSession($session_name);

    $aid = $session->get('target_ids');

    //$aid = @ $G_INPUT['aid'];
    if ( ! is_array($aid)) {
        cb_redirect('portal/system/access_list', $G_INPUT);
    }

    // Smartyに削除するアクセス権情報を割り当てる
    $security_model = $logic->getSecurityModel($object_id);
    $authorities = ['browse' => @ $G_INPUT['authority_browse'] ? 1 : 0];
    if ($security_model == 'revoke') {
        $authorities = ['browse' => @ $G_INPUT['authority_browse'] ? 0 : 1];
    }
    $uum =& $G_container_base->getInstance('uum');
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    foreach (array_keys($aid) as $item) {
        $ids = explode(':', $item);
        if (count($ids) < 2) {
            continue;
        }
        $id = $ids[1];
        switch ($ids[0]) {
            case 'user':
                if ( ! ($uum->getUser($id))) {
                    cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_USER_ID);
                }

                // アクセス権が設定されているかチェック
                if ($access = $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    if ($authorities['browse'] == 0) {
                        // アクセス権の削除する
                        $logic->deleteAccesses($object_id, [$access]);
                    }
                } else {
                    if ($authorities['browse'] == 1) {
                        // アクセス権の追加
                        $logic->addAccess($object_id, GRN_PRTL_TARGET_TYPE_USER,
                            $id, $authorities);
                    }
                }
                break;

            case 'group':
                if ( ! ($uum->getGroup($id))) {
                    cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_GROUP_ID);
                }

                // アクセス権が設定されているかチェック
                if ($access = $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    if ($authorities['browse'] == 0) {
                        // アクセス権の削除する
                        $logic->deleteAccesses($object_id, [$access]);
                    }
                } else {
                    if ($authorities['browse'] == 1) {
                        // アクセス権の追加
                        $logic->addAccess($object_id,
                            GRN_PRTL_TARGET_TYPE_GROUP, $id, $authorities);
                    }
                }
                break;

            case 'static_role':
                if ( ! ($uum->getStaticRole($id))) {
                    cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_ROLE_ID);
                }

                // アクセス権が設定されているかチェック
                if ($access = $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    if ($authorities['browse'] == 0) {
                        // アクセス権の削除する
                        $logic->deleteAccesses($object_id, [$access]);
                    }
                } else {
                    if ($authorities['browse'] == 1) {
                        // アクセス権の追加
                        $logic->addAccess($object_id,
                            GRN_PRTL_TARGET_TYPE_STATIC_ROLE, $id,
                            $authorities);
                    }
                }
                break;

            case 'dynamic_role':
                if ( ! (array_key_exists($id, $dynamic_roles))) {
                    cb_throw_error(E_GRN_PRTL_MANAGE_INVALID_ROLE_ID);
                }

                // アクセス権が設定されているかチェック
                if ($access = $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    if ($authorities['browse'] == 0) {
                        // アクセス権の削除する
                        $logic->deleteAccesses($object_id, [$access]);
                    }
                } else {
                    if ($authorities['browse'] == 1) {
                        // アクセス権の追加
                        $logic->addAccess($object_id,
                            GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE, $id,
                            $authorities);
                    }
                }
                break;
        }
    }

    $params = $G_INPUT;
    unset($params['aid']);
    unset($params['authority_browse']);
    unset($params['search']);
    unset($params['func']);
    cb_redirect('portal/system/access_list', $params);
}

