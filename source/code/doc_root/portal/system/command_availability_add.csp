<?php

//-- instantiate Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    unset($G_INPUT['add']);

    $poid = null;
    if (array_key_exists('poid', $G_INPUT)) {
        $poid = $G_INPUT['poid'];
    }

    $text = null;
    if (array_key_exists('text', $G_INPUT)) {
        $text = $G_INPUT['text'];
    }

    $func = $G_INPUT['func'];
    if ($func == 'search') {
        cb_redirect('portal/system/availability_list',
            ['poid' => $poid, 'text' => $text]);
    }

    $aid = null;
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();

    $session_name = 'portal.system.availability_add';
    $session =& $session_manager->getSession($session_name);
    $aid = $session->get('target_ids');
    if ( ! is_array($aid)) {
        cb_redirect('portal/system/availability_list', $G_INPUT);
    }

    require_once('fw/uum_core.csp');
    require_once('portal/access_logic.csp');
    require_once('grn/uum_util.csp');

    $session =& $session_manager->getSession(GRN_PRTL_MODULE_ID);

    $logic = GRN_Portal_MyPortalAccessLogic::getInstance();
    $object =& $logic->getObject();
    $object_id = $object->getOID();

    $uum =& $G_container_base->getInstance('uum');

    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    // アクセス権を構成する権限一覧を取得する
    $authorities = ['use' => 1];
    foreach (array_keys($aid) as $item) {
        $ids = explode(':', $item);
        if (count($ids) < 2) {
            continue;
        }
        $id = $ids[1];
        switch ($ids[0]) {
            // ユーザーにアクセス権を付与する
            case 'user':
                if ( ! ($uum->getUser($id))) {
                    cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_TARGET_ID);
                }

                // アクセス権が設定されているかチェック
                if ( ! $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    $logic->addAccess($object_id, GRN_PRTL_TARGET_TYPE_USER,
                        $id, $authorities);
                }
                break;

            case 'group':
                if ( ! ($uum->getGroup($id))) {
                    cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_TARGET_ID);
                }

                // アクセス権が設定されているかチェック
                if ( ! $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    $logic->addAccess($object_id, GRN_PRTL_TARGET_TYPE_GROUP,
                        $id, $authorities);
                }
                break;

            // スタティックロールにアクセス権を付与する
            case 'static_role':
                if ( ! ($uum->getStaticRole(intval($id)))) {
                    cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_TARGET_ID);
                }

                // アクセス権が設定されているかチェック
                if ( ! $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    $logic->addAccess($object_id,
                        GRN_PRTL_TARGET_TYPE_STATIC_ROLE, $id, $authorities);
                }
                break;

            // ダイナミックロールにアクセス権を付与する
            case 'dynamic_role':
                if ( ! array_key_exists($id, $dynamic_roles)) {
                    cb_throw_error(E_GRN_PRTL_ACCESS_INVALID_TARGET_ID);
                }

                // アクセス権が設定されているかチェック
                if ( ! $logic->getAccess($object_id, $ids[0], $ids[1])) {
                    $logic->addAccess($object_id,
                        GRN_PRTL_TARGET_TYPE_DYNAMIC_ROLE, $id, $authorities);
                }

                break;
        }
    }

    $params = $G_INPUT;
    unset($params['aid']);
    unset($params['search']);
    unset($params['func']);
    // Myポータルの使用権限ページにリダイレクトする
    cb_redirect('portal/system/availability_list', $params);
}

