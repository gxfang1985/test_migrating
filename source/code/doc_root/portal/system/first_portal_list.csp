<?php

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// Get Selected Oganization ID
$organization_id = @$G_INPUT['oid'];
$organization_id = is_null($organization_id) ? 0 : $organization_id;

// Get Organization Unit Tree for View
require_once('grn/uum_util.csp');
$uum_util = GRN_UumUtil::getInstance();
$organization_tree_for_view
    = $uum_util->getGroupSelectionTree($organization_id);

// Get Organization Portal ID
require_once('portal/system_logic.csp');
$portal_systemlogic = GRN_Portal_SystemLogic::getInstance();
$portal_id
    = $portal_systemlogic->getOrganizationLoginPortal($organization_id);

// Get Organization Portal
require_once('portal/portal_logic.csp');
$system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
$portal_list = $system_portallogic->getList();
$portal_name = '';
if (array_key_exists($portal_id, $portal_list)) {
    $portal_name = $portal_list[$portal_id]->get(GRN_PRTL_PROPERTY_NAME);
}

// Create Selcted Organization for View
$first_portal_for_view = [
    'oid'          => $organization_id,
    'portal_title' => $portal_name,
];

// Assign First Portal Display Infomation
// Assign First Portal Display Infomation
$t->assign('first_portal', $first_portal_for_view);
// Assign Selected Organization ID Display Information
$t->assign('organization_id', $organization_id);
// Assign Organization Tree Display Infomation
$t->assign('organization', $organization_tree_for_view);

//-- set page title and site position

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// site position
$t->assign('site_position', [['page' => '', 'name' => $page_title]]);

$doc_name = cb_get_pagename();

// tree view
require_once('grn/org_tree.csp');

$util = GRN_OrgTreeUtil::getInstance();
$tree =& $util->getTree($doc_name);

if (is_null($organization_id)) {
    $organization_id = $tree->getSelectedNode();
}

if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
    $tree->initialize();
    $organization_id = null;
}
$tree->setSelectedNode($organization_id);
$util->setTree($doc_name, $tree);
$org = $tree->getRoot();
$t->assign('page_name', $doc_name);
$t->assign('org', $org);

// Display Smarty Template
$t->display("{$doc_name}.tpl");

/**
 * $tree_of_organizations = array(
 *
 * 'oid'   => 選択している組織ID,      （選択している組織がある場合のみ）
 * 'code'  => 選択している組織コード,  （選択している組織がある場合のみ）
 * 'title' => 選択している組織名,,     （選択している組織がある場合のみ）
 * 'memo'  => 選択している組織のメモ,, （選択している組織がある場合のみ）
 *
 * // 選択している組織の子組織（選択している組織がある場合のみ）
 * 'children' => array(
 * '子組織ID' => array(
 * 'oid'   => 組織ID,
 * 'code'  => 組織コード
 * 'title' => 組織名,
 * 'memo'  => 組織のメモ,
 * 'child' => 組織が子組織を持ってる場合にTRUE,
 * ),
 * ...
 * ),
 *
 * // 選択している組織までのパス、選択組織を最後に含む（選択している組織がある場合のみ）
 * // パスの中に選択されている組織は含まれない
 * 'ancesters' => array(
 * '親組織ID' => array(
 * 'oid'   => 組織ID,
 * 'code'  => 組織コード
 * 'title' => 組織名,
 * 'memo'  => 組織のメモ,
 * 'child' => 組織が子組織を持ってる場合にTRUE,
 * ),
 * ...
 * ),
 *
 * // 選択している組織の兄弟組織、選択している組織がない場合はトップ組織の配列
 * // 兄弟組織の中に選択されている組織は含まれる
 * 'siblings' => array(
 * '兄弟組織ID' => array(
 * 'oid'   => 組織ID,
 * 'code'  => 組織コード
 * 'title' => 組織名,
 * 'memo'  => 組織のメモ,
 * 'child' => 組織が子組織を持ってる場合にTRUE,
 * ),
 * ...
 * ),
 * ),
 * );
 **/


