<?php

use grn\grn\access\service\AppAccess;

// instantiate an Smarty object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Get Portal ID
$portal_id = @ $G_INPUT['pid'];
$user_id = @ $G_INPUT['uid'];
$app_ids_availability
    = AppAccess::getAvailabilityAppIdsInternalByUserId($user_id);
$portal_send = true;
if ( ! array_key_exists('message', $app_ids_availability)
     || ! $app_ids_availability['message']
) {
    if ( ! array_key_exists('mail', $app_ids_availability)
         || ! $app_ids_availability['mail']
    ) {
        $portal_send = false;
    }
}

//Get System Portal
require_once('portal/portal_logic.csp');
$system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
$portal =& $system_portallogic->get($portal_id);

//Evaluate Access Right of Portal
require_once('portal/access_logic.csp');
$access_logic = GRN_Portal_SystemPortalAccessLogic::getInstance();
$access_logic->evaluateAccess($portal);

//Evaluate Manage Right
require_once('portal/manage_logic.csp');
$manage_logic = GRN_Portal_SystemPortalManageLogic::getInstance();
$manage_logic->evaluateManage($portal, true);

// Evaluate access of Portal
require_once('portal/access_logic.csp');
$access_logic = GRN_Portal_SystemPortalAccessLogic::getInstance();
if ($access_logic->evaluateAccess($portal, false, $user_id)) {
    //Get Column Items
    $column_items =& $system_portallogic->getColumnItemsByTargetUser($portal_id,
        $user_id);

    // Create Parameter Translation Map for Portal
    $translation_map_portal = [
        'pid'   => '_id',          //Portal ID
        'title' => 'name',         //Portal Name
        'open'  => 'is_open',      //Portal Open Flag
    ];

    // Create Parameter Translation Map for Portal Layout
    $translation_map_portal_layout = [
        'pid'               => '_id',
        //Portal ID
        'ppid'              => '_id',
        //Portlet layout ID
        'plid'              => '_id',
        //Portlet ID
        'title'             => 'display_name',
        //Portlet Title
        'type'              => 'type',
        //Portlet Type
        'version'           => 'version',
        //Portlet Version
        'set_template'      => 'set_template',
        //Portlet Setting Template
        'view_template'     => 'view_template',
        //Portlet View Template
        'settings'          => 'settings',
        //Portlet Settings
        'source'            => 'source',
        //Portlet Source (Only HTML/PHP Portlet)
        'open'              => 'is_open',
        //Portlet Open Flag (Only HTML/PHP Portlet)
        'display_name_mode' => 'display_name_mode',
        //Portlet Display Name Mode
    ];

    // Evaluate access of Portlet Layout.
    require_once('portal/access_logic.csp');
    $access_logic = GRN_Portal_PortletLayoutAccessLogic::getInstance();
    $layout_id_list = $access_logic->evaluateAccesses($portal_id, $user_id);

    // Do Parameter Translation for Portal
    $portal_for_view = [];
    foreach ($translation_map_portal as $view_name => $model_name) {
        if ($view_name === 'pid') {
            $portal_for_view[$view_name] = $portal->getOID();
        } else {
            $portal_for_view[$view_name] = $portal->get($model_name);
        }
    }

    //Get Embedded Portlet Logic
    require_once('portal/system_portlet_logic.csp');
    $embedded_portlet_logic
        = GRN_Portal_SystemEmbeddedPortletLogic::getInstance();

    $column_items_for_view = [];
    // Do Parameter Translation for Portal Layout
    foreach ($column_items as $column_key => $column_item) {
        $layout_items =& $column_item;

        $layout_items_for_view = [];
        foreach ($layout_items as $layout_item) {
            //Check layout of portlet.
            if (false === array_search($layout_item->getOID(),
                    $layout_id_list)
            ) {
                continue;
            }

            $layout_item_for_view = [];
            $portlet =& $layout_item->get('portlet');

            $app_id = explode(".", $portlet->get('type'));
            if (array_key_exists($app_id[1], $app_ids_availability)) {
                if ( ! $app_ids_availability[$app_id[1]]) {
                    continue;
                }
            }
            if ( ! $portal_send) {
                if ($app_id[1] == 'portal' && $app_id[2] == 'send') {
                    continue;
                }
            }

            foreach (
                $translation_map_portal_layout as $view_name => $model_name
            ) {
                if ($view_name === 'pid') {
                    $layout_item_for_view[$view_name] = $portal_id;
                } elseif ($view_name === 'ppid') {
                    $layout_item_for_view[$view_name] = $portlet->getOID();
                } elseif ($view_name === 'plid') {
                    $layout_item_for_view[$view_name] = $layout_item->getOID();
                } elseif ($view_name === 'settings') {
                    $serialized_settings = $layout_item->get($model_name);
                    if ($serialized_settings) {
                        $layout_item_for_view[$view_name]
                            = @cb_unserialize($serialized_settings,
                            ["allowed_classes" => false]);
                    }
                } elseif ($view_name === 'title') {
                    $portlet_type = $portlet->get('type');

                    if ($portlet_type === GRN_PRTL_PORTLET_TYPE_HTML
                        || $portlet_type === GRN_PRTL_PORTLET_TYPE_PHP
                    ) {
                        $layout_item_for_view[$view_name]
                            = $portlet->get($model_name);
                    } else {
                        $layout_item_for_view[$view_name]
                            = $embedded_portlet_logic->getDisplayName($portlet,
                            $layout_item);
                    }
                } elseif ($view_name === 'open'
                          || $view_name === 'display_name_mode'
                ) {
                    $layout_item_for_view[$view_name]
                        = $layout_item->get($model_name);
                } else {
                    $layout_item_for_view[$view_name]
                        = $portlet->get($model_name);
                }
            }

            $layout_items_for_view[$layout_item_for_view['plid']]
                = $layout_item_for_view;
        }

        $column_item_for_view =& $layout_items_for_view;
        $key = 'layout_' . $column_key;
        $column_items_for_view[$key] = ['portlet' => $column_item_for_view];
    }
} else {
    // Portal Can't Access
    $portal_for_view = [];
    $column_items_for_view = [];
}

// Assign Portal Display Infomation
$t->assign('portal', $portal_for_view);

// Assign Portal Layout Display Infomation
$t->assign('portlet_layout', $column_items_for_view);

//layout setting
$poralLayout = new \grn\portal\PortalLayout($portal_id);
$t->assign('fixed', $poralLayout->isFixedWidth());
$t->assign('portal_layout', $poralLayout->getLayoutSettings());

//-- set page title and site position

// page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

// Display Smarty Template
$doc_name = cb_get_pagename();
$t->display("portal/preview.tpl");


