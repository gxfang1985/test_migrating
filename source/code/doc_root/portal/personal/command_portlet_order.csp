<?php

// Evaluate access of My portal function.
require_once('portal/access_logic.csp');
$myportal_logic = GRN_Portal_MyPortalAccessLogic::getInstance();
$myportal_logic->evaluateAccess();

//Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Create Parameter Translation Map
    $translation_map = [
        'pid'      => '_pid',        //Portal ID
        'plid'     => '_plid',       //Layout ID
        'position' => 'position',    //Position
    ];

    // Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    //Check Portlet Layoput ID Count
    if (count($properties['_plid']) == 0) {
        //Redirect Next Page
        cb_redirect('portal/personal/view', ['pid' => $properties['_pid']]);
    }

    //Get Column Item
    require_once('portal/portal_logic.csp');
    $my_portal_logic = GRN_Portal_MyPortalLogic::getInstance();
    $column_items =& $my_portal_logic->getColumnItems($properties['_pid']);
    $column_item = [];
    switch ($properties['position']) {
        case 'top':
            $column_item =& $column_items['0'];
            break;
        case 'left':
            $column_item =& $column_items['1'];
            break;
        case 'center':
            $column_item =& $column_items['2'];
            break;
        case 'right':
            $column_item =& $column_items['3'];
            break;
    }
    $layout_items =& $column_item;

    //Change Order List
    $result_column_item = [];
    $order_key_list = array_flip($properties['_plid']);
    foreach (array_keys($layout_items) as $layout_key) {
        $layout_id = $layout_items[$layout_key]->getOID();
        if (array_key_exists($layout_id, $order_key_list)) {
            $order_key = $order_key_list[$layout_id];
            $result_column_item[$order_key] = $layout_items[$layout_key];
        }
    }
    $column_item = $result_column_item;
    ksort($column_item);

    // Set Target Portal Column Items
    $layout_list = $my_portal_logic->setColumnItems($properties['_pid'],
        $column_items);

    //Check Inspection Message Enabled
    require_once('portal/inspection.csp');
    $inspection = GRN_Portal_My_Portal_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        //Get Portal Name
        require_once('portal/portal_logic.csp');
        $my_portal_logic = GRN_Portal_MyPortalLogic::getInstance();
        $portal =& $my_portal_logic->get($properties['_pid']);
        $portal_name = $portal->get('name');

        //Get Portlet Name
        foreach ($properties['_plid'] as $layout_id) {
            require_once('portal/portlet_layout_logic.csp');
            $portlet_layout_logic
                = GRN_Portal_PortletLayoutLogic::getInstance();
            $layout =& $portlet_layout_logic->get($layout_id);
            if ( ! $layout) {
                require_once('portal/error_code.csp');
                cb_throw_error(E_GRN_PRTL_PORTLET_LAYOUT_NOT_FOUND);
            }
            $portlet =& $layout->get(GRN_PRTL_PROPERTY_PORTLET);
            $portlet_id = $portlet->getOID();;
            $type = $portlet->get('type');
            if ($type === GRN_PRTL_PORTLET_TYPE_HTML
                || $type === GRN_PRTL_PORTLET_TYPE_PHP
            ) {
                $user =& $portlet->get(GRN_PRTL_PROPERTY_USER);
                if ($user) {
                    require_once('portal/my_portlet_logic.csp');
                    $my_portletlogic_base
                        = GRN_Portal_MyPortletLogicBase::getInstance();
                    $portlet_name
                        = $my_portletlogic_base->getDisplayName($portlet,
                        $layout);
                } else {
                    require_once('portal/system_portlet_logic.csp');
                    $system_portletlogic_base
                        = GRN_Portal_SystemPortletLogicBase::getInstance();
                    $portlet_name
                        = $system_portletlogic_base->getDisplayName($portlet,
                        $layout);
                }

            } else {
                require_once('portal/system_portlet_logic.csp');
                $embeded_portallogic
                    = GRN_Portal_SystemEmbeddedPortletLogic::getInstance();
                $portlet_name = $embeded_portallogic->getDisplayName($portlet,
                    $layout);
            }
        }
        //Write Inspection Message
        $message_type = 'my_portal_portlet_order';
        $message_args = [];
        $inspection->record($message_type, $message_args);
    }


    //Redirect Next Page
    cb_redirect('portal/personal/view', ['pid' => $properties['_pid']]);
}


