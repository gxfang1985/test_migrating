<?php

//Evaluate access of My portal function.
require_once('portal/access_logic.csp');
$myportal_logic = GRN_Portal_MyPortalAccessLogic::getInstance();
$myportal_logic->evaluateAccess();

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Create Parameter Translation Map
    $translation_map = [
        'pid' => '_id',
    ];

    // Do Parameter Translation
    $properties = [];
    global $G_INPUT;
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = cb_at($G_INPUT, $view_name);
    }

    // Get My Portlet Template ID
    require_once("portal/system_logic.csp");
    $system_logic = GRN_Portal_SystemLogic::getInstance();
    $my_portal_template_id = $system_logic->getMyPortaltemplate();

    //Get System Portal
    require_once("portal/portal_logic.csp");
    $system_portallogic = GRN_Portal_SystemPortalLogic::getInstance();
    $portal_list = $system_portallogic->getList();

    //Check My Portal Template Available
    $result_column_items = [];
    if ($my_portal_template_id
        && array_key_exists($my_portal_template_id, $portal_list)
    ) {
        //Get My Portal Template Column Items
        $column_items
            =& $system_portallogic->getColumnItems($my_portal_template_id);

        //Create Result Column Items
        foreach (array_keys($column_items) as $column_key) {
            $layout_items =& $column_items[$column_key];
            foreach (array_keys($layout_items) as $layout_key) {
                $portlet
                    =& $layout_items[$layout_key]->get(GRN_PRTL_PROPERTY_PORTLET);

                //Exclude Unavaliable MyPortal Portlet
                if ($portlet->get(GRN_PRTL_PROPERTY_AVAILABLE_MYPORTAL)
                    !== '1'
                ) {
                    continue;
                }

                $display_name
                    = $layout_items[$layout_key]->get(GRN_PRTL_PROPERTY_DISPLAY_NAME);
                $display_name_mode
                    = $layout_items[$layout_key]->get(GRN_PRTL_PROPERTY_DISPLAY_NAME_MODE);
                $portlet_key = 'p' . $portlet->getOID();
                $result_column_items[$column_key][$layout_key]
                    = [
                    $portlet_key                        => $display_name,
                    GRN_PRTL_PROPERTY_DISPLAY_NAME_MODE => $display_name_mode
                ];
            }
        }
    } else {
        // Create Empty Column Items
        $result_column_items = [0 => [], 1 => [], 2 => [], 3 => []];
    }

    // Set Target Portal Column Items
    require_once('portal/portal_logic.csp');
    $my_portallogic = GRN_Portal_MyPortalLogic::getInstance();
    $my_portallogic->setColumnItems($properties['_id'], $result_column_items);

    // Remove width settings
    $portalLayout = new \grn\portal\PortalLayout($properties['_id']);
    $portalLayout->deleteLayoutSettings();

    //Redirect Next Page
    cb_redirect('portal/personal/view', ['pid' => $properties['_id']]);
}
