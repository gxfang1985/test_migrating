<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    global $G_INPUT;

    global $G_container_app;
    $uum = $G_container_app->getInstance('uum');
    $login = $uum->getLoginUser();

    require_once('memo/logic.csp');
    $logic = GRN_Memo_Logic::getInstance();

    require_once('memo/controller.csp');

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty();

    $target_name = 'memo/file_add';

    require('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($target_name, true);

    require_once('grn/upload.csp');
    $files = GRN_UploadFile::getUploadedFiles(@$G_INPUT['upload_ticket'],
        @$G_INPUT['upload_fileids'], true);


    $folder = null;
    $pdid = null;
    if (array_key_exists('pdid', $G_INPUT) && strlen($G_INPUT['pdid']) > 0
        && $G_INPUT['pdid'] > 0
    ) {
        $pdid = $G_INPUT['pdid'];

        if (is_null(($folder =& $logic->getFolder($login, $pdid)))) {
            require_once('memo/error_code.csp');
            cb_throw_error(E_GRN_MEMO_FOLDER_NOT_FOUND);
        }
    }

    if (is_array($files) && count($files) > 0) {
        foreach ($files as $fileid => $tmpfile) {
            $memo = @$G_INPUT['memo_' . $fileid];
            $max_version = @$G_INPUT['max_version_' . $fileid];
            $title = @$G_INPUT['title_' . $fileid];

            if (strlen($title) < 1) {
                $title = null;
            }

            $item = $logic->createItem($login, $folder);
            $file = $item->createFile($login, $title, $tmpfile, null);

            if ( ! is_null($memo)) {
                $file->setDescription($memo);
            }
            if ( ! is_null($max_version)) {
                $file->setMaxVersion($max_version);
            }
            if ( ! is_null($title)) {
                $file->setTitle($title);
            }

            //Logging
            require_once('memo/inspection.csp');
            $inspection = GRN_Memo_Inspection::getInstance();

            $inspection->writeLogFile('create', $item, $file);
        }

        // 総ファイルサイズをチェック
        $logic->checkFileSize($login);

        if ($pdid) {
            cb_redirect('memo/index', ['did' => $pdid]);
        } else {
            cb_redirect('memo/index', ['did' => @$G_INPUT['did']]);
        }
    } else {
        $t->setPageInfo($target_name);

        $t->assign('title', cb_at($G_INPUT, 'title'));
        $t->assign('pdid', cb_at($G_INPUT, 'pdid'));
        $t->assign('memo', cb_at($G_INPUT, 'memo'));
        $t->assign('max_version', cb_at($G_INPUT, 'max_version'));

        $folder_id = null;
        if (array_key_exists('did', $G_INPUT)
            && grn\grn\Validate::isNumber($G_INPUT['did'])
        ) {
            $folder_id = $G_INPUT['did'];
        }
        $t->assign('folder_id', $folder_id);

        // 位置メニュー
        $folders = $logic->getRootFolders($login);
        $folder_menu = grn_memo_folder_select_menu($folders);
        $t->assign('folder_menu', $folder_menu);

        if (is_null($folder_id)) {
            $t->assign('folder_name',
                cb_msg('grn.memo', 'lastest_folder_name'));
        } else {
            $t->assign('folder_name', $folder_menu[$folder_id]);
        }

        $t->assign('err_no_file', true);
        $utility = new GRN_Memo_ControllerUtil($target_name);

        $t->assign('version', $utility->getFileMaxVersionMenu());

        $position = ['memo/index' => ['did' => $folder_id]];
        $utility->setSitePosition($t, $position);

        //generate upload ticket
        include('grn/_upload_prepend.csp');
        $t->assign('upload_ticket', @$G_INPUT['upload_ticket']);
        //remove unchecked files
        GRN_UploadFile::removeUploadedFilesByFileIds(@$G_INPUT['upload_ticket'],
            @$G_INPUT['upload_fileids']);

        $t->display($target_name . '.tpl');
    }
}
