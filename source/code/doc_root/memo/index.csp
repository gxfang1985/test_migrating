<?php
global $G_INPUT;

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();

//------------------

require_once('memo/controller.csp');
$utility = new GRN_Memo_ControllerUtil();

$folder_id = null;
if (array_key_exists('did', $G_INPUT)
    && grn\grn\Validate::isNumber($G_INPUT['did'])
) {
    $folder_id = $G_INPUT['did'];
}

// --- folder tree
require_once('grn/org_tree.csp');
require_once('memo/folder_tree.csp');

$util = GRN_OrgTreeUtil::getInstance();
$tree = $util->getTree(cb_get_pagename(), 'GRN_Memo_FolderTree');

$tree_for_view = [];
if (is_null($folder_id)) {
    $folder_id = $tree->getSelectedNode();
}
if (array_key_exists('top', $G_INPUT) || is_null($tree->getRoot())) {
    $tree->initialize();
    if ( ! array_key_exists('did', $G_INPUT)) {
        $folder_id = null;
    }
}
$tree->setSelectedNode($folder_id);
$util->setTree(cb_get_pagename(), $tree);

$tree_for_view = [
    'page_name'    => cb_get_pagename(),
    'root'         => $tree->getRoot(),
    'root_caption' => cb_msg('grn.memo', 'lastest_folder_name'),
    'async_url'    => 'memo/folder_json',
    'link_url'     => 'memo/index',
    'selected_oid' => $folder_id,
    'oid_key'      => 'did',
];
$t->assign('folder_tree', $tree_for_view);
// --- end: folder tree

$t->assign('folder_id', $folder_id);


require_once('memo/logic.csp');
$logic = GRN_Memo_Logic::getInstance();

$folders = $logic->getRootFolders($login);

$t->assign('folder_menu', grn_memo_folder_select_menu($folders));

//$folders_for_view = grn_memo_build_hierarchy( $folders, $folder_id );

$folder = null;
$memo_folder_view = null;
if ( ! is_null($folder_id)) {
    if (is_null(($folder =& $logic->getFolder($login, $folder_id)))) {
        require_once('memo/error_code.csp');
        cb_throw_error(E_GRN_MEMO_FOLDER_NOT_FOUND);
    }
    $memo_folder_view = grn_memo_folder_view($folder);
    $t->assign('current', $memo_folder_view);
}

//$t->assign( 'folders', $folders_for_view );
$t->assign('root_folders_count', count($folders));

// アイテム一覧

$order_column = $utility->getListOrderColumn();
$t->assign('sort', $order_column['param']);

$offset = $utility->getListOffset();

$uconfig = $utility->getUserConfig($login);
$limit = $uconfig->getListMax();

require_once('memo/list.csp');
$list = new GRN_Memo_ItemList($login);
$list->setOffset($offset);
$list->setLimit($limit + 1);
$list->addOrderColumn($order_column['column'], $order_column['order']);
$list->setFolder($folder);

$items_for_view = [];

/** @var GRN_Memo_Item $item */
while ( ! is_null(($item = $list->iterate()))) {
    if ($item->isFile()) {
        $file =& $item->getContent();

        $item_for_view = [
            'type' => 'file',
            'id'   => $item->getOID(),
            'data' => $utility->getFileView($file),
            'size' => $item->get('size'),
        ];
    } else {
        $content = $item->getContent();

        $item_for_view = [
            'type' => 'content',
            'id'   => $item->getOID(),
            'data' => $utility->getContentView($content, false),
        ];
    }

    if ( ! $folder_id) {
        if (($folder = $item->get('folder'))) {
            $item_for_view['folder'] = [
                'name' => $folder->get('name'),
                'id'   => $folder->getOID()
            ];
        }
    }

    $items_for_view[$item->getOID()] = $item_for_view;
}

$isExistsNextPage = count($items_for_view) > $limit;
if ($isExistsNextPage) {
    array_pop($items_for_view);
}

$t->assign('items', $items_for_view);

//delete all info
$delete_all_info = [
    'title'   => grn_get_page_display_name('memo/delete_all'),
    'page'    => 'memo/delete_all.tpl',
    'data'    => [
        'folder_id' => $folder_id,
        'folder'    => $memo_folder_view
    ],
    'handler' => 'lnk_delete_all'
];
$t->assign('delete_all_info', $delete_all_info);

//delete multi info
$delete_multi_info = [
    'title'         => grn_get_page_display_name('memo/delete_multi'),
    'page'          => 'memo/delete_multi.tpl',
    'data'          => [
        'search'    => false,
        'folder_id' => $folder_id,
        'folder'    => $memo_folder_view
    ],
    'handler'       => ['btn_delete_multi1', 'btn_delete_multi2'],
    'multi_target'  => 'eid[]',
    'form_target'   => 'memo/index',
    'before_delete' => 'on_before_show_popup',
];
$t->assign('delete_multi_info', $delete_multi_info);

// ナビゲーションリンク
$navi_info_for_view = $utility->makeSimpleNaviInformation($offset, $limit,
    count($items_for_view), $isExistsNextPage, ['did' => $folder_id]);
$sort_order = cb_at($G_INPUT, 'sort');
if ($sort_order) {
    $navi_info_for_view['navi']['params']['sort'] = $sort_order;
}
$t->assign('navi_info', $navi_info_for_view);

// ファイルサイズ
require_once('memo/config.csp');
$config = GRN_Memo_SystemConfig::getInstance();
$t->assign('limit_size', $config->getFileSizeLimit());
$t->assign('total_size', $logic->getFileSize($login, null));

$utility->setSitePosition($t, null);

$t->assign('config', $utility->getConfigValues($login));

$t->display(cb_get_pagename() . ".tpl");

