<?php

global $G_INPUT;

// Smarty をインスタンス化
require_once('grn/smarty.csp');
$t = new GRN_Smarty;

// ユーザー取得
global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();

//------------------

require_once('memo/controller.csp');
$utility = new GRN_Memo_ControllerUtil();

$folder_id = null;
if (array_key_exists('did', $G_INPUT) && strlen($G_INPUT['did']) > 0
    && $G_INPUT['did'] > 0
) {
    $folder_id = $G_INPUT['did'];
}
$t->assign('folder_id', $folder_id);

require_once('memo/logic.csp');
$logic = GRN_Memo_Logic::getInstance();


$session = $utility->getSession();

if (@ $G_INPUT['sf']) {
    $items = $session->get('search_items');
    $text = $session->get('search_text');
    $sdid = $session->get('search_sdid');
    $sub = $session->get('search_sub');
    $limit = $session->get('search_limit');
    $sensitive = $session->get('search_sensitive');
} else {
    $items = [];
    if (@ $G_INPUT['ti']) {
        $items['title'] = 1;
    }
    if (@ $G_INPUT['da']) {
        $items['data'] = 1;
    }

    $text = @ $G_INPUT['text'];
    $sdid = @ $G_INPUT['sdid'];
    $sub = @ $G_INPUT['sb'];
    $limit = @ $G_INPUT['li'];
    $sensitive = @ $G_INPUT['se'];

    if ( ! @ $G_INPUT['in']) {
        // パラメータ初期化

        // デフォルトでは全項目を検索する
        $items = ['title' => 1, 'data' => 1];

        // デフォルトではサブフォルダを検索する
        $sub = 1;

        // デフォルトでは過去3ヶ月の更新を検索する
        $limit = 3;

        // デフォルトでは大文字小文字を区別しない
        $sensitive = false;

        if ( ! array_key_exists('sdid', $G_INPUT)) {
            $sdid = $folder_id;
        }
    }
}

$session->set('search_items', $items);
$session->set('search_text', $text);
$session->set('search_sdid', $sdid);
$session->set('search_sub', $sub);
$session->set('search_limit', $limit);
$session->set('search_sensitive', $sensitive);

$folder = null;

if ($folder_id) {
    if ( ! ($folder =& $logic->getFolder($login, $folder_id))) {
        require_once('memo/error_code.csp');
        cb_throw_error(E_GRN_MEMO_FOLDER_NOT_FOUND);
    }

    $t->assign('folder', ['name' => $folder->get('name'), 'did' => $folder_id]);
}

$search_folder = null;

if ($sdid) {
    if ( ! ($search_folder =& $logic->getFolder($login, $sdid))) {
        require_once('memo/error_code.csp');
        cb_throw_error(E_GRN_MEMO_FOLDER_NOT_FOUND);
    }
}


require_once('grn/ui.csp');
$cm = GRN_UIConfigManager::getInstance();
$ui_config = $cm->getUserConfig($login);

$result = [];
$item_count = 0;
$isExistsNextPage = false;
if (strlen($text) && $items) {
    require_once('memo/include_search.csp');

    $search = new GRN_Memo_Search($login);

    $search->setFolder($search_folder);
    $search->setEnableSubFolder($sub);

    if ($limit) {
        $limit_params = [
            'column'   => 'mtime',
            'operator' => '>',
            'value'    => null
        ];

        require_once('fw/date.csp');
        $ts = new CB_TimeStampEx();
        $today = $ts->getDateTime();
        $today->moveMonths(-intval($limit));
        $ts->setDateTime($today);
        $limit_params['value'] = $ts->unix_ts;
        $search->setLimitColumn($limit_params);
    }

    $search->setOffset($utility->getNaviStartPosition());
    $search->setLimit($ui_config->getListMax() + 1);
    $search->setText($text);
    $search->setItems($items);
    $search->setSensitive($sensitive);


    $items_for_view = [];
    /** @var GRN_Memo_Item $item */
    while ( ! is_null($item = $search->iterate())) {
        if ($item->isFile()) {
            $file =& $item->getContent();

            $item_for_view = [
                'type' => 'file',
                'id'   => $item->getOID(),
                'data' => $utility->getFileView($file),
            ];
        } else {
            $content = $item->getContent();

            $item_for_view = [
                'type' => 'content',
                'id'   => $item->getOID(),
                'data' => $utility->getContentView($content, false),
            ];
        }

        if (($folder = $item->get('folder'))) {
            $item_for_view['folder'] = [
                'name' => $folder->get('name'),
                'id'   => $folder->getOID()
            ];
        }

        $items_for_view[$item->getOID()] = $item_for_view;
    }
    $item_count = count($items_for_view);
    $isExistsNextPage = $item_count > $ui_config->getListMax();
    if ($isExistsNextPage) {
        array_pop($items_for_view);
        $item_count--;
    }

    $t->assign('items', $items_for_view);
}

$navi_params = [
    'did' => $folder_id,
    'sf'  => 1
];

$navi_information
    = $utility->makeSimpleNaviInformation($utility->getNaviStartPosition(),
    $ui_config->getListMax(),
    $item_count,
    $isExistsNextPage,
    $navi_params);

$t->assign('search', [
        'result'    => $result,
        'text'      => $text,
        'items'     => $items,
        'sub'       => $sub,
        'limit'     => $limit,
        'sensitive' => $sensitive,
        'sdid'      => $sdid,
    ]
);

$t->assign('navi', $navi_information);

$t->assign('config', $utility->getConfigValues($login));

$folders = $logic->getRootFolders($login);
$t->assign('folder_menu', grn_memo_folder_select_menu($folders));
$t->assign('mdid', $folder_id);

$page_path = [
    'memo/index' => ['did' => $folder_id],
];

$t->assign(
    'delete_info',
    [
        'title'        => grn_get_page_display_name('memo/delete_multi'),
        'page'         => 'memo/delete_multi.tpl',
        'no_confirm'   => false,
        'handler'      => ['btn_delete_multi1', 'btn_delete_multi2'],
        'multi_target' => 'eid[]',
        'form_target'  => 'memo/search_action'
    ]
);

$utility->setSitePosition($t, $page_path);

$t->display(cb_get_pagename() . '.tpl');


