<?php
if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    $login = cb_get_login_user();

    require_once('dezielink/system_logic.csp');
    $sys_logic = GRN_OfficeLink_SystemLogic::getInstance();

    require_once('dezielink/inspection.csp');
    $logger = GRN_Dezielink_Inspection::getInstance();

    if ( ! array_key_exists('url', $G_INPUT)) {
        //Creator
        $creator = $sys_logic->getCreator();
        if ( ! $creator) {
            $sys_logic->setCreator($login);
        }

        //modifier
        $sys_logic->setModifier($login);

        $connector_available = false;
        $sys_logic->setConnectorAvailable($connector_available);

        //Scheduling service un-registration
        $sys_logic->unregisterSyncUserEvent();

        //Logging
        if ($logger->isEnabled()) {
            $log_params = [GRN_OFLK_OFFICELINK_AVAILABLE => 'false'];
            $logger->writeInspectionLogNotice(GRN_CONNECTOR_MODIFY,
                GRN_OFLK_LOGGER_MESSAGE_SETTING, $log_params);
        }

        cb_redirect('dezielink/system/of_link_view');
    } else {
        // Validation check
        $target_name = cb_at($G_INPUT, 'fn', '');

        require_once('SmartyValidate.class.php');
        SmartyValidate::connect($t);
        SmartyValidate::register_form($target_name);

        // validate after a POST
        if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
            //Setting creator
            $creator = $sys_logic->getCreator();
            if ( ! $creator) {
                $sys_logic->setCreator($login);
            }

            //setting modifier
            $sys_logic->setModifier($login);

            $connector_available = cb_at($G_INPUT, "connector_available");
            if ( ! is_null($connector_available)) {
                $connector_available = $connector_available == 'on' ? true
                    : false;
            } else {
                $connector_available = false;
            }

            $sys_logic->setConnectorAvailable($connector_available);

            $url = cb_at($G_INPUT, 'url', '');
            $sys_logic->setURL($url);

            $sync_user = cb_at($G_INPUT, 'sync_user');
            if ( ! is_null($connector_available)) {
                $sync_user = $sync_user == 'on' ? true : false;
            } else {
                $sync_user = false;
            }
            $sys_logic->setSyncUserAvailable($sync_user);

            $sync_period = [
                'type'  => 0,
                'value' => 0
            ];

            $hour = 0;
            $minute = 0;
            if ($sync_user) {
                $period_type = cb_at($G_INPUT, "period_type");
                if ( ! is_null($period_type)) {
                    switch (intval($period_type)) {
                        case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_DAILY: //1
                            $sync_period['type']
                                = GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_DAILY;
                            break;
                        case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_WEEKLY: //2
                            $sync_period['type']
                                = GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_WEEKLY;
                            $wdays = cb_at($G_INPUT, "wdays");
                            if ( ! is_null($wdays)) {
                                $sync_period['value'] = $wdays;
                            }
                            break;
                        case GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_MONTHLY: //3
                            $sync_period['type']
                                = GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_MONTHLY;
                            $days = cb_at($G_INPUT, "days");
                            if ( ! is_null($days)) {
                                $sync_period['value'] = $days;
                            }
                            break;
                        default:
                            $sync_period['type']
                                = GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_DAILY;
                    }
                }
                $sys_logic->setSyncUserPeriod($sync_period);

                $hour = cb_at($G_INPUT, "hour", 0);
                $minute = cb_at($G_INPUT, "minute", 0);
                $sync_time = new CB_Time();
                $sync_time->hour = $hour;
                $sync_time->minute = $minute;
                $sys_logic->setSyncUserTime($sync_time);

                //Scheduling service registration
                $sys_logic->registerSyncUserEvent($sync_period, $sync_time);
            } else {
                //Scheduling service un-registration
                $sys_logic->unregisterSyncUserEvent();
            }

            //Logging
            if ($logger->isEnabled()) {
                $log_params = [
                    GRN_OFLK_OFFICELINK_AVAILABLE     => ($connector_available
                                                          == true) ? 'true'
                        : 'false',
                    GRN_CONNECTOR_URL                 => $url,
                    GRN_CONNECTOR_SYNC_USER_AVAILABLE => ($sync_user == true)
                        ? 'true' : 'false',
                    GRN_CONNECTOR_REPEAT_TYPE         => ($sync_user == true)
                        ? $sync_period['type'] : null,
                    GRN_CONNECTOR_REPEAT_VALUE        => ($sync_user == true
                                                          && $sync_period['type']
                                                             != GRN_CONNECTOR_SYNC_USER_PERIOD_TYPE_DAILY)
                        ? $sync_period['value'] : null,
                    GRN_CONNECTOR_HOUR                => ($sync_user == true)
                        ? $hour : null,
                    GRN_CONNECTOR_MINUTE              => ($sync_user == true)
                        ? $minute : null
                ];
                $logger->writeInspectionLogNotice(GRN_CONNECTOR_MODIFY,
                    GRN_OFLK_LOGGER_MESSAGE_SETTING, $log_params);
            }

            //Validation Session Finished
            SmartyValidate::unregister_form($target_name);

            cb_redirect('dezielink/system/of_link_view');
        } else {
            $t->setPageInfo('dezielink/system/of_link_modify');
            $t->assign('form_name', $target_name);
            include('_of_link_modify.csp');
            $t->display('dezielink/system/of_link_modify.tpl');
        }
    }
}
