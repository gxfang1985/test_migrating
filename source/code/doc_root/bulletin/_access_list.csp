<?php

global $G_INPUT;

if ( ! isset($t) || ! is_a($t, 'GRN_Smarty')) {
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;
}

if ( ! isset($node_id)) {
    if ( ! array_key_exists('nid', $G_INPUT)) {
        cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
    }
    $node_id = $G_INPUT['nid'];
}

if ( ! isset($node_row)
     && ! ($node_row
        =& $G_bulletin->getCategory($G_bulletin_login, $node_id))
) {
    cb_throw_error(E_GRN_BULLETIN_CATEGORY_NOT_FOUND);
}

if ( ! isset($system_flg)) {
    $page_parts = explode('/', cb_get_pagename());
    $system_flg = (@$page_parts[1] === 'system');
}
$is_privilege = $system_flg ? true
    : $node_row->privileged($G_bulletin_login, ['operation']);
$t->assign('is_privilege', $is_privilege);

$node = ['name' => $node_row->get('name'), 'nid' => $node_id];

$t->assign('node', $node);
$t->assign('node_id', $node_id);

$poid = @ $G_INPUT['poid'];

$t->assign('poid', $poid);


require_once('bulletin/access.csp');
$am = GRN_Bulletin_AccessManager::getInstance();
$access = [];
$access['security_model'] = $am->getSecurityModelString($node_row);

require_once('grn/access_resources.csp');

$target_classes = [
    'dynamic_role' => null,
    'cb_role'      => null,
    'cb_group'     => null,
    'cb_user'      => null
];

$targets = $am->getTargets($node_row, $target_classes);
$access_list = [];
foreach ($targets as $class_type => $accesses) {
    switch ($class_type) {
        case 'cb_user':
            $type = GRN_ACCESS_TARGET_TYPE_USER;
            break;
        case 'cb_group':
            $type = GRN_ACCESS_TARGET_TYPE_GROUP;
            break;
        case 'cb_role':
            $type = GRN_ACCESS_TARGET_TYPE_STATIC_ROLE;
            break;
        default:
            $type = GRN_ACCESS_TARGET_TYPE_DYNAMIC_ROLE;
            break;
    }

    foreach ($accesses as $key => $authorities) {
        $access_list[] = [
            'type' => $type,
            'tid'  => $key,
            'data' => $authorities
        ];
    }
}
$access['list'] =& $access_list;
$access['count'] = count($access['list']);

//--N-navigation params
$ours_params = $G_INPUT;
unset($ours_params['reset']);

// rhs organization information
require_once('grn/org_util.csp');
require_once('grn/org_util_search.csp');
// search
$text = null;
if (array_key_exists('text', $G_INPUT)) {
    $text = $G_INPUT['text'];
    $t->assign('text', $text);
}

// search or not
$is_search = (strlen($text) > 0);
$t->assign('is_search', $is_search);

$poid = null;
if (isset($G_INPUT['poid'])) {
    $poid = $G_INPUT['poid'];
}
if ($poid === 'role' && $is_search) {
    unset($G_INPUT['poid']);
    $poid = null;
    $t->assign('poid', $poid);
}

if ($is_search) {
    $org_row = null;
    $org = [];
    if (0 < $poid) {
        $org_row =& grn_get_org_row($poid);
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] =& grn_get_org_ancestors($org_row);
        $org['children'] =& grn_get_org_children($poid);
    } elseif (-1 == $poid) {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] = null;
    } else {
        $org_row =& grn_get_org_row('0');
        $org =& grn_get_org_info($org_row, true);
        $org['ancestors'] = $org_row;
        $org['children'] =& grn_get_org_children('0');
        $poid = null;
    }

    $condition = grn_get_user_info_search_condition($poid, $text,
        $system_flg);
    $count = grn_get_user_info_search_count($poid, $condition);
    $org['navi_info'] = grn_get_user_navigation_info($count, $G_INPUT, 10);
    $org['user_list'] =& grn_search_user_info($poid, $condition,
        $org['navi_info']);
    unset($ours_params['text']);
    $t->assign('org', $org);
} else {
    $org =& grn_get_user_or_role_list($poid, $ours_params, 10);
    if ( ! array_key_exists('user_list', $org)) {
        $org['navi_info'] = grn_get_user_navigation_info(0, $G_INPUT, 10);
    }
    $t->assign('org', $org);
}


require_once("bulletin/controller.csp");
$t->assign('users_list',
    GRN_Bulletin_ControllerUtil::makeUsersListFromOrgList($G_bulletin_login,
        $org, $access));

$t->assign('access', $access);
$t->assign('is_grant', $access['security_model'] == 'grant');
$t->assign('is_revoke', $access['security_model'] == 'revoke');
$t->assign('org', $org);

unset($ours_params['poid']);
unset($ours_params['sp']);
$t->assign('ours_params', $ours_params);

//--authority types
$authority_types = [
    'read'   => cb_msg('grn.bulletin.lang', 'access_read'),
    'write'  => cb_msg('grn.bulletin.lang', 'access_write'),
    'follow' => cb_msg('grn.bulletin.lang', 'access_follow')
];
$t->assign('authority_types', $authority_types);
$t->assign('authority_count', count($authority_types));

//--session information (temporary authorities)
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session =& $session_manager->getSession('bulletin.system.access_list');
$authorities = $session->get('authorities');
if (@ $G_INPUT['reset'] || ! is_array($authorities)) {
    if ($access['security_model'] == 'grant') {
        $authorities = ['read' => 1, 'write' => 1, 'follow' => 1];
    } else {
        $authorities = ['read' => 0, 'write' => 0, 'follow' => 0];
    }
    $session->set('authorities', $authorities);
}
$t->assign('authorities', $authorities);


