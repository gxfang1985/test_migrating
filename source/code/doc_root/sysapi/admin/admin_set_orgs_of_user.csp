<?php
/** @var GRN_Util_Api_Service $sysapi_service */
/** @var GRN_Uum $uum */
if (isset($sysapi_service) && ! defined('ON_FOREST')) {
    // Get parameters from the xml
    $request_params = $sysapi_service->getRequestParameters();

    $orgIds = $sysapi_service->selectNodesValue($request_params, 'orgId', true);

    $values = $sysapi_service->selectNodesValue($request_params, 'userId',
        true);
    $userId = $values[0];
    if ( ! is_numeric($userId) || strval($userId) != strval(intval($userId))) {
        require_once('grn/error_code.csp');
        cb_throw_error(E_GRN_SYSTEM_INVALID_USER_ID);
    }

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    $user = $uum->getUser($userId);
    // Throw an error if this user does not exist
    if (is_null($user) || ! $user) {
        require_once('sysapi/error_code.csp');
        cb_throw_error(E_GRN_SYSAPI_INVALID_USER, null, ['userId' => $userId],
            ['userId' => $userId]);
    }

    // Remove orgIds that do not exist
    $real_orgs = $uum->getGroupListByIds($orgIds);
    $real_orgIds = [];
    foreach ($real_orgs as $org) {
        $real_orgIds[] = $org->getOID();
    }

    $result = $uum->setUserGroups($userId, $real_orgIds);
    if ($result) {
        $uum->execInspection('user', 'belong',
            [
                'uid'  => $userId,
                'gids' => implode(',', $real_orgIds),
                'memo' => 'Edited by SysAPI'
            ]);
    } else {
        require_once('sysapi/logic.csp');
        $userId = GRN_SYSAPI_INVALID_USERID;
        $real_orgIds = [];
    }

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    $t->assign('affected_orgIds', $real_orgIds);
    $t->assign('affected_userId', $userId);

    $t->assign('xml_namespaces',
        "xmlns:admin=\"http://wsdl.cybozu.co.jp/admin/2008\"");
    grn_util_api_response($t, __FILE__);
}
