<?php
/** @var GRN_Util_Api_Service $sysapi_service */
/** @var GRN_Uum $uum */
if (isset($sysapi_service) && ! defined('ON_FOREST')) {
    // Get parameters from the xml
    $request_params = $sysapi_service->getRequestParameters();

    $values = $sysapi_service->selectNodesValue($request_params,
        'parent_orgId', true);
    $parent_orgId = $values[0];
    require_once('sysapi/logic.csp');
    $parent_orgId_grn
        = $parent_orgId; // $parent_orgId_grn is the Id understandable inside Garoon, this is to cope with root org in Garoon
    if ($parent_orgId === GRN_SYSAPI_ROOT_ORGID) {
        $parent_orgId_grn
            = ""; // In Garoon, the root org is represented by an empty string
    }

    $child_orgIds = $sysapi_service->selectNodesValue($request_params,
        'child_orgId', true);

    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');

    // Check existence of orgId, if not exist return an error message
    $parent_org = $uum->getGroupInfo($parent_orgId_grn);
    if ($parent_orgId !== GRN_SYSAPI_ROOT_ORGID
        && (is_null($parent_org)
            || ! $parent_org)
    ) {
        require_once('sysapi/error_code.csp');
        cb_throw_error(E_GRN_SYSAPI_INVALID_ORG, null,
            ['orgId' => $parent_orgId], ['orgId' => $parent_orgId]);
    }

    //to unique
    $unique_child_orgIds = [];
    foreach ($child_orgIds as $child_orgId) {
        $unique_child_orgIds[$child_orgId] = 1;
    }

    $child_orgIds = [];
    foreach ($unique_child_orgIds as $orgId => $val) {
        $child_orgIds[] = $orgId;
    }

    //orgId validate
    require_once('grn/org_util.csp');
    $parent_row = grn_get_org_row($parent_orgId);
    $p_ancestors = grn_get_org_ancestors($parent_row);
    foreach ($child_orgIds as $pos => $child_orgId) {
        // check parent is myself
        if ($child_orgId == $parent_orgId) {
            unset($child_orgIds[$pos]);
        }

        //check child is root node
        if ($child_orgId == GRN_SYSAPI_ROOT_ORGID) {
            unset($child_orgIds[$pos]);
        }

        //check parent's ancestor contains myself
        foreach ($p_ancestors as $anc) {
            if ($anc['oid'] == $child_orgId) {
                unset($child_orgIds[$pos]);
            }
        }
    }

    $affected_child_orgIds = [];
    foreach ($child_orgIds as $pos => $child_orgId) {
        $result = $uum->setParentGroup($child_orgId, $parent_orgId_grn);
        if ($result) {
            $uum->execInspection('group', 'move', [
                'gid'  => $child_orgId,
                'pgid' => $parent_orgId_grn,
                'memo' => 'Edited by SysAPI'
            ]);
            $affected_child_orgIds[] = $child_orgId;
        } else {
            unset($child_orgIds[$pos]);
        }
    }

    require_once('grn/smarty.csp');
    $t = new GRN_Smarty;

    $t->assign('affected_parent_orgId', $parent_orgId);
    $t->assign('affected_child_orgIds', $affected_child_orgIds);

    $t->assign('xml_namespaces',
        "xmlns:admin=\"http://wsdl.cybozu.co.jp/admin/2008\"");
    grn_util_api_response($t, __FILE__);
}
