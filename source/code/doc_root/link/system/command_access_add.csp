<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {

    unset($G_INPUT['add']);

    require_once('_access_util.csp');

    //Check Access ID
    $aid = null;
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();

    $session_name = 'link.system.access_add';
    $session =& $session_manager->getSession($session_name);

    $aid = $session->get('target_ids');
    //$aid = @ $G_INPUT['aid'];
    if ( ! is_array($aid)) {
        unset($G_INPUT['func']);
        //Redirect Previous Page
        cb_redirect('link/system/access_list', $G_INPUT);
    }

    $text = null;
    if (array_key_exists('text', $G_INPUT)) {
        $text = $G_INPUT['text'];
    }

    // search
    $func = $G_INPUT['func'];
    if ($func == 'search') {
        $params = $G_INPUT;
        unset($params['func']);
        unset($params['aid']);

        cb_redirect('link/system/access_list', $params);
    }

    //Get Security Model and Authority
    require_once('link/access_logic.csp');
    $category_access_logic = GRN_Link_Category_Access_Logic::getInstance();
    $security_model = $category_access_logic->getSecurityModel($node_id);
    $base_authorities = [
        'browse' => @ $G_INPUT['authority_browse'] ? 1 : 0,
    ];
    if ($security_model == 'grant') {
        $authorities = $base_authorities;
    } else {
        $authorities = [
            'browse' => @ $G_INPUT['authority_browse'] ? 0 : 1,
        ];
    }

    //Set Authoroty to Session
    //require_once('fw/session_manager.csp');
    //$session_manager = CB_SessionManager::getInstance();
    $session =& $session_manager->getSession('link.system.access_list');
    $session->set('authorities', $base_authorities);

    //Get UUN Instance
    global $G_container_base;
    $uum =& $G_container_base->getInstance('uum');

    //Get Dynamic Roles
    require_once('grn/uum_util.csp');
    $uum_util = GRN_UumUtil::getInstance();
    $dynamic_roles = $uum_util->listDynamicRoles();

    $object_id = @ $G_INPUT['nid'];

    //Add Access
    foreach (array_keys($aid) as $item) {
        $ids = explode(':', $item);
        if (count($ids) < 2) {
            continue;
        }

        $id = $ids[1];
        switch ($ids[0]) {
            case 'user':
                //Check User
                if ( ! ($uum->getUser($id))) {
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_USER_ID);
                }

                //User Access
                if ($access = $category_access_logic->getAccess2($object_id,
                    $ids[1], $ids[0])
                ) {
                    if ($authorities['browse'] == 0) {
                        $category_access_logic->deleteAccess($access->getOID(),
                            GRN_LINK_ACCESS_TARGET_TYPE_USER);
                    }
                } else {
                    $category_access_logic->addAccess($object_id, $id,
                        GRN_LINK_ACCESS_TARGET_TYPE_USER, $authorities);
                }
                break;
            case 'group':
                //Check Group
                if ( ! ($uum->getGroup($id))) {
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_GROUP_ID);
                }

                //Group Access
                if ($access = $category_access_logic->getAccess2($object_id,
                    $ids[1], $ids[0])
                ) {
                    if ($authorities['browse'] == 0) {
                        $category_access_logic->deleteAccess($access->getOID(),
                            GRN_LINK_ACCESS_TARGET_TYPE_GROUP);
                    }
                } else {
                    $category_access_logic->addAccess($object_id, $id,
                        GRN_LINK_ACCESS_TARGET_TYPE_GROUP, $authorities);
                }
                break;
            case 'static_role':
                //Check Static Role
                if ( ! ($uum->getStaticRole($id))) {
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_ROLE_ID);
                }

                //Staticf Role Access
                if ($access = $category_access_logic->getAccess2($object_id,
                    $ids[1], $ids[0])
                ) {
                    if ($authorities['browse'] == 0) {
                        $category_access_logic->deleteAccess($access->getOID(),
                            GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE);
                    }
                } else {
                    $category_access_logic->addAccess($object_id, $id,
                        GRN_LINK_ACCESS_TARGET_TYPE_STATIC_ROLE, $authorities);
                }
                break;
            case 'dynamic_role':
                //Check Dynamic Role
                if ( ! (array_key_exists($id, $dynamic_roles))) {
                    cb_throw_error(E_GRN_LINK_ACCESS_INVALID_ROLE_ID);
                }

                //Dynamic Role Access
                if ($access = $category_access_logic->getAccess2($object_id,
                    $ids[1], $ids[0])
                ) {
                    if ($authorities['browse'] == 0) {
                        $category_access_logic->deleteAccess($access->getOID(),
                            GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE);
                    }
                } else {
                    $category_access_logic->addAccess($object_id, $id,
                        GRN_LINK_ACCESS_TARGET_TYPE_DYNAMIC_ROLE, $authorities);
                }
                break;
        }
    }

    $params = $G_INPUT;
    unset($params['aid']);
    unset($params['func']);
    unset($params['authority_browse']);

    cb_redirect('link/system/access_list', $params);
}


