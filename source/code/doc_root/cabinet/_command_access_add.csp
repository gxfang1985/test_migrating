<?php

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    global $G_INPUT;

    assert('isset($target_name)');

    unset($G_INPUT['add']);

    require_once('../_access_util.csp');

    $text = null;
    if (array_key_exists('text', $G_INPUT)) {
        $text = $G_INPUT['text'];
    }

    $func = $G_INPUT['func'];
    if ($func == 'search') {
        cb_redirect($target_name,
            ['nid' => $node_id, 'poid' => $poid, 'text' => $text]);
    }

    //$aid = @ $G_INPUT['aid'];
    if (is_array($aid)) {
        require_once('cabinet/access.csp');
        $am = GRN_Cabinet_AccessManager::getInstance();
        $security_model = $am->getSecurityModel($node_row);
        $base_authorities = [
            'read'  => @ $G_INPUT['authority_read'] ? 1 : 0,
            'write' => @ $G_INPUT['authority_write'] ? 1 : 0,
        ];

        if ($security_model == GRN_CABINET_SECURITY_MODEL_REVOKE) {
            $authorities = [
                'read'  => @ $G_INPUT['authority_read'] ? 0 : 1,
                'write' => @ $G_INPUT['authority_write'] ? 0 : 1,
            ];
        } else {
            $authorities = $base_authorities;
        }

        //require_once( 'fw/session_manager.csp' );
        //$session_manager = CB_SessionManager::getInstance();
        $session =& $session_manager->getSession(str_replace('/', '.',
            $target_name));
        $session->set('authorities', $base_authorities);

        global $G_container_base;
        $uum =& $G_container_base->getInstance('uum');

        require_once('grn/uum_util.csp');
        $uum_util = GRN_UumUtil::getInstance();
        $dynamic_roles = $uum_util->listDynamicRoles();

        foreach (array_keys($aid) as $item) {
            $ids = explode(':', $item);
            if (count($ids) < 2) {
                continue;
            }
            $id = $ids[1];
            switch ($ids[0]) {
                case 'user':
                    if (($user =& $uum->getUser($id))) {
                        $am->modifyTarget($node_row, $user, $authorities, true);
                    }
                    break;

                case 'group':
                    if (($group =& $uum->getGroup($id))) {
                        $am->modifyTarget($node_row, $group, $authorities,
                            true);
                    }
                    break;

                case 'static_role':
                    if (($role =& $uum->getStaticRole($id))) {
                        $am->modifyTarget($node_row, $role, $authorities, true);
                    }
                    break;

                case 'dynamic_role':
                    if (array_key_exists($id, $dynamic_roles)) {
                        $am->modifyTarget($node_row, $id, $authorities, true);
                    }
                    break;
            }
        }
    }
}


