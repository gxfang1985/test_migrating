<?php
require_once('cabinet/resources.csp');

if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    assert('isset($target_name)');

    global $G_INPUT;

    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //get language values
    require_once('fw/i18n.csp');
    $inputLocalNameArray = getMultiLanguageText(GRN_CABINET_ELEMENT_NAME_FOLDER,
        $G_INPUT);

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    SmartyValidate::register_form($target_name);

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {

        if ( ! array_key_exists('hid', $G_INPUT)) {
            cb_throw_error(E_GRN_CABINET_INVALID_PARENT_FOLDER);
        }

        $foreignKey = cb_at($G_INPUT, 'foreign_key');
        $memo = cb_at($G_INPUT, 'memo');
        $parentFolderId = cb_at($G_INPUT, 'hid');
        $enableAccessCopy = cb_at($G_INPUT, 'enable_copy_access');
        $enableNotificationCopy = cb_at($G_INPUT, 'enable_copy_notification');
        $accessCopySrc = cb_at($G_INPUT, 'access_dropdown_selected');
        $notificationCopySrc = cb_at($G_INPUT,
            'notification_dropdown_selected');

        //Add Folder
        global $G_cabinet_login;
        require_once('cabinet/folder.csp');
        $folderMgr = GRN_Cabinet_FolderManager::getInstance();
        $folderMgr->addFolder($G_cabinet_login, $inputLocalNameArray,
            $foreignKey, $memo, $parentFolderId);

        if ( ! is_null($enableAccessCopy)) {
            require_once('cabinet/access.csp');
            $targetFolder = $folderMgr->getFolderByForeignKey($G_cabinet_login,
                $foreignKey);
            $accessMgr = GRN_Cabinet_AccessManager::getInstance();
            $accessMgr->copyAccess($accessCopySrc, [$targetFolder->getOID()]);
        }

        if ( ! is_null($enableNotificationCopy)) {
            require_once('cabinet/notification.csp');
            $targetFolder = $folderMgr->getFolderByForeignKey($G_cabinet_login,
                $foreignKey);
            $notificationMgr = GRN_Cabinet_NotificationManager::getInstance();
            $notificationMgr->copyNotification($notificationCopySrc,
                [$targetFolder->getOID()]);
        }

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        $success = true;

        _cabinet_rebuild_folder_tree($parentFolderId);
    } else {
        $t->setPageInfo($target_name);

        if ( ! array_key_exists('hid', $G_INPUT)) {
            cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
        }
        $folder_id = $G_INPUT['hid'];

        if ( ! ($folder = $G_cabinet->getFolder($G_cabinet_login,
            $folder_id))
        ) {
            cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
        }

        $t->assign('folder_id', $folder_id);
        $t->assign('parent_name', $folder->get('name'));

        $memo = cb_at($G_INPUT, 'memo');
        $t->assign('memo', $memo);
        $foreign_key = cb_at($G_INPUT, 'foreign_key');
        $t->assign('foreign_key', $foreign_key);

        $multiLanguageInfoArray = [];
        $multiLanguageInfoArray['element_name']
            = GRN_CABINET_ELEMENT_NAME_FOLDER;
        $multiLanguageInfoArray['values'] = $inputLocalNameArray;
        $t->assign('multiLanguageInfoArray', $multiLanguageInfoArray);

        $page_parts = explode('/', cb_get_pagename());
        $is_system = (cb_at($page_parts, 1) === 'system');
        require_once('cabinet/folder_tree.csp');
        $params = [
            'system'                  => $is_system,
            'force_hide_notification' => true
        ];
        $tree = new GRN_Cabinet_FolderTree($params);
        $tree_for_access = $tree->getTreeForView($folder, $is_system,
            'tree_for_access',
            'grn.page.folder_form.access_dropdown.selectCategory');
        $tree_for_notification = $tree->getTreeForView($folder, $is_system,
            'tree_for_notification',
            'grn.page.folder_form.notification_dropdown.selectCategory');

        $t->assign('tree_for_access', $tree_for_access);
        $t->assign('tree_for_notification', $tree_for_notification);
        $t->assign('tree_params', $params);
    }
}

