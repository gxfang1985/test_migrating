<?php
/**
 * ISO8601形式の日付フォーマットを作成する
 *
 * @access private
 *
 * @param CB_TimeStampEx $timestamp
 *
 * @return string
 */
function _date_format_iso8601(& $timestamp)
{
    $currentZone = $timestamp->getTimeZone('UTC');
    $timestamp->setTimeZone('UTC');
    $datetime = $timestamp->getDateTime();

    // 2006-03-10T10:20:00Zの形式
    $format = sprintf('%04d-%02d-%02dT%02d:%02d:%02dZ',
        $datetime->year,
        $datetime->month,
        $datetime->day,
        $datetime->hour,
        $datetime->minute,
        $datetime->second);
    $timestamp->setTimeZone($currentZone);

    return $format;
}

/**
 * Atom のIDを作成する
 *
 * @access private
 *
 * @param           $url
 * @param CB_DateEx $date
 *
 * @return string
 */
function _get_atom_id($url, & $date)
{
    $params = parse_url($url);

    $atom_id = 'tag:' . $params['host'] . ',' . $date->format();

    if (array_key_exists('path', $params)) {
        $atom_id .= $params['path'];

        if (array_key_exists('query', $params)) {
            $atom_id .= '?' . $params['query'];
        }
    }

    return $atom_id;
}

/**
 * ICON のURLを作成する
 *
 * @access private
 */
function _get_icon_url($icon_name)
{
    static $url_prefix = null;
    if (is_null($url_prefix)) {
        global $G_config_common;
        $app_path = $G_config_common->get('Global', 'app_path');


        if (strncasecmp($app_path, 'http', 4) === 0) {
            $url_prefix = $app_path . '/grn/image/cybozu/';
        } else {
            $url_prefix = cb_get_url_prefix() . $app_path
                          . '/grn/image/cybozu/';
        }
    }

    return $url_prefix . $icon_name . '.gif';
}

cb_require_role('LoginUser');

define('COPY_RIGHT', cb_get_copyright(CB_TYPE_ATOM));
define('GAROON_SITE', 'http://cybozu.co.jp/welcome/garoon4/001.html');
define('GENERATOR', cb_get_generator(CB_TYPE_ATOM));

$charset = mb_preferred_mime_name(cb_get_http_output_encoding());
cb_prepare_download('', 'application/xml; charset=' . $charset, false);
// シンクのエラー処理に切り替える
global $G_state_set;
$G_state_set->set('error_page_type', 'feed_xml');
//require_once( 'fw/error_handler.csp' );
//$error_handler = CB_ErrorHandler::getInstance();
//$error_handler->addHook( 'cb_feed_error_hook' );


global $G_container_base;
$uum = $G_container_base->getInstance('uum');
$login = $uum->getLoginUser();

$module_data_list = null;

// データの取得
require('_whatsnew.csp');

if (is_array($module_data_list) && count($module_data_list) > 0) {
    // 取得したデータのフォーマットと書き出し
    require_once('grn/application.csp');
    $app_locator = GRN_ApplicationLocator::instance();
    require_once('notification/application.csp');
    /** @var GRN_Notification_App $notification_app */
    $notification_app = $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);
    $apps = $notification_app->getApplicationList(false);
    $timestamp = new CB_TimeStampEx();
    $xml_writer = new XMLWriter();
    global $G_config_grn;
    $i18n = CB_I18N::getInstance();
    $now = new CB_TimeStampEx();
    $date = &$now->getDate();


    $xml_writer->openURI("php://output");
    $xml_writer->setIndentString("\t");
    $xml_writer->setIndent(true);
    $xml_writer->startDocument('1.0', $charset);
    $xml_writer->startElement('feed');
    $xml_writer->writeAttribute('xmlns', 'http://www.w3.org/2005/Atom');
    $xml_writer->writeAttribute('xml:lang', $i18n->getCurrentLanguage());

// <title>
    $xml_writer->startElement('title');
    $xml_writer->writeAttribute('type', 'text');

    $xml_writer->text(cb_msg('grn.notification', 'feed.atom.title'));
    $xml_writer->endElement();   // title

// <id>
    $xml_writer->startElement('id');
    $xml_writer->text(_get_atom_id(cb_get_full_url('notification/feed/atom'),
        $date));
    $xml_writer->endElement();   // title

// <updated>
    $xml_writer->startElement('updated');
    $xml_writer->text(_date_format_iso8601($now));
    $xml_writer->endElement();   // updated

// <link href="Garoonのトップページ" />
    $xml_writer->startElement('link');
    $xml_writer->writeAttribute('href', cb_get_full_url(''));
    $xml_writer->endElement();   // link

// <rights>Copyright (C) 20xx-20xx Cybozu, Inc.</rights>
    $xml_writer->startElement('rights');
    $xml_writer->text(COPY_RIGHT);
    $xml_writer->endElement();   // rights

//<generator uri="Garoonのサイトのアドレス" version="Garoonのバージョン">Cybozu Garoon</generator>
    $xml_writer->startElement('generator');
    $xml_writer->writeAttribute('uri', GAROON_SITE);
    $xml_writer->writeAttribute('version',
        $G_config_grn->get('System', 'version'));
    $xml_writer->text(GENERATOR);
    $xml_writer->endElement();   // generator


    $feed = [];

// 通知のデータの出力
    foreach (array_keys($module_data_list['indexes']) as $module_key) {
        if ($module_data_list['indexes'][$module_key]['count'] > 0) {
            $module_id_array = explode('.', $module_key);
            // アプリ名
            $label = $module_data_list['indexes'][$module_key]['name'];

            // アプリの識別子
            $term = $module_id_array['1'];
            $app = $app_locator->getInstance($term, true);

            // <entry>

            foreach (
                $module_data_list['indexes'][$module_key]['data_list'] as
                $notify
            ) {
                $xml_writer->startElement('entry');

                // 通知IDを設定する。nidがURLパラメータにないと未読通知のままになってしまうため、未定義の場合はbigintの最大値を指定。
                $notify_id = (array_key_exists('id', $notify)) ? $notify['id']
                    : 18446744073709551615;

                $action_id = (array_key_exists('action_id', $notify))
                    ? $notify['action_id'] : null;
                $module_id = (array_key_exists('module_id', $notify))
                    ? $notify['module_id'] : null;
                $sub_module_id = (array_key_exists('sub_module_id', $notify))
                    ? $notify['sub_module_id'] : null;
                $unique_id = (array_key_exists('unique_id', $notify))
                    ? $notify['unique_id'] : null;
                $org_data = (array_key_exists('org_data', $notify))
                    ? $notify['org_data'] : null;
                $status = (array_key_exists('status', $notify))
                    ? $notify['status'] : null;
                $popup = (array_key_exists('popup', $notify))
                    ? $notify['popup'] : false;
                $attached = (array_key_exists('attached', $notify))
                    ? $notify['attached'] : false;
                $subject = (array_key_exists('subject', $notify))
                    ? $notify['subject'] : '';
                $subject_icon = (array_key_exists('subject_icon', $notify))
                    ? $notify['subject_icon'] : '';
                $subject_url = (array_key_exists('subject_url', $notify))
                    ? $notify['subject_url'] : '';
                $abstract = (array_key_exists('abstract', $notify))
                    ? $notify['abstract'] : '';

                $id_array = explode('.', $module_id);

                global $url_param;
                $url_param = '';
                $page_info = null;
                // Ogre内アプリかどうか
                if (is_array($id_array)
                    && (strcasecmp($id_array[0], 'grn') === 0)
                    && count($id_array) > 0
                ) {
                    // アプリのトップページ
                    $scheme = cb_get_full_url($app->getConfig('index'));
                    // 通知元アプリモジュール取得
                    $app_id = $id_array[1];
                    $app_full_id = substr($module_id, 4);
                    if (is_array($apps) && array_key_exists($app_id, $apps)
                        && ! is_null($apps[$app_id])
                    ) {
                        // ページ情報取得
                        $page_info
                            = $apps[$app_id]->getNotificationPageInfo($login,
                            $app_full_id, $unique_id, $org_data, $status,
                            $action_id, $sub_module_id);
                    }
                    // <category>
                    $xml_writer->startElement('category');
                    $xml_writer->writeAttribute('label', $label);
                    $xml_writer->writeAttribute('term', $term);
                    $xml_writer->writeAttribute('scheme', $scheme);
                    $xml_writer->endElement();   // entry

                    if (strlen($subject_icon) <= 0) {
                        $subject_icon = $page_info['subject_icon'];
                    }

                    // for applications other than Space application.
                    if ( ! array_key_exists("subject_fragment", $page_info)) {
                        $page_info["subject_fragment"] = "follow";
                    }

                    // URLパラメータにnidを追加
                    $page_info['url_params']['nid'] = $notify_id;
                    $link
                        = cb_get_full_url($page_info['subject_page'],
                        $page_info['url_params'],
                        $page_info['subject_fragment']);

                    //$abstractについて　本来であれば$page_info['isBlankDisplayAbstract']を評価して$abstractの値を操作するのだが、社外向けに公開している既存インタフェースは変えない方針なので　ここでは評価しない
                } else {
                    // <category>
                    $xml_writer->startElement('category');
                    $xml_writer->writeAttribute('label',
                        $module_data_list['indexes'][$module_key]['name']);
                    $xml_writer->writeAttribute('term', $module_key);
                    $xml_writer->endElement();   // category

                    $link = $subject_url . '#follow';
                }
                /*
                            echo "<!--\r\n";
                            var_dump( $notify );
                            var_dump( $page_info );
                            var_dump(cb_get_url_prefix() );
                            echo "-->\r\n";
                */
                // <icon>
                $xml_writer->startElement('icon');
                $xml_writer->text(_get_icon_url($subject_icon));
                $xml_writer->endElement();   // icon

                // <title>
                $xml_writer->startElement('title');
                $xml_writer->text($subject);
                $xml_writer->endElement();   // title

                // <content type="text">
                $xml_writer->startElement('content');
                $xml_writer->writeAttribute('type', 'text');
                $xml_writer->text($abstract);
                $xml_writer->endElement();   // content


                // <link >
                $xml_writer->startElement('link');
                $xml_writer->writeAttribute('href', $link);
                $xml_writer->endElement();   // link

                $timestamp->unix_ts = $notify['timestamp']->unix_ts;
                // <id>
                $xml_writer->startElement('id');
                $date = $timestamp->getDate();
                $xml_writer->text(_get_atom_id($link, $date));
                $xml_writer->endElement();   // id

                // <updated>
                $xml_writer->startElement('updated');
                $xml_writer->text(_date_format_iso8601($timestamp));
                $xml_writer->endElement();   // id

                $sender_name = (array_key_exists('sender_name', $notify))
                    ? $notify['sender_name'] : '';
                // <author>
                $xml_writer->startElement('author');
                $xml_writer->startElement('name');
                if (array_key_exists('sender_id', $notify)) {
                    require_once('grn/controller.csp');
                    // Garoon内のユーザー
                    $user_info = $uum->getUserInfo($notify['sender_id']);
                    if ($user_info) {
                        $xml_writer->text(GRN_ControllerUtil::getUserNameText($login->getOID(),
                            $notify['sender_id']));
                    } else {
                        $xml_writer->text($sender_name);
                    }
                } else {
                    // メールなど
                    $xml_writer->text($sender_name);
                }
                $xml_writer->endElement();   // name
                $xml_writer->endElement();   // author

                $xml_writer->endElement();   // entry
            }
        }
        // 各アプリのgetNotificationPageInfoでURL、アイコンを取得する

    }

    $xml_writer->endElement();   // feed
    $xml_writer->endDocument();
    $xml_writer->flush();
}


