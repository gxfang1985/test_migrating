<?php

use grn\grn\access\utility\AppAvailabilityUtil;
use grn\grn\access\service\AppAccess;

global $G_INPUT;

$is_to_me = ! empty($G_INPUT['is_to_me']) ? true : false;
$is_read = ! empty($G_INPUT['read']) ? true : false;
$data_type = GRN_NOTIFICATION_DATA_TYPE_WHATSNEW;
if ($is_read) {
    $data_type = GRN_NOTIFICATION_DATA_TYPE_HISTORY;
}

require_once("notification/application.csp");
$notification_service = GRN_Notification_Service::getInstance();
if (is_null($notification_service)) {
    cb_throw_error(E_GRN_CMMN_NTFC_NOT_AVAILABLE);
}

$app_locator = GRN_ApplicationLocator::instance();
/** @var $notification_app GRN_Notification_App */
$notification_app = $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);
if (is_null($notification_app)) {
    cb_throw_error(E_GRN_NTFC_NOT_AVAILABLE);
}

/** @var $app_manager GRN_Notification_ApplicationManager */
$app_manager = $notification_app->getOutsideApplicationManager();
$notification_app->updateApplications($login, true);

/** @var $login CB_User */
$service_personal_config = $notification_service->getPersonalConfig($login);
$app_personal_config = $notification_app->getPersonalConfig($login);

$module_id = @ $G_INPUT['module_id'];
$apps_list = [];
$apps_list[] = $notification_app->getApplicationList(false);
$apps_list[] = $app_manager->getAllList();

$app_infos = [];
foreach (array_keys($apps_list) as $apps_id) {
    $selected = ( ! $module_id) ? true : false;
    $app_infos[0] = [
        'value' => '',
        'label' => cb_msg(GRN_NOTIFICATION_MODULE_ID, 'setting_all'),
        'class' => $selected ? 'hilight' : '',
    ];

    $apps =& $apps_list[$apps_id];
    foreach (array_keys($apps) as $app_id) {
        /** @var $app GRN_ApplicationBase */
        $app = $apps[$app_id];
        if ( ! ($app instanceof GRN_ApplicationBase)) {
            continue;
        }
        $temp_module_id = $app->getModuleId();

        $selected = ($module_id == $temp_module_id) ? true : false;
        $app_config = $app_locator->getConfig($app_id);

        $app_icon = $app_config['icon20']
            ? ($app_config['icon20'] . '.png')
            : $notification_app->getNotificationAppIcon($app);
        $app_infos[$temp_module_id] = [
            'value' => $temp_module_id,
            'label' => $app->getName(),
            'class' => $selected ? 'hilight' : '',
            'icon'  => $app_icon,
        ];
    }
}

//------------------
$sort = null;
$reverse = null;
$app_personal_config->getSortCondition($data_type, $sort, $reverse);
if (array_key_exists('sort', $G_INPUT)
    || array_key_exists('reverse', $G_INPUT)
) {
    if (array_key_exists('sort', $G_INPUT) && $G_INPUT['sort']) {
        $sort = $G_INPUT['sort'];
    }
    if (array_key_exists('reverse', $G_INPUT)
        && (($G_INPUT['reverse'] === 1)
            || ($G_INPUT['reverse'] === 0))
    ) {
        $reverse = $G_INPUT['reverse'];
    }
    $app_personal_config->setSortCondition($data_type, $sort, $reverse);
}

$ui_config_manager = GRN_UIConfigManager::getInstance();
$ui_user_config = $ui_config_manager->getUserConfig($login);
$number_on_page = $ui_user_config->getListMax();

$savedays = null;
$result = $service_personal_config->getSaveDays($data_type, $savedays);
if ($result !== true) {
    cb_throw_error(E_GRN_CMMN_NTFC_FAILED_TO_GET_PROFILE_DATA);
}

$delete_unread = null;
if ($data_type != GRN_NOTIFICATION_DATA_TYPE_HISTORY) {
    $delete_unread = $service_personal_config->getDeleteUnread();
}

//------------------
require_once("grn/controller.csp");
$controller_util = new GRN_ControllerUtil();

$current_start_position = $controller_util->getNaviStartPosition();
$controller_util->setNaviStartPosition($current_start_position);
$data_list = $notification_app->getDataListFast($data_type, $login, $module_id,
    $sort,
    $reverse, $current_start_position, $number_on_page + 1, null, null, null,
    true, $is_to_me);

require_once('space/GrnSpaceApplication.csp');
$available_space
    = AppAccess::isAppAvailableInternalAccess(GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);

$is_exists_next_page = count($data_list) > $number_on_page;
if ($is_exists_next_page) {
    array_pop($data_list);
}

if ($available_space) {
    $notification_app->addSpaceInfoForDataList($data_list, $login->getOID());
}

$users_id = [];
$applications_id = [];
foreach ($data_list as $d) {
    $user_id = cb_at($d, 'sender_id');
    if ($user_id) {
        $users_id[] = $user_id;
    }
    preg_match("/^grn.(.*)/i", $d['module_id'], $matches);//GRB-15046
    if (count($matches) > 0) {
        $applications_id[] = $matches[1];
    }
}
$users_id = array_unique($users_id);
$app_ids_unique
    = array_intersect(AppAvailabilityUtil::getAppIdsSupportPrivilege(),
    array_unique($applications_id));
$availability_user_ids_apps
    = AppAccess::getAvailabilityAppIdsInternalByUserIds($users_id,
    $app_ids_unique);

require_once("grn/controller.csp");
$users_info = GRN_ControllerUtil::getUserInfoToShowUserName($users_id, $login);
foreach ($users_info as $user_info) {
    $user_id = $user_info['_id'];
    $users_info[$user_id]['col_using_apps']
        = $availability_user_ids_apps[$user_id];
}

$params = ['module_id' => $module_id];
if (isset($category_id)) {
    $params['cid'] = $category_id;
}

$pagination_info
    = $controller_util->makePaginationInfoForJS($current_start_position,
    $number_on_page, count($data_list), $is_exists_next_page, $params);
$app_personal_config->getMaxLength($subject_cols, $abstract_cols, $name_cols,
    $space_cols);
$total_unread_to_me = $notification_app->getWhatsNewDataCount($login,
    $module_id, GRN_NOTIFICATION_WHATSNEW_DATA_LIMIT, true);
$total_unread_all = $notification_app->getWhatsNewDataCount($login,
    $module_id);
$data_page = [
    'moduleId'        => $module_id,
    'isToMe'          => $is_to_me,
    'isRead'          => $is_read,
    'totalUnreadToMe' => $total_unread_to_me,
    'totalUnreadAll'  => $total_unread_all,
];

$show_no_notification_message = false;
$show_has_unread_all = false;
if ( ! $is_read) {
    if ( ! $total_unread_all) {
        $show_no_notification_message = true;
    } elseif ($is_to_me && ! $total_unread_to_me) {
        $show_no_notification_message = true;
        $show_has_unread_all = true;
    }
}

$t->assign(
    'notify_list', [
        'pagination_info' => $pagination_info,
        'data_list'       => $data_list
    ]
);
$t->assign('module_id', $module_id);
$t->assign('sort', $sort);
$t->assign('reverse', $reverse);
$t->assign('savedays', $savedays);
$t->assign('delete_unread', $delete_unread);
$t->assign('app_infos', $app_infos);
$t->assign('users_info', $users_info);
$t->assign('subject_cols', $subject_cols);
$t->assign('abstract_cols', $abstract_cols);
$t->assign('name_cols', $name_cols);
$t->assign('space_cols', $space_cols);
$t->assign('available_space', $available_space);
$t->assign('total_unread_to_me', $total_unread_to_me);
$t->assign('total_unread_all', $total_unread_all);
$t->assign('is_to_me', $is_to_me);
$t->assign('is_read', $is_read);
$t->assign('data_page', $data_page);
$t->assign('data_type', $data_type);
$t->assign('show_no_notification_message', $show_no_notification_message);
$t->assign('show_has_unread_all', $show_has_unread_all);
