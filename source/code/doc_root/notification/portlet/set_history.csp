<?php

use grn\grn\access\service\AppAccess;

require_once('portal/error_code.csp');
if ( ! isset($portlet)) {
    cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ACCESS);
}

//Get Smarty Instance
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Initialize SmartyValidate and Register Form
require_once('SmartyValidate.class.php');
SmartyValidate::connect($t);
SmartyValidate::register_form('set_history', true);

// 通知アプリ取得
require_once("notification/application.csp");
$app_locator = GRN_ApplicationLocator::instance();
/** @var GRN_Notification_App $notification_app */
$notification_app =& $app_locator->getInstance(GRN_NOTIFICATION_APP_ID);
if (is_null($notification_app)) {
    // 使用不可状態
    cb_throw_error(E_GRN_NTFC_NOT_AVAILABLE);
}

// 外部アプリケーション管理ロジックを取得する
$app_manager =& $notification_app->getOutsideApplicationManager();

$portlet_logic =& $notification_app->getPortletLogic();

// ポートレットの設定
$portlet_setting = null;
if ( ! is_null($portlet['settings'])) {
    // 表示設定
    $portlet_setting =& $portlet['settings'];
}

$settings = [];

// 表示する項目
if ( ! is_null($portlet_setting)
     && array_key_exists('display_item', $portlet_setting)
) {
    // 以前設定されていたら反映
    $space_name = @ $portlet_setting['display_item']['space_name'];
    $abstract = @ $portlet_setting['display_item']['abstract'];
    $sender_name
        = @ $portlet_setting['display_item']['sender_name'];
    $timestamp = @ $portlet_setting['display_item']['timestamp'];
    $settings['display_item'] = [
        'space_name'  => $space_name,
        'abstract'    => $abstract,
        'sender_name' => $sender_name,
        'timestamp'   => $timestamp
    ];
} else {
    // デフォルト
    $portlet_logic->getHistoryDefaultDisplayItem($default_space_name,
        $default_abstract, $default_sender_name, $default_timestamp);
    $settings['display_item'] = [
        'space_name'  => $default_space_name,
        'abstract'    => $default_abstract,
        'sender_name' => $default_sender_name,
        'timestamp'   => $default_timestamp
    ];
}

// GRN2-3902 スペースアプリが使用不可ならば、スペース名を表示しない。
require_once('space/GrnSpaceApplication.csp');
$available_space
    = AppAccess::isAppAvailableInternalAccess(GrnSpaceApplication::GRN_SPACE_APPLICATION_ID);
$t->assign('available_space', $available_space);

// 表示する件数
if ( ! is_null($portlet_setting)
     && array_key_exists('rows', $portlet_setting)
) {
    $rows = intval($portlet_setting['rows']);
}
if ( ! is_int($rows)) {
    $rows = $portlet_logic->getHistoryDefaultRows();
}
$settings['rows'] = $rows;

// 表示するアプリ
$module_id = @ $portlet_setting['module_id'];
$t->assign('selected_module_id', $module_id);

// ログインユーザーの所持ロールを検査
require_once('grn/uum.csp');
global $G_container_base;
$grn_uum =& $G_container_base->getInstance('uum');
$login_user =& $grn_uum->getLoginUser();
$role_list = $grn_uum->getUserRolesInfo($login_user->getOID());
$is_admin = false;
foreach (array_keys($role_list) as $index) {
    if ($role_list[$index]['col_foreign_key'] == 'Administrators') {
        $is_admin = true;
        break;
    }
}

// 通知対応アプリ列挙
$modules = [];
$apps_list = [];
$apps_list[] = $notification_app->getApplicationList(false);
$apps_list[] = $app_manager->getAllList();
foreach (array_keys($apps_list) as $apps_id) {
    $apps =& $apps_list[$apps_id];
    foreach (array_keys($apps) as $app_id) {
        $app =& $apps[$app_id];
        if ( ! is_object($app) || ! is_a($app, 'GRN_ApplicationBase')) {
            continue;
        }

        if ('set-personal' == $display) {
            $name = $app->getName();
        } else {
            $name = $app->getDefaultName();
        }

        // 外部通知の場合のみ外部通知コードを取得
        if (is_a($app, 'GRN_Notification_Application')) {
            $outside_id = $app->getID();
        }

        // Administratorsロールを所持していない場合、サイボウズからのお知らせは除外
        if ( ! $is_admin
             && $outside_id == GRN_NOTIFICATION_CYBOZU_INFORMATION
        ) {
            continue;
        }

        $temp_module_id = $app->getModuleId();
        $modules[$temp_module_id] = [
            'id'   => $temp_module_id,
            'name' => $name
        ];
    }
}
$settings['application'] = $modules;

// ポートレットの設定
$t->assign('settings', $settings);

//Create Font Options Array
$font_options = [
    ['value' => 'small', 'label' => cb_msg('grn.cabinet', 'font_size_small')],
    ['value' => 'normal', 'label' => cb_msg('grn.cabinet', 'font_size_normal')],
    ['value' => 'large', 'label' => cb_msg('grn.cabinet', 'font_size_large')],
];
$font_size = @$portlet['settings']['font_size'];
switch ($font_size) {
    case 'small':
        $font_options[0]['selected'] = true;
        break;
    case 'normal':
        $font_options[1]['selected'] = true;
        break;
    case 'large':
        $font_options[2]['selected'] = true;
        break;
    default:
        $font_options[1]['selected'] = true;
        break;
}
$t->assign('font_options', $font_options);

// Crerate Select Number Array
$rows_numbers = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20
];
$t->assign('rows_numbers', $rows_numbers);

//Assign include_php Parameter
$t->assign('portlet', $portlet);
$t->assign('display', $display);

// Ignore Licence Warnning
$t->skipWarning();

//Display Smarty Template
$doc_name = 'notification/portlet/set_history';
$t->display("{$doc_name}.tpl");


