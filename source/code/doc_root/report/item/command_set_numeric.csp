<?php

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'report/item/set_numeric';
    SmartyValidate::register_form($target_name);

    //Check Category Exists
    require_once('report/resources.csp');
    if (GRN_REPORT_CATEGORY_NONPARTY_ID != $G_INPUT['cid']) {
        require_once('report/category_logic_base.csp');
        $category_logic_base = GRN_Report_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($G_INPUT['cid']);
    }

    //Check Form Exist
    require_once('report/form_logic_base.csp');
    $column_list = ['_id'];
    $option = [
        'condition' => [
            0 => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form_logic_base = GRN_Report_Form_Logic_Base::getInstance();
    $form = $form_logic_base->getDirect($G_INPUT['fid'],
        $column_list, $option);

    // Create Parameter Translation Map
    $translation_map = [
        'cid'                => '_cid',                 //Category ID
        'fid'                => '_fid',                 //Form ID
        'iid'                => '_iid',                 //Item ID
        'data_type'          => 'data_type',            //Data Type
        'display_name'       => 'display_name',         //Display Name
        'option_string'      => 'option_string',        //Option String
        'option_string_type' => 'option_string_type',   //Option String Type
        'description'        => 'description',          //Description
        'description_type'   => 'description_type',     //Description Type
        'editor'             => 'description_editor',   //Description Editor
        'required'           => 'required',             //Required
        'input_numbers'      => 'input_numbers',        //Input Numbers
        'max_input_number'   => 'max_input_number',     //Max Input Number
        'min_input_number'   => 'min_input_number',     //Min Input Number
        'initial_value'      => 'initial_value',        //Initial Value
        'effective_figures'  => 'effective_figures',    //Effective Figures
        'minus_type'         => 'minus_type',           //Minus Type
        'right_align'        => 'right_align',          //Right Align
        'split_rank'         => 'split_rank',           //Split Rank
    ];

    // Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    ///  Dynamic Register Smarty Validation  ///
    require_once($t->_get_plugin_filepath('function', 'validate'));
    $standard_params = [
        'form'   => $target_name,
        'field'  => 'initial_value',
        'append' => 'validation_errors'
    ];

    if ($properties['input_numbers'] == 1) {
        require_once('fw/string_util.csp');
        $properties['max_input_number']
            = cb_trim($properties['max_input_number']);
        $properties['min_input_number']
            = cb_trim($properties['min_input_number']);
        //Register grn_report_isRangeMin Validation for Max Input Number
        if (is_numeric($properties['max_input_number'])
            && is_numeric($properties['min_input_number'])
            && $properties['min_input_number'] > $properties['max_input_number']
        ) {
            $params = $standard_params;
            $params ['field'] = 'max_input_number';
            $params ['criteria'] = 'grn_report_isRangeMin';
            $params ['min'] = $properties['min_input_number'];
            $params ['scale'] = $properties['effective_figures'];
            $params ['message'] = cb_plain_msg(GRN_REPORT_MODULE_ID,
                'item_validate_max_min_input_number');
            $params ['empty'] = true;
            smarty_function_validate($params, $t);
        } else {
            //Register grn_report_isRangeMax Validation
            if ($properties['input_numbers'] == 1
                && is_numeric($properties['max_input_number'])
            ) {
                $params = $standard_params;
                $params ['criteria'] = 'grn_report_isRangeMax';
                $params ['max'] = $properties['max_input_number'];
                $params ['scale'] = $properties['effective_figures'];
                $params ['message'] = cb_plain_msg(GRN_REPORT_MODULE_ID,
                    'item_validate_max_input_number');
                $params ['empty'] = true;
                smarty_function_validate($params, $t);
            }

            //Register grn_report_isRangeMin Validation
            if ($properties['input_numbers'] == 1
                && is_numeric($properties['min_input_number'])
            ) {
                $params = $standard_params;
                $params ['criteria'] = 'grn_report_isRangeMin';
                $params ['min'] = $properties['min_input_number'];
                $params ['scale'] = $properties['effective_figures'];
                $params ['message'] = cb_plain_msg(GRN_REPORT_MODULE_ID,
                    'item_validate_min_input_number');
                $params ['empty'] = true;
                smarty_function_validate($params, $t);
            }
        }
    }

    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        require_once('report/item_logic.csp');
        $item_logic = GRN_Report_Item_Logic::getInstance();
        $item_logic->checkIsIncludeStandardItem($properties['_fid'],
            [$properties['_iid']]);

        //Create Option Settings
        $option_settings = [
            'option_string'      => $properties['option_string'],
            //option string
            'option_string_type' => $properties['option_string_type'],
            //option string Type
        ];

        //Create Description Settings
        $description_settings = [
            'description'        => $properties['description'],
            //description
            'description_type'   => $properties['description_type'],
            //description Type
            'description_editor' => $properties['description_editor'],
            //description Editor
        ];

        //Create Item Settings
        $item_settings = [
            'input_numbers'     => $properties['input_numbers'],
            //Input Numbers
            'initial_value'     => $properties['initial_value'],
            //Initial Value
            'effective_figures' => $properties['effective_figures'],
            //effective_figures
            'minus_type'        => $properties['minus_type'],
            //Minus Type
            'right_align'       => $properties['right_align'],
            //Right Align
            'split_rank'        => $properties['split_rank'],
            //Split Rank
        ];
        if ($properties['input_numbers'] == 1) {
            $item_settings['max_input_number']
                = $properties['max_input_number'];
            $item_settings['min_input_number']
                = $properties['min_input_number'];
        }

        //Add or Modify Item
        if ($G_INPUT['display'] == 'add-system'
            || $G_INPUT['display'] == 'add-operation'
        ) {
            //Add Form Item
            $item_id = $item_logic->add($properties['_fid'],
                $properties['data_type'],
                $properties['display_name'], $option_settings,
                $description_settings, $item_settings,
                $properties['required']);

            $message_type = 'form_layout_numeric_add';
        } else {
            $before_modify_item = [];
            $before_modify_item = $item_logic->get($properties['_iid'],
                $properties['_fid']);

            //Modify Form Item
            $item_id = $item_logic->modify($properties['_iid'],
                $properties['_fid'], $properties['data_type'],
                $properties['display_name'], $option_settings,
                $description_settings, $item_settings,
                $properties['required']);

            $message_type = 'form_layout_numeric_modify';
        }

        //監査する
        require_once('report/inspection.csp');
        $inspection = GRN_Report_Form_Layout_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //入力値制限
            if ($item_settings['input_numbers'] == 1) {
                $inspection_input_numbers = GRN_REPORT_ITEM_NUMERIC_LIMIT;

                $max_input_number = $item_settings['max_input_number'];
                $min_input_number = $item_settings['min_input_number'];
            } else {
                $inspection_input_numbers = GRN_REPORT_ITEM_NUMERIC_NO_LIMIT;
                $max_input_number = null;
                $min_input_number = null;
            }

            //マイナスの表示方法
            if ($item_settings['minus_type'] == 0) {
                $inspection_minus_type = GRN_REPORT_ITEM_NUMERIC_MINUS_TYPE_0;
            } elseif ($item_settings['minus_type'] == 1) {
                $inspection_minus_type = GRN_REPORT_ITEM_NUMERIC_MINUS_TYPE_1;
            } elseif ($item_settings['minus_type'] == 2) {
                $inspection_minus_type = GRN_REPORT_ITEM_NUMERIC_MINUS_TYPE_2;
            }

            //右寄せ表示
            $inspection_right_align = GRN_REPORT_ITEM_NUMERIC_NOT_RIGHT_ALIGN;
            if ($item_settings['right_align'] == 1) {
                $inspection_right_align = GRN_REPORT_ITEM_NUMERIC_RIGHT_ALIGN;
            }
            //桁区切りを表示
            $inspection_split_rank = GRN_REPORT_ITEM_NUMERIC_NOT_SPLIT_RANK;
            if ($item_settings['split_rank'] == 1) {
                $inspection_split_rank = GRN_REPORT_ITEM_NUMERIC_SPLIT_RANK;
            }

            //任意の文字列
            $inspection_option_string_type
                = $inspection->setStringType($option_settings['option_string_type']);
            //説明
            $inspection_description_editor
                = $inspection->setDescriptionEditor($description_settings['description_editor']);
            //アイコン
            $inspection_description_type
                = $inspection->setDescriptionType($description_settings['description_type']);
            //必須
            $inspection_required
                = $inspection->setRequired($properties['required']);

            $message_args['fid'] = $properties['_fid'];
            $message_args['iid'] = $item_id;
            $message_args['data_type'] = $properties['data_type'];
            $message_args['display_name'] = $properties['display_name'];
            $message_args['option_string']
                = $option_settings['option_string'];
            $message_args['option_string_type']
                = $inspection_option_string_type;

            $message_args['description'] = $description_settings['description'];
            $message_args['description_type'] = $inspection_description_type;
            $message_args['description_editor']
                = $inspection_description_editor;

            $message_args['input_numbers'] = $inspection_input_numbers;

            $message_args['initial_value'] = $item_settings['initial_value'];
            $message_args['effective_figures']
                = $item_settings['effective_figures'];
            $message_args['minus_type'] = $inspection_minus_type;

            $message_args['right_align'] = $inspection_right_align;
            $message_args['split_rank'] = $inspection_split_rank;

            $message_args['max_input_number'] = $max_input_number;
            $message_args['min_input_number'] = $min_input_number;
            $message_args['required'] = $inspection_required;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }
        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        $redirect_page = '';
        $redirect_params = [];
        switch ($G_INPUT['display']) {
            case 'add-system':
                $redirect_page = 'report/system/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-system':
                $redirect_page = 'report/system/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            case 'add-operation':
                $redirect_page = 'report/operation/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-operation':
                $redirect_page = 'report/operation/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            default:
                break;
        }
        $redirect_anchor = 'item_list';

        //Redirect Next Page
        cb_redirect($redirect_page, $redirect_params, $redirect_anchor);
    } else {
        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Return Page
        $return_page = '';
        switch ($G_INPUT['display']) {
            case 'add-system':
                $info_page = 'system/formlayout_add';
                $include_page = 'system/_formlayout_add';
                $return_page = 'report/system/formlayout_add';
                break;
            case 'modify-system':
                $info_page = 'system/formlayout_modify';
                $include_page = 'system/_formlayout_modify';
                $return_page = 'report/system/formlayout_modify';
                break;
            case 'add-operation':
                $info_page = 'operation/formlayout_add';
                $include_page = 'operation/_formlayout_add';
                $return_page = 'report/operation/formlayout_add';
                break;
            case 'modify-operation':
                $info_page = 'operation/formlayout_modify';
                $include_page = 'operation/_formlayout_modify';
                $return_page = 'report/operation/formlayout_modify';
                break;
            default:
                break;
        }

        //Assign Template Name
        $t->setPageInfo('../' . $info_page);

        //Create Item Information
        $item = [];
        $item['fid'] = @ $G_INPUT['fid'];
        $item['iid'] = @ $G_INPUT['iid'];
        $item['data_type'] = @ $G_INPUT['data_type'];
        $item['display_name'] = @ $G_INPUT['display_name'];
        $item['option_string'] = @ $G_INPUT['option_string'];
        $item['option_string_type'] = @ $G_INPUT['option_string_type'];
        $item['description'] = @ $G_INPUT['description'];
        $item['description_type'] = @ $G_INPUT['description_type'];
        $item['description_editor'] = @ $G_INPUT['editor'];
        $item['required'] = @ $G_INPUT['required'];
        $item['type'] = @ $G_INPUT['type'];

        $item['settings'] = [];
        $item['settings']['input_numbers'] = @ $G_INPUT['input_numbers'];
        $item['settings']['max_input_number'] = @ $G_INPUT['max_input_number'];
        $item['settings']['min_input_number'] = @ $G_INPUT['min_input_number'];
        $item['settings']['initial_value'] = @ $G_INPUT['initial_value'];
        $item['settings']['effective_figures']
            = @ $G_INPUT['effective_figures'];
        $item['settings']['minus_type'] = @ $G_INPUT['minus_type'];
        $item['settings']['right_align'] = @ $G_INPUT['right_align'];
        $item['settings']['split_rank'] = @ $G_INPUT['split_rank'];
        $t->assign('item', $item);

        //include sharing codes with command_*
        include(dirname(__FILE__) . '/../' . $include_page . '.csp');

        //Display Previous Page
        $t->display($return_page . '.tpl');
    }
}


