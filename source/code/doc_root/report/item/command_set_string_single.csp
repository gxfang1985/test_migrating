<?php

// Check HTTP-POST Method
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    // instantiate an Smarty object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    // Validation check
    require_once('SmartyValidate.class.php');
    SmartyValidate::connect($t);
    $target_name = 'report/item/set_string_single';
    SmartyValidate::register_form($target_name);

    //Check Category Exists
    require_once('report/resources.csp');
    if (GRN_REPORT_CATEGORY_NONPARTY_ID != $G_INPUT['cid']) {
        require_once('report/category_logic_base.csp');
        $category_logic_base = GRN_Report_Category_Logic_Base::getInstance();
        $category =& $category_logic_base->get($G_INPUT['cid']);
    }

    //Check Form Exist
    require_once('report/form_logic_base.csp');
    $column_list = ['_id'];
    $option = [
        'condition' => [
            0 => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ]
        ]
    ];
    $form_logic_base = GRN_Report_Form_Logic_Base::getInstance();
    $form = $form_logic_base->getDirect($G_INPUT['fid'],
        $column_list, $option);

    // Create Parameter Translation Map
    $translation_map = [
        'cid'                => '_cid',                 //Category ID
        'fid'                => '_fid',                 //Form ID
        'iid'                => '_iid',                 //Item ID
        'data_type'          => 'data_type',            //Data Type
        'display_name'       => 'display_name',         //Display Name
        'option_string'      => 'option_string',        //Option String
        'option_string_type' => 'option_string_type',   //Option String Type
        'description'        => 'description',          //Description
        'description_type'   => 'description_type',     //Description Type
        'editor'             => 'description_editor',   //Description Editor
        'required'           => 'required',             //Required
        'size'               => 'size',                 //Size
        'max_input_size'     => 'max_input_size',       //Max Input Size
        'input_chars'        => 'input_chars',          //Input Chars
        'initial_type'       => 'initial_type',         //Initial Type
        'initial_text_value' => 'initial_text_value',   //Initial Text Value
        'initial_user_value' => 'initial_user_value',   //Initial User Value
    ];

    // Do Parameter Translation
    $properties = [];
    foreach ($translation_map as $view_name => $model_name) {
        $properties[$model_name] = @ $G_INPUT[$view_name];
    }

    ///  Dynamic Register Smarty Validation  ///
    require_once($t->_get_plugin_filepath('function', 'validate'));
    $standard_params = [
        'form'   => $target_name,
        'field'  => 'initial_text_value',
        'append' => 'validation_errors'
    ];

    //Register grn_report_isLength Validation
    if (is_numeric($properties['max_input_size'])
        && $properties['initial_type'] == 0
    ) {
        $params = $standard_params;
        $params['criteria'] = 'grn_report_isLength';
        $params['min'] = 0;
        $params['max'] = $properties['max_input_size'];
        $params['message'] = cb_plain_msg(GRN_REPORT_MODULE_ID,
            'item_validate_max_input_size');
        $params['empty'] = true;
        smarty_function_validate($params, $t);
    }

    //Register grn_report_isStringKind Validation
    if ($properties['input_chars'] == 1 || $properties['input_chars'] == 2) {
        $kind = 'zenkaku';
        if ($properties['input_chars'] == 2) {
            $kind = 'hankaku';
        }

        $params = $standard_params;
        $params['criteria'] = "grn_report_isStringKind";
        $params['kind'] = $kind;
        $params['message'] = cb_plain_msg(GRN_REPORT_MODULE_ID,
            'item_validate_input_chars_' . $properties['input_chars']);
        $params['empty'] = true;
        smarty_function_validate($params, $t);
    }


    // validate after a POST
    if (SmartyValidate::is_valid($G_INPUT, $target_name)) {
        //Create Option Settings
        $option_settings = [
            'option_string'      => $properties['option_string'],
            //option string
            'option_string_type' => $properties['option_string_type'],
            //option string Type
        ];

        //Create Description Settings
        $description_settings = [
            'description'        => $properties['description'],
            //description
            'description_type'   => $properties['description_type'],
            //description Type
            'description_editor' => $properties['description_editor'],
            //description Editor
        ];

        //Create Item Settings
        $item_settings = [
            'size'           => $properties['size'],            //Size
            'max_input_size' => $properties['max_input_size'],  //Max Input Size
            'input_chars'    => $properties['input_chars'],     //Input Chars
            'initial_type'   => $properties['initial_type'],    //Initial Type
        ];
        if ($properties['initial_type'] == 0) {

            $item_settings['initial_text_value']
                = $properties['initial_text_value'];   //Initial Text Value
            $item_settings['initial_user_value']
                = '';                                  //Initial User Value

            $inspection_initial_type
                = GRN_REPORT_ITEM_STRING_SINGLE_INITIAL_TYPE_MANUAL_INPUT;
        } else {
            $item_settings['initial_text_value']
                = '';                                  //Initial Text Value
            global $G_container_base;
            $uum =& $G_container_base->getInstance('uum');
            $prefix = '%grn.common.uum.user.';
            if (strpos($properties['initial_user_value'], $prefix) === 0) {
                $identifier_items = explode('.',
                    $properties['initial_user_value']);
                switch ($identifier_items[4]) {
                    case 'extension':
                        //Extention Item
                        $item_id = str_replace('%', '',
                            $identifier_items[5]);
                        $item_property = &$uum->getItemByKey($item_id);
                        if ( ! is_null($item_property)
                             && $item_property->get('use')
                        ) {
                            $item_settings['initial_user_value']
                                = $properties['initial_user_value'];   //Initial User Value
                        } else {
                            cb_throw_error(E_GRN_RPRT_ITEM_STATUS_UNUSE);
                        }
                        break;
                    case 'userinfo':
                        //Extention Item
                        $item_id = str_replace('%', '', $identifier_items[5]);
                        $item_property
                            = &$uum->getDefaultItemProperty($item_id);
                        if (array_key_exists('use', $item_property)) {
                            if ($item_property['use']) {
                                $item_settings['initial_user_value']
                                    = $properties['initial_user_value'];   //Initial User Value
                            } else {
                                cb_throw_error(E_GRN_RPRT_ITEM_STATUS_UNUSE);
                            }
                        }
                        break;
                    default:
                        //Default Item
                        $item_id = str_replace('%', '', $identifier_items[4]);
                        if (strcmp($item_id, 'id') === 0) {
                            $item_settings['initial_user_value']
                                = $properties['initial_user_value'];   //Initial User Value
                        } else {
                            $item_property
                                = &$uum->getDefaultItemProperty($item_id);
                            if (array_key_exists('use', $item_property)) {
                                if ($item_property['use']) {
                                    $item_settings['initial_user_value']
                                        = $properties['initial_user_value'];   //Initial User Value
                                } else {
                                    cb_throw_error(E_GRN_RPRT_ITEM_STATUS_UNUSE);
                                }
                            }
                        }
                        break;
                }
            }
            $inspection_initial_type
                = GRN_REPORT_ITEM_STRING_SINGLE_INITIAL_TYPE_USER_INFO;
        }

        //Add or Modify Item
        require_once('report/item_logic.csp');
        $item_logic = GRN_Report_Item_Logic::getInstance();
        if ($G_INPUT['display'] == 'add-system'
            || $G_INPUT['display'] == 'add-operation'
        ) {
            //Add Form Item
            $item_id = $item_logic->add($properties['_fid'],
                $properties['data_type'],
                $properties['display_name'], $option_settings,
                $description_settings, $item_settings,
                $properties['required']);

            //$item_logic->setAttachFile($item_id, 1, 1);

            $message_type = 'form_layout_string_single_add';
        } else {
            $before_modify_item = [];
            $before_modify_item = $item_logic->get($properties['_iid'],
                $properties['_fid']);

            //Modify Form Item
            $item_id = $item_logic->modify($properties['_iid'],
                $properties['_fid'], $properties['data_type'],
                $properties['display_name'], $option_settings,
                $description_settings, $item_settings,
                $properties['required']);

            $message_type = 'form_layout_string_single_modify';
        }

        //監査する
        require_once('report/inspection.csp');
        $inspection = GRN_Report_Form_Layout_Inspection::getInstance();
        if ($inspection->isEnabled()) {
            //入力文字制限
            if ($item_settings['input_chars'] == 0) {
                $inspection_input_chars
                    = GRN_REPORT_ITEM_INPUT_LIMITATION_NOLIMIT;
            } elseif ($item_settings['input_chars'] == 1) {
                $inspection_input_chars = GRN_REPORT_ITEM_INPUT_LIMITATION_FULL;
            } elseif ($item_settings['input_chars'] == 2) {
                $inspection_input_chars = GRN_REPORT_ITEM_INPUT_LIMITATION_HALF;
            }

            //初期値
            $inspection_initial_user_value
                = $inspection->setStringSingleInitialUserValue($item_settings['initial_user_value']);
            //任意の文字列
            $inspection_option_string_type
                = $inspection->setStringType($option_settings['option_string_type']);
            //説明
            $inspection_description_editor
                = $inspection->setDescriptionEditor($description_settings['description_editor']);
            //アイコン
            $inspection_description_type
                = $inspection->setDescriptionType($description_settings['description_type']);
            //必須
            $inspection_required
                = $inspection->setRequired($properties['required']);

            $message_args['fid'] = $properties['_fid'];
            $message_args['iid'] = $item_id;
            $message_args['data_type'] = $properties['data_type'];
            $message_args['display_name'] = $properties['display_name'];
            $message_args['option_string']
                = $option_settings['option_string'];
            $message_args['option_string_type']
                = $inspection_option_string_type;

            $message_args['description'] = $description_settings['description'];
            $message_args['description_type'] = $inspection_description_type;
            $message_args['description_editor']
                = $inspection_description_editor;

            $message_args['size'] = $item_settings['size'];
            $message_args['max_input_size']
                = $item_settings['max_input_size'];
            $message_args['input_chars'] = $inspection_input_chars;
            $message_args['initial_type'] = $inspection_initial_type;
            $message_args['initial_text_value']
                = $item_settings['initial_text_value'];
            $message_args['initial_user_value']
                = $inspection_initial_user_value;
            $message_args['required'] = $inspection_required;

            //Record Inspection
            $inspection->record($message_type, $message_args);
        }

        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Redirect Page
        $redirect_page = '';
        $redirect_params = [];
        switch ($G_INPUT['display']) {
            case 'add-system':
                $redirect_page = 'report/system/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-system':
                $redirect_page = 'report/system/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            case 'add-operation':
                $redirect_page = 'report/operation/form_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                ];
                break;
            case 'modify-operation':
                $redirect_page = 'report/operation/formlayout_view';
                $redirect_params = [
                    'cid' => $G_INPUT['cid'],
                    'fid' => $G_INPUT['fid'],
                    'iid' => $G_INPUT['iid'],
                ];
                break;
            default:
                break;
        }
        $redirect_anchor = 'item_list';

        //Redirect Next Page
        cb_redirect($redirect_page, $redirect_params, $redirect_anchor);
    } else {
        // the validation session is finished
        SmartyValidate::unregister_form($target_name);

        //Switch Return Page
        $return_page = '';
        switch ($G_INPUT['display']) {
            case 'add-system':
                $info_page = 'system/formlayout_add';
                $include_page = 'system/_formlayout_add';
                $return_page = 'report/system/formlayout_add';
                break;
            case 'modify-system':
                $info_page = 'system/formlayout_modify';
                $include_page = 'system/_formlayout_modify';
                $return_page = 'report/system/formlayout_modify';
                break;
            case 'add-operation':
                $info_page = 'operation/formlayout_add';
                $include_page = 'operation/_formlayout_add';
                $return_page = 'report/operation/formlayout_add';
                break;
            case 'modify-operation':
                $info_page = 'operation/formlayout_modify';
                $include_page = 'operation/_formlayout_modify';
                $return_page = 'report/operation/formlayout_modify';
                break;
            default:
                break;
        }

        //Assign Template Name
        $t->setPageInfo('../' . $info_page);

        //Create Item Information
        $item = [];
        $item['fid'] = @ $G_INPUT['fid'];
        $item['iid'] = @ $G_INPUT['iid'];
        $item['data_type'] = @ $G_INPUT['data_type'];
        $item['display_name'] = @ $G_INPUT['display_name'];
        $item['option_string'] = @ $G_INPUT['option_string'];
        $item['option_string_type'] = @ $G_INPUT['option_string_type'];
        $item['description'] = @ $G_INPUT['description'];
        $item['description_type'] = @ $G_INPUT['description_type'];
        $item['description_editor'] = @ $G_INPUT['editor'];
        $item['required'] = @ $G_INPUT['required'];
        $item['type'] = @ $G_INPUT['type'];

        $item['settings'] = [];
        $item['settings']['size'] = @ $G_INPUT['size'];;
        $item['settings']['max_input_size'] = @ $G_INPUT['max_input_size'];
        $item['settings']['input_chars'] = @ $G_INPUT['input_chars'];
        $item['settings']['initial_type'] = @ $G_INPUT['initial_type'];
        $item['settings']['initial_text_value']
            = @ $G_INPUT['initial_text_value'];
        $item['settings']['initial_user_value']
            = @ $G_INPUT['initial_user_value'];
        $t->assign('item', $item);

        //include sharing codes with command_*
        include(dirname(__FILE__) . '/../' . $include_page . '.csp');

        //Display Previous Page
        $t->display($return_page . '.tpl');
    }
}


