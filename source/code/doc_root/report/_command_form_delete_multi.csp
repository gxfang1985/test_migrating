<?php
global $G_INPUT;

//Instantiate Smarty Object
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

//Create Parameter Translation Map
$translation_map = [
    'ids' => '_ids',
    'cid' => '_cid',
];

//Do Parameter Translation
$properties = [];
foreach ($translation_map as $view_name => $model_name) {
    $properties[$model_name] = @ $G_INPUT[$view_name];
}

//Check Category Exists
require_once('report/resources.csp');
if (GRN_REPORT_CATEGORY_NONPARTY_ID != $properties['_cid']) {
    require_once('report/category_logic_base.csp');
    $category_logic_base = GRN_Report_Category_Logic_Base::getInstance();
    $category =& $category_logic_base->get($properties['_cid']);
}

if (isset($check_manage) && $check_manage) {
    //Check Category Manage and Access Right
    require_once('report/controller_util.csp');
    $category_id = $properties['_cid'];
    $category_util = GRN_Report_Category_Controller_Utility::getInstance();
    $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
}

//Create Delete Form ID List
$form_id_list = [];
require_once('report/form_logic.csp');
$form_logic = GRN_Report_Form_Logic::getInstance();
$form_list =& $form_logic->getList($properties['_cid']);
foreach ($properties['_ids'] as $form_id) {
    require_once('report/controller_util.csp');
    //Get Form Controller Utility
    $form_util = GRN_Report_Form_Controller_Utility::getInstance();
    //Create Parameter Translation Map
    $translation_map_form = [
        'fid' => '_id',      //Form ID
    ];
    //Get Form For Operation View
    $form_for_operation_view = $form_util->getView($form_id,
        $translation_map_form, $properties['_cid']);
    if (in_array($form_id, array_keys($form_list))) {
        $form_id_list[] = $form_id;
    }
}

//Delete Multi Form
$option['condition'][] = [
    'column'   => '_id',
    'value'    => $form_id_list,
    'operator' => 'IN'
];
$forms = $form_logic->getList(null, [], $option);
if (count($form_id_list) != 0) {
    $form_logic->deleteMulti($form_id_list);
}

//Inspection
require_once('report/inspection.csp');
$inspection = GRN_Report_Form_Inspection::getInstance();
if ($inspection->isEnabled()) {
    $message_type = 'form_delete_multi';
    $message_args['fids'] = $form_id_list;
    //Record Inspection
    $inspection->record($message_type, $message_args);
}
