<?php
require_once('report/error_code.csp');
if (strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST') == 0) {
    global $G_INPUT;
    $report_id = @ $G_INPUT['rid'];
    $form_id = @ $G_INPUT['fid'];
    $event_id = @ $G_INPUT['eid'];
    $str_date = @ $G_INPUT['date'];
    $date = new CB_Date();
    if ( ! $date->parse($str_date)) {
        cb_throw_error(E_GRN_RPRT_SCHEDULE_INVALID_DATE);
    }

    if (is_null($report_id) || ! is_numeric($report_id)) {
        cb_throw_error(E_GRN_RPRT_REPORT_INVALID_ID);
    }

    require_once('report/controller_util.csp');
    $util = GRN_Report_Report_Controller_Utility::getInstance();
    if (is_null($G_report_login_user)) {
        cb_throw_error(E_GRN_RPRT_REPORT_DENY_ACCESS);
    }

    $viewable = $util->isViewable($G_report_login_user->getOID(), $report_id);
    if ( ! $viewable) {
        cb_throw_error(E_GRN_RPRT_REPORT_DENY_ACCESS);
    }

    //Get Report Information
    $report = $util->getSimpleView($report_id);
    $category_id = $report['category'];

    //Check Nonparty Category
    if (GRN_REPORT_CATEGORY_NONPARTY_ID == $category_id) {
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_MANAGE_DENY_NONPARTY_CATEGORY);
    }

    //Check Category Manage and Access Right
    $category_util = GRN_Report_Category_Controller_Utility::getInstance();
    $category_util->checkManage($category_id, true, CB_DATABASE_NO_LOCK);
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);

    if (is_null($event_id) || ! is_numeric($event_id)) {
        cb_throw_error(E_GRN_RPRT_SCHEDULE_INVALID_ID);
    } else {
        require_once('report/report_schedule_logic.csp');
        $report_schedule_logic
            = GRN_Report_Report_Schedule_Logic::getInstance();
        $event
            = &$report_schedule_logic->getEventDataByEventId($G_report_login_user,
            $event_id, $date, GRN_SCHEDULE_GET_MEMBER_ID, $report['draft']);
        if ( ! $event) {
            cb_throw_error(E_GRN_RPRT_CANNOT_ACCESS_SCHEDULE);
        }
    }

    //通知に関する処理
    require_once('report/controller_util.csp');
    $report_util = GRN_Report_Report_Controller_Utility::getInstance();
    $report = $report_util->getSimpleView($report_id);

    //報告書の通知先を取得
    $rlist = $report_util->getNotificationList($report_id);
    $report_notification_list = [];
    foreach ($rlist as $value) {
        $report_notification_list[$value] = $value;
    }

    //予定の通知先を取得
    $event_notification_list = [];
    foreach ($event->users as $uid) {
        $event_notification_list[$uid] = $uid;
    }
    if (isset($event->notify_address)) {
        foreach ($event->notify_address as $uid) {
            $event_notification_list[$uid] = $uid;
        }
    }

    //予定が非公開の場合、予定の通知先以外のユーザーを報告書から削除
    if ($event->private) {
        foreach ($report_notification_list as $ruser) {
            if ( ! isset($event_notification_list[$ruser])) {
                unset($report_notification_list[$ruser]);
            }
        }
    }

    //報告書の通知先と予定の通知先に同じユーザーがいる場合は、予定の通知先から削除する
    foreach ($report_notification_list as $ruser) {
        foreach ($event_notification_list as $euser) {
            if ($ruser == $euser) {
                unset($event_notification_list[$euser]);
            }
        }
    }

    //予定の通知先から、報告書の閲覧権限がないユーザーを削除
    $event_notification_list
        = $report_util->getViewableUserList($event_notification_list,
        $report_id);

    //ユーザーオブジェクト取得
    global $G_container_base;
    $uum = $G_container_base->getInstance('uum');
    foreach ($event_notification_list as $euser) {
        $event_notification_list[$euser] = $uum->getUser($euser);
    }

    require_once('report/notification.csp');
    $notification_logic = GRN_Report_Notification_Listener::getInstance();
    $timestamp = new CB_TimeStampEx();

    require_once('schedule/application.csp');
    $app = GRN_Schedule_Application::getInstance();

    // ----- GRN2-4506 -----
    // 通知のタイムゾーン対応のために、setdatetimeなどを変換する。
    if (count($event_notification_list) > 0) {
        if ($event instanceof GRN_Schedule_NormalEvent) {
            // イベントのタイムゾーンに変更する
            if ($event->setdatetime instanceof CB_DateTimeEx) {
                require_once('fw/i18n.csp');
                $settimestamp = new CB_TimeStampEx(null, $event->timezone);
                $settimestamp->setDateTime($event->setdatetime,
                    CB_I18N::getInstance()->getCurrentTimezone());
                $event->setdatetime = $settimestamp->getDateTime();
                if (isset($event->enddatetime)) {
                    $endtimestamp = new CB_TimeStampEx(null, $event->timezone);
                    $endtimestamp->setDateTime($event->enddatetime,
                        CB_I18N::getInstance()->getCurrentTimezone());
                    $event->enddatetime = $endtimestamp->getDateTime();
                } else {
                    $event->enddatetime = $event->setdatetime;
                }
            }
        }
    }
    // ----- GRN2-4506 -----

    $notification_logic->sendList(GRN_REPORT_NOTIFY_MODIFY,
        $report_notification_list, $G_report_login_user, $report_id,
        $timestamp);
    $app->setNotify($event_notification_list, $G_report_login_user, $event,
        $date, $event->getTitle(), '', GRN_SCHEDULE_NOTIFY_MODIFY, $timestamp);

    require_once('report/report_schedule_logic.csp');
    $logic = GRN_Report_Report_Schedule_Logic::getInstance();
    $logic->removeRelation($report_id, $event_id, $date);

    cb_redirect('report/operation/report_view',
        ['rid' => $report_id, 'cid' => $category_id, 'fid' => $form_id]);
}
