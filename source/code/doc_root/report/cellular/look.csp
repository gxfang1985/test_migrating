<?php

global $G_uum;

//Instantiate an Smarty object
require_once("grn/smarty.csp");
$smarty = new GRN_Smarty;

// connect Smarty Validate
require_once('SmartyValidate.class.php');
SmartyValidate::connect($smarty);
$form_name = 'report/cellular/handle';
SmartyValidate::register_form($form_name, true);
$smarty->assign('form_name', $form_name);

// ページ情報
$smarty->assign('pagetitle', grn_get_current_page_display_name());
$smarty->assign('pagepath', $G_pagepath);
$smarty->assign('pagename', cb_get_pagename());

// cellular application
if (isset($G_cellular) && $G_cellular) {
    $smarty->assign('valid_cellular', true);

    $user_config =& $G_cellular->getUserConfig($G_login_user);
    $limit = $user_config->getListMax();
    $width = $user_config->getSubjectWidth();
} else {
    $smarty->assign('valid_cellular', false);

    $limit = 10;
    $width = 14;
}

$smarty->assign('width', $width);

$user_id = $G_login_user->getOID();

// params
$type = null;
if (array_key_exists('type', $G_INPUT) && strlen($G_INPUT['type'])) {
    $type = $G_INPUT['type'];
}
$report_id = null;
if (array_key_exists('rid', $G_INPUT) && strlen($G_INPUT['rid'])) {
    $report_id = $G_INPUT['rid'];
}

$follow_page = 0;
if (array_key_exists('fp', $G_INPUT) && strlen($G_INPUT['fp'])) {
    $follow_page = $G_INPUT['fp'];
}

//Get Max Number of Follows
require_once('grn/ui.csp');
$ui_manager = GRN_UIConfigManager::getInstance();
$config =& $ui_manager->getUserConfig($G_login_user);
$follow_limit = $config->getFollowMax();

//Get Follow Offset
$follow_offset = $follow_limit * $follow_page;

//Get Follow Count
require_once('report/controller_util.csp');
$follow_util = GRN_Report_Follow_Controller_Utility::getInstance();
$follow_count = $follow_util->getCount($report_id);

//Get Instance
require_once('report/controller_util.csp');
$controller_util = new GRN_Report_ControllerUtil(cb_get_pagename());
$report_util = GRN_Report_Report_Controller_Utility::getInstance();
$item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();

$smarty->assign('type', $type);
$smarty->assign('rid', $report_id);

//Create Parameter Translation Map
$translation_map_report = [
    'rid'                  => '_id',
    //Report ID
    'name'                 => 'name',
    //Report Name
    'form'                 => 'form',
    //Report Form ID
    'form_name'            => 'form_name',
    //Report Form Name
    'category'             => 'category',
    //Category ID
    'creator'              => 'creator',
    //Report Creator
    'creator_name'         => 'creator_name',
    //Report Creator Name
    'creator_foreign_key'  => 'creator_foreign_key',
    //Report Creator Foreign Key
    'ctime'                => 'ctime',
    //Report Create Time
    'modifier'             => 'modifier',
    'modifier_name'        => 'modifier_name',
    'modifier_foreign_key' => 'modifier_foreign_key',
    'mtime'                => 'mtime',
    'private'              => 'private',
    'enable_follow'        => 'enable_follow',
    'enable_member'        => 'enable_member',
    'enable_partner'       => 'enable_partner',
    'draft'                => 'draft',
];

//Get Report for view
$report = $report_util->getView($report_id, $translation_map_report);

//Create Parameter Translation Map
$translation_map_item_data = [
    //Item Data Information
    'iid'                => 'itemdata_id',
    //Item Data ID
    'display_name'       => 'itemdata_display_name',
    //Item Data Display Name
    'type'               => 'itemdata_type',
    //Item Data Type
    'option_string'      => 'itemdata_option_string',
    //Item Data Option String
    'option_string_type' => 'itemdata_option_string_type',
    //Item Data Option String Type
    'data_type'          => 'itemdata_data_type',
    //Item Data Data Type
    'settings'           => 'itemdata_settings',
    //Item Data Settings
    'required'           => 'itemdata_required',
    //Item Data Reuired Flag
    'list_index'         => 'itemdata_list_index',
    //Item Data List Index
    'number'             => 'itemdata_number',
    //Item Data Number Value
    'text'               => 'itemdata_text',
    //Item Data text Value
    //Item Data File Information
    'fid'                => 'filerelation_id',
    //Item Data File ID
    'file'               => 'filerelation_file',
    //Item Data File ID
    'files'              => 'itemdata_files',
    //Item Data File ID
];

//Get Item Data List for view
$item_data_list = $item_data_util->getListViewEx($translation_map_item_data,
    $report_id);
foreach (array_keys($item_data_list) as $item_data_id) {
    $item_data_list[$item_data_id]['view_mode'] = 'view';
}

//スケジュールとの関連を持っているか調べる
require_once('report/report_schedule_logic.csp');
$report_schedule_logic = GRN_Report_Report_Schedule_Logic::getInstance();
$event_info = $report_schedule_logic->getRelatedEventId($report_id);
if (is_numeric($event_info['event_id']) && $event_info['event_id'] > 0) {
    $smarty->assign('eid', $event_info['event_id']);

    $date = new CB_Date();
    if ( ! $date->parse($event_info['date'])) {
        $date = false;
    }
    $event = $report_schedule_logic->getEventDataByEventId($G_report_login_user,
        $event_info['event_id'], $date, GRN_SCHEDULE_GET_MEMBER_OBJECT,
        $report['draft']);
    $dynamic_roles = $G_uum->listGrantedRoles();
    require_once('schedule/access_logic.csp');
    $event_access_logic = GRN_Schedule_Access_Logic::getInstance();

    if ($event) {
        $access = $event_access_logic->getEventAccess($G_report_login_user,
            $event, ['read'], $dynamic_roles);
        if ($access['read']) {
            $smarty->assign('event', $event);
            $smarty->assign('day', $event_info['date']);
        }
    }
}

//Unset Standard Item
$current_item_data = current($item_data_list);
unset($item_data_list[$current_item_data['iid']]);

$is_files = false;
//Create Item Layout
require_once('report/item_resources.csp');
foreach (array_keys($item_data_list) as $item_data_id) {
    $view_str = "";
    // data_type により表示情報の分岐
    switch ($item_data_list[$item_data_id]['data_type']) {
        case 'grn.report.string_multiple':
        case 'grn.report.string_single':
        case 'grn.report.menu_string':
        case 'grn.report.radio':
            $view_str = $item_data_list[$item_data_id]['text'];
            break;

        case 'grn.report.checkbox':
            $view_str = cb_msg('grn.report.cellular', 'unchecked');
            if ($item_data_list[$item_data_id]['number']) {
                $view_str = cb_msg('grn.report.cellular', 'checked');
            }
            break;

        case 'grn.report.numeric':
            //$view_str = $item_data_list[$item_data_id]['number'];
            if ('' !== trim($item_data_list[$item_data_id]['number'])) {
                $rank_splitter
                    = $item_data_list[$item_data_id]['settings']['split_rank']
                    ? ',' : '';
                $item_data_list[$item_data_id]['number'] = number_format(
                    floatval($item_data_list[$item_data_id]['number']),
                    $item_data_list[$item_data_id]['settings']['effective_figures'],
                    '.',
                    $rank_splitter
                );
                //Format Minus Type
                $minus_char = cb_msg(GRN_REPORT_MODULE_ID,
                    'minus_type_'
                    . $item_data_list[$item_data_id]['settings']['minus_type']);
                $item_data_list[$item_data_id]['number'] = str_replace('-',
                    $minus_char, $item_data_list[$item_data_id]['number']);
            }
            $view_str = $item_data_list[$item_data_id]['number'];
            break;

        case 'grn.report.date':
            if ( ! is_null($item_data_list[$item_data_id]['number'])) {
                //GRN2-3628
                $current_timezone = CB_I18N::getInstance()
                                           ->getCurrentTimezone();
                $timestamp = new CB_TimeStampEx(null, $current_timezone);
                //GRN2-3628
                $timestamp->unix_ts = $item_data_list[$item_data_id]['number'];
                $view_str
                    = $timestamp->format(cb_msg('grn.report.cellular',
                    'date_format'));
            }
            break;

        case 'grn.report.time':
            $timestamp = new CB_TimeStampEx(null,
                GRN_Report_Item_Util_Time::DEFAULT_TIMEZONE);
            $timestamp->unix_ts = $item_data_list[$item_data_id]['number'];
            $view_str
                = $timestamp->format(cb_msg('grn.report.cellular',
                'time_format'));
            break;

        case 'grn.report.file':
            $view_str = "ファイル添付なし";
            if (array_key_exists('files', $item_data_list[$item_data_id])
                && count($item_data_list[$item_data_id]['files'])
            ) {
                $view_str = "ファイル添付あり";
                $is_files = true;
            }
            break;
    }

    $item_data_list[$item_data_id]['view_str'] = "";
    if ($item_data_list[$item_data_id]['option_string_type'] == 1) // pre
    {
        $item_data_list[$item_data_id]['view_str'] .= $item_data_list[$item_data_id]['option_string'];
        if ($item_data_list[$item_data_id]['data_type']
            == 'grn.report.string_multiple'
        ) {
            $item_data_list[$item_data_id]['view_str'] .= "\n";
        }
    }
    $item_data_list[$item_data_id]['view_str'] .= $view_str;
    if ($item_data_list[$item_data_id]['option_string_type'] == 2) // post
    {
        if ($item_data_list[$item_data_id]['data_type']
            == 'grn.report.string_multiple'
        ) {
            $item_data_list[$item_data_id]['view_str'] .= "\n";
        }
        $item_data_list[$item_data_id]['view_str'] .= $item_data_list[$item_data_id]['option_string'];
    }

    $item_data_list[$item_data_id]['view_truncate'] = false;
    if ($item_data_list[$item_data_id]['data_type']
        == 'grn.report.string_multiple'
    ) {
        require_once('report/cellular.csp');
        $item_data_list[$item_data_id]['view_truncate']
            = (grn_report_cellular_utf8_strwidth($item_data_list[$item_data_id]['view_str'])
               > 100 ? true : false);
    }
}

//Get Report Members
require_once('report/member_manager.csp');
$member_manager = GRN_Report_Member_Manager::getInstance();
$members =& $member_manager->getList($report_id);
$member_util = GRN_Report_Member_Controller_Utility::getInstance();
$members_for_view = $member_util->getUsersView($members);

$report['members_num'] = count($members_for_view);

//Create Parameter Translation Map for Follow
$translation_map_follow = [
    'id'                  => '_id',
    'creator'             => 'creator',
    'creator_foreign_key' => 'creator_foreign_key',
    'creator_name'        => 'creator_name',
    'ctime'               => 'ctime',
    'data'                => 'data',
    'follow_id'           => 'follow_id',
    'html'                => 'html',
    'report'              => 'report',
];

//Get Follow List for View
require_once('report/controller_util.csp');
$follow_util = GRN_Report_Follow_Controller_Utility::getInstance();
$option = [
    'list' => [
        'offset' => $follow_offset,
        'limit'  => $follow_limit,
    ]
];
$follow_list = $follow_util->getListView($translation_map_follow, $report_id,
    $option);

//Set Follow Deletable
foreach (array_keys($follow_list) as $follow_id) {
    $follow_list[$follow_id]['deletable'] = false;

    //Creator can delete follow
    if ((array_key_exists('creator', $follow_list[$follow_id])
         && $user_id === $follow_list[$follow_id]['creator'])
    ) {
        $follow_list[$follow_id]['deletable'] = true;
    }
}

//Set Previous and Next Page
if ($follow_offset > 0) {
    $smarty->assign('prev', true);
    $smarty->assign('prev_page', $follow_page - 1);
}
if ($follow_offset + count($follow_list) < $follow_count) {
    $smarty->assign('next', true);
    $smarty->assign('next_page', $follow_page + 1);
}

//Assign Follow List
$smarty->assign('follow_list', $follow_list);

//Get Report Notification
require_once('report/notification_manager.csp');
$notification_manager = GRN_Report_Notification_Manager::getInstance();
$notification =& $notification_manager->getList($report_id);
$notification_util
    = GRN_Report_Notification_Controller_Utility::getInstance();
$notification_for_view = $notification_util->getUsersView($notification);

$report['notification'] = $notification_for_view;
$report['notification_num'] = count($notification_for_view);

if ( ! $report_util->isViewable($user_id, $report_id)) {
    require_once('report/error_code.csp');
    cb_throw_error(E_GRN_RPRT_ACCESS_INVALID_ID);
}

//Get Report Partners
require_once('report/partner_manager.csp');
$partner_manager = GRN_Report_Partner_Manager::getInstance();
$partners =& $partner_manager->getList($report_id);
$report['partners_num'] = count($partners);

//Assign Report
$smarty->assign('report', $report);

//Confirm Notification, Update Read Status
require_once('report/report_logic.csp');
$logic = GRN_Report_Report_Logic::getInstance();
$logic->read($user_id, $report_id);

$smarty->assign('item_data_list', $item_data_list);
$smarty->assign('is_files', $is_files);

//Display Smarty Template
$smarty->display(cb_get_pagename() . '.tpl');

