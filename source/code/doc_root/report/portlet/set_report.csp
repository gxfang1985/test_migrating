<?php

require_once('portal/error_code.csp');
if ( ! isset($portlet)) {
    cb_throw_error(E_GRN_PRTL_PORTLET_INVALID_ACCESS);
}

global $G_INPUT;

//Get Smarty Instance
require_once("grn/smarty.csp");
$t = new GRN_Smarty;

// ----------
$settings = @ $portlet['settings'];
$filter_id = @ $settings['fid'];
$type = @ $settings['type'];
$option_type = @ $settings['option_type'];

$t->assign('selected_type', $type);

//Login User
global $G_container_base;
$uum =& $G_container_base->getInstance('uum');
$user =& $uum->getLoginUser();
$user_id = $user->getOID();

//Display Type
$display_list_for_view = [
    [
        'id'   => GRN_REPORT_SEARCH_TARGET_RECEIVED,
        'name' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.receive')
    ],
    [
        'id'   => GRN_REPORT_SEARCH_TARGET_SEND,
        'name' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.send')
    ],
    [
        'id'   => GRN_REPORT_SEARCH_TARGET_DRAFT,
        'name' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.draft')
    ],
    [
        'id'   => GRN_REPORT_SEARCH_TARGET_ALL,
        'name' => cb_msg(GRN_REPORT_MODULE_ID, 'search.target.all')
    ],
];
$t->assign('display_list', $display_list_for_view);

//Create Parameter Translation Map
$translation_map = [
    'id'                  => '_id',
    //Filter ID
    'name'                => 'name',
    //Filter Name
    'creator'             => 'creator',
    //Filter Creator
    'creator_foreign_key' => 'creator_foreign_key',
    //Filter Creator Foreign Key
];

//Filter Type
require_once('report/controller_util.csp');
$filter_util = GRN_Report_Filter_Controller_Utility::getInstance();
$filters = $filter_util->getFilterList($user, $translation_map, true);
$filters['list'] = $display_list_for_view;

//Selected Filter
foreach ($filters as $filter_list) {
    foreach ($filter_list as $filter) {
        if ($filter['id'] == $filter_id) {
            $t->assign('display_name', $filter['name']);
        }
    }
}

//Assign Filters
$t->assign('filters', $filters);

$page_path = explode('/', strtolower(cb_get_pagename()));
$page_part = $page_path[1];

// filter options
$filter_options_for_view = [];
$filter_options_for_view[] = [
    'value' => 'list',
    'label' => cb_msg(GRN_REPORT_MODULE_ID, 'display_list')
];

if ($page_part != 'system' && $page_part != 'operation') {
    if (count($filters['recent']) > 0) {
        if ( ! $filter_type) {
            $filter_type = 'recent';
        }
        $filter_options_for_view[] = [
            'value' => 'recent',
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'filter_recent')
        ];
    }

    if (count($filters['display']) > 0) {
        if ( ! $filter_type) {
            $filter_type = 'display';
        }
        $filter_options_for_view[] = [
            'value' => 'display',
            'label' => cb_msg(GRN_REPORT_MODULE_ID, 'filter_display')
        ];
    }
}

if (count($filters['all']) > 0) {
    if ( ! $filter_type) {
        $filter_type = 'all';
    }
    $filter_options_for_view[] = [
        'value' => 'all',
        'label' => cb_msg(GRN_REPORT_MODULE_ID, 'filter_all')
    ];
}

$selected_list = $display_list_for_view;
foreach ($filter_options_for_view as $key => $option) {
    if ($option['value'] == $option_type) {
        $filter_options_for_view[$key]['selected'] = true;
        $selected_list = $filters[$option_type];
    }
}

$non_selected = true;
foreach ($selected_list as $key => $item) {
    if ($item['id'] == $type) {
        $selected_list[$key]['selected'] = true;
        $non_selected = false;
    }
}
if ($non_selected) {
    $selected_list[0]['selected'] = true;
}

$t->assign('selected_list', $selected_list);
$t->assign('filter_options', $filter_options_for_view);

// font options
$font_options_for_view = [
    [
        'value' => 'small',
        'label' => cb_msg(GRN_REPORT_MODULE_ID, 'font_size_small')
    ],
    [
        'value' => 'normal',
        'label' => cb_msg(GRN_REPORT_MODULE_ID, 'font_size_normal')
    ],
    [
        'value' => 'large',
        'label' => cb_msg(GRN_REPORT_MODULE_ID, 'font_size_large')
    ],
];
switch (@ $settings['font_size']) {
    case 'small':
        $font_options_for_view[0]['selected'] = true;
        break;
    case 'normal':
        $font_options_for_view[1]['selected'] = true;
        break;
    case 'large':
        $font_options_for_view[2]['selected'] = true;
        break;
    default:
        $font_options_for_view[1]['selected'] = true;
        break;
}
$t->assign('font_options', $font_options_for_view);

// display columns
$display_keys = ['creator', 'mtime'];
if (is_array($settings)) {
    foreach ($display_keys as $key) {
        if (array_key_exists($key, $settings)) {
            $t->assign($key, $settings[$key]);
        } else {
            $t->assign($key, true);
        }
    }
} else {
    foreach ($display_keys as $key) {
        $t->assign($key, true);
    }
}

// row number
$t->assign(
    'select1', [
        'name'    => 'rows',
        'options' => [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20
        ],
        'padding' => '&nbsp;',
    ]
);

$settings_for_view = [];
$rows_for_view = @ $settings['rows'];
if ($rows_for_view == '') {
    $rows_for_view = 5;
}
$settings_for_view['rows'] = $rows_for_view;
$t->assign('settings', $settings_for_view);

$params = [
    'pid'     => $portlet['pid'],
    'plid'    => $portlet['plid'],
    'ppid'    => $portlet['ppid'],
    'display' => $portlet['display'],
];
$t->assign('params', $params);

//Assign include_php Parameter
$t->assign('portlet', $portlet);
$t->assign('display', $display);

// Ignore Licence Warnning
$t->skipWarning();

//Display Smarty Template
$doc_name = 'report/portlet/set_report';
$t->display("{$doc_name}.tpl");


