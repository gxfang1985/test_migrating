<?php

use grn\grn\access\service\AppAccess;
use grn\grn\MemberLogic;

require_once('report/error_code.csp');

//Get Parameter
$category_id = cb_at($G_INPUT, 'cid');    //Category ID
$form_id = cb_at($G_INPUT, 'fid');    //Form ID
$sf = cb_at($G_INPUT, 'sf');     //Session Hold Flag
$event_id = cb_at($G_INPUT, 'eid');    //Event ID for schedule relation
$str_date = cb_at($G_INPUT, 'date');

require_once('report/controller_util.csp');
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);

$schedule_util = GRN_Report_Report_Schedule_Controller_Utility::getInstance();
$date = $schedule_util->parseDate($str_date);

//Check Category Access Right
if (GRN_REPORT_CATEGORY_NONPARTY_ID != $category_id) {
    $category_util = GRN_Report_Category_Controller_Utility::getInstance();
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
}

require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_send_form = $session_manager->getSession('report/send_form'
                                                  . $tmp_key);

$member_logic = MemberLogic::getInstance();
//スケジュール連携用に予定を取得
if (is_numeric($event_id) && $event_id > 0) {
    $event = $schedule_util->getEventByEventId($G_report_login_user, $event_id,
        $date);

    $t->assign('event', $event);
    $t->assign('event_id', $event_id);
    $t->assign('str_date', $str_date);
}

//get private config setting
$utility = new GRN_Report_ControllerUtil();
$config = $utility->getInputConfigValues($G_report_login_user);
if (array_key_exists('report_allusers_attendeesusers', $config)) {
    $t->assign('private', $config['report_allusers_attendeesusers']);
} else {
    $t->assign('private', 1);
}

$is_mobile = false;
$is_include_deleted_users = false;

//Check Session Hold Flag
if ($sf != 1) {
    $session_send_form->unset_by('form');
    $session_send_form->unset_by('item_list');
    $session_send_form->unset_by('properties');
    $session_send_form->unset_by('members');
    $session_send_form->unset_by('notification');
    $session_send_form->unset_by('private');
    $session_send_form->unset_by('upload_ticket');
    $session_send_form->unset_by('max_filesize');

//-------------- Get Form / Item Section --------------//

    $form_util = GRN_Report_Form_Controller_Utility::getInstance();
    $form_for_view = $form_util->getSimpleView($form_id);
    if ( ! $form_for_view['active'] || $form_for_view['deleted']) {
        cb_throw_error(E_GRN_RPRT_FORM_NOT_FOUND);
    }

    require_once('report/form_logic.csp');
    $form_logic = GRN_Report_Form_Logic::getInstance();
    $form_logic->useForm($G_report_login_user->getOID(), $form_id);

    $item_util = GRN_Report_Item_Controller_Utility::getInstance();
    $item_list_for_view = $item_util->getSimpleListView($form_id);

    //デフォルトの参加者に自分を入れる
    $members_for_view
        = $member_logic->getDisplayUsersByUserIds([$G_report_login_user->getOID()],
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);

    //スケジュール連携を行う場合は標題、参加者、通知先、存在する場合は日付の項目をデフォルトで設定する
    if (isset($event) && ! is_null($event)) {
        // 予定のタイトルを標題に設定する
        $event_item = $schedule_util->getEventItem($event, $item_list_for_view);

        // 日付項目を予定の日付に設定する
        $schedule_util->setEventDateToItemList($date, $event,
            $item_list_for_view);

        // 予定の参加者を報告書の参加者,通知先に入れる
        require_once('grn/application.csp');
        $members = AppAccess::filterUserIdsInternalAccessByAppId($event->users,
            GRN_REPORT_APPLICATION_ID);
        $members_for_view = $member_logic->getDisplayUsersByUserIds($members,
            GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);

        $t->assign('notification', $members_for_view);
        $t->assign('event_item', $event_item);
    }

    $candidate_operators = $members_for_view;
    $properties_for_view = [];

    //Save Send Form Session (for Design)
    $session_send_form->set('form', $form_for_view);
    $session_send_form->set('item_list', $item_list_for_view);
    $session_send_form->set('properties', $properties_for_view);

    //generate upload ticket
    require_once('grn/upload.csp');
    $upload_ticket = GRN_UploadTicket::create($G_report_login_user->getOID());
    $session_send_form->set('upload_ticket', $upload_ticket);

    require_once('grn/file.csp');
    $config = GRN_FileManagerConfig::getInstance();
    $max_filesize = $config->getMaxFileSize();
    $session_send_form->set('max_filesize', $max_filesize);
} else {
    //Load Send Form Session (for Design)
    $form_for_view = $session_send_form->get('form');
    $item_list_for_view = $session_send_form->get('item_list');
    $properties_for_view = $session_send_form->get('properties');
    $members = $session_send_form->get('members');
    $notification = $session_send_form->get('notification');
    $operators = $session_send_form->get('operators');
    $operator_set = $session_send_form->get('operator_set');
    $partner_values = $session_send_form->get('partner_values');
    $private = $session_send_form->get('private');
    $upload_ticket = $session_send_form->get('upload_ticket');
    $max_filesize = $session_send_form->get('max_filesize');

    $members_for_view = $member_logic->getDisplayUsersByUserIds($members,
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);
    $notification_for_view
        = $member_logic->getDisplayUsersByUserIds($notification,
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);
    $operators_for_view = $member_logic->getDisplayUsersByUserIds($operators,
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);
    $candidate_operators = $members_for_view + $notification_for_view;
    require_once('report/partner.csp');
    $partners = GRN_ReportPartnerData::createByValues($partner_values);

    //Assign Members and Notification

    $t->assign('notification', $notification_for_view);
    $t->assign('operators', $operators_for_view);
    $t->assign('operator_open', $operator_set);
    $t->assign('partners', $partners);
    $t->assign('private', $private);
}

$t->assign('members', $members_for_view);
$t->assign('candidate_operators', $candidate_operators);
$t->assign('category_id', $category_id);
$t->assign('form_id', $form_id);
$t->assign('form', $form_for_view);
$t->assign('properties', $properties_for_view);
$t->assign('item_list', $item_list_for_view);
$t->assign('plugin', [
    'name'   => 'common',
    'params' => [
        'action'       => null,
        'session_name' => cb_get_pagename() . $tmp_key,
        'app_id'       => 'report'
    ]
]);
$t->assign('upload_ticket', $upload_ticket);
$t->assign('max_filesize', $max_filesize);

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

$site_position = [];
$site_position[0] = [
    'page' => 'report/index',
    'name' => grn_get_page_display_name('report/index'),
    'sf'   => 1
];
if (is_numeric($event_id) && $event_id > 0) {
    $site_position[1] = [
        'page' => 'report/send',
        'name' => grn_get_page_display_name('report/send'),
        'cid'  => $category_id,
        'eid'  => $event_id,
        'date' => $str_date
    ];
} else {
    $site_position[1] = [
        'page' => 'report/send',
        'name' => grn_get_page_display_name('report/send'),
        'cid'  => $category_id
    ];
}
$site_position[2] = ['page' => '', 'name' => $page_title];

//site position
$t->assign('site_position', $site_position);

