<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Get Parameter
    $category_id = isset($G_INPUT['cid']) ? $G_INPUT['cid'] : null;
    $form_id = isset($G_INPUT['fid']) ? $G_INPUT['fid'] : null;
    $event_id = isset($G_INPUT['eid']) ? $G_INPUT['eid'] : null;
    $str_date = isset($G_INPUT['date']) ? $G_INPUT['date'] : null;
    $command = isset($G_INPUT['cmd']) ? $G_INPUT['cmd'] : null;

    $date = new CB_Date();
    if ( ! $date->parse($str_date)) {
        $date = false;
    }

    //Get Session Key
    require_once('report/controller_util.csp');
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();

    // 未分類でないカテゴリのアクセス権をチェック
    if (GRN_REPORT_CATEGORY_NONPARTY_ID != $category_id) {
        require_once('report/controller_util.csp');
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
    }

    //Check Command Parameter
    switch ($command) {
        case 'back':
            //Redirect Back Page
            if (is_numeric($event_id) && $event_id > 0) {
                cb_redirect('report/send_form', [
                    'cid'     => $category_id,
                    'fid'     => $form_id,
                    'eid'     => $event_id,
                    'date'    => $str_date,
                    'sf'      => 1,
                    'tmp_key' => $tmp_key
                ]);
            } else {
                cb_redirect('report/send_form', [
                    'cid'     => $category_id,
                    'fid'     => $form_id,
                    'sf'      => 1,
                    'tmp_key' => $tmp_key
                ]);
            }
            break;
        default:
            break;
    }

    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_send_form =& $session_manager->getSession('report/send_form'
                                                       . $tmp_key);

    //Load Send Form Session (for Design)
    $form_for_view = $session_send_form->get('form');
    $item_list_for_view = $session_send_form->get('item_list');
    $properties_for_view = $session_send_form->get('properties');

    //Load Send Form Session (for Data)
    $send_form_data_list = $session_send_form->get('send_form_data_list');
    $members = $session_send_form->get('members');
    $notification = $session_send_form->get('notification');
    $operators = $session_send_form->get('operators');
    $operator_set = $session_send_form->get('operator_set');
    $partner_values = $session_send_form->get('partner_values');
    $private = $session_send_form->get('private');

    //Set Property
    $properties_for_view[GRN_REPORT_COLUMN_PRIVATE] = $private;
    $properties_for_view[GRN_REPORT_COLUMN_DRAFT] = GRN_REPORT_DRAFT;

    //もしevent_idが存在するならば、アクセス可能かチェックする
    if (is_numeric($event_id) && $event_id > 0) {
        require_once('schedule/application.csp');
        $app = GRN_Schedule_Application::getInstance();
        $event = &$app->getEvent($G_report_login_user, $event_id, null,
            CB_DATABASE_NO_LOCK, false, GRN_SCHEDULE_GET_MEMBER_ID);
        if ( ! $event) {
            cb_throw_error(E_GRN_RPRT_CANNOT_ACCESS_SCHEDULE);
        }
    }

    //Check Form Existance
    $translation_map_form = ['_id' => '_id'];
    $form_util = GRN_Report_Form_Controller_Utility::getInstance();
    $form = $form_util->getView($form_for_view['fid'],
        $translation_map_form);

    //Create Report
    require_once('report/report_logic.csp');
    $report_logic = GRN_Report_Report_Logic::getInstance();
    $report_id = $report_logic->add($form_for_view,
        $form_for_view['subject'], $properties_for_view);
    $form_for_view['report'] = $report_id;

    //EventIDが存在するなら関連を張る
    if (is_numeric($event_id) && $event_id > 0) {
        require_once('report/report_schedule_logic.csp');
        $report_schedule_logic
            = GRN_Report_Report_Schedule_Logic::getInstance();
        //下書きなので繰り返し予定のコピーは作成しない.
        $report_schedule_logic->addRelation($report_id, $event_id, $date, true);
    }

    //Member Setting
    require_once('report/member_logic.csp');
    $member_logic = GRN_Report_Member_Logic::getInstance();
    $member_logic->addMulti($report_id, $members, $operators);

    //Notification Setting
    require_once('report/notification_logic.csp');
    $notification_logic = GRN_Report_Notification_Logic::getInstance();
    $notification_logic->addMulti($report_id, $notification, $operators);

    //Partners Setting
    require_once('report/partner.csp');
    $partners = GRN_ReportPartnerData::createByValues($partner_values);
    require_once('report/partner_logic.csp');
    $partner_logic = GRN_Report_Partner_Logic::getInstance();
    $partner_logic->addMulti($report_id, $partners);

    //Inspection
    require_once('report/inspection.csp');
    $inspection = GRN_Report_Report_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $inspection_private = $inspection->setPrivate($private);

        $message_type = 'report_draft_add';

        $message_args['rid'] = $report_id;
        $message_args['fid'] = $form_for_view['fid'];
        $message_args['name'] = $form_for_view['name'];
        $message_args['subject'] = $form_for_view['subject'];
        $message_args['private'] = $inspection_private;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }
    //Create Item Data
    require_once('report/itemdata_logic.csp');
    $itemdata_logic = GRN_Report_ItemData_Logic::getInstance();
    $item_data_id_list = $itemdata_logic->addMulti($report_id,
        $item_list_for_view, false);

    //Redirect Next Page
    cb_redirect('report/index', ['sf' => 1]);
}


