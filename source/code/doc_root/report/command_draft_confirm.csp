<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Get Parameter
    $report_id = @ $G_INPUT['rid'];    //Report ID
    $command = @ $G_INPUT['cmd'];    //Command

    //Get Session Key
    require_once('report/controller_util.csp');
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();

    //Check Command Parameter
    switch ($command) {
        case 'back':
            //Redirect Back Page
            cb_redirect('report/modify_draft',
                ['rid' => $report_id, 'tmp_key' => $tmp_key, 'sf' => 1]);
            break;
        case 'cancel':
            //Redirect Cancel Page
            cb_redirect('report/view_draft', ['rid' => $report_id]);
            break;
        default:
            break;
    }

    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_send_form =& $session_manager->getSession('report/modify_draft'
                                                       . $tmp_key);

    //Load Send Form Session (for Design)
    $report = $session_send_form->get('report');
    $item_list_for_view = $session_send_form->get('item_list');
    $properties_for_view = $session_send_form->get('properties');
    $members = $session_send_form->get('members');
    $notification = $session_send_form->get('notification');
    $operators = $session_send_form->get('operators');
    $partner_values = $session_send_form->get('partner_values');
    $private = $session_send_form->get('private');

    //Check Category Access Right
    $category_id = $report['category'];
    if (strlen($category_id) == 0) {
        $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
    }
    if (GRN_REPORT_CATEGORY_NONPARTY_ID != $category_id) {
        require_once('report/controller_util.csp');
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
    }

    //Check Form Existance
    $translation_map_form = [
        '_id'            => '_id',
        'enable_follow'  => 'enable_follow',
        'enable_member'  => 'enable_member',
        'enable_partner' => 'enable_partner'
    ];
    $form_util = GRN_Report_Form_Controller_Utility::getInstance();
    $form = $form_util->getView($report['form'],
        $translation_map_form);

    //Create Report Property List
    $property_list = [];
    $property_list[GRN_REPORT_COLUMN_NAME]
        = $properties_for_view[GRN_REPORT_COLUMN_NAME];
    $property_list[GRN_REPORT_COLUMN_PRIVATE] = $private;
    $property_list[GRN_REPORT_COLUMN_DRAFT] = GRN_REPORT_SENT;
    $property_list[GRN_REPORT_COLUMN_ENABLE_FOLLOW] = $form['enable_follow'];
    $property_list[GRN_REPORT_COLUMN_ENABLE_MEMBER] = $form['enable_member'];
    $property_list[GRN_REPORT_COLUMN_ENABLE_PARTNER] = $form['enable_partner'];

    //Update Report
    require_once('report/report_logic.csp');
    $report_logic = GRN_Report_Report_Logic::getInstance();
    $report_id = $report_logic->modify($report_id, $property_list, true);

    //Update Item Data
    require_once('report/itemdata_logic.csp');
    $itemdata_logic = GRN_Report_ItemData_Logic::getInstance();
    $property_list_for_updating = [
        GRN_REPORT_COLUMN_ITEM               => 'item',
        GRN_REPORT_COLUMN_DISPLAY_NAME       => 'display_name',
        GRN_REPORT_COLUMN_TYPE               => 'type',
        GRN_REPORT_COLUMN_OPTION_STRING      => 'option_string',
        GRN_REPORT_COLUMN_OPTION_STRING_TYPE => 'option_string_type',
        GRN_REPORT_COLUMN_DESCRIPTION        => 'description',
        GRN_REPORT_COLUMN_DESCRIPTION_TYPE   => 'description_type',
        GRN_REPORT_COLUMN_DESCRIPTION_EDITOR => 'description_editor',
        GRN_REPORT_COLUMN_DATA_TYPE          => 'data_type',
        GRN_REPORT_COLUMN_FORM               => 'form',
        GRN_REPORT_COLUMN_SETTINGS           => 'settings',
        GRN_REPORT_COLUMN_REQUIRED           => 'required',
        GRN_REPORT_COLUMN_LIST_INDEX         => 'list_index',
        GRN_REPORT_COLUMN_ITEM_DATA          => 'item_data',
        GRN_REPORT_COLUMN_NUMBER             => 'number',
        GRN_REPORT_COLUMN_TEXT               => 'text',
        GRN_REPORT_COLUMN_HTML               => 'html',
    ];

    foreach ($item_list_for_view as $item_id => $item) {
        if (array_key_exists('modify', $item) && $item['modify']) {
            //modify item which is not changed by form modification
            $itemdata_logic->modify($item['item_data'], $report_id,
                $item['item'], $item, true, $property_list_for_updating);
        } else {
            //If form is modified, added data can exist
            $itemdata_logic->add($report_id, $item['iid'], $item['data_type'],
                $item, true);
        }
    }

    //予定との関連を張りなおす
    //下書きで繰り返し予定と関連付けていた場合に分離するための対策。
    require_once('report/report_schedule_logic.csp');
    $schedule_logic = GRN_Report_Report_Schedule_Logic::getInstance();
    $event_info = $schedule_logic->getRelatedEventId($report_id);
    if ($event_info) {
        $date = new CB_Date();
        $date->parse($event_info['date']);
        $schedule_logic->removeRelation($report_id, $event_info['event_id']);
        $schedule_logic->addRelation($report_id, $event_info['event_id'],
            $date);
    }

    //Update Report Members
    require_once('report/controller_util.csp');
    $member_util = GRN_Report_Member_Controller_Utility::getInstance();
    $member_util->updateMembers($report_id, $members, $operators);

    //Update Report Notification
    foreach ($notification as $nkey => $nid) {
        if ($nid == $G_report_login_user->getOID()) {
            unset($notification[$nkey]);
        }
        foreach ($members as $mkey => $mid) {
            if ($nid == $mid) {
                unset($notification[$nkey]);
            }
        }
    }
    require_once('report/controller_util.csp');
    $notification_util
        = GRN_Report_Notification_Controller_Utility::getInstance();
    $notification_util->updateNotification($report_id, $notification,
        $operators);

    //Update Report Partners
    require_once('report/partner.csp');
    $partners = GRN_ReportPartnerData::createByValues($partner_values);
    require_once('report/partner_logic.csp');
    $partner_logic = GRN_Report_Partner_Logic::getInstance();
    $partner_logic->update($report_id, $partners);

    //Create Notification List
    $notification_list = array_merge($members, $notification);
    $notification_list[] = $G_report_login_user->getOID();

    //Send Notification
    require_once('report/notification.csp');
    $notification = GRN_Report_Notification_Listener::getInstance();
    $tsex = new CB_TimeStampEx();
    $notification->sendList(GRN_REPORT_NOTIFY_ENTRY, $notification_list,
        $G_report_login_user, $report_id, $tsex);

    //Inspection
    require_once('report/inspection.csp');
    $inspection = GRN_Report_Report_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $inspection_private = $inspection->setPrivate($private);

        $message_type = 'report_add';

        $message_args = [];
        $message_args['rid'] = $report_id;
        $message_args['fid'] = $report['form'];
        $message_args['name'] = $report['form_name'];
        $message_args['subject'] = $report['name'];
        $message_args['private'] = $inspection_private;
        $message_args['maintainer'] = $operators;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Redirect Next Page
    cb_redirect('report/index');
}


