<?php

use grn\grn\ThumbnailUtil;

global $G_INPUT;

$login = cb_get_login_user();
$user_id = $login->getOID();
$tmp__file_key = @ $G_INPUT['tmp_file_key'];
if ( ! is_null($tmp__file_key)) {
    require_once('grn/controller.csp');
    require_once('workflow/controller_util.csp');
    require_once('grn/upload.csp');
    $tmp_key = grn_get_temporary_key();
    $iid = @$G_INPUT['iid'];
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_page = $session_manager->getSession("pagename" . $tmp_key);
    $page_name = 'report/' . $session_page->get("pagename") . $tmp_key;
    $command_page_name = 'report/command_' . $session_page->get("pagename")
                         . $tmp_key;
    $session_send_form = $session_manager->getSession($command_page_name);

    $attached_file_item_list
        = $session_send_form->getFiles('attached_session_file_item');
    $file = @$attached_file_item_list[$tmp__file_key];
    if (is_null($file)) {
        $session_send_form = $session_manager->getSession($page_name);
        $item_list_for_view = $session_send_form->get('item_list');
        if ( ! is_array($item_list_for_view)
             || ! isset($item_list_for_view[$iid])
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_INVALID_ID);
        }

        $upload_file
            = GRN_UploadFile::getUploadedFiles(@$item_list_for_view[$iid]['upload_ticket'],
            [@$tmp__file_key], false);
        if ( ! is_array($upload_file) || count($upload_file) == 0) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_ITEMDATAFILE_INVALID_ID);
        }
        $file = reset($upload_file);
    }
    assert('is_a($file,"CB_ServerFile")');
    $content_type = '';
    $ext = substr(strrchr($file->get('name'), '.'), 1);
    if (strlen($ext) > 0) {
        require_once('grn/mime.csp');
        $mcm = GRN_MIMEConfigManager::getInstance();
        $content_type = $mcm->getMIMEType($ext);
    }
    if ( ! is_string($content_type) || strlen($content_type) == 0) {
        $content_type = 'application/octet-stream';
    }
    $data = file_get_contents($file->getPath());
    cb_prepare_download($file->get('name'), $content_type, false);
    echo $data;
} else {
    //Get Parameters
    $file_id = @ $G_INPUT['fid'];
    $thumbnail = @ $G_INPUT['thumbnail'];
    $thumbnail_xsize = @ $G_INPUT['thumbnail_xsize'];
    $thumbnail_ysize = @ $G_INPUT['thumbnail_ysize'];

    require_once('report/file.csp');
    $file_manager = GRN_Report_FileManager::getInstance();
    $report_id = $file_manager->getReport($file_id);
    if ( ! $report_id) {
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_FILE_NOT_FOUND);
    }

    //Check File Downloadable
    require_once('report/controller_util.csp');
    $report_util = GRN_Report_Report_Controller_Utility::getInstance();
    if ( ! $report_util->isViewable($user_id, $report_id)) {
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_FILE_NOT_FOUND);
    }

    $file_object =& $file_manager->getFile($file_id);
    if ( ! $file_object) {
        require_once('report/error_code.csp');
        cb_throw_error(E_GRN_RPRT_FILE_NOT_FOUND);
    }

    //Download Current File or Version File
    if (cb_at($G_INPUT, 'ver')) {
        $body_object = $file_object->getBody($G_INPUT['ver']);
    } else {
        $body_object = $file_object->getCurrentBody();
    }

    //Set Defaullt X / Y Size, if No Setting
    $thumbnail_xsize = ( ! $thumbnail_xsize) ? GRN_REPORT_THUMBNAIL_WIDTH
        : $thumbnail_xsize;
    $thumbnail_ysize = ( ! $thumbnail_ysize) ? GRN_REPORT_THUMBNAIL_HEIGHT
        : $thumbnail_ysize;
    if ($thumbnail == 1) {
        $mime_type = $body_object->get('mime');    //Get MIME Type
        $util = new ThumbnailUtil();
        cb_prepare_download($body_object->get('name'), $mime_type, true, true);
        $result = $util->makeThumbnailByImageData($body_object->getContents(),
            (int)$thumbnail_xsize, (int)$thumbnail_ysize);
        if ($result === false) {
            $body_object->download(true);
        }
    } else {
        $body_object->download(true);
    }
}
cb_safe_exit();

