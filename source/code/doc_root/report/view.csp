<?php

use grn\grn\access\service\AppAccess;

global $G_INPUT;

require_once('grn/smarty.csp');
$t = new GRN_Smarty;

$page_title = grn_get_current_page_display_name();
$page_name = cb_get_pagename();

require_once('report/controller_util.csp');
$controller_util = new GRN_Report_ControllerUtil($page_name);

global $G_container_base;
$uum = $G_container_base->getInstance('uum');

$report_id = null;
if (array_key_exists('rid', $G_INPUT)) {
    $report_id = $G_INPUT['rid'];
}
$t->assign('report_id', $report_id);

$user_id = $G_report_login_user->getOID();

$utility = new GRN_Report_ControllerUtil();
$input_config = $utility->getInputConfigValues($G_report_login_user);
$t->assign('input_config', $input_config);

//Get Report for view
$report_util = GRN_Report_Report_Controller_Utility::getInstance();
$report = $report_util->getReportView($report_id);

$is_creator = false;
$creator_id = isset($report['creator']) ? $report['creator'] : null;
if ($G_report_login_user->getOID() == $creator_id) {
    $is_creator = true;
}
$t->assign('is_creator', $is_creator);

if ( ! $is_creator) {
    require_once('report/operator_logic.csp');
    $t->assign('is_report_operator',
        GRN_Report_Operator_Logic::isReportOperator($user_id, $report_id));
}

//Get Report Members
require_once('report/member_manager.csp');
$member_manager = GRN_Report_Member_Manager::getInstance();
$members =& $member_manager->getList($report_id);
$t->assign('members', $members);

//Get Report Partners
require_once('report/partner_manager.csp');
$partner_manager = GRN_Report_Partner_Manager::getInstance();
$partner_rows =& $partner_manager->getList($report_id);
require_once('report/partner.csp');
$partners = GRN_ReportPartnerData::createByRows($partner_rows);
$t->assign('partners', $partners);

require_once('report/address_util.csp');
$t->assign('address_available',
    $address_available = GRN_ReportAddressUtil::isAddressAvailable());
$t->assign('address_available_for_external',
    AppAccess::isAppAvailableExternalAccess('address'));

//スケジュールとの関連を持っているか調べる
require_once('report/report_schedule_logic.csp');
$report_schedule_logic = GRN_Report_Report_Schedule_Logic::getInstance();
$event_info = $report_schedule_logic->getRelatedEventId($report_id);
if (is_numeric($event_info['event_id']) && $event_info['event_id'] > 0) {
    $t->assign('event_id', $event_info['event_id']);
    $report_schedule_util
        = GRN_Report_Report_Schedule_Controller_Utility::getInstance();
    $event = $report_schedule_util->getEvent($G_report_login_user, $event_info,
        GRN_SCHEDULE_GET_MEMBER_OBJECT);

    $dynamic_roles = $uum->listGrantedRoles();
    if ($event) {
        require_once('schedule/access_logic.csp');
        $event_access_logic = GRN_Schedule_Access_Logic::getInstance();
        $access
            = $event_access_logic->getEventAccess($G_report_login_user,
            $event, ['read'], $dynamic_roles);
        if ($access['read']) {
            $t->assign('event', $event);
            $t->assign('event_date', $event_info['date']);
        }
    }
}

//Get Report Notification
require_once('report/notification_manager.csp');
$notification_manager = GRN_Report_Notification_Manager::getInstance();
$notificationUsers =& $notification_manager->getList($report_id);

$t->assign('notificationUsers', $notificationUsers);

//Get Report Unsubscribe Users
require_once('report/subscribe_manager.csp');
$subscribe_manager = GRN_Report_Subscribe_Manager::getInstance();
$unsubscribed_users =& $subscribe_manager->getList($report_id, null,
    GRN_REPORT_UNSUBSCRIBED);
$subscribed_users =& $subscribe_manager->getList($report_id, null,
    GRN_REPORT_SUBSCRIBED);

//Get Report Subscription
$subscribe = false;

//Check Creator
if ($creator_id == $user_id) {
    $subscribe = true;
}

//Check Notification User    
foreach ($notificationUsers as $u) {
    if ($u == $user_id) {
        $subscribe = true;
    }
}

//Check Member
foreach ($members as $m) {
    if ($m == $user_id) {
        $subscribe = true;
    }
}

//Check Unsubscribed
foreach ($unsubscribed_users as $s) {
    if ($s['col_user'] == $user_id) {
        $subscribe = false;
    }
}

//Check Subscribed
foreach ($subscribed_users as $user) {
    if ($user['col_user'] == $user_id) {
        $subscribe = true;
    }
}

//Get Form for View (if Active and Not Deleted.)
$category_id = null;
if ( ! is_null($report['form'])) {
    $form_util = GRN_Report_Form_Controller_Utility::getInstance();
    $form = $form_util->getSimpleView($report['form']);
    if ($form) {
        if ($form['active'] == 1 && $form['deleted'] != 1) {
            $category_id = $form['category'];

            //Assign Form
            $t->assign('fid', $form['fid']);
            $t->assign('form', $form);
        } elseif (array_key_exists('category', $report)) {
            $category_id = $report['category'];
        }
    }
}

if (0 == strlen($category_id)) {
    $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
}

// Category Access Right
$is_accessible_category = false;
$category_util = GRN_Report_Category_Controller_Utility::getInstance();
if ($category_id == GRN_REPORT_CATEGORY_NONPARTY_ID
    || $category_util->checkCategoryAccess($category_id, false)
) {
    $is_accessible_category = true;
}

$t->assign('accessible_category', $is_accessible_category);

// View Access Right
if ( ! isViewable($G_report_login_user->getOID(), $creator_id, $members,
    $notificationUsers, $report['private'], $is_accessible_category)
) {
    require_once('report/error_code.csp');
    cb_throw_error(E_GRN_RPRT_REPORT_DENY_ACCESS);
}

//Assign Report
$t->assign('report', $report);
$t->assign('subscribe', $subscribe);
$t->assign('unsubscribed_users', $unsubscribed_users);
$t->assign('unsubscribed_users_num', count($unsubscribed_users));

if (isset($report['form_name']) && (isset($report['name']))) {
    $t->assign('page_title',
        $report['form_name'] . '（' . $report['name'] . '）');
    $t->assign('report_title',
        $report['form_name'] . '（' . $report['name'] . '）');
} else {
    $t->assign('page_title', $page_title);
    $t->assign('report_title', $report['name']);
}

$t->assign('cid', $category_id);

$item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();
$item_data_list = $item_data_util->getSimpleListView($report_id);
$t->assign('item_data_list', $item_data_list);

//Get Follow List for View
$follow_util = GRN_Report_Follow_Controller_Utility::getInstance();
$utility = new GRN_Report_ControllerUtil();
$offset = $utility->getNaviStartPosition();
if (array_key_exists('follow_id', $G_INPUT)
    && is_numeric($G_INPUT['follow_id'])
) {
    $offset = $follow_util->getOffset($report_id, $G_INPUT['follow_id']);
}
$limit = $follow_util->getLimit($G_report_login_user);
$follow_list = $follow_util->getFollowListView($report_id, $category_id,
    $offset, $limit);
$follow_util->setDeletableInfo($follow_list, $category_id,
    $G_report_login_user->getOID());
if ($input_config['enable_follow_autolink']) {
    $base_url = cb_pageurl('report/view',
        ['cid' => $category_id, 'rid' => $report_id, 'follow_id' => '']);
    $follow_util->setAutoLinkInfo($follow_list, $base_url);
}

//Assign Follow List
$t->assign('follow_list', $follow_list);

//Get Read Status View
require_once('report/controller_util.csp');
$readstatus_util = GRN_Report_ReadStatus_Controller_Utility::getInstance();
$readstatus = $readstatus_util->getView($user_id, $report_id);
$t->assign('readstatus', $readstatus);
//Confirm Notification, Update Read Status
require_once('report/report_logic.csp');
$logic = GRN_Report_Report_Logic::getInstance();
$logic->read($user_id, $report_id, null, $readstatus);

// User icon setting
require_once('grn/controller.csp');
$imageIcon = GRN_ControllerUtil::getUserIconFormat($G_report_login_user);
$t->assign('imageIcon', $imageIcon);

// for user image icon
if ($imageIcon) {
    // get users_info
    $userIds = [];
    foreach ($follow_list as $follow) {
        if (array_key_exists("creator", $follow)) {
            $userIds[] = $follow['creator'];
        }
    }
    $users_info = GRN_ControllerUtil::getUserInfoToShowUserName($userIds,
        $G_report_login_user);
    $users_info = GRN_ControllerUtil::addPhotoUrlForUsersInfo($users_info,
        GRN_ControllerUtil::getUserProfilePhotoSmallSize());
    $t->assign('iconSize', GRN_ControllerUtil::ICON_SIZE_SMALL);
    $t->assign('users_info', $users_info);
}
$t->assign('loginId', $G_report_login_user->getOID());
//Inspection
require_once('report/inspection.csp');
$inspection = GRN_Report_Report_Inspection::getInstance();
if ($inspection->isEnabled()) {
    $message_type = 'report_browse';
    $message_args['rid'] = $report_id;
    $message_args['uid'] = $user_id;

    //Record Inspection
    $inspection->record($message_type, $message_args, 'info');
}

//Report Delete Information
$delete_info = [
    'title'      => grn_get_page_display_name('report/delete'),
    'page'       => 'report/delete.tpl',
    'no_confirm' => false,
    'data'       => [
        'rid'    => $report_id,
        'report' => $report
    ],
    'handler'    => 'lnk_delete',
];
$t->assign('delete_info', $delete_info);

//Follow Delete Information
$handler = [];
foreach ($follow_list as $key => $follow) {
    $follow_id = $follow['id'];
    if ($follow['deletable']) {
        $handler[] = "lnk_follow_delete_$follow_id";
    }
}

$follow_delete_info = [
    'title'         => grn_get_page_display_name('report/follow_delete'),
    'page'          => 'report/follow_delete.tpl',
    'no_confirm'    => false,
    'data'          => ['rid' => $report_id],
    'handler'       => $handler,
    'before_delete' => [
        'on_before_delete_follow',
        ['follow_id' => 'follow_id']
    ],
];
$t->assign('follow_delete_info', $follow_delete_info);

//Create Navigation
$count = $follow_util->getCount($report_id);
$params = ['rid' => $report_id];
$navi_for_view = $utility->makeNaviInformation($offset,
    $limit,
    $count,
    $params
);
$navi_for_view['navi']['fragment'] = 'follow';
$t->assign('navi', $navi_for_view);

//Assign Site Position
$page_infos = [
    'index' => ['sf' => 1],
    'view'  => null
];
$site_position = $controller_util->makeSitePosition('report/', $page_infos);
$t->assign('site_position', $site_position);

require_once('star/logic.csp');
$star_logic = GRN_Star_StarLogic::getInstance();
$use_star = $star_logic->isActive();
$t->assign('use_star', $use_star);
$t->assign('star_infos',
    $star_logic->getStatusByIDs($G_report_login_user, GRN_REPORT_MODULE_ID,
        [$report_id]));

//generate upload ticket
include('grn/_upload_prepend.csp');

$t->display("{$page_name}.tpl");

//Check Viewable
function isViewable(
    $login_id,
    $creator_id,
    $members,
    $notification_users,
    $is_private,
    $is_accessible_category
) {
    if ($login_id == $creator_id) {
        return true;
    }

    if (in_array($login_id, $members)) {
        return true;
    }

    if (in_array($login_id, $notification_users)) {
        return true;
    }

    if ( ! $is_private && $is_accessible_category) {
        return true;
    }

    return false;
}

