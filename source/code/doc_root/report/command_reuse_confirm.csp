<?php

if (0 == strcasecmp(@ $_SERVER['REQUEST_METHOD'], 'POST')) {
    global $G_INPUT;

    //Instantiate Smarty Object
    require_once("grn/smarty.csp");
    $t = new GRN_Smarty;

    //Get Parameter
    $report_id = @ $G_INPUT['rid'];    //Report ID
    $command = @ $G_INPUT['cmd'];    //Command

    //Get Session Key
    require_once('report/controller_util.csp');
    require_once('grn/controller.csp');
    $tmp_key = grn_get_temporary_key();

    //Check Command Parameter
    switch ($command) {
        case 'back':
            //Redirect Back Page
            cb_redirect('report/reuse',
                ['rid' => $report_id, 'sf' => 1, 'tmp_key' => $tmp_key]);
            break;
        case 'cancel':
            //Redirect Cancel Page
            cb_redirect('report/view', ['rid' => $report_id]);
            break;
        case 'cancel_draft_reuse':
            //Redirect Cancel Page
            cb_redirect('report/view_draft', ['rid' => $report_id]);
            break;
        default:
            break;
    }

    //Get Session
    require_once('fw/session_manager.csp');
    $session_manager = CB_SessionManager::getInstance();
    $session_reuse =& $session_manager->getSession('report/reuse' . $tmp_key);

    //Load Send Form Session (for Design)
    $form_for_view = $session_reuse->get('form');
    $item_list_for_view = $session_reuse->get('item_list');
    $properties_for_view = $session_reuse->get('properties');
    $members = $session_reuse->get('members');
    $notification = $session_reuse->get('notification');
    $operators = $session_reuse->get('operators');
    $operator_set = $session_reuse->get('operator_set');
    $partner_values = $session_reuse->get('partner_values');
    $private = $session_reuse->get('private');

    //Load Send Form Session (for Data)
    $send_form_data_list = $session_reuse->get('send_form_data_list');

    //Check Category Access Right
    $category_id = $form_for_view['category'];
    if (strlen($category_id) == 0) {
        $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
    }
    if (GRN_REPORT_CATEGORY_NONPARTY_ID != $category_id) {
        require_once('report/controller_util.csp');
        $category_util = GRN_Report_Category_Controller_Utility::getInstance();
        $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
    }

    //Create Report Property List
    $property_list = [];
    $property_list[GRN_REPORT_COLUMN_DRAFT] = GRN_REPORT_SENT;
    $property_list[GRN_REPORT_COLUMN_PRIVATE] = $private;

    //Check Form Existance
    $translation_map_form = ['_id' => '_id'];
    $form_util = GRN_Report_Form_Controller_Utility::getInstance();
    $form = $form_util->getView($form_for_view['fid'],
        $translation_map_form);

    //Create Report
    require_once('report/report_logic.csp');
    $report_logic = GRN_Report_Report_Logic::getInstance();
    $report_id = $report_logic->add($form_for_view,
        $form_for_view['subject'], $property_list);
    $form_for_view['report'] = $report_id;

    //Inspection
    require_once('report/inspection.csp');
    $inspection = GRN_Report_Report_Inspection::getInstance();
    if ($inspection->isEnabled()) {
        $inspection_private = $inspection->setPrivate($private);

        $message_type = 'report_reuse';
        $message_args = [];
        $message_args['rid'] = $report_id;
        $message_args['fid'] = $form_for_view['fid'];
        $message_args['name'] = $form_for_view['name'];
        $message_args['subject'] = $form_for_view['subject'];
        $message_args['private'] = $inspection_private;
        $message_args['maintainer'] = $operators;

        //Record Inspection
        $inspection->record($message_type, $message_args);
    }

    //Create Item Data
    require_once('report/itemdata_logic.csp');
    $itemdata_logic = GRN_Report_ItemData_Logic::getInstance();
    $item_data_id_list = $itemdata_logic->addMulti($report_id,
        $item_list_for_view);

    //Member Setting
    require_once('report/member_logic.csp');
    $member_logic = GRN_Report_Member_Logic::getInstance();
    $member_logic->addMulti($report_id, $members, $operators);
    $member_logic->changeOrder($report_id, $members);

    //Notification Setting
    require_once('report/notification_logic.csp');
    $notification_logic = GRN_Report_Notification_Logic::getInstance();
    $notification_logic->addMulti($report_id, $notification, $operators);
    $notification_logic->changeOrder($report_id, $notification);

    //Partners Setting
    require_once('report/partner.csp');
    $partners = GRN_ReportPartnerData::createByValues($partner_values);
    require_once('report/partner_logic.csp');
    $partner_logic = GRN_Report_Partner_Logic::getInstance();
    $partner_logic->addMulti($report_id, $partners);

    //Subscribe Setting
    $notification_list = array_merge($members, $notification);
    $notification_list[] = $G_report_login_user->getOID();

    //Send Notification
    require_once('report/notification.csp');
    $notification = GRN_Report_Notification_Listener::getInstance();
    $tsex = new CB_TimeStampEx();
    $notification->sendList(GRN_REPORT_NOTIFY_ENTRY, $notification_list,
        $G_report_login_user, $report_id, $tsex);

    //Redirect Next Page
    cb_redirect('report/index');
}


