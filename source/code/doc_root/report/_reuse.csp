<?php

use grn\grn\MemberLogic;

//Get Parameter
$report_id = @ $G_INPUT['rid'];    //Form ID
$sf = @ $G_INPUT['sf'];     //Session Hold Flag

//Get Session Key
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();
$t->assign('tmp_key', $tmp_key);

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session_send_form =& $session_manager->getSession('report/reuse' . $tmp_key);
$member_logic = MemberLogic::getInstance();

$is_mobile = false;
$is_include_deleted_users = false;

//Check Session Hold Flag
if ($sf != 1) {
//-------------- Clear Session Section --------------//

    //Clear Send Form Sesson (for Design)
    $session_send_form->unset_by('form');
    $session_send_form->unset_by('item_list');
    $session_send_form->unset_by('properties');
    $session_send_form->unset_by('upload_ticket');
    $session_send_form->unset_by('max_filesize');


//-------------- Get Report / Item Data / Item Data File Section --------------//

    //Get Report and Item Data and Item Data File Controller Utility
    require_once('report/controller_util.csp');
    $item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();
    $item_data_file_util
        = GRN_Report_ItemDataFile_Controller_Utility::getInstance();

    //Create Parameter Translation Map for Item Data
    $translation_map_item_data = [
        'idid'      => '_id',                //Item Data ID
        'item'      => 'item',               //Item ID
        'data_type' => 'data_type',          //Item Data Type
        'number'    => 'number',             //Item Number
        'text'      => 'text',               //Item Text
        'html'      => 'html',               //Item HTML
    ];

    //Create Parameter Translation Map for Item Data File
    $translation_map_item_data_file = [
        'ifid'      => '_id',                  //Item Data File ID
        'item_data' => 'item_data',            //Item Data ID
        'file'      => 'file',                 //GRN_File ID
    ];

    //Get Report
    $report_util = GRN_Report_Report_Controller_Utility::getInstance();
    $report = $report_util->getSimpleView($report_id);

    //Get Item Data List
    $item_data_list = $item_data_util->getListView($translation_map_item_data,
        $report_id);

    //Get Item Data File List
    $item_data_file_list = [];
    foreach (array_keys($item_data_list) as $item_data_id) {
        if ($item_data_list[$item_data_id]['data_type'] == 'grn.report.file') {
            $item_data_file_list[$item_data_id]
                = $item_data_file_util->getListView($translation_map_item_data_file,
                $item_data_id);
        } else {
            $item_data_file_list[$item_data_id] = [];
        }
    }

//-------------- Get Form / Item Section --------------//

    //Get Form and Item Controller Utility
    require_once('report/controller_util.csp');
    $form_util = GRN_Report_Form_Controller_Utility::getInstance();
    $item_util = GRN_Report_Item_Controller_Utility::getInstance();

    //Create Parameter Translation Map
    $translation_map_form = [
        //Form Information
        'fid'            => '_id',              //Form ID
        'name'           => 'name',             //Form Name
        'foreign_key'    => 'foreign_key',      //Form Foreign key
        'category'       => 'category',         //Form Category
        'memo'           => 'memo',             //Form Memo
        'admin_memo'     => 'admin_memo',       //Form Admin Memo
        'type'           => 'type',             //Form Type
        'deleted'        => 'deleted',          //Form Deleted
        'category'       => 'category',         //Form Category
        'active'         => 'active',           //Form Active
        'enable_follow'  => 'enable_follow',    //Form Enable Follow
        'enable_member'  => 'enable_member',    //Form Enable Member
        'enable_partner' => 'enable_partner',   //Form Enable Partner
        'list_index'     => 'list_index',       //Form List Index
    ];

    //Create Parameter Translation Map
    $translation_map_item = [
        'iid'                => '_id',
        //Item ID
        'display_name'       => 'display_name',
        //Item Display Name
        'type'               => 'type',
        //Item Type
        'option_string'      => 'option_string',
        //Item Option String
        'option_string_type' => 'option_string_type',
        //Item Option String Type
        'description'        => 'description',
        //Item Description
        'description_type'   => 'description_type',
        //Item Description Type
        'description_editor' => 'description_editor',
        //Item Description Editor
        'data_type'          => 'data_type',
        //Item Data Type
        'form'               => 'form',
        //Item Form
        'settings'           => 'settings',
        //Item Settings
        'required'           => 'required',
        //Item Reuired Flag
        'list_index'         => 'list_index',
        //Item List Index
        'display_type'       => 'display_type',
        //Display_type
    ];

    //Get Form for view
    $option = [
        'condition' => [
            '0' => ['column' => 'col_type', 'value' => '0', 'operator' => '='],
            '1' => [
                'column'   => 'col_active',
                'value'    => '1',
                'operator' => '='
            ],
            '2' => [
                'column'   => 'col_deleted',
                'value'    => '0',
                'operator' => '='
            ],
        ]
    ];
    $form_for_view = $form_util->getView($report['form'], $translation_map_form,
        null, $option);

    //Get Item List for view
    $item_list_for_view = $item_util->getListView($translation_map_item,
        $report['form']);

//-------------- Marge Form <-> Report / Item <-> Item Data, Item Data File  Section --------------//

    //Get GRN_File Table
    require_once('report/file.csp');
    $file_manager = new GRN_Report_FileManager_Core();
    $file_table =& $file_manager->getFileTable();

    //Marge Item Data and Item Data File to Item
    foreach (array_keys($item_data_list) as $item_data_id) {
        $item_data =& $item_data_list[$item_data_id];
        if (array_key_exists($item_data['item'], $item_list_for_view)) {
            $item =& $item_list_for_view[$item_data['item']];
            if ($item_data['data_type'] == $item['data_type']) {
                $item['number'] = $item_data['number'];
                $item['text'] = $item_data['text'];
                $item['html'] = $item_data['html'];

                if (count($item_data_file_list[$item_data_id]) !== 0) {
                    $i = 0;
                    foreach (
                        array_keys($item_data_file_list[$item_data_id]) as
                        $item_data_file_id
                    ) {
                        $item_key = sprintf('item_%s_file_%s', $item['iid'],
                            $i);

                        //Get GRN_File Object
                        $file_object
                            =& $file_table->getRow($item_data_file_list[$item_data_id][$item_data_file_id]['file']);
                        if ($file_object) {
                            //Add $_FILES Information
                            $_FILES[$item_key]
                                =& $file_object->getCurrentBody();
                        }
                        $i++;
                    }
                }
            }
        }
    }

    //Copy Files to  Session File
    require_once('report/controller_util.csp');
    $all_attached_file_list
        =& grn_report_get_attached_file_info('report/command_reuse');
    foreach (array_keys($all_attached_file_list) as $key) {
        $keys = explode('_', $key);
        $item_list_for_view[$keys[1]]['files'] = $all_attached_file_list[$key];
    }

    //Get Members
    require_once('report/member_manager.csp');
    $member_manager = GRN_Report_Member_Manager::getInstance();
    $members =& $member_manager->getList($report_id);
    $members_for_view = $member_logic->getDisplayUsersByUserIds($members,
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);

    //Get Notification
    require_once('report/notification_manager.csp');
    $notification_manager = GRN_Report_Notification_Manager::getInstance();
    $notification =& $notification_manager->getList($report_id);
    $notification_for_view
        = $member_logic->getDisplayUsersByUserIds($notification,
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);

    // Get Partners
    require_once('report/partner_manager.csp');
    $partner_manager = GRN_Report_Partner_Manager::getInstance();
    $partner_rows =& $partner_manager->getList($report_id);
    require_once('report/partner.csp');
    $partners = GRN_ReportPartnerData::createByRows($partner_rows);

    // Get Operators
    $operators
        = GRN_Report_Operator_Controller_Utility::getOperatorList($report_id);
    $operator_set = count($operators) ? 1 : 0;

    $properties_for_view = [];
    $properties_for_view['draft'] = $report['draft'];
    $properties_for_view['enable_member'] = $report['enable_member'];
    $properties_for_view['enable_partner'] = $report['enable_partner'];

    //Save Send Form Session (for Design)
    $session_send_form->set('report', $report);
    $session_send_form->set('form', $form_for_view);
    $session_send_form->set('item_list', $item_list_for_view);
    $session_send_form->set('properties', $properties_for_view);
    $session_send_form->set('notification', $notification_for_view);
    $session_send_form->set('members', $members_for_view);

    //generate upload ticket
    require_once('grn/upload.csp');
    $upload_ticket = GRN_UploadTicket::create($G_report_login_user->getOID());
    $session_send_form->set('upload_ticket', $upload_ticket);

    require_once('grn/file.csp');
    $config = GRN_FileManagerConfig::getInstance();
    $max_filesize = $config->getMaxFileSize();
    $session_send_form->set('max_filesize', $max_filesize);
} else {
    require_once('report/controller_util.csp');
    $item_data_util = GRN_Report_ItemData_Controller_Utility::getInstance();

    //Create Parameter Translation Map for Item Data
    $translation_map_item_data = [
        'idid'      => '_id',                  //Item Data ID
        'item'      => 'item',                 //Item ID
        'data_type' => 'data_type',            //Item Data Type
        'number'    => 'number',               //Item Number
        'text'      => 'text',                 //Item Text
    ];

    //Get Report
    $report_util = GRN_Report_Report_Controller_Utility::getInstance();
    $report = $report_util->getSimpleView($report_id);

    //Get Item Data List
    $item_data_list = $item_data_util->getListView($translation_map_item_data,
        $report_id);

    //Load Send Form Sesson (for Design)
    $report = $session_send_form->get('report');
    $form_for_view = $session_send_form->get('form');
    $item_list_for_view = $session_send_form->get('item_list');
    $properties_for_view = $session_send_form->get('properties');
    $members = $session_send_form->get('members');
    $notification = $session_send_form->get('notification');
    $partner_values = $session_send_form->get('partner_values');
    $operators = $session_send_form->get('operators');
    $operator_set = $session_send_form->get('operator_set');
    $upload_ticket = $session_send_form->get('upload_ticket');
    $max_filesize = $session_send_form->get('max_filesize');

    //Get Members
    $members_for_view = $member_logic->getDisplayUsersByUserIds($members,
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);

    //Get Notification
    $notification_for_view
        = $member_logic->getDisplayUsersByUserIds($notification,
        GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);

    //Get Partners for View
    require_once('report/partner.csp');
    $partners = GRN_ReportPartnerData::createByValues($partner_values);

    $t->assign('upload_ticket', @$G_INPUT['upload_ticket']);

    //remove unchecked files
    require_once('grn/upload.csp');
    GRN_UploadFile::removeUploadedFilesByFileIds(@$G_INPUT['upload_ticket'],
        @$G_INPUT['upload_fileids']);
}

$operators_for_view = $member_logic->getDisplayUsersByUserIds($operators,
    GRN_REPORT_APPLICATION_ID, $is_mobile, $is_include_deleted_users);

//Check Category Access Right
$category_id = $form_for_view['category'];
if (0 == strlen($category_id)) {
    $category_id = GRN_REPORT_CATEGORY_NONPARTY_ID;
}
if (GRN_REPORT_CATEGORY_NONPARTY_ID != $category_id) {
    require_once('report/controller_util.csp');
    $category_util = GRN_Report_Category_Controller_Utility::getInstance();
    $category_util->checkAccess($category_id, true, CB_DATABASE_NO_LOCK);
}
$candidate_operators = $members_for_view + $notification_for_view;
$t->assign('plugin', [
    'name'   => 'common',
    'params' => [
        'action'       => null,
        'session_name' => cb_get_pagename() . $tmp_key,
        'app_id'       => 'report'
    ]
]);

$t->assign('category_id', $category_id);

//Assign
$t->assign('report_id', $report_id);
$t->assign('form', $form_for_view);
$t->assign('item_list', $item_list_for_view);
$t->assign('properties', $properties_for_view);
$t->assign('private', $report['private']);
$t->assign('members', $members_for_view);
$t->assign('notification', $notification_for_view);
$t->assign('partners', $partners);
$t->assign('candidate_operators', $candidate_operators);
$t->assign('operators', $operators_for_view);
$t->assign('operator_open', $operator_set);
$t->assign('upload_ticket', $upload_ticket);
$t->assign('max_filesize', $max_filesize);

//-- set page title and site position

//page title
$page_title = grn_get_current_page_display_name();
$t->assign('page_title', $page_title);

$view_page = "report/view";
if ($report['draft']) {
    $view_page = "report/view_draft";
}

//site position
$t->assign('site_position', [
        [
            'page' => 'report/index',
            'name' => grn_get_page_display_name('report/index'),
            'sf'   => 1
        ],
        [
            'page' => $view_page,
            'name' => grn_get_page_display_name($view_page),
            'rid'  => $report_id
        ],
        ['page' => '', 'name' => $page_title]
    ]
);


