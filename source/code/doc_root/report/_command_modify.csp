<?php

global $G_INPUT;

//Get Parameter
$category_id = isset($G_INPUT['cid']) ? $G_INPUT['cid'] : null;
$form_id = isset($G_INPUT['fid']) ? $G_INPUT['fid'] : null;
$report_id = isset($G_INPUT['rid']) ? $G_INPUT['rid'] : null;
$command = isset($G_INPUT['cmd']) ? $G_INPUT['cmd'] : null;
$members = isset($G_INPUT['member_sUID']) ? $G_INPUT['member_sUID'] : [];
$notification = isset($G_INPUT['notification_sUID'])
    ? $G_INPUT['notification_sUID'] : [];
$partner_values = isset($G_INPUT['partner_sUID']) ? $G_INPUT['partner_sUID']
    : [];
$operator_set = isset($G_INPUT['operator-set']) ? $G_INPUT['operator-set']
    : null;
$private = isset($G_INPUT['private']) ? $G_INPUT['private'] : null;
$operators = $operator_set && isset($G_INPUT['sUID_o'])
    ? $G_INPUT['sUID_o'] : [];

if ( ! is_array($members)) {
    $members = [];
}
if ( ! is_array($notification)) {
    $notification = [];
}
if ( ! is_array($partner_values)) {
    $partner_values = [];
}

//Explode Member IDs
foreach ($members as $key => $value) {
    $uid_group = explode(':', $value);
    $members[$key] = $uid_group[0];
}
//Explode Notification IDs
foreach ($notification as $key => $value) {
    $uid_group = explode(':', $value);
    $notification[$key] = $uid_group[0];
}
//Explode Operator IDs
foreach ($operators as $key => $value) {
    $uid_group = explode(':', $value);
    $operators[$key] = $uid_group[0];
}

//Get Report
require_once('report/controller_util.csp');
$report_util = GRN_Report_Report_Controller_Utility::getInstance();
$report = $report_util->getSimpleView($report_id);

foreach ($notification as $nkey => $nid) {
    if (isset($report['creator']) && $nid == $report['creator']) {
        unset($notification[$nkey]);
    }
    foreach ($members as $mkey => $mid) {
        if ($nid == $mid) {
            unset($notification[$nkey]);
        }
    }
}

//Get Session Key
require_once('grn/controller.csp');
$tmp_key = grn_get_temporary_key();

//Get Session
require_once('fw/session_manager.csp');
$session_manager = CB_SessionManager::getInstance();
$session = $session_manager->getSession($session_name . $tmp_key);

//Update Form and Item List
$send_form_data_list = [];
require_once('report/item_resources.csp');
$form =& $session->get('form');
$item_list =& $session->get('item_list');
foreach (array_keys($item_list) as $item_id) {
    $item_util = grn_report_get_item_util($item_list[$item_id]['data_type']);
    if ($item_util) {
        //Parse Item Data
        $parsed_input_data = $item_util->parseItemData($G_INPUT,
            'item', $item_list[$item_id]);
        $send_form_data_list[$item_id] = $parsed_input_data;

        if ($item_list[$item_id]['type'] == 1) {
            $itemdata_util
                = GRN_Report_ItemData_Controller_Utility::getInstance();
            $form['subject'] = $itemdata_util->parse_title($parsed_input_data);
        }
    }
}

//Create Viewable List
$viewable_list = array_merge($members, $notification);
if (isset($report['creator'])) {
    $viewable_list[] = $report['creator'];
}

//Get Subscribe List
require_once('report/subscribe_manager.csp');
$subscribe_manager = GRN_Report_Subscribe_Manager::getInstance();
$subscribe_list = $subscribe_manager->getList($report_id);

//Delete Subscribe
require_once('report/subscribe_logic.csp');
$subscribe_logic = GRN_Report_Subscribe_Logic::getInstance();
foreach ($subscribe_list as $subscribe) {
    if ( ! in_array($subscribe['col_user'], $viewable_list)) {
        if ($private) {
            $subscribe_logic->delete($report_id, $subscribe['col_user']);
        } else {
            $subscribe_logic->delete($report_id, $subscribe['col_user'],
                GRN_REPORT_UNSUBSCRIBED);
        }
    }
}

//Create Report Property List
$property_list = [];
$property_list[GRN_REPORT_COLUMN_NAME] = $form['subject'];
$property_list[GRN_REPORT_COLUMN_PRIVATE] = $private;
$property_list[GRN_REPORT_COLUMN_CREATOR] = isset($report['creator'])
    ? $report['creator'] : null;

//Update Report
require_once('report/report_logic.csp');
$report_logic = GRN_Report_Report_Logic::getInstance();
$report_id = $report_logic->modify($report_id, $property_list);

//Update Item Data
require_once('report/itemdata_logic.csp');
$itemdata_logic = GRN_Report_ItemData_Logic::getInstance();
$property_list_for_updating = [
    GRN_REPORT_COLUMN_ITEM               => 'item',
    GRN_REPORT_COLUMN_DISPLAY_NAME       => 'display_name',
    GRN_REPORT_COLUMN_TYPE               => 'type',
    GRN_REPORT_COLUMN_OPTION_STRING      => 'option_string',
    GRN_REPORT_COLUMN_OPTION_STRING_TYPE => 'option_string_type',
    GRN_REPORT_COLUMN_DESCRIPTION        => 'description',
    GRN_REPORT_COLUMN_DESCRIPTION_TYPE   => 'description_type',
    GRN_REPORT_COLUMN_DESCRIPTION_EDITOR => 'description_editor',
    GRN_REPORT_COLUMN_DATA_TYPE          => 'data_type',
    GRN_REPORT_COLUMN_FORM               => 'form',
    GRN_REPORT_COLUMN_SETTINGS           => 'settings',
    GRN_REPORT_COLUMN_REQUIRED           => 'required',
    GRN_REPORT_COLUMN_LIST_INDEX         => 'list_index',
    GRN_REPORT_COLUMN_ITEM_DATA          => 'item_data',
    GRN_REPORT_COLUMN_NUMBER             => 'number',
    GRN_REPORT_COLUMN_TEXT               => 'text',
    GRN_REPORT_COLUMN_HTML               => 'html',
];

foreach ($item_list as $item_id => $item) {
    $itemdata_logic->modify($item_id, $report_id, $item_list[$item_id]['item'],
        $item_list[$item_id], true, $property_list_for_updating);
}

//Update Report Members
if ($report['enable_member'] && ( ! $members || count($members) == 0)) {
    require_once('report/error_code.csp');
    cb_throw_error(E_GRN_RPRT_REPORT_NOT_MEMBER);
}
require_once('report/controller_util.csp');
$member_util = GRN_Report_Member_Controller_Utility::getInstance();
$member_util->updateMembers($report_id, $members, $operators);

//Update Report Notification
require_once('report/controller_util.csp');
$notification_util = GRN_Report_Notification_Controller_Utility::getInstance();
$notification_util->updateNotification($report_id, $notification, $operators);

//Update Report Partners
require_once('report/partner.csp');
$partners = GRN_ReportPartnerData::createByValues($partner_values);
require_once('report/partner_logic.csp');
$partner_logic = GRN_Report_Partner_Logic::getInstance();
$partner_logic->update($report_id, $partners);

//Send Notification
$notification_list = $report_util->getNotificationList($report_id);
require_once('report/notification.csp');
$notification_logic = GRN_Report_Notification_Listener::getInstance();
$timestamp = new CB_TimeStampEx();
$notification_logic->sendList(GRN_REPORT_NOTIFY_MODIFY, $notification_list,
    $login_user, $report_id, $timestamp);

//Inspection
require_once('report/inspection.csp');
$inspection = GRN_Report_Report_Inspection::getInstance();
if ($inspection->isEnabled()) {
    $inspection_private = $inspection->setPrivate($private);

    $message_type = 'report_modify';
    $message_args = [];
    $message_args['rid'] = $report_id;
    $message_args['fid'] = $report['form'];
    $message_args['name'] = $report['form_name'];
    $message_args['subject'] = $form['subject'];
    $message_args['private'] = $inspection_private;
    $message_args['maintainer'] = $operators;

    //Record Inspection
    $inspection->record($message_type, $message_args);
}

require_once('grn/controller.csp');
require_once('fw/session_manager.csp');
$command_session = CB_SessionManager::getInstance()
                                    ->getSession(cb_get_pagename()
                                                 . grn_get_temporary_key());
$command_session->unset_by('use_original_files');
