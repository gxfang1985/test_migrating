<?php
require_once('grn/application.csp');
require_once('grn/file.csp');

function grn420_local_main()
{
    /****************************************
     *  prepend
     ****************************************/

    cb_export_log('Started grn420_local_main. ', false);

    /****************************************
     *  update the version number of profile data
     ****************************************/
    $version = '4.2.0';
    require_once('fw/profile.csp');
    $profile = cb_get_system_profile('grn.common.system');
    $temp = null;
    $profile->getAttribute('version', $temp);
    if ( ! $temp) {
        $profile->createAttribute('version', $version);
    } else {
        $profile->updateAttribute('version', $version);
    }

    cb_export_log('Updated the version number of system attribute: ' . $version,
        false);

    $grn_dir = cb_basedir() . '/grn';
    $dir = @opendir($grn_dir);

    while (($file = readdir($dir)) !== false) {
        if (preg_match('/^([0-9][0-9])(.*)\\.ini$/', $file, $regs)) {
            $module = $regs[2];
            $profile = cb_get_system_profile('grn.common.application');
            $profile->getAttribute($module, $info);
            if (array_key_exists('version', $info)) {
                $info['version'] = $version;
                unset($info['version']);
            }
            $profile->updateAttribute($module, $info);
        }
    }

    /****************************************
     *  update the version number of schema
     ****************************************/
    execSQL(
        cb_get_master_db(),
        "UPDATE `tab_cb_schema_version` SET `version`='5.9.700'",
        "Failed to update schema version",
        "Succeeded to update schema version"
    );

    /****************************************
     *  update other data and schema
     ****************************************/
    gtm_1600();
    gtm_1542();
    gtm_1636();
    grb_17213();
    gtm_1789();
    grb_16501();
    grb_13275();
    gtm_1638();
    gtm_1673();
    gtm_1685();
    gtm_1899();
    grb_17379();

    global $G_module_updater_after;
    $G_module_updater_after->requireUpdate('grn', $version);

    cb_export_log('Finished grn420_local_main. ', false);
}

function gtm_1600()
{
    $db = cb_get_master_db();
    $query
        = "INSERT INTO `tab_cb_profiledata___system` (`col_key`, `col_module`, `col_name`, `col_value`) "
          .
          "VALUES (0, 'grn.mail.system', 'deny_all_permission', 'b:1;')";
    execSQL(
        $db,
        $query,
        "Failed to update mail permission setting",
        "Succeeded to update mail permission setting"
    );
}

function gtm_1542()
{
    $db = cb_get_master_db();
    execSQL(
        $db,
        "TRUNCATE TABLE `tab_grn_ticket_user`",
        "Failed to delete data on tab_grn_ticket_user",
        "Succeeded to delete data on tab_grn_ticket_user"
    );
    execSQL(
        $db,
        "DROP INDEX `idx_ticket` ON `tab_grn_ticket_user`",
        "Failed to drop a index on tab_grn_ticket_user",
        "Succeeded to drop a index on tab_grn_ticket_user"
    );
    execSQL(
        $db,
        "ALTER TABLE `tab_grn_ticket_user` ADD PRIMARY KEY (`col_ticket`)",
        "Failed to add a index to tab_grn_ticket_user",
        "Succeeded to add a index to tab_grn_ticket_user"
    );

    $spaceDb = cb_get_app_db("space");
    execSQL(
        $spaceDb,
        "ALTER TABLE `tab_grn_space_todo_user` ADD COLUMN `_id` bigint(20) PRIMARY KEY AUTO_INCREMENT FIRST",
        "Failed to add a column to tab_grn_space_todo_user",
        "Succeeded to add a column to tab_grn_space_todo_user"
    );
}

function gtm_1636()
{
    $db = cb_get_master_db();
    execSQL(
        $db,
        "INSERT INTO `tab_cb_profiledata___system` (`col_key`, `col_module`, `col_name`, `col_value`) VALUES (0, 'grn.fts', 'schema_version', 'i:1;')",
        "Failed to update fts version",
        "Succeeded to update fts version"
    );
}

function grb_17213()
{
    $db = cb_get_master_db();
    execSQL(
        $db,
        "DELETE FROM tab_cb_profiledata___system WHERE col_module = 'grn.common.notification.system' AND col_name = 'notify.last_update_timestamp'",
        "Failed to delete old settings for notification (system)",
        "Succeeded to delete old settings for notification (system)"
    );

    require_once("fw/profile.csp");
    $profileConnections = get_profile_get_connections();
    $user_tables = cb_get_user_tables();
    foreach ($profileConnections as $eachConnection) {
        for ($table_num = 0; $table_num < $user_tables; $table_num++) {
            $query = "DELETE FROM tab_cb_profiledata___p" . $table_num . " " .
                     "WHERE col_module = 'grn.common.notification.personal' AND col_name = 'notify.last_update_timestamp'";

            if ($eachConnection->query($query) === false) {
                cb_export_log("Failed to delete old settings for notification (personal)",
                    true);
                $eachConnection->throwServerError($query);
            }
        }
    }
    cb_export_log("Succeeded to delete old settings for notification (personal)");

}

function gtm_1789()
{
    $db = cb_get_master_db();
    $query = "DELETE FROM `tab_grn_authentication_login_authenticate` " .
             "WHERE `col_driver_type` IN ('grn.common.authentication.authenticate.reminder', 'grn.common.authentication.login.reminder')";
    execSQL(
        $db,
        $query,
        "Failed to delete data of reminder",
        "Succeeded to delete data of reminder"
    );
}

function grb_16501()
{
    require_once("fw/profile.csp");
    $profileConnections = get_profile_get_connections();
    $user_tables = cb_get_user_tables();
    foreach ($profileConnections as $eachConnection) {
        for ($table_num = 0; $table_num < $user_tables; $table_num++) {
            $query = "DELETE FROM tab_cb_profiledata___p" . $table_num . " " .
                     "WHERE `col_name` LIKE 'grn.common.startcomheader.%' " .
                     "OR `col_name` = 'apps_user_allow' " .
                     "OR `col_name` IN ('grn.common.appmenu.zh','grn.common.appmenu.en','grn.common.appmenu.ja')";

            if ($eachConnection->query($query) === false) {
                cb_export_log("Failed to delete data of application users",
                    true);
                $eachConnection->throwServerError($query);
            }
        }
    }
    cb_export_log("Succeeded to delete data of application users");
}

function grb_13275()
{
    $db = cb_get_app_db("report");
    execSQL(
        $db,
        "ALTER TABLE `tab_grn_report_reportschedulerelations` MODIFY `col_schedule` bigint(20) NOT NULL",
        "Failed to modify tab_grn_report_reportschedulerelations",
        "Succeeded to modify tab_grn_report_reportschedulerelations"
    );
}

function gtm_1638()
{
    $db = cb_get_app_db("schedule");

    $query
        = <<< SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_event_attendance_status` (
  `col_event` BIGINT(20) NOT NULL,
  `col_user` BIGINT(20) NOT NULL,
  `col_status` TINYINT(1) NOT NULL,
  `col_ctime` INT(11) NOT NULL,
  `col_message` TEXT,
  PRIMARY KEY (`col_event`,`col_user`),
  KEY `idx_event_status` (`col_event`,`col_status`),
  KEY `idx_user_status` (`col_user`,`col_status`),
  CONSTRAINT `cns_schedule_event_attendance_status_event` FOREIGN KEY (`col_event`) REFERENCES `tab_grn_schedule_event` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_schedule_event_attendance_status_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;
    execSQL(
        $db,
        $query,
        "Failed to create tab_grn_schedule_event_attendance_status",
        "Succeeded to create tab_grn_schedule_event_attendance_status"
    );

    $query
        = <<< SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_attendance_list_access_time` (
  `col_event` bigint(20) NOT NULL,
  `col_timestamp` int(11) NOT NULL,
  PRIMARY KEY (`col_event`),
  CONSTRAINT `cns_tab_grn_schedule_attendance_list_access_time` FOREIGN KEY (`col_event`) REFERENCES `tab_grn_schedule_event` (`_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;
    execSQL(
        $db,
        $query,
        "Failed to create tab_grn_schedule_attendance_list_access_time",
        "Succeeded to create tab_grn_schedule_attendance_list_access_time"
    );
}

function gtm_1673()
{
    $db = cb_get_app_db("schedule");

    $query
        = <<< SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_event_facility_approval` (
  `_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `col_event` bigint(20) NOT NULL,
  `col_facility` bigint(20),
  `col_facility_name` char(100)  NOT NULL,
  `col_start_datetime` int(11) NOT NULL,
  `col_end_datetime` int(11) NOT NULL,
  `col_using` tinyint(1) NOT NULL,
  `col_status` tinyint(1) NOT NULL,
  `col_approval_time` int(11) NOT NULL,
  `col_comment` text,
  `col_user` bigint(20),
  `col_user_name` char(100) NOT NULL,
  PRIMARY KEY (`_id`),
  CONSTRAINT `cns_schedule_event_facility_approval_event` FOREIGN KEY (`col_event`) REFERENCES `tab_grn_schedule_event` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_schedule_event_facility_approval_facility` FOREIGN KEY (`col_facility`) REFERENCES `tab_grn_facility_facility` (`_id`) ON DELETE SET NULL,
  CONSTRAINT `cns_schedule_event_facility_approval_user` FOREIGN KEY (`col_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;
    execSQL(
        $db,
        $query,
        "Failed to create tab_grn_schedule_event_facility_approval",
        "Succeeded to create tab_grn_schedule_event_facility_approval"
    );

    $query
        = <<< SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_event_facility_approval_using_purpose` (
  `col_event` bigint(20) NOT NULL,
  `col_using_purpose` text,
  PRIMARY KEY (`col_event`),
  CONSTRAINT `cns_schedule_event_facility_approval_using_purpose_event` FOREIGN KEY (`col_event`) REFERENCES `tab_grn_schedule_event` (`_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;
    execSQL(
        $db,
        $query,
        "Failed to create tab_grn_schedule_event_facility_approval_using_purpose",
        "Succeeded to create tab_grn_schedule_event_facility_approval_using_purpose"
    );

    $query
        = <<< SQL
CREATE TABLE IF NOT EXISTS `tab_grn_schedule_event_facility_approval_applying` (
  `col_event` bigint(20) NOT NULL,
  `col_facility` bigint(20) NOT NULL,
  `col_applying_user` bigint(20),
  `col_applying_user_name` char(100) NOT NULL,
  `col_applying_time` int(11) NOT NULL,
  PRIMARY KEY (`col_event`, `col_facility`),
  CONSTRAINT `cns_schedule_event_facility_approval_applying_event` FOREIGN KEY (`col_event`) REFERENCES `tab_grn_schedule_event` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_schedule_event_facility_approval_applying_facility` FOREIGN KEY (`col_facility`) REFERENCES `tab_grn_facility_facility` (`_id`) ON DELETE CASCADE,
  CONSTRAINT `cns_schedule_event_facility_approval_applying_applying_user` FOREIGN KEY (`col_applying_user`) REFERENCES `tab_cb_user` (`_id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
SQL;
    execSQL(
        $db,
        $query,
        "Failed to create tab_grn_schedule_event_facility_approval_applying",
        "Succeeded to create tab_grn_schedule_event_facility_approval_applying"
    );
}

function gtm_1685()
{
    $db = cb_get_app_db("schedule");

    execSQL(
        $db,
        "ALTER TABLE tab_grn_facility_facility ADD COLUMN col_settings_mtime INT DEFAULT NULL AFTER col_settings",
        "Failed to add a column to tab_grn_facility_facility",
        "Succeeded to add a column to tab_grn_facility_facility"
    );
    execSQL(
        $db,
        "ALTER TABLE tab_grn_facility_facilitygroup ADD COLUMN col_settings_mtime INT DEFAULT NULL AFTER col_settings",
        "Failed to add a column to tab_grn_facility_facilitygroup",
        "Succeeded to add a column to tab_grn_facility_facilitygroup"
    );
    execSQL(
        $db,
        "UPDATE tab_grn_facility_facility SET col_settings_mtime = UNIX_TIMESTAMP()",
        "Failed to update default value on tab_grn_facility_facility",
        "Succeeded to update default value on tab_grn_facility_facility"
    );
    execSQL(
        $db,
        "UPDATE tab_grn_facility_facilitygroup SET col_settings_mtime = UNIX_TIMESTAMP()",
        "Failed to update default value on tab_grn_facility_facilitygroup",
        "Succeeded to update default value on tab_grn_facility_facilitygroup"
    );
}

function gtm_1899()
{
    require_once("fw/profile.csp");
    $profileConnections = get_profile_get_connections();
    $user_tables = cb_get_user_tables();

    $newValues = [
        'forward_email'       => false,
        'forward_user_email'  => false,
        'other_email_address' => "",
    ];

    foreach ($profileConnections as $eachConnection) {
        for ($table_num = 0; $table_num < $user_tables; $table_num++) {
            $selectQuery
                = "SELECT _id, col_value, col_name FROM tab_cb_profiledata___p"
                  . $table_num . " " .
                  "WHERE `col_module` = 'grn.phonemessage' " .
                  "AND `col_name` IN ('forward_email', 'forward_user_email', 'other_email_address')";

            $ret = $eachConnection->query($selectQuery);
            if ($ret === false) {
                cb_export_log("Failed to update invalid profile data (personal)",
                    true);
                $eachConnection->throwServerError($selectQuery);
            }

            $updateIds = [];
            while ($row = $eachConnection->fetch_assoc($ret)) {
                $value = $row['col_value'];
                // Note that 'b:0;' will be serialized to FALSE
                if ($value !== 'b:0;' && @unserialize($value) === false) {
                    $name = $row['col_name'];
                    if ( ! array_key_exists($name, $updateIds)) {
                        $updateIds[$name] = [];
                    }
                    $updateIds[$name][] = $row['_id'];
                }
            }
            $eachConnection->free_result($ret);

            if (empty($updateIds)) {
                continue;
            }

            foreach ($updateIds as $name => $ids) {
                $updateQuery = $eachConnection->format(
                    "UPDATE tab_cb_profiledata___p" . $table_num
                    . " SET col_value = '@S' WHERE _id IN (@A)",
                    [serialize($newValues[$name]), $ids]
                );
                if ($eachConnection->query($updateQuery) === false) {
                    cb_export_log("Failed to update invalid profile data (personal)",
                        true);
                    $eachConnection->throwServerError($updateQuery);
                }
            }
        }
    }
    cb_export_log("Succeeded to update invalid profile data (personal)");
}

function grb_17379()
{
    $db = cb_get_master_db();

    $selectQuery
        = "SELECT _id, col_value, col_name FROM tab_cb_profiledata___system "
          . "WHERE col_module = 'grn.dezielink.system' AND col_name IN ('creation_info', 'modification_info')";

    $ret = $db->query($selectQuery);
    if ($ret === false) {
        cb_export_log("Failed to update profile data for dezielink", true);
        $db->throwServerError($selectQuery);
    }

    while ($row = $db->fetch_assoc($ret)) {
        $value = $row['col_value'];
        if (stripos($value, 'O:12:"DateTimeZone":0:{}') !== false) {
            $value = str_ireplace('O:12:"DateTimeZone":0:{}', "N;", $value);
        }

        $info = unserialize($value);
        if ( ! is_array($info)) {
            continue;
        }

        $timeKey = $row['col_name'] === "creation_info" ? "ctime" : "mtime";
        $time = cb_at($info, $timeKey, null);

        if ($time instanceof CB_TimeStampEx) {
            /** @var CB_TimeStampEx $time */
            $info[$timeKey] = $time->unix_ts;
        }

        $updateQuery = $db->format(
            "UPDATE tab_cb_profiledata___system SET col_value = '@S' WHERE _id = '@S'",
            [serialize($info), $row['_id']]
        );
        if ($db->query($updateQuery) === false) {
            cb_export_log("Failed to update profile data for dezielink", true);
            $db->throwServerError($selectQuery);
        }
    }

    $db->free_result($ret);
    cb_export_log("Succeeded to update profile data for dezielink");
}

grn420_local_main();

