<?php
declare(strict_types=1);

function grn490_remote_main()
{
    //////////////////////////////
    // resource update
    //////////////////////////////
    cb_export_log('Started ' . __FUNCTION__ . '. ', false);

    // Start common.ini file
    global $G_config_common;
    cb_export_log("Start update common.ini.", false);

    cb_export_log("Start set API section.", false);
    $G_config_common->set('API', 'version', '1.12.0');
    cb_export_log("End set API section.", false);

    $G_config_common->save();
    cb_export_log("End update common.ini.", false);
    // End common.ini file

    // Start garoon.ini file
    global $G_config_grn;

    if ( ! defined('USE_INSTALLED_MYSQL')) {
        $is_win = (strncasecmp(php_uname('s'), 'WIN', 3) == 0);
        $new_line = "\n";
        if ($is_win) {
            $new_line = "\r\n";
        }

        cb_export_log('Start update my.ini.', false);
        $mysqli_default_socket = ini_get('mysqli.default_socket');
        $mysql_dir = dirname(dirname($mysqli_default_socket));
        $mysql_etc_dir = $mysql_dir . '/etc';
        $my_ini = $mysql_etc_dir . '/my.ini';
        $data = file_get_contents($my_ini);

        if ($data !== false) {
            cb_export_log('Start update sql_mode.', false);
            $data = str_replace('[mysqld]',
                '[mysqld]' . $new_line . 'sql_mode = NO_ENGINE_SUBSTITUTION',
                $data);
            cb_export_log("End update sql_mode.", false);

            cb_export_log('Start remove mysqlhotcopy.', false);
            $data = str_replace('[mysqlhotcopy]', '', $data);
            $data = str_replace('interactive-timeout', '', $data);
            cb_export_log("End remove mysqlhotcopy.", false);

            cb_export_log('Start removing query cache settings.', false);
            $data = str_replace('# enable query cache', '', $data);
            $data = preg_replace('/^.*(?:query_cache_).*$(?:\\r\\n|\\n)?/m', '',
                $data);
            cb_export_log('End remove query cache settings.', false);

            cb_export_log('Start update optimizer_switch.', false);
            $data = str_replace('[mysqld]', '[mysqld]' . $new_line
                                            . 'optimizer_switch = condition_fanout_filter=off',
                $data);
            cb_export_log("End update optimizer_switch.", false);

            if ( ! $is_win) {
                cb_export_log('Start update innodb_numa_interleave.', false);
                $data = str_replace('[mysqld]',
                    '[mysqld]' . $new_line . 'innodb_numa_interleave = ON',
                    $data);
                cb_export_log("End update innodb_numa_interleave.", false);
            }

            cb_export_log('Start update innodb_online_alter_log_max_size.',
                false);
            $data = str_replace('[mysqld]', '[mysqld]' . $new_line
                                            . 'innodb_online_alter_log_max_size = 1G',
                $data);
            cb_export_log("End update innodb_online_alter_log_max_size.",
                false);

            //Setting my.ini
            cb_export_log("Start removing innodb_data_file_path.", false);
            $data
                = preg_replace("/innodb_data_file_path\\s*=\\s*ibdata1:10M:autoextend.*/",
                "", $data);
            if (strpos($data, "innodb_data_file_path")) {
                cb_export_log("Because value of innodb_data_file_path is not ibdata1:10M:autoextend, so do not remove its value.",
                    false);
            }
            cb_export_log("End remove innodb_data_file_path.", false);

            cb_export_log("Start removing innodb_log_buffer_size.", false);
            $data = preg_replace("/innodb_log_buffer_size\\s*=\\s*8M.*/", "",
                $data);
            if (strpos($data, "innodb_log_buffer_size")) {
                cb_export_log("Because value of innodb_log_buffer_size is not 8M, so do not remove its value.",
                    false);
            }
            cb_export_log("End remove innodb_log_buffer_size.", false);

            cb_export_log('Start replacing log-warnings by log_error_verbosity.',
                false);
            $log_error_verbosity = 3;
            $matches = [];
            $search_pattern = '/log-warnings(\\s*=\\s*(\\d+))*/';
            if (preg_match($search_pattern, $data, $matches)) {
                $log_warnings_value = $matches[2] ?? false;
                if ($log_warnings_value !== false) {
                    if ($log_warnings_value == 0 || $log_warnings_value == 1) {
                        $log_error_verbosity = (int)$log_warnings_value + 1;
                    }
                }
            }
            $data = preg_replace('/log-warnings.*/',
                "log_error_verbosity = $log_error_verbosity" . $new_line,
                $data);
            cb_export_log('End replace the log-warnings settings.', false);

            $fp = fopen($my_ini, 'w');
            if ( ! $fp) {
                cb_export_log('Can not update my.ini file.', true);
            } else {
                fwrite($fp, $data);
                fclose($fp);
            }
            unset($data);
        } else {
            cb_export_log('Can not read my.ini file.', true);
        }

        cb_export_log('End update my.ini.', false);
    }

    // Start garoon.ini file
    cb_export_log("Start update garoon.ini.", false);

    $version = '4.9.0';
    cb_export_log("Start set System version.", false);
    $G_config_grn->set('System', 'version', $version);
    cb_export_log("End set System version.", false);

    $G_config_grn->save();
    cb_export_log("End update garoon.ini.", false);
    // End garoon.ini file

    // Start applications ini file
    $grn_ini_dir = cb_basedir() . '/grn/';
    cb_export_log("Start update 11space.ini.", false);
    $space_ini = $grn_ini_dir . '11space.ini';
    write_ini_item($space_ini, 'version', $version);
    cb_export_log("End update 11space.ini.", false);

    cb_export_log('Finished ' . __FUNCTION__ . '. ', false);
    // End applications ini file
}

grn490_remote_main();
