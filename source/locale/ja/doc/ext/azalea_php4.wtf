[[概要|section:abstract]]

本文書ではアゼリア上での PHP 開発における諸注意事項を解説する。
そもそも、アゼリアで使用している PHP はオリジナルのものにサイボウズ独自のパッチを当てたものであるため、
オリジナル PHP の仕様と喰い違う点が多々存在する。

[[アゼリア版PHP4とは|section:hack]]

アゼリアで使用している PHP は、オリジナルの PHP にサイボウズ製品の協力な売りである
「簡単インストール」を実現するため以下の変更を施したものである。

オリジナルの PHP では実行するスクリプトに統一した ''.php'' などの拡張子を与え、
該当する拡張子を持つファイルへのアクセスを PHP 実行エンジン（''php.exe''）に行わせるよう、
**ウェブサーバーの設定**で指定する。

ウェブサーバーの設定方法が Apache や IIS などで異なることなどから、
このままの仕様では簡単インストールを実現できない。
そこで、現行製品と同様に PHP 実行エンジンを CGI プログラムとして直接ブラウザからアクセスすることにした。

具体的には、以下のように ''php.exe''（ファイル名は変更可能）の後に "''/foo''" と続けて指定すると、
PHP 実行エンジンは php.ini 中の ''doc_root'' で指定されたディレクトリに配置されている同名のファイルに拡張子
''.csp'' を付けたものを実行する。

[[src]]
http://xxx.co.jp/scripts/cbfw/php.exe**/foo**
                                     ↑
                 CGI には "PATH_INFO" 環境変数として渡される
[[/src]]

現行製品ではダウンロード時に日本語ファイル名などを指定する目的で、
''PATH_INFO'' を使用している。
同様の動作を実現するため、サイボウズ版 PHP では ''PATH_INFO'' に "''/-/''" が出現すると、
それ以降はスクリプトファイル名として扱わない。
以下の場合、実行されるのは ''bulletin/download.csp'' スクリプトとなる。

[[src]]
http://xxx.co.jp/scripts/cbfw/php.exe/**bulletin/download**''/-/''データ.csv
[[/src]]

**ただし、cb_pageurl() 関数等にページ名として "download/-/hoge.txt" のような指定をしてはならない。**
[[az:fw.core:include/fw/prepend.csp:cb_pageurl]] 等の URL 生成関数は第四引数にてページ名の後ろに
"/-/" を介して繋げる文字列を受け取るようになっているので、
以下のように呼び出すこと。
[[doc:dev/api/upload_download]]の項目でより詳細に解説している。

[[src]]
    cb_pageurl( 'download', null, null, 'hoge.txt' );
[[/src]]

また、特にファイル名を指定しない場合には ''index.csp'' ファイルを実行する。
つまり以下の 3 つの URL は全く同じ挙動を示す。

[[src]]
http://xxx.co.jp/scripts/cbfw/php.exe
http://xxx.co.jp/scripts/cbfw/php.exe**/**
http://xxx.co.jp/scripts/cbfw/php.exe**/index**
[[/src]]

これらの変更の結果、PHP実行エンジンを製品ごとに別ディレクトリに配置可能となった。
オリジナルの PHP ではウェブサーバーごとに一つの PHP 実行エンジンとなるため、
使用する PHP のバージョンが異なる製品が共存できない問題があった。

その他オリジナル PHP に含まれる不都合を解消するため軽微な修正が加えられている。
現在は以下に示す項目が含まれる。

*SJIS などで日本語のファイル名がアップロードされた場合、
オリジナルの PHP では日本語文字の 2 バイト目に出現する
"\" (0x5C) をディレクトリの区切りと誤認識して切ってしまう。
サイボウズ版ではディレクトリ区切りの処理をスキップするように変更した。
代わりに、リクエスト初期化中に ''fw/prepend.csp''
で適切にファイル名を変換し切り出している。
*mbstring モジュールが Windows 版ではダイナミックリンクモジュールとなるところを、
UNIX 版の使用と合わせスタティックリンク可能に変更している。
*COM の初期化等、Windows 側特有の処理で遅くなっているところを省くなどの性能改善を行っている。

[[アゼリア版 PHP4 のリクエスト・レスポンス|section:modules]]

標準的な PHP では''$_POST'' や ''$_GET'' といった大域変数を使用して、
フォームパラメータやURLパラメータにアクセスするが、アゼリアではこれらの変数を敢えて未定義とし、
別のアクセス手段を設けている。

[[単純な遷移|head:]]

''hello.csp'' と同様に、以下の内容のスクリプトを ''color.csp'' という名前で作成し、
''C:\Inetpub\Scripts\cbfw\code\doc_root'' ディレクトリに保存せよ。

[[src]]
<html>
<body>

<?php
$color = 'black';
if ( array_key_exists('color', $G_INPUT) )
{
    $color = **htmlspecialchars($G_INPUT['color']);**
}
?>

<form method="get" action="<?php echo cb_pageurl('color');?>">

<p>
色名 <input type="text" name="color" value="**<?php echo $color;?>**">
</p>

<p>
<font color="<?php echo $color;?>">色々な色</font>
</p>

<input type="submit" name="ok" value="submit">
</form>
[[/src]]

まず、''$G_INPUT'' という PHP の大域変数から "''color''" パラメータを抽出している。
指定がない場合は黒（black）であり、
指定されている場合は Cross Site Scripting (XSS) 攻撃を防止するために文字列を
[[php:htmlspecialchars]] 関数でエスケープしている。

''コラム'': 文字列のエスケープ

ウェブアプリケーションの開発で良くあるミスに、
URLエンコードと HTML の文字列エスケープの混同がある。
PHP のマニュアルにまとまった
[[解説|http://www.php.net/manual/ja/faq.html.php#faq.html.encoding]] があるので、
一読をお奨めする。 

試みに ''color.csp'' で "black%white" という文字列を入力し、
ブラウザのアドレス覧に表示される URL と HTML のソースを確認してみよ。
その後 ''color.csp'' 中の [[php:htmlspecialchars]] を
[[php:urlencode]] 関数にしてみると何が起こるか。 

まとめると、(1) HTMLに埋め込む値は [[php:htmlspecialchars]] 関数でエスケープする、
(2) URLを作成する場合は各要素を [[php:urlencode]] 関数でエスケープし、
全体を [[php:htmlentities]] でエスケープする。 

**UIフレームワークで吸収するべき項目の一つ。**

フォームの飛び先（''action''）は、自分自身（''color.csp''）を指す URL を
[[az:fw.core:include/fw/prepend.csp:cb_pageurl]] 関数で生成している。
[[az:fw.core:include/fw/prepend.csp:cb_pageurl]] はフレームワークの標準関数で、
''doc_root'' ディレクトリに配置してある PHP スクリプトの URL を生成する。
サイボウズ版 PHP と標準 PHP との互換性を確保するため、
この関数以外の手段で URL を生成してはならない。 

[[リダイレクションを伴う遷移|head:]]

POST メソッドを使用するデータ量の大きなリクエストなどでは、
POST 先ではパラメータの処理を行い、
その後画面表示用のスクリプトにリダイレクトするのがウェブアプリケーションでは一般的な動作である。 

以下のスクリプトをそれぞれ ''register.csp''、
''command_register.csp'' として ''doc_root'' ディレクトリに保存せよ。 

''register.csp''

[[src]]
<html>
<body>

<?php
if ( ! array_key_exists( 'done', $G_INPUT ) ) {
?>

<b>登録画面</b>

<form method="post" action="<?php echo cb_pageurl('command_register');?>">
 名前: <input type="text" name="name" size="40"><br>
 <input type="submit" name="ok" value="登録">
</form>

<?php
} else {
?>

<b>登録完了!</b>

<?php
}
?>
[[/src]]

''command_register.csp''

[[src]]
<?php
// do something...
**cb_redirect( 'register', array( 'done' => 1 ) );**
?>
[[/src]]

リダイレクションは HTTP レベルにおいては "''Location:''"
ヘッダを出力することによって行われている。
だが、アゼリアを使用する上では ''command_register.csp'' にあるように
[[az:fw.core:include/fw/prepend.csp:cb_redirect]] 関数を必ず使用すること。
エラー発生時にエラーメッセージを表示するためリダイレクトを行わないとか、
文字列を適切なエンコーディングで変換してくれるといったフレームワーク内部処理と連動しているからである。

[[アゼリア標準の PHP モジュール|section:modules]]

PHP には各種のデータベースコネクティビティモジュールを始めとして、
実に多種多様な機能モジュールが存在する。
アゼリアではそのうち下記のモジュールを標準として組み込んだ PHP を提供している。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>モジュール名</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>必須モジュール</td>
<td>
外すことのできないモジュールは当然全て組み込まれている。
</td>
</tr>
<tr>
<td nowrap>mysql</td>
<td>
MySQL データベースに接続するモジュール。
</td>
</tr>
<tr>
<td nowrap>zlib</td>
<td>
gzip 形式の圧縮と展開を行うモジュール。
</td>
</tr>
<tr>
<td nowrap>ctype</td>
<td>
文字のクラス(大小や制御文字、空白など)を調べるモジュール。
PHP 標準であるため削らなかった。
</td>
</tr>
<tr>
<td nowrap>ftp</td>
<td>
FTP サーバーに接続するモジュール。PHP 標準であるため削らなかった。
</td>
</tr>
<tr>
<td nowrap>mbstring</td>
<td>
マルチバイト対応モジュール。
</td>
</tr>
<tr>
<td nowrap>mbregex</td>
<td>
マルチバイト対応正規表現関数を提供するモジュール。
内部文字コードが UTF-8 や EUC-JP である場合、
通常の正規表現関数を使用しても大きな問題は起きないと思われる。
</td>
</tr>
<tr>
<td nowrap>overload</td>
<td>
クラスのオーバーロード機構を提供するモジュール。
永続化クラスの実装に使用されている。
</td>
</tr>
<tr>
<td nowrap>pcre-regex</td>
<td>
Perl 互換の正規表現ライブラリ。PEAR を使用するためには必須。
</td>
</tr>
<tr>
<td nowrap>session</td>
<td>
セッション管理モジュール。
</td>
</tr>
<tr>
<td nowrap>tokenizer</td>
<td>
PHP のスクリプトパーザーにスクリプトからアクセスするモジュール。
PHP 標準なので削らなかった。
</td>
</tr>
<tr>
<td nowrap>wddx</td>
<td>
XML で表現するプラットフォームおよび言語に依存しないデータ表現モジュール。
PHP 標準なので削らなかったが、
例えば JavaScript と PHP の間で連想配列を相互にやりとりする場合などに有用である可能性がある。
[[OpenWDDX|http://openwddx.org/]]にて、
JavaScript など各種言語用ライブラリが公開されている。
</td>
</tr>
<tr>
<td nowrap>xml</td>
<td>
expat という古典的なパーザーを使用した XML パーザーモジュール。
PEAR 等を使用するために必須。valication 機能を備えないため、高度なことはできない。
</td>
</tr>
<tr>
<td nowrap>sockets</td>
<td>
PHP スクリプトからソケット通信を行うモジュール。
</td>
</tr>
<tr>
<td nowrap>ODBC</td>
<td>
**Windowsのみ。** ODBC ドライバモジュール。
</td>
</tr>
</table>
[[/html]]

上記以外のモジュールは、ダイナミックリンクライブラリとして別に提供する予定である。
使用したいモジュールがある場合はフレームワークプロジェクトに要請すること。

[[アゼリア付属の PEAR|section:pear]]

アゼリアでは ''doc_root'' 以下の ''pear'' ディレクトリに、
アプリケーションで実行する PEAR モジュールを配置している。
PEAR の基本については[[doc:general/components/php#pear]]を参照のこと。

これに加えて、PHP 開発キットが常駐プログラム置場にインストールされる。
デフォルトの設定でインストールした場合は、
Windows なら ''C:\Program Files\Cybozu\php-4.3''、
UNIX なら ''/usr/local/cybozu/php-4.3''
ディレクトリ以下に配置される。

PHP SDK に含まれる ''pear'' コマンドを使用することで、
PEAR の公式サイト（[[pear.php.net|http://pear.php.net/]]）
から自由にパッケージをダウンロード・インストールすることができる。
例えば ''HTML_Common'' パッケージをインストールしたければ以下のように実行する。

[[src]]
&gt; /usr/local/cybozu/php-4.3/bin/pear install HTML_Common
downloading HTML_Common-1.2.1.tgz ...
...done: 3,637 bytes
install ok: HTML_Common 1.2.1
[[/src]]

取得したパッケージは ''/usr/local/cybozu/php-4.3/lib/php''
ディレクトリ以下に配置される。
これを CGI ディレクトリにコピーするなどすれば、
新規に取得した PEAR パッケージを手元で試すことが可能となる。
''HTML_Common'' パッケージは ''HTML'' サブディレクトリの下に配置されている。

[[src]]
> ls -F /usr/local/cybozu/php-4.3/lib/php
Archive/  Date/     HTTP.php  OS/             SOAP/       data/
Auth/     Date.php  Mail/     PEAR/           System.php  doc/
Console/  **HTML/**     Mail.php  PEAR.php        XML/        extensions/
DB/       HTTP/     Net/      PhpDocumentor/  build/      pearcmd.php
> ls -F /usr/local/cybozu/php-4.3/lib/php/HTML
**Common.php**
[[/src]]

[[内蔵機能と設定ファイル|section:php.ini]]

PHP は豊富な機能を内蔵している。
これらの機能をアゼリアではどのように設定して使用しているかを解説する。
なお、ほとんどの設定は PHP の設定ファイル ''php.ini'' にて行われている。

*[[リソース制限|#resource]]
*[[タグ形式|#tag]]
*[[アウトプットバッファリング|#ob]]
*[[マルチバイト対応（mbstring）|#mbstring]]
*[[セッション|#session]]
*[[MySQL|#mysql]]
*[[動的拡張機能|#dl]]

[[リソース制限|head:resource]]

PHP にはスクリプトの最大実行時間やアップロードファイルの最大サイズなどを制限する機能がある。
以下の表にそれらの項目とアゼリアでの設定値を示す。
これらは ''php.ini'' にて指定されている。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>設定名</th><th nowrap>設定値</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>max_execution_time</td>
<td nowrap align="right">0</td>
<td>
スクリプトの最大実行時間を秒単位で指定する。
0 であれば無制限。ただし、ウェブサーバーが CGI プロセスをキルすることは回避できない。
</td>
</tr>
<tr>
<td nowrap>max_input_time</td>
<td nowrap align="right">600</td>
<td>
ファイルアップロード時の読み込み最大時間を秒単位で指定する。
この時間を超えるとファイルアップロードに失敗し、スクリプトは強制終了する。
</td>
</tr>
<tr>
<td nowrap>memory_limit</td>
<td nowrap align="right">200M</td>
<td>
メモリの最大使用量を制限する。
200M であれば、一つの PHP プロセスが使用できる最大メモリ量は 200MB となる。
</td>
</tr>
<tr>
<td nowrap>post_max_size</td>
<td nowrap align="right">200M</td>
<td>
POST 時の最大入力データサイズを制限する。200M であれば、200MB 以内となる。
</td>
</tr>
<tr>
<td nowrap>upload_max_filesize</td>
<td nowrap align="right">100M</td>
<td>
アップロードファイルの最大サイズを制限する。100M であれば 100MB 以内となる。
</td>
</tr>
<tr>
<td nowrap>default_socket_timeout</td>
<td nowrap align="right">60</td>
<td>
ソケット関連の最大待ち時間を秒単位で指定する。
</td>
</tr>
<tr>
<td nowrap>session.gc_maxlifetime</td>
<td nowrap align="right">72000</td>
<td>
セッションデータの最大保持時間を秒単位で指定する。
セッションにはログイン情報などが記録されるため、72000 であれば 20 時間放置すると、
自動的にログアウトすることになる。
**この設定は無制限にするべきではない。ブラウザを閉じたりすると、セッションデータが残りっぱなしとなりディスク容量を圧迫していくため。**
</td>
</tr>
</table>
[[/html]]

[[タグ形式|head:tag]]

PHP は通常 HTML 文書中に特殊なタグを埋め込み記述する。
タグの形式には以下の 3 方式があるが、アゼリアでは正規形式を除き、php.ini で無効としている。
これはコーディング形式の統一と、非互換性を産まないよう配慮しているためである。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>形式名</th><th nowrap>タグ形式</th><th nowrap>設定名</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>正規形式</td>
<td nowrap>''&lt;?php'' ... ''?&gt;''</td>
<td nowrap>&nbsp;</td>
<td>
常に使用可能。
SGML 的にはプロセッシング命令となり、
整形式（Well-formed）な XML 文書中に埋め込んでも、整形式を維持できる。
</td>
</tr>
<tr>
<td nowrap>省略形式</td>
<td><nobr>''&lt;?'' ... ''?&gt;'' または </nobr><nobr>''&lt;?='' ... ''?&gt;''</nobr></td>
<td nowrap>short_open_tag</td>
<td>
前者は &lt;?php ... ?&gt; と同じ。後者は &lt;?php ''echo'' ... ?&gt; と同じ。
</td>
</tr>
<tr>
<td nowrap>ASP タグ形式</td>
<td nowrap>''&lt;%'' ... ''%&gt;''</td>
<td nowrap>asp_tags</td>
<td>
&lt;?php ... ?&gt; と同じで、ASP に採用されている形式。
</td>
</tr>
</table>
[[/html]]

[[アウトプットバッファリング|head:ob]]

アウトプットバッファリングとは、
[[php:echo]] 命令などによる標準出力への書き込みを一時的にメモリにバッファリングする機能のことである。

アウトプットバッファリング機能により、
通常標準出力に書き出してしまう [[php:var_dump:: のような関数の出力を文字列として取得できるようになる。
また、アウトプットバッファリングの開始時に何らかのハンドラ関数を指定することで、
バッファリングされた内容をハンドラ関数で処理して出力することができる。

アゼリアでは、通常の実行時に自動的にアウトプットバッファリングが使用される。
これは後述するマルチバイト対応の機能で、
出力の文字コードを自動的に変換する [[php:mb_output_handler]] ハンドラを使用するためである。

この機能を利用して、アゼリアのエラーページ出力では描画途中の出力をキャンセルしている。
以下の例を実行しても、エラーページの上部にゴミは出力されないはずである。

[[src]]
<?php
echo 'ゴミ&lt;br&gt;';
cb_throw_error();
?>
[[/src]]

関連する php.ini の設定を以下の表に示す。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>設定名</th><th nowrap>設定値</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>output_buffering</td>
<td nowrap>On</td>
<td>
アウトプットバッファリングを自動的に開始する。[[php:ob_start]] 関数と同じ機能。
</td>
</tr>
<tr>
<td nowrap>output_handler</td>
<td nowrap>mb_output_handler</td>
<td>
自動的に開始するアウトプットバッファリングの、ハンドラ関数を指定する。
[[php:ob_start]] 関数の引数となる。
</td>
</tr>
</table>
[[/html]]

[[マルチバイト対応（mbstring）|head:mbstring]]

PHP4 には UTF-8 や SJIS 等各種の文字コードを扱うモジュール ''mbstring'' が存在する。
mbstring の機能を使用することで PHP スクリプト内部の文字コードや HTML 出力時の文字コードなどを指定できる。

以下に示す設定は php.ini における初期値であり、全てスクリプト内部から変更可能である。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>設定名</th><th nowrap>設定値</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>mbstring.language</td>
<td nowrap>Japanese</td>
<td>
文字コードに関連する各種設定を一括設定する。
''mbstring.internal_encoding'' 等の個別指定は、この設定の後に記述する必要がある。
</td>
</tr>
<tr>
<td nowrap>mbstring.internal_encoding</td>
<td nowrap>UTF-8</td>
<td>
スクリプトの内部文字コード。
スクリプトの記述文字コードおよびデータベースに格納する文字コードでもある。
</td>
</tr>
<tr>
<td nowrap>mbstring.script_encoding</td>
<td nowrap>UTF-8</td>
<td>
スクリプトを記述する文字コードであるが、アゼリアの PHP では無視される。
今後無視されなくなった場合を想定して、内部文字コードと同一に揃えること。
</td>
</tr>
<tr>
<td nowrap>mbstring.encoding_translation</td>
<td nowrap>Off</td>
<td>
HTTP 入力(GET, POST パラメータ等)の自動変換。
アゼリアではより確実に処理するためこの機能を OFF にし、
リクエストの前処理で自前で変換している。
</td>
</tr>
<tr>
<td nowrap>mbstring.http_input</td>
<td nowrap>pass</td>
<td>
入力文字コードのデフォルト値。前述の通り自動変換を無効にしているため、パスさせている。
</td>
</tr>
<tr>
<td nowrap>mbstring.http_output</td>
<td nowrap>UTF-8</td>
<td>
HTTP 出力時の文字コード。[[php:mb_output_handler]] に影響する。
スクリプトから動的に切り替える場合は [[php:mb_http_output]] 関数で変更可能。
（ex. ??mb_http_output( 'SJIS-win' );?? ）
</td>
</tr>
<tr>
<td nowrap>mbstring.detect_order</td>
<td><nobr>UTF-8, </nobr><nobr>SJIS-win, </nobr><nobr>SJIS, </nobr><nobr>EUC-JP, </nobr><nobr>JIS, </nobr><nobr>ASCII</nobr></td>
<td>
文字コード自動検出時の優先順位。アゼリアでは自動検出機能を使用していないので無意味。
</td>
</tr>
<tr>
<td nowrap>mbstring.substitute_character</td>
<td nowrap>12307</td>
<td>
文字コード変換時に、
変換後のキャラクタセットで表現できない文字を置き換えるキャラクタのユニコード番号。
いわゆる「ゲタ」。
</td>
</tr>
<tr>
<td nowrap>mbstring.func_overload</td>
<td nowrap>0</td>
<td>
通常の PHP 文字列関数(str*)や正規表現関数(ereg*)はマルチバイト対応していない。
この設定次第ではそれらを mbstring の提供するマルチバイト対応版にすげかえることが可能だが、
アゼリアでは無効にしている。<br>
理由は、文字列関数 [[php:strlen]] は通常バイト数を数えるのだが、
これをマルチバイト対応版 [[php:mb_strlen]] に置き換えてしまうと''文字数''を返すようになり、
バイナリデータを扱う PHP スクリプトでバイト数を算出することが不可能になるため。
</td>
</tr>
</table>
[[/html]]

[[セッション|head:session]]

セッションとは、ブラウザによる複数回のアクセスを通じて特定のデータを保持する手段を実現するもの。
例えばログイン情報や買物カゴの情報を保持する目的で使用される。

クライアントは''セッションID''と呼ばれるユニークな ID を Cookie やリクエスト変数として持つ。
その他の情報は PHP により、セッション ID と結びつけてサーバー上に保存される。

セッションに関するデータのうち、
シングルサインオン等でアプリケーション側から設定を変更する可能性がある項目
（セッションデータの保存ディレクトリやセッション Cookie の発行パス等）は
[[common.ini|doc:ext/config#common.ini]] にて指定している。

以下に示す php.ini における設定項目は、通常変更の必要がないものである。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>設定名</th><th nowrap>設定値</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>session.save_handler</td>
<td nowrap>files</td>
<td>
セッションの保存方法を指定する。
''files'' であれば、サーバー上の特定ディレクトリにセッション ID をファイル名として、
ファイル形式で保存する。
''user'' を指定するとユーザーハンドラとなるが、
アゼリアはこの場合データベース(MySQL)に保存するハンドラを提供する。
三層構成でウェブサーバーとデータベースを分ける場合は ''user'' を指定せよ。
</td>
</tr>
<tr>
<td nowrap>session.use_cookies</td>
<td nowrap>1</td>
<td>
セッションIDの受渡しに HTTP Cookie を使用する。
</td>
</tr>
<tr>
<td nowrap>session.name</td>
<td nowrap>CBSESSID</td>
<td>
セッション ID を保持する Cookie 名もしくは GET パラメータ名。
セッション ID は POST パラメータ(hidden フィールド)では指定できない。
</td>
</tr>
<tr>
<td nowrap>session.gc_divided</td>
<td nowrap>1000</td>
<td>
セッションを破棄せずに(ログアウトせずに)ブラウザを終了した場合などにセッションデータがゴミとして残る。
そこでセッション開始時にこの数字分の 1 の確立で、ゴミとなったセッションデータの削除を行う。
</td>
</tr>
<tr>
<td nowrap>session.gc_maxlifetime</td>
<td nowrap>72000</td>
<td>
前述。セッションデータがゴミとみなされるまでの秒数。20時間。
</td>
</tr>
</table>
[[/html]]

[[MySQL|head:mysql]]

MySQL に接続するパラメータの多くはフレームワーク設定ファイル
[[common.ini|doc:ext/config#common.ini]]
にて設定されるが、インストーラーが自動設定する項目は php.ini の以下の項目にて行われる。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>設定名</th><th nowrap>設定値</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>mysql.default_port</td>
<td nowrap>（自動設定）</td>
<td>
インストーラーが自動検出した空き TCP ポート。デフォルトは 3770 番。
</td>
</tr>
<tr>
<td nowrap>mysql.default_socket</td>
<td nowrap>（自動設定）</td>
<td>
UNIX で使用される、localhost 接続時の UNIX ドメインソケットのパス。
インストール位置に応じてインストーラーが自動的に設定する。
</td>
</tr>
</table>
[[/html]]

[[動的拡張機能|head:dl]]

PHP はダイナミックリンクライブラリとして提供されるモジュールを動的に組み込む機能を有する。
動的拡張機能には以下の 2 種類がある。

[[html]]
<table class="cb_doc_table">
<tr>
<td nowrap>PHP 拡張</td>
<td>
PHP 実行エンジンに関数やクラスとして機能を追加するモジュール。
php.ini では ''extension'' キーワードにより追加される。
</td>
</tr>
<tr>
<td nowrap>Zend 拡張</td>
<td>
PHP の言語エンジンの機能を拡張するモジュール。
後述するエンコーダーなどはこちらになる。
php.ini では ''zend_extension'' キーワードにより追加される。
</td>
</tr>
</table>
[[/html]]

[[アクセラレーター・エンコーダー|section:encoder]]

PHP はインタープリタ言語であるため、通常はテキスト形式のソースコードを直接実行する。
このままでは当然エンドユーザーに渡せず、またパーズ処理コストも大きいものとなる。

この問題を解決するため、PHP のソースコードを予めパーズし、
結果を暗号化するのが''PHP エンコーダー''である。
代表的なものに [[Zend Encoder|http://www.zend.co.jp/products/encoder/]] や
[[ionCube Encoder|http://www.ioncube.jp/encoder/]] がある。

エンコードされたファイルは当然ながら通常の PHP エンジンでは実行できないため、
前述の Zend 拡張モジュールを導入する。
Zend Encoder であれば
[[Zend Optimizer|http://www.zend.co.jp/products/optimizer/]]、
ionCube Encoder であれば
[[ionCube Loader|http://www.ioncube.jp/members/download_loaders.html]]
が必要となる。これらは''ローダー''と呼ばれる。

一方、アクセラレーターはソースコードのパーズ結果を最適化し、キャッシュしておく。
エンコーダーとは違い、最初はソースコードを使用するため、
特定のウェブサーバーなどを高速化する際に用いられる。
例えばサイボウズの提供するサービスを PHP で構築した場合は、
このアクセラレーターを利用できる。

エンコーダーの中にもアクセラレーター同様最適化機能を有するものがある。
前述の Zend Encoder と ionCube Encoder は共に最適化機能を持つ。

製品として出荷する際に、顧客に見られてはならないコードはエンコードする必要があるが、
この目的には ionCube エンコーダー・ローダーを使用することが決定している。
法務による関連規制調査の結果と、価格が決め手になった。

[[プログラミング|section:programming]]

最後にアゼリア上での PHP プログラミングに関して、いくつかのトピックを挙げる。

*[[PHP4 の落し穴|#pitfall]]
*[[カレントディレクトリ|#getcwd]]
*[[リファレンスとコピー|#reference]]
*[[$_SERVER と $_ENV|#env]]
*[[IDE・エディタ|#ide]]
*[[デバッグ|#debug]]
*[[PHP5 / ZendEngine2|#php5]]

[[PHP4 の落し穴|head:pitfall]]

まず何よりも、PHP4 そのものが持つ各種のハマりどころがある。
[[DSS|dss:cat_id=6792]]
にてまとめてあるため、熟読のこと。

[[カレントディレクトリ|head:getcwd]]

CGI 版の PHP は起動時に**実行するスクリプトの存在するディレクトリ**に移動する。
アゼリアでは doc_root にサブディレクトリを作成してそこにスクリプトを配置することができるため、
カレントディレクトリは実行を開始したスクリプトに依存することになる。


以上より、アゼリアでは**相対パスに依存したコーディングを禁止**とする。
特定のリソース置場の位置を知りたい場合などには、
フレームワークでは [[common.ini|doc:ext/config#common.ini]]
中などにパスを設定している。

[[リファレンスとコピー|head:reference]]

PHP4 の言語の中で最悪な部分が、''リファレンス''と呼ばれる機能である。

リファレンスは変数、配列、オブジェクトに対して ''&'' 演算子で作成できる。
逆に、もしリファレンスの作成を忘れると PHP は常にそれらのコピーを作成する。
**関数の返り値、引数の宣言、および代入時の全てにおいて & を指定することを原則とせよ。**
コピーを作成したい場面はそう多くないはずであり、
もしその場合は必ずソース中に「コピーを作成する」旨のコメントを記述せよ。

但し、この原則に従うとうまく動作しないケースが存在する。
落し穴にもある、static 変数や global 変数にはオブジェクトの参照を代入できない。
つまり、以下のコードでは new の前の &amp; を外さないと、
$_singleton は ''null'' のままであり、シングルトンの実装にならない。

[[src]]
class Foo
{
    function getInstance()
    {
        **static** $_singleton = null;
        if ( is_null($_singleton) )
        {
            $_singleton =**&** new Foo();
        }
        return $_singleton;
    }
}

$foo1 =''&'' Foo::getInstance();
$foo2 =''&'' Foo::getInstance();
{{// $foo1 と $foo2 は異なるインスタンス}}
[[/src]]

こういった事故を回避するため、**new 演算子に限っては単純にコピーを作成せよ。**
つまり、以下のようなコーディングスタイルが基本である。

[[src]]
function **&**get_object()
{
    {{// オブジェクトを返す場合、関数宣言に &}}
    return $some_object;
}

function modify_object( **&** $obj )
{
    {{// オブジェクトを受け取る関数は、引数の宣言に &}}
    $obj-&gt;foo = 3;
}

{{// オブジェクトを受け取るときにも &}}
$obj =**&** get_object();

{{// ただし new のときだけ、コピー}}
$new_obj = new Foo();
[[/src]]

[[$_SERVER と $_ENV|head:env]]

''$_SERVER'' は Apache モジュールなどでも CGI と同様の変数を取得できるように PHP が提供するスーパーグローバル変数である。
一方の ''$_ENV'' は環境変数を提供するスーパーグローバル変数である。

原則として、**$_SERVER を使用し、$_ENV は使用してはならない。**
例えばクライアントブラウザの種類を参照するには CGI では "HTTP_USER_AGENT" 環境変数を参照するが、
$_SERVER を使用していれば同じ変数が CGI 以外でも利用できる。

標準 PHP との互換性を確保するため、常に $_SERVER を使用することを心掛けること。

[[IDE・エディタ|head:ide]]

PHP の統合開発環境としては
[[Zend Studio|http://www.zend.co.jp/products/studio/]]
や Eclipse の PHP プラグインなどが存在する。
だがこれらの IDE にサイボウズ版 PHP を指定すると正常に動作しない。

結論として、現状有効な IDE は存在しない。
Eclipse の PHP プラグインをサイボウズ用に改造して使用するのが、
IDE を手に入れる最有力な選択肢である。

一方単純なエディタであれば、PHP ソースコードを編集するのに適したものがいくつもある。
例えば秀丸には HTML + PHP モードが存在するので、それを ''.csp'' と関連付ければ良い。
Emacs にも php-mode が存在する。

[[デバッグ|head:debug]]

IDE が存在しないのと同じ理由で、有力なデバッガは現在存在しない。
しかしながらフレームワークの開発においては、デバッガの不在はほとんど問題となっていない。
理由としては以下が挙げられる。

#インタープリタであるため、即座にエラー発生個所(ファイルと行番号)が分かる
#インタープリタであるため、任意の個所で変数を調べて書き出すことができる
#デバッガビリティを考慮した設計であるため、モジュールごとの切り分けができており、
問題発生個所を限定しやすい

特に最後に挙げたデバッガビリティの向上は、
今後の開発技術向上の取り組みの中でサイボウズ全体として取り上げていきたい。

[[PHP5 / ZendEngine2|head:php5]]

PHP5 では言語エンジンが強化されるのと同時に、各種の大きな変更が予定されている。

*例外のサポート
*オブジェクトリファレンスの改善(Java ライク)
*プロパティやクラスにアクセス制限が導入される(private など)
*XML ライブラリが expat から libxml2 になる
*SQLite という組み込みDBがバンドルされる
*ソケット通信にて低レベルな設定を行える

ただしそのステータスは実用にははるかに遠く、
また言語機能が洗練された分遅くなっているようである。
アゼリアへの採用は当面考慮しなくて良い。
