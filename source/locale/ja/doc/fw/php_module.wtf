[[概要|section:abstract]]
拡張モジュールとは、C/C++によって作成されるPHPモジュールのことです。
 作成の仕方に関しては [[PHP拡張モジュールの製作|doc:dev/guideline/php_extension]] を参照してください。

PHP拡張モジュールを追加する方法としては以下の2つがあります。
#PHP本体に直に組み込む
#.dll, .soのような拡張モジュールとして組み込む

それぞれの方法によってメリットが違います。
 PHP本体に直に組み込む場合は、phpが起動した時点でいつでも使用することが可能なので、モジュールをロードするオーバーヘッド等がありません。逆に言うと使用しない場合も常にロードされていることになります。
 現在フレームワークで直に組み込まれているもので言うと、''cbfw'' ( CB_CSVWriter, CB_CSVReader, CB_ConfigManager, cb_aes_xxx ) と ''xml'' (CB_XMLWriter, CB_XMLReader, domxml) があります。
 常に使われる可能性が高いもの( ''cbfw'' ) や 依存関係上直接組み込むべきもの( ''xml'' )なんかは直接組み込まれます。
 (例えば、domxmlはそれ単体でも使用できるが、CB_XMLWriterやCB_XMLReaderはdomxmlに依存するので、.dllとしては出しにくい)

.dll, .soとして組み込む方法の場合は、[[az:fw.core:include/fw/prepend.csp:cb_dl]] を利用して必要な時だけロードすることが可能になります。( php.iniに書く方法もありますが、あまり推奨しません。この場合常にロードされることになるので、PHP直に組み込んだ方が効率的です。)
 現在フレームワークでこの方法が取られているモジュールとして、[[cb_date_time|doc:dev/api/datetime]]、[[mailparse|doc:dev/api/mail]]、[[ldap|doc:dev/api/ldap]] などがあります。
 日付時刻計算ライブラリなどは、直接組み込んでもよいが、C++で書かれているものはPHP本体(Cで書かれている)とあまり混ぜたくないので分離していたり、メールライブラリのように軽量コンテナで処理挿げ替えられる等、直に組み込むべきではないなどの理由もありこのような形態になっています。
 
[[組み込む方法|section:bundle]]
''php-x.x.x/ext'' 配下に作成した拡張モジュールをインポートする。

[[PHP直に組み込む場合|head:internal]]
この方法の場合、フレームワークチームが作業を行います。

''unix の場合''
#''config.m4''ファイルを適切に書き換える。
#''php-x.x.x/cb_makefile'' の configure オプションに {{--enable-機能}} ( --withの場合もある) を追加する。
(config.m4が正しければ、autoconfによってconfigureに適切に ''--enable-機能''　が追加され内部に組み込まれるはすです。)

''windows の場合''

こちらはmsvcを使ってビルドするため、unixのように、autoconf, automake, m4のような仕組みを利用することができないので
自力で作業することになります。

#''php-x.x.x/main/config.w32.h'' に自分のモジュールを宣言する。
[[src]]
{{\#define HAVE_CBFW 1}}
[[/src]]
#''php-x.x.x/main/internal_functions_win32.c'' に作成したモジュールのエントリを追加する。
[[src]]
...
{{\#if HAVE_CBFW}}
{{\#include "ext/cbfw/php_cbfw.h"}}
{{\#endif}}
zend_module_entry *php_builtin_extensions[] = {
...
{{\#if HAVE_CBFW}}
{{	,phpext_cbfw_ptr}}
{{\#endif}}
...
[[/src]]

後は [[手動ビルド|doc:fw/manual_build]] の手順に添ってビルドすればきちんと組み込まれるはずです。
 尚、作り終わった後は、''"./php.cgi -i | grep 機能"'' のようにコマンドを打ち、機能が組み込まれているかを必ず確認してください。

[[.dll, .soのような拡張モジュールとして組み込む場合|head:extension]]

''unix の場合''
#''config.m4''ファイルを適切に書き換える。
[[src]]
''ex. cb_date_timeの場合''
{{フレームワークの管理するboostとリンクするために追加}}
PHP_ARG_WITH(boost-dir,if the location of boost install directory is defined,
[  --with-boost-dir=<DIR>   Define the location of boost install directory], no, no)
if test "$PHP_CB_DATE_TIME" != "no"; then
  dnl Write more examples of tests here...
  ...
  {{libやincludeのパスを設定}}
  LIBNAME=boost_date_time_s
  BOOST_INCLUDEPATH=$PHP_BOOST_DIR/include
  BOOST_LIBPATH=$PHP_BOOST_DIR/lib
  PHP_ADD_INCLUDE($BOOST_INCLUDEPATH)
  PHP_ADD_LIBRARY_WITH_PATH($LIBNAME, $BOOST_LIBPATH, CB_DATE_TIME_SHARED_LIBADD)
[[/src]]
#''php-x.x.x/ext/機能'' の中のcb_makefileを適切に書き換える
[[src]]
...
env $(CCLINE) CXX='$(CXX)' CFLAGS='$(CFLAGS)' CXXFLAGS='$(CXXFLAGS)' LDFLAGS='$(LDFLAGS)' $(LDLINE) 
$(SHELL) ./configure 
--with-php-config=$(PHPCONFIG) 
{{--enable-cb_date_time=shared}}
{{--with-boost-dir=$(BASEDIR)/external/boost}}
...
[[/src]]
#''php-x.x.x/cb_makefile'' の 中に上記cb_makefileをmakeする処理を加える。
[[src]]
...
{{cd ./ext/cb_date_time; $(MAKE) -f cb_makefile}}
...
[[/src]]
[[ext_skel|doc:dev/guideline/php_extension/abstract]] が吐き出すスケルトンの cb_makefile は modules 配下に出力される ''モジュール.so'' を インストーラーが組み込む extensionフォルダに自動的にコピーするはずですので、これで組み込まれるはずです。

''windows の場合''
#.dspを適切に設定する。( リンクするモジュールなど )
#''build/windows.xml'' にビルドプロセスを追加する。
[[src]]
''ex. cb_date_timeの場合''
{{// VC++ によってビルドする}}
<antcall target="compile_one_visual_cpp_project">
    <param name="vc_source_root" value="${php.build.root}/ext/cb_date_time"/>
    <param name="vc_dsw_filename" value="cb_date_time.dsw"/>
    <param name="vc_target_project" value="cb_date_time - Win32 Release_TS"/>
    <param name="compile_log" value="compile_cb_date_time.log"/>
    <param name="vc.lib.extension" value="${php.build.lib};${installer.build.support.mysql}/lib;${_php_source_dir}"/>
    <param name="vc.include.extension" value="**${build.root}/external/boost;**${php.build.include};${installer.build.support.mysql}/include"/>
    <param name="vc.path.extension" value="${installer.build.developerTools}/buildForPhp/win32build/bin"/>
</antcall>
{{インストーラーのextensionディレクトリにコピーする}}
<copy file="${php.build.root}/ext/cb_date_time/Release_TS/cb_date_time.dll"
      tofile="${build.root}/win/extensions/cb_date_time.dll"/>
[[/src]]
includeファイル等は外部モジュールとして管理されている場所そのままを見てください。phpに関する外部モジュールはビルドプロセスによって''${php.build.lib}''にコピーしています。新しい外部モジュールが増えた場合ここにコピーしてください。
[[src]]
''ex. curlの場合''
<target name="curl">
    <antcall target="compile_one_visual_cpp_project_for_nmake">
        <param name="vc_source_root" value="${build.root}/external/curl"/>
        <param name="param.option" value="vc"/>
    </antcall>
    <copy file="${build.root}/external/curl/lib/libcurl.lib" todir="${php.build.lib}"/>
</target>
[[/src]]
[[注意点|section:attension]]

モジュールをインポートする際は、windowsの方のビルドに備えてもdswを作成してからインポートしてください。
 ( .ncb, .plg, .optなどのゴミはインポートしないようにしてください。また、dsp, dsw はCRLFでないと VC++ が認識できないのでそのままいれてください )

フレームワークチームが ''php-x.x.x/ext'' 下に直接インポートする場合は、dspの内容で ''$(PHP_SDK)\include\php'' を ''..\..'' に一括置換してください。
 ( これは、windowsの方はphpizeのような仕組みがないことに由来します。**PHPSDKを利用する製品側には関係ありません** )
 
新しく作成するモジュールに等に関しては、''dependency Walker( windows )''　や ''unix( ldd )'' を利用して、必要最小限のものしかリンクされていないことを必ず確認してください。
 ( フレームワーク内では外部モジュールはすべてリポジトリ管理されています。unixの場合はconfig.m4, cb_makefileを適切に設定し、静的リンクで解決するようにしてください。尚いたずらにモジュールを大きくすることはないので、/usr/lib等に通常はいっているものに関してはそのままで構いません。)