[[概要|section:abstract]]
アゼリアでは定期的に、外部への安定した供給を目的として SDK と IDK のリリースを作成している。
 そのためフレームワークの成熟度合により、頻度および内容は変遷していくことが予想されるが、本節では2004年11月現在のリリース管理の内容を示す。

[[バージョンポリシー|section:version]]

アゼリアのバージョン番号は、３つの連続する数字で表す。先頭から順に、''メジャー'',''マイナー'',''リビジョン''番号とする。例えば "1.0.4" であれば、メジャーバージョンは "1"、マイナーバージョンは "0"、リビジョンは "4" となる。

[[メジャーバージョンアップ|head:major_version]]

以下の場合には、メジャーバージョン番号を一つ増やしたリリースとする。
メジャーバージョンが上がるときは、マイナーバージョンとリビジョンは "0" にリセットされる。

* アゼリアを使用したアプリケーションに対する互換性が90%を切る場合
  ex.1 MySQL-4.0.x → MySQL-4.1.x の変更に伴って、全スクリプトがUTF-8になる
  ex.2 PHP-4.x → PHP-5.x の変更に伴って、APIを大きく変更
* アゼリア内部構造の抜本的再構成をした場合

[[マイナーバージョンアップ|head:minor_version]]

以下の場合には、マイナーバージョン番号を一つ増やしたリリースとする。
マイナーバージョンが上がるときは、リビジョンは "0" にリセットされる。

* アゼリアを使用したアプリケーションに対する互換性を90%以上確保できる場合
* 開発途中のバージョンを早期に評価してもらうためにリリースする場合
* 開発版が安定した時点で、安定版をリリースする場合
  ただし、互換性が90%を切る場合にはメジャーバージョンアップとなる

なお、開発版のマイナーバージョン番号は原則奇数、安定版は原則偶数とする。

[[リビジョンアップ|head:revision_version]]

以下の場合には、リビジョン番号を一つ増やしたリリースとする。
短い場合で２ヶ月に一回程度リリースされる。

* アゼリアを使用したアプリケーションの互換性が100%確保できる場合
* 不具合の改修、細かい機能の追加レベル

[[リリースポリシー|section:policy]]

#リリース時期は計画しておく
 ロードマップ、マイルストーンと対応することが望ましい。
#明確なリリース目標を定める
 チームで目標を共有し、品質を高めるため。また、目標に未達である場合リリース延期等の措置を取るため。

[[リリース手順|section:howto]]

#リリース日を設定する
 プロジェクトメンバーの共有スケジュールとして登録
#リリース目標を列挙する
 できれば優先順位と担当者をつける
#リリース前には毎週目標への進捗を確認する
#リリース日前日までに、CVS へのコミットを完了する
#{{(オプション)}} 開発版から安定版をリリースする場合、安定版ブランチを作成する(後述)
#リリース当日は自動ビルドで作成された SDK( azalea-x.x.x.exe, azalea-x.x.x.bin ), 製品開発用アーカイブ( barebone.zip ), 製品開発用アーカイブで作られるサンプルインストーラー( sample-1.0.0.exe, sample-1.0.0.bin ) の動作の最終確認をし、Office のファイル管理にアップロードする
 ( セキュリティ等の面でアップロード先に関しては今後は変更する予定です。 )
#ソースツリーに CVS タグを打つ。"azalea_win", "azalea_unix" 両方で打つが、一部共用しているので "-F" オプションを付けること。開発版ならメイントランク、安定版なら安定版のブランチ上で打つ。
[[src]]
cvs rtag -F v1_0_0 azalea_win
cvs rtag -F v1_0_0 azalea_unix
[[/src]]
#影舞(BTS)を参照して前のリリース以降の変更を抽出、リリースノートを作成する
#影舞(BTS)の再現バージョン属性に、リリースしたバージョンを追加する。
 (対応時期に次のバージョンがなければそれも追加する。)
#フレームワークサーバーを最新版に更新する。
#Office 掲示板にて、リリースアナウンスメントを行う
#打ち上げる

[[ブランチポリシー|section:branch]]

ブランチの作成は、バージョン番号と対応して行う。具体的には以下の通りである。

* メイントランクは最新の開発版を管理
* ブランチは安定版向けに作成 (開発版ブランチはない、タグがあるだけ)
* メジャー、マイナーバージョンの異なるものごとに 1 ブランチ
* リビジョンは同一ブランチ内でタグにて管理

これ以外には、実験的に大きな変更を行う場合にブランチを作成する場合がある。

ブランチを作成する場合はまず分岐点となる通常のタグを打つ。その後ブランチタグをリポジトリに直接(''rtag'')、分岐点のタグから作成する。最後にCVSからブランチを取得できるよう、''modules'' ファイルを更新する。例えばメイントランク(開発版)から安定版 "v1_2" ブランチを作成するには以下の手順となる。

#メイントランクにタグを打つ
[[src]]
cvs rtag -F v1_2 azalea_win
cvs rtag -F v1_2 azalea_unix
[[/src]]
#"v1_2" タグから、安定版ブランチを分岐する
[[src]]
cvs rtag -b -F -r v1_2 branch_v1_2 azalea_win
cvs rtag -b -F -r v1_2 branch_v1_2 azalea_unix
[[/src]]
#modules ファイルを更新する
[[src]]
cvs checkout CVSROOT
cd CVSROOT
vi modules
[[html]]
<pre style="border: none;">  {{\# modules に以下の 2 モジュールを追加}}
  v1_2_win  .... {{\# azalea_winの行をコピー}}
  v1_2_unix .... {{\# azalea_unixの行をコピー}}
</pre>
[[/html]]
cvs commit modules
[[/src]]

結果、ブランチタグ "branch_v1_2" でブランチが作成される。下図はこのルールに基いたブランチおよびタグの様子を表した例である。ブランチタグは**赤**、通常のタグは((緑))で区別している。

[[html]]
<pre>
   ((v1_0))                                ((v1_2))
━━┿━━━━━━┳━━━━━━━┳━━┿━━━━━━━┳━━━━━━ メイントランク(開発版)
    │          ((v1_1_0))          ((v1_1_1))  │            ((v1_3_0))
    │                                  │
    ┝━━━━━━┳━━ v1.0ブランチ   │
**branch_v1_0**     ((v1_0_0))                  │
                                        ┝━━━━┳━━━━━┳━━━ v1.2ブランチ
                                    **branch_v1_2** ((v1_2_0))      ((v1_2_1))
</pre>
[[/html]]

[[タグポリシー|section:tag]]

[[リリースタグ|head:release_tag]]

リリースに使用するタグ形式は以下の通り。
 [[src]]
v{((メジャー))}_{((マイナー))}_{((リビジョン))}
[[/src]]

メイントランクは常に開発用なので、メイントランクに打つタグは v1_''1''_0, v1_''5''_3, v2_''1''_0 というようにマイナーバージョンが奇数になるはずである。

[[ブランチタグ|head:branch_tag]]

分岐元につける目印のタグの形式は以下の通り。
[[src]]
v{((メジャー))}_{((マイナー))}
[[/src]]

基本的に分岐を作成するのは、不安定版から安定版を作る場合であるため、マイナーバージョンは v1_''2'', v1_''6'', v2_''4'' 等、偶数になるはずである。

ブランチタグの形式は以下の通り。
[[src]]
branch_v{((メジャー))}_{((マイナー))}
[[/src]]

[[その他のタグ|head:other_tag]]

開発の必要に応じてブランチを作成することがある。そのような場合、ブランチ手順は安定版ブランチと同様にせよ。タグ名に関しては自由につけて良いが、必ず掲示板等で周知すること。
