[[概要|section:abstract]]
Azalea は小さくあることを旨として設計されましたが、MySQL と PHP を始めとする外部コンポーネントを採用していることもあり、それなりに複雑なソース構成となっています。

ソースは [[Concurrent Versions System (CVS)|http://www.cvshome.org/]] を使用して管理されています。 
使い方等に関しては、([[日本語マニュアル|http://www.linkclub.or.jp/~tumibito/soft-an/cvs/cvs-man/cvs-ja_toc.html]]) を参照してください。

windows上で操作する場合は [[WinCVS|http://home.att.ne.jp/apple/wizard/wincvs/]] がエクスプローラー感覚で操作できるため便利です。
 注意点として、WinCVSを使用する場合は「**改行コードを LF (0xa) にする**」チェックを必ず有効にしてください。
 これは、ファイル改行コードを強制的にLFにするという意味ではなく、ファイルに対する変換をなくするという意味です。これをチェックしておかないと自動でCR+LFに変換されてしまいます。Azaleaでは 管理工数の観点から、できるだけ外部コンポーネントのソースに無用な変換を行わない方針を採っている為です。

[[CVS リポジトリ|section:cvs]]
CVSリポジトリにアクセスする際は以下の情報を参考にしてください。
 尚、新規アカウントが必要な場合、フレームワークプロジェクトの方へ申請してください。
 (フレームワークメンバーの作業として、参照するだけのユーザーを追加する場合、fwグループに含めるだけで構いませんが、pserver経由でチェックインできるようにするには、writersファイル等を修正する必要があります。)
 
[[html]]
<table style="margin-left: 20pt;margin-right: 20pt;background: #EEEEFF;border: 1px solid #6464e4;padding: 1em;">
<tr>
 <td nowrap valign="top">CVS サーバー名</td>
 <td>&nbsp;</td>
 <td><tt>''gaia.dev.cybozu.co.jp''</tt></td>
</tr>
<tr>
 <td nowrap valign="top">CVSROOT</td>
 <td>&nbsp;</td>
 <td><tt>'':pserver:<i>{{(your account)}}</i>@gaia.dev.cybozu.co.jp:/home/cvsroot/Framework''</tt></td>
</tr>
</table>
[[/html]]

CVSのリポジトリツリーは以下のようになっています。コンポーネント毎に一段目の分類をしており、その下でさらに OS 別、あるいはバージョン別の管理を行っています。

[[src]]
(((top)))
  +- ''build''                     自動ビルド用
  |
  +- ''code''
  |   +- command                コマンドライン用の PHP ファイル
  |   +- doc_root               HTTP 用の PHP ファイル
  |   +- idk_root               IDK 用 PHP スクリプト
  |   +- include                社内製 PHP ライブラリ
  |   +- plugin                 プラグインモジュール置場
  |
  +- ''config''                    各種設定ファイル( php.ini 等 )
  |
  +- ''data''                      各種データファイル
  |   +- mysql.zip              MySQL 初期データ
  |
  +- ''installer''
  |   +- helper                 インストーラー用ユーティリティ
  |   +- unix                   UNIX版インストーラー
  |   +- win                    Windows版インストーラー
  |
  +- ''locale''                    ロケール依存のリソース
  |
  +- ''mysql''                     MySQL の各バージョンのソースツリー
  |   +- ''unix''                  UNIX版ソース
  |       +- mysql-{VERSION}
  |   +- ''win''                   Windows版ソース
  |       +- mysql-{VERSION}
  |
  +- ''page''                      Smarty テンプレート
  |
  +- ''pear''                      開発用 PEAR
  |   +- pear-{YYYYMMDD}        取得日付けごとのツリー
  |
  +- ''php''                       PHP の各バージョンのソースツリー
  |   +- php-{VERSION}
  |
  +- ''smarty''                    Smarty の各バージョンのソースツリー
  |   +- smarty-{VERSION}
  |
  +- ''web_root''                  .css, .js, .jpg 等の静的リソース
  |
  +- ''(外部モジュール)''          以下 PHP拡張ライブラリで仕様する外部モジュール
                                (boost, libxml2, openldap, curl, ...)
  
[[/src]]

さらに、以下のモジュールを定義して、フレームワークを構成するコンポーネント集合を表現しています。開発者はいずれかのモジュールをチェックアウトして開発を行ってください。

[[html]]
<table style="margin-left: 20pt;margin-right: 20pt;background: #EEEEFF;border: 1px solid #6464e4;padding: 1em;">
<tr style="background: #CCCCFF">
<th nowrap>&nbsp;モジュール名&nbsp;</th><th>説明</th>
</tr>
<tr>
<td nowrap valign="top"><b>azalea_win</b></td>
<td>
Windows 用のフレームワーク最新ソース一式。Windows で開発する場合はこのモジュールを取得すると、Windowsバイナリをビルドするために必要なリポジトリを全て取得できる。MySQL は UNIX と Windows でソースが異なるので、片方に施した変更が他方にも必要な場合は、両モジュールにて行う必要があります。
</td>
</tr>
<tr>
<td nowrap valign="top"><b>azalea_unix</b></td>
<td>
UNIX 用のフレームワーク最新ソース一式。注意点は azalea_win と同様です。
</td>
</tr>
<tr>
<td nowrap valign="top"><b>v(({メジャー}))_(({マイナー}))_win</b></td>
<td>
Windowsの安定版ブランチ取得用モジュール。安定版については、[[リリース管理|doc:fw/release]]を参照のこと。ブランチなので取得時にはブランチタグを指定する。
</td>
</tr>
<tr>
<td nowrap valign="top"><b>v(({メジャー}))_(({マイナー}))_unix</b></td>
<td>
UNIXの安定版ブランチ取得用モジュール。安定版については、[[リリース管理|doc:fw/release]]を参照のこと。説明に関しては上記win版と同様です。
</td>
</tr>
<tr>
<td nowrap valign="top">その他</td>
<td>
azalea_win, azalea_unix はリポジトリ中から各種コンポーネントの必要なバージョンを集めたものである。その実現のための補助モジュールが、いくつか定義されています。
</td>
</table>
[[/html]]

[[管理方針|section:manage1]]

ソースの管理方針はコンポーネントごとに異なるが、外部コンポーネントに対するものと、社内製コンポーネントに対するものに大別されます。いずれにして、最重要ルールは「**''CVSサーバー上で直接変更はしない''**」ことです。これだけは絶対に守ってください。過去のブランチが取得できないことになります。

もしどうしてもCVSサーバー上でディレクトリ移動の必要が生じた場合は、モジュール定義をして過去のブランチが必ず取得できる状態を維持してください。

[[外部コンポーネント|head:]]

フレームワークでは MySQL と PHP を始め、多数の外部コンポーネントを管理する必要があります。外部コンポーネントがバージョンアップした際に、サイボウズ社内で加えた修正や機能追加を容易に反映するために、下記に示す管理方針を定めています。

#[[ライセンスチェック|#license]] を行う。
#外部コンポーネントは、''無修正の状態で'' CVS にインポートしてください。
#インポートする際には、各コンポーネントごとのディレクトリに、バージョン番号や日付等を付加し、必ず "''original''" タグを振ってください。( 後で自分たちで加えた差分を簡単に洗い出せるようにするため )
[[src]]
cvs import -ko -m "MySQL-4.0.15" mysql/win/mysql-4.0.15 MySQL **original**
[[/src]]
#外部コンポーネントについては、ブランチによるバージョン管理はしません。

バージョンアップ時の対応は一般に以下のようになります。パッチの当てかたなどは UNIX の patch プログラムの info などを参照してください。

#[[ライセンスチェック|#license]] を行う。
#新バージョンを、上記の手順でインポートする。
#旧バージョンのインポートから現在までの差分を抽出する。''-N'' オプションは重要なので忘れないようにしてください。
[[src]]
ex) cd mysql-4.0.14; cvs diff -c **-N** -r original > ../mysql.patch
[[/src]]
#作成したパッチファイルを検査し、新バージョンでは不要な差分を削除する。
#新バージョンのツリーにパッチを当てる。patch コマンドを使用する例を下に示していますが、外部コンポーネントは思いもよらない変更が入ることがあるため、差分が大きいようなら手動でパッチをあてるのが安全です。コマンドに頼りすぎるのではなく、最終的には目視によってきちんとパッチが当たっていることをきちんと確認してください。
[[src]]
ex) cd mysql-4.0.15; patch -p 0 < ../mysql.patch
[[/src]]
#新規に作成されるファイルについては cvs add, 削除されるファイルについては cvs remove する必要があります。

[[社内製コンポーネント|head:]]

社内製のコンポーネントに関しては、通常のアプリケーション開発同様 1 本のツリーと、必要に応じてブランチを作成するものとします。リポジトリの切り分けには特に明確な基準は置きませんが、PHP 関連のスクリプトは、"''code''" 以下に配置するものとする。

より詳細なタグおよびブランチ作成の規則は[[リリース管理|doc:fw/developer/rm]]を参照してください。
 
[[管理手順|section:manage2]]

[[モジュール定義ファイル|head:]]

フレームワークは多数のコンポーネントからなるため、それらをまとめる ''モジュール'' を CVS で定義し、運用していています。モジュールはリポジトリのメタデータとして管理されており、変更を加える場合は下記に示す手順に従ってください。

#メタデータディレクトリ CVSROOT をチェックアウトする。
 cvs checkout CVSROOT
#チェックアウトした中の、''modules'' ファイルを編集する。
 cd CVSROOT; vi modules
#編集が完了したら、コミットする。
 cvs commit modules

''modules ファイルへの変更は原則追加のみ''である。**ブランチを作成した時点のバージョンのモジュール定義は以後ずっと必要だからです。**
例として、現時点での modules ファイルの内容を示します。

[[src]]
{{\# MySQL は OS 毎に特定バージョンのモジュールを定義}}
win_mysql-4.1.3  -d mysql-4.1.3   mysql/win/mysql-4.1.3
unix_mysql-4.1.3 -d mysql-4.1.3   mysql/unix/mysql-4.1.3

{{\# 過去の安定版のために残っているエントリー}}
win_mysql-4.1.2  -d mysql-4.1.2   mysql/win/mysql-4.1.2
unix_mysql-4.1.2 -d mysql-4.1.2   mysql/unix/mysql-4.1.2

{{\# PHP は特定バージョンのモジュールを定義}}
php-4.3.7                         php/php-4.3.7

{{\# PEAR は特定日付のものを "code/pear" にマップ}}
pear-20040624 -d code/pear        pear/pear-20040624

{{\# Smarty は特定バージョンのものを "code/smarty" にマップ}}
smarty-2.6.3 -d code/smarty       smarty/smarty-2.6.3

{{\# その他}}
win_installer -d win              installer/win
unix_installer -d unix            installer/unix
win_helper -d win/helper          installer/helper
unix_helper -d unix/helper        installer/helper
win_test -d test                  test/win
unix_test -d test                 test/unix

{{\# OS 毎にリポジトリとモジュールを集めてアゼリアモジュールとする}}
{{\# 表示の都合上改行しているが、\ の後の改行は実際には存在しない}}
azalea_win  &php-4.3.7 &win_mysql-4.1.3  &code &pear-20040624 &smarty-2.6.3 &config \
            &web_root &win_installer  &win_helper  &data &locale &page &win_test  &build
azalea_unix &php-4.3.7 &unix_mysql-4.1.3 &code &pear-20040624 &smarty-2.6.3 &config \
            &web_root &unix_installer &unix_helper &data &locale &page &unix_test &build

{{\# 過去の安定版のブランチ用モジュール}}
{{\# 表示の都合上改行しているが、\ の後の改行は実際には存在しない}}
v1_0_win  &php-4.3.7 &win_mysql-4.1.2  &code &pear-20040624 &smarty-2.6.3 &config \
          &web_root &win_installer  &win_helper  &data &locale &page &win_test  &build
v1_0_unix &php-4.3.7 &unix_mysql-4.1.2 &code &pear-20040624 &smarty-2.6.3 &config \
          &web_root &unix_installer &unix_helper &data &locale &page &unix_test &build
[[/src]]

[[MySQL|head:]]
MySQL の品質は通常高くビルド方式もリーズナブルであるため、サイボウズ独自に手を加えている個所はほとんどありません。（現状、コレーション周りで一部パッチをあてている場所があるが将来的にはMySQLの方に取り込んでもらう予定になっています。)
 ただし、UNIX が configure コマンドで各種ビルドオプションを調整できるのに対して、Windows のビルドシステムは手動で設定ファイルを書換える必要があります。更に、UNIX と Windows で別々のソースアーカイブが提供されているので、それぞれ別にインポートする必要があります。

下記に示すのはパッチリリースに対する手順であり、メジャーあるいはマイナーバージョンアップでの手順はより詳細に変更を検証する必要がある。

#新バージョンをインポートする。
 - (Windows)  cvs import -ko -m "MySQL 4.0.15" mysql/**win**/mysql-4.0.15 MySQL original
 - (UNIX) cvs import -ko -m "MySQL 4.0.15" mysql/**unix**/mysql-4.0.15 MySQL original
#旧バージョンの差分を抽出する。以下 Windows, UNIX 両方で行う。
 例: cd mysql-4.0.14; cvs diff -c -N -r original > ../mysql.patch
#差分を検査し、不要な個所を削除する。特に新バージョンで修正された不具合に対する差分には注意してください。
#モジュール定義を更新する。
 例: cvs checkout CVSROOT; cd CVSROOT; vi modules; cvs commit
#定義したモジュールをチェックアウトする。
 例: cvs checkout win_mysql-4.0.15
#3 で検査した差分をチェックアウトしたソースに当てる。
 もし patch コマンドによる自動パッチ当てに失敗した場合は、手動で行う。
 例: cd mysql-4.0.15; patch -p 0 < ../mysql.patch
#追加したファイルがある場合は cvs add, 削除したファイルがある場合は cvs remove する。
#[[デプロイメント仕様|doc:ext/deployment]] にある通り、MySQL のパッチバージョンやビルドバージョンを変更する。
 - (Windows) "build\product.properties" ファイル中の "product.version.mysql.specific" と、"build\make.*.properties"ファイル中の"mysql.build.dir"を書き換える。
 - (UNIX) "unix/config.make" 中の "''MYSQL_BUILD''" 変数の値を変更する。
#エラー番号の追加・変更・削除を検査し、locale/{en,ja}/errors/db.csp のエラーリソースを更新する。
 mysql-X.X.X/include/errmsg.h と mysql-X.X.X/include/mysqld_error.h の変更を検査すれば良い。
#システムリソースであるdata/mysql.zipを更新する。（システムテーブルの構成が変化している可能性があるため）

[[data/mysql.zipの更新|head:]]
MySQLのシステムリソースはCVS上で管理され、以下のように取得することができる。

[[src]]
> cvs checkout data
> cd data
> unzip mysql.zip
> cd mysql
[[/src]]

このように取得されたmysqlディレクトリ直下のdataディレクトリは、
Azaleaインストール時にMySQLサーバのデータディレクトリとして設定される。

data/mysql.zipの更新は、以下の手順で行う。

1.UNIXリソースを単体でビルドする。

[[src]]
> cvs checkout mysql-4.0.15
> cd mysql-4.0.15
> ./myconfig.sh
[[/src]]

以下は、ビルドのためのmyconfig.shスクリプトソースである。（mysql-4.0.15/test-serverにインストールされる。）

[[src]]
 #!/bin/sh
 INSTALL_ROOT=`pwd`/test-server
 aclocal
 automake
 autoconf
 ./configure --prefix=${INSTALL_ROOT} --with-charset=utf8 --with-collation=utf8_cybozu \
 --with-extra-charsets=sjis --without-debug --enable-assembler --disable-shared \
 --with-unix-socket-path=${INSTALL_ROOT}/data/mysql.sock --with-tcp-port=3770 \
 --without-isam --enable-local-infile --sbindir=${INSTALL_ROOT}/bin \
 --libexecdir=${INSTALL_ROOT}/bin --localstatedir=${INSTALL_ROOT}/data \
 --libdir=${INSTALL_ROOT}/lib --includedir=${INSTALL_ROOT}/include \
 --without-docs --without-bench
 make
 make install
[[/src]]

2.DBを初期化する。
[[src]]
> test-server/bin/mysql_install_db
[[/src]]

3.サーバを起動する。
[[src]]
> test-server/bin/mysqld -u root &
[[/src]]

4.クライアントを起動する。
[[src]]
> test-server/bin/mysql
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1 to server version: 4.1.3-beta

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql>
[[/src]]

5.rootユーザの削除、不要なシステムカラムの削除、cbrootユーザの作成を行う。
[[src]]
mysql> use mysql;
mysql> delete from user;
mysql> delete from host;
mysql> delete from db;
mysql> delete from tables_priv;
mysql> delete from columns_priv;
mysql> grant all privileges on *.* to cbroot@"%" identified by '（パスワード）' with grant option;
mysql> grant replication slave on *.* to cbslave@"%" identified by '（パスワード）';
mysql> flush privileges;
mysql> exit;
[[/src]]

6.サーバを停止する。
[[src]]
> test-server/bin/mysqladmin shutdown
[[/src]]

7.data/mysql.zipをチェックアウトする。
[[src]]
> cvs checkout data
> cd data
[[/src]]

8.データを更新する。
[[src]]
> mkdir data
> cp -r ../test-server/data/mysql data/
> rm mysql.zip
> zip mysql.zip -r data
> rm -fr data
[[/src]]

9.コミット。
[[src]]
> cvs commit -m "Update data/mysql.zip"
[[/src]]

[[PHP|head:]]
[[PHP|doc:ext/azalea_php4]] は簡単インストールを実現するために CGI の起動処理部分にサイボウズ独自のパッチをあてています。それ以外にも PHP の不安定な動作を回避する為のパッチや、ビルドスクリプトの変更等が含まれているため、インポート作業は MySQL よりかなり複雑になっています。ただし、その反面ソースは Windows と UNIX で共用のため、作業自体は一回で済みます。

#新バージョンをインポートする。
 cvs import -ko -m "PHP 4.3.3" php/php-4.3.3 PHP original
#旧バージョンの差分を抽出する。
 例: cd php-4.3.2; cvs diff -c -N -r original > ../php.patch
#差分を検査し、不要な個所を削除する。特に新バージョンで修正された不具合に対する差分には注意してください。
#モジュール定義を更新する。
 例: cvs checkout CVSROOT; cd CVSROOT; vi modules; cvs commit
#定義したモジュールをチェックアウトする。
 例: cvs checkout php-4.3.3
#3 で検査した差分をチェックアウトしたソースに当てる。
 もし patch コマンドによる自動パッチ当てに失敗した場合は、手動で行う。
 例: cd php-4.3.3; patch -p 0 < ../php.patch
#追加したファイルがある場合は cvs add, 削除したファイルがある場合は cvs remove する。
#ビルドして正常に動作することを確認する。
 もし VC++ のプロジェクトファイルのパッチ当てに失敗していた場合、VC++ 上で手動でプロジェクトの設定などを更新する必要があります。旧バージョンの設定を参考にしつつ行ってください。

[[PEAR|head:]]
PEAR は SDK に含まれるバージョンと、製品配布時用に開発用のパッケージを省いたバージョンの 2つを管理する必要があります。この部分は UNIX 版のビルドシステムで半自動化されています。

#[[UNIX 版|doc:fw/developer/unix]] をビルドする。
#/usr/local/cybozu/php-X.X/lib ディレクトリに ZIP アーカイブができている。(''pear.zip'')

上記の UNIX でのビルド結果を利用した PEAR パッケージの管理を、以下の手順で行う。

#インポートしたい日付(YYYYMMDD)でビルドする。
#ZIP アーカイブを取り寄せて展開し、CVS にインポートする。
[[src]]
unzip pear.zip
cd pear
cvs import -ko pear/pear-YYYYMMDD PEAR original
[[/src]]
インポートする際のコメントは、以下のように [[pear list コマンド|doc:general/php4/basic#pear]]で取得したパッケージとバージョンの一覧を記入してください。
[[src]]
INSTALLED PACKAGES:
===================
PACKAGE        VERSION   STATE
Archive_Tar    1.1       stable
Auth_SASL      1.0.1     stable
Console_Getopt 1.0       stable
Date           1.3.1beta beta
HTTP           1.2.1     stable
HTTP_Request   1.2       stable
Mail           1.1.2     stable
Mail_Mime      1.2.1     stable
Net_DIME       0.3       beta
Net_IMAP       0.6       beta
Net_POP3       1.2       stable
Net_SMTP       1.2.3     stable
Net_Socket     1.0.1     stable
Net_URL        1.0.10    stable
PEAR           1.2.1     stable
SOAP           0.8RC2    beta
XML_Parser     1.0.1     stable
XML_RPC        1.0.4     stable
XML_RSS        0.9.2     stable
XML_Serializer 0.9.1     beta
XML_Tree       2.0b2     beta
XML_Util       0.5.1     stable
[[/src]]
#現在のバージョンで差分を取る。
 cd azalea_unix/code/pear; cvs diff -c -N -r original > ../../pear.patch
#差分を検査し、不要な個所を削除する。特に新バージョンで修正された不具合に対する差分には注意せしてください。
#モジュール定義を更新する。
 cvs checkout CVSROOT; cd CVSROOT; vi modules; cvs commit
#現在の PEAR パッケージを削除し、定義したモジュールをチェックアウトする。
 cd azalea_unix; rm -rf code/pear; cvs checkout pear-YYYYMMDD
#差分のパッチをあてる。
 cd code/pear; patch -p 0 < ../../pear.patch

[[Smarty|head:]]
Smarty は LGPL ライセンスのコンポーネントであるため、原則としてサイボウズ独自のパッチをあてることはしません。ただしソースツリーを展開したディレクトリに、サイボウズ製のプラグイン関数などを配置しています。これら追加したファイルを漏れなく引き継ぐ必要があります。

#新バージョンをインポートする。
 cvs import -ko -m "Smarty-2.6.6" smarty/smarty-2.6.0 Smarty original
#旧バージョンの差分を抽出する。
 例: cd code/smarty; cvs diff -c -N -r original > ../../smarty.patch
#モジュール定義を更新する。
 例: cvs checkout CVSROOT; cd CVSROOT; vi modules; cvs commit
#現在の Smarty を削除し、定義したモジュールをチェックアウトする。
 rm -rf code/smarty; cvs checkout smarty-2.6.0
#差分のパッチをあてる。
 cd code/smarty; patch -p 0 < ../../smarty.patch
#追加したファイルについて cvs add する。

[[サイボウズ内製のコンポーネント|head:]]
サイボウズ内製のコンポーネントについては、普通にコンポーネントごとに CVS リポジトリを作成し、タグ付けと分岐(ブランチ)によるバージョン管理を行います。詳細については[[リリース管理|doc:fw/developer/rm]]を参照してください。

[[ライセンスチェック|section:license]]
新規に外部コンポーネントを追加する際は、必ず法務にライセンスのチェックを依頼してください。
 取り込み済みのモジュールをバージョンアップする際も、必ずライセンスファイルの差分をチェックしてください。
新たな文言等が1行追加されたりすることが間々ありますので、もし変更されている場合は法務にチェックを依頼してください。
