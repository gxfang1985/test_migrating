[[ロケールコードとは|section:about]]

サイボウズ製品で、アプリケーションが表示する言語を指定するためのコードです。

コード体系は、新規のものを発明するのではなく、
一般的に利用されている方式(POSIX 1003.1)と同じものを採用します。
（これは、わざわざ亜種を作る理由がないというだけの理由からです。）

ただし、検討の結果、3つめの文字コードに関するパラメータは、利用しないものとします。
これは、文字コード指定がされた場合に、
その文字コードに変換して出力することは問題なくできるため、
文字コード別にリソースを持つ必要性がないことが判明したからです。

[[src]]
  (言語)[_(地域)]
  (language)[_(territory)]     : in English
[[/src]]

言語コードは、[[ISO 639-1|http://www.loc.gov/standards/iso639-2/langcodes.html]]
の2文字コードを利用します。必ず小文字2文字でなければなりません。

地域コードは、[[ISO 3166|http://www.oasis-open.org/cover/country3166.html]]
の国コードを利用します。必ず大文字2文字でなければなりません。
指定の必要がないときは、省略することができます。

[[言語以外の情報はつけない|head:]]
ロケールシステムを持つ他のシステムや製品を見ると、
文字コードを持たせたり(ja_JP.sjis)、
24時間表記/午前午後表記を持たせたり(ja_JP,24h)、
ロケール情報にどんどん情報を付加していくというものが見られます。 

新フレームワークでは、これらの他の情報は、
システム設定やユーザ設定で別の場所に保存すべきもの、独立して扱えるもの、とします。
別のものは別に管理、としたほうが、簡単でよいという判断です。 

[[ロケールコード|section:locale_code]]

[[これまで利用可能だったロケール|head:]]
現状までの製品(Office6など)をカバーする範囲として、
以下のロケールコードを利用可能とします。
特にロケールを選択する機構はないため、
このロケール名が製品で意識されたことはありません。

[[html]]
<table class="cb_doc_table">
<tr>
<th nowrap>コード</th>
<th nowrap>説明</th>
</tr>
<tr>
<td nowrap>ja</td>
<td nworap>日本語（Shift-JIS）</td>
</tr>
</table>
[[/html]]

現状までの製品(Share360 version2)をカバーする範囲として、
以下のロケールコードを利用可能とします。

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>コード</th><th nowrap>説明</th></tr>
<tr><td nowrap>ja</td><td nowrap>日本語</td></tr>
<tr><td nowrap>en</td><td nowrap>国際標準的な英語(=アメリカ英語を想定)</td></tr>
<tr><td nowrap>en_GB</td><td nowrap>イギリス英語</td></tr>
</table>
[[/html]]

参考: イギリス英語で、文字列を違えることはほとんどなく、
最大の違いは日付表記の違い(月/日/年のアメリカ式に対して、日/月/年)でした。

[[近いうちに使うことになるかもしれないロケール|head:]]
現時点での、国際版での対応予定ロケールを有力な順に書きます。

[[html]]
<table class="cb_doc_table">
  <tr>
    <th>コード</th>
    <th>説明</th>
  </tr>
  <tr>
    <td>de_DE</td>
    <td>ドイツのドイツ語</td>
  </tr>
  <tr>
    <td>fr_FR</td>
    <td>フランスのフランス語</td>
  </tr>
  <tr>
    <td>it_IT</td>
    <td>イタリアのイタリア語</td>
  </tr>
  <tr>
    <td>es_US</td>
    <td>アメリカのスペイン語</td>
  </tr>
  <tr>
    <td>es_ES</td>
    <td>スペインのスペイン語</td>
  </tr>
  <tr>
    <td>fr_CA</td>
    <td>カナダのフランス語</td>
  </tr>
  <tr>
    <td>kr</td>
    <td>韓国語</td>
  </tr>
  <tr>
    <td>zh_TW</td>
    <td>中国語(繁体字)</td>
  </tr>
</table>
[[/html]]

[[ロケールコードの優先順位ルール|section:priority_rule]]

[[html]]
<table class="cb_doc_table">
  <tr>
    <th>コード</th>
    <th>説明</th>
  </tr>
  <tr>
    <td>en_GB</td>
    <td>イギリス英語</td>
  </tr>
  <tr>
    <td>en</td>
    <td>英語</td>
  </tr>
  <tr>
    <td>未指定</td>
    <td>未指定の場合、システムデフォルトを利用します。日本語版では日本語(ja), 国際版では英語(en)となります。</td>
  </tr>
</table>
[[/html]]

この例では、イギリス英語としてのデータが、すべて個別に登録されているとは限りません。
むしろ、一般的に、en_GBロケールに登録されたデータは、
ベースとなるenロケールと「違うところだけ」のセットであることが普通です。 

ですから、en_GBというロケールで表示をしろ、と指示された場合、
1) en_GBにあればそれを使う。2)なければenのものを使う。
3)それもなければデフォルトのものを使う。という流れになります。
デフォルトロケールとして特定の言語(enやja)を使う場合は、
その言語がすべてのリソースを持っていることを保証してください。
デフォルトロケールでもメッセージが用意されていない場合は、
プログラムエラーが発生するようにします。

[[ロケールコードの使われ方|section:usage]]

[[リソースの指定に|head:]]
表示させる文字列を、どの言語で表示させるかを指定するのに使われます

[[ロケール毎に異なるファイルを格納する際のディレクトリ名に|head:]]
リソースデータの格納先を示すために使われます。

[[ロケールコードの実装|section:implement]]

[[セッションでのロケール管理|head:]]
セッションをキャッシュとして使うことで、
毎回個人設定やシステム設定を(DBのSELECTで)見に行くことを避けるようにします。
個人設定等を参照に行くタイミングは以下のとおりです。 

*ブラウザを開いて最初のアクセス時（==セッション情報が空のとき）
*ログイン時（ユーザは前回ログイン者と違うかもしれない）
*個人設定やシステム設定で、ロケール設定を変更したとき 

これ以外の場合、セッションに覚えているロケールを利用して、そのページを表示します。 

[[コマンドライン向けのロケール管理|head:]]
コマンドラインからフレームワークを呼び出す場合、ブラウザ経由ではないため、
セッションもなければ、個人設定/システム設定もない可能性があります。

コマンドラインで表示が可能な言語で、確実なものは英語だけなので、
デフォルトの出力(エラーメッセージも含む)は英語であることが望まれます。

システムデフォルトのロケールも、日本版では日本語(ja)かもしれないため、
システムデフォルトも頼ってはいけません。

セッションを参照する以外に、
コマンドラインから実施されたときに英語(en)ロケールがデフォルトになるような仕組みを入れる必要があります。

cb_get_current_locale()のような関数を用意し、コマンドラインからはこれを呼ばせます。
この関数は、さしあたり、英語("en")を固定で返しますが、
コマンドラインで他の言語に対応したくなった場合は、
関数を切り替えたり上書きしたりすることで、
個別に対処できるように含みを持たせておくものです。

[[ロケール管理とは|section:locale_management]]

サイボウズ製品で、そのアプリケーションで利用できるロケールを管理する仕組みです。
管理のためのキーとして、 ロケールコードを利用します。

[[ロケール一覧の定義|section:locale_define]]
アプリケーションでは、利用可能なロケールを定義できなければなりません。
利用可能なロケールは、製品の販売地域によって変更したり、
システムインテグレータによって調整したり、
インストーラで絞り込んだりできる必要があるので、
common.ini ファイルにて定義し、
容易に他のツール/インストーラ等から編集可能なようにします。

また、選択可能なロケールの一覧と同様、デフォルトのロケールについても、
外部からの編集が必要です。これも common.ini で定義します。 

common.ini 

[[src]]
[I18N]
available_locales = ja en en_GB
default_locale = ja
[[/src]]

上記の例で、jaは日本語、enは英語、en_GBは英語(イギリス)を表します。
この例では、ロケールに何を使っていいかわからないときは、ja(日本語)が利用されます。 

アプリケーションのインストーラは、この設定ファイルを書き換えることにより、
デフォルトロケールを定義して、何も設定しないときに表示される言語を設定したり、
切り替えられる言語を増減したりできます。 
言語パックの追加という形式である言語を提供する場合は、
言語パックのインストーラでこの設定ファイルを更新することになります。

例: 最初の製品は、UIとして日本語と英語を選択することができました。
これに、ドイツ語のリソースadd-onを販売しました。
リソースadd-onを追加したときに、
設定ファイルの選択可能なロケールにde(ドイツ語)を追加することで、
システム管理や個人設定で、言語の選択に「ドイツ語」が出て、
これを選ぶことで追加したドイツ語のリソースが利用できるようになります。
（ロケール管理の定義で、ドイツ語の表示名に関する定義は存在していなければなりません）

[[ロケール一覧の取得|section:locale_list]]
上記の、定義ファイルで定義したロケールの一覧を、
内部コードと表示名の組で取得することができるAPIが用意されます。
class CB_I18N の getLocaleNames() がそれです。

[[src]]
    $i18n = CB_I18N::getInstance();
    $i18n->getLocaleNames();
[[/src]]

ここで得られたコード一覧と表示名を利用して、
表示言語を切り替えるUIを作ることが可能です。

[[ロケール一覧自身の国際化|head:]]
UI上で、ユーザにロケールの選択を行なわせるためには、
各ロケールに対応した名前を、対応しているすべての言語で表示できる必要があります。

つまり、

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>内部コード</th><th nowrap>メニュー上の表示</th></tr>
<tr><td nowrap>ja</td><td nowrap>日本語</td></tr>
<tr><td nowrap>en</td><td nowrap>英語</td></tr>
</table>
[[/html]]

というメニューがあれば、表示ロケールが英語のときのために、

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>内部コード</th><th nowrap>メニュー上の表示</th></tr>
<tr><td nowrap>ja</td><td nowrap>Japanese</td></tr>
<tr><td nowrap>en</td><td nowrap>English</td></tr>
</table>
[[/html]]

というメニューも必要になる、ということです。
この表示名定義は、言語x言語の組み合わせ数だけ必要になります。
[[locale/available_locales.csp]] がこの定義になります。 

[[リソースの追加削除機能|section:resource]]
リソースキットを別売にしたり、別配布にしたり、したければ、
それなりの仕組みが必要になります。

対応言語を増やすことでは追加料金を取らず、
新しいリビジョンにアップデートさせれば追加された新言語が使えるようになる、
ということであれば、仕組みとしてはずっと簡単。

このあたりは、製品ごとの国際化展開プランに依存するので、
必要だったらフレームワークを拡張してもらう。
目先はもっとも簡単に、常に出来上がった全言語リソースをつけて配るものとします。

リソース量はたいしたことないので、ダウンロードサイズを小さくするために、
メインとadd-onを分割するというのも、当面は考えません。
（対応言語のリソースは常に全部入れてパッケージを作ります）

[[ブラウザ情報のロケール|section:browser]]
HTTP_ACCEPT_ENCODING 情報で、
ブラウザからユーザの望むエンコーディング情報が送られてくる。
（例 "ja, en" この場合、日本語が最も望ましく、なければ英語でもよい、ということになる）
この情報を使う場合について述べる。

ブラウザの設定に依存して表示言語を変えるようにすると、
表示言語をアプリケーション側で記憶する必要はなくなるが、これは基本的にはやらない。
一つはサポートの問題。
ブラウザの設定はブラウザ毎に違うし、
アプリケーションの大きな動作の違い（表示言語）
を直すためにブラウザ側の設定の案内をするのは大変だから。
また、ブラウザの設定とは別に、
サイボウズアプリケーションでの表示言語を決めたい場合や、
システム管理者が全ユーザの初期設定をある言語に設定したい場合なども考えられる。

唯一、この情報を使うのは、ログイン画面になる。
ログイン前のこの画面では、ログイン者の情報もセッション情報もないため、
どの言語で表示してよいか判断する材料がない。
このときに、HTTP_ACCEPT_ENCODING情報を元にログイン画面をどの言語で表示するかを切り替える。
ただし、この設定も、システム設定でアプリケーションのデフォルト言語に固定とすることもできるようにしたほうがよい。
（依然として、ユーザのブラウザ設定に依存すると管理工数が増える可能性があるため）

[[リソースセット削除時の問題|section:problem]]
**リソースadd-onの削除は、当面考えません。これをやるときには、以下の問題が発生します。**

リソースadd-onの削除が可能だとすると、
今現在そのロケールを選択しているユーザをどうするか、という問題が出てきます。 

*削除するロケールを選択している設定（システム/個人）を、
存続するロケールに一斉に切り替える。
切り替え先の言語をどれにするかというルールが必要。
（システムデフォルトか? 個人設定の場合はシステム管理の全社設定か?）
*ユーザによっては、セッションの途中でリソースデータがなくなってしまうかもしれない。
まあこれは、見つからなければ英語が表示されるからいいか? 
