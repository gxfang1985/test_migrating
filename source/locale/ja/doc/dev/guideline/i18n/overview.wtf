[[ToDo|section:todo]]
*アゼリアにおける国際化対応の一覧をまとめるページとする

[[アプリケーションの国際化とは|section:i18n]]

[[概要|head:]]

アプリケーションの表示やデータ処理について、言語や地域に依存した部分を切り離し、
切り替えられるようにすることです。

言語や地域に固有の情報をデータとして切り分けることで、
プログラム部分の改造をすることなく、対応する言語を増やしていくことができるようになります。

国際化のことを、Internationalization, I18Nなどとも言います。
（I18Nというのは、IとNの間に18文字あることから考え出された省略形です。）

国際化したものをベースに、地域化（Localization, L10N）をして、
日本語版、英語版、ドイツ語版などを別々に作成するというレベルの国際化もありますが、
新フレームワークでは、同一アプリケーション上で言語や地域の設定を変更し、
利用者によって利用言語が別々に切り替えられることを目標とします。

また、入力されたデータにおいては、多言語化（Multilingulization, M17N）を実現します。
多言語化とは、たとえば、日本語とドイツ語を、
同じメッセージの中に混ぜて書くことができるということです。
これは、各国語のデータを同じコード体系で格納できるUnicode（ユニコード）を利用することにより実現します。

*参考：[[文字と言語の実験室|http://homepage1.nifty.com/susho/mling/]]

[[国際化しないアプリケーション|head:]]

将来に渡っても、ある一言語以外の表示を必要としないアプリケーションを開発する場合、
国際化機構を使わずに済ませることは可能です。
その場合、プログラム中の文字列はすべてその言語で直接書き込みます。

テンプレートファイルに、直接対象の言語を書き込んでください。

[[切り替えの範囲|head:]]

アプリケーション上での言語の切り替えは、以下のレベルでなされます。 

*システムとしてのデフォルト値を持つ 
*アプリケーション全体での指定を持つ
（システム設定。管理者が設定できる項目になります）
*個別ユーザごとの指定を持つ（ユーザ管理。ユーザ毎の設定に含まれることになります）

新フレームワーク上で開発され、国際化されたアプリケーションは、
まず、システムとしてのデフォルト値を持ちます。これは、 

*アプリケーションが最初にインストールされたときに参照されるロケール 
*管理者も、ユーザも設定しなかった項目に対して利用されるロケール 

です。たとえば、日本で日本語の顧客向けに販売するバージョンのインストーラでは、
インストール終了時に、システムのデフォルトが日本語となるような設定を行ないます。 

[[切り替えの対象|head:]]

ロケールによって表記や挙動が変わるものとして、以下が考えられます。 

*画面メッセージ 
*アイコン（可能なかぎり、ユニバーサルデザインにより、同じものを使えるようにする）
*数値、通貨表記（ワークフロー上）
*日付時刻の表記 
*カレンダー表記 
*ソート順 
*製品名（画面メッセージの切り替え機構に統合できるか検討中）
*各アプリケーション名（画面メッセージの切り替え機構に統合できるか検討中）
*ロケール自身の表示名の一覧（画面メッセージの切り替え機構に統合できるか検討中）

以下の機能 

*機能（可能なかぎり同一とするが、特に日本市場固有で必要な機能, 
インターネット連携やビジネス情報など）

については、元々モジュール毎に有効/無効が切り替えられるような仕組みは共通で持たせておき、
運用者が無効にすることもできれば、
製品出荷時に出荷先の国にあわせて無効にしたりできるよう、
共通して使える機構があれば、国際化による切り替えの対象とする必要はないと考えています。

[[エンドユーザ|section:enduser]]

[[クライアント側のローカルエンコーディング|head:]]

サーバ内部のエンコーディングをUTF-8にしても、
これまでのエンコーディングを扱うことが必要な場合があります。

[[ブラウザによるもの|head:]]

Netscape 4.7xはUTF-8を正しく表示できないため、
このブラウザを対応ブラウザとする場合、
エンコーディングを変換したページを生成する必要があります。
その場合、多言語を混ぜて表示することができなくなります。
（英語はどの言語とでも混在表示可能）

この場合、もし表示データに英語を除く2言語が混在していた場合、
主言語（正しく表示されることが期待されている言語、
そのときのそのユーザのロケールで示される言語でしょう）は正しく表示され、
それ以外の言語は表示不可能であることを示す代替キャラクタで表示されるように変換すべきです。

[[他アプリケーションとの連携の都合|head:]]

CSVファイルは、Microsoft Excelで編集させることを前提にしている場合、
Windowsのそのロケールでのエンコーディングで読み書きされる必要があります。
このエンコーディングとは、米国や西欧ではiso-8859-1（Western European）、
日本語ではShift-JIS（シフトジス）となります。

iCalendar, vCardなど、外部とデータをやりとりするファイルでは、
エンコーディング情報を付加したファイルを作るのが正しい作法ですが、
相手側のアプリケーションによっては、エンコーディング情報を空にして、
特定のエンコーディングであることを仮定した上で読み込みます。
よって、ここでも、指定したエンコーディングで入出力される必要があります。

ファイルへの保存。保存したファイルを開くアプリケーションによって、
ローカルのエンコーディングに変換して保存しなければならないことがあります。

メール。相手側のメーラに、Unicode(UTF-8)を扱えないものがあるので、
指定したエンコーディングで送信できる必要があります。
受信側は、メールヘッダの情報からエンコーディングを正しく解釈し、
フレームワークの内部エンコーディングに変換して格納することになります。
また、UTF-8以外でのメール送信時には、指定したエンコーディングに含まれない文字、
つまり正しく送信できない文字が、
これから送信しようとするメールに含まれていないかをチェックし、
エラーを出す必要があります。

Outlookシンク 相手側OutlookにAPI経由でフィールドを読み書きする際のエンコーディングは、
そのOutlookのデフォルトローカルエンコーディングにする。（UTF-8のまま渡せるかは未確認）

Pocket PCシンク Pocket PCは何語版かでローカルエンコーディングが決まっている
（Unicodeではない。今までのところ）ので、それに変換して読み書きする必要がある。

Palmシンク Palmは何語版かでローカルエンコーディングが決まっている
（Unicodeではない。今までのところ）ので、それに変換して読み書きする必要がある。

リマインダー クライアントOSのエンコーディングに変換要

[[新フレームワークで実現しない国際化|section:not]]

要件、工数、実現可能性などから、
新フレームワークでは対応しないことが決まっている項目をあげておきます。 

*同時に複数の言語によるUIを表示しない
（格納したデータについては、UTF-8なので何言語でも混在可能）。
同じページ内に、一部をドイツ語、一部を日本語、といったUIを表示できるようにはしません。
ある時点でのロケール指定は1つとします。
（要件がない。実装が複雑になる。性能劣化が予想される。）
*フォントの自由な変更を許しません。
フォントを指定せず、クライアントブラウザのデフォルトフォントを使うか、
対応する全言語のグリフを持つフォントを利用する。 

以下の項目は、やれば対応できるかもしれませんが、当面の予定はありません。 

*西暦以外の暦。（和暦, アラビア暦, ユダヤ暦等）
*テキスト表記が逆順になる言語（アラビア語、ヘブライ語）への対応。
HTMLの指定だけで実施できるため、必要性が出てくれば、
ロケール+UIフレームワークで対応は可能です。 
