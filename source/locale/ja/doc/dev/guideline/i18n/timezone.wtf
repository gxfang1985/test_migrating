[[概要（マルチタイムゾーンとは）|section:abstract]]
マルチタイムゾーン対応とは、複数の異なるタイムゾーンから、
同じサイボウズ製品にアクセスしたときに、それぞれのユーザから、
自分のいる地域のタイムゾーンで時刻が表示されるようにすることです。

たとえば、Officeのトップページに表示される時刻が、
サーバの置かれている地域の時刻ではなく、
自分が今いる地域の時刻で表示されるということです。

あるいは、日本の朝10:00に書き込んだ社内メールの書き込み時刻が、
サンフランシスコの受信者から開いてみたときに、5:00PMとして表示される、ということです。

[[src]]
 +----------------------------+                                 
 |東京                        |                                 
 |                            |                                 
 | +----------------------+   |      +-------------------------+
 | |2003年8月13日 10時00分|   |      |サンフランシスコ         |
 | +----------------------+   |      |   +-------------------+ |
 |                            |      |   | 8/12/2003 05:00 PM| |
 +----------------+-----------+      |   +-------------------+ |
                  |                  |                         |
                  |                  +-+-----------------------+
                  |                    |                        
                  |                    |                        
     変換して表示 |                    |                        
                  |                    | 変換して表示           
                  |                    |                        
                  |                    |                        
                  |                    |                        
               +--+--------------------+------+                 
               |サイボウズアプリケーション    |                 
               |                              |                 
               |                              |                 
               |   標準時(UTC)                |                 
               | +-------------------------+  |                 
               | |2003-08-13 01:00:00 +0000|  |                 
               | +-------------------------+  |                 
               |                              |                 
               +------------------------------+                 
[[/src]]

また、一つのサーバを複数のタイムゾーンにいるユーザがアクセスし、
スケジュールを共有したりする場合も考えられます。
小規模向け製品では必要性が低いかもしれませんが、

*一つの国や地域の中でも時差が存在するところに売る場合(アメリカ、オーストラリア等) 
*海外出張からリモートでアクセスさせたい場合 
*大企業で複数国の事業所から使いたい場合 

などに、個々のユーザの居る場所のタイムゾーンによって、
変換した時刻を表示する必要性が出てきます。 

[[日付と時刻の関係|section:date_time]]

現行フレームワークでは、日付(Date)、時刻(Time)、
日付時刻(DateTime)の3つのデータを扱っていますが、
マルチタイムゾーンを考えた場合、内部的には日付と時刻の両方を持つ、
日付時刻型で処理をしなければなりません。 

これは、マルチタイムゾーン間の時刻変換をするアプリケーションでは、
「今日」の何時、というデータの取り方が混乱を招くからです。
「今日」の指す24時間を、時刻の指しているタイムゾーンの24時間と合わせて、
組み合わせた結果を、ローカル時に合わせて再変換し、表示する、ということになります。
Share360のマルチタイムゾーン化では、ページ間のデータの連絡やCyDEでのデータの保存に、
日付を持たない時刻だけのデータが使われていて、
その結果この「その場その場で日付を補完する計算」が多発し、
プログラムのわかりにくさと、性能劣化を引き起こしています。

時間の間隔を表現する際も同様で、日付を一つと、時刻を二つ(開始時刻と終了時刻)でもって、
特定の日の時間の範囲を表そうとすると、
タイムゾーン変換を行なった際に非常にわかりにくくなります。
変換後の時刻は、二つの日にまたがって存在するかもしれないからです。

もちろん、日付と時刻を組み合わせる際に、今どのタイムゾーンで作業しているのか、
ということを常に把握して変換すれば、この問題は発生しません。
しかし、内部的な時刻と時刻の比較や、時刻と時刻の間隔を求める演算、などは、
すべて一つのタイムゾーン(要するにUTC)で行なったほうが、はるかにすっきりします。

[[日付時刻の演算/比較|head:]]
旧フレームワークでは個別に行なっている、二つの日付時刻の間の開きを求める演算、
日付時刻の前後の比較、先月/先週/来週/来月などの演算、
ある時刻がある日（ある週、ある月、ある年）に属しているかどうかのチェック、等は、
重複して持たないように日付時刻クラスが持つことが望まれます。
マルチタイムゾーンの処理についても、そのほうが間違いの発生を減らせると考えます。

[[マルチプラットフォーム対応と時差、DST|section:dst]]
各タイムゾーンのDSTと非DSTの切り替え日と時間は、
その地域/国によってばらばらに定義されます。

[[html]]
<table class="cb_doc_table">
<tr><th>地域</th><th>DSTの開始</th><th>DSTの終了</th></tr>
<tr><td>米国</td><td>4月の第一日曜日午前2時</td><td>10月の最終日曜日午前2時</td></tr>
<tr><td>英国</td><td>3月の最終日曜日午前1時</td><td>10月の最終日曜日午前2時</td></tr>
</table>
[[/html]]

ヨーロッパは、3月の最終日曜日の切り替えが多いようです。
[[参考: 2003年前半切り替えの表|http://www.timeanddate.com/time/dst2003a.html]]

現行Share360v2でも、この部分は不完全な対応となっており、
サーバOSの側で設定されているタイムゾーンでの切り替え日を使ってDSTを切り替えしています。
よって、サーバがアメリカにあった場合、
アメリカのタイムゾーンで使っているユーザはアメリカのルールでDSTに変わるため問題ありませんが、
同じサーバにイギリスからアクセスしているユーザは、
イギリスにいるのにアメリカ式の切り替えがされてしまいます。
そこの1週間は、1時間ずれたスケジュールが表示されます。
（サーバがイギリスにある場合は問題ないので、レアケースではあります）

この切り替えの情報ですが、Linuxでは、/usr/share/zoneinfo に、
各地域の毎年の切り替え日時が、コンパイルされた形で入っています。
[[Managing Accurate Date and Time（日本語訳）|http://www.linux.or.jp/JF/JFdocs/TimePrecision-HOWTO/index.html]]

Windowsでは、ユーザができる形ではありませんが、
システムが切り替え日の情報を持っているものと思われます。

これらの情報は、UTCとローカルタイムゾーンの変換を行なうときに使われているようですが、
（環境変数TZを切り替えることなく）別のタイムゾーンのある日時がDSTかどうかを、
直接調べるAPIはなさそうです。

アプリケーションからの使いやすさを考えて、このあたりをラップして、
プラットフォーム非依存に問い合わせできるAPIを用意する必要があるでしょう。

[[src]]
    CB_DateTime $dateTime =& ...;
    if ($dateTime.isDst($timezone)) {
        echo "Unixタイム $dateTime は timezone=$timezone ではDSTです";
    }
[[/src]]
[[src]]
    CB_LocalDateTime $localDateTime =& ...;
    if ($localDateTime.isDst()) {
        echo "ローカル時 $localDateTime はDSTです";
    }
[[/src]]

後者は、正確には切り替え時の判定を正しく行なえません。が、まあおおむねOKといえます。

これを実装する際に、各タイムゾーンでのDST有無や切り替え日時のデータが必要になります。
Linuxのzoneinfoがライセンス的に問題なければ、それを持たせるのでしょうか。
データを自分で持てれば、Windows版であろうと同じ日時は同じ結果になります。

この定義は、国によっては十年先でも変わりませんが、
各国の政府等が定義して発表して変わっていくものもありそうです。
（古いLinux上でzoneinfoを見ると、最近分の定義がないものもあります。）

マルチプラットフォームで齟齬が発生しないなら、
OSの情報を使って、データが古くなったらOSをアップデートしてくれ、
としたほうが楽なのですが。 

[[アプリケーションとマルチタイムゾーン化|section:application]]

[[ほとんどのアプリでは単純な変換で済む|head:]]
登録や更新の時刻を記録したり、表示したりする処理は、
マルチタイムゾーン化でもそれほど複雑にはなりません。
記録されている時刻と、表示したいタイムゾーンの二つの情報から、
適宜変換して表示したり記録したりするだけです。

[[スケジューラのマルチタイムゾーン化はたいへん|head:]]
現行製品で、一つだけたいへんなのが、スケジューラ製品です。

繰り返しスケジュールとDSTには、
人間の考える自然さと内部データの整合性で食い違いがでる場合があります。
例をあげて説明します。

サンフランシスコで、夏に、毎日、朝9時から10時までの会議を入れたとします。
このスケジュールの時刻を、UTCで保存したとすると、
冬にこの繰り返しスケジュールを見たとき、
UTCに対するサンフランシスコのタイムゾーンが1時間遠くになっているので、
朝8時から9時として表示されてしまいます。

つまり、サンフランシスコで「毎朝9時から10時」と言ったとき、
ユーザから見れば、UTCでの絶対時ではなく、その地域のローカルの時刻で、
表記上9時から10時であることが重要、ということになります。
季節がどうであろうと、9時から10時といえば9時から10時なわけです。

よって、繰り返しスケジュールについては、
「その繰り返しを設定したときが夏か冬か」
というカラムを用意しておく必要があるということになります。
設定したときの季節とその日の季節が違う場合は、UTCから変換する際に、
補正を入れる必要が出てきます。 

さらに、この繰り返しスケジュールを、
東京とサンフランシスコで共有した場合はどうでしょうか。
サンフランシスコ側の表示時刻を固定したとすると、 

[[html]]
<table class="cb_doc_table">
<tr><th>季節</th><th>サンフランシスコ</th><th>東京</th><th>備考</th></tr>
<tr><td>6月</td><td>16:00-17:00</td><td>翌日 08:00-09:00</td><td>DSTにより時差が16時間</td></tr>
<tr><td>12月</td><td>16:00-17:00</td><td>翌日 09:00-10:00</td><td>時差は17時間</td></tr>
</table>
[[/html]]

となります。サンフランシスコ側の時刻を季節に無関係に固定したことで、
他の地域の繰り返しスケジュールは、季節によって変動することになります。 

これを、さらに日本側から編集したりする場合も考えると、
何らかのルールを設けないと、混乱が広がるばかりになってしまいます。
Share360v2では、繰り返しイベントに、
「作成時の作成者のタイムゾーン」というフィールドを持たせることで、
季節によって変動しない時刻は、どこを基準にするかを記憶させています。
ここで、「作成時の」としたのは、作成者のユーザのタイムゾーン設定だけを覚えても、
そのユーザがタイムゾーンを変えることがあるからです。 

[[タイムシート|head:]]
タイムシートの時刻は、気をつける必要があります。

タイムシートには、自動打刻で何時からをその日の開始にするか、という時刻があります。
この時刻は、サーバ時刻に変換すべきものではありません。
米国の工場で早朝4時が切り替え時刻であれば、
日本の営業所でも早朝4時が一日の切れ目でしょう。
時差にあわせて、早朝4時が夜8時になったりはしません。
（細かくいうと、事業所ごと切れ目の時刻を変えたい顧客もいるかもしれませんが、
それはタイムゾーンとは無関係の別の話です）

就業時間の設定にも、同様のことが言えるでしょう。
朝9時から夜6時まで、就業時間として色をつけたり、扱いを変えたりする場合、
その時刻は、タイムゾーンやサーバ時刻とは無関係に固定の時刻です。

[[サーバ内部時刻|section:internal]]

[[UTCを使う設計|head:]]
データベースへの記録や、内部的な演算処理では、UTCを使うという方式です。
ユーザの入力は、上位のレイヤでUTCに変換されます。
ユーザへの出力は、上位のレイヤでユーザのローカル時刻に再び変換され、表示されます。

[[サーバのローカル時刻を使う設計|head:]]
上記とは別に、すべてをローカル時刻で扱う方法があります。
Share360v2を除く現行製品はこの方式です。
内部に格納した時刻をそのまま表示するため、
ユーザ全員が一つのタイムゾーンでしか活動しない状況では、
まったく問題が発生する余地がありません。
しかし、この方式で作成したアプリケーションをマルチタイムゾーン対応にするのは、
たいへん困難になります。

[[内部時刻についての結論|head:]]
ローカル版とマルチタイムゾーン版の二つを作るよりは、
UTCを基準にマルチタイムゾーン版を作成し、
一国でしか使わないユーザにはその設定で使ってもらうのが現実解と考えます。

[[実例|section:sample]]
Share360 version2のマルチタイムゾーン化で発生した問題点事例

[[スケジューラ|head:]]
アプリケーション固有の話で、フレームワークではないと思うが、
スケジューラで最も問題が発生した。

一日のイベントは、他の地域では2日にまたがるイベントになりうる。
「毎日」の繰り返しイベントの場合、一日の最初のほうと最後のほうに、
（実際には別の回の）同じイベントが存在することになり、
一日に同じイベントが2度出てくることを想定していなかったUIでの表示に困った。
実際に、翌日繰越分は表示できていない（制限）。

共有されたイベントを、異なるタイムゾーンで時間をずらしていくと、
毎平日だったイベントが、どのタイムゾーンでも火曜?土曜にずれてしまうということも起こる。

[[用語定義|section:word]]

[[Time zone/タイムゾーン |head:]]
ローカルの時刻が同じ国や地域
[[世界各地のタイムゾーンと、その地域でのローカル時刻|http://www.timeanddate.com/worldclock/]]

*UTCからの差はプラスマイナス12時間以内と仮定してはいけない。
ニュージーランドなどは夏（12月）に+13時間となる。
つまり、最も西の地域と最も東の地域の間の時間差は、24時間以上になることがある。
（実際、Corpの顧客の、フィジーにある大学では、分校が日付変更線の向こうにある。）
*夏時間の切り替えが同じ日程の地域では、国をまたがって同じタイムゾーンを使うことがある。
（アメリカ東部とカナダ東部、アメリカ西部とカナダ西部、など）

[[UTC/協定世界時(Coordinate Universal Time) |head:]]
いわゆる世界標準時。元のグリニッジ時刻(イギリスには夏時間があるので、
イギリス時刻BSTは必ずしもUTCと一致しないことに注意) 

[[DST(Daylight Saving Time)/サマータイム（正確には違う）|head:]]
夏にローカル時刻を繰り上げることで、日没の時刻を遅くするシステム。
緯度の高い地域や国で多く採用されている（緯度が高いと効果が高いため）。 

*通常は+1時間だが、そうでない地域(+0.5とか)もあるので注意。 
*南半球では夏は10月?3月になるため、DSTもこの期間(北半休と逆)となる 
*何月何日から何月何日までDSTになるかは、それぞれの国や地方の政府が決めていて、ばらばら
*DSTと非DSTの切り替え時には、同じ時間が2回繰り返したり、時間が飛ばされたりする 
*DSTと非DSTの切り替えは、深夜に行なわれるが、これが何時かは国や地方によってばらばら

[[タイムゾーンの3(4)文字表記 |head:]]
Windowsの関数は、4文字以上の表記はうけつけない。
3文字にカットしたものを渡さなければ正しく動かない。

[[タイムゾーンのMicrosoft式?表記|head:]]

[[参考資料|section:reference]]
*[[世界中の時刻やDST情報を得られるウェブサイト|http://www.timeanddate.com/]]
