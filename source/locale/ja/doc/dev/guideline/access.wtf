[[ToDo|section:todo]]
これ全然 obsolete。Ogreの RBAC を参考にするように記述。
 基本、アゼリアでは詳細なアクセス権の実装は定義しない。UUMのロール認証のみ。

[[アクセス権とは|section:whats]]

[[アクセスコントロールリスト (ACL)|section:acl]]

[[ACLの実装|section:implement]]

↓のようなイメージ。ユーザー、グループ、ロールで 3 テーブル作成するほうがコーディングの手間はかかるが、素早くアクセス可能なデータ構造となる。
 これは典型的なパターンなので、テンプレートを生成するツールを用意すると良さそう。

[[src]]
{{/**}}
{{ * 掲示板のトップレベルにある操作の一覧 (個々のカテゴリーではない)}}
{{ */}}
class BulletinAccess extends CB_PersistentBase
{
    var $col_allow_create_category = array('type'=>'int');
    var $col_allow_delete_category = array('type'=>'int');
    var $col_allow_post_article = array('type'=>'int');
}

class BulletinAccess_User extends BulletinAccess
{
    {{// リレーションは自動的にインデックスされる}}
    var $col_user = array('type'=>'relation', 'to'=>'CB_User');
}

class BulletinAccess_Group extends BulletinAccess
{
    {{// リレーションは自動的にインデックスされる}}
    var $col_group = array('type'=>'relation', 'to'=>'CB_Group');
}

class BulletinAccess_Role extends BulletinAccess
{
    var $col_role = array('type'=>'char');
    var $idx_role = array('unique'=>TRUE);
}
[[/src]]

実際のチェックは ''コントローラー'' の仕事になる。ユーザーの認証などはコントローラーの仕事であり、モデルではない。
 モデルはただただデータ操作のみを行う。例えば下記のようになる。これもテンプレートとかヘルパークラスとか用意するべきだろう。

[[src]]
{{/**}}
{{ * 掲示板に指定したアクションができるか？ ( 'post_article' 等)}}
{{ * **これはコントローラーの一部であり、絶対にモデルに入れてはならない**}}
{{ *}}
{{ * @param string $action   実行したいアクション}}
{{ * @return bool            実行可能なら TRUE, 不可能なら FALSE}}
{{ */}}
function access_bulletin( $action )
{
    $roles = $uum->getRoles();
    $user =& $uum->getLoginUser();
    $groups = array();
    if ( $user )
    {
        $groups = $uum->getUserGroups( $user->getOID() );
    }

    {{// Everyone 等のロールに設定された権限からチェックするのが効果的}}
    $table =& cb_class2table( '**BulletinAccess_Role**' );
    foreach( $roles as $role )
    {
        $rowset = new CB_RowSet( $table );
        $rowset->addCondition( cb_queryf( "col_role='@S'", $role ) );
        $rowset->addCondition( "col_allow_**${action}** = 1" );
        if ( $rowset->count() > 0 )
        {
            {{// 掲示可能であれば TRUE を返す}}
            $rowset->destroy();
            return TRUE;
        }
        $rowset->destroy();
    }

    {{// 次にグループ}}
    $table =& cb_class2table( '**BulletinAccess_Group**' );
    $gids = array_keys( $groups );
    foreach( $gids as $gid )
    {
        $group =& $groups[$gid];
        $rowset = new CB_RowSet( $table );
        $rowset->addCondition( 'col_group=' . $group->getOID() );
        $rowset->addCondition( "col_allow_**${action}** = 1" );
        if ( $rowset->count() > 0 )
        {
            {{// 掲示可能}}
            $rowset->destroy();
            return TRUE;
        }
        $rowset->destroy();
    }

    {{// 最後にユーザー、もしログインしていれば}}
    if ( $user )
    {
        $table =& cb_class2table( '**BulletinAccess_User**' );
        $rowset = new CB_RowSet( $table );
        $rowset->addCondition( 'col_user=' . $user->getOID() );
        $rowset->addCondition( "col_allow_**${action}** = 1" );
        if ( $rowset->count() > 0 )
        {
            {{// 掲示可能}}
            $rowset->destroy();
            return TRUE;
        }
        $rowset->destroy();
    }

    {{// 掲示不可能}}
    return FALSE;
}
[[/src]]

[[その他の実装の考察|section:others]]
