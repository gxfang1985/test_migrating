[[PHPでの構文|section:php_syntax]]
[[src]]
<?php

    $obj = new stdClass;   {{// stdClassはphpビルトインなクラス}}
    $prop = "add property";
    $obj->$prop="initial";
    var_dump($obj);
    {{/*}}
    {{object(stdClass)(1) { }}
    {{  ["add property"]=>string(7) "initial"}}
    {{} }}
    {{*/}}

    {{// 型変換の場合}}
    $str = "hoge";
    $toStdObj = (object)$str;
    var_dump($toStdObj);
    {{/*}}
    {{object(stdClass)(1) { }}
    {{  ["scalar"]=>string(4) "hoge"}}
    {{} }}
    {{*/}}

    **///////////////////////////////////////////////////**
    **// 関数を動的に追加する方法はサポートされていない。**
    **///////////////////////////////////////////////////**

    $my_obj = new hoge;
    $prop = "add property";
    $my_obj->$prop="initial";
    var_dump($my_obj);
    {{/*}}
    {{object(hoge)(2) {}}
    {{  ["_property"]=>string(16) "already property"}}
    {{  ["add property"]=>string(7) "initial"}}
    {{} }}
    {{*/}}
    $my_obj->func();    {{//「hoge::func called」}}

    class hoge
    {
        var $_property = "already property";
		
        function func(){ldelim}echo "hoge::func called";{rdelim}
    }
?>
[[/src]]

[[拡張モジュールの記述方法|section:ext_syntax]]
[[src]]
''コール側の記述列(hoge.csp)''

<?php
    {{// オブジェクトを返す}}
    var_dump(return_object_function());
    {{/*}}
    {{object(stdClass)(8) {}}
    {{  ["prop_long"]=>int(100)}}
    {{  ["prop_null"]=>NULL}}
    {{  ["prop_bool_true"]=>bool(true)}}
    {{  ["prop_bool_false"]=>bool(false)}}
    {{  ["prop_resource"]=>resource(1) of type (stream)}}
    {{  ["prop_double"]=>float(0.0005)}}
    {{  ["prop_string"]=>string(4) "hoge"}}
    {{  ["prop_zval"]=>}}
    {{ array(1) {}}
    {{    ["nest_string_key"]=>string(8) "hogehoge"}}
    {{  } }}
    {{} }}
    {{*/}}
?>
[[/src]]

[[src]]
''モジュール側の記述例(hoge.c)''
PHP_FUNCTION(return_object_function)
{
    ...
    zval* nest_array;
    MAKE_STD_ZVAL(nest_array);
    array_init(nest_array);
    add_assoc_string(nest_array, "nest_string_key", "hogehoge", 1);

    object_init(return_value);
    add_property_long(return_value, "prop_long", 100);
    add_property_null(return_value, "prop_null");
    add_property_bool(return_value, "prop_bool_true", 1);
    add_property_bool(return_value, "prop_bool_false", 0);
    add_property_resource(return_value, "prop_resource", 1);
    add_property_double(return_value, "prop_double", 0.0005);
    add_property_string(return_value, "prop_string", "hoge", 1);
    add_property_zval(return_value, "prop_zval", nest_array);
}
[[/src]]

[[オブジェクト操作 API|section:api]]
[[オブジェクト初期化用マクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>マクロ</th>
    <th width=40%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>object_init</td>
    <td>
<table>
<tr><td>arg</td><td>zval変数へのポインタ</td></tr>
</table>
    </td>
    <td>zvalをオブジェクトに初期化する。その際オブジェクトはビルドインの「stdClass」となる。</td>
  </tr>
  <tr>
    <td>object_init_ex</td>
    <td>
<table>
<tr><td>arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>ce</td><td>クラスエントリー</td></tr>
</table>
    </td>
    <td>zvalをオブジェクトに初期化する。上記マクロは「stdClass」固定だが、クラスエントリーの指定まで行うことができる。</td>
  </tr>
  <tr>
    <td>object_and_properties_init</td>
    <td>
<table>
<tr><td>arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>ce</td><td>クラスエントリー</td></tr>
<tr><td>properties</td><td>プロパティハッシュテーブル</td></tr>
</table>
    </td>
    <td>上記の処理に加えて、プロパティのハッシュテーブルの初期化を行うことができる。</td>
  </tr>
</table>
[[/html]]

[[プロパティ追加用マクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>マクロ</th>
    <th width=40%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>add_property_long</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
<tr><td>__n</td><td>値</td></tr>
</table>
    </td>
    <td>オブジェクトにlong値のプロパティを追加する。</td>
  </tr>
  <tr>
    <td>add_property_null</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
</table>
    </td>
    <td>オブジェクトにNULLのプロパティを追加する。</td>
  </tr>
  <tr>
    <td>add_property_bool</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
<tr><td>__b</td><td>値</td></tr>
</table>
    </td>
    <td>オブジェクトにboolean値のプロパティを追加する。</td>
  </tr>

  <tr>
    <td>add_property_resource</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
<tr><td>__r</td><td>値</td></tr>
</table>
    </td>
    <td>オブジェクトにresource値のプロパティを追加する。</td>
  </tr>

  <tr>
    <td>add_property_double</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
<tr><td>__d</td><td>値</td></tr>
</table>
    </td>
    <td>オブジェクトにdouble値のプロパティを追加する。</td>
  </tr>

  <tr>
    <td>add_property_string</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
<tr><td>__str</td><td>値</td></tr>
<tr><td>__duplicate</td><td>複製するか？</td></tr>
</table>
    </td>
    <td>オブジェクトにstring値のプロパティを追加する。</td>
  </tr>

  <tr>
    <td>add_property_stringl</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
<tr><td>__str</td><td>値</td></tr>
<tr><td>__length</td><td>値の長さ</td></tr>
<tr><td>__duplicate</td><td>複製するか？</td></tr>
</table>
    </td>
    <td>オブジェクトにstring値のプロパティを追加する。バイナリセーフである。</td>
  </tr>

  <tr>
    <td>add_property_zval</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー</td></tr>
<tr><td>__value</td><td>値</td></tr>
</table>
    </td>
    <td>オブジェクトにzval値のプロパティを追加する。</td>
  </tr>
</table>
[[/html]]

[[より詳しく知りたい方へ|section:tips]]
[[src]]
''定数宣言ヘッダ(zend_constants.h)''

{{// オブジェクト初期化}}
\#define object_init(arg) _object_init((arg) ZEND_FILE_LINE_CC TSRMLS_CC)

ZEND_API int _object_init(zval *arg ZEND_FILE_LINE_DC TSRMLS_DC)
{
    {{// 組み込みの「zend_standard_class_def」で初期化}}
    return _object_init_ex(arg, &zend_standard_class_def ZEND_FILE_LINE_CC TSRMLS_CC);
}

ZEND_API int _object_init_ex(zval *arg, zend_class_entry *class_type ZEND_FILE_LINE_DC TSRMLS_DC)
{
    return _object_and_properties_init(arg, class_type, NULL ZEND_FILE_LINE_CC TSRMLS_CC);
}

ZEND_API int _object_and_properties_init(zval *arg, zend_class_entry *class_type, HashTable *properties ZEND_FILE_LINE_DC TSRMLS_DC)
{
    zval *tmp;

    if (!class_type->constants_updated) {
        zend_hash_apply_with_argument(&class_type->default_properties, (apply_func_arg_t) zval_update_constant, (void *) 1 TSRMLS_CC);
        class_type->constants_updated = 1;
    }
    
    if (properties) {
        arg->value.obj.properties = properties;
    } else {
        ALLOC_HASHTABLE_REL(arg->value.obj.properties);
        zend_hash_init(arg->value.obj.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
        zend_hash_copy(arg->value.obj.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref, (void *) &tmp, sizeof(zval *));
    }
    arg->type = IS_OBJECT;
    arg->value.obj.ce = class_type;
    return SUCCESS;
}

{{// オブジェクト操作マクロ}}
\#define add_property_long(__arg, __key, __n) add_property_long_ex(__arg, __key, strlen(__key)+1, __n)
ZEND_API int add_property_long_ex(zval *arg, char *key, uint key_len, long n)
{
    zval *tmp;

    MAKE_STD_ZVAL(tmp);
    ZVAL_LONG(tmp, n);

    return zend_hash_update(Z_OBJPROP_P(arg), key, key_len, (void *) &tmp, sizeof(zval *), NULL);
}
[[/src]]