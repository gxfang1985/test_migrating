[[概要|section:abstract]]
スコープは変数の定義されたコンテキストで、PHPの変数は通常一つだけスコープを持ちます。
 （例外として、''$GLOBALS''(スーパーグローバル変数)のように、どのスコープでもアクセスできるものも存在しますが、ユーザーが宣言できるのは、グローバルスコープとローカルスコープの２つだけです。）

[[PHPでの構文|section:php_syntax]]
[[src]]
<?php

    $var_global = "global variable";

    {{// グローバルスコープを取り込まない場合}}
    test1();    {{//「なにも表示されない」}}

    {{// グローバルスコープを取り込んだ場合}}
    test2();    {{//「global variable」}}

    {{// グローバルスコープに変数をローカルから作成した場合}}
    test3();
    echo "create_global_from_local = $create_global_from_local";    {{//「create_global_from_local」}}

    {{// ローカルスコープをグローバルから読もうとした場合}}
    test4();
    echo "var_local = $var_local";    {{//「なにも表示されない」}}

    {{// スーパーグローバル変数の場合}}
    test5();
    {{/*}}
    {{array(19){}}
    {{    ["argv"]=>array(1){}}
    {{        [0]=>string(9) "test3.csp"}}
    {{    } }}
    {{    ["argc"]=>int(1)}}
    {{    ["HTTP_POST_VARS"]=>array(0) {} }}
    {{    ["HTTP_GET_VARS"]=>array(0) {} }}
    {{    ...}}
    {{} }}
    {{*/}}

    function test1()
    {
        print "var_global = $var_global";
    }
    function test2()
    {
        global $var_global;    {{// 宣言するとグローバルスコープを取り込める}}
        print "var_global = $var_global";
    }
    function test3()
    {
        global $create_global_from_local;
        $create_global_from_local = "create_global_from_local";
    }
    function test4()
    {
        $var_local = "local variable";
    }

    function test5()
    {
        // global $GLOBALS;
        var_dump($GLOBALS);    {{// スーパーグローバル変数のため不要}}
    }

?>
[[/src]]

[[拡張モジュールでの記述例|section:ext_syntax]]
[[src]]
''コール側(hoge.csp)''
<?php

   function test()
   {
      global $hoge_global; {{// この宣言がない場合、「echo $hoge_global」は表示されない。}}
      
      **/////////////////////////////////////////////**
      **//**
      **//   extensionで作成された関数をコールして、**
      **//   内部で変数($hoge_global, $hoge_local)を作成する。**
      **//**
      **/////////////////////////////////////////////**
      hoge_create_value();
   
      echo $hoge_global;   {{// 「global variable」を表示する。}}
      echo $hoge_local;    {{// 「local variable」を表示する。}}
   }

   test();

   echo $hoge_global;      {{// 「global variable」を表示する。}}
   echo $hoge_local;       {{// なにも表示されない。}}

?>
[[/src]]

[[src]]
''モジュール側(hoge.c)''
PHP_FUNCTION(hoge_create_value)
{
   ...
   zval *z_hoge_local;

   {{// zval変数作成}}
   MAKE_STD_ZVAL(z_hoge_local);
   ZVAL_STRING(z_hoge_local, "local variable", 1);

   {{// グローバル変数の設定}}
   SET_VAR_STRING("hoge_global", "global variable");
   //ZEND_SET_SYMBOL(&EG(symbol_table), "hoge_global", z_hoge_global);  {{// ↑同じ意味}}
   
   {{// ローカル変数の設定}}
   ZEND_SET_SYMBOL(EG(active_symbol_table), "hoge_local", z_hoge_local);
   ...
}
[[/src]]

[[シンボルテーブル操作 API|section:api]]
[[グローバルスコープの変数を登録するマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>マクロ</th>
    <th width=30%>引数</th>
    <th width=50%>概要</th>
  </tr>
  <tr>
    <td>SET_VAR_LONG</td>
    <td>
<table>
<tr><td>name</td><td>変数名</td></tr>
<tr><td>value</td><td>値</td></tr>
</table>
    </td>
    <td>整数型(long)の変数を登録する。</td>
  </tr>
  <tr>
    <td>SET_VAR_DOUBLE</td>
    <td>同上</td>
    <td>倍精度浮動小数点型(double)の変数を登録する。</td>
  </tr>
  <tr>
    <td>SET_VAR_STRING</td>
    <td>同上</td>
    <td>文字列型(string)の変数を登録する。</td>
  </tr>
  <tr>
    <td>SET_VAR_STRINGL</td>
    <td>
<table>
<tr><td>name</td><td>変数名</td></tr>
<tr><td>value</td><td>値</td></tr>
<tr><td>value</td><td>値の長さ</td></tr>
</table>
    </td>
    <td>文字列型(string)の変数を登録する。lengthのチェックを行わせないためスピードが「SET_VAR_STRING」よりも早く、かつバイナリセーフである。</td>
  </tr>
</table>
[[/html]]

上記４つの型のみ便宜のため用意されています。その他の型や複合型の場合は、下記マクロを使用すること。

[[任意のスコープの変数を登録するマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
<tr>
    <th width=20%>マクロ</th>
    <th width=30%>引数</th>
    <th width=50%>概要</th>
  </tr>
  <tr>
    <td>ZEND_SET_SYMBOL</td>
    <td>
<table>
<tr><td>symtable</td><td>シンボルテーブル</td></tr>
<tr><td>name</td><td>名前</td></tr>
<tr><td>value</td><td>値</td></tr>
</table>
    </td>
    <td>
    任意のスコープに変数を登録する。<br>
    zval型のインターフェイスなのでどんな変数でも登録可能です。<br><br>
    シンボルテーブルとしては以下の値が設定可能です。<br>
    <b>&EG(symbol_table)</b> = グローバルシンボルテーブル<br>
    <b>EG(active_symbol_table)</b> = ローカルシンボルテーブル<br>
    </td>
  </tr>
</table>
[[/html]]

[[より詳しく知りたい方へ|section:tips]]
[[src]]
\#define SET_VAR_LONG(n, v) {                                     \
                               {                                 \
                                   zval *var;                    \
                                   ALLOC_ZVAL(var);              \
                                   ZVAL_LONG(var, v);            \
                                   ZEND_SET_GLOBAL_VAR(n, var);  \
                               }                                 \
                           }

\#define ZEND_SET_GLOBAL_VAR(name, var)                           \
        ZEND_SET_SYMBOL(&EG(symbol_table), name, var)

\#define ZEND_SET_SYMBOL(symtable, name, var)                                            \
        {                                                                               \
            char *_name = (name);                                                       \
            ZEND_SET_SYMBOL_WITH_LENGTH(symtable, _name, strlen(_name)+1, var, 1, 0);   \
	}

\#define ZEND_SET_SYMBOL_WITH_LENGTH(symtable, name, name_length, var, _refcount, _is_ref)               \
        {                                                                                               \
            zval **orig_var;                                                                            \
                                                                                                        \
            {{// ハッシュテーブルに登録されていて、リファレンスの場合}}
            if (zend_hash_find(symtable, (name), (name_length), (void **) &orig_var)==SUCCESS           \
                && PZVAL_IS_REF(*orig_var)) {                                                           \
                   (var)->refcount = (*orig_var)->refcount;                                             \
                   (var)->is_ref = 1;                                                                   \
                                                                                                        \
                   if (_refcount) {                                                                     \
                       (var)->refcount += _refcount-1;                                                  \
                   }                                                                                    \
                   zval_dtor(*orig_var);                                                                \
                   **orig_var = *(var);                                                                 \
                   FREE_ZVAL(var);                                                                      \
            }
            {{// 新規に登録の場合</span>
            else {                                                                                      \
                  (var)->is_ref = _is_ref;                                                              \
                  if (_refcount) {                                                                      \
                      (var)->refcount = _refcount;                                                      \
                  }                                                                                     \
                  **// ハッシュテーブルの更新**
                  zend_hash_update(symtable, (name), (name_length), &(var), sizeof(zval *), NULL);      \
            }                                                                                           \
        }
[[/src]]