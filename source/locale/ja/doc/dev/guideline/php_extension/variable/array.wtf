[[PHPでの構文|section:php_syntax]]
[[src]]
<?php
    {{// インデックス配列}}
    $index_array = array("office", "garoon", "dezie", "mwize");
    
    echo $index_array[0];            {{//「office」}}
    var_dump($index_array);
    {{/*}}
    {{    array(4) {}}
    {{     [0]=>string(6) "office"}}
    {{     [1]=>string(6) "garoon"}}
    {{     [2]=>string(5) "dezie"}}
    {{     [3]=>string(5) "mwize"}}
    {{    } }}
    {{*/}}

    {{// 連想配列}}
    $key_array = array("manager"   => "hata",
                       "architect" => "yamamoto",
                       "hoge"    => "hagiya");

    echo $key_array["manager"];       {{//「hata」}}
    var_dump($key_array);
    {{/*}}
    {{    array(3) { }}
    {{      ["manager"]=>string(4) "hata" }}
    {{      ["architect"]=>string(8) "yamamoto" }}
    {{      ["hoge"]=>string(6) "hagiya" }}
    {{    } }}
    {{*/}}

    {{// 2次元配列 (多次元は更にネストするだけで同様)}}
    $second_dimension_array = array($index_array, $key_array);
    var_dump($second_dimension_array);
    {{/* }}
    {{    array(2) { }}
    {{      [0]=>array(4) { }}
    {{             [0]=>string(6) "office" }}
    {{             [1]=>string(6) "garoon" }}
    {{             [2]=>string(5) "dezie" }}
    {{             [3]=>string(5) "mwize" }}
    {{           } }}
    {{      [1]=>array(3) { }}
    {{             ["manager"]=>string(4) "hata" }}
    {{             ["architect"]=>string(8) "yamamoto" }}
    {{             ["(^-^)v"]=>string(6) "hagiya" }}
    {{           } }}
    {{    } }}
    {{*/}}

?>
[[/src]]

[[拡張モジュールの記述方法|section:ext_syntax]]
[[src]]
''コール側の記述列(hoge.csp)''

<?php
    {{// インデックス配列を返す}}
    var_dump(return_index_array_function());
    {{/*}}
    {{array(9) { }}
    {{  [0]=>int(100)}}
    {{  [1]=>NULL}}
    {{  [2]=>bool(true)}}
    {{  [3]=>bool(false)}}
    {{  [4]=>resource(1) of type (stream)}}
    {{  [5]=>float(1.0E-5)}}
    {{  [6]=>string(4) "hoge"}} 
    {{  [7]=>string(4) "    "}}
    {{  [8]=>array(5) { }}
    {{         [0]=>int(0)}}
    {{         [1]=>int(1)}}
    {{         [2]=>int(2)}}
    {{         [3]=>int(3)}}
    {{         [4]=>int(4)}}
    {{      } }}
    {{} }}
    {{*/}}

    {{// 連想配列を返す}}
    var_dump(return_key_array_function());
    {{/*}}
    {{array(9) {}}
    {{  ["long_key"]=>int(100)}}
    {{  ["null_key"]=>NULL}}
    {{  ["bool_true_key"]=>bool(true)}}
    {{  ["bool_false_key"]=>bool(false)}}
    {{  ["double_key"]=>float(1.0E-5)}}
    {{  ["resource_key"]=>resource(1) of type (stream)}}
    {{  ["string_key"]=>string(4) "hoge"}}
    {{  ["stringl_key"]=>string(4) "   "}}
    {{  ["array_ley"]=>array(1) {}}
    {{                   ["nest_string_key"]=>string(8) "hogehoge"}}
    {{                 } }}
    {{}*/}}

?>
[[/src]]

[[src]]
''モジュール側の記述例(hoge.c)''

[[PHP_FUNCTION|doc:pg/php/extension/manual/function/function]](return_index_array_function)
{
    ...
    int n;
    [[zval|doc:pg/php/extension/manual/variable/scalar]]* nest_array;
    char szBuffer[4];
    memset(szBuffer, 0x00, sizeof(szBuffer));

    array_init(return_value);
    add_index_long(return_value, 0, 100);
    add_index_null(return_value, 1);
    add_index_bool(return_value, 2, 1);
    add_index_bool(return_value, 3, 0);
    add_index_resource(return_value, 4, 1);
    add_index_double(return_value, 5, 0.00001);
    add_index_string(return_value, 6, "hoge", 1);
    add_index_stringl(return_value, 7, szBuffer, sizeof(szBuffer), 1);

    MAKE_STD_ZVAL(nest_array);
    array_init(nest_array);
    for(n = 0; n < 5; n++)
    {
        add_next_index_long(nest_array, n);
    }
    add_index_zval(return_value, 8, nest_array);
}

[[PHP_FUNCTION|doc:pg/php/extension/manual/function/function]](return_key_array_function)
{
    ...
    [[zval|doc:pg/php/extension/manual/variable/scalar]]* nest_array;
    char szBuffer[4];
    memset(szBuffer, 0x00, sizeof(szBuffer));

    array_init(return_value);
    add_assoc_long(return_value, "long_key", 100);
    add_assoc_null(return_value, "null_key");
    add_assoc_bool(return_value, "bool_true_key", 1);
    add_assoc_bool(return_value, "bool_false_key", 0);
    add_assoc_double(return_value, "double_key", 0.00001);
    add_assoc_resource(return_value, "resource_key", 1);
    add_assoc_string(return_value, "string_key", "hoge", 1);
    add_assoc_stringl(return_value, "stringl_key", szBuffer, sizeof(szBuffer), 1);

    MAKE_STD_ZVAL(nest_array);
    array_init(nest_array);
    add_assoc_string(nest_array, "nest_string_key", "hogehoge", 1);

    add_assoc_zval(return_value, "array_ley", nest_array);
}
[[/src]]

[[配列操作 API|section:api]]
[[配列初期化用のマクロ|head:]]

[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=20%>引数</th>
    <th width=50%>概要</th>
  </tr>
  <tr>
    <td>array_init(arg)</td>
    <td>
    arg: zval変数へのポインタ<br>
    </td>
    <td>配列の初期化を行う。</td>
  </tr>
</table>
[[/html]]

[[インデックス配列用の関数|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>関数</th>
    <th width=40%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>zend_register_internal_class</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td></td><td>TSRMLS_DC</td><td></td><td></td></tr>
</table>
    </td>
    <td>インデックスとlong値をマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_long</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>long</td><td>n</td><td>[in]</td><td>long値</td></tr>
</table>
    </td>
    <td>次インデックスとlong値をマッピングして、配列に追加する。</td>
  </tr>

  <tr>
    <td>add_index_null</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>uint</td><td>idx</td><td>[in]</td><td>インデックス</td></tr>
</table>
    </td>
    <td>インデックスとNULLをマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_null</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
</table>
    </td>
    <td>次インデックスとNULLをマッピングして、配列に追加する。</td>
  </tr>

  <tr>
    <td>add_index_bool</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>uint</td><td>idx</td><td>[in]</td><td>インデックス</td></tr>
<tr><td>int</td><td>b</td><td>[in]</td><td>boolean値</td></tr>
</table>
    </td>
    <td>インデックスとboolean値をマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_bool</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>int</td><td>b</td><td>[in]</td><td>boolean値</td></tr>
</table>
    </td>
    <td>次インデックスとboolean値をマッピングして、配列に追加する。</td>
  </tr>

  <tr>
    <td>add_index_resource</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>uint</td><td>idx</td><td>[in]</td><td>インデックス</td></tr>
<tr><td>int</td><td>r</td><td>[in]</td><td>resource値</td></tr>
</table>
    </td>
    <td>インデックスとresource値をマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_resource</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>int</td><td>r</td><td>[in]</td><td>resource値</td></tr>
</table>
    </td>
    <td>次インデックスとresource値をマッピングして、配列に追加する。</td>
  </tr>

  <tr>
    <td>add_index_double</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>uint</td><td>idx</td><td>[in]</td><td>インデックス</td></tr>
<tr><td>double</td><td>d</td><td>[in]</td><td>double値</td></tr>
</table>
    </td>
    <td>インデックスとdouble値をマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_double</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>double</td><td>d</td><td>[in]</td><td>double値</td></tr>
</table>
    </td>
    <td>次インデックスとdouble値をマッピングして、配列に追加する。</td>
  </tr>

  <tr>
    <td>add_index_string</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>uint</td><td>idx</td><td>[in]</td><td>インデックス</td></tr>
<tr><td>char *</td><td>str</td><td>[in]</td><td>string値</td></tr>
<tr><td>int</td><td>duplicate</td><td>[in]</td><td>複製フラグ</td></tr>
</table>
    </td>
    <td>インデックスとstring値をマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_string</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>char *</td><td>str</td><td>[in]</td><td>string値</td></tr>
<tr><td>int</td><td>duplicate</td><td>[in]</td><td>複製フラグ</td></tr>
</table>
    </td>
    <td>次インデックスとstring値をマッピングして、配列に追加する。</td>
  </tr>

  <tr>
    <td>add_index_stringl</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>uint</td><td>idx</td><td>[in]</td><td>インデックス</td></tr>
<tr><td>char *</td><td>str</td><td>[in]</td><td>string値</td></tr>
<tr><td>uint</td><td>str</td><td>[in]</td><td>string値の長さ</td></tr>
<tr><td>int</td><td>duplicate</td><td>[in]</td><td>複製フラグ</td></tr>
</table>
    </td>
    <td>インデックスとstring値をマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_stringl</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>char *</td><td>str</td><td>[in]</td><td>string値</td></tr>
<tr><td>uint</td><td>str</td><td>[in]</td><td>string値の長さ</td></tr>
<tr><td>int</td><td>duplicate</td><td>[in]</td><td>複製フラグ</td></tr>
</table>
    </td>
    <td>次インデックスとstring値をマッピングして、配列に追加する。</td>
  </tr>

  <tr>
    <td>add_index_zval</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>uint</td><td>idx</td><td>[in]</td><td>インデックス</td></tr>
<tr><td>zval *</td><td>value</td><td>[in]</td><td>zval値</td></tr>
</table>
    </td>
    <td>インデックスとzval値をマッピングして、配列に追加する。</td>
  </tr>
  <tr>
    <td>add_next_index_zval</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>zval*</td><td>arg</td><td>[in]</td><td>zval変数へのポインタ</td></tr>
<tr><td>zval *</td><td>value</td><td>[in]</td><td>zval値</td></tr>
</table>
    </td>
    <td>次インデックスとzval値をマッピングして、配列に追加する。</td>
  </tr>

</table>
[[/html]]

[[連想配列用のマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>マクロ</th>
    <th width=30%>引数</th>
    <th width=50%>概要</th>
  </tr>
  <tr>
    <td>add_assoc_long</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
<tr><td>__n</td><td>long値</td></tr>
</table>
    </td>
    <td>キーとlong値をマッピングし、連想配列に追加する。</td>
  </tr>
  <tr>
    <td>add_assoc_null</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
</table>
    </td>
    <td>キーとNULLをマッピングし、連想配列に追加する。</td>
  </tr>
  <tr>
    <td>add_assoc_bool</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
<tr><td>__b</td><td>boolean値</td></tr>
</table>
    </td>    <td>キーとboolean値をマッピングし、連想配列に追加する。</td>
  </tr>
  <tr>
    <td>add_assoc_resource</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
<tr><td>__b</td><td>resource値</td></tr>
</table>
    </td>
    <td>キーとresource値をマッピングし、連想配列に追加する。</td>
  </tr>

  <tr>
    <td>add_assoc_double</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
<tr><td>__d</td><td>double値</td></tr>
</table>
    </td>
    <td>キーとdouble値をマッピングし、連想配列に追加する。</td>
  </tr>
  <tr>
    <td>add_assoc_string</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
<tr><td>__str</td><td>string値</td></tr>
<tr><td>__duplicate</td><td>複製するか？</td></tr>
</table>
    </td>
    <td>キーとstring値をマッピングし、連想配列に追加する。</td>
  </tr>
  <tr>
    <td>add_assoc_stringl</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
<tr><td>__str</td><td>string値</td></tr>
<tr><td>__length</td><td>string値の長さ</td></tr>
<tr><td>__duplicate</td><td>複製するか？</td></tr>
</table>
    </td>
    <td>キーとstring値をマッピングし、連想配列に追加する。<br>バイナリセーフである。</td>
  </tr>
  <tr>
    <td>add_assoc_zval</td>
    <td>
<table>
<tr><td>__arg</td><td>zval変数へのポインタ</td></tr>
<tr><td>__key</td><td>キー値</td></tr>
<tr><td>__value</td><td>zvalへのポインタ</td></tr>
</table>
    </td>
    <td>キーとzval値をマッピングし、連想配列に追加する。</td>
  </tr>
</table>
[[/html]]

[[より詳しく知りたい方へ|section:tips]]
[[src]]
''(zend_API.h)''

\#define array_init(arg) _array_init((arg) ZEND_FILE_LINE_CC)

{{// 配列の初期化処理}}
ZEND_API int _array_init(zval *arg ZEND_FILE_LINE_DC)
{
    **//////////////////////////////////////////////////////////////////////////**
    **/* ハッシュテーブルを確保し、初期化して、タイプを配列にする             */**
    **//////////////////////////////////////////////////////////////////////////**
    ALLOC_HASHTABLE_REL(arg->value.ht);

    zend_hash_init(arg->value.ht, 0, NULL, ZVAL_PTR_DTOR, 0);
    arg->type = IS_ARRAY;
    return SUCCESS;
}

{{// インデックス配列への追加処理}}
ZEND_API int add_index_long(zval *arg, uint index, long n)
{
    **//////////////////////////////////////////////////////////////////////////**
    **/* long値を生成し、ハッシュテーブルを更新する                           */**
    **//////////////////////////////////////////////////////////////////////////**
    zval *tmp;

    [[MAKE_STD_ZVAL|doc:pg/php/extension/manual/variable/scalar]](tmp);
    [[ZVAL_LONG|doc:pg/php/extension/manual/variable/scalar]](tmp, n);

    return zend_hash_index_update({cb_ui_pageurl page='developer_php_sdk_datatype' caption='Z_ARRVAL_P'}(arg), index, (void *) &tmp, sizeof(zval *), NULL);
}

{{// 連想配列への追加処理}}
\#define add_assoc_long(__arg, __key, __n) add_assoc_long_ex(__arg, __key, strlen(__key)+1, __n)

ZEND_API int add_assoc_long_ex(zval *arg, char *key, uint key_len, long n)
{
    zval *tmp;

    MAKE_STD_ZVAL(tmp);
    ZVAL_LONG(tmp, n);

    return zend_hash_update(Z_ARRVAL_P(arg), key, key_len, (void *) &tmp, sizeof(zval *), NULL);
}
[[/src]]