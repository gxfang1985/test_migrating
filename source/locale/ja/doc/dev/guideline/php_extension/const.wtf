[[PHPでの構文|section:php_syntax]]
[[src]]
<?php
    define("HOGE", "hoge");
    echo HOGE;                         {{//「hoge」}}

    {{// HOGE2が定数として宣言されていないので、define("HOGE2", "hoge2") となり結果うまくいく}}
    define(HOGE2, "hoge2");
    echo HOGE2;                        {{//「hoge2」}}

    {{// PHPでは互換性の為、定数が宣言されていない場合は、そのまま文字列を返すので注意}}
    {{// $hoge[aaa] と $hoge['aaa'] を強引に等しくするため。これに期待してはいけない。}}
    echo HOGE3;                        {{//「HOGE3」}}
?>
[[/src]]

[[拡張モジュールの記述方法|section:ext_syntax]]
[[src]]
''コール側の記述列(hoge.csp)''
<?php
    echo LONG_HOGE;                    {{// 「100」}}
    echo DOUBLE_HOGE;                  {{// 「0.5」}}
    echo STRING_HOGE;                  {{// 「hoge」}}
    echo string_hoge;                  {{// 「string_hoge」}}
    echo STRING_NOT_CASE_SENTIVE_HOGE; {{// 「case sentive」}}
    echo string_not_case_sentive_hoge; {{// 「case sentive」}}
?>
[[/src]]

[[src]]
''モジュール側の記述例(hoge.c)''
PHP_MINIT_FUNCTION(hoge)
{
    ...
    **//////////////////////////////////////////////////////////////////////////**
    **/* これらのマクロは「PHP_MINIT_FUNCTION」でわたされる引数を使用するため */**
    **/* この関数内で宣言してください。                                       */**
    **//////////////////////////////////////////////////////////////////////////**
    REGISTER_LONG_CONSTANT("LONG_HOGE", 100, CONST_CS | CONST_PERSISTENT);
    REGISTER_LONG_CONSTANT("DOUBLE_HOGE", 0.5, CONST_CS | CONST_PERSISTENT);
    REGISTER_STRING_CONSTANT("STRING_HOGE", "hoge", CONST_CS | CONST_PERSISTENT);
    REGISTER_STRING_CONSTANT("STRING_NOT_CASE_SENTIVE_HOGE", "case sentive", CONST_PERSISTENT);
    ...
}
[[/src]]

[[APIリファレンス|section:api]]
[[定数を作成したモジュール関連させるためのマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=20%>引数</th>
    <th width=50%>概要</th>
  </tr>
  <tr>
    <td>REGISTER_LONG_CONSTANT</td>
    <td>
<table>
<tr><td>name</td><td>定数名</td></tr>
<tr><td>value</td><td>定数値</td></tr>
<tr><td>flags</td><td>フラグ</td></tr>
</table>
    </td>
    <td>整数型(long)の定数を実行エンジンに登録する。</td>
  </tr>
  <tr>
    <td>REGISTER_DOUBLE_CONSTANT</td>
    <td>同上</td>
    <td>倍精度浮動小数点型(double)の定数を実行エンジンに登録する。</td>
  </tr>
  <tr>
    <td>REGISTER_STRING_CONSTANT</td>
    <td>同上</td>
    <td>文字列型(string)の定数を実行エンジンに登録する。</td>
  </tr>
  <tr>
    <td>REGISTER_STRINGL_CONSTANT</td>
    <td>
<table>
<tr><td>name</td><td>定数名</td></tr>
<tr><td>value</td><td>定数値</td></tr>
<tr><td>length</td><td>値の長さ</td></tr>
<tr><td>flags</td><td>フラグ</td></tr>
</table>
    </td>
    <td>文字列型(string)の定数を実行エンジンに登録する。lengthのチェックを行わせないためスピードが「REGISTER_STRING_CONSTANT」よりも早く、かつバイナリセーフである。</td>
  </tr>
</table>
[[/html]]

このマクロを使用すると、宣言したモジュールと定数が結び付けられ、互いの生存期間が等しくなります。
 そのため、モジュールがアンロードされるタイミングで定数がシンボルテーブルから削除されます。

フラグについて
 定数のタイプとして以下の値があります。（ORによって複数の値が設定可能です。）
 ''CONST_CS'': 大文字小文字が区別される。
 ''CONST_PERSISTENT'': 定数の永続化をおこない、プロセスのシャットダウン時まで常駐させる。

[[常にシンボルテーブルにロードさせるためのマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=20%>引数</th>
    <th width=50%>概要</th>
  </tr>
  <tr>
    <td>REGISTER_MAIN_LONG_CONSTANT</td>
    <td>
<table>
<tr><td>name</td><td>定数名</td></tr>
<tr><td>value</td><td>定数値</td></tr>
<tr><td>flags</td><td>フラグ</td></tr>
</table>
    </td>
    <td>整数型(long)の定数を登録する。</td>
  </tr>
  <tr>
    <td>REGISTER_MAIN_DOUBLE_CONSTANT</td>
    <td>同上</td>
    <td>倍精度浮動小数点型(double)の定数を登録する。</td>
  </tr>
  <tr>
    <td>REGISTER_MAIN_STRING_CONSTANT</td>
    <td>同上</td>
    <td>文字列型(string)の定数を登録する。</td>
  </tr>
  <tr>
    <td>REGISTER_MAIN_STRINGL_CONSTANTs)</td>
    <td>
<table>
<tr><td>name</td><td>定数名</td></tr>
<tr><td>value</td><td>定数値</td></tr>
<tr><td>length</td><td>値の長さ</td></tr>
<tr><td>flags</td><td>フラグ</td></tr>
</table>
    </td>
    <td>文字列型(string)の定数を登録する。lengthのチェックを行わせないためスピードが「REGISTER_MAIN_STRING_CONSTANT」よりも早く、かつバイナリセーフである。</td>
  </tr>
</table>
[[/html]]

[[より詳しく知りたい方へ|section:tips]]
[[src]]
''(zend_globals.h)''

{{// グローバル実行体の構造体}}
struct _zend_executor_globals
{
    ...
    HashTable *zend_constants;    {{// 定数のデータはすべてここに蓄積される。}}
    ...
}
[[/src]]

[[src]]
''(zend_constants.h)''

{{// 定数の構造体}}
typedef struct _zend_constant
{
    zval value;
    int flags;
    char *name;
    uint name_len;
    int module_number;
} zend_constant;

{{// long値を宣言するためのマクロ}}
\#define REGISTER_LONG_CONSTANT(name, lval, flags) \
        zend_register_long_constant((name), sizeof(name), (lval), (flags), module_number TSRMLS_CC)

''(zend_constants.c)''

{{// long値に依存するデータを設定する}}
ZEND_API void zend_register_long_constant(char *name, uint name_len, long lval, int flags, int module_number TSRMLS_DC)
{
    zend_constant c;

    c.value.type = IS_LONG;
    c.value.value.lval = lval;
    c.flags = flags;
    c.name = zend_strndup(name, name_len);
    c.name_len = name_len;
    c.module_number = module_number;
    zend_register_constant(&c TSRMLS_CC);
}

{{// 定数の登録を行う}}
ZEND_API int zend_register_constant(zend_constant *c TSRMLS_DC)
{
    char *lowercase_name;
    int ret = SUCCESS;

    lowercase_name = do_alloca(c->name_len);

    memcpy(lowercase_name, c->name, c->name_len);

    if (!(c->flags & CONST_CS)) {
        zend_str_tolower(lowercase_name, c->name_len);
    }

    **//////////////////////////////////////////////////////////////////////////**
    **//   グローバル実行体から定数用のハッシュテーブルを取得して登録する。**
    **//////////////////////////////////////////////////////////////////////////**
    if (zend_hash_add(EG(zend_constants), lowercase_name, c->name_len, (void *) c, sizeof(zend_constant), NULL)==FAILURE) {
        free(c->name);
        if (!(c->flags & CONST_PERSISTENT)) {
            zval_dtor(&c->value);
        }
        zend_error(E_NOTICE,"Constant %s already defined", lowercase_name);
            ret = FAILURE;
    }
    free_alloca(lowercase_name);
    return ret;
}
[[/src]]