[[概要|section:abstract]]
値をリターンする方法は非常に簡単です。
 基本的には引数に値を戻すのと同じように [[zval変数|doc:pg/php/extension/manual/variable/scalar]] に設定するだけです。
 ただし、スクリプトエンジンが前もって返り値用の変数(''return_value'')を用意してくれるので、MAKE_STD_ZVALを利用して変数を作成する必要がありません。
 設定する際は、返り値用の変数を隠蔽するための [[API|#api]] が容易されているので、積極的に利用してください。
 複合型([[配列|doc:pg/php/extension/manual/variable/array]]、[[オブジェクト|doc:pg/php/extension/manual/variable/object]])に関しても ''return_value ''変数に対しての同様の操作で返すことができます。

[[拡張モジュールの記述方法|section:ext_syntax]]
[[src]]
''コール側の記述列(hoge.csp)''
<?php

   var_dump(hoge_str_ret());    {{// string(4) "hoge"}}
   var_dump(hoge_long_ret());   {{// int(1)}}
   var_dump(hoge_double_ret()); {{// float(0.5)}}
   var_dump(hoge_bool_ret());   {{// bool(true)}}
   
   var_dump(hoge_array_ret());
   {{/*}}
   {{array(2) {}}
   {{  ["key"]=>}}
   {{  string(5) "value"}}
   {{  ["nest_array"]=>}}
   {{  array(1) { }}
   {{    [0]=>}}
   {{    string(11) "index_value"}}
   {{  } }}
   {{} }}
   {{*/}}

   var_dump(hoge_object_ret());
   {{/*}}
   {{object(hoge)(1) {}}
   {{   ["_prop"]=>}}
   {{   NULL}}
   {{} }}
   {{*/}}

?>
[[/src]]

[[src]]
''モジュール側の記述例(hoge.c)''

PHP_FUNCTION(hoge_str_ret)
{
    ...
    RETVAL_STRING("hoge", 1);
}

PHP_FUNCTION(hoge_long_ret)
{
    ...
    RETURN_LONG(1);
}

PHP_FUNCTION(hoge_double_ret)
{
    ...
    RETURN_DOUBLE(0.5);
}

PHP_FUNCTION(hoge_bool_ret)
{
    ...
    RETVAL_TRUE;
}

PHP_FUNCTION(hoge_array_ret)
{
    ...
    {{// ネストされたインデックス配列の生成}}
    zval *nest_array;
    MAKE_STD_ZVAL(nest_array);
    array_init(nest_array);
    add_index_string(nest_array, 0, "index_value", 1);

    {{// 連想配列の生成}}
    array_init(nest_array);
    add_assoc_string(return_value, "key", "value", 1);
    add_assoc_zval(return_value, "nest_array", nest_array);
}

PHP_FUNCTION(hoge_object_ret)
{
    ...
    object_init(return_value);
    add_property_null(return_value, "_prop");
}
[[/src]]

[[APIリファレンス|section:api]]

[[返り値を設定する為のマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=30%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>RETVAL_RESOURCE</td>
    <td>
<table>
<tr><td>l</td><td>resource値</td></tr>
</table>
    </td>
    <td>戻り値にresource値を設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_BOOL</td>
    <td>
<table>
<tr><td>b</td><td>boolean値</td></tr>
</table>
    </td>
    <td>戻り値にboolean値を設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_TRUE</td>
    <td>特になし。</td>
    <td>戻り値にboolean値(TRUE)を設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_FALSE</td>
    <td>特になし。</td>
    <td>戻り値にboolean値(FALSE)を設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_NULL</td>
    <td>特になし。</td>
    <td>戻り値にNULLを設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_LONG</td>
    <td>
<table>
<tr><td>l</td><td>long値</td></tr>
</table>
    </td>
    <td>戻り値にlong値を設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_DOUBLE</td>
    <td>
<table>
<tr><td>d</td><td>double値</td></tr>
</table>
    </td>
    <td>戻り値にdouble値を設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_STRING</td>
    <td>
<table>
<tr><td>s</td><td>string値</td></tr>
<tr><td>duplicate</td><td>複製するかどうか？</td></tr>
</table>
    </td>
    <td>戻り値にstring値を設定する。</td>
  </tr>
  <tr>
    <td>RETVAL_STRINGL</td>
    <td>
<table>
<tr><td>s</td><td>string値</td></tr>
<tr><td>l</td><td>stringの長さ</td></tr>
<tr><td>duplicate</td><td>複製するかどうか？</td></tr>
</table>
    </td>
    <td>戻り値にstring値を設定する。<br>バイナリセーフである。</td>
  </tr>
  <tr>
    <td>RETVAL_EMPTY_STRING()</td>
    <td>特になし。</td>
    <td>戻り値にstring値(空文字)を設定する。</td>
  </tr>
</table>
[[/html]]

[[より詳しく知りたい方へ|section:tips]]
[[src]]
''(zend_API.h)''

{{// 返り値用マクロ}}
\#define RETVAL_LONG(l)        ZVAL_LONG(return_value, l)
\#define RETURN_LONG(l)        { RETVAL_LONG(l); return; }

{{// 関数の定義（返り値の部分確認）}}
\#define PHP_FUNCTION                    ZEND_FUNCTION
\#define ZEND_FUNCTION(name)             ZEND_NAMED_FUNCTION(ZEND_FN(name))
\#define ZEND_NAMED_FUNCTION(name)       void name(INTERNAL_FUNCTION_PARAMETERS)
\#define INTERNAL_FUNCTION_PARAMETERS    int ht, zval **\*return_value**, zval *this_ptr, int return_value_used TSRMLS_DC
[[/src]]