[[概要|section:abstract]]
拡張モジュールもPHP本体と同じ様に各種設定として、''php.ini'' が使用可能です。
 php.iniはセクションを見ないので、必ずエントリーを「''モジュール名.エントリー名''」としてください。
 （ただし、後でわかり易いようにセクションを利用して意味分けすることは重要です。）

[[拡張モジュールの記述方法|section:ext_syntax]]
[[src]]
''php.iniの記述例(php.ini)''

....
**[hoge]** {{<-- なくても関係ないが、意味付けするために書くべき}}
hoge.global_value = 999
[[/src]]

[[src]]
''コール側の記述列(hoge.csp)''
<?php

    echo hoge_getIniEntry();

    {{// php.ini にエントリーを追加しない場合 => 「100」}}
    {{// php.ini にエントリーを追加した場合   => 「999」}}

?>
[[/src]]

[[src]]
''モジュール側の記述例(php_hoge.h)''

{{// グローバルデータの宣言}}
ZEND_BEGIN_MODULE_GLOBALS(hoge)
    long  global_value;
    char *global_string;
ZEND_END_MODULE_GLOBALS(hoge)
[[/src]]

[[src]]
''モジュール側の記述例(hoge.c)''

{{// INIファイルのエントリーデータ}}
PHP_INI_BEGIN()
    STD_PHP_INI_ENTRY("hoge.global_value",  "100",  PHP_INI_ALL, OnUpdateInt, global_value, zend_hoge_globals, hoge_globals)
    STD_PHP_INI_ENTRY("hoge.global_string", "hoge", PHP_INI_ALL, OnUpdateString, global_string, zend_hoge_globals, hoge_globals)
PHP_INI_END()

PHP_MINIT_FUNCTION(hoge)
{
    ...
    {{// スクリプトエンジンにiniファイルのエントリーを登録する。}}
    REGISTER_INI_ENTRIES();
    ...
}

PHP_MSHUTDOWN_FUNCTION(hoge)
{
    {{// スクリプトエンジンからiniファイルのエントリーを削除する。}}
    UNREGISTER_INI_ENTRIES();
}

PHP_FUNCTION(hoge_getIniEntry)
{
    ...
    {{// RETURN_LONG(HOGE_G(global_value));}}
    RETURN_LONG(INI_INT("hoge.global_value"));
}
[[/src]]

[[APIリファレンス|section:api]]
[[モジュールのiniファイルエントリーの宣言するためのマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=30%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>PHP_INI_BEGIN()</td>
    <td>特になし。</td>
    <td>iniファイルエントリーの実体の宣言を開始する。</td>
  </tr>
  <tr>
    <td>PHP_INI_END()</td>
    <td>特になし。</td>
    <td>iniファイルエントリーの実体の宣言を終了する。</td>
  </tr>
  <tr>
    <td>STD_PHP_INI_ENTRY()</td>
    <td>
<table>
<tr><td>name</td><td>エントリー名</td></tr>
<tr><td>default_value</td><td>エントリー名</td></tr>
<tr><td>modifyable</td><td>変更権限</td></tr>
<tr><td>on_modify</td><td>変更通知ハンドラ</td></tr>
<tr><td>property_name</td><td>プロパティ名</td></tr>
<tr><td>struct_type</td><td>構造体型</td></tr>
<tr><td>struct_ptr</td><td>実行体</td></tr>
</table>
    </td>
    <td>iniファイルのエントリーを追加する。<br>struct_typeは <b>ZEND_BEGIN_MODULE_GLOBALS</b> によって宣言されるモジュールのグローバル構造体です。<br>struct_ptrは上記の実体を表します。<br>property_nameは実体で宣言されているプロパティです。<b></b> </td>
  </tr>
</table>
[[/html]]

[[エントリーの現在値を取得するマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=30%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>INI_INT</td>
    <td>
<table>
<tr><td>name</td><td>エントリー名</td></tr>
</table>
    </td>
    <td>long値を返す。</td>
  </tr>
  <tr>
    <td>INI_FLT(name)</td>
    <td>同上</td>
    <td>double値を返す。(floatは同じ)</td>
  </tr>
  <tr>
    <td>INI_STR(name)</td>
    <td>同上</td>
    <td>string値を返す。</td>
  </tr>
  <tr>
    <td>INI_BOOL(name)</td>
    <td>同上</td>
    <td>boolean値を返す。</td>
  </tr>
</table>
[[/html]]

[[エントリーのオリジナル値を取得するマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=30%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>INI_ORIG_INT(name)</td>
    <td>
<table>
<tr><td>name</td><td>エントリー名</td></tr>
</table>
    </td>
    <td>long値を返す。</td>
  </tr>
  <tr>
    <td>INI_ORIG_FLT(name)</td>
    <td>同上</td>
    <td>double値を返す。(floatは同じ)</td>
  </tr>
  <tr>
    <td>INI_ORIG_STR(name)</td>
    <td>同上</td>
    <td>string値を返す。</td>
  </tr>
  <tr>
    <td>INI_ORIG_BOOL(name)</td>
    <td>同上</td>
    <td>boolean値を返す。</td>
  </tr>
</table>
[[/html]]

[[エントリーの値を表示するマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=30%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>DISPLAY_INI_ENTRIES</td>
    <td>特になし</td>
    <td>このモジュールに関係するiniファイルのエントリー表示する。このマクロは「{cb_ui_pageurl page='developer_php_sdk_ext_module' caption='PHP_MINFO_FUNCTION'}」で渡されるパラメータを必要とするため、その関数内でしか使用することができません。</td>
  </tr>
</table>
[[/html]]

[[より詳しく知りたい方へ|section:tips]]
[[src]]
\#define PHP_INI_BEGIN        ZEND_INI_BEGIN
\#define ZEND_INI_BEGIN()     static zend_ini_entry ini_entries[] = {

\#define PHP_INI_END          ZEND_INI_END
\#define ZEND_INI_END()       { 0, 0, NULL, 0, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, NULL } };

{{// iniエントリー構造体}}
typedef struct _zend_ini_entry zend_ini_entry;
struct _zend_ini_entry {
    int module_number;
    int modifyable;
    char *name;
    uint name_length;
    ZEND_INI_MH\((*on_modify));
    void *mh_arg1;
    void *mh_arg2;
    void *mh_arg3;

    char *value;
    uint value_length;

    char *orig_value;
    uint orig_value_length;
    int modified;

    void (*displayer)(zend_ini_entry *ini_entry, int type);
};

{{// 値エントリー用マクロ}}
\#define STD_PHP_INI_ENTRY    STD_ZEND_INI_ENTRY
\#define STD_ZEND_INI_ENTRY(name, default_value, modifyable, on_modify, property_name, struct_type, struct_ptr) \
        ZEND_INI_ENTRY2(name, default_value, modifyable, on_modify, (void *) XtOffsetOf(struct_type, property_name), (void *) &struct_ptr##_id)
\#define ZEND_INI_ENTRY2(name, default_value, modifyable, on_modify, arg1, arg2) \
        ZEND_INI_ENTRY2_EX(name, default_value, modifyable, on_modify, arg1, arg2, NULL)
\#define ZEND_INI_ENTRY2_EX(name, default_value, modifyable, on_modify, arg1, arg2, displayer) \
        ZEND_INI_ENTRY3_EX(name, default_value, modifyable, on_modify, arg1, arg2, NULL, displayer)
\#define ZEND_INI_ENTRY3_EX(name, default_value, modifyable, on_modify, arg1, arg2, arg3, displayer) \
        { 0, modifyable, name, sizeof(name), on_modify, arg1, arg2, arg3, default_value, sizeof(default_value)-1, NULL, 0, 0, displayer },

[[/src]]