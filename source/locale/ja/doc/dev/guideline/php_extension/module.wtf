[[概要|section:abstract]]

PHPのスクリプトエンジンが理解できる拡張モジュールとして作成するためには、守らなくてはならないルールがあり、それに従って記述する必要があります。

ルールとはいえ、モジュールのデータ構造「''zend_module_entry''」とデータ構造を取得する関数「''get_module''」さえ存在すれば、拡張モジュールとして定義できます。
 また、これらのコードは実際に書かなくても、スケルトン作成のスクリプトによって自動生成されますので、心配は要りません。

[[拡張モジュールの記述方法|section:ext_syntax]]
[[src]]
''モジュール側の記述例''

''(php_hoge.h)''

**//////////////////////////////////////////////////////////////////////////**
**/* モジュールに対するイベントハンドラ                                   */**
**//////////////////////////////////////////////////////////////////////////**
PHP_MINIT_FUNCTION(hoge);
PHP_MSHUTDOWN_FUNCTION(hoge);
PHP_RINIT_FUNCTION(hoge);
PHP_RSHUTDOWN_FUNCTION(hoge);
PHP_MINFO_FUNCTION(hoge);

**//////////////////////////////////////////////////////////////////////////**
**/* モジュールのグローバルデータ用                                       */**
**//////////////////////////////////////////////////////////////////////////**

{{// モジュールのグローバル定義データ}}
ZEND_BEGIN_MODULE_GLOBALS(hoge)
        long  global_value;
        ...
ZEND_END_MODULE_GLOBALS(hoge)

{{// モジュールのグローバルデータを取得するためのマクロ（スレッドセーフ）}}
\#ifdef ZTS
\#define HOGE_G(v) TSRMG(hoge_globals_id, zend_hoge_globals *, v)
\#else
\#define HOGE_G(v) (hoge_globals.v)
\#endif

''(hoge.c)''

{{// 関数データ}}
function_entry hoge_functions[] = { ... }

**//////////////////////////////////////////////////////////////////////////**
**/* このデータとZEND_GET_MODULEによってexportされるAPIは必須です。       */**
**//////////////////////////////////////////////////////////////////////////**
**----------------------------[important]-----------------------------------**
{{// モジュールのデータ構造}}
zend_module_entry hoge_module_entry = {
\#if ZEND_MODULE_API_NO >= 20010901
    STANDARD_MODULE_HEADER,
\#endif
    "hoge",                        {{// モジュール名}}
    hoge_functions,                {{// モジュールの関数}}
    PHP_MINIT(hoge),               {{// モジュール初期化時のハンドラ関数}}
    PHP_MSHUTDOWN(hoge),           {{// モジュール終了時のハンドラ関数}}
    PHP_RINIT(hoge),               {{// リクエスト開始時のハンドラ関数}}
    PHP_RSHUTDOWN(hoge),           {{// リクエスト終了時のハンドラ関数}}
    PHP_MINFO(hoge),               {{// 情報表示時(phpinfoがコールされた際)のハンドラ関数}}
\#if ZEND_MODULE_API_NO >= 20010901
    "0.1",
\#endif
    STANDARD_MODULE_PROPERTIES
};

{{// モジュールデータ取得関数}}
\#ifdef COMPILE_DL_HOGE
ZEND_GET_MODULE(hoge)
\#endif
**----------------------------[important]-----------------------------------**

{{// グローバルデータID宣言}}
ZEND_DECLARE_MODULE_GLOBALS(hoge)

PHP_MINIT_FUNCTION(hoge)
{
    ...
    ZEND_INIT_MODULE_GLOBALS(hoge, NULL, NULL);
    ...
}

{{// モジュールハンドラの実装}}
PHP_MSHUTDOWN_FUNCTION(hoge){ ... }
PHP_RINIT_FUNCTION(hoge){ ... }
PHP_RSHUTDOWN_FUNCTION(hoge){ ... }

PHP_MINFO_FUNCTION(hoge)
{
    php_info_print_table_start();
    php_info_print_hr();
    php_info_print_table_header(3, "column1", "column2", "column3");
    php_info_print_table_row(3, "value1", "value4", "value3");
    php_info_print_table_end();
}
[[/src]]

[[モジュール関連マクロ|section:macro]]
[[モジュールを定義する為のマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=30%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>ZEND_GET_MODULE</td>
    <td>
<table>
<tr><td>name</td><td>モジュール名</td></tr>
</table>
    </td>
    <td>モジュール定義のデータを取得するAPIを定義する。</td>
  </tr>
  <tr>
    <td>ZEND_DECLARE_MODULE_GLOBALS</td>
    <td>
<table>
<tr><td>module_name</td><td>モジュール名</td></tr>
</table>
    </td>
    <td>モジュールのIDを定義する。</td>
  </tr>
  <tr>
    <td>ZEND_BEGIN_MODULE_GLOBALS</td>
    <td>
<table>
<tr><td>module_name</td><td>モジュール名</td></tr>
</table>
    </td>
    <td>モジュールのグローバルデータの定義を開始する。</td>
  </tr>
  <tr>
    <td>ZEND_END_MODULE_GLOBALS</td>
    <td>
<table>
<tr><td>module_name</td><td>モジュール名</td></tr>
</table>
    </td>
    <td>モジュールのグローバルデータの定義を終了する。</td>
  </tr>
  <tr>
    <td>ZEND_INIT_MODULE_GLOBALS</td>
    <td>
<table>
<tr><td>module_name</td><td>モジュール名</td></tr>
<tr><td>globals_ctor</td><td>コンストラクタ</td></tr>
<tr><td>globals_dtor</td><td>デストラクタ</td></tr>
</table>
    </td>
    <td>
    「<b>ZEND_BEGIN_MODULE_GLOBALS</b> ～ <b>ZEND_END_MODULE_GLOBALS</b>」で定義されたモジュールのグローバルデータ領域を実際に割り当てる。<br> 
    その際、「<b>ZEND_DECLARE_MODULE_GLOBALS</b>」のIDとマッピングする。<br>
    コンストラクタ、デストラクタのハンドラにはNULLも指定可能です。
    </td>
  </tr>
  <tr>
    <td>HOGE_G</td>
    <td>
<table>
<tr><td>v</td><td>変数名</td></tr>
</table>
    </td>
    <td>
    リソースマネージャーからモジュールのグローバルデータをスレッドセーフで取得する。<br>
    スケルトンを作成するスクリプトによって「<b>モジュール名_G</b>」の形で自動生成されます。
    </td>
  </tr>
</table>
</p>
[[/html]]

[[モジュールのイベントハンドラを定義する為のマクロ|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=30%>マクロ</th>
    <th width=30%>引数</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>PHP_MINIT</td>
    <td>
<table>
<tr><td>name</td><td>モジュール名</td></tr>
</table>
    </td>
    <td>モジュール初期化時のイベント関数名を生成する。</td>
  </tr>
  <tr>
    <td>PHP_MINIT_FUNCTION</td>
    <td>同上</td>
    <td>モジュール初期化時のイベント関数の実体を宣言する。</td>
  </tr>

  <tr>
    <td>PHP_MSHUTDOWN</td>
    <td>同上</td>
    <td>モジュール終了時のイベント関数名を生成する。</td>
  </tr>
  <tr>
    <td>PHP_MSHUTDOWN_FUNCTION</td>
    <td>同上</td>
    <td>モジュール終了時のイベント関数の実体を宣言する。</td>
  </tr>

  <tr>
    <td>PHP_RINIT</td>
    <td>同上</td>
    <td>リクエスト開始時のイベント関数名を生成する。</td>
  </tr>
  <tr>
    <td>PHP_RINIT_FUNCTION</td>
    <td>同上</td>
    <td>リクエスト開始時のイベント関数の実体を宣言する。</td>
  </tr>

  <tr>
    <td>PHP_RSHUTDOWN</td>
    <td>同上</td>
    <td>リクエスト終了時のイベント関数名を生成する。</td>
  </tr>
  <tr>
    <td>PHP_RSHUTDOWN_FUNCTION</td>
    <td>同上</td>
    <td>リクエスト終了時のイベント関数の実体を宣言する。</td>
  </tr>

  <tr>
    <td>PHP_MINFO</td>
    <td>同上</td>
    <td>モジュール情報出力時(phpinfo)のイベント関数名を生成する。</td>
  </tr>
  <tr>
    <td>PHP_MINFO_FUNCTION</td>
    <td>同上</td>
    <td>モジュール情報出力時(phpinfo)のイベント関数の実体を宣言する。</td>
  </tr>
</table>
[[/html]]

[[ユーテリティ関数|section:utility]]
[[モジュールの情報を出力する際に使用する関数|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>構文</th>
    <th width=30%>引数</th>
    <th width=10%>返り値</th>
    <th width=40%>概要</th>
  </tr>
  <tr>
    <td>php_info_print_table_start</td>
    <td>なし</td>
    <td>なし</td>
    <td>テーブルの出力を開始する。</td>
  </tr>
  <tr>
    <td>php_info_print_table_end</td>
    <td>なし</td>
    <td>なし</td>
    <td>テーブルの出力を終了する。</td>
  </tr>
  <tr>
    <td>php_info_print_table_header</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>int</td><td>num_cols</td><td>[in]</td><td>カラム数</td></tr>
<tr><td></td><td>...</td><td>[in]</td><td>可変引数（カラムに対応する値）</td></tr>
</table>
    </td>
    <td>なし</td>
    <td>テーブルのヘッダ行を出力する。</td>
  </tr>
  <tr>
    <td>php_info_print_table_row</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>int</td><td>num_cols</td><td>[in]</td><td>カラム数</td></tr>
<tr><td></td><td>...</td><td>[in]</td><td>可変引数（カラムに対応する値）</td></tr>
</table>
    </td>
    <td>なし</td>
    <td>テーブルのデータ行を出力する。</td>
  </tr>
  <tr>
    <td>php_info_print_hr</td>
    <td>なし</td>
    <td>なし</td>
    <td>罫線を出力する。</td>
  </tr>
</table>
[[/html]]

[[情報を出力する際に使用する関数|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>構文</th>
    <th width=35%>引数</th>
    <th width=15%>返り値</th>
    <th width=30%>概要</th>
  </tr>
  <tr>
    <td>zend_printf</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>const char*</td><td>format</td><td>[in]</td><td>出力フォーマット</td></tr>
<tr><td></td><td>...</td><td>[in]</td><td>可変引数</td></tr>
</table>
    </td>
    <td>int: エラーコード</td>
    <td>情報を出力する。<br>
    (zendの出力ストリームに出力する以外はprintfを同様です。)</td>
  </tr>
</table>
[[/html]]

[[エラーを発生させる関数|head:]]
[[html]]
<table class=cb_data_list border="1">
  <tr>
    <th width=20%>構文</th>
    <th width=35%>引数</th>
    <th width=15%>返り値</th>
    <th width=30%>概要</th>
  </tr>
  <tr>
    <td>zend_error</td>
    <td>
<table>
<tr><th>型</th><th>名前</th><th>方向</th><th>概要</th></tr>
<tr><td>int</td><td>type</td><td>[in]</td><td>エラータイプ</td></tr>
<tr><td>const char*</td><td>format</td><td>[in]</td><td>出力フォーマット</td></tr>
<tr><td></td><td>...</td><td>[in]</td><td>可変引数</td></tr>
</table>
    </td>
    <td>なし</td>
    <td>
    エラーを発生させる。<br><br>タイプとして以下の値が設定可能です。<br>
    <table>
<tr><th>エラータイプ</th></tr>
<tr><td>E_ERROR</td></tr>
<tr><td>E_WARNING</td></tr>
<tr><td>E_PARSE</td></tr>
<tr><td>E_NOTICE</td></tr>
<tr><td>E_CORE_ERROR</td></tr>
<tr><td>E_CORE_WARNING</td></tr>
<tr><td>E_COMPILE_ERROR</td></tr>
<tr><td>E_COMPILE_WARNING</td></tr>
<tr><td>E_USER_ERROR</td></tr>
<tr><td>E_USER_WARNING</td></tr>
<tr><td>E_USER_NOTICE</td></tr>
<tr><td>E_ALL</td></tr>
<tr><td>E_CORE</td></tr>
</table>

    </td>
  </tr>
</table>
[[/html]]

[[より詳しく知りたい方へ|section:tips]]
[[src]]
''(zend_modules.h)''

{{// モジュールのエントリーデータ}}
struct _zend_module_entry
{
    {{// STANDARD_MODULE_HEADER によって定型的なヘッダを出力される部分}}
    unsigned short size;
    unsigned int zend_api;
    unsigned char zend_debug;
    unsigned char zts;

    char *name;
    zend_function_entry *functions;
    int (*module_startup_func)(INIT_FUNC_ARGS);
    int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    int (*request_startup_func)(INIT_FUNC_ARGS);
    int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
    char *version;

    {{// STANDARD_MODULE_PROPERTIES によって定型的なプロパティを出力される部分}}
    int (*global_startup_func)(void);
    int (*global_shutdown_func)(void);
    int globals_id;
    int module_started;
    unsigned char type;
    void *handle;
    int module_number;
};

\#define STANDARD_MODULE_HEADER sizeof(zend_module_entry), ZEND_MODULE_API_NO, ZEND_DEBUG, USING_ZTS

\#define STANDARD_MODULE_PROPERTIES \
        NULL, NULL, STANDARD_MODULE_PROPERTIES_EX

\#define STANDARD_MODULE_PROPERTIES_EX 0, 0, 0, NULL, 0


''(zend_API.h)''

{{// モジュールデータを取得する}}
\#define ZEND_GET_MODULE(name) \
        ZEND_DLEXPORT zend_module_entry *get_module(void) { return &name##_module_entry; }

（win32の場合は 「#define ZEND_DLEXPORT __declspec(dllexport)」 ）

[[/src]]