[[概要|section:abstract]]

[[PHP|doc:general/php4/basic]] はそれ自体でも、多種多様なことが実現可能なスクリプト言語です。
 ただし、より専門的なアプリケーションを作ろうとすれば、「機能」、「処理速度」などの面で不都合が現れ始めます。
 これを解決する有効な手段として、PHPではC/C++言語によって拡張可能なアーキテクチャが組み込まれています。
 PHPSDKは以下のものを提供します。

#拡張モジュールをビルドできる環境
#拡張モジュールの雛形(skeleton)を吐き出すスクリプト
#拡張モジュールを記述する際のマニュアル

[[構成|section:deployment]]
[[src]]
((%PHPSDK%))                                            PHPSDKのルート　(ex. C:\Program Files\Cybozu\php-4.3)
    +-- ''bin''
    |    +-- php.exe                                コマンドラインPHP
    |
    +-- ''lib''                                         extensionを作る際のlibファイル
    +-- ''include''                                    extensionを作る際のincludeファイル
    +-- ''developer''
           +-- ''skeleton''                            extensionプロジェクトの雛形
           +-- ext_skel                             extension雛形作成シェルスクリプト
[[/src]]

[[拡張モジュールの作り方 Step by Step|section:use]]
windowsとunixで手順が多少違いますが、どちらで行っても問題ありません。
 unixで雛型を作成しても、dsp(VC++)にしか関係ないファイルも作成されます。
 その逆にwindowsで雛型を作成しても、phpizeに必要なファイルが作成されます。

**※PHPSDKのルートディレクトリへのパスをPHP_SDKという環境変数に登録しておくこと。（Windows, UNIX 共通）**

[[windowsの場合|head:]]
#拡張モジュールの雛形を出すために [[cygwin|http://www.cygwin.com/]] の sh が必要になります。
 インストールされていない場合、インストールしてください。
#cygwin\binへのPATHを環境変数に追加する。
 （この際システムディレクトリよりも前にPATHが設定されるようにして下さい。）
#「''cd %PHPSDK%\developer''」
#「''%PHPSDK%/bin/ext_skel --extname=hoge''」
#同ディレクトリにプロジェクト用のhogeディレクトリが作成されますので、プロジェクトの内を好きに書き換えてください。
 中身に関しては [[スケルトンコード|#skeleton]] を参照してください。
#hoge.dsp を開きVC++で 「hoge.dll」 をビルドする。
 (ビルドする際は「''win32 Release_TS''」で実行してください。
 phpのデバッグ版のライブラリはバンドルしませんので「''win32 Debug_TS''」ではビルドできません。)

[[unixの場合|head:]]
#スーパーユーザーになる。
#「''cd %PHPSDK%/developer''」
#「''%PHPSDK%/bin/ext_skel --extname=hoge''」
#同ディレクトリにプロジェクト用のhogeディレクトリが作成されますので、プロジェクトの内を好きに書き換えてください。
#プロジェクト内の''config.m4''ファイルを設定にあわせて書き換える。
#プロジェクトのディレクトリに移動して、「''phpize''」
#「''./configure --with-php-config=php-configへのパス --with-hoge''」
#「''make''」
#作成された モジュール を php.ini にかかれている extension_dir の位置にコピーする。
#php.iniのextensionにモジュールを追加する。
#呼び出しコードを持つcspファイルを作成し、正常に動作できることを確認する。

[[TIPS|head:]]
#手早くテストししたい。
 コマンドライン版PHPと同じディレクトリにphp.iniを配置して、extension_dirをモジュールの作成ディレクトリにする。
 後はコマンドライン版PHPでテストをおこなってください。
#モジュールがロードされていることを確認する。
 「phpinfo()」または「php -i」を利用してください。

[[スケルトンコード|section:skeleton]]
[[src]]
''(php_hoge.h)''

\#ifndef PHP_HOGE_H
\#define PHP_HOGE_H

**//////////////////////////////////////////////////////////////////////////**
**/* ZEND_GET_MODULEによって直接モジュールが取られるので気にしなくてよい。*/**
**/* internal extensionとしてphpに組み込む際に使用される。                */**
**/* (直接PHPに組み込む場合はフレームワーク側で行います。)                */**
**//////////////////////////////////////////////////////////////////////////**
extern zend_module_entry hoge_module_entry;
\#define phpext_hoge_ptr &hoge_module_entry

\#ifdef PHP_WIN32
\#define PHP_HOGE_API __declspec(dllexport)
\#else
\#define PHP_HOGE_API
\#endif

\#ifdef ZTS
\#include "TSRM.h"
\#endif

PHP_MINIT_FUNCTION(hoge);
PHP_MSHUTDOWN_FUNCTION(hoge);
PHP_RINIT_FUNCTION(hoge);
PHP_RSHUTDOWN_FUNCTION(hoge);
PHP_MINFO_FUNCTION(hoge);

{{/* For testing, remove later. */}}
PHP_FUNCTION(confirm_hoge_compiled);
{
{{/*}}
   {{Declare any global variables you may need between the BEGIN}}
   {{and END macros here:}}

{{ZEND_BEGIN_MODULE_GLOBALS(hoge)}}
{{	long  global_value;}}
{{	char *global_string;}}
{{ZEND_END_MODULE_GLOBALS(hoge)}}
{{*/}}

{{/* In every utility function you add that needs to use variables }}
{{   in php_hoge_globals, call TSRM_FETCH(); after declaring other }}
{{   variables used by that function, or better yet, pass in TSRMLS_CC}}
{{   after the last function argument and declare your utility function}}
{{   with TSRMLS_DC after the last declared argument.  Always refer to}}
{{   the globals in your function as HOGE_G(variable).  You are }}
{{   encouraged to rename these macros something shorter, see}}
{{   examples in any other php module directory.}}
{{*/}}
}
**//////////////////////////////////////////////////////////////////////////**
**/* hogeモジュールのグローバルオブジェクトを取得するマクロ               */**
**//////////////////////////////////////////////////////////////////////////**
\#ifdef ZTS
\#define HOGE_G(v) TSRMG(hoge_globals_id, zend_hoge_globals *, v)
\#else
\#define HOGE_G(v) (hoge_globals.v)
\#endif

\#endif	/* PHP_HOGE_H */
[[/src]]

[[src]]
''(hoge.c)''
\#ifdef HAVE_CONFIG_H
\#include "config.h"
\#endif

\#include "php.h"
\#include "php_ini.h"
\#include "ext/standard/info.h"
\#include "php_hoge.h"

{{/* If you declare any globals in php_hoge.h uncomment this:}}
{{ZEND_DECLARE_MODULE_GLOBALS(hoge)}}
{{*/}}

{{/* True global resources - no need for thread safety here */}}
static int le_hoge;

**//////////////////////////////////////////////////////////////////////////**
**/* PHPに組み込む関数の定義                                              */**
**//////////////////////////////////////////////////////////////////////////**
function_entry hoge_functions[] = {
    PHP_FE(confirm_hoge_compiled,	NULL)		{{/* For testing, remove later. */}}
    {NULL, NULL, NULL}	                           {{/* Must be the last line in hoge_functions[] */}}
};

**//////////////////////////////////////////////////////////////////////////**
**/* 最も重要なデータ。hogeモジュールのすべてを表現                       */**
**//////////////////////////////////////////////////////////////////////////**
zend_module_entry hoge_module_entry = {
\#if ZEND_MODULE_API_NO >= 20010901
    STANDARD_MODULE_HEADER,
\#endif
    "hoge",
    hoge_functions,
    PHP_MINIT(hoge),
    PHP_MSHUTDOWN(hoge),
    PHP_RINIT(hoge),		{{/* Replace with NULL if there's nothing to do at request start */}}
    PHP_RSHUTDOWN(hoge),	{{/* Replace with NULL if there's nothing to do at request end */}}
    PHP_MINFO(hoge),
\#if ZEND_MODULE_API_NO >= 20010901
    "0.1", /* Replace with version number for your extension */
\#endif
    STANDARD_MODULE_PROPERTIES
};

**//////////////////////////////////////////////////////////////////////////**
**/* hogeモジュールを使うために必要なただ一つの関数をエクスポートする。   */**
**/* (モジュールを定義する上で最も重要なマクロ)                           */**
**//////////////////////////////////////////////////////////////////////////**
\#ifdef COMPILE_DL_HOGE
ZEND_GET_MODULE(hoge)
\#endif

{{/* Remove comments and fill if you need to have entries in php.ini}}
[[PHP_INI_BEGIN|doc:pg/php/extension/manual/ini]]
[[STD_PHP_INI_ENTRY|doc:pg/php/extension/manual/ini]]
    [[STD_PHP_INI_ENTRY|doc:pg/php/extension/manual/ini]]("hoge.global_value",      "42", PHP_INI_ALL, OnUpdateInt, global_value, zend_hoge_globals, hoge_globals)
    [[STD_PHP_INI_ENTRY|doc:pg/php/extension/manual/ini]]("hoge.global_string", "foobar", PHP_INI_ALL, OnUpdateString, global_string, zend_hoge_globals, hoge_globals)
[[PHP_INI_END|doc:pg/php/extension/manual/ini]]
{{*/}}

{{/* Uncomment this function if you have INI entries}}
{{static void php_hoge_init_globals(zend_hoge_globals *hoge_globals)}}
{{{}}
{{    hoge_globals->global_value = 0;}}
{{    hoge_globals->global_string = NULL;}}
{{}*/}}

PHP_MINIT_FUNCTION(hoge)
{
    {{/* If you have INI entries, uncomment these lines }}
    {{ZEND_INIT_MODULE_GLOBALS(hoge, php_hoge_init_globals, NULL);}}
    {{REGISTER_INI_ENTRIES();}}
    {{*/}}
    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(hoge)
{
    {{/* uncomment this line if you have INI entries}}
    {{UNREGISTER_INI_ENTRIES();}}
    {{*/}}
    return SUCCESS;
}

PHP_RINIT_FUNCTION(hoge)
{
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(hoge)
{
    return SUCCESS;
}

PHP_MINFO_FUNCTION(hoge)
{
    php_info_print_table_start();
    php_info_print_table_header(2, "hoge support", "enabled");
    php_info_print_table_end();
    
    {{/* Remove comments if you have entries in php.ini}}
    {{DISPLAY_INI_ENTRIES();}}
    {{*/}}
}
[[PHP_FUNCTION|doc:pg/php4/extension/manual/function]](confirm_hoge_compiled)
{
    char *arg = NULL;
    int arg_len, len;
    char string[256];

    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &arg, &arg_len) == FAILURE) {
        return;
    }

    len = sprintf(string, "Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.", "hoge", arg);
    [[RETURN_STRINGL|doc:pg/php4/extension/manual/function/return]](string, len, 1);
}
[[/src]]