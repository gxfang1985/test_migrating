[[概要|section:abstract]]
バリデーションとはその名の通り、値判定のことです。
 ここでは、UI開発におけるバリデーションに関してを記述します。

[[バリデーションの種類|section:type]]
バリデーション には２つのタイプがあります。
#「''クライアント側で行うもの''」
#「''サーバー側で行うもの''」 

クライアント側のバリデーションは、JavaScript等でsubmit時に各フィールドをチェックすることによって行います。
( この方式のメリットはサーバー側への負荷を極力押さえることができます。
デメリットとしては、JavaScript等の処理が複雑になる、すべてのチェックをクライアントで行うことができるとは限らないので処理が分散するなどがあげられます。)

サーバー側で行うバリデーションとしては以下のものがあります。
#「''POSTされたデータのバリデーション''」
#「''ロジックレベルのバリデーション''」

ロジックレベルのバリデーションに関しては、コントローラーがモデルのAPIをコールするタイミングで
それぞれに実装する必要があります。これに関してはUIとは関係ありませんのでここでは言及しません。

それに対して、POSTされたデータのバリデーションとは、書式判定( 数値、日付、メールアドレス、URL, ...) や 範囲、長さなど、
ロジックレベルに渡る前にかけるフィルターのバリデーションを表します。

[[SmartyValidate|section:SmartyValidate]]
[[概要|head:]]
フレームワークとしてはPOSTされたデータのバリデーションを行うものとして、[[SmartyValidate|http://www.phpinsider.com/php/code/SmartyValidate/]] をバンドルしています。
 SmartyValidateを使用するにあたっての最大のメリットは、フォームタグのすぐそばにバリデーションを記述できることにあります。
 これによって、漏れがなく一貫性のあるバリデーションが可能になります。

[[仕組み|head:]]
「''本体''」
 [[code/smarty/libs/SmartyValidate.class.php]]
 「''Smartyテンプレートに記述する Smarty関数''」
 [[code/smarty/libs/plugins/function.validate.php]]
 「''Smarty関数からコールされる各種バリデーションライブラリ''」
 [[code/smarty/libs/plugins/validate_criteria.isNumber.php]] ( 数値かどうかの判定を行う。)

仕組みは非常に簡単です。( セッションを利用して値のバリデーションを行います。)
#SmartyValidate::connectを利用してセッションを初期化する。
#各種バリデーションライブラリはセッションにデータを保存する。
#SmartyValidate::is_validでバリデーションのチェックを行う。
#SmartyValidate::disconnectを利用してセッションデータを解放する。

[[サンプル|section:sample]]
*バリデーション判定（ [[developer/demo_validation.csp]] ）（[[実行|run:developer/demo_validation]]）
*テンプレート( [[page/developer/demo_validation.tpl]] )