[[テンプレートエンジンとは|section:template]]

テキストファイルの雛形に、可変の値を埋め込むアプリケーションを、テンプレートエンジンといいます。(参考：[[PHPカンファレンス講演資料|cb6:page=FileView&gid=3561&fCID=114866&fFID=114878]])

以下のような変数を埋め込んだテキストファイル(テンプレート)があったときに、与えられる変数の内容に応じて、その下のようなテキストを生成します。

[[src]]
{$company}
{$sirname}様

いつもお世話になっております。
[[/src]]

[[src]]
WWE
ビンセント マクマホン様

いつもお世話になっております。
[[/src]]

新フレームワークでは、主にHTMLページを生成するためにテンプレートエンジンを使います。実際にWebページ生成用に使われることが多いですが、テキスト形式であれば、プレインテキストでも、XMLでも生成することができます。

[[なぜテンプレートエンジンを使うのか|section:why]]

デザイン(プレゼンテーション)とロジックの分離のためです。
ユーザの入力にしたがって、データを操作する「ビジネスロジック」は、プログラマ主体で設計実装します。得られた結果を、どのようにデザインし、ユーザに見せるかという「プレゼンテーション」は、Webデザイナ主体で設計実装します。

埋め込むための可変の変数、を仲介として、デザイナはビジネスロジックについて知る必要がなくなり、プログラマはデザインについて知る必要がなくなります。
これにより、分業して並行に開発を進めることが可能になります。

また、テンプレートを差し替えることで、異なるデザインを切り替えやすくなります。
表示する可変データが同じであれば、テンプレートをPDA用にしたり、ケータイ用にしたりして、異なるクライアントに対応することができます。

[[Smarty|section:smarty]]

新フレームワークでは、MySQL や PHP と同様、
オープンソースで普及しているライブラリとして、
[[Smarty|http://smarty.php.net]] というテンプレートエンジンを採用しました。

PHP上での自作も含め、たくさんの選択肢がありましたが、Smarty選定の理由は以下です。 

*十分な機能を持つ 
*高速であるという比較実験結果がある 
*PHPによるプラグインを書くことで、独自の機能拡張ができる 
*日本語のヘルプファイルが存在する 
*ユーザベースが多く、メーリングリストなどコミュニティが活発 

[[Smartyのライセンス|section:license]]

Smartyは LGPL ライセンスで提供されています。そのため、 

*Smarty自身のソースは、お客様が要求した際には渡さなければならない。
（同梱するか、ウェブサイトで公開するか、SmartyサイトのURLを案内するか、
やりかたは色々あります）
*ライセンスを添付する 
*Smarty本体を改造した場合、改造分をLGPLに従って公開しなければならない 

といった利用の制限がつきます。具体的には、フレームワーク・プロジェクトの方で、
法務に相談して配布方法を検討します。

性能向上とソース秘匿のために、PHPソースはエンコードして配布する予定ですが、
この目的でSmarty自身をエンコードしたとしても、
Smartyのソースはなんらかの形で領布しなければいけません。
エンコードしたものとソースの両方を同梱するという手もあります。
さしあたりは製品ごとに、ダウンロードサイズや公開サイトの維持の手間などを考えて、
領布方式を考えてください。

[[CB_Smarty|section:cb_smarty]]

アゼリア上では[[テンプレート・エンジン|doc:ui/smarty/abstract]]として 
[[Smarty|http://smarty.php.net/]] をしますが、
Smarty クラス本体ではなく、Smarty クラスを継承した 
[[az:fw.core:CB_Smarty]] クラスを使います。
この拡張クラスは、フレームワークのディレクトリ構造にあわせて、
テンプレートファイル、キャッシュファイル、
ウェブルートなどのディレクトリが設定された状態で初期化されます。

[[使用方法|section:lecture]]

#[[標準的な使用方法（推奨）|#standard]]
#[[高度な使用方法|#advanced]]

[[標準的な使用（推奨）|head:standard]]

CB_Smarty クラスを使用する場合、[[fw/smarty_bridge.csp|include/fw/smarty_bridge.csp]] を require_once しますが、
たいていの場合は、PHPのスクリプトファイル（.csp）名と使用するSmartyテンプレートのファイル
（.tpl）名の拡張子の前の部分が一致させますので、
この場合 [[fw/smarty_direct.csp|include/fw/smarty_direct.csp]] というスクリプトを使用すると便利です。

たいていの場合とは、Smarty に対して変数を割り当てて、
.cspファイルに対応する.tplファイルを使用するだけの場合です。
具体的には以下のようになります。

[[src]]
<?php
{{/**}}
{{    fw/smarty_direct.csp を使用する前に、PHPでの処理を記述する}}
{{ */}}

{{// グローバル変数（連想配列） ''$G_smarty_assign'' を使用して、}}
{{// Smartyで使用する変数を割り当てる}}
$G_smarty_assign = array(
    'hoge'=>$hoge,
    'foo'=>$foo,
);

{{// Smarty を呼び出す}}
{{//    fw/smarty_direct.csp の内部で、fw/smarty_bridge.csp は}}
{{//    require_once されています}}
require_once 'fw/smarty_direct.csp';
?>
[[/src]]

PHPスクリプトファイルが hoge.csp だった場合、
対応するSmartyテンプレートファイルは hoge.tpl となります。

[[fw/smarty_direct.csp|include/fw/smarty_direct.csp]] を使用すると、
ライセンスフレームワークにより警告表示を出す条件の場合、それが表示されますが、
スキップさせることもできます。
[[fw/smarty_direct.csp|include/fw/smarty_direct.csp]] 内部で参照されるグローバル変数 ''$G_smarty_skip_warning'' に 
''TRUE'' を代入しておけば、ライセンス警告表示がスキップされます。

[[src]]
<?php
$G_smarty_skip_warning = TRUE;
$G_smarty_assign = array(
    'hoge'=>$hoge,
);
require_once 'fw/smarty_direct.csp';
?>
[[/src]]

[[高度な使用|head:advanced]]

高度な使用とは、[[az:CB_Smarty]] および派生元の Smarty クラスのメンバーに直接アクセスして、
使用したい場合などです。
Smarty クラスのメンバーの詳細については、
[[Smarty のマニュアル|http://sunset.freespace.jp/smarty/SmartyManual_2-6-1J_html/]]を参照ください。
また、[[fw/smarty_direct.csp|include/fw/smarty_direct.csp]] の実装が参考になるでしょう。

[[テンプレートの国際化|section:i18n]]

単純な国際化であれば、プラグイン関数 cb_msg を利用します。

大量のテキストがある場合や、cb_msg では困難なフォーマットに対応するために、[[az:fw.core:CB_Smarty]] はロケールに応じたテンプレートの自動切り替え機能を提供しています。

テンプレートの切り替えを行う場合は次のようにファイルを配置してください。
 (例: ''hoge/'' + **ロケールコード** + ''/fuga.tpl'')

#.csp ファイルの場合
[[src]]
$smarty = new CB_Smarty;
$smarty->display( 'hoge/fuga.tpl' );
[[/src]]
#.tpl ファイルの場合
[[src]]
{include file="hoge/fuga.tpl"}
[[/src]]

上記のように指定すると、CB_Smartyは以下の順序でテンプレートファイルを検索します。
 ( 例としてカレントロケールが **en_GB** とします。)

#カレントロケールコードに一致するテンプレート
 ( ex. ''page/hoge/en_GB/fuga.tpl'' )
#カレントロケールに ''_'' が含まれている場合、それを除いたもの
 ( ex. ''page/hoge/en/fuga.tpl'' )
#page直下のもの
 ( ex. ''page/hoge/fuga.tpl'' )

詳細は[[サンプル|#multi_template]]を参照してください。
 
[[プラグイン関数/修飾子|section:plugin]]

Smarty クラス本体では[[Smarty のマニュアル|http://sunset.freespace.jp/smarty/SmartyManual_2-6-1J_html/]]の説明でもある通り、
便利な関数や修飾子が用意されている。
また、プラグインにより関数や修飾子を拡張するための仕組も用意されています。

アゼリアではこの仕組を使って、

*[[国際化メッセージ|doc:dev/base/i18n]]
*[[日付時刻表示|doc:dev/ui/datetime]]
*[[インタラクションライブラリ|doc:dev/ui/interaction]]
*[[URL生成など、その他|doc:dev/misc/url]]

の実装を拡張しました。詳しくはそれぞれのドキュメントを参照してください。

[[リファレンス|section:reference]]

''API''
*[[az:fw.core:CB_Smarty]]

''サンプル''

[[Hello World!|pos:hello_world]]
*ソース ([[developer/demo_cb_smarty.csp]], [[実行|run:developer/demo_cb_smarty]])
*テンプレート ([[page/developer/demo_cb_smarty.tpl]])

[[テンプレート切り替え|pos:multi_template]]
*ソース ([[developer/demo_i18n_multi_template.csp]], [[実行|run:developer/demo_i18n_multi_template]])
*デフォルト用 ([[page/developer/demo_i18n_multi_template.tpl]])
*英語用 ([[page/developer/en/demo_i18n_multi_template.tpl]])
*イギリス英語用 ([[page/developer/en_GB/demo_i18n_multi_template.tpl]])

''フレームワークソース''
*[[fw/smarty_bridge.csp|include/fw/smarty_bridge.csp]]
*[[fw/smarty_direct.csp|include/fw/smarty_direct.csp]]
