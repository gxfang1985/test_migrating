[[概要|section:abstract]]
*各APIはScript Files以下にモジュール毎に管理されている
*IDE上には初期化(cb_fwInitialize)、終了処理(cb_fwUnInitialize)以外のAPIは基本的に見えません。
 （ただし、フレームワーク内の内部コードとして登録されているイベントハンドラ(データベースエンジンインストール後のイベントハンドラなど) 数個が他にも見えます。これはフレームワークライブラリが使用するものでユーザーは使用できません。
* **[※重要] 足りない処理、欲しい処理等、気軽にフレームワークプロジェクトまで依頼してください。現状のazalea、データベースエンジンのインストーラーで必要かつ汎用的な処理をピックアップしてAPI化したため、足りない処理がいろいろあるかと思います。汎用的な処理はすべてフレームワークで管理したいので、ご協力お願いします。**

[[モジュールの構成|section:deploy]]
[[src]]
((''install''))                                            InstallShieldプロジェクト（[[上位配置|doc:ds/idk/windows/abstract#deploy]]）
+-- ''Script Files''                                  スクリプトファイル用
          +-- fw.h                                  フレームワークライブラリ プロトタイプ
          +-- fw.rul                                フレームワークライブラリ 実装コード
          +-- ''fw''                                    フレームワークライブラリ用
               +-- dll.h                            IDKライブラリのDLL プロトタイプ
               +-- databaseEngine.h                 データベース関係 プロトタイプ
               +-- databaseEngine.rul               データベース関係 実装コード
               +-- fileSystem.h                     ファイルシステム関係 プロトタイプ
               +-- fileSystem.rul                   ファイルシステム関係 実装コード
               +-- LaunchAppEx.h                    (外部からの提供) cb_launchAppでラップ
               +-- LaunchAppEx.rul                  (外部からの提供)
               +-- logger.h                         ログ関係 プロトタイプ
               +-- logger.rul                       ログ関係 実装コード
               +-- service.h                        サービス関係 プロトタイプ
               +-- service.rul                      サービス関係 実装コード
               +-- tinySed.h                        文字列操作関係 プロトタイプ
               +-- tinySed.rul                      文字列操作関係 実装コード
               +-- utility.h                        ユーテリティ関係 プロトタイプ
               +-- utility.rul                      ユーテリティ関係 実装コード
               +-- validation.h                     バリデーション関係 プロトタイプ
               +-- validation.rul                   バリデーション関係 実装コード
               +-- webServer.h                      webサーバー関係 プロトタイプ
               +-- webServer.rul                    webサーバー関係 実装コード
               +-- iisSetting.h                     IIS関係 プロトタイプ
               +-- iisSetting.rul                   IIS関係 実装コード
               +-- version.h                        バージョン関係 プロトタイプ
               +-- version.rul                      バージョン関係 実装コード
               +-- repository.h                     リポジトリ関係 プロトタイプ
               +-- repository.rul                   リポジトリ関係 実装コード
               +-- _internal.h                      fw内部コード プロトタイプ
               +-- _internal.h                      fw内部コード 実装コード
[[/src]]

[[使用方法|section:whatis]]
setup.rulに「fw.h」、「fw.rul」をincludeするだけですべてのAPIが使用可能です。
 IDKとしてはすでにincludeされたものを提供するため、ユーザーとしては上記さえも不要です。

IDKとしてのコードはすべて
 「**// >>>>>>>>>>>>>>>> -- [%TYPE%][START] --**」
 フレームワークコード
 「**// <<<<<<<<<<<<<<<< -- [%TYPE%][ END ] --**」で囲む。

**%TYPE%**が ''IMPORTANT'' のものはフレークワークライブラリとして必須になっています。
 削除すると正常に動作できなくなる可能性がありますので削除しないでください。
 **%TYPE%**が ''DELETABLE'' のものはシーケンス的に必要と思われるデフォルトの処理として追加しているが、特に削除しても問題のないものです。

[[src]]
例: IDKとして吐き出す「setup.rul」の雛形

// >>>>>>>>>>>>>>>> -- [IMPORTANT][START] --
\#include "fw.h"
// <<<<<<<<<<<<<<<< -- [IMPORTANT][ END ] --

//////////////////////////////////////////
//
//        グローバル変数宣言
//
////////////////////////////////////////// 

//////////////////////////////////////////
//
//        プロトタイプ宣言
//
//////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
//  関数:       OnBegin
//
//  イベント:   Beginイベントは、インストールの最初のイベントとして送信
//              されます。
//
//////////////////////////////////////////////////////////////////////////////
function OnBegin()
begin

// >>>>>>>>>>>>>>>> -- [IMPORTANT][START] --
    // フレームワークライブラリの初期化
    [[cb_fwInitialize|#cb_fwInitialize]]();
// <<<<<<<<<<<<<<<< -- [IMPORTANT][ END ] --

// >>>>>>>>>>>>>>>> -- [DELETABLE][START] --
    // インストール可能なＯＳ？
    if(![[cb_checkAvailableOS|#cb_checkAvailableOS]]()) then
    	MessageBox(@FW_ERROR_NOT_AVAILABLE_OS, SEVERE);
    	abort;
    endif;
    
    // 管理者権限のあるユーザー？
    if(![[cb_checkAdministrator|#cb_checkAdministrator]]()) then
        MessageBox(@FW_ERROR_NOT_ADMINISTRATOR, SEVERE);
        abort;
    endif;
// <<<<<<<<<<<<<<<< -- [DELETABLE][ END ] --

end;

//////////////////////////////////////////////////////////////////////////////
//
//  関数:       OnEnd
//
//  イベント:   Endイベントは、インストールの最後のイベントとして送信
//              されます。
//
//////////////////////////////////////////////////////////////////////////////
function OnEnd()
begin

// >>>>>>>>>>>>>>>> -- [IMPORTANT][START] -- 
    // フレームワークライブラリの終了
    [[cb_fwUnInitialize|#cb_fwUnInitialize]]();
// <<<<<<<<<<<<<<<< -- [IMPORTANT][ END ] --

end;

//////////////////////////////////////////////////////////////////////////////
//                                                                           
//  関数:     OnFirstUIBefore                                            
//                                                                           
//  イベント: FirstUIBeforeイベントは、インストールがそのコンピュータ
//            上で初めて実行される場合に送信されます。このハンドラでは、
//            通常セットアップがエンドユーザに対してインストールパラメ
//            ータを指定するユーザインターフェイスを表示します。
//            この関数から戻ると、ComponentTransferDataを呼び出してフ
//            ァイル転送を実行します。    
//                                                                        
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    number  nResult;
    number  nLevel;
    number  nvSize, nSetupType;
    number  nId;
    string  szTitle, szMsg;
    string  szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany;
    string  szTargetPath;
    string  svDir;
    string  szComponents, szTargetdir;
    BOOL    bLicenseAccepted;
    
    string  szDetectedInstallPath;
    string  svAppUniqueName;
    string  svCgiRootDir, svWebRootDir;
    LIST listTopics, listDetails, listStartCopy;
    string svPort;
    number nPort;
begin

// >>>>>>>>>>>>>>>> -- [DELETABLE][START] --

[[cb_logger|#cb_logger]](LOG_TYPE_INFOMATION, "OnFirstUIBefore in");

//////////////////////////////
//
// セットアップ初期化
//
//////////////////////////////
LABEL_INITIAL:
    
    // >>>>>>>>>>>>>>>> -- [DELETABLE][START] --
    // バックスクリーンの設定
    SetTitle(@TITLE_MAIN, 24, WHITE);                                       
    SetTitle(@TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION); 	                   
    Enable(FULLWINDOWMODE);						   
    Enable(BACKGROUND);							  
    SetColor(BACKGROUND,RGB(0, 0, 128));
    // >>>>>>>>>>>>>>>> -- [DELETABLE][ END ] --
    
    nSetupType = COMPLETE;
    svDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;
    
LABEL_STARTUP:
    
    //////////////////////////////
    //
    // サイボウズアプリケーションディレクトリの検知
    //
    //////////////////////////////
    szDetectedInstallPath = [[cb_getDatabaseEnginePath|#cb_getDatabaseEnginePath]]();
    if(szDetectedInstallPath == "") then
        svDir = PROGRAMFILES ^ IFX_COMPANY_NAME;
    else
        svDir = szDetectedInstallPath;
    endif;

//////////////////////////////
//
// ようこそダイアログの表示
//
//////////////////////////////
LABEL_WELCOME:
    
    szTitle = "";
    szMsg = "";
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto LABEL_STARTUP;

//////////////////////////////
//
// ライセンス情報表示
//
//////////////////////////////
LABEL_LICENCE:

    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    szLicenseFile = SUPPORTDIR ^ @FW_LICENCE_FILENAME;
    nResult = SdLicense2(szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted);
    if (nResult = BACK) then
        goto LABEL_WELCOME;
    else
    	bLicenseAccepted = TRUE;
    endif;

//////////////////////////////
//
// インストール先ディレクトリの設定
//
//////////////////////////////
LABEL_ASK_DEST_PATH:
	
    if(szDetectedInstallPath == "") then
    
        nResult = SdAskDestPath(@FW_TITLE_CYBOZU_APPPATH, 
                                @FW_MESSAGE_SET_CYBOZU_APPPATH, svDir, 0);
    
    else
   	    
        listTopics =  ListCreate(STRINGLIST);
        listDetails = ListCreate(STRINGLIST);
	
        Sprintf(szMsg, @FW_TOKEN_CYBOZU_APP_DIR, svDir);
        ListAddString(listTopics, szMsg, AFTER);

        nResult = SdDisplayTopics(@FW_MESSAGE_EXIST_CYBOZU_APPPATH,
                                  @FW_TITLE_CYBOZU_APPPATH, listTopics, listDetails, 0);
        ListDestroy(listTopics);
        ListDestroy(listDetails);
    endif;
   	
    if(nResult = BACK) goto LABEL_LICENCE;
    TARGETDIR = svDir;
    
//////////////////////////////
//
// アプリケーションのユニーク名の設定
//
//////////////////////////////	
LABEL_ASK_UNIQUE_APP_NAME:

    svAppUniqueName  = @FW_TOKEN_APP_FRAMEWORK;	

LABEL_ASK_UNIQUE_APP_NAME_AGAIN:

    nResult = SdShowDlgEdit1(@FW_TITLE_APPNAME, 
                             @FW_MESSAGE_SET_UNIQUE_APPNAME, 
                             @FW_TOKEN_NAME, 
                             svAppUniqueName);
    if (nResult = BACK) goto LABEL_ASK_DEST_PATH;
    
    if(![[cb_regexSearch|#cb_regexSearch]](svAppUniqueName, "^[a-zA-Z_][a-zA-Z0-9_]*$", matches)) then
        MessageBox(@FW_ERROR_FAILED_APPNAME, SEVERE);
        goto LABEL_ASK_UNIQUE_APP_NAME_AGAIN;
    endif;
    
    if([[cb_isUniqueNameFromRegister|#cb_isUniqueNameFromRegister]](svAppUniqueName) != IS_UNIQUE) then
        MessageBox(@FW_ERROR_FAILED_APPNAME_ALREADY, SEVERE);
        goto LABEL_ASK_UNIQUE_APP_NAME_AGAIN;
    endif;

    g_szUniqueApp = svAppUniqueName;

//////////////////////////////
//
// CGIディレクトリの設定
//
//////////////////////////////	
LABEL_ASK_CGI_DIR:
	
    if(![[cb_getCGIRootDirectory|#cb_getCGIRootDirectory]]("localhost", svCgiRootDir)) then
        MessageBox(@FW_ERROR_NOT_FIND_WEBSERVER, SEVERE);
        abort;
    endif;

    Sprintf(szMsg, @FW_MESSAGE_SET_CGI_DIR, g_szUniqueApp);

    nResult = SdAskDestPath(@FW_TITLE_CGI_DIR, 
	                    szMsg, 
	                    svCgiRootDir, 0);
	                        
    if (nResult = BACK) goto LABEL_ASK_UNIQUE_APP_NAME_AGAIN;
    
    g_szCgiDir = svCgiRootDir ^ g_szUniqueApp;
    ComponentSetTarget(MEDIA, "<g_szCgiDir>", g_szCgiDir);

//////////////////////////////
//
// Webドキュメントディレクトリの設定
//
//////////////////////////////	
LABEL_ASK_WEB_DOCUMENT_DIR:

    if(![[cb_getWebRootDirectory|#cb_getWebRootDirectory]]("localhost", svWebRootDir)) then
        MessageBox(@FW_ERROR_NOT_FIND_WEBSERVER, SEVERE);
        abort;
    endif;

    Sprintf(szMsg, @FW_MESSAGE_SET_WEB_DOCUMENT_DIR, g_szUniqueApp);

    nResult = SdAskDestPath(@FW_TITLE_WEB_DOCUMENT_DIR, 
	                    szMsg, 
	                    svWebRootDir, 0);
	                        
    if (nResult = BACK) goto LABEL_ASK_CGI_DIR;
    
    g_szWebDir = svWebRootDir ^ g_szUniqueApp;
    ComponentSetTarget(MEDIA, "<g_szWebDir>", g_szWebDir);

//////////////////////////////
//
// ファイルコピー開始
//
//////////////////////////////	    
LABEL_START_COPY:
    
    nPort = [[cb_getDatabaseEnginePort|#cb_getDatabaseEnginePort]]();
    NumToStr(svPort, nPort);
    
    szTitle = "";
    Sprintf(szMsg,
            @FW_MESSAGE_CONFIRM_FILECOPY, 
            TARGETDIR,
            g_szCgiDir,
            g_szWebDir,
            svPort);
            
    nResult = SdStartCopy2(szTitle, szMsg);	
    if (nResult = BACK) goto LABEL_ASK_WEB_DOCUMENT_DIR;

    // インストール識別子の登録
    [[cb_setProductInfoToRegister|#cb_setProductInfoToRegister]](INSTANCE_GUID, 
                                g_szUniqueApp,
                                cb_getProductMajorVersion(),
                                cb_getProductMinorVersion(), 
                                cb_getDatabaseEngineMajorVersion(), 
                                cb_getDatabaseEngineMinorVersion());

//////////////////////////////
//
// データベースエンジンのセットアップ
//
//////////////////////////////	    
LABEL_SETUP_CYDE:

    [[cb_setupDatabaseEngine|#cb_setupDatabaseEngine]](TARGETDIR, svPort);    
	    
[[cb_logger|#cb_logger]](LOG_TYPE_INFOMATION, "OnFirstUIBefore out");

// <<<<<<<<<<<<<<<< -- [DELETABLE][ END ] --

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  関数:         OnFirstUIAfter
//
//  イベント:     FirstUIAfterイベントは、エンドユーザがインストールを初
//                めてコンピュータ上で実行する場合、ファイル転送後に送信
//                されます。このハンドラでは、通常エンドユーザに対して正
//                常にインストールを完了したことを知らせるユーザインター
//                フェイスを表示します。
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    STRING svUrl;
begin
    
    ...

    // <<<<<<<<<<<<<<<< -- [DELETABLE][START] --
    [[cb_setControlPanelIcon|#cb_setControlPanelIcon]](COMMONFILES ^ "cybozu" ^ @FW_NAME_ICON_DLL, -101);
    // <<<<<<<<<<<<<<<< -- [DELETABLE][ END ] --
    
    // <<<<<<<<<<<<<<<< -- [IMPORTANT][START] --
    [[cb_clearDatabaseEngineEnvironment|#cb_clearDatabaseEngineEnvironment]]();
    [[cb_modifyIISSetting|#cb_modifyIISSetting]](TARGETDISK ^ "InetPub" ^ "scripts");
    // <<<<<<<<<<<<<<<< -- [IMPORTANT][ END ] --
    
    ...
end;

function OnCustomizeUninstInfo()
string szUninstallName;
begin
    szUninstallName = IFX_PRODUCT_NAME + " ( " + g_szUniqueApp + " ) ";
    RegDBSetItem( REGDB_UNINSTALL_NAME, szUninstallName );
end;

// >>>>>>>>>>>>>>>> -- [IMPORTANT][START] --
\#include "fw.rul"
// <<<<<<<<<<<<<<<< -- [IMPORTANT][ END ] -
[[/src]]

[[API一覧|section:api1]]
*▲はユーザーが呼び出す必要はない。フレームワーク内部として必要な物、呼びたければ呼び出してもいいステータスの物等）

[[必須|head:]]
*[[cb_fwInitialize|#cb_fwInitialize]]
*[[cb_fwUnInitialize|#cb_fwUnInitialize]]

[[データベースエンジン関係|head:]]
*[[cb_setupDatabaseEngine|#cb_setupDatabaseEngine]]
*▲ [[cb_getDatabaseEnginePath|#cb_getDatabaseEnginePath]]
*▲ [[cb_getDatabaseEnginePort|#cb_getDatabaseEnginePort]]

[[サービス関係|head:]]
*[[cb_startService|#cb_startService]]
*[[cb_stopService|#cb_stopService]]
*[[cb_getServiceStatus|#cb_getServiceStatus]]
*[[cb_setServiceRecoverConfig|#cb_setServiceRecoverConfig]]

[[webサーバー関係|head:]]
*[[cb_getWebServerType|#cb_getWebServerType]]
*[[cb_getCGIRootDirectory|#cb_getCGIRootDirectory]]
*[[cb_getWebRootDirectory|#cb_getWebRootDirectory]]
*[[cb_getUrl|#cb_getUrl]]

[[ファイルシステム関係|head:]]
*[[cb_setFullAccess|#cb_setFullAccess]]
*[[cb_setAccessControl|#cb_setAccessControl]]

[[文字操作関係|head:]]
*[[cb_sed|#cb_sed]]
*[[cb_convertDelimiter|#cb_convertDelimiter]]

[[ログ関係|head:]]
*[[cb_setLogFile|#cb_setLogFile]]
*[[cb_logger|#cb_logger]]

[[ユーテリティ関係|head:]]
*[[cb_openBrowser|#cb_openBrowser]]
*[[cb_launchApp|#cb_launchApp]]
*[[cb_uninstall|#cb_uninstall]]
*[[cb_getAvailablePort|#cb_getAvailablePort]]
*[[cb_setRegistryValue|#cb_setRegistryValue]]
*[[cb_getRegistryValue|#cb_getRegistryValue]]
*[[cb_regexSearch|#cb_regexSearch]]
*[[cb_setControlPanelIcon|#cb_setControlPanelIcon]]

[[バリデーション関係|head:]]
*[[cb_checkAvailableOS|#cb_checkAvailableOS]]
*[[cb_checkAdministrator|#cb_checkAdministrator]]
*[[cb_checkDiskSpace|#cb_checkDiskSpace]]

[[IIS(Internet Information Server) ユーテリティ関係|head:]]
*[[cb_modifyIISSetting|#cb_modifyIISSetting]]
*▲ [[cb_createIISVirtualDirectory|#cb_createIISVirtualDirectory]]
*▲ [[cb_setSimpleFileShare|#cb_setSimpleFileShare]]
*▲ [[cb_setAllUnknownCGIExtension|#cb_setAllUnknownCGIExtension]]

[[リポジトリ関係|head:]]
*▲ [[cb_setupRepository|#cb_setupRepository]]
*▲ [[cb_deleteRepository|#cb_deleteRepository]]
*▲ [[cb_setDatabaseEngineInfoToRegister|#cb_setDatabaseEngineInfoToRegister]]
*[[cb_setProductInfoToRegister|#cb_setProductInfoToRegister]]
*▲ [[cb_getDatabaseVersionFromRegister|#cb_getDatabaseVersionFromRegister]]
*[[cb_getProductCountFromRegister|#cb_getProductCountFromRegister]]
*[[cb_isUniqueNameFromRegister|#cb_isUniqueNameFromRegister]]

[[バージョン関係|head:]]
*[[cb_getPHPMajorVersion|#cb_getPHPMajorVersion]]
*[[cb_getPHPMinorVersion|#cb_getPHPMinorVersion]]
*[[cb_getDatabaseEngineMajorVersion|#cb_getDatabaseEngineMajorVersion]]
*[[cb_getDatabaseEngineMinorVersion|#cb_getDatabaseEngineMinorVersion]]
*[[cb_getDatabaseEngineSpecificVersion|#cb_getDatabaseEngineSpecificVersion]]

[[API詳細|section:api2]]

[[pos:cb_fwInitialize]]
[[cb_fwInitialize|head:]]
[[html]]
<ul>
<li>概要
 <ul>IDKライブラリの初期化処理を行う</ul>
</li>
<li>宣言
<pre>
cb_fwInitialize();
</pre>
</li>
<li>記述例
<pre>
cb_fwInitialize();
</pre>
</li>
<li>説明
 <ul>
  <li>ライブラリを使用するまえに必ず呼び出す必要があります</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_fwUnInitialize]]
[[cb_fwUnInitialize|head:]]
[[html]]
<ul>
<li>概要
 <ul>IDKライブラリの終了処理を行う</ul>
</li>
<li>宣言
<pre>
cb_fwUnInitialize();
</pre>
</li>
<li>記述例
<pre>
cb_fwUnInitialize();
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setupDatabaseEngine]]
[[cb_setupDatabaseEngine|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンのセットアップを行う</ul>
</li>
<li>宣言
<pre>
cb_setupDatabaseEngine();
</pre>
</li>
<li>記述例
<pre>
cb_setupDatabaseEngine();
</pre>
</li>
<li>説明
 <ul>
  <li>メジャー、マイナーともに違う場合は新たにインストールを行う</li>
  <li>サイボウズバージョンがあがっている場合、アップデートする</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getDatabaseEnginePath]]
[[cb_getDatabaseEnginePath|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンのパスを取得する</ul>
</li>
<li>宣言
<pre>
cb_setupDatabaseEngine();
</pre>
</li>
<li>記述例
<pre>
cb_setupDatabaseEngine();
</pre>
</li>
<li>説明
 <ul>
  <li>すでにインストールされているデータベースエンジンのもの</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getDatabaseEnginePort]]
[[cb_getDatabaseEnginePort|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンポート番号を取得する</ul>
</li>
<li>宣言
<pre>
cb_setupDatabaseEngine();
</pre>
</li>
<li>記述例
<pre>
cb_setupDatabaseEngine();
</pre>
</li>
<li>説明
 <ul>
  <li>すでにインストールされているデータベースエンジンのもの</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_startService]]
[[cb_startService|head:]]
[[html]]
<ul>
<li>概要
 <ul>サービスを開始する</ul>
</li>
<li>宣言
<pre>
cb_startService(/* BYVAL STRING */ szServiceName);
</pre>
</li>
<li>記述例
<pre>
cb_startService("Cybozu Database Engine 4.0");
</pre>
</li>
<li>説明
 <ul>
  <li>サービスが開始されるまで制御がかえりません。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_stopService]]
[[cb_stopService|head:]]
[[html]]
<ul>
<li>概要
 <ul>サービスを停止する</ul>
</li>
<li>宣言
<pre>
cb_stopService(/* BYVAL STRING */ szServiceName);
</pre>
</li>
<li>記述例
<pre>
cb_stopService("Cybozu Database Engine 4.0");
</pre>
</li>
<li>説明
 <ul>
  <li>サービスが停止されるまで制御がかえりません。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getServiceStatus]]
[[cb_getServiceStatus|head:]]
[[html]]
<ul>
<li>概要
 <ul>サービスの状態を取得する</ul>
</li>
<li>宣言
<pre>
cb_getServiceStatus(/* BYVAL STRING */ szServiceName,
                    /* BYREF NUMBER */ nvStatus);
</pre>
</li>
<li>記述例
<pre>
cb_setServiceRecoverConfig("Cybozu Database Engine 4.0", nvStatus);
</pre>
</li>
<li>説明
 <ul>
  <li>サービスの状態</li>
  <ul>
   <li>SERVICE_STOPPED: 停止</li>
   <li>SERVICE_START_PENDING: 開始中</li>
   <li>SERVICE_STOP_PENDING: 停止中</li>
   <li>SERVICE_RUNNING: 実行中</li>
   <li>SERVICE_CONTINUE_PENDING: 継続中</li>
   <li>SERVICE_PAUSE_PENDING: 一時停止中</li>
   <li>SERVICE_PAUSED: 一時停止</li>
  </ul>
 </ul>
</ul>
[[/html]]

[[pos:cb_setServiceRecoverConfig]]
[[cb_setServiceRecoverConfig|head:]]
[[html]]
<ul>
<li>概要
 <ul>サービスのエラー発生時の回復設定をする</ul>
</li>
<li>宣言
<pre>
cb_setServiceRecoverConfig(/* BYVAL STRING */ szServiceName,
                           /* BYVAL NUMBER */ nTime);
</pre>
</li>
<li>記述例
<pre>
cb_setServiceRecoverConfig("Cybozu Database Engine 4.0", 1);
</pre>
</li>
<li>説明
 <ul>
  <li>記述例の場合、エラー発生時に1分後に再起動を試みます。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getWebServerType]]
[[cb_getWebServerType|head:]]
[[html]]
<ul>
<li>概要
 <ul>Webサーバーのタイプを取得する</ul>
</li>
<li>宣言
<pre>
cb_getWebServerType(/* BYVAL STRING */ szHost,
                    /* BYREF NUMBER */ nvType);
</pre>
</li>
<li>記述例
<pre>
cb_getWebServerType("localhost", nvType);
</pre>
</li>
<li>説明
 <ul>
  <li>現在取得できるサーバータイプ</li>
  <ul>
   <li>WEB_SERVER_NOTHING: 検出不可</li>
   <li>WEB_SERVER_IIS: IIS</li>
   <li>WEB_SERVER_CYBOZU_WEB_SERVER: Cybozu Web Server</li>
   <li>WEB_SERVER_APACHE2: Apache2</li>
   <li>WEB_SERVER_APACHE1: Apache</li>
   <li>WEB_SERVER_LOTUS: domino</li>
  </ul>
  <li>Webサーバーは80番ポートで動作中のものを検知する</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getCGIRootDirectory]]
[[cb_getCGIRootDirectory|head:]]
[[html]]
<ul>
<li>概要
 <ul>WebサーバーのCGIディレクトリを取得する</ul>
</li>
<li>宣言
<pre>
cb_getCGIRootDirectory(/* BYVAL STRING */ szHost,
                       /* BYREF STRING */ svDir);
</pre>
</li>
<li>記述例
<pre>
cb_getCGIRootDirectory("localhost", svDir);
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getWebRootDirectory]]
[[cb_getWebRootDirectory|head:]]
[[html]]
<ul>
<li>概要
 <ul>Webサーバーのドキュメントディレクトリを取得する</ul>
</li>
<li>宣言
<pre>
cb_getWebRootDirectory(/* BYVAL STRING */ szHost,
                       /* BYREF STRING */ svDir);
</pre>
</li>
<li>記述例
<pre>
cb_getWebRootDirectory("localhost", svDir);
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getUrl]]
[[cb_getUrl|head:]]
[[html]]
<ul>
<li>概要
 <ul>URLを取得する</ul>
</li>
<li>宣言
<pre>
cb_getUrl(/* BYVAL NUMBER */ nType,
          /* BYVAL STRING */ szUnique,
          /* BYVAL STRING */ szFile,
          /* BYREF STRING */ svUrl);
</pre>
</li>
<li>記述例
<pre>
cb_getUrl(URL_TYPE_CGIDIR, "cbfw", "php.exe", svUrl);
</pre>
</li>

<li>説明</li>
<ul>
<li>このAPIではlocalhostに対して処理を行います。</li>
<li>上記例として、svUrl は apacheの場合 http://geek/cgi-bin/cbfw/php.exe となります。(localhost=geekの場合)</li>
</ul>
<ul><li>nType</li>
  <ul>
   <li>URL_TYPE_WEBDIR: ドキュメントディレクトリ</li>
   <li>URL_TYPE_CGIDIR: CGIディレクトリ</li>
  </ul>
</ul>
</ul>
</li>
[[/html]]

[[pos:cb_setFullAccess]]
[[cb_setFullAccess|head:]]
[[html]]
<ul>
<li>概要
 <ul>ディレクトリのアクセス権をフルアクセスにする</ul>
</li>
<li>宣言
<pre>
cb_setFullAccess(/* BYVAL STRING */ szDir);
</pre>
</li>
<li>記述例
<pre>
cb_setFullAccess("C:\\test");
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setAccessControl]]
[[cb_setAccessControl|head:]]
[[html]]
<ul>
<li>概要
 <ul>ディレクトリのアクセス権を任意に設定する</ul>
</li>
<li>宣言
<pre>
cb_setAccessControl(/* BYVAL STRING */ szDir
                    /* BYVAL STRING */ szAclInfo);
</pre>
</li>
<li>記述例
<pre>
cb_setAccessControl("C:\\test", "/E /G Everyone:F");
</pre>
</li>
<li>説明
 <ul>
  <li>CACLS.exeに渡す制御文字列を設定してください</li>
  <li>記述例の場合、フルアクセスになります</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_sed]]
[[cb_sed|head:]]
[[html]]
<ul>
<li>概要
 <ul>サイボウズ版のsed</ul>
</li>
<li>宣言
<pre>
cb_sed(/* BYVAL STRING */ szPath,
       /* BYVAL STRING */ szFileName,
       /* BYVAL STRING */ szSourcePattern,
       /* BYVAL STRING */ szDestPattern);
</pre>
</li>
<li>記述例
<pre>
cb_sed("C:\\test", "test.dat", "%TESTDATA%", "12345");
</pre>
</li>
<li>説明
 <ul>
  <li>C:\test\test.datの中身をチェックして、「%TESTDATA%」を「12345」に変更する</li>
  <li>検索して見つかった文字列はすべて変更する</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_convertDelimiter]]
[[cb_convertDelimiter|head:]]
[[html]]
<ul>
<li>概要
 <ul>文字列のデリミタを変更する</ul>
</li>
<li>宣言
<pre>
STRING cb_convertDelimiter(/* BYVAL STRING */ szConv,
                           /* BYVAL STRING */ szSourceDelimiter,
                           /* BYVAL STRING */ szDestDelimiter);
</pre>
</li>
<li>戻り値
<pre>
変換された文字列
(記述例の場合 「C:/Program Files/Cybozu/cbfw」)
</pre>
</li>
<li>記述例
<pre>
cb_convertDelimiter("C:\\Program Files\\Cybozu\\cbfw", "\\", "/");
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setLogFile]]
[[cb_setLogFile|head:]]
[[html]]
<ul>
<li>概要
 <ul>ログファイル名の設定をする</ul>
</li>
<li>宣言
<pre>
cb_setLogFile(/* BYVAL STRING */ szFileName);
</pre>
</li>
<li>記述例
<pre>
cb_setLogFile("hoge.log");
</pre>
</li>
<li>説明
 <ul>
  <li>出力先のディレクトリはWINDIRです。(「echo %windir」で確認できるディレクトリです。)</li>
  <li>ファイルは追記モードで書き込みます。</li>
  <li>ファイル名のデフォルトは「_cb_installer.log」です。
 </ul>
</ul>
[[/html]]

[[pos:cb_logger]]
[[cb_logger|head:]]
[[html]]
<ul>
<li>概要
 <ul>ログの書き込みを行う</ul>
</li>
<li>宣言
<pre>
cb_logger(/* BYVAL NUMBER */ nType,
          /* BYVAL STRING */ szMsg);
</pre>
</li>
<li>記述例
<pre>
cb_logger(FW_LOG_TYPE_ERROR, "HOGEHOGEHOGE");
</pre>
</li>
<li>説明
 <ul>
  <li>ログのタイプ</li>
  <ul>
   <li>LOG_TYPE_INFOMATION: 情報</li>
   <li>LOG_TYPE_WARNIG: 警告</li>
   <li>LOG_TYPE_ERROR: エラー</li>
  </ul>
 </ul>
</li>
</ul>
[[/html]]

[[pos:cb_openBrowser]]
[[cb_openBrowser|head:]]
[[html]]
<ul>
<li>概要
 <ul>ブラウザを開く</ul>
</li>
<li>宣言
<pre>
cb_openBrowser(/* BYVAL STRING */ szUrl);
</pre>
</li>
<li>記述例
<pre>
cb_openBrowser("http://www.yahoo.co.jp");
</pre>
</li>
<li>説明
 <ul>
  <li>デフォルトの設定が行われているブラウザがURL指定で立ち上がります。</li>
  <li>実際に使用する際は、cb_getUrlと対でつかわるとことになります。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_launchApp]]
[[cb_launchApp|head:]]
[[html]]
<ul>
<li>概要
 <ul>別のアプリケーションプログラムを起動する</ul>
</li>
<li>宣言
<pre>
NUMBER cb_launchApp(/* BYVAL STRING */ szProgram, 
                    /* BYVAL STRING */ szCmdLine, 
                    /* BYVAL NUMBER */ nWait, 
                    /* BYVAL NUMBER */ nShow, 
                    /* BYVAL NUMBER */ nTimeOut, 
                    /* BYREF NUMBER */ nvExitCode);
</pre>
</li>
<li>戻り値
<pre>
= 0 [正常]
< 0 [異常]
</pre>
</li>
<li>記述例
<pre>
cb_launchApp("C:\\WINDOWS\\NOTEPAD.EXE", "", WAIT, SW_SHOW, -1, nvExitCode);
</pre>
</li>
<li>説明
 <ul>
  <li>LaunchApp、LaunchAppAndWaitの拡張版になります。</li>
  <li>上記スクリプトを呼び出すとコンソールの表示が免れませんが、このAPIでは表示、非表示を制御可能です。</li>
  <li>nTimeoutはnWaitで「WAIT」が設定された場合のみ有効です。-1が設定されると「INFINITE(無限)」になります。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_uninstall]]
[[cb_uninstall|head:]]
[[html]]
<ul>
<li>概要
 <ul>別のアプリケーションをアンインストールする</ul>
</li>
<li>宣言
<pre>
cb_uninstall(/* BYVAL STRING */ szDisplayName);
</pre>
</li>
<li>記述例
<pre>
cb_uninstall("Cybozu Database Engine 4.0");
</pre>
</li>
<li>説明
 <ul>
  <li>別のアプリケーションのアンインストールを行います。</li>
  <li>アプリケーションのアンインストールが終了するまで制御はかえりません。</li>
  <li>引数としては、コントロールパネルでのプログラムの追加と削除で表示されている名称を設定してください。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getAvailablePort]]
[[cb_getAvailablePort|head:]]
[[html]]
<ul>
<li>概要
 <ul>利用可能なポート番号を取得する</ul>
</li>
<li>宣言
<pre>
cb_getAvailablePort(/* BYVAL NUMBER */ nStart,
                    /* BYVAL NUMBER */ nCount);
</pre>
</li>
<li>戻り値
<pre>
= 0  [利用可能なポートがない]
!= 0 [利用可能なポート]
</pre>
</li>
<li>記述例
<pre>
cb_getAvailablePort(5000, 100);
</pre>
</li>
<li>説明
 <ul>
  <li>記述例の場合、5000番から検索し、5100番までで一番ちいさな空きポート番号を返す</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setRegistryValue]]
[[cb_setRegistryValue|head:]]
[[html]]
<ul>
<li>概要
 <ul>レジストリへデータを設定する</ul>
</li>
<li>宣言
<pre>
cb_setRegistryValue(/* BYVAL NUMBER */ nRootkey,
                    /* BYVAL STRING */ szkeyPath,
                    /* BYVAL STRING */ szkeyName,
                    /* BYVAL NUMBER */ nType,
                    /* BYVAL STRING */ szValue);
</pre>
</li>
<li>記述例
<pre>
cb_setRegistryValue(HKEY_LOCAL_MACHINE, 
                    "PATH", 
                    "KEY",
                    REGDB_STRING_EXPAND,
                    "DATA");
</pre>
</li>
<li>説明
 <ul>
  <li>レジストリのルート設定を行い、パスが存在する場合、キー、値を書き込みます</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setRegistryValue]]
[[cb_setRegistryValue|head:]]
[[html]]
<ul>
<li>概要
 <ul>レジストリからデータを取得する</ul>
</li>
<li>宣言
<pre>
cb_getRegistryValue(/* BYVAL NUMBER */ nRootkey,
                    /* BYVAL STRING */ szkeyPath,
                    /* BYVAL STRING */ szkeyName,
                    /* BYREF NUMBER */ nType,
                    /* BYREF STRING */ svValue);
</pre>
</li>
<li>記述例
<pre>
cb_getRegistryValue(HKEY_LOCAL_MACHINE, 
                    "PATH", 
                    "KEY",
                    REGDB_STRING_EXPAND,
                    svValue);
</pre>
</li>
<li>説明
 <ul>
  <li>レジストリのルート設定を行い、パスが存在する場合、値を取得します</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_regexSearch]]
[[cb_regexSearch|head:]]
[[html]]
<ul>
<li>概要
 <ul>正規表現による文字列のマッチングを行う</ul>
</li>
<li>宣言
<pre>
function BOOL cb_regexSearch(/* BYVAL STRING */  source, 
                             /* BYVAL STRING */  regexPattern, 
                             /* BYREF VARIANT */ matches);
</pre>
</li>
<li>記述例
<pre>
cb_regexSearch("&lta href='http://www.cybozu.co.jp:80/index.html'&gthere&lt/a&gt",
               "(([a-z]+):)?//([^:/]+)(:([0-9]+))?/([a-zA-Z.0-9]*)",
               matches);

以下、出力結果(尚、matchesには予め戻る可能性のある配列数を設定して渡してください。)
matches(0) => http://www.cybozu.co.jp:80/index.html
matches(1) => http:
matches(2) => http
matches(3) => www.cybozu.co.jp
matches(4) => :80
matches(5) => 80
matches(6) => index.html
</pre>
</li>
<li>戻り値
<pre>
TRUE  [正規表現にマッチした]
FALSE [正規表現にマッチしない]
</pre>
</li>
<li>説明
 <ul>
  <li>文字列を正規表現にマッチさせます。上記の例のように()を使用してマッチングしたものを保存して、取得することもできます。単にマッチしたかどうかを知りたい場合、戻り値をみて判定してください。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setControlPanelIcon]]
[[cb_setControlPanelIcon|head:]]
[[html]]
<ul>
<li>概要
 <ul>コントロールパネルのアプリケーションの追加削除画面に表示するアイコンを設定する</ul>
</li>
<li>宣言
<pre>
cb_setControlPanelIcon();
function cb_setControlPanelIcon(/* BYVAL STRING */  szPath, 
                                /* BYVAL NUMBER */  nId);
</pre>
</li>
<li>記述例
<pre>
cb_setControlPanelIcon(COMMONFILES ^ "cybozu" ^ @FW_NAME_ICON_DLL, -101);
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_checkAvailableOS]]
[[cb_checkAvailableOS|head:]]
[[html]]
<ul>
<li>概要
 <ul>利用可能なＯＳか判定する</ul>
</li>
<li>宣言
<pre>
cb_checkAvailableOS();
</pre>
</li>
<li>記述例
<pre>
cb_checkAvailableOS();
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_checkAdministrator]]
[[cb_checkAdministrator|head:]]
[[html]]
<ul>
<li>概要
 <ul>管理者権限のあるユーザーか判定する</ul>
</li>
<li>宣言
<pre>
cb_checkAdministrator();
</pre>
</li>
<li>記述例
<pre>
cb_checkAdministrator();
</pre>
</li>
<li>説明
 <ul>
  <li>特になし</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_checkDiskSpace]]
[[cb_checkDiskSpace|head:]]
[[html]]
<ul>
<li>概要
 <ul>セットアップ可能な空き容量か判定する</ul>
</li>
<li>宣言
<pre>
cb_checkDiskSpace(/* BYVAL NUMBER */ nSpace);
</pre>
</li>
<li>記述例
<pre>
cb_checkDiskSpace(5000);
</pre>
</li>
<li>説明
 <ul>
  <li>単位はメガバイトで指定してください。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_modifyIISSetting]]
[[cb_modifyIISSetting|head:]]
[[html]]
<ul>
<li>概要
 <ul>IIS5.1, 6.0対応の処理を行う</ul>
</li>
<li>宣言
<pre>
cb_modifyIISSetting(/* BYVAL STRING */ szScriptPath,
                    /* BYVAL STRING */ szUniqueName);
</pre>
</li>
<li>記述例
<pre>
cb_modifyIISSetting(TARGETDISK ^ "InetPub" ^ "scripts", "cbfw");
</pre>
</li>
<li>説明
 <ul>
  <li>上記例の場合、(例)C:\InetPub\scripts下に対してIIS5.1, 6.0の対応をすべて自動で行ってくれます。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_createIISVirtualDirectory]]
[[cb_createIISVirtualDirectory|head:]]
[[html]]
<ul>
<li>概要
 <ul>IISの仮想ディレクトリの作成を行う</ul>
</li>
<li>宣言
<pre>
cb_createIISVirtualDirectory(/* BYVAL STRING */ szVirtualDir, 
                             /* BYVAL STRING */ szDir);
</pre>
</li>
<li>記述例
<pre>
cb_createIISVirtualDirectory("scripts", "C:\InetPub\scripts");
</pre>
</li>
<li>説明
 <ul>
  <li>上記例の場合、C:\InetPub\scriptsを仮想ディレクトリscriptsに関連つけます。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setSimpleFileShare]]
[[cb_setSimpleFileShare|head:]]
[[html]]
<ul>
<li>概要
 <ul>簡易ファイルの共有設定のON/OFFを行う</ul>
</li>
<li>宣言
<pre>
cb_setSimpleFileShare(/* BYVAL NUMBER */ bOnOff);
</pre>
</li>
<li>記述例
<pre>
cb_setSimpleFileShare(1);
</pre>
</li>
<li>説明
 <ul>
  <li>上記例の場合、簡易ファイルの共有設定をONにする。0を渡せば、OFFに設定します。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setAllUnknownCGIExtension]]
[[cb_setAllUnknownCGIExtension|head:]]
[[html]]
<ul>
<li>概要
 <ul>すべての不明なCGI拡張のON/OFFを行う</ul>
</li>
<li>宣言
<pre>
cb_setAllUnknownCGIExtension(/* BYVAL NUMBER */ bOnOff);
</pre>
</li>
<li>記述例
<pre>
cb_setAllUnknownCGIExtension(1);
</pre>
</li>
<li>説明
 <ul>
  <li>上記例の場合、すべての不明なCGI拡張をONにする。0を渡せば、OFFに設定します。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setupRepository]]
[[cb_setupRepository|head:]]
[[html]]
<ul>
<li>概要
 <ul>サイボウズ製品用のレジストリのセットアップを行う</ul>
</li>
<li>宣言
<pre>
cb_setupRepository();
</pre>
</li>
<li>戻り値
<pre>
RET_SUCCESS: 正常
RET_ERROR:   異常
</pre>
</li>
<li>記述例
<pre>
cb_setupRepository();
</pre>
</li>
<li>説明
 <ul>
  <li>フレームワークの処理に組み込まれるため、ユーザーがコールする必要はありません。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_deleteRepository]]
[[cb_deleteRepository|head:]]
[[html]]
<ul>
<li>概要
 <ul>レジストリの削除を行う</ul>
</li>
<li>宣言
<pre>
cb_deleteRepository();
</pre>
</li>
<li>戻り値
<pre>
RET_SUCCESS: 正常
RET_ERROR:   異常
</pre>
</li>
<li>記述例
<pre>
cb_deleteRepository();
</pre>
</li>
<li>説明
 <ul>
  <li>フレームワークの処理に組み込まれるため、ユーザーがコールする必要はありません。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setDatabaseEngineInfoToRegister]]
[[cb_setDatabaseEngineInfoToRegister|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンの情報をレジストリに書き込む</ul>
</li>
<li>宣言
<pre>
cb_setDatabaseEngineInfoToRegister(BYVAL STRING /* szGuid */, 
                                   BYVAL NUMBER /* nMajor */, 
                                   BYVAL NUMBER /* nMinor */);
</pre>
</li>
<li>戻り値
<pre>
RET_SUCCESS: 正常
RET_ERROR:   異常
</pre>
</li>
<li>記述例
<pre>
cb_setDatabaseEngineInfoToRegister(INSTANCE_GUID, 
                                   cb_getDatabaseEngineMajorVersion(),
                                   cb_getDatabaseEngineMinorVersion());
</pre>
</li>
<li>説明
 <ul>
  <li>レジストリへデータベースエンジンの情報を書き込む。GUIDによって一元管理されます。</li>
  <li>データベースに関連する処理はすべて、フレームワークによって処理されますので、ユーザーが使用することはありません。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_setProductInfoToRegister]]
[[cb_setProductInfoToRegister|head:]]
[[html]]
<ul>
<li>概要
 <ul>製品情報をレジストリに書き込む</ul>
</li>
<li>宣言
<pre>
cb_setProductInfoToRegister(BYVAL STRING /* szGuid */, 
                            BYVAL STRING /* szUniqueName */, 
                            BYVAL NUMBER /* nProductMajor */, 
                            BYVAL NUMBER /* nProductMinor */, 
                            BYVAL NUMBER /* nDatabaseEngineMajor */, 
                            BYVAL NUMBER /* nDatabaseEngineMinor */);
</pre>
</li>
<li>戻り値
<pre>
RET_SUCCESS: 正常
RET_ERROR:   異常
</pre>
</li>
<li>記述例
<pre>
cb_setDatabaseEngineInfoToRegister(INSTANCE_GUID,
                                   "cbfw",
                                   cb_getAzaleaMajorVersion(),            // azalea用の隠しAPI
                                   cb_getAzaleaMinorVersion(),            // azalea用の隠しAPI
                                   cb_getDatabaseEngineMajorVersion(),
                                   cb_getDatabaseEngineMinorVersion());
</pre>
</li>
<li>説明
 <ul>
  <li>レジストリへ製品情報を書き込む。GUIDによって一元管理されます。</li>
  <li>製品はマルチインスタンスになるため、INSTANCE_GUIDを使用してください。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getDatabaseVersionFromRegister]]
[[cb_getDatabaseVersionFromRegister|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンのバージョンを取得する</ul>
</li>
<li>宣言
<pre>
cb_getDatabaseVersionFromRegister(BYVAL STRING /* szGuid */, 
                                  BYREF STRING /* svVersion */);
</pre>
</li>
<li>戻り値
<pre>
RET_SUCCESS: 正常
RET_ERROR:   異常
</pre>
</li>
<li>記述例
<pre>
cb_getDatabaseVersionFromRegister(INSTANCE_GUID, svVersion);
</pre>
</li>
<li>説明
 <ul>
  <li>データベースエンジン自身がバージョンを取得するためのものです。ユーザーが使用することはありません。</li>
  <li>ただし、同バージョンのデータベースは複数インストールできないので、GUIDが決まっており、それを利用すれば、取得することは可能です。</li>
  <li>このAPIは、バージョン関連のAPIと違いアンインストール時にも使用可能です。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getProductCountFromRegister]]
[[cb_getProductCountFromRegister|head:]]
[[html]]
<ul>
<li>概要
 <ul>指定されたバージョンのデータベースエンジンを使用している製品数を取得する</ul>
</li>
<li>宣言
<pre>
cb_getProductCountFromRegister(BYVAL STRING /* szDatabaseVersion */, 
                               BYREF NUMBER /* nvCount */);
</pre>
</li>
<li>戻り値
<pre>
RET_SUCCESS: 正常
RET_ERROR:   異常
</pre>
</li>
<li>記述例
<pre>
cb_getProductCountFromRegister("4.1", nvCount);
</pre>
</li>
<li>説明
 <ul>
  <li>上記の例の場合、「Cybozu Database Engine 4.1」を利用している製品数を取得します。</li>
  <li>データベースエンジン自体は、使用している製品をすべてアンインストールした後でないとアンインストールできません。その為に使用します。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_isUniqueNameFromRegister]]
[[cb_isUniqueNameFromRegister|head:]]
[[html]]
<ul>
<li>概要
 <ul>インストール識別子が一意かどうかの判定を行う</ul>
</li>
<li>宣言
<pre>
cb_isUniqueNameFromRegister(BYVAL STRING /* szUniqueName */);
</pre>
</li>
<li>戻り値
<pre>
IS_UNIQUE:      一意である
IS_NOT_UNIQUE:  一意でない
RET_ERROR:      異常
</pre>
</li>
<li>記述例
<pre>
cb_isUniqueNameFromRegister("cbfw");
</pre>
</li>
<li>説明
 <ul>
  <li>インストール識別子は正規表現「^[a-zA-Z_][a-zA-Z0-9_]*$」で表現される文字列になります。</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getPHPMajorVersion]]
[[cb_getPHPMajorVersion|head:]]
[[html]]
<ul>
<li>概要
 <ul>PHPのメジャーバージョンを取得する</ul>
</li>
<li>宣言
<pre>
cb_getPHPMajorVersion();
</pre>
</li>
<li>戻り値
<pre>
メジャーバージョン
</pre>
</li>
<li>記述例
<pre>
cb_getPHPMajorVersion();
</pre>
</li>
<li>説明
 <ul>
  <li>インストールしようとしているPHPのもの</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getPHPMinorVersion]]
[[cb_getPHPMinorVersion|head:]]
[[html]]
<ul>
<li>概要
 <ul>PHPのマイナーバージョンを取得する</ul>
</li>
<li>宣言
<pre>
cb_getPHPMajorVersion();
</pre>
</li>
<li>戻り値
<pre>
マイナーバージョン
</pre>
</li>
<li>記述例
<pre>
cb_getPHPMajorVersion();
</pre>
</li>
<li>説明
 <ul>
  <li>インストールしようとしているPHPのもの</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getDatabaseEngineMajorVersion]]
[[cb_getDatabaseEngineMajorVersion|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンのメジャーバージョンを取得する</ul>
</li>
<li>宣言
<pre>
cb_getDatabaseEngineMajorVersion();
</pre>
</li>
<li>戻り値
<pre>
メジャーバージョン
</pre>
</li>
<li>記述例
<pre>
cb_getDatabaseEngineMajorVersion();
</pre>
</li>
<li>説明
 <ul>
  <li>インストールしようとしているデータベースエンジンのもの</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getDatabaseEngineMinorVersion]]
[[cb_getDatabaseEngineMinorVersion|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンのマイナーバージョンを取得する</ul>
</li>
<li>宣言
<pre>
cb_getDatabaseEngineMinorVersion();
</pre>
</li>
<li>戻り値
<pre>
マイナーバージョン
</pre>
</li>
<li>記述例
<pre>
cb_getDatabaseEngineMinorVersion();
</pre>
</li>
<li>説明
 <ul>
  <li>インストールしようとしているデータベースエンジンのもの</li>
 </ul>
</ul>
[[/html]]

[[pos:cb_getDatabaseEngineSpecificVersion]]
[[cb_getDatabaseEngineSpecificVersion|head:]]
[[html]]
<ul>
<li>概要
 <ul>データベースエンジンのサイボウズバージョンを取得する</ul>
</li>
<li>宣言
<pre>
cb_startService(/* BYVAL STRING */ szServiceName);
</pre>
</li>
<li>戻り値
<pre>
サイボウズバージョン
</pre>
</li>
<li>記述例
<pre>
cb_startService("Cybozu Database Engine 4.0");
</pre>
</li>
<li>説明
 <ul>
  <li>インストールしようとしているデータベースエンジンのもの</li>
 </ul>
</ul>
[[/html]]

[[拡張モジュール(dll/exe)|section:ex]]
*これらのモジュールをユーザーが使用することはありません。
*上記スクリプトによって必ずラップされているためそれを利用してください。

[[html]]
<br>
<table border="1">
 <tr>
  <th>モジュール名</th>
  <th>機能</th>
 </tr>
 <tr>
  <td>fwHelper.dll</td>
  <td>現在ほとんどの処理がこのモジュールの中にあります。拡張する場合、ここに処理を追加してください。</td>
 </tr>
 <tr>
  <td>tinysed.exe</td>
  <td>テキストファイル中の文字列置換を行なう外部コマンド</td>
 </tr>
 <tr>
  <td>portscan.dll</td>
  <td>ポート番号を調べるユーテリティ</td>
 </tr>
 <tr>
  <td>iisUtility.dll</td>
  <td>IIS5.1, 6.0対応ユーテリティ</td>
 </tr>
 <tr>
  <td>regex.dll</td>
  <td>正規表現用ライブラリ</td>
 </tr>
</table>
[[/html]]

[[レジストリ構成|section:reg]]
IDKによって使用されるレジストリ構成は以下のようになります。
 （これによって製品のバージョン等の情報を一元管理し、複数インストール等の動作を実現しています。）

[[src]]
((HKEY_LOCAL_MACHINE\SOFTWARE\Cybozu))
     |
     +-- ''fw''                                     
          |
          +-- ''database''
          |     |
          |     +--''%GUID%''                         データベースエンジンのGUID
          |           +-- databaseVersion          データベースバージョン (ex. 4.1)
          |
          +-- ''product''
                |
                +--''%GUID%''                         各製品のGUID（各製品はマルチインスタンス）
                      +-- databaseVersion          データベースバージョン (ex. 4.1)
                      +-- productVersion           製品のバージョン (ex. 5.1)
                      +-- uniqueName               インストール識別子
[[/src]]
