[[概要|section:abstract]]
azaleaではデバッグ環境として以下のモジュールをバンドルしています。
#[[xdebug|http://www.xdebug.com/]]
#[[PHPSimpleDebugger|http://uprising.s16.xrea.com/ishino16/]] (windows版のみ)

xdebugはPHPのデバッグプロトコルに準拠した、[[PECL|http://pecl.php.net/]] のモジュールです。
PHPSimpleDebuggerは [[DBG|http://dd.cron.ru/dbg/]] を使ったシンプルなGUIデバッグツールです。

AzaleaのPHPは簡単インストールを実現するためにパッチをあてており、そのため殆どのIDE等とは連携が非常に難しい状況です。
 上記2つはそのシンプルな構成から、Azaleaでも利用することが可能です。
 
また、xdebugにおいては、デバッグだけでなく、プロファイリングも実行することができます。
 特に [[自動プロファイリング|#auto_profile]] はコードに触れることなく実行することができるので、QAエンジニアの方も容易に使用することができます。
 大まかなボトルネックを確認したりする際に等に使用してください。
 
[[用語|section:term]]
[[html]]
<table class=cb_doc_table border="1">
  <tr>
    <th width=30%>用語</th>
    <th width=70%>意味</th>
  </tr>
  <tr>
    <td>デバッガ</td>
    <td>プログラムのバグの発見や修正を支援するソフトウェアのこと。<br>
プログラムの実行を特定の行で中断する「ブレークポイント」機能や、
一行ずつ実行する「ステップ実行」機能、
プログラム実行中のメモリや変数の内容を見る「トレース」機能が備えられている。
    </td>
  </tr>
  <tr>
    <td>プロファイリング</td>
    <td>動作中のプログラムがどの処理をどういった順序で実行したかを監視すること。<br>
開発者はこうした記録を分析することで、プログラムが自分の意図通りに動作しているか、
またプログラムのどの部分がボトルネックとなって処理に時間がかかっているのか、
などを知ることができる。<br>
（プログラムの障害を見つけるために用いられるよりも、プログラムの余計な部分を削るなどして高速化するために用いられることが多い。）
</td>
  <tr>
    <td>カバレッジ</td>
    <td>コードのどの部分が実行されたか、何回実行されたか、を記録し解析すること。</td>
  </tr>
</table>
[[/html]]

[[構成|section:deploy]]
[[src]]
((%PHPSDK%))                                  PHPSDKのルート(ex. C:\Program Files\Cybozu\php-4.3)
    +-- ''bin''
         +-- debugclient.exe              デバッククライアント
         |
         +-- ''debugger''                    PHPSimpleDebugger用 (windows版のみ)
                +-- install.bat           インストール用バッチファイル
                +-- uninstall.bat         アンインストール用バッチファイル
                +-- ''listener''             リスナー
                +-- ''simple''               デバッガ本体

((%CGIDIR%))                                  CGIディレクトリ(ex. C:\Program Files\Apache Group\Apache2\cgi-bin)
    +-- ''cbfw''
         +-- ''extensions''
         |        +-- php_xdebug.dll      xdebug extensionモジュール
         |        +-- php_dbg.dll         [[DBG|http://dd.cron.ru/dbg/]] モジュール (windows版のみ)
         |
         +-- ''profile''                      [[自動プロファイリング|#auto_profile]] の結果
                                          (ファイル名は **xdebug_[タイムスタンプ]_[プロセスID].txt** の形で出力されます。)
[[/src]]

[[PHP への組み込み方法|section:bundle]]

[[xdebug の組み込み|head:]]
''php.ini'' に適切な値を設定するだけでxdebugを組み込むことができます。
 実際には、インストーラー等によって適切な値が書き込まれていますので、開発者が行わなければならない作業は、コメントを外すだけです。
 細かいカスタマイズしたい場合のみ、値を書き換えてください。

以下に具体的な ''php.ini'' の変更内容を示します。
[[src]]
{{----------------------------------------------------------}}
{{ionCube と xdebug は共存できないのでコメントにしてください}}
{{----------------------------------------------------------}}
''[ionCube]''
;**zend_extension_ts** = D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\extensions\ioncube_loader.dll

{{----------------------------------------------------------}}
{{以下のエントリーのコメントを解除してください}}
{{----------------------------------------------------------}}
''[xdebug]''
; ------------------------------------------------------
; profiler PEAR::xdebug for developer
;  - you need to compile xdebug dll and store it
;  - you need to turn off Zend Optimier when use xdebug
; ------------------------------------------------------
**zend_extension_ts** = D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\extensions\php_xdebug.dll 
; PEAR::xdebug setting
; 1 - turn on xdebug profiler for all code
;**xdebug.auto_profile** = 1         {{<-- [[自動プロファイリング|#auto_profile]] を使う場合、コメントを外す}}
; 0-8 modes
;**xdebug.auto_profile_mode** = 4    {{<-- [[自動プロファイリング|#auto_profile]] を使う場合、コメントを外す}}
; profile log is recoreded here. MUST exist before run script!
**xdebug.output_dir** =D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\profile
; remote debug
**xdebug.remote_enable** = On        {{<-- デバッククライアントを使用する場合、必須}}

''[debugger]''
**debugger.host** = 127.0.0.1        {{<-- 別マシンからのデバックを可能にする}}
**debugger.port** = 17869            {{<-- デバッグクライアントのデフォルトポート番号}}
**debugger.enabled** = TRUE          {{<-- デバッグ可能にする}}

{{----------------------------------------------------------}}
{{エラーメッセージのHTMLタグをオフにします。}}
{{エラー処理およびlog記録関数用ですが、}}
{{xdebugのダンプ処理でもこのフラグをみてHTML形式の出力を行う。}}
{{----------------------------------------------------------}}
html_errors=On
[[/src]]

[[PHPSimpleDebugger の組み込み|head:]]
まずは PHPSimpleDebugger をインストールする必要があります。
 インストールは ''debugger/install.bat'' を実行するだけです。
 (アンインストールしたい場合は同ディレクトリにある、 ''uninstall.bat'' を実行してください。)
 
次に、 ''php.ini'' を適切な値に設定してください。
 これも xdebug 同様すでに組み込まれていますので、作業としてはコメントをはずすだけです。
 細かいカスタマイズしたい場合のみ、値を書き換えてください。

以下に具体的な ''php.ini'' の変更内容を示します。
[[src]]
''[ionCube]''
;**zend_extension_ts** = D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\extensions\ioncube_loader.dll

''[PHP]''
**extension** = php_dbg.dll

''[debugger]''
**debugger.enabled** = TRUE
**debugger.profiler_enabled** = true
**debugger.JIT_host** = clienthost
**debugger.JIT_port** = 7869
[[/src]]

[[xdebug の使い方|section:how_to_use_xdebug]]
ここではデバッククライアントを使用した、実際のデバック、プロファイリングの仕方を説明します。
 デバッククライアントは [[構成|#deploy]] 上にある、debugclient.exe (windows版の場合)です。
 
[[対象となるサンプルコード|head:sample_target_code]]

[[src]]
''(test.csp)''

<?php
    class framework
    {
        var $_member = NULL;
        function addMembers($members)
        {
            foreach($members as $member)
            {
                $this->addMember($member);
            }
        }
        function addMember($member)
        {
            $this->_member[]= $member;
        }
        function showMember()
        {
            var_dump($this->_member);
        }
    }
    
    $fw = new framework;
    $fw->addMembers(array("hata","yamamoto","hagiya"));
    $fw->showMember();
    {{/*}}
    {{array(3) {}}
    {{  [0]=>string(4) "hata"}}
    {{  [1]=>string(8) "yamamoto"}}
    {{  [2]=>string(6) "hagiya"}}
    {{}*/ }}
?>
[[/src]]

[[「コールスタック」を確認するサンプル|head::sample_callstack]]

[[src]]
{{デバッグクライアントを開始する}}
C:\Program Files\Cybozu\php-4.3\bin>''debugclient''
Xdebug GDB emulation client (0.7.2)
Copyright 2002 by Derick Rethans, JDI Media Solutions.

{{PHPスクリプト側からの接続を待つ}}
Waiting for debug server to connect.
Connect
This is Xdebug version 1.3.0dev.
Copyright 2002 by Derick Rethans, JDI Media Solutions.

{{{main}にブレークポイントを設定する}}
{{※{main}はスクリプト上は見えないが、各ファイルのグローバルコードのエントリポイントとして、}}
{{スクリプトエンジンのシンボルテーブルに登録されている}}
(init D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp) **break {main}**
1 Breakpoint set on function.

{{デバック開始}}
(init D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp) **run**
Starting program: D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp

{{フレームワークでは php.ini の auto_prepend_file に prepend.csp を設定しているため}}
{{必ず実行前にここを実行する}}
Breakpoint, {main}()
        at D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp:0
3       require( 'fw/prepend.csp' );           // framework

{{次のブレークポイントまでジャンプする}}
(cmd) **continue**
Continuing.

{{目的とするファイルの{main}に到着}}
Breakpoint, {main}()
        at D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0
4           {

{{ステップ実行しながら目的とする位置まで進む}}
(cmd) **step**
4           {

(cmd) **step**
23          $fw = new framework;

(cmd) **step**
24          $fw->addMembers(array("hata","yamamoto","hagiya"));

(cmd) **step**
8                   foreach($members as $member)

(cmd) **step**
10                      $this->addMember($member);

(cmd) **step**
15                  $this->_member[]= $member;

{{現在の実行位置を確かめる。確かに15行目}}
(cmd) **list**
15                  $this->_member[]= $member;
16              }
17              function showMember()
18              {
19                  var_dump($this->_member);
20              }
21          }
22
23          $fw = new framework;
24          $fw->addMembers(array("hata","yamamoto","hagiya"));

{{何クラスがコールされているか？}}
(cmd) **eval xdebug_call_class();**
'framework'

{{何関数がコールされているか？}}
(cmd) **eval xdebug_call_function();**
'addmember'

{{何ファイルがコールされているか？}}
(cmd) **eval xdebug_call_file();**
'C:\\Program Files\\Apache Group\\Apache2\\cgi-bin\\cbfw\\code\\doc_root\\test.csp'

{{何行目がコールされているか？}}
(cmd) **eval xdebug_call_line();**
15

{{行番号の確認}}
(cmd) **list 1, 26**
1       <?php
2
3           class framework
4           {
5               var $_member = NULL;
6               function addMembers($members)
7               {
8                   foreach($members as $member)
9                   {
10                      $this->addMember($member);
11                  }
12              }
13              function addMember($member)
14              {
15                  $this->_member[]= $member;
16              }
17              function showMember()
18              {
19                  var_dump($this->_member);
20              }
21          }
22
23          $fw = new framework;
24          $fw->addMembers(array("hata","yamamoto","hagiya"));
25          $fw->showMember();
26

{{関数スタックを表示する}}
(cmd) **eval xdebug_get_function_stack();**
array(4) {
  [0]=>
  array(4) {
    ["function"]=>
    string(6) "{main}"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(0)
    ["params"]=>
    array(0) {
    }
  }
  [1]=>
  array(5) {
    ["function"]=>
    string(10) "addmembers"
    ["class"]=>
    string(9) "framework"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(24)
    ["params"]=>
    array(0) {
    }
    {{実際はこの様に表示されるはずだが、なぜか空になってしまう。}}
    {{xdebugのバグとおもわれるので調査する}}
    {{["params"]=>}}
    {{array(1) {}}
    {{  [0]=>string(49) "array (0 => 'hata', 1=> 'yamamoto', 2=> 'hagiya')"}}
    {{} }}
  }
  [2]=>
  array(5) {
    ["function"]=>
    string(9) "addmember"
    ["class"]=>
    string(9) "framework"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(10)
    ["params"]=>
    array(0) {
    }
    {{実際はこの様に表示されるはずだが、なぜか空になってしまう。}}
    {{xdebugのバグとおもわれるので調査する}}
    {{["params"]=>}}
    {{array(1) {}}
    {{  [0]=>string(6) "'hata'"}}
    {{} }}
  }
  [3]=>
  array(4) {
    ["function"]=>
    string(9) "addmember"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(15)
    ["params"]=>
    array(0) {
    }
  }
}

{{$fwの値を確認する}}
(cmd) **print fw**
$fw = class framework {var $_member = array (0 => 'hata', 1 => 'yamamoto', 2 =>'hagiya')}

{{値の書き換えも可能}}
(cmd) **eval $fw->_member = array("hoge", "hogehoge");**
array (0 => 'hoge', 1 => 'hogehoge')
[[/src]]

[[「カバレッジ」を確認するサンプル|head:sample_coverage]]

[[src]]
{{ここまでは上記と同様}}
...

(cmd) **continue**
Continuing.
Breakpoint, {main}()
        at D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test
4.csp:0
4           {

{{カバレッジの取得を開始する}}
(cmd) **eval xdebug_start_code_coverage();**
NULL

{{ステップオーバーしながら目的とする位置まで進む}}
(cmd) **next**
4           {

(cmd) **next**
23          $fw = new framework;

(cmd) **next**
24          $fw->addMembers(array("hata","yamamoto","hagiya"));

(cmd) **next**
25          $fw->showMember();

{{カバレッジを取得する}}
(cmd) **eval xdebug_get_code_coverage();**
array(1) {
  ["D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"]=>
  array(8) {
    [8]=>int(1)
    [10]=>int(3)
    [12]=>int(1)
    [15]=>int(3)
    [16]=>int(3)
    [23]=>int(1)
    [24]=>int(1)
    [25]=>int(1)
  }
}

{{行番号の確認}}
(cmd) **list 1, 26**
1       &lt?php
2
3           class framework
4           {
5               var $_member = NULL;
6               function addMembers($members)
7               {
8                   foreach($members as $member)                      {{// 1回}}
9                   {
10                      $this->addMember($member);                    {{// 3回}}
11                  }
12              }                                                     {{// 1回}}
13              function addMember($member)
14              {
15                  $this->_member[]= $member;                        {{// 3回}}
16              }                                                     {{// 3回}}
17              function showMember()
18              {
19                  var_dump($this->_member);
20              }
21          }
22
23          $fw = new framework;                                      {{// 1回}}
24          $fw->addMembers(array("hata","yamamoto","hagiya"));       {{// 1回}}
25          $fw->showMember();                                        {{// 1回}}
26

{{カバレッジの取得を停止する}}
(cmd) **eval xdebug_stop_code_coverage();**
NULL
[[/src]]

[[「プロファイリング」を確認するサンプル|head:sample_profiling]]

[[src]]
Waiting for debug server to connect.
Connect
This is Xdebug version 1.3.0dev.
Copyright 2002 by Derick Rethans, JDI Media Solutions.
(init D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp) **break test.csp:4**
1 Breakpoint set on file:line combination.
(init D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp) **run**
Starting program: D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp
Breakpoint, {main}()
        at D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0
4           {

(cmd) **break test.csp:25**
1 Breakpoint set on file:line combination.

{{プロファイリングを開始する}}
(cmd) **eval xdebug_start_profiling();**
NULL

(cmd) **continue**
Continuing.
Breakpoint, {main}()
        at D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0
25          $fw->showMember();

{{プロファイリング結果を取得する}}
(cmd) **eval xdebug_get_function_profile();**
array(11) {
  [0]=>
  array(6) {
    ["function"]=>
    string(6) "{main}"
    ["n_calls"]=>
    int(2)
    ["ttl_time"]=>
    float(1072860806.78)
    ["avg_time"]=>
    float(536430403.388)
    ["origin"]=>
    string(4) "user"
    ["level"]=>
    int(0)
  }
  [1]=>
  array(5) {
    ["function"]=>
    string(27) "xdebug_get_function_profile"
    ["n_calls"]=>
    int(1)
    ["ttl_time"]=>
    float(0.000149965286255)
    ["origin"]=>
    string(3) "php"
    ["level"]=>
    int(1)
  }
  [2]=>
  array(7) {
    ["function"]=>
    string(9) "addmember"
    ["class"]=>
    string(9) "framework"
    ["method_n"]=>
    string(6) "public"
    ["n_calls"]=>
    int(1)
    ["ttl_time"]=>
    float(0.000108957290649)
    ["origin"]=>
    string(4) "user"
    ["level"]=>
    int(1)
  }
  [3]=>
  array(7) {
    ["function"]=>
    string(9) "addmember"
    ["class"]=>
    string(9) "framework"
    ["method_n"]=>
    string(6) "public"
    ["n_calls"]=>
    int(1)
    ["ttl_time"]=>
    float(0.000120997428894)
    ["origin"]=>
    string(4) "user"
    ["level"]=>
    int(1)
  }
  [4]=>
  array(7) {
    ["function"]=>
    string(9) "addmember"
    ["class"]=>
    string(9) "framework"
    ["method_n"]=>
    string(6) "public"
    ["n_calls"]=>
    int(1)
    ["ttl_time"]=>
    float(0.000119924545288)
    ["origin"]=>
    string(4) "user"
    ["level"]=>
    int(1)
  }
  [5]=>
  array(7) {
    ["function"]=>
    string(10) "addmembers"
    ["class"]=>
    string(9) "framework"
    ["method_"]=>
    string(6) "public"
    ["n_calls"]=>
    int(1)
    ["ttl_time"]=>
    float(0.000880002975464)
    ["origin"]=>
    string(4) "user"
    ["level"]=>
    int(0)
  }
  ["opcode_compile_time"]=>
  float(0.0181959867477)
  ["function_execution"]=>
  float(1072860806.78)
  ["ambient_code_execution"]=>
  float(-1072860748.18)
  ["total_execution"]=>
  float(58.5936340094)
  ["total_script_processing"]=>
  float(58.6118299961)
}

{{プロファイリング結果をダンプする}}
(cmd) **eval xdebug_dump_function_profile();**
Execution Time Profile (sorted by line numbers)
-----------------------------------------------------------------------------------
Time Taken    Number of Calls    Function Name    Location
-----------------------------------------------------------------------------------
1072800898.4199560000    1    *{main}()    D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0
0.0001100302    1    *framework->addmember()    D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:10
0.0001089573    1    *framework->addmember()    D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:10
0.0001199245    1    *framework->addmember()    D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:10
0.0008809566    1    *framework->addmembers()    D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:24
-----------------------------------------------------------------------------------
Opcode Compiling:                             0.0174847841
Function Execution:     1072800898.4208369000
Ambient Code Execution: -1072800884.0883830000
Total Execution:                              14.3324539661
-----------------------------------------------------------------------------------
Total Processing:                             14.3499387503
-----------------------------------------------------------------------------------

{{プロファイリングを停止する}}
(cmd) **eval xdebug_stop_profiling();**
[[/src]]

[[「関数トレース」を確認するサンプル|head:sample_function_trace]]

[[src]]
Waiting for debug server to connect.
Connect
This is Xdebug version 1.3.0dev.
Copyright 2002 by Derick Rethans, JDI Media Solutions.
(init D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp) **break test.csp:4**
1 Breakpoint set on file:line combination.
(init D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp) **run**
Starting program: D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\include\prepend.csp
Breakpoint, {main}()
        at D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0
4           {

(cmd) **break test.csp:25**
1 Breakpoint set on file:line combination.

{{関数トレースを開始する}}
(cmd) **eval xdebug_start_trace();**
NULL

(cmd) **continue**
Continuing.
Breakpoint, {main}()
        at D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0
25          $fw->showMember();

{{関数トレースを取得する}}
(cmd) **eval xdebug_get_function_trace();**
array(5) {
  [0]=>
  array(6) {
    ["function"]=>
    string(10) "addmembers"
    ["class"]=>
    string(9) "framework"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(24)
    ["time_index"]=>
    float(54.4890899658)
    ["params"]=>
    array(0) {
    }
  }
  [1]=>
  array(6) {
    ["function"]=>
    string(9) "addmember"
    ["class"]=>
    string(9) "framework"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(10)
    ["time_index"]=>
    float(54.4893250465)
    ["params"]=>
    array(0) {
    }
  }
  [2]=>
  array(6) {
    ["function"]=>
    string(9) "addmember"
    ["class"]=>
    string(9) "framework"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(10)
    ["time_index"]=>
    float(54.4895780087)
    ["params"]=>
    array(0) {
    }
  }
  [3]=>
  array(6) {
    ["function"]=>
    string(9) "addmember"
    ["class"]=>
    string(9) "framework"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(10)
    ["time_index"]=>
    float(54.4898120165)
    ["params"]=>
    array(0) {
    }
  }
  [4]=>
  array(5) {
    ["function"]=>
    string(6) "{main}"
    ["file"]=>
    string(74) "D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp"
    ["line"]=>
    int(0)
    ["time_index"]=>
    float(81.4451110363)
    ["params"]=>
    array(0) {
    }
  }
}

{{関数トレースをダンプする}}
(cmd) **eval xdebug_dump_function_trace();**
Function trace:
   54.4891          0     -> framework->addmembers() D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:24
   54.4893          0       -> framework->addmember() D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:10
   54.4896          0       -> framework->addmember() D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:10
   54.4898          0       -> framework->addmember() D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:10
   81.4451          0     -> {main}() D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0
   81.4452          0       -> xdebug_get_function_trace() xdebug eval:1
   81.4453          0       -> var_dump() xdebug eval:1
   95.3606          0     -> {main}() D:\Program Files\Apache Group\Apache2\cgi-bin\cbfw\code\doc_root\test.csp:0

{{関数トレースを停止する}}
(cmd) **eval xdebug_stop_trace();**
NULL
[[/src]]

[[自動プロファイリング|section:auto_profile]]
[[上記サンプル|#sample_profiling]] のように ''xdebug_get_function_profile'' などを利用して、部分的なプロファイリングを取得することが出来ます。
 これは「性能に問題のある範囲が絞られている場合」や「プロファイリング結果が膨大になってしまう場合」に対しては有効ですが、コードに直接埋め込む、またはデバッククライアントで任意のタイミングで実行する必要があります。
 自動プロファイルは ''php.ini'' の値を変更するだけでプロファイリングの結果が取得できるため、PGが全体的な処理のボトルネックを確認したり、QAが性能検証する際にも非常に役に立ちます。

''xdebug.auto_profile_mode'' の値を変更することにより、自動プロファイルのモードを変更することが可能です。
 以下に設定可能な値を示します。

[[html]]
<table class=cb_doc_table border=1>
<tr>
  <th>値</th>
  <th>意味</th>
</tr>
<tr>
  <td>0</td><td>コード上の順番で消費時間を出す。<br>（呼び出し行が違えば同じ関数でも別々として処理する。）</td>
</tr>
<tr>
  <td>1</td><td>時間のかかった関数から順にソートする。（元データは0と同じ）</td>
</tr>
<tr>
  <td>2</td><td>呼び出し回数順でソートする。（元データは0と同じ）</td>
</tr>
<tr>
  <td>3</td><td>1回呼び出しあたりの平均処理時間で表示する。<br>（同じ関数の呼び出しはぜんぶまとめて集計する。）</td>
</tr>
<tr>
  <td>4</td><td>複数回の合計時間順でソートする。（元データは3と同じ）</td>
</tr>
<tr>
  <td>5</td><td>呼び出し回数順でソートする。（元データは3と同じ）</td>
</tr>
<tr>
  <td>6</td><td>行ごとの関数呼び出しツリーと消費時間を表示する。</td>
</tr>
<tr>
  <td>7</td><td>消費時間順で表示する。（元データは6と同じ）</td>
</tr>
<tr>
  <td>8</td><td>呼び出し回数順で表示する。（元データは6と同じ）</td>
</tr>
</table>
[[/html]]

[[src]]
''自動プロファイリングの結果（[[test.csp|#sample_target_code]]）''

Function Summary Profile (sorted by total execution time)
-----------------------------------------------------------------------------------
Total Time Taken    Avg. Time Taken    Number of Calls    Function Name
-----------------------------------------------------------------------------------
0.0562671423    0.0187557141    3    *{main}
0.0367920399    0.0367920399    1    {require}
0.0295799971    0.0295799971    1    *cb_configmanager->cb_configmanager
0.0293179750    0.0293179750    1    *cb_configmanager->reload
0.0007320642    0.0007320642    1    {require_once}
0.0007290840    0.0001822710    4    create_function
0.0005586147    0.0000051724    108    trim
0.0005469322    0.0005469322    1    session_start
0.0004758835    0.0000105752    45    fgets
0.0003420115    0.0003420115    1    fopen
0.0003150702    0.0000027397    115    strlen
0.0003039837    0.0003039837    1    *framework->addmembers
0.0002847910    0.0000091868    31    define
0.0002830029    0.0002830029    1    disk_free_space
0.0002466440    0.0000039150    63    substr
0.0002189875    0.0002189875    1    {require}
0.0002119541    0.0002119541    1    {include}
0.0001920462    0.0000960231    2    *cb_get_http_output_encoding
0.0001870394    0.0000040661    46    feof
0.0001449585    0.0001449585    1    mb_preferred_mime_name
0.0001282692    0.0000038869    33    array_key_exists
0.0001045465    0.0000037338    28    strpos
0.0001040697    0.0001040697    1    fclose
0.0001019239    0.0001019239    1    *cb_configmanager->get
0.0001009703    0.0001009703    1    *cb_configmanager->get
0.0000998974    0.0000998974    1    *cb_configmanager->get
0.0000959635    0.0000959635    1    *cb_configmanager->get
0.0000940561    0.0000940561    1    *cb_configmanager->get
0.0000909567    0.0000909567    1    *cb_configmanager->get
0.0000909567    0.0000909567    1    *cb_configmanager->get
0.0000900030    0.0000900030    1    *cb_configmanager->get
0.0000870228    0.0000870228    1    *cb_configmanager->get
0.0000860691    0.0000860691    1    *cb_configmanager->get
0.0000849962    0.0000849962    1    *cb_configmanager->get
0.0000840425    0.0000840425    1    *cb_configmanager->get
0.0000818968    0.0000818968    1    *framework->showmember
0.0000549555    0.0000549555    1    var_dump
0.0000489950    0.0000489950    1    *cb_stateset->get
0.0000429153    0.0000429153    1    *cb_stateset->get
0.0000419617    0.0000419617    1    *cb_stateset->get
0.0000419617    0.0000419617    1    *cb_stateset->get
0.0000399351    0.0000399351    1    *cb_stateset->get
0.0000350475    0.0000350475    1    strtolower
0.0000349283    0.0000029107    12    is_array
0.0000299215    0.0000299215    1    str_replace
0.0000259876    0.0000259876    1    *cb_stateset->set
0.0000249147    0.0000249147    1    ini_set
0.0000219345    0.0000219345    1    error_reporting
0.0000209808    0.0000209808    1    *framework->addmember
0.0000200272    0.0000200272    1    *cb_stateset->set
0.0000190735    0.0000095367    2    mb_http_output
0.0000180006    0.0000180006    1    *cb_stateset->set
0.0000180006    0.0000180006    1    *cb_stateset->set
0.0000178814    0.0000059605    3    mb_internal_encoding
0.0000159740    0.0000159740    1    *framework->addmember
0.0000159740    0.0000159740    1    *framework->addmember
0.0000159740    0.0000159740    1    get_cfg_var
0.0000139475    0.0000139475    1    session_name
0.0000139475    0.0000139475    1    strcasecmp
0.0000129938    0.0000129938    1    session_set_cookie_params
0.0000100136    0.0000100136    1    session_save_path
0.0000089407    0.0000044703    2    assert_options
0.0000070333    0.0000070333    1    set_error_handler
0.0000070333    0.0000070333    1    ini_get
0.0000040531    0.0000040531    1    class_exists
0.0000030994    0.0000030994    1    strcmp
-----------------------------------------------------------------------------------
Opcode Compiling:                             0.0198501348
Function Execution:     0.0382887125
Ambient Code Execution: -0.0348426104
Total Execution:                              0.0034461021
-----------------------------------------------------------------------------------
Total Processing:                             0.0232962370
-----------------------------------------------------------------------------------
End of function profiler
[[/src]]

自動プロファイリングについて詳しく知りたい場合は [[こちら|http://www.xdebug.com/docs-profiling.php]] を参照してください。

[[APIリファレンス|section:api]]
APIリファレンスに関しては [[こちら|http://www.xdebug.com/docs.php]] を参照してください。
 (''xdebug_memory_usage'' は使用できません。)

[[PHPSimpleDebugger の使い方|section:how_to_use_simple]]
[[上記の設定|#bundle]] さえ完了していれば、URLにデバックしたいスクリプトへのパスを設定し、""REQ''ボタンを押せば自動的にデバッグが開始されます。
 実際の使用方法に関しては [[こちら|http://uprising.s16.xrea.com/ishino16/phpdbg1.html]] を参照してください。