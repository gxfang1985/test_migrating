[[概要|section:abstract]]
「''パフォーマンスに勝るユーザビリティはない''」とよくいいますが、実際の開発ではどうしても性能評価が二の次になりがちです。
 通常の流れだと、まず機能をきちんと満たすことが最優先で行われ、それらが終わってからベンチマークを測定します。
そこで何らかのパフォーマンス的問題が浮上して初めて、ソースコードの修正等、細かいチューニングを行うことになるからです。
 せっかく、イテレーティブな開発プロセスをするのであればベンチマークも開発プロセスの一環として組み込むのが正しいあり方のはずです。
ベンチマークフレームワークは、開発プロセスに自然に組み込まれ、以下の点をサポートする目的で作成されています。
#処理を作成する際には必ず指標となる時間があるはずですので、継続的にその指標に近づけるように気を配りながら行えるようにすること
#回帰的にベンチマークを計測することにより、コードの修正などによってパフォーマンスが悪化したものを即座にチェックできるようにすること

[[ユニットベンチマークとは|section:what]]
ユニットベンチマークとは、特定の機能やモジュール単体に対するベンチマークを指します。
 そのためネットワークを介するような機能はありません。
 より上位のベンチマークツールに関してはここでは言及しません。

[[ユースケース|section:usecase]]
アクターとしては、開発者およびシステム(ビルドシステム)のみになります。
 QA等は対象にしていません。

#開発者が、さまざまなOS上でベンチマークを計測する。
#開発者が、ベンチマークケースを作成する。
#開発者が、ベンチマークを実行する。
#開発者が、どのベンチマーク結果が異常なのか確認する。
#開発者が、個々のベンチマーク結果に異常がある場合、ボトルネックを確認する。
#システムが、自動でベンチマークを実行する。
#システムが、ベンチマーク結果を保存する。
#システムが、ベンチマークスクリプトを製品コードから削除する。

以下のユースケースはサポートしていません。
#開発者がコードを書いて一時的にちょっとベンチマークを行う。

ユニットベンチマークフレームワークの目的は、「''継続的''」、「''回帰的''」、「''自動的''」にベンチマークを行えるようにすることです。
[[要件定義|section:requirement]]
[[html]]
<table class=cb_doc_table border="1">
<tr>
<td nowrap valign="top">1-a</td>
<td>プラットフォーム非依存でなければならない。</td>
</tr>
<tr>
<td nowrap valign="top">2-a</td>
<td>製品に関係のないコードはどうしても二の次になりがちなので、できる限り簡単に記述できる必要がある。</td>
</tr>
<tr>
<td nowrap valign="top">2-b</td>
<td>
対象となるコードに修正をくわえなくてもそのまま動くこと。<br>
(計測開始、終了などのコードは一切かかせない。)
</td>
</tr>

<tr>
<td nowrap valign="top">3-a</td>
<td>
処理時間が短いものでもきちんと計測できること。<br>
(実行回数等を指定可能にすること。また平均値なども確認できること。)
</td>
</tr>

<tr>
<td nowrap valign="top">3-b</td>
<td>
例外等が発生してもすべてのケースをきちんと実行すること。<br>
(エラーの起きたものは後で確認できること。)
</td>
</tr>

<tr>
<td nowrap valign="top">3-c</td>
<td>
複数のベンチマークケースを一括で実行できること。
</td>
</tr>

<tr>
<td nowrap valign="top">3-d</td>
<td>
Web経由でも実行できるようにすること。
</td>
</tr>

<tr>
<td nowrap valign="top">4-a</td>
<td>
各ベンチマークケースには期待値が設定できるようにし、異常なデータとして後で検知できること。
</td>
</tr>

<tr>
<td nowrap valign="top">5-a</td>
<td>
自動でプロファイリングを収集し、開発者がボトルネックを確認できること。
</td>
</tr>

<tr>
<td nowrap valign="top">6-a</td>
<td>
Azaleaの機能として組み込みたいので、自作すること。
</td>
</tr>

<tr>
<td nowrap valign="top">7-a</td>
<td>
保存がしやすいようにベンチマーク結果をXML等に出力できるようにすること。
</td>
</tr>

<tr>
<td nowrap valign="top">8-a</td>
<td>
製品コードとベンチマークケースファイルが分離できること。(別ファイルに分けること。)
</td>
</tr>

</table>
[[/html]]

[[設計|section:design]]
基本的なアーキテクチャとしては [[AzUnit|doc:dev/utility/azunit]] を利用しています。
 ベンチマーク自体が時間に特化したテストと考えられるからです。
 また、要件定義における、
*3-b ( 例外等が発生してもすべてのケースをきちんと実行すること )
*3-c ( 複数のベンチマークケースを一括で実行できること )

などを実現するためにも、既に安定動作している実績のあるアーキテクチャを利用するのが最良の選択と判断しました。

尚、設計に当たっては、pearの[[benchmark|http://pear.php.net/package/Benchmark]] も眺めましたが、参考にしませんでした。
 理由として、
#今回の目的とマッチしていない
 (どちらかというと一時的なベンチマーク目的)
#満たせない要件が多数あり、結局作りこむ必要がある
 (2-b, 3-bは特に致命的)
#プロファイリングの機構が弱い
 (Azaleaですでにバンドルされている [[xdebug|http://www.xdebug.org/]] が簡単かつ高性能)

[[クラス構成|section:design]]
クラス全体の構成は、''コア'' と ''ユーティリティ'' に分類されている。

[[html]]
<table class=cb_doc_table border="1">
<tr><th nowrap>分類</th><th>クラス名</th><th>役割と機能</th></tr>
<tr>
<td nowrap rowspan="5">コア</td>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchCase]]</td>
<td>
ベンチマークケースを記述する際の基本クラス
</td>
</tr>

<tr>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchExecutor]]</td>
<td>
実際にベンチマークを実行するクラス<br>
(クラス名::ベンチマークメソッド1つと1対1で結びつく)
</ul>
</td>
</tr>

<tr>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchResult]]</td>
<td>
ベンチマーク結果を保持するクラス<br>
( 後述する [[az:fw.unitbenchmark:CB_BenchError]], [[az:fw.unitbenchmark:CB_BenchSuccess]] を集約する )
</td>
</tr>

<tr>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchError]]</td>
<td>
例外が発生しベンチマークを実行できなかった場合の結果を保持するクラス
</td>
</tr>

<tr>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchSuccess]]</td>
<td>
ベンチマークが成功した際に、プロファイル等の結果を保持するクラス
</td>
</tr>


<tr>
<td nowrap rowspan="3">ユーティリティ</td>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchConfig]]</td>
<td>
[[az:fw.core:CB_ConfigManager]] を継承したベンチマーク設定ファイル用クラス<br>
</td>
</tr>

<tr>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchRunner]]</td>
<td>
複数の [[az:fw.unitbenchmark:CB_BenchExecutor]] を実行するためのクラス
</td>
</tr>

<tr>
<td nowrap>[[az:fw.unitbenchmark:CB_BenchResultPrinter]]</td>
<td>
[[az:fw.unitbenchmark:CB_BenchResult]] から結果を印刷するクラス<br>
実際にはパラメータを生成する部分だけ実装されており、処理はすべてsmartyに任せている。<br>
テンプレートとしては現状、plain, HTML, xmlが用意されている。
</td>
</tr>
</table>
[[/html]]

[[ベンチマークケースの書き方 Step by Step|section:stepby]]

#[[設定ファイルの使い方|#tut_config]]
#[[ベンチマークケースの作成|#tut_create_benchcase]]
#[[ベンチマークの実行|#tut_run_bench]]
#[[複数のベンチマークを一括実行|#tut_benchrunner]]
#[[ベンチマーク結果の表示|#tut_show_result]]
#[[実行の途中経過を表示|#tut_customize_runner]]

[[1. 設定ファイルの使い方|head:tut_config]]
ユニットベンチマーク の設定ファイルは CGIディレクトリの "benchmark.ini" です。
 設定ファイルは [[az:fw.unitbenchmark:CB_BenchConfig]] で表現され、[[軽量コンテナ|doc:dev/base/lwc]] によって管理されています。

記述可能な値は以下のものになります。

[[html]]
<table class=cb_doc_table border="1">
<tr>
<th nowrap>キー</th>
<th nowrap>値</th>
<th nowrap>デフォルト</th>
<th nowrap>説明</th>
</tr>
<tr>
<td nowrap>profile</td>
<td>[[自動プロファイリング|doc:dev/utility/debug_profile#auto_profile]] で設定可能な値 or -1</td>
<td nowrap>-1</td>
<td>
プロファイリングを実行する際のモードを指定します。<br>
-1 にするとプロファイリング自体を無効にすることが可能です。
( その場合、xdebugが組み込まれていなくてもベンチマークを実施できます。)
</td>
</tr>

<tr>
<td nowrap>count</td>
<td>1以上の整数</td>
<td nowrap>100</td>
<td>
ベンチマークメソッドをコールする回数を指定します。<br>
(処理時間が非常に短いもの、処理時間の安定しないものを平均的に計測することができます。)
</td>
</tr>

<tr>
<td nowrap>ratio</td>
<td>数値</td>
<td nowrap>1</td>
<td>
性能の比率を指定します。<br>
(これによってCPUなどの速度比を考慮することができます。例えば2を設定すると、期待値 * 2 までの時間が許容範囲になります。)
</td>
</tr>

<tr>
<td nowrap>expect_time</td>
<td>数値(ms)</td>
<td nowrap>なし</td>
<td>
各ベンチマークケースの期待値を指定します。<br>
(値には処理の平均値ではなく全体でかかる時間を設定すること。値が設定されていない場合、無条件に正常なデータとなります。)
</td>
</tr>

</table>
[[/html]]

サンプルとして、以下のように設定ファイルが記述されているものとする。

[[src]]
{{;;; benchmark configuration file}}

{{;; Default configuration.}}
profile = 4
count = 100
ratio = 1

''[bench_cb_foo]''
count = 1

''[bench_cb_foo::bench_bar]''
count = 10
expect_time = 500

''[bench_cb_foo::bench_zot]''
count = 100

[[/src]]

セクションとしては、[ ''グローバル'' ]、[ ''ベンチマークケースクラス'' ]、[ ''ベンチマークメソッド'' ] の3つが設定可能です。( **セクションはすべて小文字で記述してください。**)
 各設定は上書きされる形で伝播されます。例えば上記のように設定されている場合、
''bench_cb_foo'' 内のメソッドはすべて1回実行されますが、特別に ''bench_bar'' は10回、''bench_zot'' は100回実行されるということです。
 また、''bench_bar'' には期待値が設定されているので、500ms以内に処理が終了しなかった場合、異常データの可能性がONになります。''bench_zot''は設定されていないので、無条件に正常となります。
 グローバルセクションにかかれているその他の項目( profile, ratio ) も各クラス、各メソッドで上書き可能ですが、一般的には必要ないはずです。

[[2. ベンチマークケースの作成|head:tut_create_benchcase]]
ベンチマークケースは、[[az:fw.unitbenchmark:CB_BenchCase]] クラスを拡張して記述します。
具体的には以下のように、''bench'' で始まる名前を持つメソッドとして作成します。
メソッドの中身としては、計測したい処理のみを記述してください。
ファイルの最後で、[[az:fw.unitbenchmark:include/developer/benchmark.csp:cb_bench_run]] を呼び出します。

尚、ここではクラスに対応してベンチマークケースを記述していますが、特にこだわる必要はありません。
ある程度のかたまりとして好きに記述して構いません。
[[src]]
<?php

require_once( 'developer/benchmark.csp' );
require_once( ''CB_Foo を定義しているファイル'' );

class Bench_CB_Foo extends **CB_BenchCase**
{
    var $foo = null;

    {{// コンストラクタはこの 1 引数を取る定型}}
    function Bench_CB_Foo( $bench_method )
    {
        parent::CB_BenchCase( $bench_method );

        {{// 以下の初期化コードは自由に記述}}
        $this->foo = new CB_Foo();
    }
    
    {{// このようにすると、このメソッド全体に対してベンチマークを行う}}
    function **benchhoge**()
    {
        $this->foo->hoge();
    }
    
    {{///////////////////////////////////////////////////////////////////////////////////////////////}}
    {{// ベンチマークでは、時間が重要になるためユニットテストのように冗長に処理を書くことはできない。}}
    {{// 以下のようにすると、明示的にベンチマークの範囲を図ることも可能}}
    {{// 尚、start, endは複数回コールすることもできます。}}
    {{// ただし、startを呼び出していないのにendをコールしたり、}}
    {{// 入れ子で呼び出したりすることはできない。}}
    {{///////////////////////////////////////////////////////////////////////////////////////////////}}
    function **benchhoge2**()
    {
        ....
        $this->start();
        .... {{<-- 明示的にここだけベンチマークする}}
        $this->end();
        ....
    }
    function **benchSleep**()
    {
        sleep(1);
    }
}

**cb_bench_run();**

?>
[[/src]]

作成したベンチマークケースを、"クラス名''.cspb''" というファイル名で保存します。クラス名は大小文字の区別をしないので、ファイル名規約に従って全て小文字で保存してください。この例の場合は、"''bench_cb_foo.cspb''" となります。

[[3. ベンチマークの実行|head:tut_run_bench]]

ベンチマークの実行には、[[az:fw.unitbenchmark:CB_BenchExecutor]] を使います。
CB_BenchExecutor::runOne() は、一つのベンチマークを実行して、結果を収めた [[az:fw.unitbenchmark:CB_BenchResult]] オブジェクトを返します。

[[src]]
<?php

require_once( 'developer/benchmark.csp' );

{{// (実行するスクリプトファイル, 実行するベンチマークメソッド)}}
$executor = new CB_BenchExecutor( 'bench_cb_foo.cspb', 'benchFoo' );
$result =& $executor->runOne();

?>
[[/src]]

上のコードを実行すると、Bench_CB_Foo::benchFoo() を実行して、結果を収めた [[az:fw.unitbenchmark:CB_BenchResult]] オブジェクトが $result に返ります。

[[4. 複数のベンチマークを一括実行|head:tut_benchrunner]]
一つ一つのベンチマークを実行するコードを全て記述するのは面倒なので、ベンチマークスクリプトを検索、ベンチマークメソッドをリフレクションで見つけて実行し、結果を収集する [[az:fw.unitbenchmark:CB_BenchRunner]] クラスが用意されています。
途中経過の表示などの機能は、[[az:fw.unitbenchmark:CB_BenchRunner]] を継承したそれぞれ別のクラスを作成して変更・追加が可能です。

CB_BenchRunner の基本的な機能
#ベンチマークを追加する
#全て実行する
#収集した結果を返す

[[src]]
<?php

require_once( 'developer/benchmark.csp' );

$runner = new CB_BenchRunner();

{{// テストを一つ追加}}
$runner->addBenchmark( new CB_BenchExecutor( '.../Test_CB_Foo.cspb', 'benchFoo' ) );

{{// hoge.cspt ファイル中のテストメソッドを全て追加}}
$runner->addBenchmarkFile( '.../Test_CB_Foo.cspb' );

{{// ディレクトリを再帰的に検索して、マッチするファイルを追加}}
$runner->addBenchmarkDir( '.../hoge', 'sample*.cspb' );

{{// 実行すると、$result に CB_BenchResult が返る}}
$result =& $runner->run();

?>
[[/src]]

[[5. ベンチマーク結果の表示|head:tut_show_result]]

[[az:fw.unitbenchmark:CB_BenchRunner]]、[[az:fw.unitbenchmark:CB_BenchExecutor]] から取得したベンチマーク結果 [[az:fw.unitbenchmark:CB_BenchResult]]を
[[az:fw.unitbenchmark:CB_BenchResultPrinter]] に渡して表示データを生成することができます。
 [[az:fw.unitbenchmark:CB_BenchResultPrinter]] の動きとしては、パラメータ生成の部分を行っているだけで、すべての処理はSmartyによって行われています。
 現状テンプレートとして、''plain'', ''HTML'', ''XML'' が用意されています。

特に''XML''はビルドシステム等に組み込まれる際に自動ベンチマークの結果として収集するのに最適です。

[[6. 実行の途中経過を表示|head:tut_customize_runner]]
実行中にベンチマークの実行状況を表示したい場合、[[az:fw.unitbenchmark:CB_BenchRunner]] を継承し、リスナーメソッドを実装します。
 以下の 4 つのメソッドがリスナーメソッドで、ベンチマークケース実行時に毎回コールされます。

[[src]]

class CB_BenchRunner
{
    ...
    {{// ベンチマークが開始した際に呼ばれる}}
    function ''startTest''( $label ){}
    {{// ベンチマークが終了した際に呼ばれる}}
    function ''endTest''( $label ){}
    {{// ベンチマークで例外が発生した場合に呼ばれる}}
    function ''addError''( &$result ){}
    {{// ベンチマークが成功時に呼び出される}}
    function ''addSuccess''( &$result ){}
}
[[/src]]

[[ベンチマーク UI の使い方|section:ui]]
ベンチマークフレームワーク はコマンドライン用UI と Web用のUIの2つを提供しています。

[[コマンドライン UI|head:command_ui]]
使い方は、以下のようにコマンドプロンプトから実行します。
 UNIX の場合は適宜対応する実行ファイルなどに置き換えてください。

[[src]]
cd ''(php.exe のあるディレクトリ)''
php.exe -C -q -f code\command\run_bench.csp ''(ベンチマークファイル or ディレクトリ)'' ''...''
[[/src]]

結果は以下のように表示されます。実行中に表示される、"''.''", "''x''", "''X''" はそれぞれ "''正常''", "''正常(ただし期待値を超えている)''", "''エラー''" に対応しています。

[[src]]
Running...
**X.x**

============================================================
Benchmark Report @ Tue, 25 Nov 2003 11:06:48 +0900

-------- Benchmarking Environmrnt
OS:    WINNT
PHP:   4.3.9
Host: Linux azalea 2.4.20-20.9 #1 Mon Aug 18 11:45:58 EDT 2003 i686 i686 i386 GNU/Linux

-------- Summary of Benchmark Results
Successful:             NO
Total # of benchmarks:  3
Total # of errors:      1
Elapsed time (sec):     2.79935002327
Ratio of success:       66.6666666667%

-------- Error Description
case : bench_cb_bar::benchbar

-------- Success Description

case                          status  ratio  count  expect(msec)  exec(msec)  avg(msec)
-----------------------------------------------------------------------------------------
bench_cb_bar2::benchbar       OK      1.00   1      900.000        0.320       0.320
bench_cb_foo::benchfoo        NG      1.00   1      300.000       1002.590    1002.590

============================================================
[[/src]]

[[Web UI|head:web_ui]]
AzUnitと同様のインターフェイスで操作可能です。出力形式としては、HTMLとXMLで出力することができます。
 実行すると以下のような結果が得られます。

[[html]]
<pre>
============================================================
Benchmark Report @ Tue, 25 Nov 2003 11:06:48 +0900

-------- Benchmarking Environmrnt
OS:    WINNT
PHP:   4.3.9
Host: Linux azalea 2.4.20-20.9 #1 Mon Aug 18 11:45:58 EDT 2003 i686 i686 i386 GNU/Linux

-------- Summary of Benchmark Results
Successful:             NO
Total # of benchmarks:  3
Total # of errors:      1
Elapsed time (sec):     3.1008439064
Ratio of success:       66.6666666667%

-------- Error Description
   <table class="cb_data_list" width="100%" border=1>
    <tr>
     <th width="90%" nowrap>case</th>
     <th width="8%"nowrap>log</th>
    </tr>
    <tr>
     <td nowrap>bench_cb_bar::benchbar</td>
     <td nowrap><a target="_blank" href="">[output]</a></td>
    </tr>
   </table>

-------- Success Description
   <table class="cb_data_list" width="100%" border=1>
    <tr>
     <th width="32%" nowrap>case</th>
     <th width="8%" nowrap>status</th>
     <th width="8%" nowrap>ratio</th>
     <th width="8%" nowrap>count</th>
     <th width="12%" nowrap>expect(msec)</th>
     <th width="12%" nowrap>exec(msec)</th>
     <th width="12%" nowrap>avg(msec)</th>
     <th width="8%" nowrap>profile</th>
    </tr>
    <tr>
     <td nowrap>bench_cb_bar2::benchbar</td>
     <td nowrap>OK</td>
     <td nowrap>1.00</td>
     <td nowrap>1</td>
     <td nowrap>900.000</td>
     <td nowrap> 0.312</td>
     <td nowrap> 0.312</td>
     <td nowrap><a target="_blank" href="">[output]</a></td>
    </tr>
    <tr>
     <td nowrap>bench_cb_foo::benchfoo</td>
     <td nowrap>NG</td>
     <td nowrap>1.00</td>
     <td nowrap>1</td>
     <td nowrap>300.000</td>
     <td nowrap>1176.265</td>
     <td nowrap>1176.265</td>
     <td nowrap><a target="_blank" href="">[output]</a></td>
    </tr>
   </table>

============================================================
</pre>
[[/html]]

[[注意点|section:coution]]
尚、アーキテクチャとしてAzUnitと同じ仕組みを利用しているので、WebサーバーにIISを利用している人は [[AzUnit|doc:dev/utility/azunit#iis]] と同じ設定が必要になります。
 また、AzUnitの既知の問題としある、無限ループ、別ディレクトリの同名クラスなどの問題はベンチマークフレームワークでも起こりますので、詳細に関しては [[AzUnit|doc:dev/utility/azunit#known]] を参照してください。

[[リファレンス|section:reference]]

#フレームワークソース ([[include/developer/benchmark.csp]])
#API ([[az:fw.unitbenchmark:include/developer/benchmark.csp]])
