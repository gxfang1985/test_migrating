[[概要|section:abstract]]
Azalea5.2までは各OS毎にIDK(インストーラー開発者キット)が提供されていました。
 これらはあくまでインストーラーを開発することが目的の為、ソース管理することは考えられていません。
 ( 実際には製品に不要なコード(ドキュメント、デモなど）が除外されていた為、多少ソース管理的な意味も含まれていたのですが、あくまでインストーラーの開発が主眼に置かれていたため、複数のOSでの管理についてはまったく考えられていませんでした。)

また、別々に開発されたことから、windowsとunixのファイル構成が異なってしまっていました。
 今回、それらをマージ可能なように再構成し、「**製品開発用アーカイブ**」 = 「''IDK''」 + 「''Azalea Core''」として再定義し直しました。

ここでいう、
''IDK'' = インストーラー開発の部分だけを指すことにします。
 （詳しくは、[[unix版|doc:dev/utility/idk/unix]]、[[windows版|doc:dev/utility/idk/windows]] を参照してください。）

''Azalea Core'' = Azaleaからデモなどの不要部分を取り除いたもの。

以下により分かりやすく解説した製品開発用アーカイブの
([[概要(パワーポイント)|cb6:page=FileView&gid=3561&fCID=106699&fFID=201055&cp=fl]])
を置きますので、参照してください。

[[ファイル構成|section:deploy]]
[[src]]
((\(製品開発用アーカイブ TOP\)))
   |
   +-- ''3rd_party_license''
   +-- ''code''
   +-- ''config''
   +-- ''locale''
   +-- ''page''
   +-- ''web_root''
   +-- ''unix''                                           unix版
   |     +--config.make                               インストーラー設定ファイル
   |     +--header.sh                                 インストールスクリプト
   |     +--Makefile
   |     +--''install''
   |     |     +--''init''
   |     |     +--''messages''
   |     |
   |     +--''util''
   |     |     +--portscan_(({OSコード}))
   |     +--''mysql''
   |     |     +--(({OSコード}))
   |     |          +--''bin''
   |     |     +--common
   |     |          +--''share''
   |     |          +--''data''
   |     +--''php''
   |     |     +--php_(({OSコード})).cgi
   |     |     +--php_LICENSE
   |     +--''extensions''
   |     |     +--ionCube_loader_(({OSコード})).so
   |     |     +--ioncube_LICENSE
   |     +--''license''
   |           +--LICENSE.en
   |           +--LICENSE.ja (EUC) 
　 |
   +-- ''win''                                            windows版
          +--build.xml                                インストーラー作成 buildファイル
          +--build.properties                         インストーラー設定ファイル
          +--version.ini
          +--''install''                                 InstallShieldプロジェクト
          +--''util''
          |    +-- portscan.dll
          |    +-- tinysed.exe
          |    +-- fwHelper.dll
          |    +-- iis_utility.dll
          |    +-- regex.dll
          +--''mysql''
          |    +-- CyDE.exe
          +--''php''
          |    +-- php.exe
          |    +-- php_LICENSE
          |    +-- php4ts.dll
          |    +-- libmysql.dll
          +--''extensions''
          |    +-- ioncube_loader.dll
          |    +-- ioncube_LICENSE
          +--''license''
               +--LICENSE.en
               +--LICENSE.ja (SJIS)

((※OSコード))
''lin'' = linux
''sun'' = solaris
''fre'' = freebsd
[[/src]]

[[構成ルール|head:]]
製品開発用アーカイブはAzaleaから不要な部分が削除されているのですが、
具体的には以下の構成ルールに基づいて作成されています。

また、Azalea5.3からAzaleaの [[デプロイメント|doc:ext/deployment]] にも大きな見直しがかかり、
コア(''fw'')、開発者用(''dev_*'', ''developer'')、デモ(''demo*'')、ドキュメント(''doc*'')、テストケース用(''test*'')が各ディレクトリで階層化されました。これにより、削除可能な部分を明確に分けられ、製品開発用アーカイブの作成が容易になっています。

※実際には製品用アーカイブに本当に必要なものは コア(''fw'')　部分だけなのですが、開発環境セットアップ後の利便性などを考えデモ以外のほとんどの部分を残しています。
 {{ただし、それらのファイルもIDKを利用した製品のビルドプロセス中に削除されるので特に気にする必要はありません。}}
[[html]]
<p>
<table border="1">
<tr><td nowrap colspan="2" style="font-weight: bold; color: green">変更部分</td></tr>
<tr>
<td nowrap>開発者向け部分</td>
<td>
<ul>
<li>PHPSDKは全て削除
<li>MySQL の開発用コマンドである ''"mysql"'',  ''"mysqldump"'' や ライブラリ等の削除
<li>''"xdebug"'' や ''"dbg"'' などの[[デバッグ|doc:dev/utility/debug_profile]]用拡張モジュールの削除
<li>製品開発用アーカイブはazaleaがインストールされていることを前提としているので上記はすべて不要になります。
ただし、AzUnitや開発ツール群は[[開発環境セットアップ|doc:dev/setup]]でした後も使用できるようにする為削除していません。( {{これらはIDKによるビルド中に削除されます。}} )</li>
</ul>
</td>
</tr>

<tr>
<td nowrap>テストケース部分</td>
<td>
<ul>
<li>製品のテストケースと一緒に流されるべきものなので削除しません。( {{これらはIDKによるビルド中に削除されます。}} )</li>
</ul>
</td>
</tr>

<tr>
<td nowrap>デモ部分</td>
<td>
<ul>
<li>''"code/doc_root"'', ''"code/include"'', ''"page"'' 以下から、デモ用である ''"demo_*"'' を削除</li>
<li>''"locale/"'' 以下にある ''"demo*"'' のファイルの削除</li>
<li>''"web_root"'' 以下にある ''"demo_*"'' のファイルの削除</li>
</ul>
</td>
</tr>

<tr>
<td nowrap>ドキュメント部分</td>
<td>
<ul>
<li>
''"locale"'' 以下にある ''"doc"''がそれにあたりますが、削除しません。( {{これらはIDKによるビルド中に削除されます。}} )
</li>

</ul>
</td>
</tr>
<tr>
<td nowrap>IDK</td>
<td>
新規に追加する。[[IDK|doc:dev/utility/idk]] を参照してください。
</td>
</tr>

</table>
</p>
[[/html]]

[[拡張モジュールのビルド|section:php_ext]]

製品開発用アーカイブでは、拡張モジュールのビルドプロセスも提供しています。

#製品開発用アーカイブを解凍すると、そのルートディレクトリにphp_extというフォルダが現れます。
#そこに、開発したすべての拡張モジュールのプロジェクト（ext_skelで生成したフォルダ）を配置します。
#製品開発用アーカイブの自動ビルドスクリプトを起動します。
#ビルドプロセスでそれぞれの拡張モジュールのMakefileを自動的に検出しビルドを行います。
#ビルドが完了すると、製品開発用アーカイブのルートディレクトリのextensionsディレクトリに拡張モジュールをコピーします。

[[使い方|section:use]]
製品開発用アーカイブを使用するアクターとしては以下の人が挙げられます。
#ソース管理者
#PG
#インストーラー開発者
#ビルダー

それぞれのアクターが具体的にどのように使用するのかを簡単に説明します。

[[ソース管理者|head:source_manager]]
構成管理ツールとしてはなにを使っても構いませんが、多分CVSを使うと思われるので、
その場合の説明をします。
 (すでに''cvs init, login''は済んでいて、環境変数''CVSROOT''が設定されているものとする。)

#製品開発用アーカイブを展開する。(''barebone-X.X.X.zip'')
#インポートする際のデフォルトのキーワード展開を設定する。
 ''cvs co CVSROOT''
 ''cvswrappersにバイナリファイルのデフォルト設定をしてチェックインする''
[[src]]
((とりあえず最低限以下のものが必要。随時追加してください。))
\*.gif -k 'b'
\*.exe -k 'b'
\*.cgi -k 'b'
\*.dll -k 'b'
\*.so  -k 'b'
\*.sys -k 'b'
\*.frm -k 'b'
\*.MYI -k 'b'
\*.MYD -k 'b'
[[/src]]
#CVSにソースをインポートする。
 ''cd barebone-X.X.X''
 ''cvs import -I! -W "mysqld* -k 'b'" -W "my_print_defaults -k 'b'" -W "portscan_* -k 'b'" -W "sched_* -k 'b'" -m "framework-X.X.X" ((製品名)) framework original''
 製品開発用アーカイブに不要なものは存在しないので、''-I!''をつけてください。
 (CVSはデフォルトで ''.so'', ''.exe'' を無視するため)
 また、unix側に拡張子なしでバイナリものがあるので、''-W'' でバイナリ指定します。
#azaleaのバージョンアップ、バグフィックスに伴い、製品に必要なコードをマージする。
#製品に必要なコード(拡張モジュール)等を追加する。
 \[windowsの場合\]
 ''win/extensions'' に ''*.dll'' を追加する
 \[unixの場合\]
 ''unix/extensions'' に ''*_((OSコード)).so'' を追加する 
 (例: linuxの[[curl|http://curl.haxx.se/]] モジュールの場合は ''curl_lin.so'' のようになります。)
 phpで拡張モジュールを使用する方法は2通り
 (php.iniのextension, zend_extensionを利用する方法 と スクリプト内で [[az:fw.core:include/fw/prepend.csp:cb_dl]] する方法)
 unixのビルドスクリプトで自動的に ''*.dll'' は ''*.so'' に置き換えられるため、''php.ini'' はunix/windowsに関係なく ''*.dll'' にしておいて構いません。
#フレームワークに関係ない製品のコードを追加したり、ブランチを使ったリリース管理を行う。

[[PG|head:programmer]]
#''azalea'' をインストールする。
 (PGは唯一azaleaが絶対に必要なアクターです。
  製品開発用アーカイブはインストール後のイメージでないため、開発はできません。)
#CVSからソースを取り出す。
 ''\(cvs co ((製品名))\)''
#[[開発環境のセットアップ|doc:dev/setup]] を行う
 (この作業によってCVSより取得したコードそのもので開発できます。）
#azaleaのドキュメントやデモを参照しながら、[[デバッガ|doc:dev/utility/debug_profile]] などを有効に利用して開発を行う。
 (初期状態ではライセンスプラグインなどが入っていないので、まずはそこから開発する。）
#追加、または変更したソースをコミットする。
 **尚、フレームワークが提供するものはカスタマイズ可能なもの(設定系、IDKの一部)以外はすべて変更禁止です。**
 PHPスクリプト( ''code'' )
 PHP拡張モジュール( ''win/extensions'',  ''unix/extensions'' )
 (これは [[こちら|#source_manager]]にも記述しています。）
 国際化リソース( ''locale'' )
 smartyテンプレート( ''page'' )
 静的リソース( ''web_root'' )
 設定ファイル( ''config'' )
 (特に、"[[common.ini|doc:ext/config#common.ini]]" の **[Global] "debug" オプションは必ず削除**してください。
 [Global] "version" オプションも製品に合わせて変更するべきです。
 逆に、"[[my.ini|doc:ext/config#my.ini]]" は**絶対に変更してはいけません**。MySQLは製品間で共用されるため)

[[インストーラー開発者|head:installer_developer]]
インストーラー開発者に ''azalea'' は必要ありません。
 製品開発用アーカイブに含まれている ''IDK'' 使って開発を行います。
 ここでは作業の流れを記述しますので、詳しくは[[IDK|doc:dev/utility/idk]]を参照してください。
 
#CVSからソースを取り出す。
 ''\(cvs co ((製品名))\)''
#製品用のコンフィグレーションを設定する。
 \[windowsの場合\]
 ( ''barebone-X.X.X/win/build.properties'' を製品にあわせてカスタマイズする。)
[[src]]
((\# ------------------------------------------------------))
((\# 製品用))
((\# ------------------------------------------------------))
export.dir=C:/temp                    **※ここにCVSからエクスポートしたディレクトリを設定**
log.dir=C:/temp/log                   ((ビルドのログ))
product.name=sample                   ((製品名))
product.name.exe=sample.exe           ((製品のexe))
product.install.token=cbsample        ((インストール識別子のデフォルト))
product.version=1.0.0               　((製品のバージョン番号))
((\# ------------------------------------------------------))
((\# InstallShiled用))
((\# ------------------------------------------------------))
installsheild.builder.path=～/ISBuild.exe
installShield.ScriptCompiler.path=～/Compile.exe
installsheild.basepath=C:/Program Files/InstallShield/Professional 7/
[[/src]]
 \[unixの場合\]
 ( ''barebone-X.X.X/unix/Makefile'' を製品にあわせてカスタマイズする。）
[[src]]
((\### configurable variables))
((\# CGI program name (will rename PHP executable as defined\)))
EXE_NAME=sample.cgi
((\# Default installatin name (this will determine the URL of))
((\# the product (e.g., http://www.xxx.jp/cgi-bin/cbsample/sample.cgi \)))
DEFAULT_INSTALL_NAME=cbsample
((\# archive name))
PROGRAM=sample
((\# archive version))
VERSION=1.0
[[/src]]
#ビルドファイルをカスタマイズする。
 (azaleaと違ったファイル構成にしなければならない部分があった場合、カスタマイズしてください。
 この変更はほとんどないはずです。）
 \[windowsの場合\]
 ( ''barebone-X.X.X/win/build.xml '')
 \[unixの場合\]
 ( ''barebone-X.X.X/unix/Makefile '')
#プロジェクトファイルをカスタマイズする。
 これはwindowsのみ必要です。
 上記ビルドファイルと同様ファイル構成に変更が必要になった場合、適時idk.ismを変更してください。
 **※ユーザーが必ず行わなければならない操作が一つあります。**
 {{idk.ismを開き、メニューバーからプロジェクト、設定を選択する。アプリケーションタブに移り ''製品GUID'' を必ず変更してください。これは各製品で一度だけ必要です。フレームワークのソースとマージする際もここはそのままになるように注意してください。これを行わないとバージョンアップ時に他の製品もバージョンアップ対象になってしまうので注意が必要です。}}
#ライセンスファイルをカスタマイズする。
 windowsはSJIS、unixはEUCのため、別々に用意してあります。
 \[windowsの場合\]
 ( ''barebone-X.X.X/win/license'' )
 \[unixの場合\]
 ( ''barebone-X.X.X/unix/license'' )
#インストールスクリプトをカスタマイズする。
 \[windowsの場合\]
 ( ''barebone-X.X.X/win/install''　がInstallShieldプロジェクトそのものです。
  ''/Script Files'' 下の ''setup.rul'' がメインシーケンスですので、処理をカスタマイズしてください。
  尚、''fw.h'', ''fw.h'', ''fw'' はフレームワーク用の [[IDKAPI|doc:dev/utility/idk/windows/api]] を定義しているので、絶対に変更してはいけません。
  処理がおかしい場合、フレームワークに連絡してください。)
 \[unixの場合\]
  ( ''barebone-X.X.X/unix/header.sh'' をカスタマイズしてください )
#リソースファイルのカスタマイズをする。
 \[windowsの場合\]
 ( ''barebone-X.X.X/win/install/String Tables'' 下のファイルをカスタマイズする。
  フレームワークは常に上から書いていくので、ユーザーはしたから追加していくこと。
  適当に加えるとマージが大変になります。
  また、''FW_'' で始まるリソースはフレームワーク用なので絶対変更してはいけません。
 \[unixの場合\]
 ( ''barebone-X.X.X/unix/install/messages'' 下のファイルをカスタマイズする。)
#アイコンファイルをカスタマイズする。
 この処理はwindowsのみ必要です。
 ''barebone-X.X.X/win/icon/fw_icon.dll''をコピーしてリネームしてください。製品ごとに同じディレクトリに置かれますのでかぶらない様にすること。
 VC++でファイルを開く。ファイルの種類としてすべてのファイル(*.*)を選択し、用途としてリソースを選択する。
 リソースIDが101番にあたる部分を変更するアイコンに変更する。
 barebone-X.X.X/win/idk/Script Files/setup.rulの中で
 ''cb_setControlPanelIcon'' の部分を変更したファイル名、リソースのIDを変えた場合はそのIDを設定するように書き換える。
#インストーラーをビルドする。
 \[windowsの場合\]
 ''cd barebone-X.X.X/win''
 ''ant''
 \[unixの場合\]
 ''cd barebone-X.X.X/unix''
 ''make''
 尚、[[PHP拡張モジュールのビルド|#php_ext]] の為に [[環境変数等を設定する|doc:dev/guideline/php_extension/abstract]] 必要があるため、ビルドできない場合はそちらを確認してください。
 以下のコマンドを実行すると、同ディレクトリに ''((製品名)).exe'',  ''((製品名)).sh'' が作成されます。
 これらのインストーラーはデフォルトではazaleaと同等の動作をするものです。

[[ビルダー|head:builder]]
#''azalea'' をインストールする。
 (この作業はオプションです。製品が [[PHPSDK|doc:dev/guideline/php_extension]] を使って開発を行う場合、必須になります。）
#CVSからソースを取り出す
#PHPスクリプトを [[エンコード|doc:dev/utility/ioncube]] する。
#インストーラーをビルドする。
 (この作業はインストーラー開発者の「インストーラーをビルドする」と同じです。)
#アーカイブをアップする。
