[[概要|section:abstract]]

Azaleaを利用して作成されるアプリケーションのバージョンアップ方法について説明します。
 [[doc:dev/utility/idk]] のデフォルトの処理により、インストーラーはスクリプトファイルやデータベースエンジン
の更新等を自動的に行ってくれますが、一部開発者が記述しなければいけないものがあります。

内容としては、以下の2項目があります。
#設定ファイル更新
#データベーススキーマ更新

以下Azaleaのデプロイメントで解説を行いますが、製品開発用アーカイブに関しても同様です。

[[要件|section:requirement]]
#開発者が簡単にバージョンアップスクリプトを記述できなくてはならない。
#バージョンアップのモジュールは柔軟に追加可能でなくてはならない。
#現状はインストーラー組み込みで構わないが将来的には単体のモジュールでバージョンアップするような仕組みが必要になるかもしれない。
　(その場合、同じ仕組みで処理したい)

以上の条件を満たすように設計、実装しました。

[[デプロイメント|section:deployment]]

デプロイメントとしては以下のような構成になります。

[[src]]
(((top)))
  +- code
      +- command
      +...
      +- **versionup** (以下バージョンアップ関連のデプロイメント)
          |
          +- update.csp                         バージョンアップメインスクリプト
          +- ''archive''                        アーカイブディレクトリ
              +- versionup.ini                  バージョンアップ設定ファイル
              +- ''plugin''                     モジュールのバージョンアップスクリプト
              |   +- 00fw.csp                   フレームワークモジュールのバージョンアップメインスクリプト
              |   +- ....                       拡張するモジュールのバージョンアップメインスクリプト
              |
              +- ''module''                     モジュールリソース
                  +- ''fw''                     フレームワークモジュール
                      +- ''2.0.9''              2.0.9用バージョンアップ
                          +- ''scripts''        実際のスクリプト
                          |　 +- local.csp      ローカルスクリプト
                          |　 +- remote.csp     リモートスクリプト
                          +- '' resource''      リソース
                              +- ''cgi-bin''    CGI-BINへのコピーモジュール
                              |   +- ....       
                              +- ''web_root''   WEB_ROOTへのコピーモジュール
                                  +- ....
[[/src]]

code/versionupにバージョンアップ関連をインポートすることになりますが、実際にはインストールはされません。
 ビルドスクリプトによって、''update.csp''、および、archive以下は ''archive.tar.gz'' として圧縮された形で自動的にインストーラーに組み込まれ、code配下からは削除されてしまうためです。
 尚、code配下においている理由はスクリプトをPHPで記述するため、エンコードするのを容易にするためです。

それぞれのディレクトリ、ファイルの意味については、実際の開発手順で説明します。

[[実際の開発手順について|section:step by step]]

実際の開発手順としては、以下の工程を踏むことになります。
#バージョンアップ設定ファイルを記述する。
#モジュールのバージョンアップメインスクリプトを作成する。
#モジュールリソースを配置する。
#モジュールのローカルスクリプトを記述する。
#モジュールのリモートスクリプトを記述する。
#リソースファイルを配置する。

[[1. バージョンアップ設定ファイルを記述する。|head:type]]
バージョンアップ設定ファイルは以下のフォーマットで記述します。
[[src]]
''[version]''
**fw**  = 2.0.9
**grn** = 2.0.1
[[/src]]

キー名として、インストールしたいモジュール名、値にバージョンを記述してください。
ただし、このファイルはビルドシステムによって書き換える予定ですので、バージョン番号自体はビルドの設定ファイルと等しいものになるはずです。

[[2. モジュールのバージョンアップメインスクリプトを作成する。|head:type]]
上記デプロイメントの説明でいう、00fw.csp 等がこのファイルにあたります。
 バージョンアップ設定ファイルに記述したモジュールに関して、スクリプトファイルを作成してください。
 設定ファイルに記述したにも関わらず、スクリプトファイルが配置されていない場合はなにも処理しません。
 例えばガルーンの場合、fw, grn, アプリケーション の3つのモジュールに分割され、それぞれが独自にバージョンアップ可能な仕組みを実現するために記述するスクリプトです。
 主な記述内容としては、バージョンファイルとのマッピング等があります。
 例として、ガルーンのベースサービスのバージョンアップスクリプトは以下のようになります。

[[src]]
''\[\[ 01grn.csp \]\]''

<?php

$version_file = cb_basedir() . "/garoon.ini";
$updater = new GRN_ModuleUpdater( ''(($G_appid))'', ''(($G_cgi_dir))'', ''(($G_web_dir))'', $version_file, 'grn' );
$id = $updater->getModuleId();

$version = ''(($G_update_config))''->get( 'version', $id );
$updater->doInstall( $version );

class GRN_ModuleUpdater extends **''CB_ModuleUpdater''**
{
    function getCurrentVersion()
    {
        return $this->_config->get( 'System', 'version' );
    }
}

?>
[[/src]]

ここでのポイントとしては、グローバル変数として、(($G_appid)), (($G_cgi_dir)), (($G_web_dir)), (($G_update_config)) が設定されています。
(($G_update_config))　は、上記でいう versionup.iniを管理するクラスで、今からインストールしようとしているバージョンを取得するために使用します。
 また、フレームワークのベースクラスとして、**CB_ModuleUpdater** が用意されており、殆どこのクラスに処理をまかせることができます。
 バージョン番号のポリシー(4桁にしたり、並び替えのルールを変えたり)、上記のように取得先のセクションが違う場合などはクラスをオーバーライドしてカスタマイズしてください。

[[3. モジュールリソースを配置する。|head:type]]
デプロイメントでいう、archive/moduleに設定ファイルで記述したモジュールのディレクトリ(例: grn)を作成し、
インストールしようとしているバージョンのディレクトリ(例: 2.0.1)を作成する。
 その下に、scriptsディレクトリとresourceディレクトリを作成するのだが、resourceに関しては使用しない場合は作成しなくても構いません。

[[4. モジュールのローカルスクリプトを記述する。|head:type]]
ローカルスクリプトはなにかというと、データベースに対してローカルにあるスクリプトの事です。
 データベースへの変更を行う場合、毎回スクリプトが実行されてしまっては困るので、接続先ホストをチェックして
 データベースサーバーがローカルにある場合だけ実行します。

[[5. モジュールのリモートスクリプトを記述する。|head:type]]
これはローカルとは逆で常に実行されるスクリプトを表しています。
主に、設定ファイル等の更新( iniに新しいエントリーが追加される場合、バージョン番号を更新する )
等の目的で使用します。
設定ファイルに関しては、ユーザーのカスタマイズが入る可能性があり、
完全アンインストールを選択しない限り削除されることはないので、このようなスクリプトで処理する必要があります。

[[6. リソースファイルを配置する。|head:type]]
基本的にリソースファイルを配置することはありません。
 パッチ、モジュール単体のバージョンアップを提供することも可能ですので、その場合は使用することになります。
 現状はインストーラーへの組みこまれで、必ず最新のリソースに置換されるはずですので、リソースを配置したとしても上書きされます。

[[注意事項|section:caution]]

[[1. スクリプトの記述方法に関して|head:type]]
バージョンアップスクリプトは、2.0.0 から 2.0.2にバージョンアップする場合、
2.0.1, 2.0.2のバージョンアップスクリプトをシリアルに実行することで実現します。
そのため、各バージョンのスクリプトは、**各バージョンのリソースに依存する形で記述してはいけません**。
具体的に言うと、永続化レイヤーのORマッピングしたクラスを使って操作等を行うのではなく、データベース接続クラスだけをつかって
直のクエリーで処理してください。

[[2. スクリプトから返す終了コードは100-255を使用すること|head:type]]
スクリプトから返す終了コードは100-255を使用してください。
バージョンアップスクリプトでexit等で異常終了させる場合は、**100-255を使用してください**。
0-100の値はフレームワークで予約しています。尚、azaleaではcb_throw_error(1), 無限ループ(2)で終了しますので、
それらの値の場合、無条件でバージョンアップが失敗した旨が出力されます。
より柔軟に処理したい場合は、エラーコードを返し、適切にIDKスクリプトをカスタマイズして処理してください。
