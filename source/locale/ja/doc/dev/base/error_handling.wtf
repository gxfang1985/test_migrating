[[概要|section:abstract]]

エラー処理は、リクエストの処理中に発生した例外(exception)処理の事です。
 柔軟なエラー処理を可能にするには Java のような例外処理機構(try-catch) が望ましいのですが、残念ながら PHP4 では利用できません。
( PHP5では使用可能になっていますが、Azaleaでは 安定性の面からPHP5は採用していません。)

そこでAzaleaでは、エラーが発生した際の標準エラー処理フローを定義して、その枠の中で幾つかのカスタマイズポイントを提供しています。
それ以上に複雑なエラー処理は、各々のアプリケーションで処理してください。

[[エラーとは|section:about_error]]
エラーと一口にいっても、その深刻度はさまざまです。ただし、本質的な違いで考えると以下のように分類できます。
*''致命的なエラー''
 実行の継続が不可能なエラー。
 この場合、残念ながらアプリケーション開発者は速やかに異常終了するしかありません。
 ( インストール失敗などが理由としてあげられます。)
* **''アプリケーションの継続が不可能なエラー''**  (略称 ''アプリエラー'' )
 PHPの実行自体は可能なエラー。リクエストフローを中断し、「''Azaleaがエラー処理手順としてサポートするもの''」です。 
*''警告''
 実行には全く影響がないもの。これに関しては各アプリケーションに委ねます。
 警告処理の一種として、以下のようなきめ細かいエラー処理も含んでいます。
[[html]]
<pre>
フィールドの入力で入力値に問題があった際に、入力画面に戻り、
問題のある項目だけを赤字で表示して、再入力を促す。
<form action="get">
name <input name="name" value="江戸川乱歩">
e-mail <input name="mail">
age <input name="age" value="152">
<input type="submit" value="Submit">
</form>
で、実行を押すと、「必須項目が入っていません」というエラーページに飛ぶのではなく、
<form action="get">
name <input name="name" value="江戸川乱歩">
e-mail <input name="mail"> <font color="red">メールは必須項目です。必ず指定してください</font>
age <input name="age"> <font color="red">年齢(152)が不正です</font>
<input type="submit" value="Submit">
</form>
のような、元のフォームとよく似たページが出力されるようなもの
</pre>
[[/html]]

[[エラー原因|section:flow]]

上記の説明で、Azaleaの標準エラー処理フローがサポートするのは、アプリエラーであることは説明しました。
 では、アプリエラーを起こす原因は何なのかを説明すると以下のものに分類できます。

*''PHPエラー'' ( PHPが発生させるエラー )
*''外部エラー'' ( PEAR等の外部ライブラリが発生させるエラー )
*''ユーザーエラー'' ( アプリケーションの実行に不都合な時にユーザーは発生させるエラー )

[[エラー処理フロー|section:flow]]

[[img:developer/design_error_flow.jpg]]

Azaleaでは上記のエラー原因すべてを一元管理するエラー処理フローを定義しています。 
 エラーページを出力した後、終了ステータス が異常に設定され、トランザクション処理はアボートされます。

[[仕様|section:spec]]
[[エラーコード|head:error_code]]

共通処理フローで処理されるエラーは全て、発生原因ごとに用意された''エラーコード'' を持っています。
 エラーコードは以下の形式の表される文字列です。

{{(モジュール名)(5桁の自然数)}}
 例: FW00001

ただし、エラーコードは顧客が報告しやすいように番号をベースにしたものであるので、
プログラム内部でそのまま使用するとソースの可読性を損なってしまいます。 
その為、フレームワークの内部的には [[PHPの定数|http://jp.php.net/manual/ja/language.constants.php]] を利用してエラーをより意味のある文字列で表現しています。各モジュール ごとに エラーコード用のファイルを用意し、その中でエラー定数を定義するようにしてください。
 その際は、フレームワークの [[コード|include/fw/error_code.csp]] を参考にしてください。
尚、フレームワークのエラー定数 はリクエスト前処理で常に読み込まれるため、使用に際して改めて読み込む必要はありません。 

[[出力ストリーム|head:output]]

Azalea ではPHP の標準出力を[[PHP のアウトプットバッファリング機能|http://jp.php.net/manual/ja/ref.outcontrol.php]] を利用して制御しています。
 理由としては、
#文字コード変換のため
#エラー発生時に画面をクリアするため

エラー処理フローでは、エラー発生前の出力を全てクリアします。

[[HTTPヘッダ|head:http_header]]

エラー処理フローの最後では、"''X-Cybozu-Error''" ヘッダにエラーコードを出力します。
 ( ただし、通常行われている[[アウトプットバッファリング|http://jp.php.net/manual/ja/ref.outcontrol.php]]をエラーに至る前にキャンセルしている(例えばダウンロード処理の途中とか)場合には、HTTPヘッダの出力が不可能であるため、出力されません。 )

[[終了ステータス|head:exit_status]]

[[サイボウズ版PHP|doc:ext/azalea_php4]] を使っている場合は、エラーが発生すると最後に終了ステータス ''1'' でプロセスが終了します。
 尚、エラー中に再度エラーが発生した場合は、終了ステータスが ''2'' になります。

[[デバッグ情報|head:debug]]

[[common.ini|doc:ext/config#common.ini]] の [Global] debug フラグが ''1'' である場合、エラーページにはエラーが発生した時点のスタックダンプと(あれば)開発者用の情報が含められます。
 製品版で ''[Global] debug'' フラグを無くした場合にはこれらの情報は表示されません。

[[リクエストステータス|head:request_status]]
共通処理フローの最初に、リクエスト状態を管理する ''$G_state_set'' オブジェクトの ''error_occurred'' プロパティを ''TRUE'' に変えます。error_occurred はエラー処理中に再度エラーが発生した場合などに、無限ループを防ぐ目的で参照されます。 


[[クラス構成|section:class]]
[[html]]
<table class="cb_doc_table" border="1">
<tr><th nowrap>クラス名</th><th>役割と機能</th></tr>
</p>

<tr>
<td nowrap><tt>[[az:fw.core:CB_ErrorHandler]]</a></tt></td>
<td>
エラーハンドラを実装するクラス。
<ul style="margin-top: 0; margin-bottom: 0;">
<li>
[[az:fw.core:include/fw/prepend.csp:cb_throw_error]] や　PHPエラーが発生した場合のコールバック関数などを実装する。
</li>
</ul>
</td>
</tr>

<tr>
<td nowrap><tt>[[az:fw.core:CB_ErrorMessageFilter]]</tt></td>
<td>
エラーメッセージのフィルター用抽象クラス。
<ul style="margin-top: 0; margin-bottom: 0;">
<li>
実際の実装は [[プラグイン機構|doc:dev/base/plugin]]によって実装され、[[plain|code/plugin/fw/error/filter/plain.csp]]、[[html|code/plugin/fw/error/filter/html.csp]]、[[xml|code/plugin/fw/error/filter/xml.csp]] があります。
</li>
</ul>
</td>
</tr>

<tr>
<td nowrap><tt>[[az:fw.core:CB_ErrorMessageFilterFactory]]</a></tt></td>
<td>
[[az:fw.core:CB_ErrorMessageFilter]] を生成するためのファクトリークラス。
<ul style="margin-top: 0; margin-bottom: 0;">
<li>
フィルターも モジュール名( "''fw.error.filter''" ) として管理されているので、[[az:fw.core:CB_ModuleBase]] を継承しています。
</li>
</ul>
</td>
</tr>

<tr>
<td nowrap><tt>[[az:fw.core:CB_ErrorMessage]]</a></tt></td>
<td>
エラーコードに対するエラー情報を取得するためのクラス。
<ul style="margin-top: 0; margin-bottom: 0;">
<li>
エラー情報には、「エラーコード」、「症状」、「原因」、「対策」、「開発者メッセージ」等があります。
</li>
</ul>
</td>
</tr>
</table>
[[/html]]

[[html]]
<p>
<table class="cb_doc_table" border="1">
<tr><th nowrap>関数名</th><th>役割と機能</th></tr>
</p>

<tr>
<td nowrap><tt>[[az:fw.core:include/fw/prepend.csp:cb_throw_error]]</a></tt></td>
<td>
アプリケーションエラーを発生させる。
</td>
</tr>
</table>
[[/html]]

[[チュートリアル|section:tutorial]]
[[1. アプリエラーを発生させる|head:tut_application_error]]

[[src]]
<?php
''cb_throw_error''( 'E_PHP_ERROR' );
?>
[[/src]]
[[az:fw.core:include/fw/prepend.csp:cb_throw_error]] を使用すると、その時点でエラー処理フローに制御が移ります。
 尚、[[az:fw.core:include/fw/prepend.csp:cb_throw_error]] はエラーページに含める以下の情報に埋め込むパラメータを引数として受け取ります。 
*エラーコード (通常はエラー定数) 
*症状 
*原因 
*対策 
*開発者用の情報 

エラーコード以外の情報は、[[国際化リソース機構|doc:dev/base/i18n]] によって国際化されている必要があります。
具体的には、''locale/(ロケールコード)/error/(モジュール名).csp'' というファイル中で定義される連想配列の中に、エラーコードの 5 桁の番号をキーとして定義します。
フレームワークの [[コード|locale/ja/error/fw.csp]] を参考にしてください。

このように定義されたエラーリソースの文字列中に、置換するパラメータを埋め込むこともできます。
その場合、置換したいパラメータを ''&&(キー)&&'' のようにリソース中に定義して、[[az:fw.core:include/fw/prepend.csp:cb_throw_error]]のパラメータとしてとして渡してください。

[[src]]
<?php
''cb_throw_error'' ( E_COMMON_FOPEN_READ, null, ''array('file'=>'hoge.txt')'' );
?>
[[/src]]

 以下のように、パラメータが置換されていることが確認できます。

[[html]]
<table width="90%" border="0" cellspacing="0" cellpadding="0">
<!--
 <tr><td><img src="http://agent.corp.cybozu.co.jp/cb5/title_warn.gif"></td></tr>
-->
 <tr bgcolor="#ffffcc"><td><blockquote><br>
<h2>エラー (FW00002)</h2>
読み込み用にファイルを開けませんでした。
<h3>原因</h3>
ファイル <b>hoge.txt</b> のオープンに失敗しました。
<h3>対策</h3>
ファイルの存在とファイルのアクセス権を確認してください。
</table>
[[/html]]

[[az:fw.core:include/fw/prepend.csp:cb_throw_error]] は [[az:fw.core:include/fw/prepend.csp]] で定義されているため、特別なヘッダファイルを読み込むことなくいつでも使用可能になっています。

[[2．新たなエラーを追加する|head:new_error]]

新たにモジュールを追加するときは、以下のように行ってください。

#モジュール名を決めます。
 ex. RSSリーダーモジュールであれば、''RSS''
#モジュール毎のエラー定数ファイルを作成します。
 ex. code/include/''rss''/error_code.csp
#エラーリソースファイルを locale ディレクトリ以下に作成します。マルチロケール対応であれば、対応するロケール全てに用意すること。
 ex. locale/((ja))/error/''rss''.csp, locale/((en))/error/''rss''.csp

新たなエラーコードを追加するときは、以下のように行ってください。

#エラーコードを決めます。
 ex. ''RSS00001''
#エラー定数を決め、エラー定数ファイルに追加します。
 ex. define( "''E_RSS_PARSE_FAILED''", "RSS00001" );
#エラーリソースを追加します。
 ex. array( 'RSSファイルの解析に失敗しました', 'RSSファイル &&file&& は不正な形式です', null, null )

[[3. テンプレートをカスタマイズする|head:tut_template_customize]]
現在フレームワークがデフォルトとして用意しているものとして、[[plain|page/error_plain.tpl]], [[html|page/error_html.tpl]] があります。
 それぞれのアプリケーション毎に、適宜カスタマイズしてください。

フレームワークの処理的には、"''error_{テンプレートタイプ}.tpl''" によって切り替えています。
 テンプレートタイプの指定は以下の様にして行うことが可能です。

[[src]]
<?php
{{//xmlテンプレートを用意した場合}}
$G_state_set->set( '''error_page_type''', 'xml' );
?>
[[/src]]

ただし、フレームワークでは [[az:fw.core:include/fw/prepend.csp]] によってHTTP経由からの起動、コマンドラインからの起動をチェックして自動的に [[plain|page/error_plain.tpl]], [[html|page/error_html.tpl]]
を設定してくれます。ユーザーはそれ以外のテンプレートを使用したい場合のみ設定してください。

また、テンプレートに文字列を埋め込む際のフィルターもテンプレートと連動して切り替わります。
 同様に、[[plain|code/plugin/fw/error/filter/plain.csp]]、[[html|code/plugin/fw/error/filter/html.csp]] 等が用意されています。新たなフィルターを加える場合は、[[code/plugin/fw/error/filter/index.html]] に作り方が書かれていますので、参考にして作成してください。

[[4. エラーリソースを切り替える|head:tut_template_change]]
携帯などエラーリソースを一括して変更したいケースにも対応できるようにしてあります。

[[src]]
<?php
{{//xmlテンプレートを用意した場合}}
$G_state_set->set( '''error_resource_type''', 'error_mobile' );
?>
[[/src]]
何も設定しない場合、自動的に {{locale/{ロケールコード}/error}} を参照しますが、上記のように設定された場合、''error_mobile'' ディレクトリを見るようになります。

[[5. フック関数を登録する|head:tut_register_hook]]

[[src]]
<?php

require_once( 'fw/error_handler.csp' );
$error_handler = CB_ErrorHandler::getInstance();
$error_handler->addHook( '''hook_function''' );

?>
[[/src]]

上記のように addHookメソッドをコールすることによってフック関数を登録することができます。
 尚、フック関数は [[汎用プラグイン機構|doc:dev/base/plugin]] に対応していますので、"''code/plugin/fw/error/hook''" 下にプラグインとして組み込むことができます。
プラグインの作り方に関しては、[[plugin/fw/error/hook/index.html]] も参考にしてください。

実際に使用されるケースとしてはエラー発生時にログを吐き出したりするのに利用できます。
 フレームワークとしては、[[CSVファイル処理|doc:dev/api/csv]] で実際に利用しています。( エラーが発生した場合、エラー発生行をHTTPヘッダで出力し、かつエラーテンプレート上にもエラー情報という形で追記されるようになっています。)

[[Rationale|section:rationale]]

[[html]]
<dl>
<dt>エラーの深刻度(severity)は何故用意されていないのか？</dt>
<dd>
「<a href="#about_error">エラーとは</a>」で示したように、深刻度に応じて別々の処理が必要になるからです。<br>
アゼリアの標準エラー処理は、アプリケーションエラーのために用意されています。
</dd>
<dt>なぜ共通エラー処理フローを定義しているのか？</dt>
<dd>
コードの二重化を防ぐためです。また、ログを取るなどの便宜のためでもあります。
</dd>
</dl>
[[/html]]

[[リファレンス|section:reference]]

[[テンプレート|head:template]]

*[[ブラウザ用エラーページ|page/error_html.tpl]] ([[HTML用フィルター|code/plugin/fw/error/filter/html.csp]])
*[[コマンドライン用エラーページ|page/error_plain.tpl]] ([[平文用フィルター|code/plugin/fw/error/filter/plain.csp]])

[[フレームワークソース|head:source]]

*[[include/fw/error_handler.csp]]
*[[include/fw/error_message.csp]]
 エラーメッセージの処理
*[[include/fw/csv.csp]]
 エラーフックの使用例
*[[include/fw/prepend.csp]]
 cb_throw_error 関数の定義やコマンドライン時の処理など
