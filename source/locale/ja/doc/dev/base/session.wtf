[[概要|section:abstract]]

Hyper-Text Transfer Protocol (HTTP) は''ステートレス''(stateless)、
すなわちリクエスト間で状態を継続する機能を持たないプロトコルである。
GET あるいは POST といったリクエスト一回につきレスポンスが一回サーバーから返され、
それっきりである。 

だが例えばログイン情報を保持して毎回ログインすることを避けたり、
買物カゴに入れた商品を覚えておくなどする場合には、ステートレスでは都合が悪い。
そこで、同一クライアントからのリクエストを識別し、
サーバー側に状態の情報を持たせるのが''セッション''機能である。

クライアントの識別は通常 [[HTTP Cookie|http://wp.netscape.com/newsref/std/cookie_spec.html]] 
に個別の ID を設定することで実現する。
最近のブラウザはほぼ全て Cookie をサポートしているが、
サポートしていない場合は全てのリクエストの GET パラメータで ID を指定する
（ように記述する、後述）。この ID のことをセッションIDと呼ぶ。

サーバー側ではセッションIDと関連させてデータを保存しておく。
保存形式にはファイルやデータベース等色々ありえる。
PHP はセッションIDの発行とセッションデータの管理について基本的な機能を提供している。
詳細は[[マニュアル|http://jp.php.net/manual/ja/ref.session.php]]を参照のこと。 

[[セッションID|section:session_id]]

PHP のセッションIDは例えば "''4fbbaa896b13edfde13732d6ec37ea47''" 
といったランダムな16進の文字列で表現されている。
この ID を Cookie や GET パラメータとしてクライアントから受け取ることで、
クライアントを識別する。 

[[セッションハイジャック対策|head:]]
セッションハイジャックとは、セッションIDを類推する（あるいは当てずっぽうで試す）ことで、
例えば A さんでログイン済みのセッションを乗っ取ってしまう攻撃のことである。
ウェブアプリケーションによくあるセキュリティホールの一つである。 

アゼリアではセッションハイジャック対策を以下の 2 通りで行っている。

#セッションIDを複雑にして、類推を困難にする
 これは PHP 自身が持つ機能であり、ハッシュ関数等を利用したIDを発行している
#セッションを開始したクライアント以外からのアクセスを拒否する
 これはアゼリアが実装している対策である。
攻撃者は通常、正規のユーザーとは別のコンピュータからアクセスする。
アゼリアはセッション開始時にクライアントコンピュータの IP アドレスを記録するので、
異なる IP アドレスを持つ攻撃者はセッションを乗っ取ることができない。

後者の仕組みは、携帯電話会社からのアクセス等で不都合を生じる可能性があるため、
[[common.ini|doc:ext/config#common.ini]] で無効化可能にしている。

[[セッション Cookie|head:]]
ほとんどのブラウザは HTTP Cookie でブラウザにセッションIDを設定するので、
以後のリクエストでは PHP に自動的にセッションIDを送信する。
この Cookie のことを''セッション Cookie'' と呼ぶ。 

セッション Cookie の発行パスやドメインは [[common.ini|doc:ext/config#common.ini]] 
を編集することで変更可能である。
デフォルトでは発行パスが "/" で、ドメインは指定されていないので、
同一ホストへのアクセスではディレクトリ・ファイルを問わず Cookie が送信される。

発行パスとドメインのデフォルト設定は、
同一ホストにインストールしたサイボウズ製品間でシングルサインオンなどを実現しやすいように配慮したものである。
例えば Office をインストールしたホストにデヂエを後からインストールしてシングルサインオンさせる場合に、
Office の設定を変更しなくて済むようにするため。

[[Cookie が使用できない場合|head:]]
PHP はセッションIDを Cookie 以外にも、GET パラメータから受け取ることが可能である。
この機能により、例えばケータイなどでもセッションを利用可能となる。

アゼリアで用意している URL 生成関数 [[az:fw.core:include/fw/prepend.csp:cb_pageurl]], 
[[az:fw.core:include/fw/prepend.csp:cb_get_full_url]] 等は自動的に Cookie 
をサポートしないブラウザ向けに、セッションIDをパラメータに付加した URL を生成する。
そのためアプリケーションプログラマはセッションIDの処理に一切手がかからない。

現在の実装では IE, Netscape, Mozilla, Konqueror, AOL, Safari, Opera 等のブラウザは 
Cookie を処理すると判断している。
それ以外のブラウザ（例えば lynx）からアクセスすると URL にセッションIDが自動的に埋め込まれることが確認できる。

[[セッションデータ管理|section:session_data]]

[[ページ単位のデータ管理|head:page]]
PHP はベーシックなセッションデータの管理機構を、
''$_SESSION'' 変数を通じて提供している。
アゼリアではこの機構の上に、
セッションデータの管理をモジュール単位で行う API を実装している。

[[src]]
{{// セッション管理のヘッダファイル}}
require_once( 'fw/session_manager.csp' );

{{// セッション管理オブジェクト(シングルトン)}}
$session_manager = CB_SessionManager::getInstance();

{{// ページ名からセッショングループを取得}}
$page =& $session_manager->**getSession**( 'モジュール名等' );

{{// メソッドを使ってデータを保存}}
$page->**set**( 'key1', array('hoge'=>3, 'ふが'=>10) );

{{// データを取得}}
$data = $page->**get**( 'key1' );

{{// データを削除}}
$page->**unset_by**( 'key1' );
[[/src]]

上の例に示されるように、
セッションデータの操作は [[az:fw.core:CB_SessionManager]] の 
''getSession'' メソッドに「ページ名」を与えて得られるオブジェクトによって行う。
このオブジェクトをセッショングループと呼ぶ。
ページ名の命名規約は下で解説するが、他のモジュールと衝突しないためのものなので、
モジュール名を付けるのが普通である。

セッショングループには PHP の値であれば、
オブジェクトとリファレンスを除いて保存可能である。
ただし、ファイルの中身のデータのように大きなデータをセッションに保存してしまうと、
セッションデータの復元と保存で大きなコストが発生してしまう。
効率的なファイルの一時保存方法は、
[[ファイルアップロードの仕様書|doc:pg/misc/file]]で解説する。

[[ページ命名規約|head:page_naming]]
セッショングループのページ名は、以下の命名規約に従う。 

#モジュール中で共通して使うデータの場合「モジュール名」
 例) ワークフローであれば、"''workflow''" 
#サブモジュールに分かれている場合、"_" で繋ぐ
 例) ワークフロー中のエディタサブモジュールであれば、"''workflow_editor''" 
#モジュール中の 1 ページで使うデータの場合「モジュール名 + ページ名」
 例) 新規ワークフローの申請であれば、"''workflow_new''" 
#フレームワークについては、"''_fw''" を接頭辞にする 
#製品全体であれば "''common''" 

参考までに、フレームワーク中で使用しているページ名の一覧を下に挙げる。 
[[html]]
<table class="cb_doc_table">
<tr><th>ページ名</th><th>説明</th></tr>
<tr><td>_fw_i18n</td><td>[[国際化|doc:pg/i18n]]モジュールで、カレントロケールやタイムゾーンを保持するために使用している。</td></tr>
<tr><td>_fw_uum</td><td>[[統一ユーザー管理|doc:pg/basic/uum]]でロール一覧の保持などのために使用している。</td></tr>
<tr><td>_fw_uum_spi</td><td>[[統一ユーザー管理|doc:pg/basic/uum]]のデフォルトサービスプロバイダが、ログイン情報の保持などのために使用している。</td></tr>
</table>
[[/html]]

[[データの保存方法|head:save]]
アゼリアの標準では、セッションデータはセッションIDをファイル名としたファイルに保存される。
[[php.ini|doc:ext/config#php.ini]] の "''session.save_handler''" の値を "''user''" に変更すると、
セッションデータをデータベース（MySQL）に保存するように動作を変更できる。

データベースサーバーをウェブサーバーと分離する三層構成を取る場合には、
このデータベースに保存する方式を使用すると良い。
ネットワーク共有ファイルシステムを使用すれば、
ファイルに保存する方式のままでもうまく動作する可能性はあるが、
セッションデータは頻繁に読み書きされるため、パフォーマンスの悪化が懸念される。 

[[リファレンス|section:reference]]

*[[az:fw.core:CB_SessionManager]]（セッション変数群を管理するクラス）
*[[az:fw.core:CB_Session]]（セッション変数群）

[[サンプル|section:sample]]

*[[実行|run:developer/demo_session]]
*PHPスクリプト（[[developer/demo_session.csp]]）

[[フレームワークソース|section:source]]

*[[fw/session_manager.csp|include/fw/session_manager.csp]]
