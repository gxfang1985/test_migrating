[[概要|section:abstract]]

アゼリアは基本的にWebアプリケーションとして動作する。その動作モデルは必然的に、HTTPリクエストを処理していくものとなる。

アゼリアでは、統一したリクエスト処理方式を規定することでアプリケーションの品質向上を図っている。本項ではそのアゼリアにおけるリクエスト処理の内容と動作モデルを解説する。

[[用語|section:terminology]]

[[html]]
<table class="cb_doc_table">
<tr><th nowrap>用語</th><th nowrap>意味</th></tr>

<tr>
<td nowrap>前処理スクリプト</td>
<td>
</td>
</tr>

<tr>
<td nowrap>後処理スクリプト</td>
<td>
</td>
</tr>

<tr>
<td nowrap>フローレット</td>
<td>
</td>
</tr>

<tr>
<td nowrap>共通フローレット</td>
<td>
</td>
</tr>
</table>
[[/html]]

[[PHP4のリクエスト処理|section:php4]]

PHP4はスクリプト言語としての側面に加えて、HTTPリクエスト処理エンジンの機能も提供している。アゼリアのリクエスト処理は、主にPHP4のリクエスト処理機能の上に実装されている。

[[前処理と前処理スクリプト|head:prepend]]

PHP4の前処理としては、HTTPリクエストパラメータや HTTP Cookie をPHPの配列(''$_GET'', ''$_POST'', ''$_COOKIE'')に格納する処理などがある。

さらにその後、php.ini の [[auto_prepend_file|http://jp.php.net/manual/ja/ini.sect.data-handling.php#ini.auto-prepend-file]] でスクリプトが指定されていると、自動的に読み込み評価する。このようにして読み込まれるスクリプトを''前処理スクリプト''と呼ぶ。

[[後処理スクリプト|head:append]]

前処理と同様に、php.ini の [[auto_append_file|http://jp.php.net/manual/ja/ini.sect.data-handling.php#ini.auto-append-file]] でスクリプトが指定されていると、

リクエスト処理は 3 つの要素からなる。
すなわち、(1)[[前処理|#pre]]、(2)[[後処理|#post]]、(3)[[状態管理|#state]]。
前処理はHTTPリクエストの内容自体の前処理と、
続く処理のための標準関数や変数の導入を行う。
後処理はリクエストの処理終了後にデータの保存処理などを行う。
状態管理は、リクエストの処理中に生じた他に影響を及ぼす状態変化を記録する。

前処理は PHP の機能の一つである、
[[auto_prepend_file|http://www.php.net/manual/ja/configuration.directives.php#ini.auto-prepend-file]] 設定で実現する。
同様に後処理は 
[[auto_append_file|http://www.php.net/manual/ja/configuration.directives.php#ini.auto-append-file]] 設定で実現する。
状態管理は前処理の段階で用意される大域変数 ''$G_state_set'' で実現する。

[[前処理|section:pre]]

[[php.ini|doc:ext/config#php.ini]] の ''auto_prepend_file'' で指定されている 
[[include/prepend.csp]] から処理が開始される。

[[include/prepend.csp]] 自体はフレームワークの前処理スクリプト
（[[include/fw/prepend.csp]]）
を始めとする各種モジュールの前処理スクリプトを順番に読み込み、
最後に[[doc:dev/base/license]]の実装の一部として強制ページリダイレクトの検査を行うだけである。 

各モジュールの前処理スクリプトは、[[doc:dev/base/plugin]]を利用して、
プラグインスクリプトとして読み込まれる。
詳細については [[code/plugin/prepend/index.html]] を参照せよ。 

フレームワークとしての前処理のほぼ全ては、
[[include/fw/prepend.csp]] にて行われる。
具体的には以下のような項目・順序で処理が行われる。 

#HTTP 入力パラメータの文字コード変換
 入力された文字列を PHP の内部コードに変換する。
変換結果は大域変数 ''$G_INPUT'' 連想配列に格納される。
また、変換前の変数を使用する事故を防止するため PHP 標準の 
''$_GET, $_POST, $_REQUEST'' の 3 変数を [[php:unset]] している。
アップロードされたファイルのファイル名についても適切な変換が行われる。 
#[[common.ini|doc:ext/config#common.ini]] の読み込み
 エラー処理などに影響を与えるパラメータが存在するので、
それらよりも先に common.ini を読み込む。
その際に ini ファイルを読み書きするクラス [[az:fw.core:CB_ConfigManager]] を定義し、
大域変数 ''$G_config_common'' にインスタンスを作成して common.ini を読み込んでいる。
#エラーコードの読み込み
 フレームワークのエラーコード定数 ''fw/error_code.csp'' を読み込む。
つまり、フレームワークのエラーコードは任意の時点で利用できることになる。
#エラー関数の定義とエラーハンドラのセット
 標準関数 [[az:fw.core:include/fw/prepend.csp:cb_throw_error]] を定義する。
エラーハンドラの実体は [[include/fw/error_handler.csp]] 
で定義されている大きなクラスであるが、
エラー発生時までは評価する必要がないのでこの場では小さな関数を定義し、
実行時に ''fw/error_handler.csp'' を読み込むようになっている。
詳細は[[doc:dev/base/error_handling]]を参照せよ。 
#リクエスト状態管理オブジェクトの初期化
 クラス [[az:fw.core:CB_StateSet]] を定義し、
インスタンスとして標準大域変数 ''$G_state_set'' を割当てる。
リクエスト状態管理オブジェクトの役割は後述。
#コマンドラインからの起動判定とセッションの開始
 HTTP 経由で起動されたかコマンドラインで起動されたかを判別し、
''$G_state_set'' に反映する。
HTTP 経由の場合は[[セッション|doc:dev/base/session]]の開始（回復）を行う。 
#アップロードファイルのチェック
 [[PHP の機能|http://www.php.net/manual/ja/features.file-upload.php]]
でファイルが正常にアップロードされたか示すフラグがあるので、
チェックしてエラーが発生していればエラー処理を行う。
ただし、アップロードを指定されなかった（''UPLOAD_ERR_NO_FILE''）場合はエラーとしない。
#その他のユーティリティ関数の定義
 以上の他、[[doc:dev/base/uum]]のロール認証で使用する 
[[az:fw.core:include/fw/prepend.csp:cb_require_role]] 
関数や後述する[[処理フロー関連関数|#reference]]を定義している。

[[後処理|section:post]]

後処理は [[php.ini|doc:ext/config#php.ini]] の ''auto_append_file ''で指定されている 
[[include/append.csp]] にて行われる。

前処理と同じく、各モジュールの後処理スクリプトは、[[doc:dev/base/plugin]]を利用して、
プラグインスクリプトとして読み込まれる。
詳細については [[code/plugin/append/index.html]] を参照せよ。

もし [[php:exit]] や [[php:die]] でスクリプトの実行を強制終了すると、後処理は実行されない。
''**従って、exit(), die() の使用はデバッグ時や強制終了が必要な場面に限定すること！**''
さもなければデータベースへの書き込み処理が行われないなど、様々な不都合がでることになる。

スクリプトの安全な中断には、前処理で定義される 
[[az:fw.core:include/fw/prepend.csp:cb_safe_exit]] 関数を使用する。
この関数は後処理を適切にしてからスクリプトの実行を停止するため、返ることはない。

[[include/append.csp]] ではまずディスク空き容量をチェックし、
不足している場合は描画済みの画面を表示したあとにエラーページを表示する。
その後各モジュールの終処理ファイルを順番に読み込む。
最後にフレームワークの後処理を行った後、必要があればコピーライトや HTML の閉じタグを出力する。

フレームワークの後処理は [[include/fw/append.csp]] を読み込むことで実行される。
具体的には[[トランザクション|doc:dev/base/transaction]]のコミットと、[[軽量コンテナ|doc:dev/base/lwc]]で管理されるオブジェクトのシャットダウンである。

重要な注意として、これらの後処理スクリプトはエラーページ表示時後など 
[[az:fw.core:include/fw/prepend.csp:cb_safe_exit]] などから読み込まれることがある。つまり、大域スコープから呼ばれない可能性があるので、**後処理スクリプト中で大域変数を使用する場合 global 宣言しておくこと**。 また終了処理中にエラーが発生するとエラーページから再度呼び出されてしまうので、**$G_state_set の error_occurred フラグを見て再帰を防ぐこと**。 

$G_state_set については次の節で説明する。

[[状態管理|section:state]]

リクエストを処理している間に、
他のモジュールの動作に影響を与えるイベントが発生することがある。
例えばエラーが発生したらデータベーストランザクションは 
ABORT（コミットしない）する必要がある。
また、ファイルダウンロードを開始した場合はコピーライト表示や 
HTML の閉じタグ出力を行ってはならない。

これらの状態変化を記録するため、
フレームワークは前処理ファイル（''fw/prepend.csp''）中で大域変数 ''$G_state_set'' を準備する。
このオブジェクトは任意の文字列プロパティとそれに関連する値を持つが、
現在は以下の 4 つのプロパティが使用されている。

[[html]]
<table class="cb_doc_table">
<tr><th>プロパティ名</th><th>説明</th></tr>
<tr><td>error_occurred</td><td>エラーが発生したらTRUE。初期値はFALSE。</td></tr>
<tr><td>html_should_be_closed</td><td>TRUEの場合 HTML閉じタグを出力する。FALSEなら出力しない。</td></tr>
<tr><td>copyright_should_be_written</td><td>TRUEの場合コピーライト文字列を出力する。FALSEなら出力しない。</td></tr>
<tr><td>command_line</td><td>コマンドラインから起動された場合のみ TRUE。HTTP経由であればFALSE。</td></tr>
</table>
[[/html]]

[[リファレンス|section:reference]]

[[処理フロー関連関数|head:]]

以下に示す関数は、スクリプト実行中にフローを制御する目的で使用されるために、
前処理中に定義されている。いずれの関数も返ることはない。 

*[[az:fw.core:include/fw/prepend.csp:cb_safe_exit]]
*[[az:fw.core:include/fw/prepend.csp:cb_switch_page]]
*[[az:fw.core:include/fw/prepend.csp:cb_redirect_to_url]]
*[[az:fw.core:include/fw/prepend.csp:cb_redirect]]
*[[az:fw.core:include/fw/prepend.csp:cb_throw_error]]

[[処理フロー関連クラス|head:]]

*[[az:fw.core:CB_ConfigManager]]（ini ファイルの読み書き）
*[[az:fw.core:CB_StateSet]]（リクエスト状態管理）

[[フレームワークソース|section:source]]

*前処理スクリプト（[[include/prepend.csp]]）
*後処理スクリプト（[[include/append.csp]]）
*フレームワーク前処理スクリプト（[[include/fw/prepend.csp]]）
*フレームワーク後処理スクリプト（[[include/fw/append.csp]]）
