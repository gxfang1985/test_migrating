[[概要|section:abstract]]
「スケジューリングサービス」とは、静的またはAPIによって動的に追加されたスケジュールのイベント を指定時刻通りに実行するサービスの事です。

フレームワークで提供するスケジューリングサービスは windows の [[タスクスケジューラー|http://www.microsoft.com/japan/technet/prodtechnol/windows2000serv/maintain/featusability/tsksched.asp]] 
や unix の [[cron|http://www.atmarkit.co.jp/icd/root/56/36110556.html]]
と同様の機能を持っていますが、Azaleaに特化することで、より簡単に扱えるようになっています。

[[目的と設計方針|section:purpose]]
目的としては非常に簡単で、CGIベース(受動的)でも、能動的にサービスを提供したいからです。
 ( 各自の想像力しだいでいろんなことに利用できます。)

 タスクスケジューラー や cronでも 似たような機能は達せますが、あえてフレームワークで提供しているのには以下のような理由からです。
#windows も unix も同じに操作できて、かつ管理を簡単したい。
 ( 指定する位置にファイルを配置するだけ。後はAzaleaの構成にあわせて適切に処理します。)
#webからAPI経由で操作可能にする。
 ( 3層構成にも対応させるためにすべてデータはDBを介して行う。)

設計としては、常駐型なので出来るだけ小さく、処理も軽くまとめるようにしました。
( データ構造部分などcronから利用できる部分は再利用しています。)
サイズの方は、libmysql と静的リンクしているのである程度膨らむのはしかたありません。

[[ユースケース|section:use_case]]
アクターとしては、ユーザー、システム管理者、PGを挙げ、以下のユースケースを抽出しました。

#ユーザーが動的にイベントを登録する。
#ユーザーが動的に登録したイベントを変更する。
#ユーザーが動的に登録したイベントを削除する。
#ユーザーが動的に登録したイベントを確認する。
#システム管理者が静的なイベントを登録できる。
 ( イベントは設定内容によって特定曜日、時刻、日付で繰り返しで実行する )
#システム管理者が実行されたイベントを確認する。
#システム管理者 or PGが自由にイベントの内容を記述する。
#3層構成にしても動作する。

[[動作形態|section:5]]
スケジューリングサービスは各アプリケーション毎にインストールされるため、データベースエンジンのように複数の製品間での共用は行いません。

*window では サービスとして常駐します。
 コントロールパネル上では、「''Cybozu Scheduling Service ( {{アプリケーション識別子}} )''」としてインストールされます。

*unix では デーモンとして常駐します。
 「''/etc/init.d/cyss_{{アプリケーション識別子}}''」 となる、デーモンの起動スクリプトが配置されます。

尚、サービスのインストール、アンインストール等はIDKに組み込まれるので開発者が特に意識する必要はありません。

[[デプロイメント|section:deploy]]
スケジューリングサービスが動作するためのファイル配置は以下のようになります。

[[src]]
{{(%CGI_ROOT%)}}
    +-- **''sched.exe''** ( **''sched ''** )                  ''スケジューリングサービスの実体''
    +-- **''sched.ini''**                              ''スケジューリングサービス用設定ファイル''
    +-- common.ini
    +-- php.ini
    +-- [code]
           +-- [include]
           |      +-- [fw]
           |            +-- **''schedule.csp''**       ''スケジューリングサービスAPI''
           +-- [command]
           |      +-- **''schedule_logging.csp''**    ''スケジュールイベント実行ロギング用''
           |
           +-- [sched]
                  +-- {{[dynamic]}}  ユーザーが動的に追加可能なスケジュール
                  +-- {{[hourly]}}   毎時
                  +-- {{[daily]}}    毎時間
                  +-- {{[monthly]}}  毎月
                  +-- {{[yearly]}}   毎年
                  +-- {{[weekly]}}   毎週

**赤字** ( 今回加わったスケジューリングサービスのコア )
{{緑}}   ( スケジュールイベントを配置するディレクトリ )
[[/src]]

「''[[common.ini|doc:ext/config/common]]''」、「''[[php.ini|doc:ext/config/php]]''」 はスケジューリングサービスが動作するために
必須のファイルですので記述しています。

[[common.ini|head:common.ini]]
*データベースに接続する際に 「''データベース名''」、「''ユーザー名''」 を生成する。
*データベースが「''初期化終了済み''」を確認する。

[[php.ini|head:php.ini]]
*データベース接続先の「''ホスト名''」、「''ポート番号''」を取得する

[[設定ファイル|section:config]]
[[設定ファイル|doc:ext/config/sched]] の説明に関しては別セクションで行います。

[[バリデーション|section:validation]]
書式に関しては以下のBNFで表現されたものを解析します。
 設定ファイルおよびスケジュールサービスAPIともにこの書式に従います。
[[src]]
{{構文解析}}
format = field field fileld field field        {{ 5つのフィールドが必要 }}
field = list | list, list                      {{ フィールドは リスト または リストの繰り返し }}
list = range | interval | token                {{ リストは範囲、間隔, トークンのどれか}}
range = * | token - token                      {{ 範囲は *(すべて) か トークンからトークンの間}}
interval = range / token                       {{ 間隔は 範囲中を0から検索し、トークンずつすすめて一致するもの}}
token = minute | hour | day | month | week     {{ トークンは、分、時、日、月、週のどれか}}

{{字句解析}}
minute = [0-9]|[1-5][0-9]      {{ 0-59まで }}
hour = [0-9]|1[0-9]|2[0-3]     {{ 0-23まで }}
day = [1-9]|[1-2][0-9]|3[0-1]  {{ 1-31まで }}
month = [1-9]|1[0-2]           {{ 1-12まで }}
week = [0-6]                   {{ 0(日曜) - 6(土曜)まで }}

[[/src]]

また、構文上は通りますが、範囲の下限、上限を反転されている場合は実行しません。
 つまり、10-50 はOKですが、50-10 は実行しません。
 50-0の場合は 0-10,50-59のようにする必要があります。

[[ログ|section:log]]
[[エラーログ|head:error_log]]
スケジューリングサービスはエラーログを [[設定ファイル|doc:ext/config/sched]] で設定された値 または 同ディレクトリの ''sched.log'' に出力します。

尚、windows版の場合、イベントログにもエラー内容が出力されます。
( イベントログのリソースは実行ファイルの中に直接埋め込まれているので、別途dll 等を用意する必要はありません。)

[[実行結果ログ|head:execute_log]]
設定ファイルにおける ''db_logging'' が TRUEに設定されていると、
スケジュールイベントを実行後に サービスが ''code/command/schedule_logging.csp''
を自動的に呼び出し、データベースロギングを行います。
これらの結果は スケジューリングサービスAPI を介して取得することができます。
 これに関しては [[チュートリアル|#tutorial]] のセクションで説明します。

[[クラス設計|section:class_design]]
[[スケジューリングサービスメイン|head:class_schdule_main]]
[[デプロイメント|#deploy]] での ''sched.exe''( ''sched'' ) の部分をあらわし、C++によって作成されている。

[[img:developer/class_design_schedule.jpg]]

[[スケジューリングサービスAPI|head:class_schdule_api]]
[[デプロイメント|#deploy]] での ''fw/schedule.csp'' の部分をあらわし、PHPによって作成されています。

[[html]]
<table class=cb_doc_table border="1">
<tr><th nowrap>クラス名</th><th nowrap>役割と機能</th></tr>
<tr>
<td nowrap>[[az:fw.schedule:CB_SchedulingService]]</td>
<td>
スケジューリングサービスと通信するためのAPIを提供するクラス。<br>
( シングルトンで実装されています。)
</td>
</tr>
<tr>
<td nowrap>[[az:fw.schedule:CB_ScheduleEvent]]</td>
<td>
スケジュールイベントを保存するための永続化クラス
</td>
</tr>
</table>
[[/html]]


[[チュートリアル|section:tutorial]]
[[繰り返しのスケジュールイベントを登録、変更する|head:tut_register_repeat_event]]
[[src]]
<?php
require_once( 'fw/schedule.csp' );
{{// スケジューリングサービスAPIオブジェクトの取得}}
$ss = CB_SchedulingService::getInstance();

{{// 毎分実行させるには }}
$ss->registerRepeatEvent( 'test1', 'test1.csp', '* * * * *' );
{{// 10分毎に実行させるには }}
$ss->registerRepeatEvent( 'test2', 'test2.csp', '*/10 * * * *' );
{{// 毎日0時0分に実行するには}}
$ss->registerRepeatEvent( 'test3', 'test3.csp', '0 0 * * *' );
{{// 土日の0時0分に実行するには}}
$ss->registerRepeatEvent( 'test4', 'test4.csp', '0 0 * * 0,5' );
{{// 毎日1時から2時の間、0分に実行}}
$ss->registerRepeatEvent( 'test5', 'test5.csp', '0 1-2 * * *' );

{{// 同名のイベントがすでに登録されている場合は変更になります。}}
$ss->registerRepeatEvent( 'test1', 'test1.csp', '0 * * * *' );

?>
[[/src]]

[[繰り返しのスケジュールイベントを削除する|head:tut_unregister_repeat_event]]

[[src]]
<?php
require_once( 'fw/schedule.csp' );
{{// スケジューリングサービスAPIオブジェクトの取得}}
$ss = CB_SchedulingService::getInstance();

{{// スケジュールイベント( test1 ) を削除する }}
{{//( 一度だけのイベントも削除できますが、そちらは実行後サーバー側で自動的に削除されます。 )}}
$ss->unregisterEvent( 'test1' );

?>
[[/src]]

[[一度だけのスケジュールイベントを登録、変更する|head:tut_register_once_event]]
[[src]]
<?php
require_once( 'fw/schedule.csp' );
{{// スケジューリングサービスAPIオブジェクトの取得}}
$ss = CB_SchedulingService::getInstance();

{{// このようにすると、いまからちょうど一日後に実行}}
{{// パラメータとしてはtimestampしか受けつけません。}}
{{// (過去のデータを登録することも可能ですが、その場合即時実行されます。)}}
$ts = new CB_Timestamp;
$ts->unix_ts = time() + 86400;
$ss->registerOnceEvent( 'test1', 'test1.csp', $ts );
?>
[[/src]]


[[現在登録されているスケジュールイベントを確認する|head:tut_list_event]]
[[src]]
<?php
require_once( 'fw/schedule.csp' );
{{// スケジューリングサービスAPIオブジェクトの取得}}
$ss = CB_SchedulingService::getInstance();

{{// 登録されているイベント一覧の取得 }}
$events = $ss->listEvents();

{{// 返されるarrayは array('イベント名'=>&イベントオブジェクト) }}
foreach( array_keys( $events ) as $event_name )
{
    var_dump( $event_name );
}
?>
[[/src]]

[[実行済みのスケジュールイベントを確認する|head:tut_check_event]]
[[src]]
<?php
require_once( 'fw/schedule.csp' );
{{// スケジューリングサービスAPIオブジェクトの取得}}
$ss = CB_SchedulingService::getInstance();

{{// 実行済みのイベント一覧の取得 }}
{{// これは CB_Rowsetそのまま返します。limit等をかけて適切に取得してください。}}
$executed_events = $ss->listExecutedEventsLog();

?>
[[/src]]

[[リファレンス|section:reference]]
#サービスAPI ([[include/fw/schedule.csp]])
#ロギング ([[command/schedule_logging.csp]])
