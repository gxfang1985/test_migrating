[[概要|section:abstract]]
ここでは、Azalea を使用する全てのプロダクトに共通する基盤である、統一ユーザー管理(以下 ''UUM'' ) の解説をします。
 ( ユーザー管理とはアプリケーションを使用するユーザーの登録や認証、ユーザー及びグループの管理まで含めた総称です。 )

AzaleaでUUMを規定した目的は、「''プロダクト間の相互運用性を確保する''」 ことにあります。
 そのためには、「''プロダクト間で共通したユーザー情報''」 に対して 「''同一のAPI''」 を使ってアクセス可能であることが必要です。

[[用語|section:terms]]
UUMを説明する上で使用される用語について解説します。

[[html]]
<table class=cb_doc_table border="1">
<tr><th nowrap>用語</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>UUM</td>
<td>
統一ユーザー管理 (<b>U</b>nified <b>U</b>ser <b>M</b>anagement) のこと。
</td>
</tr>
<tr>
<td nowrap>ユーザー</td>
<td>
認証・識別される対象のこと。
</td>
</tr>
<tr>
<td nowrap>グループ</td>
<td>
ユーザーの属するグループのこと。( オブジェクトとしての実体を持ちます。)
</td>
</tr>
<tr>
<td nowrap>ロール</td>
<td>
ユーザーが持つ役割のこと。( オブジェクトとしての実体を持ちます。)
</td>
</tr>
<tr>
<td nowrap>(UUM) サービスプロバイダ</td>
<td>
UUM でプラグインする実装を提供するもの。( Java で良く使われる用語である。)
</td>
</tr>
<tr>
<td nowrap>SPI、サービスプロバイダインタフェース</td>
<td>
サービスプロバイダが提供するインターフェースのこと。( <b>S</b>ervice <b>P</b>rovider <b>I</b>nterface )<br>
UUM では特定のメソッド群を持つクラスとして定義されています。
</td>
</tr>
<tr>
<td nowrap>コア (Core)</td>
<td>
フレームワーク内部で管理しているユーザー・グループ・ロール、およびそれらの所属関係を保持している部分のこと。<br>
Azaleaにおける UUM 独自の用語です。
</td>
</tr>
</table>
[[/html]]

[[設計|section:design]]
[[ユーザー情報の考察|head:think_user_info]]
#プロダクトやアプリケーション固有の情報は、共通情報に含めない。
#共通情報は書き込めないことがある。
 ( 例えばガルーンでは集中管理システムでユーザー情報を一元管理しており、管理下のシステムでは配信されたユーザー情報の変更はできません。)

ただし、読み込みが中心であるとはいえ、アプリケーションによってはユーザーの追加や削除といったイベントで、
ファイルの削除などのメンテナンスを行うものもあります。

[[設計方針|head:design_plan]]
#アプリケーションは共通ユーザー情報を基本読み込みのみで使用するものとする。
 ( オプションとして、追加、変更、削除ができる形 )
#APIと実装を分離し、プロダクト毎に自由に実装を変更できるプラグインモデルとする。
#イベントを確実に取得するため、ユーザー情報を外部に完全に切り出さないようにする。
 (あくまでユーザーはAzaleaで管理し、共通情報を外部キーで外部に依存させる形)
#現行製品で実現しているユーザー管理を、矛盾なく取り込める。

[[アーキテクチャ|head:architecture]]
設計方針に基づき、モジュールを以下のように分割しました。

*アプリケーションがユーザー情報にアクセスする API ( ''UUM API'' )
*認証やユーザー情報の更新などの実装のプラグイン機構 ( ''UUM SPI'' )
*ユーザーやグループの内部管理部分 ( ''UUM Core'' )

ファイル構成もこの3つに対応していて、「''uum.csp''」, 「''uum_spi.csp''」, 「''uum_core,csp''」 がそれにあたります。

実際のアプリケーションでは、ユーザー情報の管理に付加的な機能を要求される場面が多く予想されることから、UUM API (CB_Uumクラス)のインスタンスは軽量コンテナで管理されています。

アプリケーション独自の API を追加実装したい場合は、CB_Uum を継承したクラスを実装し、``lwc.ini'' ファイルの "uum" インスタンス定義を差し替えることで対応可能です。

[[レイヤー構成|head:design_layer]]
[[img:developer/design_uum_layer.jpg:width=850:height=600]]

[[クラス構成|head:class]]

[[html]]
<table class=cb_doc_table border="1">
<tr><th nowrap>モジュール名</th><th nowrap>クラス名</th><th nowrap>役割と機能</th></tr>
<tr>
<td nowrap>''[[UUM API|include/fw/uum.csp]]''</td>
<td nowrap>[[az:fw.uum:CB_Uum]]</td>
<td>
ユーザーが使用する一連のAPIを提供します。<br>
ユーザーやグループの取得、ロール認証、サービスプロバイダの変更等。
</td>
</tr>

<tr>
<td nowrap rowspan="1">''[[UUM SPI|include/fw/uum_spi.csp]]''</td>
<td nowrap>[[az:fw.uum.spi:CB_UumDefaultServiceProvider]]</td>
<td>
製品がすぐにユーザー管理を導入できるようにAzaleaで用意しているデフォルトのサービスプロバイダ。
データベースに保存するように記述されています。
ここを切り替えることによって外部ソースとしてLDAP等が使用できます。
</td>
</tr>

<tr>
<td nowrap rowspan="6">''[[UUM Core|include/fw/uum_core.csp]]''</td>
<td nowrap>[[az:fw.uum.core:CB_User]]</td>
<td>
ユーザーの名前や電子メールアドレス等の属性を定義する読み取り専用永続化クラス。
属性については現行のサイボウズ製品や LDAP 等を参考に設計されています。 
<br>[[az:fw.persistent:CB_ReadOnlyBase]] という特殊なクラスを継承している為、通常の手段では値の変更などができません。
</td>
</tr>

<tr>
<td nowrap>[[az:fw.uum.core:CB_Group]]</td>
<td>
ユーザーのグループを定義する読み取り専用永続化クラス。
グループもユーザー情報同様に名前や URL 等の属性を持ちます。
こちらは、''CB_Group'' 自身へのリレーションを内部に持ち、階層化することが可能になっています。 
</td>
</tr>

<tr>
<td nowrap>[[az:fw.uum.core:CB_Role]]</td>
<td>
ユーザーのロールを定義する読み取り専用永続化クラス。
</td>
</tr>

<tr>
<td nowrap>[[az:fw.uum.core:CB_UserGroupRelation]]</td>
<td>
ユーザーとグループの所属関係を表現する、読み取り専用永続化クラス。
''CB_User'', ''CB_Group'' それぞれへのリレーションを持ちます。
リストインデックスも持っており、あるグループ内のユーザーの並びや、ユーザーの所属するグループの並びも表現しています。 
</td>
</tr>

<tr>
<td nowrap>[[az:fw.uum.core:CB_UserRoleRelation]]</td>
<td>
ユーザーとロールの保持関係を表現する、読み取り専用永続化クラス。
ユーザーの持っているロールの並びも表現しています。 
</td>
</tr>

<tr>
<td nowrap>[[az:fw.uum.core:CB_UumCoreAPI]]</td>
<td>
''UUM SPI'' がコアを操作するための API を提供するクラス。
アプリケーションのための API ではありません。 
</td>
</tr>

</table>
[[/html]]

[[チュートリアル|section:tutorial]]

[[ロール認証を行う|head:auth_role]]
Azalea ではユーザー認証ではなく、より一般的な ''ロール認証'' という機構を採用しています。
 ロール認証とは、アクセス元が適切なロール(役割) を持っているか確認することです。
 例えば、「ワークフロー管理者」という役割を持っているかどうか確認したければ、以下のように記述します。

[[src]]
<?php

cb_require_role( '**WorkflowAdmin**' );

... {{// (ワークフローの何らかの管理)}}

?>
[[/src]]

認証フローに関しては以下のようになっています。
[[img:developer/design_role_authentication.jpg:width=850:height=600]]

'''WorkflowAdmin''' がロールです。任意個の異なるロールを作り出して、アクセス元にその役割を要求することが可能です。
 また [[az:fw.core:include/fw/prepend.csp:cb_require_role]] の実装は最終的にサービスプロバイダの ''requireRole()'' メソッドであるので、自由にロールとその認証処理を記述することができます。
 例えば、デフォルトサービスプロバイダでは "''Administrator''" ロールで管理者として認証できるように処理を記述しています。

また、アクセス元が現在持っているロールの一覧は以下のようにして得ることができます。
 ただし下記を実行すれば分かるが、PHP 上での検索性能を確保するため''キーがロール名'' となっています。

[[src]]
<?php

global $G_container_base;
$uum =& $G_container_base->getInstance('uum');

$roles = $uum->listGrantedRoles();
print_r( $roles );

?>

{{// 実行結果の例}}
{{Array ( [**Everyone**] => 1 [**Administrator**] => 1 )}}
[[/src]]

[[認証方式を変更する|head:]]
認証(authentication)とは、アクセス元を確認することです。 
ユーザー認証といえば、アクセス元がどのユーザーであるのかを確認することです。
ユーザー管理において、実装を差し替える要求が最も高いのは、このユーザー認証の部分です。
 例えばケータイのための特殊な URL によるアクセスであるとか、LDAPサーバーにパスワードの検証を任せるLDAP認証、各種シングルサインオン機構等さまざまです。

UUM でこの目的を達成するには、適切に実装したサービスプロバイダをプラグインすることになります。
 具体的には、''authenticate()'' メソッドをオーバーライドすることでパスワードの検証方法の変更が可能です。
 また ''getLoginUser()'' メソッドをオーバーライドすれば、シングルサインオンのような認証方式を丸ごと変更することもできます。

[[ログイン / ログアウトを行う|head:login]]
デフォルトサービスプロバイダはロール認証にて "''LoginUser''" ロールを要求するとログイン処理を行います。
 その結果、特定のユーザーとして認識されると "LoginUser" ロールに加えて「ログイン中のユーザー」の情報も得ることができます。

[[src]]
<?php
require_once( 'fw/uum.csp' );

{{// ロール認証}}
cb_require_role( 'LoginUser' );

$uum =& $G_container_base->getInstance('uum');

{{// ログインユーザーの取得}}
$login =& $uum->**getLoginUser();**

{{// ログアウト}}
$uum->logout();

?>
[[/src]]

[[サービスプロバイダの切り替える|head:tut2]]
[[az:fw.uum:CB_Uum]] クラスは API を規定しているだけであり、実際の動作は全てプラグインしたサービスプロバイダにフォワードしています。
 サービスプロバイダは ''CB_Uum::setServiceProvider()'' により動的に差し替えることが可能です。
 設定ファイルを利用して差し替えることも可能で、フレームワークのデフォルトのサービスプロバイダは ''[[lwc.ini|doc:ext/config#config_list]]'' によって指定されています。
 ここを変更することによって、サービスプロバイダを簡単に切り替えることができます。

[[src]]
{{[uum_sp]}}
class     = **CB_UumDefaultServiceProvider**
require   = fw/uum_spi.csp
[[/src]]

[[サービスプロバイダを作成する|head:tut3]]
独自のサービスプロバイダ( 例えばユーザー情報をCyDEからでなくLDAPから取得するもの ) を作成する際は、デフォルトサービスプロバイダ([[az:fw.uum.spi:CB_UumDefaultServiceProvider]]) を継承してメソッドをオーバーライドしてください。
 デフォルトサービスプロバイダはデフォルト処理を記述した抽象クラスも兼ねてUUM SPIを規定しています。
 尚、以下のメソッドを必ず実装する必要があります。これらは読み込みアクセスを行うメソッドです。
#オプションサービスの利用判定メソッド ( ''isServiceAvailable'' )
#ロール認証メソッド ( ''requireRole'' )
#ログインユーザーの取得メソッド ( ''getLoginUser'' )
#パスワード検証メソッド ( ''authenticate'' )

オプションサービスの利用判定メソッド で利用可能に設定する場合、以下のメソッドも提供することができます。これらは書き込みを伴うメソッドです。

#パスワード変更メソッド ( ''changePassword'' )
#ユーザーの追加・変更・削除メソッド ( ''addUser'' , ''setUserProperties'', ''removeUser'' 等 )
#グループの追加・変更・削除メソッド ( ''addGroup'', ''setGroupProperties'', ''removeGroup'' 等)
#ロールの追加・変更・削除メソッド ( ''addStaticRole'', ''setStaticRoleProperties'', ''removeStaticRole'' 等 )
#ユーザーとグループの所属関係の変更メソッド (''setUserGroups'' 等)
#ユーザーの持つロール一覧の変更メソッド (''setUserRoles'' 等)

[[デフォルトサービスプロバイダの動作を理解する|head:default_sp]]
Azaleaでは プロダクトに即座にユーザー管理を導入できるよう、デフォルトでサービスプロバイダ [[az:fw.uum.spi:CB_UumDefaultServiceProvider]] を提供してます。

[[az:fw.uum.spi:CB_UumDefaultServiceProvider]] はSPIとして必須なAPIをすべてデフォルト実装しています。
 特にロール認証の実装により、下記に示す仕様のログイン処理を提供しています。ロール認証の説明と全体のフローは[[前述|#auth_role]]を参照してください。

[[src]]
+-----------------------------------------------------------------------+
| 1. 'LoginUser' ロールを要求される                                     |
|     ログインフォームのパラメータ (''_uid'' or ''_account'') がある？        |
+-----------------------------------------------------------------------+
                   はい                               いいえ
                    ↓                                  ↓
+-----------------------------------+ +---------------------------------+
| 2a. フォームで入力された          | | 2b. セッションに保存された      |
|     パスワードを検証              | |     情報をチェック              |
|     正しい？                      | |     既にログイン済み？          |
+-----------------------------------+ +---------------------------------+
       はい             いいえ               はい             いいえ
        ｜                ↓                  ↓                ｜
        ｜        **ログイン失敗エラー**     {{ログイン成功}}           ｜
        ↓                                                      ↓
+-----------------------------------+ +---------------------------------+
| 3a. セッションにログイン記録を保存| | 3b. ログインページを表示して終了|
|     Cookie にユーザーIDなどを出力 | |     表示するページは [[login.csp]]  |
+-----------------------------------+ +---------------------------------+
                  ↓
             {{ログイン成功}}
[[/src]]

さらに、ユーティリティ的な位置付けとなるが「システム管理用」の認証も標準的に提供するべく、デフォルトプロバイダでは '''Administrator''' ロールが要求された場合は以下の特殊な処理を行います。

[[src]]
+-----------------------------------------------------------------------+
| 1.  'Administrator' ロールを要求される                                |
|     ログインフォームのパラメータ (''_admin_password'') がある？         |
+-----------------------------------------------------------------------+
             はい                                 いいえ
              ↓                                    ↓
+-------------------------------+ +-------------------------------------+
| 2a. フォームで入力された      | | 2b. パスワード入力画面を            |
|     パスワードを検証          | |     表示して終了                    |
|     管理用パスワードと等しい？| |     表示するページは [[login_admin.csp]]|
+-------------------------------+ +-------------------------------------+
       はい           いいえ
        ↓              ↓
     リターン        **認証エラー**
        ↓
(CB_Uum 中でセッションに
 一時的なロールとして
 'Administrator' が付与される)
[[/src]]

[[イベントトリガーを追加する|head:tut_add_trigger]]
ユーザーの追加や削除といった ''イベント'' は、アプリケーションの作成に密接に関わるものです。 
Azaleaではアプリケーション作成に強く関わるイベントが発生する個所で、UUM は''トリガー'' (フック) 関数を呼び出す機能を、提供しています。 
これによって、ユーザーの追加時にそのユーザー用のオブジェクトを同時に作成したり、ユーザーの削除時に関連するオブジェクトを削除したいことが容易に実行できます。

[[html]]
<table class=cb_doc_table border="1">
<tr>
<th nowrap>モジュール</th><th nowrap>イベント</th><th nowrap>API</th>
</tr>

<tr>
<td nowrap rowspan="6">[[UUM Core|code/plugin/fw/uum/core/index.html]]</td>
<td>ユーザーの追加</td>
<td>CB_Uum::addTriggerOnAddUser( $func );
</td>
</tr>

<tr>
<td nowrap>ユーザーの削除</td>
<td>CB_Uum::addTriggerOnRemoveUser( $func );
</td>
</tr>

<tr>
<td nowrap>グループの追加</td>
<td>CB_Uum::addTriggerOnAddGroup( $func );
</td>
</tr>

<tr>
<td nowrap>グループの削除</td>
<td>CB_Uum::addTriggerOnRemoveUser( $func );
</td>
</tr>

<tr>
<td nowrap>ロールの追加</td>
<td>CB_Uum::addTriggerOnAddStaticRole( $func );
</td>
</tr>

<tr>
<td nowrap>ロールの削除</td>
<td>CB_Uum::addTriggerOnRemoveStaticRole( $func );
</td>
</tr>

<tr>
<td nowrap rowspan="1">[[UUM SPI|code/plugin/fw/uum/login/index.html]]</td>
<td nowrap>ログイン</td>
<td>CB_Uum::requireRole( $role_key )
</td>
</tr>
</table>
[[/html]]

もちろんAPIで追加することが可能ですが、カスタマイズ作業を容易にする為、
これらは全て [[汎用プラグイン機構|doc:dev/base/plugin]] に対応しています。

[[動的ロールプロバイダを追加する|head:add_role_provider]]
以下に挙げるロールは、特殊ロールとして扱われます。
 これらは動的に付与されるため、ユーザーが静的に持つことはできないようになっています。
 ( CB_Uum::setUserRoles() で静的に保存しようとしても無視されます。)

[[html]]
<table class=cb_doc_table border="1">
<tr><th nowrap>ロール名</th><th nowrap>役割</th><th nowrap>説明</th></tr>
<tr>
<td nowrap>Everyone</td>
<td nowrap>常に持つロール</td>
<td>
どのようなアクセスも、"Everyone" ロールを持ちます。そのため別途静的に持たせる意味もありません。
</td>
</tr>
<tr>
<td nowrap>LoginUser</td>
<td nowrap>ログイン済み</td>
<td>
このロールを要求すると、ログインシーケンスに連動するように設計されています。
</td>
</tr>
<tr>
<td nowrap>CommandLine</td>
<td nowrap>コマンドラインからのアクセス</td>
<td>
コマンドラインからアクセスされるときに自動的に持つロール。HTTP 経由では持ちえません。
</td>
</tr>
</table>
[[/html]]

ロール認証用の API ''CB_Uum::requireRole()'' の実装は実際にはサービスプロバイダの同名のメソッドで行われます。 
つまり、サービスプロバイダを拡張すれば、デフォルトサービスプロバイダの提供している "''LoginUser''", "''Administrator''" 以外のロール要求を処理できるようになります。 
しかし、これだけでは以下に挙げる点が不都合が生じます。 

*動的に追加するロールの処理のためだけにサービスプロバイダが必要になる。
*個別のアプリケーションごとにロールを用意したい場合に、拡張のモジュラリティに欠ける。

UUM では ''CB_Uum::addDynamicRoleProvider( $role_key, & $obj )'' にて追加する動的ロール名と、ロール認証を行うオブジェクトを動的に追加する機能を提供しています。
 引数として渡すオブジェクトはロール認証を行う ''requireRole()'' メソッドを実装する必要があります。
 このオブジェクトのことを 「''ロールプロバイダ''」 と呼びます。

APIで追加することも可能ですが、イベントトリガー同様カスタマイズ作業を容易にする為、
これらは全て [[汎用プラグイン機構|doc:dev/base/plugin]] に対応しています。
 具体的に作成方法にかんしてはこちらの [[ファイル|code/plugin/fw/uum/role/index.html]] を参照してください。

動的ロールプロバイダを追加する場合の注意点
#ロールプロバイダは、1 ロールにつき 1 関数しか設定できません。複数回設定した場合、最後のハンドラが有効になります。
#"''LoginUser''" 等システム組み込みのロールよりも、addRoleProvider()で追加されたプロバイダによる処理が優先されます。
 ( ユーザー定義の処理を優先させるため )

 ログアウト処理で、セッション情報を全て破棄することにより、一時的に保持しているロールやログイン済みであることの情報がクリアされます。

[[ユーザー、グループ、ロールとアプリケーションデータを連動させる|head:tut1]]
''UUM'' や ''UUMSPI'' によって隠蔽されているわけではなく、UUM Coreは外部に公開されています。
その為、ユーザーは Core を自由に使用することが可能です。
Core を公開する目的は、主にユーザー・グループとアプリケーションロジック間でリレーションを張るためです。

例えば、ユーザーと連動して削除されるアプリケーション用の属性テーブルは以下のように作成できます。

[[src]]
require_once( 'fw/persistent.csp' );

class Preferences extends CB_PersistentBase
{
    {{// ユーザーテーブルへのリレーション}}
    var $col_user = array('type'=>'relation', 'to'=>'**CB_User**');

    {{// アプリケーション用の属性}}
    var $col_foo1 = array('type'=>'int', 'notnull'=>TRUE);
    var $col_foo2 = array('type'=>'char', 'length'=>65535);
    ...
}
[[/src]]


[[リファレンス|section:reference]]

''サンプルソース''
#ユーザー管理UI ([[demo_system/user_admin.csp]])
#ユーザーの追加 ([[demo_system/command_user_add.csp]])
#ユーザーの変更 ([[demo_system/command_user_modify.csp]])
#ユーザーの削除 ([[demo_system/command_user_delete.csp]])
#グループ管理UI ([[demo_system/group_admin.csp]])
#グループの追加 ([[demo_system/command_group_add.csp]])
#グループの変更 ([[demo_system/command_group_modify.csp]])
#グループの削除 ([[demo_system/command_group_delete.csp]])
#ロール認証/ログイン/ログアウト ([[developer/demo_login.csp]])
#管理用パスワードの再設定（[[command/set_admin_password.csp]]）
 (コマンドラインからの起動も可能)

''フレームワークソース''
#統一ユーザー管理API ([[include/fw/uum.csp]])
#ユーザー管理サービスプロバイダインターフェース ([[include/fw/uum_spi.csp]]) 
#ユーザー管理コアAPI (サービスプロバイダ用) ([[include/fw/uum_core.csp]]) 
