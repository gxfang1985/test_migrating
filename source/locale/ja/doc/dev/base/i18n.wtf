[[ToDo|section:todo]]

* [[az:fw.core:CB_I18N]] の説明ページとする
* カレントタイムゾーン、カレントロケールなどの処理
* 国際化リソース管理

[[メッセージリソースの国際化とは|section:abstract]]

言語や地域に固有のメッセージを切り替えて表示するための仕組みです。
切り替わる部分（言語によって変化するテキスト文字列）を別のファイル等で定義しておき、
そのときの「表示すべき言語」に応じて、最終的な表示内容を切り替えます。

[[src]]
                                              +------------------------+ 
  +--------------------------+                |- システムデフォルト    | 
  |テンプレート              |                |- 管理者設定            | 
  |                          |                |- 個人設定              | 
  |        +-----+           |                |- そのセッションでの設定| 
  |        |キー1|           |                |等々                    | 
  |        +-----+           |                +-+----------------------+ 
  |                          |                  |(3)                     
  |                          |                  | そのコンテキストに     
  |               +-----+    |                  | おける、利用する       
  |               |キー2|    |                  | ロケール情報の取得     
  |               +-----+    |                  |                        
  +------------+-------------+         +--------+--------------+         
               |(1)                    |コンテキスト           |         
               |             (2)参照   |                       |         
  (5)   +--------------+---------------+現在、「言語2」で表示中|         
  変換↓|フレームワーク|               +-----------------------+         
        +--------------+-----+                                           
               |             | (4)参照                                   
               |             +------+                                    
               |                    |         +-------------------+      
               |(6)                 +---------+言語1のリソース定義|      
               |                            +-------------------+ |      
               |                            |言語2のリソース定義| |      
  +------------+-------------+              |                   | |      
  |ブラウザへの出力(言語2)   |              |キー1:テキスト1    | |      
  |                          |              |キー2:テキスト2    |-+      
  |                          |              |キー3:テキスト3    |        
  |      +---------+         |              +-------------------+        
  |      |テキスト1|         |                                           
  |      +---------+         |                                           
  |                          |                                           
  |             +---------+  |                                           
  |             |テキスト2|  |                                           
  |             +---------+  |                                           
  |                          |                                           
  |                          |                                           
  +--------------------------+                                           
[[/src]]

[[利用例|head:]]

具体的な例を見せるのが一番簡単だと思うので、
テンプレートファイルでどう書くかを示します。

[[src]]
テンプレート上
   <p>{cb_msg module="demo" key="Hello, World"}</p>

日本語(locale=ja)で表示したとき
   <p>世界よこんにちは</p>

英語(locale=en)で表示したとき
   <p>Hello, World</p>
[[/src]]

メッセージリソースを表示するライブラリ、
上の例ではSmartyのプラグイン関数 [[az:fw.core:include/fw/i18n.csp:cb_msg]] は、
ロケール情報を元に、変換する文字列を一覧（PHPヘッダで定義された配列）から取得し、
表示します。

文章中に可変なデータがある場合、それらのパラメータを渡すこともできます。
その場合、可変データの登場位置は言語によって変わるので、
メッセージリソースデータのほうで、どのデータをどこに埋め込むか、
の指定をしておきます。

[[src]]
PHPから指定する $pArray 配列
   $pArray = array(
       'age' => 18
   );

テンプレート上
<p>{cb_msg module="demo" key="I am &&age&& years old." params=$pArray}</p>

日本語(locale=ja)のメッセージリソース定義
$G_i18n_messages = array(
    'I am &&age&& years old.' => '私は&&age&&歳です。'
);
[[/src]]

上の例では、ロケールを指定していませんが、ロケールを指定した場合、
さらに、そのロケールによる置き換えを行ないます。
通常は、そのときのコンテキストから、ロケールを取得してそれを使います。

コンテキストとしては、たとえば、ログインしているユーザのロケール、
アプリケーションのデフォルトロケール、などが使われます。

[[キー|head:]]

キーは、以下のルールを持つこととします。 

*なるべく、英語によるそのままの文字列 
*同一の英語に対して、他言語で異なる訳語が割り振られる場合は、
キーとしてユニークにするため、最小限の変更を加える。 

[[メッセージリソースの格納先|section:deploy]]

国際化されたメッセージリソースは、PHPのヘッダファイルで、
グローバルな配列変数として格納されます。

[[メッセージリソースファイルの格納ルール|head:]]

アプリケーションごとにリソースを階層化して保存することになります。
一つのアプリケーション内で定義するメッセージの数が多くなる場合は適時ページ毎等に分割してください。

''メッセージリソースファイルの例''

英語用。locale/en/message/((モジュール名)).csp 
[[src]]
$G_resources = array(
    "Hello, World." => "Hello, World.",
    "I am &&age&& years old." => "I am &&age&& years old."
);
[[/src]]

日本語用。locale/ja/message/((モジュール名)).csp 
[[src]]
$G_resources = array(
    "Hello, World." => "世界よこんにちは。",
    "I am &&age&& years old." => "私は&&age&&歳です。"
);
[[/src]]

モジュール名は ''"."'' によって階層化することが可能です。
 例えば、cb_msg('fw.error', 'Default Cause', $parameters); のようにコールすると、''locale/ロケールコード(en, ja..)/fw/error.csp''
の中にあるデータを参照します。

[[メッセージリソースの取得方法|section:get]]

[[PHPスクリプト内から|head:]]
メッセージリソースを利用するPHPスクリプトは、
ヘッダ(fw/i18n.csp)を読み込むこととします。
（たとえば、純粋なビジネスロジックのみのPHPスクリプトでは、
これを読み込まないことで無駄な処理を省くことができます）

[[src]]
{{// PHPスクリプト中で国際化メッセージを得る}}
require_once ('fw/i18n.csp');

$gottenMessage = cb_msg(
    'demo', 'I am &&age&& years old.', array('age'=>$age));
[[/src]]

[[テンプレート内から|head:]]
フレームワークのテンプレートエンジンSmartyに、
独自プラグインを追加して入れてあり、これを関数として呼び出します。 

[[src]]
{{// PHPでパラメータ配列を作成し、テンプレートに渡す}}
$ageParams['age'] = 18;
$cb_smarty->assign('ageParams', $ageParams);
[[/src]]

[[src]]
{**}
{cb_msg module="demo" key="I am &&1&& years old." params=$ageParams}
[[/src]]

パラメータ側は国際化済でなければならない。
（日本語だったら"18"じゃなく「十八」にしろ、という要件が万一来たら、
パラメータを設定する側でがんばってほしい）

[[メッセージリソース方式での注意事項|section:attension]]

[[語の翻訳は1対1ではない|head:]]
たとえば、英語でUIを作ったときに、"Title"という項目名があったとします。
しかし、この"Title"を日本語に翻訳したとき、
メッセージアプリケーションでの中では「標題」かもしれませんが、
アドレス帳アプリケーションでは「役職」になるものかもしれません。

この場合は、メッセージ情報を引くためのキーとして"Title"をそのまま使うのは不十分、
ということになります。

このような問題を解決するのに、いくつも方法は考えられます。 

*キー自体を区別できるように置き換える（例: 前者を"Subject", 後者を"Title"とか）
*キーは英語の表示名とは無関係に、付加情報を与える
（"Title_for_message", "Title_in_address"）
*対象ドメインやモジュール毎に、リソースの管理を分離する。
（message/resource/"Title"とaddressbook/resource/"Title"）
*ページ毎に、リソースの管理を分離する。
（MessageListView.cspの"Title"とAddressBookDetailView.cspの"Title"）

一つ目は、必ず別の英語名をつけられるとは限らないので、
リソース数が増えていくと破綻します。

後ろの二つは、それらを同時に同じページに出す必要が出た際（特にトップページ）に破綻します。
インラインフレームで別々に処理させることで回避できる場合もありますが、
他の複雑さを増すということで良い手ではありません。

消去法により、二番目の方法を取らざるを得ない場面は存在するであろう、
という結論になりました。
キーは、万一リソースが定義され忘れていても意味が通じるよう、
英語で書くことを推奨しますが、
場合によってはキーは英語そのままではなくなることもある、ということになります。

アプリケーションが完成して、
翻訳に移る前にこのようなキーの衝突問題を洗い出すためには、
開発中から少なくとも2言語でUIを作成していく
（それも、できれば距離が近くない2言語）ことが助けになります。
サイボウズの場合、これは日本語と英語になるでしょう。 

[[語順の違い|head:]]
メッセージに可変の値を埋め込む場合、埋め込む場所は言語によってまちまちです。

以下の例では、ファイル名と行番号が、メッセージ中に埋め込まれる順番が、
日本語と英語で逆順になります。 

*Read Error at line 42 in file devastate_everything.php. 
*ファイル devastate_everything.php の 42行目で読み込みエラーが発生しました。 

このような場合に対応できるように、単に与えられたデータを配列順に埋め込むのではなく、
埋め込みキーを使った連想配列で、埋め込むデータを与える方式としています。 

*Read Error at line &&line_no&& in file &&file_name&&. 
*ファイル &&file_name&& の &&line_no&&行目で読み込みエラーが発生しました。 

このリソース文字列に対して、 

[[src]]
array('line_no' => 42, 'file_name' => 'devastate_everything.php')
[[/src]]

という配列を与えることで、言語に応じた適切な埋め込み整形が行なわれます。 

逆に言うと、$ms='zaku'のときに、 

*zakuとは違うのだよ

という結果を表示させたいからといって、 
[[src]]
  (リソース定義)
    'KEY_DIFFERENT_MESSAGE' => 'とは違うのだよ';
[[/src]]

[[src]]
  (プログラム)
    echo $ms . cb_msg('demo', 'KEY_DIFFERENT_MESSAGE');
[[/src]]

などとしてはいけません。
可変の値（この場合、$ms）が先頭に来るのは、日本語に固有な話でしかないからです。
可変の値が（今デザイン中の言語で）先頭や最後に来る場合に、
うっかりしないよう注意してください。 

[[文字コードに収める|head:]]
**全角スペースや中黒、かぎ括弧などの注意**

各言語のリソース定義に対して、
その言語で利用可能な文字しか使われてないことをチェックするツールを提供し、
誤ったコードが入らないことを保証したい。

[[スペース|head:]]
**語と語の間に気を配る**

[[サンプル|section:sample]]

メッセージリソース切り替え ( [[developer/demo_i18n_message.csp]] ) ( [[実行|run:developer/demo_i18n_message]] )

テンプレート ( [[page/developer/demo_i18n_message.tpl]] )
