[[概要|section:abstract]]
本文書では、Ogreのベースサービスからフレームワークに取り込まれた日付時刻計算ライブラリについて解説する。

[[用語|section:terms]]
[[html]]
<table class="cb_doc_table" border="1">
<tr><th nowrap>用語</th><th nowrap>解説</th></tr>
<tr>
<td nowrap>UNIX タイムスタンプ</td>
<td>
<li>1970年1月1日 00:00:00 GMTからの通算秒
<li>Cの標準関数やPHPの標準関数のtimeで取得できる値がそれ
</td>
</tr>

<tr>
<td nowrap>標準時</td>
<td>
<li>ある国または地域が共通で使う地域時( local time )のこと
<li>世界標準時との混乱を避けるため、標準時を地域標準時と呼ぶこともある
</td>
</tr>

<tr>
<td nowrap>タイムゾーン</td>
<td>
<li>時間帯
<li>共通の標準時を使う地域全体のこと
</td>
</tr>

<tr>
<td nowrap>夏時間</td>
<td>
<li>Daylight Saving Time（略してDSTとも呼ばれる）
<li>夏の間時計を1時間ほど（地域によって異なる）早めそれに合わせた生活を送る制度、またはその早められた時間のこと 
<li>地域によっては、実施時期や実施そのものが毎年変わるところもある
</td>
</tr>

<tr>
<td nowrap>PCの日付時刻</td>
<td>
<li><b>UNIXタイムスタンプ</b>を<b>タイムゾーン</b>をあわせて変換した地域の日付時刻
</td>
</tr>

<tr>
<td nowrap>UTCとGMTの違い</td>
<td>
<li>UTCは協定世界時、GMTは世界時およびグリニッジ標準時の略号
<li>時間の測定方法が異なる
<li>本来、グリニッジ標準時は地域標準時のひとつである
<li>ちなみに、日付時刻計算ライブラリはUTCを基点としている
</td>
</tr>

<tr>
<td nowrap>環境変数TZ</td>
<td>
<li>環境変数TZに適切な値が入っていれば、時刻を扱うCの標準関数はそれを反映した現地時間を返す
<li>UNIXとWindowsとで仕様が微妙に異なる
</td>
</tr>
</table>
[[/html]]

[[設計|section:design]]
根本的な問題は、UNIXとWindowsとで日付時刻を扱うCの標準関数の挙動が異なるところにある。

Linux/FreeBSD/Solarisにおいては、/usr/share/zoneinfo 等に、タイムゾーン情報（UTCと地域標準時の時刻差分、DSTの実施時期など）をデータファイルとして配置し、地域標準時の略号を環境変数TZに入れておくと、時刻を扱うCの標準関数でその地域標準時のタイムゾーン情報が反映された日付時刻を取得することができる。
ところが、Windows においては同様の方法で正確な地域標準時のタイムゾーン情報を反映した日付時刻を取得することができないため（UNIXのようにタイムゾーン情報を管理されていないことが原因？）、独自のAPIによって変換しなければならない。

上記のように単純な変換が困難であることから、UTC から地域標準時に変換するための「**タイムゾーン情報の管理**」と、「**変換そのもの**」をどこが担うべきなのかを決める必要がある。

タイムゾーン情報の管理として
#OSに依存したタイムゾーン情報を使う
#Windowsでもzoneinfoでタイムゾーン情報を管理する
#自前でタイムゾーン情報を管理する

を抽出した。

結論としては、( 3 )を採用することにした。
理由としては、( 1 )はタイムゾーン情報の管理をUNIXではzoneinfoで行う仕様に統一されているため問題ないが、Windowsではレジストリで管理するようになっていてその箇所もおおよそ見当がついているものの仕様が明示されているわけではないため問題があること（いつ変更されてもおかしくない）( 2 )においてはzoneinfoのライセンスがいまひとつ不明瞭であることがあげられる。
また、地域によっては頻繁に夏時間の実施時期が変更されることが考えられるため、タイムゾーン情報の調節をユーザーの手で行えるようにする必要があると判断した。
そのため、ユーザーによってタイムゾーンを変更することが困難な( 1 )や( 2 )よりも、容易に変更することができる( 3 )を採用することにした。
が、( 3 )にすればすべてがクリアされるわけではなく、自前でタイムゾーン情報を用意する必要がある。（また、当初システムプロファイルで管理していたが、DBと交信するコストが大きくなることが想定されたためデフォルトはプラグインで管理し軽量コンテナで実装を挿げ替えられるようにした）

また、変換として

#OSに依存したAPIを使う
#自前でAPIを用意する

を抽出した。

( 1 )では前述した通り、時間を扱うCの標準関数の挙動が違うことから使うことができないためOSに依存したAPIを使わざるえないのだが、Windowsにおいては地域標準時からUTCに変換するAPIがバージョンによってサポートされていない。
そのため、そのAPIだけを自前で用意しなければならず一元化できなくなってしまうため、( 2 )を採用することにした。

また、それを自前で実装することも考えたが、すでに実績のある下記のライブラリを候補とした。

#ICU4C ( International Components for Unicode )
#Boost Date-Time Library

当初、ICU4Cを採用する方向で検討していたが、デフォルトでは（タイムゾーンがライブラリに埋め込まれているため、タイムゾーンを変更するたびにライブラリを新しくする必要があるため）タイムゾーン情報を動的に変更することが不可能であり、（ライブラリが巨大なため）カスタマイズすることが困難であることから、Boost Date-Time Libraryを採用することにした。（とはいっても、こちらもデフォルトでは動的にタイムゾーンを扱えないため、カスタマイズを施している）
また、外部のライブラリを組み込んでいる都合上、PHPの拡張モジュールで提供している。

日付計算は当初実装の手軽さからMySQLで行っていたが、今後パフォーマンスが問題になりそうな懸念があったためPHPの拡張カレンダー関数に実装を切り替えた。

[[クラス構成について|section:class_structure]]
[[html]]
<table class="cb_doc_table" border="1">
 <tr>
  <th>クラス名</th>
  <th>役割と機能</th>
 </tr>

 <tr>
  <td nowrap>CB_DateEx</td>
  <td>
   <li>ローカルな日付計算のためのAPIを提供する
   <li>CB_Dateを継承し、ユーティリティなAPIを実装している
  </td>
 </tr>

 <tr>
  <td nowrap>CB_TimeEx</td>
  <td>
   <li>ローカルな時間計算のためのAPIを提供する
   <li>CB_Timeを継承し、ユーティリティなAPIを実装している
  </td>
 </tr>

 <tr>
  <td nowrap>CB_DateTimeEx</td>
  <td>
   <li>ローカルな日付時刻計算のためのAPIを提供する
   <li>CB_DateTimeを継承し、ユーティリティなAPIを実装している
  </td>
 </tr>

 <tr>
  <td nowrap>CB_TimeStampEx</td>
  <td>
   <li>ローカルな日付、時間、日付時刻に変換するためのAPIを提供する
   <li>CB_TimeStampを継承し、ユーティリティなAPIを実装している
  </td>
 </tr>

 <tr>
  <td nowrap>CB_DateTimeSpan</td>
  <td>
   <li>日付時刻計算によって発生する時間量を管理するクラス
   <li>時間量の管理や操作を実装している
  </td>
 </tr>

 <tr>
  <td nowrap>CB_TimeZoneInfo</td>
  <td>
   <li>タイムゾーン情報のインターフェイス
   <li>タイムゾーン識別子や時差、DSTの実施時期などが記述される
  </td>
 </tr>

 <tr>
  <td nowrap>CB_TimeZoneInfoFactory</td>
  <td>
   <li>CB_TimeZoneInfoを管理するインターフェイス
   <li>タイムゾーン情報の管理は、必ずこのインターフェイスを継承する必要がある
  </td>
 </tr>

 <tr>
  <td nowrap>CB_TimeZoneInfoFileFactory</td>
  <td>
   <li>CB_TimeZoneInfoFactoryの具象化クラス
   <li>プラグイン機構を使用したデフォルトのタイムゾーン情報の生成、及び管理が実装されている
  </td>
 </tr>

 <tr>
  <td nowrap>plugin_fw_timezone_gmt<br>plugin_fw_timezone_jst<br>plugin_fw_timezone_utc</td>
  <td>
   <li>タイムゾーン情報の具象化クラス
   <li>個々のタイムゾーン情報が記述されている
  </td>
 </tr>

</table>
[[/html]]

**※永続化レイヤの日付時刻型にマップしたクラスを継承した拡張クラス(CB_DateEx, CB_TimeEx, CB_DateTimeEx, CB_TimeStampEx)は、継承元のクラスと同じように扱うことができる。が、DBから読み込んだデータを永続化レイヤで展開するとき、これらは拡張クラスではなく継承元のクラスのオブジェクトとして展開されるので扱いに注意してもらいたい。**

[[チュートリアル|section:tutorial]]

[[タイムゾーン情報の管理、及び取得|head:]]

デフォルトは、プラグイン機構によってタイムゾーン情報を管理している。
デフォルトとして、UTC, GMT, JSTの3つのタイムゾーン情報のプラグインを用意している。（その他のタイムゾーンについては応相談ということで）

タイムゾーン情報を管理するオブジェクトは、軽量コンテナで管理している。
軽量コンテナで管理しているので、タイムゾーン情報を管理するインタフェースを継承した具象化クラスを用意すれば実装を簡単に挿げ替えることができる。
任意のタイムゾーン情報を管理するオブジェクトを取得したいときは、下記のスクリプトで取得することができる。

[[src]]
global $G_container_base;
$tzfactory =& $G_container_base->getInstance( 'timezoneinfo_factory' );
$timezone =& $tzfactory->getTimezoneInfo( $tzname );
[[/src]]

タイムゾーン情報は、連想配列でその構成を下記に示す。

[[html]]
<table class="cb_doc_table" border="1">
 <tr>
  <th>キー</th>
  <th>値</th>
 </tr>

 <tr>
  <td>bias</td>
  <td>時差</td>
 </tr>
 <tr>
  <td>standard_date</td>
  <td>夏時間から標準時に戻る日付時刻</td>
 </tr>
 <tr>
  <td>standard_bias</td>
  <td>標準時と地域時間との時差（通常は0が入る）</td>
 </tr>
 <tr>
  <td>daylight_date</td>
  <td>標準時から夏時間に戻る日付時刻</td>
 </tr>
 <tr>
  <td>daylight_bias</td>
  <td>夏時間と地域時刻との時差</td>
 </tr>
</table>
[[/html]]

standard_date, daylight_dateの日付時刻を表現する連想配列の構成は、下記のようになっている。

[[html]]
<table class="cb_doc_table" border="1">
 <tr>
  <th>キー</th>
  <th>値</th>
 </tr>

 <tr>
  <td>month</td>
  <td>月</td>
 </tr>
 <tr>
  <td>day</td>
  <td>日</td>
 </tr>
 <tr>
  <td>hour</td>
  <td>時</td>
 </tr>
</table>
[[/html]]

[[日付拡張クラス|head:]]

基底クラスである日付クラスでは、1000年1月1日から9999年12月31日までをサポートしているようだが、本クラスでは1970年1月1日から2037年12月31日までの日付のみをサポートする。（範囲外の日付がコンストラクタにわたされると、例外が発生する）
また、CB_Dateクラスを継承しているためpublicなプロパティも存在するが、基本はリードオンリーなプロパティであり書き換えられたときの動作は保証しない。（範囲内の値であれば動作するが）

[[src]]
$d = new CB_Date();
{{// コンストラクタ}}
$d->month = 8;
$d->day = 23;
$d->year = 2004;
$d1 = new CB_DateEx( $d );
$d->month = 2;
$d->day = 29;
$d->year = 2004;
$d2 = new CB_DateEx( $d );  **←不正な日付なので、例外が発生する**

{{// 日付を比較する}}
$d1->compare( $d2 );

{{// 曜日を取得する}}
$d1->getDayOfWeek();

{{// 月末を取得する}}
$d1->getEndOfMonthDay();

{{// 年における通算日を取得する}}
$d1->getDayOfYear();

{{// 時間量を加算する}}
$timespan = new CB_DateTimeSpan( 86400 );
$d1->add( $timespan );

{{// 時間量を減算する}}
$d1->sub( $timespan );

{{// n日移動する}}
$d1->moveDays( -1 );

{{// n月移動する}}
$d1->moveMonths( -1 );

{{// n年移動する}}
$d1->moveYears( -1 );

{{// 時間量を計算する}}
$d1->getInterval( $d2 );
[[/src]]

[[時間拡張クラス|head:]]

基底クラスである時間クラスでは、-838時間59分59秒から838時間59分59秒までをサポートしているようだが、時間拡張クラスでは0時間0分0秒から23時間59分59秒までの時間のみをサポートする。（範囲外の時間がコンストラクタにわたされると、例外が発生する）
常に、0時間0分0秒から23時間59分59秒までの時間に変換される。（そのため、移動メソッドでは日数が返るようになっている）
また、日付拡張クラスと同じくCB_Timeクラスを継承しているためpublicなプロパティも存在するが、基本はリードオンリーなプロパティであり書き換えられたときの動作は保証しない。（範囲内の値であれば動作するが）

24時間0分0秒をサポートする要望があったが、ユースケースがスケジューラの終了時刻しかない（そもそも、これらはUIで吸収すべきであると考える）ことや、MySQLではその時間をサポートしていない（していたとしても、0時間0分0秒に勝手に変換するらしい）ため本サービスでサポートしないことにした。

[[src]]
$t = new CB_Time();
{{// コンストラクタ}}
$t->hour = 8;
$t->minute = 19;
$t->second = 41;
$t1 = new CB_TimeEx( $t );
$t->hour = 24;
$t->minute = 0;
$t->second = 0;
$t2 = new CB_TimeEx( $t );  **←不正な時間なので、例外が発生する**

{{// 時間を比較する}}
$t1->compare( $t2 );

{{// n秒移動する}}
$t1->moveSeconds( -70 );

{{// n分移動する}}
$t1->moveMinutes( -70 );

{{// n時間移動する}}
$t1->moveHours( -70 );

{{// 時間量を加算する}}
$timespan = new CB_DateTimeSpan( 86400 );
$t1->add( $timespan );

{{// 時間量を減算する}}
$t1->sub( $timespan );

{{// 時間量を計算する}}
$t1->getInterval( $t2 );
[[/src]]

[[日付時刻拡張クラス|head:]]

基底クラスである日付時刻クラスでは、1000年1月1日0時0分0秒から9999年12月31日23時59分59秒までをサポートしているようだが、本クラスでは1970年1月1日0時0分0秒から2037年12月31日23時59分59秒までの日付時刻のみをサポートする。（範囲外の日付時刻がコンストラクタにわたされると、例外が発生する）
時間から日付への繰り上がり、下がりをサポートしている以外は、日付や時間クラスと同じ仕様になっている。

[[src]]
$t = new CB_DateTime();
{{// コンストラクタ}}
$dt->month = 8;
$dt->day = 23;
$dt->year = 2004;
$dt->hour = 16;
$dt->minute = 26;
$dt->second = 33;
$dt1 = new CB_DateTimeEx( $dt );
$dt->month = 2;
$dt->day = 29;
$dt->year = 2005;
$dt->hour = 24;
$dt->minute = 0;
$dt->second = 0;
$dt2 = new CB_DateTimeEx( $dt );    **←不正な日付時刻なので、例外が発生する**

{{// 日付時刻を比較する}}
$dt1->compare( $dt2 );

{{// 曜日を取得する}}
$dt1->getDayOfWeek();

{{// 末日を取得する}}
$dt1->getEndOfMonthDay();

{{// 年における通算日を取得する}}
$dt1->getDayOfYear();

{{// 時間量を加算する}}
$timespan = new CB_DateTimeSpan( 86400 );
$dt1->add( $timespan );

{{// 時間量を減算する}}
$dt1->sub( $timespan );

{{// n日移動する}}
$dt1->moveDays( 1 );

{{// n月移動する}}
$dt1->moveMonths( 1 );

{{// n年移動する}}
$dt1->moveYears( 1 );

{{// n秒移動する}}
$dt1->moveSeconds( 1 );

{{// n分移動する}}
$dt1->moveMinutes( 1 );

{{// n時間を移動する}}
$dt1->moveHours( 1 );

{{// 日付を変更する}}
$d = new CB_Date();
$d->month = 2;
$d->day = 29;
$d->year = 2004;
$dt1->setDate( $d );

{{// 日付を取得する}}
$dt1->getDate();

{{// 時間を変更する}}
$t = new CB_Date();
$t->hour = 20;
$t->minute = 09;
$t->second = 39;
$dt1->setTime( $t );

{{// 時間を取得する}}
$dt1->getTime();

{{// 時間量を計算する}}
$td1->getInterval( $td2 );
[[/src]]

[[時間量クラス|head:]]

[[src]]
$seconds = 3600;
{{// コンストラクタ}}
$dts1 = new CB_DateTimeSpan( $seconds );
$dts2 = new CB_DateTimeSpan( $seconds + 3600 );

{{// 時間量を比較する}}
$dts1->compare( $dts2 );

{{// 時間量を加算する}}
$dts1->add( $dts2 );

{{// 時間量を減算する}}
$dts1->sub( $dts2 );

{{// 時間量を変更する}}
$dts1->set( 59, 59, 23, 3 );

{{// 日に換算する}}
$dts1->toDays();

{{// 時に換算する}}
$dts1->toHours();

{{// 分に換算する}}
$dts1->toMinutes();

{{// 秒に換算する}}
$dts1->toSeconds();
[[/src]]

[[タイムスタンプ拡張クラス|head:]]
デフォルトのタイムゾーンは、ロケールを管理するCB_I18Nから取得される。

動的にタイムゾーンを変更して地域時刻を計算できるようにするために、拡張モジュールでは大域変数を経由してタイムゾーン情報をBoost Date-Time Libraryにわたすようにカスタマイズしている。（Boost Date-Time Libraryの構造上の問題も絡んでいる）そのため、マルチスレッドのような環境では誤作動することが考えらるため、大域変数を経由しないようにすることが今後の課題となっている。

[[src]]
$ts = new CB_TimeStamp();
{{// コンストラクタ}}
$ts->unix_ts = time();
$ts1 = new CB_TimeStampEx( $ts );
$ts->unix_ts += 3600;
$ts2 = new CB_TimeStampEx( $ts );

{{// タイムスタンプを比較する}}
$ts1->compare( $ts2 );

{{// タイムゾーン識別子を取得する}}
$ts1->getTimeZoneID();

{{// タイムゾーンを変更する}}
$ts1->setTimeZone( 'GMT' );

{{// 日付を取得する}}
$ts1->getDate();

{{// 時間を取得する}}
$ts1->getTime();

{{// 日付時刻を変更する}}
$dt = new CB_DateTime();
$dt->hour = 19;
$dt->minute = 13;
$dt->second = 48;
$dt->month = 2;
$dt->day = 29;
$dt->year = 2004;
$ts1->setDateTime( $dt );

{{// 日付時刻を取得する}}
$ts1->getDateTime();

{{// 時間量を計算する}}
$ts1->getInterval( $ts2 );
[[/src]]

[[gmmktimeの1970年1月1日の問題|section:extension]]
ローカルタイムからUTCな日付時刻に変換するcb_local_to_utcや、CB_DateTimeEx::getIntervalはPHP標準関数であるgmmktimeを使って実装しているのだが、この関数はWindowsで時差が+な地域であるときに1970年1月1日 0時0分0秒を指定するとエラーが発生するというバグがあるため1970年の1月2日より前の日付時刻を指定すると正常な日付時刻を取得することができない。
gmmktimeを使用するときは注意していただきたい。

[[http://bugs.php.net/bug.php?id=22620|http://bugs.php.net/bug.php?id=22620]]


[[拡張モジュールについて|section:extension]]
フレームワークとしてバイナリを提供するため、ビルドを必要とするケースはないと思われるが記述しておく。

本サービスでは、日付計算にPHP拡張のカレンダー関数を、時間計算にはBoost Date-Time Libraryをラップした独自の拡張モジュールを提供する。
PHP拡張のカレンダー関数は、PHPに含まれているためコンパイルオプションを追加するだけでPHPに組み込まれるが、Boost Date-Time Libraryをラップした独自の拡張モジュールはビルドするためにBoost C++ Libriesが必要になる。
Boost Date-Time Libraryはビルドを必要とするライブラリであり、bjamというBoostの推奨ビルドツールを用いてビルドする必要がある。

#Boost C++ Libraries と bjam のソースコードを下記からダウンロードする
[[http://sourceforge.net/project/showfiles.php?group_id=7586|http://sourceforge.net/project/showfiles.php?group_id=7586]]
#Boost C++ Libraries 及び bjam を任意のディレクトリで解凍する
#bjam を解凍したディレクトリで build.bat ( Windows ) 及び、build.sh ( UNIX ) を実行すると bjam がビルドされる
#Boost C++ Libraries を解凍したディレクトリから libs/date_time/build のディレクトリに移動する
#移動したディレクトリから bjam を実行すると Boost Date-Time Library がビルドされる

[[設計上の経緯と考察|section:rationale]]
[[html]]
<dl>
<dt>Q. PEARにもDateパッケージが採用されなかった理由は？</dt>
<dd>
<p>
日付時刻の計算方法は間違ってはいないが、夏時間がまったく考慮されていなかった。
ちなみに、PEARのDateパッケージの1.4.3では、下記の手順によって現時時刻に変換している。
</p>
<ol>
<li>現在のタイムゾーンの時刻差分を引く（UTC+0にリセット）
<li>変更するタイムゾーンの時刻差分を加算
</ol>
<p>
**※時刻差分は『自前』で管理している。**<br>
</p>
</dd>

<dt>Q. デフォルトで、どれだけのタイムゾーンが提供されるのですか？</dt>
<dd>
<p>
とりあえず、Windowsのレジストリのタイムゾーン情報を参考にGMT, UTC, JSTを提供している。が、Windowsのレジストリのタイムゾーン情報は履歴が管理できる構造になっていないため、正確さに欠ける。今後の課題だが、UNIXのzoneinfoはタイムゾーン情報の履歴を管理できる構造になっているためコンバーターを用意するなりして、移行する必要があると考える。<br>
<br>
ちなみに、タイムゾーンが記述されている Windows のレジストリ位置は<br>
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones<br>
である。
</p>
</dd>

</dl>
[[/html]]

[[リファレンス|section:reference]]
*[[include/fw/date.csp]]
 extension/cb_date_time.dll