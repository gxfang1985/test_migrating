[[概要|section:abstract]]
アゼリアでは、MS SQL Serverとの接続を実現するため、PHPのMSSQL拡張を有効としています。

MSSQL拡張を用いると、ローカルもしくはリモート環境で稼動するMS SQL Serverに接続し、
データベースにアクセスすることが可能となります。

ここでは、主にMSSQL拡張を使用するための環境設定について説明します。

MSSQL拡張APIの使用方法については、簡単なサンプルを提示するにとどめますので、
詳細な情報については[[php:ref:mssql]]を参照するようにして下さい。

[[MS SQL Serverの設定|section:server_setting]]
アゼリア上のアプリケーションからローカル、もしくはリモートのMS SQL Serverへ接続するためには、
MS SQL Server側で以下の作業を行う必要があります。

#SQL Server認証を有効にする
#（必要があれば）データベースを作成する
#（必要があれば）接続のためのログインユーザを作成する
#ログインユーザのデータベースアクセス権限を設定する

[[SQL Server認証を有効にする|head:]]
MS SQL Serverの認証方法には「Windows認証」と「SQL Server認証」の2種類の方法がありますが（詳細についてはMS SQL Serverのドキュメントを参照下さい）、MSSQL拡張を使用する際には後者でのログインが可能になっている必要があります。

MS SQL Serverは、セキュリティのため、デフォルトではSQL Server認証が使えない設定になっていることがあります。このような場合には、以下の方法で認証を有効にして下さい。

1.「SQL Server Enterprise Manager」を起動する。

2.「(local)」マシンのアイコンを右クリックし、開いたリストから「プロパティ」を選択する。

[[img:developer/mssql_login_1.jpg]]

3.開いたダイアログの「セキュリティ」タブを選択し、「認証」を「混合モード」に変更後、「OK」ボタンをクリックする。

[[img:developer/mssql_login_2.jpg]]

4.ナビゲーションに従い、プログラムを再起動する。

[[データベースを作成する|head:]]
以下に、テスト用のデータベースを作成するための簡単な手順を示します。実運用に用いるデータベースを作成する場合など、詳細な設定が必要になる場合は、MS SQL Serverのドキュメントを参照して下さい。

1.「SQL Server Enterprise Manager」を起動する。

2.「(local)」マシン下の「データベース」フォルダのアイコンを右クリックし、開いたリストから「新規データベース」を選択する。

[[img:developer/mssql_database_1.jpg]]

3.開いたダイアログの「全般」タブを選択し、「名前」を入力後、「OK」ボタンをクリックする。

[[img:developer/mssql_database_2.jpg]]

[[接続のためのログインユーザを作成する|head:]]
以下に、テスト用のログインユーザを作成するための簡単な手順を示します。実運用に用いるログインユーザを作成する場合など、詳細な設定が必要になる場合は、MS SQL Serverのドキュメントを参照して下さい。

1.「SQL Server Enterprise Manager」を起動する。

2.「(local)」マシン下「セキュリティ」フォルダ以下の「ログイン」のアイコンを右クリックし、開いたリストから「新規ログイン」を選択する。

[[img:developer/mssql_user_1.jpg]]

3.開いたダイアログの「全般」タブを選択し、1.「名前」を入力、2.「SQL Server認証」を選択し「パスワード」を入力、3.「データベース」リストで規定としたい（テスト用の）データベースを選択、を行った後「OK」ボタンをクリックする。

[[img:developer/mssql_user_2.jpg]]

4.ナビゲーションに従い、パスワードの再入力を行う。

[[ログインユーザのデータベースアクセス権限を設定する|head:]]
接続先のデータベースと接続のためのログインユーザの準備が出来たら、以下の手順で接続先のデータベースにログインユーザの権限を設定する必要があります。

1.「SQL Server Enterprise Manager」を起動する。

2.「(local)」マシン下「セキュリティ」フォルダ以下の「ログイン」のアイコンを右クリックし、開いたリストから「新規ログイン」を選択する。

3.開いたダイアログの「データベースアクセス」タブを選択し、1.上部のリストから対象となるデータベースをチェック、2.下部のリストから設定する権限をチェック（テスト用に全権限をユーザに持たせる場合はdb_ownerをチェックしておく）、を行った後「OK」ボタンをクリックする。

[[img:developer/mssql_security_1.jpg]]

[[接続時に必要となる情報|head:]]
MSSQL拡張からの接続時に、「ホスト名」、「ログインユーザ名」、「ログインユーザのパスワード」、「データベース名」が必要となります。

[[クライアント（アゼリアのインストールされたマシン）の設定|section:client_setting]]
Windows版の場合、MSSQL拡張を使うためにはSQLクライアントのDLL（ntwdblib.dll）がインストールされている必要があります。MS SQL Serverをインストールするか、独自にDLLファイルを入手し、システムフォルダに配置するようにして下さい。（分からない場合はフレームワークプロジェクトに問い合わせて下さい。）

[[接続確認|section:confirm_setting]]
最下部のサンプルを使用して接続を確認することができます。最下部の「実行」をクリックし、開いたページに必要な情報を入力して下さい。

なお、「Query」テキストボックスにはテストのためのSQL文を入力します。

ユーザにdb_owner権限を設定している場合は、''select * from sysobjects''と入力し送信すると、データベースに存在するシステムテーブルの一覧が表示されます。（''sysobjects''テーブル自身が全テーブルを管理するシステムテーブルです。）

権限がない場合は、「SQL Server Enterprise Manager」にて閲覧可能なテーブルを作成するなどして確認して下さい。

[[MSSQL拡張を使用したアプリケーションの実装|section:howtoconnect]]
MSSQL拡張APIには、サーバとの接続を確立する''mssql_connect''、カレントのデータベースを変更する''mssq_select_db''、クエリを実行する''mssql_query''、クエリ結果を取得する''mssql_fetch_row''、サーバとの接続を切断する''mssql_close''などのメソッドが存在します。

[[サーバとの接続を確立する（mssql_connectメソッド）|head:]]
mssql_connectメソッドは「ホスト名」、「ログインユーザ名」、「ログインユーザのパスワード」を引数に指定し、サーバとの接続を確立するためのメソッドです。Windowsとその他のOSで指定の仕方が異なることに注意して下さい。

接続が確立された場合はリンクID（下のソースの$conn）が返却されます。クエリを実行したり、接続を切断したりする際、このリンクIDをメソッドの引数とすることにより、対象となる接続を指定することになります。
[[src]]
/**
 * SQL Serverに接続する。
 * (Windows版とその他で接続先指定が異なることに注意。)
 */
if (strncasecmp(PHP_OS, 'WIN', 3) == 0) {
    //Windows版はホスト名のみ指定する。ポート番号を指定しては駄目。
    $conn = mssql_connect("$hostname", "$username", "$password");
} else {
    //Unix系ではポート番号を指定する必要がある。SQL ServerのTCPポートは1433。
    $conn = mssql_connect("$hostname:1433", "$username", "$password");
}
if ($conn === FALSE) {
    echo "Connection failed:<BR>";
    echo "hostname = '$hostname'<BR>";
    echo "port = '$port'<BR>";
    echo "username = '$password'<BR>";
    die;
}
[[/src]]

[[カレントのデータベースを変更する（mssql_select_dbメソッド）|head:]]
mssql_select_dbメソッドは「データベース名」とリンクIDを引数に指定し、カレントのデータベースを変更するためのメソッドです。

mssql_queryメソッド等、データベース名を引数にとらないメソッドを呼び出した際には、カレントのデータベースが対象となります。（mssql_db_queryメソッドのようにデータベースを指定してクエリを実行するメソッドもあります。）

[[src]]
/**
 * カレントのデータベースを変更する。
 */
$ret = mssql_select_db("$database", $conn);
if ($ret === FALSE) {
    echo "Database selection failed:<BR>";
    echo "database = '$database'<BR>";
    echo "<BR>";
}
[[/src]]

[[クエリを実行する（mssql_queryメソッド）|head:]]
mssql_queryメソッドはSQL文とリンクIDを引数に指定し、クエリを実行するメソッドです。

クエリが成功した場合、SELECT文のような結果を返すクエリについては結果IDを、そうでないクエリの場合にはTRUEを返却します。結果IDはmssql_fetch_rowメソッドなどのクエリ結果取得のためのメソッドに、引数として指定することになります。
[[src]]
/**
 * クエリを発行する。
 */
$ret = mssql_query("$query", $conn);
if ($ret === FALSE) {
    echo "Query failed:<BR>";
    echo "query = '$query'<BR>";
    echo "<BR>";
} else if ($ret === TRUE) {
    echo "No result.<BR>";
    echo "<BR>";
} else {
 ...
[[/src]]

[[クエリ結果を取得する（mssql_fetch_rowメソッド）|head:]]
mssql_fetch_rowメソッドは結果IDを引数に指定し、結果行を順番に取得するメソッドです。

未取得の結果行が存在する場合は、結果行を返却し、ポインタを次の行へすすめます。結果行がそれ以上存在しない場合は、FALSEを返却します。

mssql_fetch_rowメソッドは結果行を、フィールド値のリスト（数値をインデックスとする配列）として返却しますが、mssql_fetch_assocのようにフィールド名をキー、フィールド値を値とする連想配列として返却するメソッドも存在します。

[[src]]
    /**
     * クエリの結果を取得する。
     */
    $count = 0;
    $table = '';
    while( ($row =& mssql_fetch_assoc($ret) !== FALSE ) {
        $keys = array_keys($row);
        $fieldnum = count($keys);
        
        //フィールド名
        if ($count == 0) { 
            $table .= "<tr>";
            for ($i = 0;$i < $fieldnum;$i++) {
                $table .= "<th>$keys[$i]</th>";
            }
            $table .= "</tr>";
        }
        
        //フィールド値
        $table .= "<tr>";
        for ($i = 0;$i < $fieldnum;$i++) {
            $table .= '<td bgcolor="#99dddd">' . $row[$keys[$i]] . '</td>';
        }
        $table .= "</tr>";
        
        $count++;
    }
[[/src]]

[[サーバとの接続を切断する（mssql_closeメソッド）|head:]]
mssql_closeメソッドはリンクIDを引数に指定し、サーバとの接続を切断するメソッドです。

[[src]]
/**
 * 接続を終了する。
 */
$ret = mssql_close($conn);
if ($ret === FALSE) {
    echo "Closing connection failed.<BR>";
    echo "<BR>";
}
[[/src]]

[[マルチバイトデータを扱う際の注意|head:]]
マルチバイトデータを含むクエリを発行する、もしくは、マルチバイトデータを含むクエリ結果を取得する場合は、
データベース文字セットとPHPの内部文字セットとの相互変換を行ってやる必要があります。
MS SQL Serverの文字セットは、日本語ロケールのOSを使用する限り、'SJIS'となります。

クエリを発行する際には、クエリ自体を内部文字セットから'SJIS'に変換してサーバに送信してやる必要があります。
[[src]]
/**
 * クエリの文字セットをデータベースにあわせる（すなわちSJIS）
 */
$query = mb_convert_encoding( $query, 'SJIS', mb_internal_encoding() );
[[/src]]

クエリ結果を取得する際には、結果を'SJIS'から内部文字セットに変換してやる必要があります。
[[src]]
/**
 * 結果の文字セットをデータベース文字セットから戻す（すなわちSJIS）
 */
$result = mb_convert_encoding(
                              $row[$keys[$i]],
                              mb_internal_encoding(),
                              'SJIS'
                             );
$table .= '<td bgcolor="#99dddd">' . $result . '</td>';
[[/src]]

[[その他のAPI|head:]]
その他、APIの詳細な情報については[[php:ref:mssql]]を参照するようにして下さい。

[[サンプル|section:sample]]
*MS SQL Serverへの接続（[[demo_mssql.csp|developer/demo_mssql.csp]]）（[[実行|run:developer/demo_mssql]]）
