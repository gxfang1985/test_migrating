[[概要|section:abstract]]
本文書では、Azalea におけるプロファイルの機構について解説する。

 プロファイルとは、アプリケーション毎に設定項目情報の管理を提供するサービスのことであり、システムの情報を管理するシステムプロファイルと、ユーザー毎の情報を管理するユーザープロファイル分類される。

[[設計|section:design]]
現行フレームワークでは、DB として ODB が採用されていたためプロパティを必要なときに必要なだけ追加することができたのだが、Azalea においては標準の DB として RDB である MySQL を採用しているため、1度テーブルのスキーマを決定してしまうと、そのテーブルのスキーマを変更することは困難であり危険が伴う。（後述しているが、ターゲットに依存しないという要件もある）
この大きな差を埋めることを、プロファイルの目的としている。

また、プロファイルを設計するにあたり

#パフォーマンス
#使い易さ

上記のプライオリティを設計方針とし、設計を行った。

ユースケースとして

#プロファイルの種別が今後増える可能性がある
#モジュール毎にプロファイルを取得する
#モジュール毎にプロファイルを削除する
#モジュールを階層化して管理する
#属性を追加する
#属性を変更する
#属性を取得する
#属性を削除する
#ターゲットを変更する

を抽出し、これらから要件として

#プロファイルの種別が増えても簡単に対応できる
#属性の追加、変更、取得、削除できる
#ターゲット（MySQL、LDAP、他の DB など）に依存しない
#組み込みが容易である（ODB にプロパティを容易に追加できるように）
#モジュールごとにターゲットを割り当てられる
#((デフォルトユーザーの設定項目情報（初期値）を管理できる))
#((アカウントのライフサイクルと同期する))

を抽出した。
 **※緑字は、ユーザープロファイルだけの要件**

プロファイルは汎用的に使うこともできるが、あくまで Windows のレジストリや Mozilla のユーザープロファイルのような使われ方の想定を基に設計している。
格納するデータの区分には、注意してもらいたい。
クラス構成が [[AzLogger|doc:pg/misc/logging]] や[[汎用キャッシュ機構|doc:pg/basic/cache]]に酷似しているが、出力するデータの種類こそ異なるが要求される機能にさほど違いがないことから、すでに実績があるパターンを採用することにした。

[[用語|section:terms]]
[[html]]
<table class="cb_doc_table" border="1">
<tr><th nowrap>用語</th><th nowrap>解説</th></tr>
<tr>
<td nowrap>プロファイル</td>
<td>
<li><b>属性</b>を管理するノード
<li><b>モジュール</b>ごとに存在する<br>
<li>[[az:fw.profile:CB_Profile]] クラスで表現される
</td>
</tr>

<tr>
<td nowrap>モジュール</td>
<td>
<li><b>プロファイル</b>の分類区分
<li>通常は、アプリケーションがこれにあたる
</td>
</tr>

<tr>
<td nowrap>属性</td>
<td>
<li><b>プロファイル</b>が保持する情報のこと
<li>名前と値からなる
<li>値は何でも（mixedなので数字から文字列、配列まで）入れることができる
</td>
</tr>
</table>
[[/html]]

[[クラス構成|section:structure]]
[[html]]
<table class="cb_doc_table" border="1">
 <tr>
  <th>分類</th>
  <th>クラス名</th>
  <th>役割と機能</th>
 </tr>

 <tr>
  <td nowrap rowspan="7">コア</td>
  <td nowrap>[[az:fw.profile:CB_ProfileManagerFactory]]</td>
  <td>
   [[az:fw.profile:CB_ProfileManager]] を生成するためのファクトリークラス
   <ul>
    <li>インスタンスは常に1つ（シングルトン）</li>
    <li>ユニークなプロファイルキーで [[az:fw.profile:CB_ProfileManager]] を管理する（ユニークなキーさえ用意すれば、他のプロファイルも管理できる）</li>
   </ul>
  </td>
 </tr>

 <tr>
  <td nowrap>[[az:fw.profile:CB_ProfileManager]]</td>
  <td>
   [[az:fw.profile:CB_Profile]] のひとつの名前空間を規定する。
   <ul>
    <li>"''foo.bar''" といった、"." で区切られた階層名で [[az:fw.profile:CB_Profile]] を管理する </li>
   </ul>
  </td>
 </tr>

 <tr>
  <td nowrap>[[az:fw.profile:CB_Profile]]</td>
  <td>
   プロファイルを操作するための API を提供する。
   <ul>
    <li>各種プロファイルを同一インターフェイスで処理するための抽象クラス<br><font color="#ff0000">※ ターゲットの操作はすべて [[az:fw.profile:CB_ProfileTarget]] に委譲する。</font>
   </ul>
  </td>
 </tr>

 <tr>
  <td nowrap>[[az:fw.profile:CB_ProfileTarget]]</td>
  <td>
   ターゲットを操作するためのインターフェイスを定義する。
   <ul>
    <li>ターゲットクラスは、必ずこのインターフェイスを継承する必要がある。
   </ul>
  </td>
 </tr>

 <tr>
  <td nowrap>[[az:fw.profile:CB_ProfileModule]]</td>
  <td>
   モジュールテーブルを操作するための永続化クラス
   <ul>
    <li>このクラスから、plugin_profile_cyde は CyDE にアクセスする。
   </ul>
  </td>
 </tr>

 <tr>
  <td nowrap>[[az:fw.profile:CB_ProfileAttribute]]</td>
  <td>
   属性テーブルを操作するための永続化クラス
   <ul>
    <li>このクラスから、plugin_profile_cyde は CyDE にアクセスする。
   </ul>
  </td>
 </tr>

 <tr>
  <td nowrap>plugin_system_profile_cyde<br>plugin_user_profile_cyde</td>
  <td>
   [[az:fw.profile:CB_ProfileTarget]] の具像クラス
   <ul>
    <li>CyDE へのプロファイルの操作が実装されている。
   </ul>
  </td>
 </tr>

 <tr>
  <td nowrap rowspan="1">ユーティリティ</td>
  <td nowrap>[[az:fw.profile:CB_ProfileConfig]]</td>
  <td>
  プロファイルの設定ファイルを操作する。
   <ul>
    <li>[[軽量コンテナ|doc:pg/basic/lwc]] によって、シングルトンに管理される</li>
   </ul>
  </td>
 </tr>
</table>
[[/html]]

[[チュートリアル|section:tutorial1]]

[[設定ファイルを使用する|head:]]
プロファイルの設定ファイルは、軽量コンテナで設定されているため lwc.ini に記述されている。
 初期状態では下記のようになっており、これらのデータはすべてのモジュールのデフォルトになる。

[[src]]
{{;;; Profile configuration file}}

{{;; Default configuration.}}
target = cyde          **← 出力先ターゲット**
[[/src]]

また、この設定ファイルに下記のような記述を追加すると、記述したセクションをモジュール名としたプロファイルの設定を変更することができる。
(モジュールのセクションが存在しない場合、デフォルトが適用される。ターゲットは、階層化されたモジュール毎に自由に設定できる。)

 **※この設定は、すべてのプロファイルマネージャにおいて共通となっている。（例えば、システム及びユーザープロファイルが同じ階層を管理していたら、同じターゲットが適用される。）**

[[src]]
{{[foo.bar]}}
target = ldap

{{[foo]}}
target = cyde
[[/src]]

[[プロファイルを取得する|head:]]
システム及びユーザープロファイルは、下記のように取得することができる。

[[src]]
{{//////////////////////////////////////}}
{{// システムプロファイルを取得する場合 }}
{{//////////////////////////////////////}}

{{// hoge モジュールのシステムプロファイルを取得する}}
$p =& cb_get_system_profile( 'hoge' );
{{// 尚、このようにすると x.y.z モジュールが返り、親子関係のモジュールが自動生成される}}
$p =& cb_get_system_profile( 'x.y.z' );

{{//////////////////////////////////////}}
{{// ユーザープロファイルを取得する場合 }}
{{//////////////////////////////////////}}

{{// $user の hoge モジュールのユーザープロファイルを取得する}}
{{// （ $user を null にすればデフォルトユーザープロファイルが取得できる。 ）}}
$p =& cb_get_user_profile( $user, 'hoge' );
[[/src]]

**※上記のようにユーザープロファイルを取得することができるが、実際には UUM で定義されている [[az:fw.uum:CB_User]]::getProfile や [[az:fw.uum:CB_Uum]]::getDefaultUserProfile から取得すること。**

[[書き込みできるか確認する|head:]]
LDAP などのようなディレクトリ・サーバがターゲットであるとき、外部からの書き込みを禁止していることがあるため、データの出力先や入力元は、設定ファイルに記述したターゲットに依存させている。

[[src]]
{{// 書き込みできるか確認する}}
if( $p->isReadOnly() )
{
    echo "読み込みのみ。<br>\n";
}
else
{
    echo "書き込みできる。<br>\n";
}
[[/src]]

[[属性を生成する|head:]]
属性名は CB_DATABASE_MAX_STRINDEX（現状は255）個の半角文字を、属性値は65535個（内部で PHPの標準関数の serialize によってシリアライズを行っているため、変数の種類によってはそれより少なくなる）の半角文字を登録できる。

 **※配列を属性にすることもできるが、サイズには注意すること。**

 パフォーマンスのために、生成、変更の API を明確に分離させている。
生成済みの属性に、再度生成を行うことはできないので、注意すること。
[[src]]
{{// 初回は生成する}}
$ret = $p->createAttribute( 'name1', 'value1' );
{{// 生成済みなので、$ret = FALSE }}
{{// ( 実際にはターゲットに依存する。CyDE は直に insert を試みるため、例外が発生する。 )}}
$ret = $p->createAttribute( 'name1', 'value2' );

$param = array( 'x1' => 'y1',
                'x2' => 'y2' );
{{// 複数のデータを一括して生成する}}
$ret = $p->createAttributes( $param );
{{// 生成済みのデータと重複しているので、$ret = FALSE}}
{{// 1つでも生成済みのデータと重複するとエラーになる}}
$ret = $p->createAttributes( $param );
[[/src]]

[[属性を変更する|head:]]
属性を生成するときと同様、生成されていない属性には値を設定することはできないので、注意すること。

[[src]]

{{// 初回は生成する}}
$p->createAttribute( 'name1', 'value1' );
{{// 属性値は value2 に変更される}}
$ret = $p->updateAttribute( 'name1', 'value2' );
{{// 生成していない属性は変更できないので、$ret = FALSE}}
$ret = $p->updateAttribute( 'name2', 'value1' );

$param = array( 'x1' => 'y1',
                'x2' => 'y2' );
$p->createAttributes( $param );

$param = array( 'x1' => 'z1',
                'x2' => 'z2' );
{{// 複数の値を同時に変更する}}
$ret = $p->updateAttributes( $param );

{{// 1つでも生成していない属性が含まれていると、ロールバックさせるため例外が発生する}}
$param = array( 'y1' => 'y1',
                'y2' => 'y2' );
$ret = $p->updateAttributes( $param2 );

[[/src]]

[[属性を取得する|head:]]

[[src]]
{{// hoge という属性を取得できるなら $value に属性値が入り、TRUE が返る}}
{{// 取得できないなら FALSE が返る}}
$ret = $p->getAttribute( 'hoge', $value );

{{// すべての属性を取得する}}
{{// 属性名をキー、属性値を値とした連想配列が返る}}
{{// ( 属性が1つもないときは、空の配列が返る )}}
$ret = $p->getAttributes();
[[/src]]

[[属性を削除する|head:]]
[[src]]
$p->createAttribute( 'name', 'value' );

{{// 属性を削除できる}}
$ret = $p->removeAttribute( 'name' );
{{// 属性は削除済みなので、 $ret = FALSE}}
$ret = $p->removeAttribute( 'name' );

{{// すべての属性を削除する}}
$ret = $p->removeAttribute();
[[/src]]

[[リファレンス|section:reference]]
[[フレームワークソース|head:]]
*[[include/fw/profile.csp]]
*[[plugin/profile/cyde.csp]]
