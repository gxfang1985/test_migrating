[[概要|section:abstract]]

HTTPライブラリでは、クライアント側でHTTPを操作するためのコンポーネントを提供する。

HTTPクライアントのユースケースとして

#WEBサーバからドキュメントを得る(GET)
#form-dataを送信する(POST)
#multipart/form-dataを送信する
#クッキーのサポート
#PROXY経由でのアクセス
#リダイレクトのサポート
#SSL通信
#認証

などがある。

これらのユースケースの実現のために、当初PEARのHTTP_RequestとClient URL（cURL）ライブラリ関数を使い分けることを検討していたが、PEARの品質的な不安や複数のライブラリに依存させたくない、などの理由から実績があるcURLライブラリ関数のみを使うことにした。cURLについての詳細な説明は[[PHPのマニュアル|http://jp.php.net/manual/ja/ref.curl.php]]を参照のこと。

また、HTTPライブラリの利用者の手間を省くために、cURLライブラリ関数ではサポートされないクッキーの管理、URIの解析やフォーマットなどのユーティリティを用意している。

[[クラス構成|section:structure]]
[[html]]
<table class="cb_doc_table" border="1">
 <tr>
  <th>クラス名</th>
  <th>役割と機能</th>
 </tr>

 <tr>
  <td nowrap>CB_Cookie</td>
  <td>
   <li>クッキーを表現したクラス
   <li>クッキーを操作するためのAPIを提供する
   <li>Netscapeのクッキーの仕様に基づいた実装をしている
  </td>
 </tr>

 <tr>
  <td nowrap>CB_CookieManager</td>
  <td>
   <li>CB_Cookieを操作するためのインターフェイスを定義する
   <li>クッキー管理の具象クラスはこのクラスを継承しなければならない
  </td>
 </tr>

 <tr>
  <td nowrap>CB_CookiePHPSessionManager</td>
  <td>
   <li>CB_CookieManagerの具象クラス
   <li>PHPのセッション管理におけるクッキー管理を実装する
  </td>
 </tr>

 <tr>
  <td nowrap>CB_CookieForSingleProcessManager</td>
  <td>
   <li>CB_CookieManagerの具象クラス
   <li>１プロセス内で有効なクッキー管理を実装する。<br>(主な目的としてはコマンドラインから使用するため)
  </td>
 </tr>
 
 <tr>
  <td nowrap>CB_HttpClient</td>
  <td>
   <li>クライアント側でHTTPを操作するためのAPIを提供する
  </td>
 </tr>

 <tr>
  <td nowrap>CB_URI</td>
  <td>
   <li>URI(Uniform Resource Identifier)参照を表現したクラス
  </td>
 </tr>

</table>
[[/html]]

[[チュートリアル|section:tutorial1]]

POSTメソッドでリクエストを発行し、レスポンスを受けるサンプルで解説する。

[[HTTPクライアントを生成する|head:]]

まず、HTTPと通信するためのクライアントを生成する。
HTTPライブラリでは1クライアントで1リクエストを発行し、1レスポンスを受ける設計になっており、
使い回すことを前提とした設計となっていません。
 ( 複数にリクエストを発行したい場合は、軽量コンテナ経由で複数にインスタンスを作成してください。そのためにsingletonはoffに設定されています。)

[[src]]
global $G_container_base;

{{// HTTPクライアントを生成する}}
$hc =& $G_container_base->getInstance( 'http_client' );

{{// 複数のリクエストを発行する場合は新たに生成すること}}
$hc2 =& $G_container_base->getInstance( 'http_client' );
[[/src]]

上記を見ればわかるように、クライアントの操作の実装は軽量コンテナの「http_client」セクションで管理されている。
また、クライアントでもっているので直接弄ることはないと思われるが、クッキーの操作の実装も軽量コンテナの「cookie_manager」セクションで管理されている。
これらと異なる実装にするときは、製品アプリケーション層の軽量コンテナで異なるセクションで管理すべきである。

[[cURL転送用オプションを設定する|head:]]

もし、細かい操作をしたいときは、cURLライブラリ関数の直接転送用オプションを設定しなければならない。

[[src]]
{{// cURLライブラリのセッションハンドルを取得}}
$ch =& $hc->getCurlHandle();

{{// POSTすることをcURLライブラリに通知する}}
curl_setopt( $ch, CURLOPT_POST, 1 );
{{// POSTするためのform-dataを設定する}}
curl_setopt( $ch, CURLOPT_POSTFIELDS, 'data1=sample1&data2=sample2' );
[[/src]]

接続のタイムアウト時間やリクエストヘッダの値の設定など、curlはいろいろな転送オプションを用意している。
これらについては [[php:curl-setopt]] を参照のこと。（日本語のPHPのマニュアルは少し古いので注意してもらいたい）
また、下記の転送用オプションはHTTPクライアントの仕様の都合上、設定しても反映されない。

*CURLOPT_URL
*CURLOPT_COOKIE
*CURLOPT_HEADER
*CURLOPT_FOLLOWLOCATION
*CURLOPT_RETURNTRANSFER

[[リクエストを発行し、レスポンスを受ける|head:]]

任意のURLにリクエストを発行し、レスポンスを受ける。
リクエストを発行する前にcURL転送用オプションを設定しなければならない。

[[src]]
{{// リクエストを発行する}}
if( $hc->execute( 'http://xvi.corp.cybozu.co.jp/cgi-bin/cbfw/php.exe/test/sample/test2' ) )
{
    {{// cURLセッションは正常終了した}}

    {{// ステータスラインを取得する}}
    $status_line = $hc->getStatusLine();
    {{// メッセージヘッダを取得する}}
    $headers = $hc->getHeaders();
    {{// メッセージボディを取得する}}
    $body = $hc->getBody();
}
else
{
    {{// 何らかのエラーが発生した}}

    {{// エラーを取得する}}
    $error = $hc->getError();
}
[[/src]]

ステータスラインとして、下記のような構成の連想配列が取得できる。

[[html]]
<table class="cb_doc_table" border="1">
 <tr>
  <th>キー</th>
  <th>値</th>
 </tr>

 <tr>
  <td>http-version</td>
  <td>HTTPのバージョン</td>
 </tr>
 <tr>
  <td>status-code</td>
  <td>ステータスコードの番号</td>
 </tr>
</table>
[[/html]]

メッセージヘッダは、フィールド名（すべて小文字）をキー、フィールド値を値とする連想配列で取得できる。
また、エラーとして、下記のような構成の連想配列が取得できる。

[[html]]
<table class="cb_doc_table" border="1">
 <tr>
  <th>キー</th>
  <th>値</th>
 </tr>

 <tr>
  <td>errno</td>
  <td>エラー番号</td>
 </tr>
 <tr>
  <td>message</td>
  <td>エラーメッセージ</td>
 </tr>
</table>
[[/html]]

これらは、cURLライブラリが出力したエラーを直接出力している。
詳細については、[[cURLのエラーコード表|http://curl.haxx.se/libcurl/c/libcurl-errors.html]]を参照してもらいたい。

[[クッキー管理について|head:]]

クッキーの管理に関しては、多種のユースケースが考えられるため、軽量コンテナで簡単に挿げ替え可能にしてあります。
ユースケースとしては以下のような物があります。

#１プロセス中でのみ有効( 主にコマンドライン )
#セッションに保存してログアウトするまで有効
#DBに保存して数日間有効

デフォルトのクッキー管理は、CB_CookiePHPSessionManager(ユースケース2に対応) になっています。（これはログイン時にセッションを開始し、ログアウト処理と連動して、セッションで管理していたクッキー情報は破棄されるような動作がもっとも頻繁にしようされるケースと考えられるためです。）
尚、コマンドラインからアクセスする場合は、自動的に CB_CookieForSingleProcessManager に切り替わるので、ユーザーが軽量コンテナの設定を変更する必要がありません。
 これ以外の方法（例えばユースケース3のようにCyDEなどに保存する）で、クッキー管理を行いたいときは

#CB_CookieManagerを継承した実装を用意する
#製品アプリケーション層の軽量コンテナの設定ファイルにHTTPクライアントとクッキー管理のセクションを追加する

を行わなければなりません。

[[HTTPSについて|head:]]

cURLは、SSLによる暗号化通信をHTTPに実装したHTTPSもサポートしている。
が、外部のSSLのライブラリに依存しているためSSLのライブラリが必要となる。
SSLのライブラリはライセンスに問題があるためデフォルトではサポートしない。
必要になったときは別途用意する必要があるので注意してもらいたい。

PHPのcURLライブラリ関数はPHPに組み込まれることを前提としているが、HTTPライブラリでは拡張モジュールとして切り出した。
HTTPSに対応したいときは、このHTTPSに対応したHTTPライブラリの拡張モジュールを差し替えることで実現できる。

[[リファレンス|section:reference]]
[[フレームワークソース|head:]]
*[[include/fw/cookie.csp]]
*[[include/fw/http.csp]]
*[[include/fw/uri.csp]]

[[サンプルソース|head:]]
*[[doc_root/developer/demo_http_get.csp]]
*[[doc_root/developer/demo_http_post.csp]]
*[[doc_root/developer/demo_http_https.csp]]
