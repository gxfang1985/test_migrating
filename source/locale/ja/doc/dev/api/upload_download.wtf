[[概要|section:abstract]]

最近のウェブブラウザは全て、
フォーム処理の一つとしてローカルファイルをウェブサーバーにアップロードする機能を持つ。
例えば以下のようなフォームにより、
"''file''" というパラメータでファイルをアップロードできる。

[[src]]
<html>
<body>
<form method="post" action="<?php echo cb_pageurl('upload');?>"
      enctype="multipart/form-data">
<p>
ファイル: <input type="file" name="**file**"><br>
<input type="submit" name="ok" value="アップロード">
</p>
</form>
</body>
</html>
[[/src]]

以下のように見える
[[html]]
<div style="border:1px solid; padding:1em; margin-top:1em; margin-bottom:1em">
<form method="post" action="<?php echo cb_pageurl('upload');?>"
      enctype="multipart/form-data">
<p>
ファイル: <input type="file" name="**file**"><br>
<input type="submit" name="ok" value="アップロード">
</p>
</form>
</div>
[[/html]]

PHP はアップロードされたファイルをサーバー上で一時ファイルとして保存してからスクリプトを実行する。
一時ファイルはスクリプトの実行時に自動的に削除されてしまうため、
保存するためには移動（move）あるいはコピーしなければならない。

アゼリアではファイルをサーバー上に保存する方法を、
永続化レイヤーを通じて提供する。以上の流れを簡単にまとめると以下のフローとなる。

[[src]]
          +------------------------------+
          |1) ファイルをアップロードする |
          +------------------------------+
                          ↓
      +----------------------------------------+
      |2) 一時ファイルに保存する(PHPが自動実行)|
      +----------------------------------------+
               ↓                    ↓
    +-------------------+   +--------------------+
    |3a) その場で使用   |   |3b) サーバー上に保存|
    +-------------------+   +--------------------+
               ↓                    ↓
        +------------------------------------+
        |4) 一時ファイルを削除(PHPが自動実行)|
        +------------------------------------+
[[/src]]

[[PHP のファイルアップロード機能|section:php_upload]]

PHP はアップロードされたファイルの情報を、
スーパーグローバルの ''$_FILES'' にパラメータ名をキーとする連想配列に格納している。
前出の例では "''file''" がキーになっているため、以下のようにして情報を取得できる。

[[src]]
$file_info = $_FILES['**file**'];
[[/src]]

連想配列の構造は [[PHP のマニュアルに記述|http://jp.php.net/manual/ja/features.file-upload.php]]されている通り。
アゼリアでは前処理段階で、ファイルアップロードの失敗を自動的に検出するが、
**添付されなかった場合だけは手動でチェックする必要がある**。
ファイルの添付が必須ではない場合があるためである。

[[src]]
if ( $file_info['error'] === UPLOAD_ERR_OK ) {  {{// アップロード成功}}
    echo '添付ファイルあり';
} else {
    echo '添付ファイルなし';
}
[[/src]]

PHP ではフォームパラメータ名に "''[]''" を付けることで、
PHP の配列として受け取る機能があるが、これはアゼリアでは使用できない。
PHP の仕様が（山本の目には）設計ミスをしているため、対応が困難だからである。
すなわち、下記のフォームには対応していない。

[[src]]
<form method="post" action="..." enctype="multipart/form-data">
ファイル: <input type="file" name="**attached[]**"><br>
ファイル: <input type="file" name="**attached[]**"><br>
ファイル: <input type="file" name="**attached[]**"><br>
<input type="submit" name="ok" value="まとめてアップロード">
</form>
[[/src]]

[[一時ファイルを使用する|section:temp]]

アップロードされたファイルのデータは一時ファイルとして保存されており、
前章で示した ''$_FILES'' はその一時ファイルのファイル名を持つ。

アップロードされたファイルの一番単純な用途は、リクエスト中で内容を読んでしまい、
以降使わないケースである。
この場合は一時ファイルの操作のみ行えば良く、
使い終わったあとは PHP に任せておけば自動的に消去される。

[[src]]
if ( $file_info['error'] === UPLOAD_ERR_OK )    {{// アップロード成功}}
{
    {{// 一時ファイルをオープン}}
    $fp = fopen( $file_info['**tmp_name**'], 'r' );

    {{// ...処理...}}

    fclose( $fp );
}
[[/src]]

[[永続化レイヤーの保存機能|section:persistent]]

リクエストを跨がってアップロードされたファイルを保存する場合は、
永続化レイヤーを利用してデータベースに保存する。
実際にはファイルの実体はサーバー上のディレクトリに保存され、
データベースに保存されるのは元々のファイル名やファイルサイズなどのメタデータのみである。

具体的には、永続化クラス [[az:fw.persistent:CB_ServerFile]] を拡張したテーブルを作成する。
[[az:fw.persistent:CB_ServerFile]] はアップロードファイルの操作を行う各種のメソッドを提供しており、
継承したクラスでもそれらを使用できる。

[[src]]
require_once( 'fw/server_file.csp' );

class MyFile **extends CB_ServerFile**
{
    {{// 必要なカラムを追加する}}
    var $col_parent = array('type'=>'weak_relation' to=>'MyFolder');
}
$myfiles =& cb_class2table( 'MyFile' );
$myfiles->createTable( TRUE );

{{// アップロードファイルを保存する}}
$file =& $myfiles->newRow()
$file->**copy**( $_FILES['file'] );

{{// アップロードファイルを削除する}}
{{// delete メソッドはオーバーライドされており、行(オブジェクト)と同時に}}
{{// 保存されたファイルも削除する}}
$file2 =& $myfiles->getRow( $some_id );
$file2->**delete**();
[[/src]]

実際のファイルの保存・削除はデータベースのトランザクションに連動して行われる。
詳細については[[doc:dev/base/transaction]]の仕様を参照せよ。

CB_ServerFile::copy() メソッドは上で示した $_FILES の要素以外にも、下表に示す形式の引数を受け取ることが可能である。受け取った引数に応じて、自動的に保存するファイルを判断するようになっている。

* $_FILES 配列の要素
* サーバー上のファイル名(文字列)
* CB_ServerFile (もしくはサブクラス)のインスタンス

[[セッションへの一時的な保存|section:session]]

下書き（ドラフト）機能の実装には[[セッション管理とセッションデータの保存機能|doc:pg/basic/session]]を使用するのが簡便である。

しかしながら、セッションデータの保存はリクエストごとに毎回行われるため、
ファイルのように大きなデータの保存には向かない。
そこでアゼリアではセッションの間であっても、
前章で述べた永続化レイヤーの保存機能を使用する。
実際には永続化レイヤーの詳細は隠蔽されており、
下の例に示すように、各種の関数を使用して保存および削除を行う。

[[src]]
require_once( 'fw/session_manager.csp' );

{{// セッションに関連付けてファイルを保存する。尚、ID 文字列が返却される。}}
$session_manager = CB_SessionManager::getInstance();
$session =& $session_manager->getSession( 'foo' );
$session->**addFile**( 'draft_files', $_FILES['file'] );
[[/src]]

保存したファイルは、次のようにして取得することができる。

[[src]]

{{// 指定したセクションに関連付けられている連想配列を取得する。}}
{{// (キー=ID 値=CB_ServerFile のもの)}}
$ids = $session->**getFiles**( 'draft_files' );
foreach( array_keys( $ids ) as $id )
{
    $draft_file =& $ids[ $id ];
    
    {{// $draft_file は CB_ServerFile と同じメソッドを持つので、}}
    {{// fopen したり削除したりすることができる。}}
    
    $fp = $draft_file->f_open( 'r' );   {{// ファイルオープンの場合 }}
    $draft_file->delete();              {{// ファイル削除の場合 }}
}
[[/src]]

次のようにして、明示的にファイルの削除も可能です。
[[src]]
{{// $idはaddFile等で追加したものと同じ }}
{{//( CB_ServerFile等のdeleteを直接コールして削除している場合でも不整合なく処理 )}}
$session->unsetFile( 'draft_files', $id );
[[/src]]

ブラウザを終了するなどした場合、
ログアウト処理が行われずセッションデータが残ってしまう場合がある。
こういった場合もユーザーは気にする必要はありません。
CB_SessionManager は 一定の確率で自動的に古いセッションファイルのクリーンアップを行う。
 ( 尚、何日経過したファイルを削除するかは [[設定ファイル|doc:ext/config#common.ini]] で調整可能ですので、そちらを参照すること。）

[[セッションに保存したファイルを永続的に保存する|head:tmp_to_persist]]

前述したように、CB_ServerFile::copy() メソッドは [[az:fw.persistent:CB_ServerFile]] のインスタンスを受け取ることができる。[[az:fw.core:CB_Session]]::getFiles() が返す配列内のオブジェクトも [[az:fw.persistent:CB_ServerFile]] のインスタンスであるので、以下の手順でセッションに保存したファイルを永続的に保存することができる。

# [[az:fw.core:CB_Session]]::getFiles() でセッションに保存したファイルオブジェクトを取得
# [[az:fw.persistent:CB_ServerFile]]を継承したテーブルの行オブジェクトを newRow() で作成
# 2 で作成した行オブジェクトの copy() メソッドに、1 のファイルオブジェクトを渡す

[[ダウンロード処理|section:download]]

*[[サーバーサイド|#server_side]]
*[[クライアントサイド|#client_side]]
*[[ユーティリティ|#utility]]

[[サーバーサイド|head:server_side]]

ダウンロード処理とは、HTTP 経由でブラウザにテキスト以外のコンテンツを送信することである。
この目的には HTTP のレスポンスで "''Content-Type''" ヘッダにコンテンツの MIME タイプを指定すれば良い。
さらにファイル名やインライン表示などの情報を渡すには、
"''Content-Disposition''" ヘッダを使用する。
詳細は RFC [[2045 (MIME)|http://rfc-jp.nic.ad.jp/rfc/rfc2045.txt]], 
[[2046 (MIME)|http://rfc-jp.nic.ad.jp/rfc/rfc2046.txt]], 
[[2183 (Content-Disposition)|http://rfc-jp.nic.ad.jp/rfc/rfc2183.txt]], 
[[2616 (HTTP/1.1)|http://rfc-jp.nic.ad.jp/rfc/rfc2616.txt]] を参照せよ。

ただし現実には RFC の規定通りに実装されていないブラウザも存在する。
そのためアゼリアでは以下のようにテキスト以外の書き出し処理を隠蔽している。

まずプログラム側からは標準関数 
[[az:fw.core:include/fw/prepend.csp:cb_prepare_download]] を使用する。
この関数は以下に挙げる動作を行い、コンテンツの書き出しに備える。

*Content-Type ヘッダを出力 
*ブラウザに合わせた Content-Disposition ヘッダを出力 
*ブラウザが対応する形式を判別したインライン表示指定 (画像など) 
*[[アウトプットバッファリング|doc:general/php4/azalea#ob]]を解除 → 文字コード変換も解除 

文字コードの自動変換はバイナリデータの書き出しでは不都合なので、解除している。
さらに国際化の設計から、
CSV ファイルなど外部にエクスポートするデータ形式はロケールごとに適切な文字コードが異なるため、
最下位の API としては手動変換とするべきである。

[[src]]
{{// 第一引数はファイル名（日本語可）}}
{{// 第二引数は MIME タイプ}}
{{// 第三引数に FALSE を指定するとインライン表示しない}}
{{//（ダウンロードダイアログがポップアップする）}}
{{// 第三引数が省略もしくは TRUE であれば、}}
{{// ブラウザが許容する MIME タイプの場合のみインライン表示}}

cb_prepare_download( 'サンプル.csv', 'application/octet-stream', FALSE );
[[/src]]

[[az:fw.core:include/fw/prepend.csp:cb_prepare_download]] の後に書き出される内容は、
そのままブラウザに送信される。
書き出し後にゴミを出力することを避けるため、
処理終了後は速やかに [[az:fw.core:include/fw/prepend.csp:cb_safe_exit]] を呼び出してスクリプトを正常終了する。

[[src]]
echo "foo1, あいうえお, ほげ\n";  {{// ← 内部文字コードのまま出力される}}
echo "foo2, いろは\n";
**cb_safe_exit();**
echo 'ゴミ';                      {{// ← 出力されない}}
[[/src]]

[[クライアントサイド|head:client_side]]

ダウンロード処理はブラウザの仕様のバラつきのために、
残念ながらサーバーサイドだけでは完結しません。
Netscape では "''Content-Disposition''" ヘッダによる日本語ファイル名の指定ができないことが主な理由になります。

そのため、ファイル名の指定には現行製品同様 URL の一番最後にファイル名を付加する方式を併用する必要があります。
尚、その場合も"Content-Disposition" ヘッダによる指定が優先されるため、
IE などでは [[az:fw.core:include/fw/prepend.csp:cb_prepare_download]] 関数による指定が優先されます。
付加したファイル名をスクリプト名と区別するには、"''/-/''" で区切る必要があります。

実際には下記の例のように、URL生成関数の第四引数にてページ名の後ろにつく文字列を指定します。
** その際、ページ名に直接"/-/..."は絶対に指定しないでください。**
標準PHPとCybozu版のPHPを簡単に切り替える場合に備えて、常にURL生成関数で生成する必要があります。
 詳細に関しては[[doc:dev/api/url]]を参照してください。

[[src]]
<form>
<input type="button" value="ダウンロード"
       onclick="location.href='<?php echo cb_pageurl('**download**',
       array( ... ), null, '**ほげ.csv**'); ?>';">
</form>
<!-- cb_pageurl( 'download/-/ほげ.csv' ) は不正 -->
[[/src]]

尚、これまでのブラウザの挙動の調査から、
Netscape 6, 7 と IE5.5 では「ファイル名を UTF-8 エンコードし、
さらに URL エンコード」すれば問題ないことが判明しています。

**実際には、これらの処理はインタラクションライブラリ中の関数 [[ui:cb_ui_filename]] 等でフレームワーク中にてブラウザ依存がないように吸収します。**
アプリケーションプログラマはフレームワークにて提供される関数を使用してください。 

[[ユーティリティ|head:utility]]

サーバーサイドの処理に関しては、現在 2 種類のユーティリティが用意されている。

一つは、永続化レイヤーで保存したファイルのダウンロード処理を行うものである。
これは [[az:fw.persistent:CB_ServerFile]] の download メソッドで実装されており、
[[az:fw.core:include/fw/prepend.csp:cb_prepare_download]] の呼び出しを省ける。

[[src]]
class MyFile extends CB_ServerFile
{
    ...
}

$myfiles =& $table_manager->getTableInfo( 'MyFile' );
$server_file =& $myfiles->getRow( ((some_id)) );

$server_file->download();
cb_safe_exit();
[[/src]]

もう一つは CSV ファイルの書き出しを行うものである。
このクラスは国際化の設計に合わせて書き出しキャラクタを明示的に指定する API を提供している。
こちらは通常のファイルへの書き出しと兼用しているため、
[[az:fw.core:include/fw/prepend.csp:cb_prepare_download]] を呼び出す必要がある。

[[src]]
require_once( 'fw/csv.csp' );

cb_prepare_download( 'hoge.csv', 'application/octet-stream', FALSE );

{{// 書き出しキャラクタセットを指定する}}
$csv_writer = new CB_CSVWriter( 'SJIS' );
$csv_writer->writeLine( array('カラム1', 'カラム2', 'カラム3') );
$csv_writer->writeLine( array('その1', 'その2') );
$csv_writer->close();

cb_safe_exit();
[[/src]]

[[リファレンス|section:reference]]

*[[az:fw.persistent:CB_ServerFile]]（永続化レイヤーの提供するファイル保存クラス）
*[[az:fw.core:include/fw/session_manager.csp:cb_add_session_file]]（一時ファイルの追加）
*[[az:fw.core:include/fw/session_manager.csp:cb_get_session_file]]（一時ファイルオブジェクトの取得）
*[[az:fw.core:include/fw/session_manager.csp:cb_clean_session_files]]（古い一時ファイルの一括削除）

[[サンプル|section:sample]]

*単純なアップロード処理（[[developer/demo_upload.csp]]）（[[実行|run:developer/demo_upload]]） 
*単純なダウンロード処理（[[developer/demo_download.csp]]）（[[実行|run:developer/demo_download]]） 
*ファイルの保存とダウンロード（[[developer/demo_file_store.csp]]）（[[実行|run:developer/demo_file_store]]）

[[フレームワークソース|section:source]]

*[[include/fw/server_file.csp]]
*[[include/fw/session_manager.csp]]
*[[include/fw/csv.csp]]
