[[概要|section:abstraction]]
アゼリアに同梱されているPHP実行環境は、デフォルトではCGIとして動作します。
PHPをCGIではなく、Webサーバのモジュールとして組み込むことで、
起動ロスが減少し、スクリプトキャッシュや、DBコネクションプーリングの効果があらわれ、
速度パフォーマンスが上昇します。

PHPの組み込み化は、Apache、IIS等で実施することが出来ますが、
アゼリアでは現在LinuxのApache上でしか行うことができません。

次項より、LinuxのApacheで設定を行うための具体的な手順を説明していきます。

なお、Apacheの設定に関して、以下で挙げるものはあくまで一例に過ぎません。設定に関する詳細については、それぞれのマニュアルを参照するようにして下さい。

[[mod_php(Apache on Linux)|section:dividing_dbserver]]
1.Apacheのmodulesディレクトリに、アゼリアインストーラとは別配布のlibphp4_*.so(Apache1.xの場合はlibphp4_ap.so、Apache2.xの場合はlibphp4_ap2.so)をコピーします。

2.httpd.confにLoadModuleディレクティブとAddTypeディレクティブを追加します。

[[src]]
\#
\# Dynamic Shared Object (DSO) Support
\#
\# To be able to use the functionality of a module which was built as a DSO you
\# have to place corresponding `LoadModule' lines at this location so the
\# directives contained in it are actually available _before_ they are used.
\# Statically compiled modules (those listed by `httpd -l') do not need
\# to be loaded here.
\#
\# Example:
\# LoadModule foo_module modules/mod_foo.so
\#

[[/src]]

↓

[[src]]
\#
\# Dynamic Shared Object (DSO) Support
\#
\# To be able to use the functionality of a module which was built as a DSO you
\# have to place corresponding `LoadModule' lines at this location so the
\# directives contained in it are actually available _before_ they are used.
\# Statically compiled modules (those listed by `httpd -l') do not need
\# to be loaded here.
\#
\# Example:
\# LoadModule foo_module modules/mod_foo.so
\#
''LoadModule php4_module modules/libphp4_ap2.so''
''AddType application/x-httpd-php .php .csp''

[[/src]]

3.httpd.confの'/cgi-bin/'へのScriptAliasを無効にし、変わりに通常のAlias(Alias名は何でも可)を設定します。
[[src]]
\#
\# ScriptAlias: This controls which directories contain server scripts.
\# ScriptAliases are essentially the same as Aliases, except that
\# documents in the realname directory are treated as applications and
\# run by the server when requested rather than as documents sent to the client.
\# The same rules about trailing "/" apply to ScriptAlias directives as to
\# Alias.
\#
''ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"''

[[/src]]

↓

[[src]]
\#
\# ScriptAlias: This controls which directories contain server scripts.
\# ScriptAliases are essentially the same as Aliases, except that
\# documents in the realname directory are treated as applications and
\# run by the server when requested rather than as documents sent to the client.
\# The same rules about trailing "/" apply to ScriptAlias directives as to
\# Alias.
\#
''\#ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"''
''Alias /cgi-bin/ "/var/www/cgi-bin/"''

[[/src]]

4.
[[html]]
<a href="dev_doc?item=ext%2Fdeployment#structure">common.ini</a>
[[/html]]
のphp種別を変更します。
[[src]]
[Global]
version = "2.0.0"
data_dir = "/usr/local/cybozu/mysql-4.1"
app_name = "cbfw"
''php = "cybozu"''
debug = "1"
app_path = "/cbfw"
required_diskspace = "20"
initialized = "1"

[[/src]]

↓

[[src]]
[Global]
version = "2.0.0"
data_dir = "/usr/local/cybozu/mysql-4.1"
app_name = "cbfw"
''php = "standard"''
debug = "1"
app_path = "/cbfw"
required_diskspace = "20"
initialized = "1"

[[/src]]

5.と6.は、PHP_Acceleratorを有効にするための設定です。必要な場合は行って下さい。

5.アゼリアのプログラムディレクトリ以下の
[[html]]
<a href="dev_doc?item=ext%2Fdeployment#structure">extensions</a>
[[/html]]
ディレクトリに、アゼリアインストーラとは別配布のphp_accelerator_x.soをコピーします。

6.php.iniのzend_extension項目を変更します。この際、ioncube_loaderを使用する場合(ソースがエンコードされている場合)は、''ioncube_loaderの設定を先に書く''ように注意して下さい。
[[src]]
[ionCube]
; ionCube Encoder MUST be added before Zend Optimizer
zend_extension = /var/www/cgi-bin/cbfw/extensions/ioncube_loader.so

[[/src]]

↓

[[src]]
; ionCube Encoder MUST be added before Zend Optimizer
zend_extension = /var/www/cgi-bin/cbfw/extensions/ioncube_loader.so
''zend_extension = /var/www/cgi-bin/cbfw/extensions/php_accelerator_1.3.3r2.so''
[[/src]]

7.httpd.confを有効にするため、''必ずApacheを再起動''して下さい。

[[接続プーリング|section:persistent_connection]]
組み込みPHPでの運用を行う際には、HTTPリクエストの度に新しいデータベースへの接続を作成するのではなく、
複数のリクエストでデータベース接続を使いまわすことで、パフォーマンスを向上させることができます。

アゼリアでも以下の設定を行うことで、永続的なデータベース接続（Persistent Connection）を
使用することができます。

1.[[lwc.ini|doc:dev/base/lwc]]の[dbconn_audit]と[dbconn]セクションを変更する。
[[src]]
[dbconn_audit]
class                   = ''CB_DatabaseConnection''
require                 = fw/database.csp
prop:_host              = val:localhost
prop:_dbname            = val:cbfw
;; isolation level can be one of `READ-UNCOMMITTED', `READ-COMMITTED',
;; `REPEATABLE-READ', or `SERIALIZABLE'.
prop:_isolation		= val:READ-COMMITTED
;; uncomment the follwoing line to log SQL.
;prop:_logfile          = val:C:/cygwin/home/Administrator/cgi-bin/cbfw/query_audit.log

[dbconn]
class                   = ''CB_DatabaseConnection''
require                 = fw/database.csp
prop:_host              = val:localhost
prop:_dbname            = val:cbfw
;; isolation level can be one of `READ-UNCOMMITTED', `READ-COMMITTED',
;; `REPEATABLE-READ', or `SERIALIZABLE'.
prop:_isolation		= val:READ-COMMITTED
;; uncomment the follwoing line to log SQL.
;prop:_logfile          = val:C:/cygwin/home/Administrator/cgi-bin/cbfw/query.log
[[/src]]

↓

[[src]]
[dbconn_audit]
class                   = ''CB_PersistentDatabaseConnection''
require                 = fw/database.csp
prop:_host              = val:localhost
prop:_dbname            = val:cbfw
;; isolation level can be one of `READ-UNCOMMITTED', `READ-COMMITTED',
;; `REPEATABLE-READ', or `SERIALIZABLE'.
prop:_isolation		= val:READ-COMMITTED
;; uncomment the follwoing line to log SQL.
;prop:_logfile          = val:C:/cygwin/home/Administrator/cgi-bin/cbfw/query_audit.log

[dbconn]
class                   = ''CB_PersistentDatabaseConnection''
require                 = fw/database.csp
prop:_host              = val:localhost
prop:_dbname            = val:cbfw
;; isolation level can be one of `READ-UNCOMMITTED', `READ-COMMITTED',
;; `REPEATABLE-READ', or `SERIALIZABLE'.
prop:_isolation		= val:READ-COMMITTED
;; uncomment the follwoing line to log SQL.
;prop:_logfile          = val:C:/cygwin/home/Administrator/cgi-bin/cbfw/query.log
[[/src]]

以上の設定を行う事で、データベースとの接続に永続的な接続が使用されるようになります。

**※この設定は組み込みPHP運用以外では使用しないで下さい。**
