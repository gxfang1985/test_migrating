[[概要(フルバックアップ、差分バックアップ、レプリケーション)|section:abstract]]

一般的にデータベースをバックアップする手法として、

''フルバックアップ''

''差分バックアップ''

''レプリケーションを用いたバックアップ''

の3つが存在します。

''フルバックアップ''は、文字通りデータベースの全体のコピーを取得して、
状態を復元できるようにしておく方法です。フルバックアップには、
システムを停止させた状態で行う''オフラインバックアップ''（別名、コールドバックアップ）と、
システムを稼動させた状態で行う''オンラインバックアップ''（別名、ホットバックアップ）があります。

''差分バックアップ''は、フルバックアップと組み合わせて使われる方法で、
前回のフルバックアップ時点から、次回のフルバックアップまでの
データベースへの更新要求をログとして保管しておく方法です。
サーバに障害が発生し復元が不可能となった場合には、
全体/部分バックアップデータに順次、ログを適用していくことで、
障害発生直前の状態までデータを復元することが可能となります。

[[img:developer/backup1.gif]]

''レプリケーションを用いたバックアップ''は、前述の2つとは全く異なった方法であり、
2台のデータベースサーバを連携し、運用することで、バックアップを実現する方法です。
データベースが更新される際、まず''マスター''と呼ばれるデータベースサーバが更新要求を受け取り、
自らのデータを更新します。マスターは、自らのデータを更新するとともに''スレーブ''と呼ばれる
データベースサーバに更新要求を伝え、スレーブは、同じように自らのデータを更新します。
通常、アプリケーションはマスターのデータのみを参照しますが、マスターのサーバに障害が発生し
復元が不可能となった場合には、スレーブをマスターとして使用することにより復旧することが出来ます。

また、運用中、スレーブ側のデータベースのみをオフラインにしてバックアップ作業を行うことで（バックアップ作業間の更新情報はマスターのログに貯められ、作業終了後まとめてスレーブのデータベースに反映される）、簡単に（システム全体としては）オンラインなバックアップを実現することが出来ます。

[[img:developer/backup2.gif]]

[[MySQLのバックアップ|section:mysql]]
MySQLは主に以下の方法でデータのバックアップをとっておくことが出来ます。

[[1.ファイルコピーによるフルバックアップ|head:]]
MySQLのデータファイルをコピーすることで、バックアップを行います。
''オフライン''で行う必要があります。
''データベース空間ごとのバックアップ''は現実的には''不可能''です。

[[2.mysqldumpコマンドによるフルバックアップ|head:]]
mysqldumpコマンドを使用し、データをSQLとしてエクスポートすることで、バックアップを行います。
''オフライン''で行う必要があります。
''データベース空間ごとのバックアップ''が''可能''です。

[[3.「InnoDB Hot Backup」を用いたフルバックアップ|head:]]
別売の「InnoDB Hot Backup」ツールを用い、データをデータファイルとしてエクスポートすることで、
バックアップを行います。
''オンライン''でのバックアップが可能です。
''データベース空間ごとのバックアップ''は、
''複数テーブルスペース設定''で運用されているという''条件付で可能''です。

[[4.バイナリログによる差分バックアップ|head:]]
MySQLでは、更新が起こった際、更新情報をバイナリログとして出力するよう、設定することが出来ます。
これを保管しておくことで、差分バックアップを実現します。
バイナリログを全体バックアップデータに適用することで、
''障害発生直前までデータを復元することができます。''
バイナリログを''データベース空間ごとに分けて管理することは出来ません。''

[[5.レプリケーションを用いたバックアップ|head:]]
MySQLはレプリケーションを行うことができます。レプリケーションを利用すると、
''障害発生直前までデータを復元することができます。''
また、スレーブをオフラインバックアップすることで、
全体としては''オンライン''なバックアップが可能です。

[[html]]
<table class="cb_doc_table">
<tr>
<th>
</th>
<th>
オンライン
</th>
<th>
障害発生直前まで復元
</th>
<th>
データベース空間ごとのバックアップ
</th>
</tr>
<tr>
<th>
ファイルコピー
</th>
<td>
×
</td>
<td>
×
</td>
<td>
×
</td>
</tr>
<tr>
<th>
mysqldump
</th>
<td>
×
</td>
<td>
×
</td>
<td>
○
</td>
</tr>
<tr>
<th>
InnoDB Hot Backup
</th>
<td>
○
</td>
<td>
×
</td>
<td>
×
</td>
</tr>
<tr>
<th>
※1 バイナリログ
</th>
<td>
※2 -
</td>
<td>
○
</td>
<td>
※3 ×
</td>
</tr>
<tr>
<th>
※4 レプリケーション
</th>
<td>
○
</td>
<td>
○
</td>
<td>
※5 -
</td>
</tr>
</table>
[[/html]]

※1 この機能を使うためには、バイナリログ設定で運用されている必要があります。
全体バックアップと組み合わせて使用する必要があるため、
''ファイルコピー''、''mysqldump''、''InnoDB Hot Backup''のいずれかと組み合わせて使用します。

※2 全体バックアップ方法との組み合わせに依存します。
''InnoDB Hot Backup''と組み合わせた場合、○となります。

※3 バイナリログはデータベース空間ごとに管理することが出来ないため、
全体バックアップと組み合わせることが必須となります。

※4 この機能を使うためには、レプリケーション設定で運用されている必要があります。
スレーブをバックアップする際に、''ファイルコピー''、''mysqldump''、''InnoDB Hot Backup''
のいずれかの方法を使用します。

※5 スレーブのバックアップ方法との組み合わせに依存します。
''mysqldump''と組み合わせた場合、○となります。

[[※データベース空間ごとのバックアップ|head:]]
同じマシンにアゼリアをベースとした製品が複数存在する場合、
MySQLサーバを複数の製品で共有する場合があります。
この場合、''1つのMySQLサーバに製品ごとのデータベース空間が作成される''ことになります。
製品ごとのバックアップを実現する必要がある場合は、
''データベース空間ごとのバックアップが可能な方法かどうかを検討''した上で、
バックアップ計画（バックアップツール）を作成するようにして下さい。

[[MySQLのデータディレクトリ|section:filetree]]
アゼリアで使用されるMySQLには、
MyISAMテーブルで構成されるMySQLのシステムデータベースである''mysql''データベースと、
InnoDBテーブルで構成され、フレームワークで使用される、
''cb_インストールプレフィックス名''データベースが存在します。
''mysql''データベースはMySQLサーバにつき唯一ですが、フレームワークデータベースは、
インストールされたフレームワーク（製品）の数だけ、別名で存在します。

MySQLのデータディレクトリ（例:/usr/local/cybozu/mysql-4.1/data）は、
デフォルトでは以下のような構造になっています。
(設定ファイルの変更により、カスタマイズ可能です。)

[[src]]
data ---- ''ib_logfile[0-2]'' InnoDBログファイル
       |
       |- ''ibdata1'' InnoDBデータファイル
       |
       |- ''mysql'' 'mysql'データベースディレクトリ
　　　 |     |
       |     |- ''*.frm'' テーブルファイル（InnoDB/MyISAM共通）
       |     |
       |     |- ''*.MYI'' MyISAMインデックスファイル
       |     |
       |     -- ''*.MYD'' MyISAMデータファイル
       |
       |- ''cb_インストールプレフィックス名'' フレームワークデータベースディレクトリ
       |     |
       |     |- ''*.frm'' テーブルファイル（InnoDB/MyISAM共通）
       |     |
       |     -- ''db.opt'' InnoDBデータベースオプションファイル
       |
       ...
[[/src]]

[[MySQLをオフラインにする方法|section:offline]]
MySQLが起動しているが、データベースへのリクエストが遮断されている状態を
''オフライン''な状態であると定義することとします。
バックアップ・リストアを行う際、多くの場合で、データベースがオフラインの状態である必要がありますが、
Oracle等と違い、MySQLには簡単にデータベースをオフラインにする方法が存在しません。
このため、オフラインな状態の実現は、アプリケーション側で実現する方法があります。

全てのデータベースをオフラインな状態にするための最も簡単な方法はWebサーバを停止することですが、
ある製品についてのみバックアップ・リストア作業を行いたい場合や、
何らかの理由でWebサーバが停止できない状態にある場合は、
アプリケーションごとにリクエストを遮断する方法を実現する必要があります。

[[バックアップを実施するユーザについて|section:backup_user]]
Unix系OSでバックアップを実施する際、よく問題を引き起こすのがファイルパーミッションです。
アゼリアでは、CGIプロセスがMySQLプログラムディレクトリにファイルを置く必要があるため、
MySQLプログラムディレクトリの所有者は、CGIプロセスの実行ユーザ、
すなわちWebサーバの実行ユーザと同一になるようインストールされます。
（Webサーバの実行ユーザをインストールスクリプトの実行時に指定することと思います。）

MySQLのバックアップは、可能な限り、このユーザ（MySQLプログラムディレクトリの所有者）で
実施するか、そうでなければ、起動時にMySQLプログラムディレクトリ以下のリソースを全て
Webサーバの実行ユーザに変更するようにして下さい。
所有者が異なると、MySQLサーバの異常動作を招く原因となります。

次項よりバックアップの具体的な手順について解説していきます。

[[ファイルコピーによるバックアップ|section:filecopy]]
[[フルバックアップ|head:]]
1.MySQLを停止する
[[src]]
> su
> /etc/init.d/cyde_4_1 stop
[[/src]]

2.ユーザを変更する
[[src]]
> su apache
[[/src]]

3.ファイルをコピーする

InnoDBログファイル、InnoDBデータファイル、全てのデータベースディレクトリをバックアップにコピーする。
[[src]]
> mkdir -p /home/apache/my-backup/11-22-20-00
> cp /usr/local/cybozu/mysql-4.1/data/ib_logfile* /home/apache/my-backup/11-22-20-00/
> cp /usr/local/cybozu/mysql-4.1/data/ibdata1 /home/apache/my-backup/11-22-20-00/
> cp -r /usr/local/cybozu/mysql-4.1/data/mysql /home/apache/my-backup/11-22-20-00/
> cp -r /usr/local/cybozu/mysql-4.1/data/cb_* /home/apache/my-backup/11-22-20-00/
[[/src]]

4.MySQLを起動する
[[src]]
> su
> /etc/init.d/cyde_4_1 start
[[/src]]

[[フルバックアップデータからのリストア|head:]]
1.MySQLを停止する
[[src]]
> su
> /etc/init.d/cyde_4_1 stop
[[/src]]

2.ユーザを変更する
[[src]]
> su apache
[[/src]]

3.ファイルをコピーする

InnoDBログファイル、InnoDBデータファイル、全てのデータベースディレクトリをデータディレクトリにコピーする。
[[src]]
> rm /usr/local/cybozu/mysql-4.1/data/ib_logfile*
> rm /usr/local/cybozu/mysql-4.1/data/ibdata1
> rm -fr /usr/local/cybozu/mysql-4.1/data/mysql
> rm -fr /usr/local/cybozu/mysql-4.1/data/cb_*
> cp /home/apache/my-backup/11-22-20-00/ib_logfile* /usr/local/cybozu/mysql-4.1/data/
> cp /home/apache/my-backup/11-22-20-00/ibdata1 /usr/local/cybozu/mysql-4.1/data/
> cp -r /home/apache/my-backup/11-22-20-00/mysql /usr/local/cybozu/mysql-4.1/data/
> cp -r /home/apache/my-backup/11-22-20-00/cb_* /usr/local/cybozu/mysql-4.1/data/
[[/src]]

4.MySQLを起動する
[[src]]
> su
> /etc/init.d/cyde_4_1 start
[[/src]]

[[mysqldumpコマンドによるバックアップ|section:mysqldump]]
[[フルバックアップ|head:]]
1.全データベースを[[オフライン|doc:operation/backup#offline]]にする

2.ユーザを変更する
[[src]]
> su apache
[[/src]]

3.mysqldumpコマンドを発行する

''--all-databases''オプションにより、全てのデータベースを指定する。
また、''--lock-tables''オプションにより、ダンプ直前に全てのテーブルをロックする。
データベースユーザにはcbrootユーザを指定する。
[[src]]
> mkdir -p /home/apache/my-backup/11-22-20-00
> /usr/local/cybozu/mysql-4.1/bin/mysqldump \
--defaults-file=/usr/local/cybozu/mysql-4.1/etc/my.ini \
--all-databases --lock-tables \
-u cbroot -p > /home/apache/my-backup/11-22-20-00/full.sql
[[/src]]

4.データベースをオンラインにする

[[データベース空間ごとのバックアップ|head:]]
1.バックアップ対象のデータベースを[[オフライン|doc:operation/backup#offline]]にする

2.ユーザを変更する
[[src]]
> su apache
[[/src]]

3.mysqldumpコマンドを発行する

''--databases (データベース名)''オプションにより目的のデータベースを指定する。
また、''--lock-tables''オプションにより、ダンプ直前に全てのテーブルをロックする。
データベースユーザにはcbrootユーザを指定する。
[[src]]
> mkdir -p /home/apache/my-backup/11-22-20-00
> /usr/local/cybozu/mysql-4.1/bin/mysqldump \
--defaults-file=/usr/local/cybozu/mysql-4.1/etc/my.ini \
--databases cb_cbfw --lock-tables \
-u cbroot -p > /home/apache/my-backup/11-22-20-00/cb_cbfw.sql
[[/src]]

4.データベースをオンラインにする

[[フルバックアップデータからのリストア|head:]]
1.全データベースを[[オフライン|doc:operation/backup#offline]]にする

2.ユーザを変更する
[[src]]
> su apache
[[/src]]

3.mysqlコマンドを発行する

バックアップ時に作成されたSQLファイルを実行する。
データベースユーザにはcbrootユーザを指定する。
[[src]]
> /usr/local/cybozu/mysql-4.1/bin/mysql \
--defaults-file=/usr/local/cybozu/mysql-4.1/etc/my.ini \
-u cbroot -p < /home/apache/my-backup/11-22-20-00/full.sql
[[/src]]

4.データベースをオンラインにする

[[データベース空間ごとのリストア|head:]]
1.リストア対象のデータベースを[[オフライン|doc:operation/backup#offline]]にする

2.ユーザを変更する
[[src]]
> su apache
[[/src]]

3.mysqlコマンドを発行する

バックアップ時に作成されたSQLファイルを実行する。
[[src]]
> /usr/local/cybozu/mysql-4.1/bin/mysql \
--defaults-file=/usr/local/cybozu/mysql-4.1/etc/my.ini \
-u cbroot -p < /home/apache/my-backup/11-22-20-00/cb_cbfw.sql
[[/src]]

4.データベースをオンラインにする

[[「InnoDB Hot Backup」を用いたバックアップ|section:ibbackup]]
[[ibbackupコマンド|head:]]
「InnoDB Hot Backup」付属のibbackupコマンドを使用して、バックアップを実現します。

[[テーブル編集の禁止|head:]]
ibbackupコマンドを使用し、データベースを起動したまま、データベースをロックすることなく、
バックアップを取得することができますが、
バックアップ中にテーブルの作成・削除が行われると、データの整合性がとれなくなる場合があります。
バックアップ中にテーブルの作成・削除が行われる可能性がある場合は、
ユーザのテーブルの作成・削除を禁止したうえで、バックアップ作業を行うようにして下さい。
禁止の対象となるユーザは、データベースと同名のユーザ（例:cb_cbfw）です。

ユーザのテーブルの作成・削除を禁止するためには、cbrootユーザでサーバに接続し、プロンプトから以下のSQLを実行します。
[[src]]
mysql> REVOKE CREATE, DROP, ALTER, CREATE TEMPORARY TABLES ON cb_cbfw.* FROM cb_cbfw;
Query OK, 0 rows affected (0.00 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)
[[/src]]

バックアップ後は''必ず''禁止を解除して下さい。
[[src]]
mysql> GRANT ALL ON cb_cbfw.* TO cb_cbfw;
Query OK, 0 rows affected (0.00 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)
[[/src]]

[[フルバックアップ|head:]]
1.テーブルの作成・削除を禁止する

2.ユーザを変更する
[[src]]
> su apache
[[/src]]

3.バックアップ用のディレクトリを作成する
[[src]]
> mkdir -p /home/apache/my-backup/11-22-20-00
[[/src]]

4.バックアップ用の設定ファイルを作成する

-[[my.ini|doc:ext/deployment#structure]]ファイルを1.で作成したディレクトリ以下にコピー
[[src]]
> cd /home/apache/my-backup/11-22-20-00
> cp /usr/local/cybozu/mysql-4.1/etc/my.ini .
[[/src]]

-コピーしたmy.iniファイル中のデータディレクトリのパスが設定されている部分を、全てバックアップディレクトリのパスに置き換える。
[[src]]
> sed 's/\/usr\/local\/cybozu\/mysql-4.1\/data/\/var\/mysql\/backup\/11-22-20-00/g' \
my.ini > my-backup.ini
> mv mybackup.ini my.ini
[[/src]]

5.ibbackupコマンドを実行する

第一引数はコピー元my.iniのファイルパス、
第二引数は作成したバックアップ用my.iniのファイルパス。
[[src]]
> /usr/local/bin/ibbackup \
/usr/local/cybozu/mysql-4.1/etc/my.ini /home/apache/my-backup/11-22-20-00/my.ini
[[/src]]

バックアップディレクトリは以下のようなファイル構成となる。
[[src]]
> ls /home/apache/my-backup/11-22-20-00
''ibbackup_logfile'' ''ibdata1'' ''my.ini'' 
[[/src]]

6.フレームワークのデータベースディレクトリをバックアップにコピーする
[[src]]
> cp -r /usr/local/cybozu/mysql-4.1/data/cb_* /home/apache/my-backup/11-22-20-00/
[[/src]]

7.テーブルの作成・削除の禁止を解除する

8.'mysql'データベースディレクトリをバックアップにコピーする
[[src]]
> cp -r /usr/local/cybozu/mysql-4.1/data/mysql /home/apache/my-backup/11-22-20-00/
[[/src]]
※'mysql'データベースには、テーブルへのアクセス権が記録されるため、6.を行った後に'mysql'データベースをバックアップしています。

[[フルバックアップデータからのリストア|head:]]
1.ユーザを変更する
[[src]]
> su apache
[[/src]]

2.ibbackup --apply-logを実行する

第一引数はバックアップ用my.iniのファイルパス。
''--apply-log''オプションで、ログを運用可能な状態にする。
[[src]]
> /usr/local/bin/ibbackup --apply-log /home/apache/my-backup/11-22-20-00/my.ini
[[/src]]

バックアップディレクトリは以下のようなファイル構成となる。
[[src]]
> ls /home/apache/my-backup/11-22-20-00
''cb_cbfw''      ''ib_logfile1''  ''ibbackup_logfile''  ''mysql'' 
''ib_logfile0''  ''ib_logfile2''  ''ibdata1''           ''my.ini''
[[/src]]

3.MySQLを停止する
[[src]]
> su
> /etc/init.d/cyde_4_1 stop
...
> su apache
[[/src]]

4.ファイルをコピーする

InnoDBログファイル、InnoDBデータファイル、全てのデータベースディレクトリをデータディレクトリにコピーする。
[[src]]
> rm /usr/local/cybozu/mysql-4.1/data/ib_logfile*
> rm /usr/local/cybozu/mysql-4.1/data/ibdata1
> rm -fr /usr/local/cybozu/mysql-4.1/data/mysql
> rm -fr /usr/local/cybozu/mysql-4.1/data/cb_*
> cp /home/apache/my-backup/11-22-20-00/ib_logfile* /usr/local/cybozu/mysql-4.1/data/
> cp /home/apache/my-backup/11-22-20-00/ibdata1 /usr/local/cybozu/mysql-4.1/data/
> cp -r /home/apache/my-backup/11-22-20-00/mysql /usr/local/cybozu/mysql-4.1/data/
> cp -r /home/apache/my-backup/11-22-20-00/cb_* /usr/local/cybozu/mysql-4.1/data/
[[/src]]

5.MySQLを起動する
[[src]]
> su
> /etc/init.d/cyde_4_1 start
[[/src]]

[[バイナリログによる差分バックアップ|section:binlog]]
[[mysqlbinlogコマンド|head:]]
バイナリログを解析する際に、MySQL付属のmysqlbinlogを使う必要があります。
mysqlbinlogはアゼリアのパッケージからは除外されていますので、
使う必要がある際にはフレームワークプロジェクトまでご相談下さい。

[[バイナリログ設定での起動|head:]]
1.ユーザを変更する
[[src]]
> su apache
[[/src]]

2.[[my.ini|doc:ext/deployment#structure]]を編集する

バイナリログ設定で起動するために''log-bin = （ログファイルのパスプレフィクス）''を指定する。
[[src]]
\## We don't do log-bin.
''#log-bin''
[[/src]]

↓

[[src]]
\## We don't do log-bin.
''log-bin = /usr/local/cybozu/mysql-4.1/binlog/log''
[[/src]]

3.ログの格納ディレクトリを作成する
[[src]]
> mkdir /usr/local/cybozu/mysql-4.1/binlog
[[/src]]

4.MySQLを再起動する
[[src]]
> su
> /etc/init.d/cyde_4_1 restart
[[/src]]

指定したディレクトリにバイナリログが格納されている。
[[src]]
> ls /usr/local/cybozu/mysql-4.1/binlog
log.000001  log.index
[[/src]]

[[ログのローテート|head:]]
バイナリログは更新量に応じてファイルサイズが肥大していくので、適宜ローテートを行う必要があります。
MySQLではログのローテートを自動で行う機能が備わっていないため、以下の方法を参考にして、
cron等で定期的にローテートを行う必要があります。

1.ユーザを変更する
[[src]]
> su apache
[[/src]]

2.ローテートを実施する

mysqladmin flush-logを実行する。
データベースユーザにはcbrootユーザを指定する。
[[src]]
> /usr/local/cybozu/mysql-4.1/bin/mysqladmin \
--defaults-file=/usr/local/cybozu/mysql-4.1/etc/my.ini \
-u cbroot -p flush-log
[[/src]]

3.ログが切り替わったことを確認し、旧ログをバックアップする
[[src]]
> ls /usr/local/cybozu/mysql-4.1/binlog
log.000001  log.000002  log.index
> cp /usr/local/cybozu/mysql-4.1/binlog/log.000001 /home/apache/my-backup/logs/
[[/src]]

4.旧ログを削除する
[[src]]
> rm /usr/local/cybozu/mysql-4.1/binlog/log.000001
[[/src]]

[[差分の適用|head:]]
差分の適用は、フルバックアップデータからのリストアが終了した状態から始めます。
リストアの終了後、データベースをオフラインの状態にしておきます。

1.ユーザを変更する
[[src]]
> su apache
[[/src]]

2.未反映のログの開始位置を探す（「InnoDB Hot Backup」を使用してバックアップ/リストアを行った場合）

データベース起動時のエラーログを開き、未反映のログの開始位置を探す。
[[src]]
> cat /usr/local/cybozu/mysql-4.1/data/error.log
InnoDB: Restoring possible half-written data pages from the doublewrite
InnoDB: buffer...
041130 22:18:34  InnoDB: Starting log scan based on checkpoint at
InnoDB: log sequence number 0 44044.
InnoDB: Doing recovery: scanned up to log sequence number 0 44044
''InnoDB: Last MySQL binlog file position 0 79, file name /usr/local/cybozu/mysql-
4.1/binlog/log.000002''
041130 22:18:34  InnoDB: Flushing modified pages from the buffer pool...
041130 22:18:34  InnoDB: Started; log sequence number 0 44044
/usr/local/cybozu/mysql-4.1/bin/mysqld: ready for connections.
Version: '4.1.7-log'  socket: '/usr/local/cybozu/mysql-4.1/data/mysql.sock'  por
t: 3770  Source distribution
[[/src]]
上の例の場合では、'log.000002'の'79'が開始位置となる。

3.フルバックアップ時点からのログを連結し、SQLファイルにする

mysqlbinlogを実行し、連結された1つのSQLファイルを作成する。
[[src]]
> cd /home/apache/my-backup/logs
> ls
log.000001  log.000002  log.000003
> /usr/local/bin/mysqlbinlog \
log.000001 log.000002 log.000003 > log.sql
[[/src]]

1.で開始位置が分かっている場合は、offsetを指定し、それ以降のログのみをSQLに出力する。
[[src]]
> /usr/local/bin/mysqlbinlog --start-position=79 log.000002 log.000003 > log.sql
[[/src]]

4.mysqlコマンドを発行する

作成されたSQLファイルを実行する。
データベースユーザにはcbrootユーザを指定する。
[[src]]
> /usr/local/cybozu/mysql-4.1/bin/mysql \
--defaults-file=/usr/local/cybozu/mysql/etc/my.ini \
-u cbroot -p < /home/apache/my-backup/logs/log.sql
[[/src]]

5.データベースをオンラインにする

[[レプリケーションを用いたバックアップ|section:replication]]
レプリケーションを行うためには、製品のインストールされたサーバ（マスター）とは別に、
もう一台アゼリア・MySQLのインストールされたサーバ（スレーブ）が必要です。
スレーブはマスターが出力する[[バイナリログ|doc:operation/backup#binlog]]を順次読み込み、
マスターで起こった更新を自らにも反映させることで、
マスターのデータベースをロックすることなく同期をとることができます。

[[レプリケーション設定|head:]]
1.マスター・スレーブ両方のMySQLを停止する。

2.マスターのフルバックアップデータをスレーブにコピーする

マスター側
[[src]]
> su apache
> mkdir data
> cp /usr/local/cybozu/mysql-4.1/data/ib_logfile* data/
> cp /usr/local/cybozu/mysql-4.1/data/ibdata* data/
> cp -r /usr/local/cybozu/mysql-4.1/data/mysql data/
> cp -r /usr/local/cybozu/mysql-4.1/data/cb_* data/
> gtar -zcf master_data.tar.gz data
...
[[/src]]

スレーブ側
[[src]]
...
> su apache
> cd /usr/local/cybozu/mysql-4.1
> rm -fr data
> gtar -zxf master_data.tar.gz
> rm master_data.tar.gz
[[/src]]

3.マスターを[[バイナリログ設定|doc:operation/backup#binlog]]にする

4.マスターのMySQLにserver-idを設定する

[[my.ini|doc:ext/deployment#structure]]を以下のように編集する
[[src]]
\## We don't do log-bin.
log-bin = /usr/local/cybozu/mysql-4.1/binlog/log
[[/src]]

↓

[[src]]
\## We don't do log-bin.
log-bin = /usr/local/cybozu/mysql-4.1/binlog/log
''server-id = 1''
[[/src]]

5.スレーブのMySQLにserver-idを設定する

[[my.ini|doc:ext/deployment#structure]]を以下のように編集する
[[src]]
\## We don't do log-bin.
\#log-bin
[[/src]]

↓

[[src]]
\## We don't do log-bin.
\#log-bin
''server-id = 2''
[[/src]]

6.マスターとスレーブのMySQLを[[オフライン|doc:operation/backup#offline]]の状態で起動する

7.スレーブのMySQLに接続し、レプリケーションを開始させる

cbrootユーザでスレーブサーバに接続し、プロンプトからCHANGE MASTER TO文を発行する。
''MASTER_HOST='（ホスト名）'''で接続先マスターのホスト名を、
''MASTER_PORT=（ポート番号）''で接続先マスターのポート番号を、
''MASTER_USER='（ユーザ名）'''でスレーブ接続用のユーザを、
''MASTER_PASSWORD='（パスワード）'''でスレーブ接続用ユーザのパスワードを指定する。
[[src]]
mysql> CHANGE MASTER TO
    ->     MASTER_HOST='piano.corp.cybozu.co.jp',
    ->     MASTER_PORT=3770,
    ->     MASTER_USER='cbslave',
    ->     MASTER_PASSWORD='bozuman1997';
[[/src]]
なおスレーブ接続用ユーザについては、[[こちら|doc:operation/mysqlclient#mysql_user]]を参照のこと。

次に、同じプロンプトよりSTART SLAVE文を発行し、レプリケーションを開始する
[[src]]
mysql> START SLAVE;
[[/src]]

レプリケーションが開始されるとデータディレクトリに、
master.info、relay-log.info、リレーログが作成される。
[[src]]
> ls /usr/local/cybozu/mysql-4.1/data
... master.info relay-log.info slave-relay-bin.000001 slave-relay-bin.index ...  
[[/src]]

8.マスターの（必要があればスレーブも）MySQLをオンラインにする

[[レプリケーションの解除|head:]]
スレーブのMySQLが再起動された際、
データディレクトリにmaster.info、relay-log.info、リレーログが作成されていると、
自動的にレプリケーションを開始します。レプリケーションを解除する際は、

1.スレーブのMySQLを停止する

2.master.info、relay-log.info、リレーログを削除する

を行ってください。

レプリケーションを再び開始したい場合は、
「レプリケーション設定」の項目をやり直すようにして下さい。

[[バイナリログのローテート|head:]]
ログのローテート自体はレプリケーション中に行っても問題ありませんが、
スレーブはマスターのバイナリログが正しい位置にないと、実行することができません。
マスターのバイナリログを移動させる場合は、スレーブがそのログのデータを反映し終わるまで待つ必要があります。

1.[[バイナリログによる差分バックアップ|doc:operation/backup#binlog]]の「ログのローテート項」の1.と2.を実施する

2.スレーブが旧ログのデータを反映し終わるまで待機する

cbrootユーザでスレーブサーバに接続し、プロンプトからSELECT MASTER_POS_WAIT()文を発行する。
第一引数に''ローテートにより切り替わったログファイル名''を、第二引数に''0''を指定する。

[[src]]
mysql> SELECT MASTER_POS_WAIT('log.000002',0);
[[/src]]

3.旧ログを削除する
[[src]]
> rm /usr/local/cybozu/mysql-4.1/binlog/log.000001
[[/src]]

[[バックアップ|head:]]
スレーブに対してバックアップ作業を行うことで、完全なオンラインバックアップとなります。
mysqldumpを使用すれば、データベースごとのバックアップも可能です。

mysqldumpコマンドの使い方については
[[mysqldumpコマンドによるバックアップ|doc:operation/backup#mysqldump]]
を参照下さい。

1.スレーブを一時停止する

cbrootユーザでスレーブサーバに接続し、プロンプトからSTOP SLAVE文を発行する。
[[src]]
mysql> STOP SLAVE;
[[/src]]

2.mysqldumpコマンドを用いてバックアップを行う

3.スレーブを再開する

cbrootユーザでスレーブサーバに接続し、プロンプトからSTART SLAVE文を発行する。
[[src]]
mysql> START SLAVE;
[[/src]]

[[リストア|head:]]
mysqldumpコマンドによって取得されたバックアップからリストアする方法については、
[[mysqldumpコマンドによるバックアップ|doc:operation/backup#mysqldump]]
を参照下さい。

また、レプリケーションを再び開始したい場合は、
「レプリケーション設定」の項目をやり直すようにして下さい。
