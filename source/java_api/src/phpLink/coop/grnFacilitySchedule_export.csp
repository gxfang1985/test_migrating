<?php
global $G_INPUT;
//20061120修正
//coopファイルが存在しないとFatal Erorrになるためファイル存在チェック
//$nextpage = basename($G_INPUT['page']);
$nextpage = "coopLogin.csp";
if (is_file(cb_basedir() . '/code/doc_root/' . dirname(cb_get_pagename()) . '/'
            . $nextpage)
) {
    //20061120修正
    //require( $nextpage );
} else {
    //コピーライトとHTML閉じタグ出力しない
    global $G_state_set;
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);

    //   2007/03/27 coopLogin.cspがない場合のエラーメッセージ修正 不具合管理(199)
    include_once('error_code.csp');
    header("X-Cybozu-Error:" . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Header Data><CR><LF>");
    print("1," . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Footer Data><CR><LF>");
    print("ERROR<CR><LF>");
    cb_safe_exit();
}

//ログイン認証
require('coopLogin.csp');
/////////////////////////////////////////////////////////////////////////////////////////

//---------------------------------------------
//  アプリケーションの使用/停止状態をチェック
//---------------------------------------------
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
if ( ! ($G_application =& $locator->getInstance($G_INPUT['manage']))) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_APPLICATION_NOT_ACTIVE);
}
unset($locator);

//------------------------
//  パラメータのチェック
//------------------------
// 書き出す予定期間
$timestampex = new CB_TimeStampEx();
$current_date = $timestampex->getDate();
$date = new CB_Date();

if ($G_INPUT['start_year'] != "")                            // 書き出す予定開始日
{
    //start 2008/01/17 
    //$start_year = max(0, min($G_INPUT['start_year'], $current_date->year) - 2);  
    //$date->parse( $start_year."-1-1");
    //if ( !cb_date_validate_date($date) )
    //{
    //    cb_throw_error( E_COMMON_INVALID_DATE );
    //}

    /*
     * 1970/01/01 ～2037/12/31まで範囲指定可能
     * しかし、1970/01/01で実行した場合に異常終了する為、
     * タイムカードと同様に、1970/01/02を省くチェックに変更する。
    */
    $date->year = intval($G_INPUT['start_year']);          // 書き出す予定開始日(年)
    $date->month = intval($G_INPUT['start_month']);        // 書き出す予定開始日(月)
    $date->day = intval($G_INPUT['start_day']);            // 書き出す予定開始日(日)
    if ( ! api_date_check(new CB_DateEx($date))) {
        cb_throw_error(E_COMMON_INVALID_DATE);

    }
    //end 2008/01/17
}

if ($G_INPUT['end_year'] != "")                            // 書き出す予定終了日
{
    //start 2008/01/17 
    //$end_year = min(9999, max($G_INPUT['end_year'], $current_date->year) + 7);  
    //$date->parse( $end_year."-12-31");
    //if ( !cb_date_validate_date($date) )
    //{
    //    cb_throw_error( E_COMMON_INVALID_DATE );
    //}

    /*
     * 1970/01/01 ～2037/12/31まで範囲指定可能
     * しかし、1970/01/01で実行した場合に異常終了する為、
     * タイムカードと同様に、1970/01/02を省くチェックに変更する。
    */
    $date->year = intval($G_INPUT['end_year']);            // 書き出す予定終了日(年)
    $date->month = intval($G_INPUT['end_month']);          // 書き出す予定終了日(月)
    $date->day = intval($G_INPUT['end_day']);              // 書き出す予定終了日(日)
    if ( ! api_date_check(new CB_DateEx($date))) {
        cb_throw_error(E_COMMON_INVALID_DATE);

    }
    //end 2008/01/17
}

if ( ! array_key_exists('target', $G_INPUT))                // 施設コード
{
// start 2008/01/10 不具合№(276)
//    require_once( 'grn/error_code.csp' );
//    cb_throw_error( E_GRN_CMMN_AUTH_AUTHENTICATE_NOT_INPUT_NECESSARY );
    require_once('schedule/error_code.csp');
    cb_throw_error(E_GRN_SCHD_NOT_SELECT_EXPORT_USER);
// end 2008/01/10 不具合№(276)
}

//-----------------------------------------
//  CSVファイルへの書き出し(施設予約情報)
//-----------------------------------------
$charset = @ $G_INPUT['charset'];
if ( ! $charset) {
    global $G_config_common;
    $charset = $G_config_common->get('I18N', 'default_external_encoding');
}

// 日付のチェック
$setdate = new CB_Date();                                    // 書き出す予定開始日
$enddate = new CB_Date();                                    // 書き出す予定終了日
$setdate->year = intval($G_INPUT['start_year']);            // 書き出す予定開始日(年)
$setdate->month = intval($G_INPUT['start_month']);        // 書き出す予定開始日(月)
$setdate->day = intval($G_INPUT['start_day']);            // 書き出す予定開始日(日)
$enddate->year = intval($G_INPUT['end_year']);            // 書き出す予定終了日(年)
$enddate->month = intval($G_INPUT['end_month']);            // 書き出す予定終了日(月)
$enddate->day = intval($G_INPUT['end_day']);                // 書き出す予定終了日(日)

require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();

// 期間のチェック
$app->checkDateTime($setdate, $enddate);

// テンポラリのファイルを作成
$tempdir = cb_tmpdir();
$temp_filename = tempnam($tempdir, 'sc_');

require_once('fw/csv.csp');
$writer = new CB_CSVWriter($charset, $temp_filename);

// 項目名の書き出し
$itemname = @ $G_INPUT['item_name'];

// オプション
$options = [];

// start 2008/01/11 G2.5対応
//if( array_key_exists( 'creator', $G_INPUT ) && $G_INPUT['creator'] )
if (array_key_exists('creator', $G_INPUT) && $G_INPUT['creator'] == '1') {
    $options['creator'] = true;
}
// end 2008/01/11 G2.5対応

// start 2008/01/11 G2.5対応
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();
// end 2008/01/11 G2.5対応

if ($itemname == '1') {
    $csv_header = [];
    $csv_header[] = cb_msg('grn.schedule', 'set_date');
    $csv_header[] = cb_msg('grn.schedule', 'set_time');
    $csv_header[] = cb_msg('grn.schedule', 'end_date');
    $csv_header[] = cb_msg('grn.schedule', 'end_time');
    $csv_header[] = cb_msg('grn.schedule', 'event_menu');
    $csv_header[] = cb_msg('grn.schedule', 'event_detail');
    $csv_header[] = cb_msg('grn.schedule', 'memo');
    $csv_header[] = cb_msg('grn.schedule', 'members_types');
    //start 2008/01/11 G2.5対応
    $csv_header[] = cb_msg('grn.schedule', 'creator');
    //if( array_key_exists( 'creator', $options ) && $options['creator'] )
    //    $csv_header[] = cb_msg( 'grn.schedule', 'creator' );

    // カスタマイズ項目取得
    $items = $facility_logic->listItems();
    foreach ($items as $item) {
        if ($item['use']) {
            $csv_header[] = $item['display_name'];
        }
    }
    //end 2008/01/11 G2.5対応

    $writer->writeLine($csv_header);
}

// 監査ログ

//start 2012/01/23 G3.5対応
require_once('grn/logger.csp');
$lm = CB_LoggerManager::getInstance();
//require_once( 'grn/logger_25.csp' );
//$lm = CB_LoggerManager_25::getInstance();  
//end 2012/01/23 G3.5対応
$l =& $lm->getLogger(GRN_SCHEDULE_MODULE_ID);

require_once('schedule/system_logic.csp');
$logic = GRN_Schedule_SystemLogic::getInstance();

require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

// start 2008/01/11 不具合№(169)
$G_INPUT['target'] = array_unique($G_INPUT['target']);
// end 2008/01/11 不具合№(169)

foreach ($G_INPUT['target'] as $id_label) {
    $ids = explode(':', $id_label);
    if (count($ids) < 2) {
        continue;
    }
    $type = $ids[0];

    if (($facility = &$facility_logic->getFacilityByForeignKey($ids[1]))) {
        // 2008/02/04 不具合No(313)
        $id = $facility->getOID();
    } else {
        continue;
    }

    if (is_null($id) || 0 == strlen($id)) {
        continue;
    }

    // 施設
    if ($type == 'facility') {
        $facility = &$facility_logic->getFacility($id);
        if ($facility) {
            $logic->exportEventsToCSV($writer, $facility, $setdate, $enddate,
                $options);
            //start 2008/01/11 G2.5対応
            //$l->notice( '[export] system_event (fid:'.$id.') '.$facility->get( 'name') );
            $log_params = [
                'fid'          => $id,
                'display_name' => $facility->get('name')
            ];
            $l->noticeEx('export', 'system_event', $log_params);
            //end 2008/01/11 G2.5対応      
        }
    }
}

$writer->close();

// 一時ファイルに書き出した内容をファイルとして出力
// 'text/comma-separated-values' <= CSV でこういったMIMETYPEがあるらしい
cb_prepare_download('FacilitySchedules.csv', 'application/csv', false);
$fp = fopen($temp_filename, 'rb');
if (($size = filesize($temp_filename)) > 0) {
    echo fread($fp, $size);
}
fclose($fp);
// 一時ファイルの削除
unlink($temp_filename);

/**
 * 日付チェック関数 (2008-01-17)
 * 1970-01-02 ～ 2037-12-31 を対象とする
 * ※1970-01-01の異常終了対策
 *
 * @param $dateEx  CB_DateEx
 *
 * @return boolean  false  : 対象外
 *                  true   : 対象内 (1970-01-02 ～ 2037-12-31)
 */
function api_date_check($dateEx)
{

    $compare_date = new CB_Date();
    $compare_date->parse("1970-01-02");
    if ($dateEx->compare($compare_date) < 0) {
        return false;
    }

    $compare_date->parse("2037-12-31");
    if ($dateEx->compare($compare_date) > 0) {
        return false;
    }

    return true;
}


