<?php
/*
* Created on 2007-04-06
* Updated on 2011-03-28 XML出力部分の改修
*
* WF申請データの情報XML書出し
* 
* ■受信データ仕様 
* 名前           | 必須 |   値    | 個数 | 備考
* ---------------|------|---------|------|---------------------------------------------------
* pid            |  △  | 数値    |  1   | 出力対象の申請データID
* fid            |  △  | 数値    |  1   | 出力対象の申請フォームID
* formcode       |  △  | 文字列  |  1   | 出力対象の申請フォームコード
* petitionNumber |  ×  | 文字列  |  1   | 抽出条件 申請番号
* name           |  ×  | 文字列  |  1   | 抽出条件 申請標題
* creatorname    |  ×  | 文字列  |  1   | 抽出条件 申請者表示名
* status         |  ×  | 配列    |  1   | 抽出条件 現在ステータス (0:進行中,1:承認,2:却下,3:完了,4:取消)
* datetype       |  ×  | 数値    |  1   | 抽出条件 期間 ( 0:申請、1:承認、2:却下,3:完了,4:取消)
* datefrom       |  ×  | 数値    |  1   | 期間FROM (UNIXTIME)
* dateto         |  ×  | 数値    |  1   | 期間TO   (UNIXTIME)
* sort           |  ×  | 数値    |  1   | XMLの並び順 (0～9) 
*                                        |  0 : 申請時間昇順
*                                        |  1 : 申請時間降順
*                                        |  2 : 承認時間昇順
*                                        |  3 : 承認時間降順
*                                        |  4 : 却下時間昇順
*                                        |  5 : 却下時間降順
*                                        |  6 : 完了時間昇順
*                                        |  7 : 完了時間降順
*                                        |  8 : 取消時間昇順
*                                        |  9 : 取消時間降順
* items          |  ×  | 配列    |  1   | 出力項目
* system         |  ○  | 固定値  |  1   | '2'
*                |      |         |      | →coopLogin.cspにて、システム管理系
* manage         |  ○  | 固定値  |  1   | 'workflow'
*                |      |         |      | →coopLogin.cspにて、システム管理の
* ■機能
* [受信データ]を受取り、対象の申請データまたは、対象の申請フォーム内における抽出条件に合致する申請データについて、        
* 指定の並び順で、指定された項目をXMLにて出力することができる        
* [対象データの指定]        
* 以下のいづれか一つのみ有効とし、複数指定された場合は、申請データID→申請フォームID→申請フォームコードの順で有効値を判定する        
*     単一の申請データID    
*     単一の申請フォームID    
*     単一の申請フォームコード    
*         
* [抽出条件の指定]        
* 以下の条件を指定することができる（複数指定時は、AND条件となる）        
* いづれも指定しない場合は、原則申請フォーム内の全ての申請データを出力する        
* 受信名          [条件]
* petitionnumber   申請番号
* name             申請標題
* creatorname      申請者表示名
* status           現在状況 (進行中、承認、却下、完了、取消)
* datetype         期間タイプ (申請、承認、却下、完了、取消)
* datefrom - to    期間 (UNIXTIME)
* 
* XMLの現在状況の書出しについて
* ・申請テーブル上のstatus (0,1,4) の場合は、XMLの<status>は進行中(1)とする
*  また <status> の数値についての、ユーザー側への説明は以下のとおりとする
*   1 : 進行中
*   2 : 承認
*   3 : 却下
*   6 : 取消
*   7 : 完了
* 
* ちなみに 経路ステータスの数値については、以下
*  0 : 未処理
*  1 : 却下
*  2 : 差戻
*  3 : 完了
* 
* 経路処理結果については、以下
*  0 : 省略
*  1 : 未処理
*  2 : 承認
*  3 : 却下
*  4 : 差戻
*  5 : 確認
*
*<?xml version="1.0" encoding="UTF8" standalone="yes">
*<petition_information>
*  <petitions form_id="" form_code="">
*    <petition id="">                                                                     items 項目値
*        <petition_number />                                        申請番号                 0
*        <status />                                                 申請ステータス           1
*        <creator_id />                                             申請者ID                 2
*        <creator_login_name />                                     申請者ログイン名         3
*        <creator_display_name />                                   申請者表示名             4
*        <create_time />                                            申請時間                 5
*        <acceptance_handler_id />                                  最終承認者ID             6
*        <acceptance_handler_login_name />                          最終承認者ログイン名     7
*        <acceptance_handler_display_name />                        最終承認者表示名         8
*        <acceptance_time />                                        最終承認時間             9
*        <reject_handler_id />                                      却下者ID                 10
*        <reject_handler_login_name />                              却下者ログイン名         11
*        <reject_handler_display_name />                            却下者表示名             12
*        <reject_time />                                            却下時間                 13
*        <finish_handler_id />                                      完了者ID                 14
*        <finish_handler_login_name />                              完了者ログイン名         15
*        <finish_handler_display_name />                            完了者表示名             16
*        <finish_time />                                            完了時間                 17
*        <cancel_handler_id />                                      取消者ID                 18
*        <cancel_handler_login_name />                              取消者ログインID         19
*        <cancel_handler_display_name />                            取消者表示名             20
*        <cancel_time />                                            取消時間                 21
*        <item id="" name="" attach_file="0">                        （項目 NOT 添付ファイル)
*          <item_data />                                            項目値                   22
*        </item>
*        <item id="" name="" attach_file="1">                         (項目 添付ファイル    )
*          <item_data>                                              項目値                   22
*            <attache_file_id />
*            <attache_file_name />
*            <attache_file_size />
*            <attache_file_mime-type />
*          </item_data>
*        </item>
*        <steps>                                                                                   ※2
*          <step id="" name="" acceptance="" circular="" skip = "">                                ※2
*            <status />                                              経路ステータス          23
*            <handles>
*              <handle>
*                <result />                                          経路処理者結果          24
*                <comment />                                         処理者のコメント        25
*                <handler_id />                                      処理者ID                26
*                <handler_login_name />                               処理者ログイン名        27
*                <handler_display_name />                             処理者表示名            28
*                <handle_time />                                     処理時間                29
*              </handle>
*            </handles>
*          </step>
*        </steps>
*    </petition>
*  </petitions>
*</petition_information>
*
* ※2 は、 経路ステータス(23) or 24～29 のいづれか指定された場合に、書出す
*
*
*
*/

require_once('coopUtility.csp');

global $G_INPUT;


// coopLogin.cspのファイル存在 /////////////////////////////////
if ( ! is_file('coopLogin.csp')) {
    global $G_state_set;
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);

    include_once("error_code.csp");

    header("X-Cybozu-Error:" . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Header Data><CR><LF>");
    print("1," . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Footer Data><CR><LF>");
    print("ERROR<CR><LF>");
    cb_safe_exit();
}
////////////////////////////////////////////////////////////////

//ログイン認証
require('coopLogin.csp');
unset($uum);

//---------------------------------------------
//  アプリケーションの使用/停止状態をチェック
//---------------------------------------------
require_once('grn/application.csp');
$locator = GRN_ApplicationLocator::instance();
// 2008/01/15 不具合管理 296 WFにて，アプリケーションの使用許可がない状態で取得を実行するとエラーになる
if ( ! ($G_application =& $locator->getInstance('workflow'))) {
    require_once('grn/error_code.csp');
    cb_throw_error(E_GRN_APPLICATION_NOT_ACTIVE);
}
unset($locator, $G_application);


// パラメータチェック と必要項目の取得
//    $return_value = array(
//                            'form_id'           => NULL,  申請フォームID
//                            'form_code'         => NULL,  申請フォームコード
//                            'where_condition'   => NULL,  抽出条件句 (WHERE)
//                            'having_condition'  => NULL,  抽出条件句 (HAVING)
//                            'sort'              => NULL,  ソートするフィールド名
//                            'order'             => NULL,  昇降順
//                            'error_param' => array()      パラムエラー [fid] とか [formcode]とか
$parameters = [];
$parameters = api_param_check($G_INPUT);


// 受信データ 不正の場合はエラー;
if (count($parameters['error_param']) > 0) {
    include_once('error_code.csp');
    api_response_data(null,
        E_API_WORKFLOW_PARAM_WRONG . implode(',', $parameters['error_param']));
    cb_safe_exit();
}


// 申請データ群の取得
$petitions = [];
$petitions = api_get_petition_data_select($parameters);


$param_items = array_key_exists('items', $G_INPUT) ? $G_INPUT['items'] : null;
// 書出項目郡の取得
$xml_maps = api_get_xml_maps($param_items);

////////////////////////////////XML書出し
// Open Temprary File
$temp_dir = cb_tmpdir();
$temp_file_name = tempnam($temp_dir, 'api_petitiondata_');


//Open XML Document
$xml_writer = new XMLWriter();
$xml_writer->openUri($temp_file_name);
$xml_writer->setIndentString(' ');
$xml_writer->setIndent(true);
$xml_writer->startDocument('1.0', 'UTF-8', 'yes');


// START XML書出し 
$xml_writer->startElement('petition_information');                                           // petition_information

$xml_writer->startElement('petitions');                                                  // petitions
$xml_writer->writeAttribute('form_id', $parameters['form_id']);
$xml_writer->writeAttribute('form_code', $parameters['form_code']);

foreach ($petitions as $petition) {
    $xml_writer->startElement('petition');                                           // petition
    $xml_writer->writeAttribute('id', $petition['_id']);

    // 申請情報整形
    $xml_petitioninfo_map = api_get_petition_info_array($xml_maps['petition'],
        $petition);
    // 項目書込
    api_xml_write_map_data($xml_writer, $xml_petitioninfo_map);

    // itemの書出有
    if (count($xml_maps['item']) > 0) {    // itemの書出し
        api_write_petition_items($xml_writer, $petition['_id']);
    }

    // 経路情報 又は、経路ユーザー情報 書出あり
    if (count($xml_maps['step']) > 0 || count($xml_maps['handler']) > 0) {
        // 経路情報又は、経路ユーザー情報の指定項目書出し
        api_write_petition_stepdatas($xml_writer, $petition['_id'], $xml_maps);
    }

    $xml_writer->endElement();                                                       // petition
}

$xml_writer->endElement();                                                                // petitions

$xml_writer->endElement();                                                                   // petition_information

//End XML Document
$xml_writer->endDocument();
$xml_writer->flush();


// Download and Unlink Temporary File
cb_prepare_download('petitiondata.xml', 'application/xml', false);

$fp = fopen($temp_file_name, 'rb');

while ( ! feof($fp)) {
    echo fread($fp, 8192);
}

fclose($fp);
unlink($temp_file_name);
//処理おわり//////////////////////////////////////////////////////////////////////////////////////////////

function api_get_xml_maps(& $items)
{

    if ( ! is_array($items)) {
        return [
            'petition' => [],
            'item'     => [],
            'step'     => [],
            'handler'  => []
        ];
    }

    // XML書出用の配列 
    //                                    element名              => array( itemsパラメータ値, xml値書出タイプ)
    $xml_map = [
        'petition' => [
            'petition_number'                 => [
                'item'      => '0',
                'writeType' => 'text'
            ],
            'status'                          => [
                'item'      => '1',
                'writeType' => 'writeRaw'
            ],
            'creator_id'                      => [
                'item'      => '2',
                'writeType' => 'writeRaw'
            ],
            'creator_login_name'              => [
                'item'      => '3',
                'writeType' => 'text'
            ],
            'creator_display_name'            => [
                'item'      => '4',
                'writeType' => 'text'
            ],
            'create_time'                     => [
                'item'      => '5',
                'writeType' => 'text'
            ],
            'acceptance_handler_id'           => [
                'item'      => '6',
                'writeType' => 'writeRaw'
            ],
            'acceptance_handler_login_name'   => [
                'item'      => '7',
                'writeType' => 'text'
            ],
            'acceptance_handler_display_name' => [
                'item'      => '8',
                'writeType' => 'text'
            ],
            'acceptance_time'                 => [
                'item'      => '9',
                'writeType' => 'text'
            ],
            'reject_handler_id'               => [
                'item'      => '10',
                'writeType' => 'writeRaw'
            ],
            'reject_handler_login_name'       => [
                'item'      => '11',
                'writeType' => 'text'
            ],
            'reject_handler_display_name'     => [
                'item'      => '12',
                'writeType' => 'text'
            ],
            'reject_time'                     => [
                'item'      => '13',
                'writeType' => 'text'
            ],
            'finish_handler_id'               => [
                'item'      => '14',
                'writeType' => 'writeRaw'
            ],
            'finish_handler_login_name'       => [
                'item'      => '15',
                'writeType' => 'text'
            ],
            'finish_handler_display_name'     => [
                'item'      => '16',
                'writeType' => 'text'
            ],
            'finish_time'                     => [
                'item'      => '17',
                'writeType' => 'text'
            ],
            'cancel_handler_id'               => [
                'item'      => '18',
                'writeType' => 'writeRaw'
            ],
            'cancel_handler_login_name'       => [
                'item'      => '19',
                'writeType' => 'text'
            ],
            'cancel_handler_display_name'     => [
                'item'      => '20',
                'writeType' => 'text'
            ],
            'cancel_time'                     => [
                'item'      => '21',
                'writeType' => 'text'
            ]
        ],
        'item'     => ['item_data' => ['item' => '22']],
        'step'     => ['status' => ['item' => '23', 'writeType' => 'text']],
        'handler'  => [
            'result'               => [
                'item'      => '24',
                'writeType' => 'writeRAW'
            ],
            'comment'              => [
                'item'      => '25',
                'writeType' => 'writeCDATA'
            ],
            'handler_id'           => ['item' => '26', 'writeType' => 'text'],
            'handler_login_name'   => ['item' => '27', 'writeType' => 'text'],
            'handler_display_name' => ['item' => '28', 'writeType' => 'text'],
            'handle_time'          => ['item' => '29', 'writeType' => 'text']
        ]
    ];

    // $xml_mapより出力しない項目を削除する
    $delete_array = [];
    foreach ($xml_map as $key => $value) {
        foreach ($value as $key2 => $value2) {
            if (array_search($value2['item'], $items, true) === false) {
                $delete_array[$key][$key2] = 0;
            }
        }
    }

    foreach ($delete_array as $key => $val) {
        foreach ($val as $key2 => $value2) {
            unset($xml_map[$key][$key2]);
        }
    }

    return $xml_map;
}

// 指定された条件で 申請dデータリストを取得する
function api_get_petition_data_select(& $parameters)
{
//    global $G_container_base;
//    $database =& $G_container_base->getInstance('dbconn');
    $app_locator = GRN_ApplicationLocator::instance();
    $database =& $app_locator->getConnection('workflow');
//申請者カラムが col_creator_系 => col_user_系に変更(別名つけてそのままここ以外修正しません）
    $columns = [
        'p._id',
        'p.col_status',
        'p.col_ctime petitionTime',
        'p.col_list_index',
        'p.col_ptime',
        'p.col_petition_number',
        'p.col_user AS col_creator',
        'p.col_user_foreign_key AS col_creator_foreign_key',
        'p.col_user_name AS col_creator_name',
        'p.col_transactor',
        'p.col_transactor_foreign_key',
        'p.col_transactor_name',
        'ut1.col_deleted creator_deleted',
        'ut2.col_deleted transactor_deleted',
        'max(u.col_ptime) max_acceptTime'
    ];

    //Create Query
    $query = 'SELECT ' . implode(',', $columns);
    $query .= ' FROM tab_grn_workflow_petition p  ';
    $query .= ' LEFT JOIN tab_grn_workflow_pathstepdata s  ';
    $query .= '        ON p._id = s.col_petition  ';
    $query .= ' LEFT JOIN tab_grn_workflow_pathstepdatauser u  ';
    $query .= '        ON s._id = u.col_path_step_data and u.col_result = 2 ';
    $query .= ' LEFT JOIN tab_cb_user ut1 ';
    $query .= '        ON p.col_user = ut1._id ';
    $query .= ' LEFT JOIN tab_cb_user ut2 ';
    $query .= '        ON p.col_transactor = ut2._id ';

    // 申請ID または、フォームIDの指定 (必須)
    // ステータス指定,申請番号、標題、申請者の抽出条件 (任意)
    if (array_key_exists('where_condition', $parameters)
        && ! is_null($parameters['where_condition'])
    ) {
        $query .= ' WHERE ' . $parameters['where_condition'];
    }

    $query .= ' GROUP BY p._id  ';

    // 期間指定
    if (array_key_exists('having_condition', $parameters)
        && ! is_null($parameters['having_condition'])
    ) {
        $query .= ' HAVING ' . $parameters['having_condition'];
    }

    $query .= ' ORDER BY p.col_list_index, p._id ';

    $query = $database->select_format($query, 0, -1, CB_DATABASE_NO_LOCK);

    //Execute Query
    $result = $database->query($query);
    if ($result === false) {
        //Throw Query Error
        $database->throwError(['query' => 'query failed: ' . $query]);
    }

    $petition_id_list = [];

    while ($row = $database->fetch_assoc($result)) {
        $petition_id_list[$row['_id']] = $row;
        if ( ! is_null($petition_id_list[$row['_id']]['creator_deleted'])) {
            $petition_id_list[$row['_id']]['col_creator'] = null;
        }
        if ( ! is_null($petition_id_list[$row['_id']]['transactor_deleted'])) {
            $petition_id_list[$row['_id']]['col_transactor'] = null;
        }
    }

    $database->free_result($result);

    // 各ステータスの処理時間を取得
    api_get_petitionlistarray_status_time($petition_id_list);

    // ソート指定有り
    if (count($petition_id_list) > 1 && $parameters['sort']
        && $parameters['order']
    ) {
        foreach ($petition_id_list as $key => $row) {
            $time[$key] = $row[$parameters['sort']];
            $list_index[$key] = $row['col_list_index'];
            $id[$key] = $key;
        }

        // データを 指定時間 の昇降順、list_index,_id の昇順にソートする。
        // $data を最後のパラメータとして渡し、同じキーでソートする。
        array_multisort($time, $parameters['order'], $list_index, SORT_ASC, $id,
            SORT_ASC, $petition_id_list);

    }

    return $petition_id_list;

}

// 経路ユーザーテーブルより、申請ID,処理時間、経路ユーザーの結果 を指定して
// 処理をおこなったユーザー情報(ID,ログイン名、表示名)を取得する
function api_get_status_handle_user($pid, $time, $status)
{
//    global $G_container_base;
//    $database =& $G_container_base->getInstance('dbconn');
    $app_locator = GRN_ApplicationLocator::instance();
    $database =& $app_locator->getConnection('workflow');

    $query
        = 'SELECT u.col_user,u.col_display_name,u.col_foreign_key,ut.col_deleted ';
    $query .= ' FROM tab_grn_workflow_pathstepdata d LEFT JOIN tab_grn_workflow_pathstepdatauser u';
    $query .= ' ON d._id = u.col_path_step_data';
    $query .= ' LEFT JOIN tab_cb_user ut';
    $query .= ' ON u.col_user = ut._id';
    $query .= ' WHERE d.col_petition = ' . $pid . ' AND u.col_ptime <=' . $time
              . ' AND u.col_result IN (' . implode(',', $status) . ')';
    $query .= ' ORDER BY u.col_ptime DESC,u.col_result DESC,u.col_position DESC';

    $query = $database->select_format($query, 0, 1, CB_DATABASE_NO_LOCK);

    //Execute Query
    $result = $database->query($query);
    if ($result === false) {
        //Throw Query Error
        $database->throwError(['query' => 'query failed: ' . $query]);
    }

    //Update Petition List
    $count = $database->num_rows($result);

    $list = [];
    if ($count > 0) {
        $list = $database->fetch_assoc($result);
    }
    $database->free_result($result);

    if ( ! is_null($list['col_deleted'])) {
        $list['col_user'] = null;
    }

    return $list;

}

function api_get_petitionlistarray_status_time(& $petition_id_list)
{
    // 各ステータス時間を埋める
    foreach ($petition_id_list as $pid => $data) {
        $petition_id_list[$pid]['acceptTime'] = null;
        $petition_id_list[$pid]['rejectTime'] = null;
        $petition_id_list[$pid]['finishTime'] = null;
        $petition_id_list[$pid]['cancelTime'] = null;

        switch ($data['col_status']) {
            case '2':   // 承認
                $petition_id_list[$pid]['acceptTime'] = $data['max_acceptTime'];
                break;
            case '3':   // 却下
                $petition_id_list[$pid]['rejectTime'] = $data['col_ptime'];
                break;
            case '6':   // 取消
                $petition_id_list[$pid]['cancelTime'] = $data['col_ptime'];;
                break;
            case '7':   // 完了
                $petition_id_list[$pid]['acceptTime'] = $data['max_acceptTime'];
                $petition_id_list[$pid]['finishTime'] = $data['col_ptime'];;
                break;
            default:    // それ以外 (未処理、進行中、差戻)
                break;
        }
    }
    //return $petition_id_list;
}


function api_get_petition_info_array($xmlmap, & $petition_data)
{
    $xmlmap['petition_number']['value'] = $petition_data['col_petition_number'];
    $xmlmap['status']['value']
        = api_format_status($petition_data['col_status']);
    $xmlmap['creator_id']['value'] = $petition_data['col_creator'];
    $xmlmap['creator_login_name']['value']
        = $petition_data['col_creator_foreign_key'];
    $xmlmap['creator_display_name']['value']
        = $petition_data['col_creator_name'];
    $xmlmap['create_time']['value']
        = api_format_datetime($petition_data['petitionTime']);

    if ( ! is_null($petition_data['acceptTime'])) {
        // step_data_user Table より ptime == acceptTime && result = 2(承認) のユーザーを一人取得
        $a_user = api_get_status_handle_user($petition_data['_id'],
            $petition_data['acceptTime'], ['2']);
        $xmlmap['acceptance_handler_id']['value']
            = array_key_exists('col_user', $a_user) ? $a_user['col_user']
            : null;
        $xmlmap['acceptance_handler_login_name']['value']
            = array_key_exists('col_foreign_key', $a_user)
            ? $a_user['col_foreign_key'] : null;
        $xmlmap['acceptance_handler_display_name']['value']
            = array_key_exists('col_display_name', $a_user)
            ? $a_user['col_display_name'] : null;
        $xmlmap['acceptance_time']['value']
            = api_format_datetime($petition_data['acceptTime']);
    }

    if ( ! is_null($petition_data['rejectTime'])) {
        // step_data_user Table より ptime == rejectTime && result = 3(却下) のユーザーを一人取得
        $r_user = api_get_status_handle_user($petition_data['_id'],
            $petition_data['rejectTime'], ['3']);
        $xmlmap['reject_handler_id']['value']
            = array_key_exists('col_user', $r_user) ? $r_user['col_user']
            : null;
        $xmlmap['reject_handler_login_name']['value']
            = array_key_exists('col_foreign_key', $r_user)
            ? $r_user['col_foreign_key'] : null;
        $xmlmap['reject_handler_display_name']['value']
            = array_key_exists('col_display_name', $r_user)
            ? $r_user['col_display_name'] : null;
        $xmlmap['reject_time']['value']
            = api_format_datetime($petition_data['rejectTime']);
    }

    if ( ! is_null($petition_data['finishTime'])) {
        // step_data_user Table より ptime == finishTime && result = (2,5)(承認・完了) のユーザーを一人取得
        $f_user = api_get_status_handle_user($petition_data['_id'],
            $petition_data['finishTime'], ['2', '5']);
        $xmlmap['finish_handler_id']['value']
            = array_key_exists('col_user', $f_user) ? $f_user['col_user']
            : null;
        $xmlmap['finish_handler_login_name']['value']
            = array_key_exists('col_foreign_key', $f_user)
            ? $f_user['col_foreign_key'] : null;
        $xmlmap['finish_handler_display_name']['value']
            = array_key_exists('col_display_name', $f_user)
            ? $f_user['col_display_name'] : null;
        $xmlmap['finish_time']['value']
            = api_format_datetime($petition_data['finishTime']);
    }

    if ( ! is_null($petition_data['cancelTime'])) {
        $xmlmap['cancel_handler_id']['value']
            = $petition_data['col_transactor'];
        $xmlmap['cancel_handler_login_name']['value']
            = $petition_data['col_transactor_foreign_key'];
        $xmlmap['cancel_handler_display_name']['value']
            = $petition_data['col_transactor_name'];
        $xmlmap['cancel_time']['value']
            = api_format_datetime($petition_data['cancelTime']);
    }

    return $xmlmap;
}

function api_get_petition_stepdata_user_info_array($xmlmap, & $stepdata_user)
{
    // result => nullの場合は、 1(未処理) に変換
    $xmlmap['result']['value'] = is_null($stepdata_user['col_result']) ? '1'
        : $stepdata_user['col_result'];
    $xmlmap['comment']['value']
        = format_step_user_comment($stepdata_user['col_comment']);
    $xmlmap['handler_id']['value'] = $stepdata_user['col_user'];
    $xmlmap['handler_login_name']['value']
        = $stepdata_user['col_foreign_key'];
    $xmlmap['handler_display_name']['value']
        = $stepdata_user['col_display_name'];
    $xmlmap['handle_time']['value']
        = api_format_datetime($stepdata_user['col_ptime']);

    return $xmlmap;
}

function api_write_petition_items(& $xml_writer, $petition_id)
{
    // 申請データに紐づくitem郡を取得
    $items = api_get_petition_items_array($petition_id);

    $xml_writer->startElement('items');                                        // items
    foreach ($items as $item) {
        $xml_writer->startElement('item');                                 // item
        $xml_writer->writeAttribute('id', $item['id']);
        $xml_writer->writeAttribute('name', $item['name']);
        $xml_writer->writeAttribute('attach_file', $item['attach_file']);

        // 添付ファイルじゃない場合
        if ( ! is_array($item['value'])) {
            $map = [
                'item_data' => [
                    'value'     => $item['value'],
                    'writeType' => 'writeCDATA'
                ]
            ];
            api_xml_write_map_data($xml_writer, $map);

        } else {
            // 添付ファイルの場合(1アイテムに複数ファイルの可能性あり)
            foreach ($item['value'] as $file_item) {
                $xml_writer->startElement('item_data');                // item_data

                foreach ($file_item as $key => $value) {
                    $map = [$key => ['value' => $value, 'writeType' => 'text']];
                    api_xml_write_map_data($xml_writer, $map);
                }

                $xml_writer->endElement();                             // item_data
            }
        }

        $xml_writer->endElement();                                         // item

    }
    $xml_writer->endElement();                                                 // items

}

function api_get_petition_items_array(& $petition_id)
{
    $items_array = [];

    $colum_list = [
        'd._id d__id',
        'f._id f__id',
        'd.col_item d_col_item',
        'd.col_display_name d_col_display_name',
        'd.col_attach_file d_col_attach_file',
        'f.col_file f_col_file',
        'd.col_number d_col_number',
        'd.col_text d_col_text',
        'd.col_settings d_col_settings',
        'd.col_foreign_key d_col_foreign_key'
    ];

    require_once('workflow/itemdata_logic_base.csp');
    $itemdata_logic_base = GRN_Workflow_Itemdata_Logic_Base::getInstance();

    $items = $itemdata_logic_base->getListEx($petition_id, $colum_list, false,
        CB_DATABASE_NO_LOCK);

    foreach ($items as $item) {

        $item_array = [];
        if ($item['d_col_foreign_key'] !== 'grn.workflow.blank') {
            $item_array['id'] = $item['d_col_item'];
            $item_array['name'] = $item['d_col_display_name'];
// 2008/01/11 不具合管理308 情報取得-attach_file属性の値が不正 の対応
//            $item_array['attach_file'] = $item['d_col_attach_file']?1:0;
//            $item_array['value']       = api_format_item_value($item);
            $temp = api_format_item_value($item); //=>添付ファイルの場合は arrayが返る
            $item_array['attach_file'] = is_array($temp) ? 1 : 0;
            $item_array['value'] = $temp;
            $items_array[] = $item_array;
        }
    }

    return $items_array;

}


function api_write_petition_stepdatas(
    & $xml_writer,
    $petition_id,
    & $xml_element_map
) {
    $line = [];

    // Get Path Step Data
    require_once('workflow/path_data.csp');
    $path_step_data_logic = GRN_Workflow_PathStepDatas::getInstance();
    $path_step_columns = [
        '_id'
        ,
        'col_activate'
        ,
        'col_role'
        ,
        'col_skip'
        ,
        'col_path_step'
        ,
        'col_type'
        ,
        'col_acceptance_type'
        ,
        'col_finished'
    ];

    $path_step_list = $path_step_data_logic->getListByPetitionId($petition_id,
        $path_step_columns);

    // Get Path Step Data User
    $path_step_data_user_logic = GRN_Workflow_PathStepDataUsers::getInstance();
    $path_step_user_columns = [
        'tab_grn_workflow_pathstepdatauser' => [
            '_id'                => 'pid',
            'col_path_step_data' => 'col_path_step_data',
            'col_user'           => 'col_user',
            'col_display_name'   => 'col_display_name',
            'col_foreign_key'    => 'col_foreign_key',
            'col_result'         => 'col_result',
            'col_ptime'          => 'col_ptime',
            'col_comment'        => 'col_comment'
        ]
    ];

    $users
        = $path_step_data_user_logic->getListByPathStepDataIds(array_keys($path_step_list),
        $path_step_user_columns);

    $path_step_user_list = [];
    foreach ($users as $user) {
        $path_step_data_id = $user['col_path_step_data'];
        if ( ! array_key_exists($path_step_data_id, $path_step_user_list)) {
            $path_step_user_list[$path_step_data_id] = [];
        }
        $path_step_user_list[$path_step_data_id][] = $user;
    }

    $xml_writer->startElement('steps');                                                              // steps

    // Write Path Step Data
    require_once('fw/date.csp');

    // col_finishedの値を整形する
    if (count($xml_element_map['step']) > 0) {
        api_format_step_status($path_step_list);
    }

    foreach ($path_step_list as $pathstepdata_id => $path_step_data) {
        // 経路の条件分岐で条件にマッチしない部分の経路情報もコピーされているが
        // ↑の場合は、col_activate が NULL なので、飛ばす。
        if ( ! $path_step_data['col_activate']) {
            // Not Write if Inactive Path Step Data
            continue;
        }

        $xml_writer->startElement('step');                                                     // step
        $xml_writer->writeAttribute('id', $path_step_data['col_path_step']);
        $xml_writer->writeAttribute('name', $path_step_data['col_role']);
        $xml_writer->writeAttribute('acceptance',
            $path_step_data['col_acceptance_type'] ? 1 : 0);
        $xml_writer->writeAttribute('circular',
            $path_step_data['col_type'] ? 1 : 0);
        $xml_writer->writeAttribute('skip',
            $path_step_data['col_skip'] ? 1 : 0);


        if (count($xml_element_map['step']) > 0) {

            if ( ! $path_step_data['col_skip']) {
                $map
                    = [
                    'status' => [
                        'value'     => $path_step_list[$pathstepdata_id]['col_finished'],
                        'writeType' => 'writeRaw'
                    ]
                ];
            } // 省略ステップだったら、値は、書出さない
            else {
                $map = [
                    'status' => [
                        'value'     => null,
                        'writeType' => 'writeRaw'
                    ]
                ];
            }

            api_xml_write_map_data($xml_writer, $map);
        }

        if (count($xml_element_map['handler']) > 0) {
            $xml_writer->startElement('handles');                                             // handles

            //経路ステップ名
            if (array_key_exists($pathstepdata_id, $path_step_user_list)) {
                $path_step_data_user_list
                    = $path_step_user_list[$pathstepdata_id];

                if (is_array($path_step_data_user_list)
                    && 0 < count($path_step_data_user_list)
                ) {
                    foreach ($path_step_data_user_list as $path_step_data_user) {

                        $xml_writer->startElement('handle');                             // handle

                        $map
                            = api_get_petition_stepdata_user_info_array($xml_element_map['handler'],
                            $path_step_data_user);

                        api_xml_write_map_data($xml_writer, $map);

                        $xml_writer->endElement();                                       // handle

                    }
                }

            }

            $xml_writer->endElement();                                                        // handles
        }

        $xml_writer->endElement();                                                             // step

    }

    $xml_writer->endElement();                                                                      // steps

}

// ステータスの書式 (0,1,4) は → 未処理扱い
// petition テーブルの col_status を XML表示用に変換する
// col_status   →   XML表示
//  -1(下書  )       -1 (下書) ※但しここにくることはない
//   0(未処理)        1 (進行中)
//   1(進行中)        1 (進行中)
//   2(承認  )        2 (承認)
//   3(却下  )        3 (却下)
//   4(差戻  )        1 (進行中)
//   5(取戻  )        5 (取戻)  ※但しここにくることはない
//   6(取消  )        6 (取消)
//   7(完了  )        7 (進行中)
function api_format_status($col_status)
{
    $val = strlen($col_status) == 0 ? '1' : $col_status;

    switch ($val) {
        case '0':   // 未処理
        case '1':   // 進行中
        case '4':   // 差戻
            $val = 1;
            break;
        default:    // それ以外の値は、そのまま
            break;
    }

    return $val;

}

// 日付の書式

// 項目 のvalue を整形
function api_format_item_value(& $item)
{
    $item_data_value = null;

    // 項目値
    // Get Item Value
    $item_map_for_write = [
        '_id'                        => $item['d__id'],
        'file_id'                    => $item['f__id'],
        GRN_WORKFLOW_COLUMN_FILE     => $item['f_col_file'],
        GRN_WORKFLOW_COLUMN_NUMBER   => $item['d_col_number'],
        GRN_WORKFLOW_COLUMN_TEXT     => $item['d_col_text'],
        GRN_WORKFLOW_COLUMN_SETTINGS => $item['d_col_settings'],
    ];

    require_once('workflow/item_resources.csp');
    $item_util =& grn_workflow_get_item_util($item['d_col_foreign_key']);


    if ('grn.workflow.date' == $item['d_col_foreign_key']) {
        // Only Date Type Returns Value by Reference.
        $item_data_value_mix =& $item_util->getItemData($item_map_for_write);
    } elseif ('grn.workflow.file' == $item['d_col_foreign_key']) {
        //$item_data_value_mix = $item_util->getItemDataFile($item_map_for_write['_id'], $item_map_for_write);
    } else {
        $item_data_value_mix = $item_util->getItemData($item_map_for_write);
    }

    switch ($item['d_col_foreign_key']) {
        case 'grn.workflow.string_single':
        case 'grn.workflow.string_multiple':
        case 'grn.workflow.menu_string':
        case 'grn.workflow.radio':
        case 'grn.workflow.checkbox':
        case 'grn.workflow.numeric':
        case 'grn.workflow.calc_numeric':
            $item_data_value = $item_data_value_mix;
            break;
// 2008/01/11 空日付(--/--/--())対応 => 対応しないと 0000/00/00(月）
        case 'grn.workflow.date':
            if (is_null($item_data_value_mix->year)
                || strlen($item_data_value_mix->year) < 1
                || is_null($item_data_value_mix->month)
                || strlen($item_data_value_mix->month) < 1
                || is_null($item_data_value_mix->day)
                || strlen($item_data_value_mix->day) < 1
            ) {
                $year = "--";
                $month = "--";
                $day = "--";
                if ( ! is_null($item_data_value_mix->year)
                     && strlen($item_data_value_mix->year) > 1
                ) {
                    $year = sprintf('%04d', $item_data_value_mix->year);
                }
                if ( ! is_null($item_data_value_mix->month)
                     && strlen($item_data_value_mix->month) > 1
                ) {
                    $month = sprintf('%02d', $item_data_value_mix->month);
                }
                if ( ! is_null($item_data_value_mix->day)
                     && strlen($item_data_value_mix->day) > 1
                ) {
                    $day = sprintf('%02d', $item_data_value_mix->day);
                }

                $item_data_value_mix = sprintf('%s/%s/%s（）',
                    $year, $month, $day
                );
            } else {
                $wday_num = cb_get_day_of_week($item_data_value_mix->year,
                    $item_data_value_mix->month, $item_data_value_mix->day);
                $item_data_value_mix = sprintf('%04d/%02d/%02d（%s）',
                    $item_data_value_mix->year, $item_data_value_mix->month,
                    $item_data_value_mix->day,
                    cb_msg('fw.date', "WDayShort{$wday_num}")
                );
            }
            $item_data_value = $item_data_value_mix;
            break;
        case 'grn.workflow.file':
            $item_data_value = [];
            // ファイルは複数あるかもしれないので、取得しなおさないと
            foreach ($item['files'] as $file) {
                //不具合改修 WF書出し、添付ファイルを空にしている状態の閉じタグの場所がおかしい(267)
                if ( ! is_null($file['f_col_file'])) {
                    $item_map_for_write = [
                        '_id'                        => $file['d__id'],
                        'file_id'                    => $file['f__id'],
                        GRN_WORKFLOW_COLUMN_FILE     => $file['f_col_file'],
                        GRN_WORKFLOW_COLUMN_NUMBER   => $file['d_col_number'],
                        GRN_WORKFLOW_COLUMN_TEXT     => $file['d_col_text'],
                        GRN_WORKFLOW_COLUMN_SETTINGS => $file['d_col_settings'],
                    ];

                    $item_data_value_mix
                        = $item_util->getItemDataFile($item_map_for_write['_id'],
                        $item_map_for_write);
                    $item_data_value[] = [
                        'attache_file_id'        => $item_data_value_mix['_id'],
                        'attache_file_name'      => $item_data_value_mix['file_info']['name'],
                        'attache_file_size'      => $item_data_value_mix['file_info']['size'],
                        'attache_file_mime-type' => $item_data_value_mix['file_info']['mime']
                    ];
                } else {
                    $item_data_value[] = [];
                }
            }
            break;
        case 'grn.workflow.route_search':
            $item_data_value = implode(':', $item_data_value_mix);
            break;
    }

    return $item_data_value;
}

// 経路ステップのユーザーコメントを整形
function format_step_user_comment(& $path_step_data_user_comment)
{
    //コメント
    $comment = '';
    if ($path_step_data_user_comment) {
        $comment_list = cb_unserialize($path_step_data_user_comment,
            ["allowed_classes" => ["CB_TimeStamp"]]);

        // Current Comment
        if (array_key_exists('current', $comment_list)) {
            $comment .= $comment_list['current'];
        }

        // Log of Comments
        if (array_key_exists('log_total', $comment_list)
            && 0 < $comment_list['log_total']
        ) {
            foreach ($comment_list['logs'] as $log) {
                if (0 < strlen($comment)) {
                    $comment .= "\n\n";
                }

                // Date of Log
                $ptime = $log['col_ptime'];
                $log_date = cb_timestamp_to_datetime($ptime->unix_ts);

                $wday_num = cb_get_day_of_week($log_date->year,
                    $log_date->month, $log_date->day);
                $log_date = sprintf('%04d/%02d/%02d（%s） %02d:%02d',
                    $log_date->year, $log_date->month, $log_date->day,
                    cb_msg('fw.date', "WDayShort{$wday_num}"),
                    $log_date->hour, $log_date->minute
                );
                $comment .= $log_date;

                // Result of Log
                $comment .= ' ' . cb_msg('grn.workflow',
                        'col_result_' . $log['col_result']);
                if (GRN_WORKFLOW_RESULT_REMAND == $log['col_result']) {
                    if ('applicant' == $log['destination']) {
                        $comment .= '（→申請者）';
                    } else {
                        // 申請者以外の経路に差戻
                        require_once('workflow/path_data.csp');
                        $pathstepdata
                            = GRN_Workflow_PathStepDatas::getInstance();
                        $role = $pathstepdata->get($log['destination'],
                            ['col_role'], CB_DATABASE_NO_LOCK);
                        $comment .= "（→{$role['col_role']}）";
                    }
                }

                // Comment of Log
                $comment .= "\n${log['col_comment']}";
            }
        }
    }

    return $comment;
}


// 受信データチェック & 必要項目の抽出
function api_param_check(& $parameters)
{
    require_once('workflow/form_manager_base.csp');
    $form_manager_base = GRN_Workflow_Form_Manager_Base::getInstance();

    $return_value = [
        'form_id'          => null,
        'form_code'        => null,
        'where_condition'  => null,
        'having_condition' => null,
        'sort'             => null,
        'order'            => null,
        'error_param'      => []
    ];
    $condition_list_where = [];
    $condition_list_having = [];

    $form = null;

    $pid = null;

    // 申請ID 指定
    if (array_key_exists('pid', $parameters)
        && is_numeric($parameters['pid'])
    ) {
        $pid = $parameters['pid'];
        require_once('workflow/petition_logic_base.csp');
        $petition_logic_base = GRN_Workflow_Petition_Logic_Base::getInstance();

        // $pid がなければ、内部でエラー(E_GRN_WRKF_PETITION_NOT_FOUND)
        $petition = $petition_logic_base->getDirect($parameters['pid'],
            ['_id', 'col_form', 'col_status'], [], CB_DATABASE_NO_LOCK);

        // 取戻・下書の場合はエラー
        if ($petition['col_status'] == -1 || $petition['col_status'] == 5) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_PETITION_DENY_ACCESS);
        }

        // フォームIDからフォームテーブルのフォームコード取得    
        if ( ! $form = $form_manager_base->getDirect($petition['col_form'],
            ['_id', 'col_foreign_key'], [], CB_DATABASE_NO_LOCK)
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }

        $condition_list_where[] = [
            'column'   => 'p._id',
            'operator' => '=',
            'value'    => $petition['_id']
        ];

    } // フォームID 指定
    elseif (array_key_exists('fid', $parameters)
            && is_numeric($parameters['fid'])
    ) {
        // フォームIDがあるかチェック
        if ( ! $form = $form_manager_base->getDirect($parameters['fid'],
            ['_id', 'col_foreign_key'], [], CB_DATABASE_NO_LOCK)
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }
    } // フォームコード 指定
    elseif (array_key_exists('formcode', $parameters)) {
        // フォルダコードがあるかのチェック
        if ( ! $form
            = $form_manager_base->getByForeignKey($parameters['formcode'],
            ['_id', 'col_foreign_key'], [], CB_DATABASE_NO_LOCK)
        ) {
            require_once('workflow/error_code.csp');
            cb_throw_error(E_GRN_WRKF_FORM_NOT_FOUND);
        }
    }

    if ($form) {
        $condition_list_where[] = [
            'column'   => 'p.col_form',
            'operator' => '=',
            'value'    => $form['_id']
        ];

        $return_value['form_id'] = $form['_id'];
        $return_value['form_code'] = $form['col_foreign_key'];

    } else {
        if (array_key_exists('pid', $parameters)
            && ! is_numeric($parameters['pid'])
        ) {
            $return_value['error_param'][] = '[pid]';
        } elseif (array_key_exists('fid', $parameters)
                  && ! is_numeric($parameters['fid'])
        ) {
            $return_value['error_param'][] = '[fid]';
        } else {
            $return_value['error_param'][] = '[pid],[fid],[formcode]';
        }
    }

    // 申請ID指定でなければ、抽出条件も見る
    if (is_null($pid)) {
        // 抽出条件 (現在ステータス)
        if (array_key_exists('status', $parameters)) {
            $status_list = [];
            foreach ($parameters['status'] as $view_status_name) {
                switch ($view_status_name) {
                    case '0':   // 進行中   :未処理,進行中,差し戻し
                        $status_list = array_merge($status_list, [0, 1, 4]);
                        break;
                    case '1':   // 承認     :承認
                        $status_list[] = 2;
                        break;
                    case '2':   // 却下     :却下
                        $status_list[] = 3;
                        break;
                    case '3':   // 完了     :完了
                        $status_list[] = 7;
                        break;
                    case '4':   // 取り消し :取り消し
                        $status_list[] = 6;
                        break;
                    default:    // それ以外の値は、エラー
                        $return_value['error_param'][] = '[status]';
                        break;
                }
            }

            $condition_list_where['status'] = [
                'column'   => 'p.col_status',
                'operator' => 'IN',
                'value'    => $status_list
            ];
        } else {
            $condition_list_where['status'] = [
                'column'   => '0',
                'operator' => '=',
                'value'    => 1
            ];
        }


        // 抽出条件 (期間指定)
        if (array_key_exists('datetype', $parameters)) {
            $col_name = null;
            $col_status = null;
            switch ($parameters['datetype']) {
                case '0':   // 申請時間
                    $col_name = 'p.col_ctime';
                    break;
                case '1':   // 承認     :承認
                    $col_name = 'max(u.col_ptime)';
                    $col_status = [2, 7];
                    break;
                case '2':   // 却下     :却下
                    $col_name = 'p.col_ptime';
                    $col_status = [3];
                    break;
                case '3':   // 完了     :完了
                    $col_name = 'p.col_ptime';
                    $col_status = [7];
                    break;
                case '4':   // 取り消し :取り消し
                    $col_name = 'p.col_ptime';
                    $col_status = [6];
                    break;
                default:    // それ以外の値は、エラー
                    $return_value['error_param'][] = '[datetype]';
                    break;
            }

            if ($col_status) {
                $condition_list_where['datetype'] = [
                    'column'   => 'p.col_status',
                    'operator' => 'IN',
                    'value'    => $col_status
                ];
            }
            // 期間FROM
            if (array_key_exists('datefrom', $parameters)) {
                if (is_numeric($parameters['datefrom'])
                    && $parameters['datefrom'] > 0
                    && $parameters['datefrom'] < GRN_WORKFLOW_INT_MAX
                ) {
                    $condition_list_having[] = [
                        'column'   => $col_name,
                        'operator' => '>=',
                        'value'    => intval($parameters['datefrom'])
                    ];
                } else {
                    $return_value['error_param'][] = '[datefrom]';
                }
            }

            // 期間TO
            if (array_key_exists('dateto', $parameters)) {
                if (is_numeric($parameters['dateto'])
                    && $parameters['dateto'] > 0
                    && $parameters['dateto'] < GRN_WORKFLOW_INT_MAX
                ) {
                    $condition_list_having[] = [
                        'column'   => $col_name,
                        'operator' => '<=',
                        'value'    => intval($parameters['dateto'])
                    ];
                } else {
                    $return_value['error_param'][] = '[dateto]';
                }
            }

            // datetype 指定してきたのに datefrom も dateto の指定もない場合は、datetype の抽出条件を解除
            if (array_key_exists('datetype', $condition_list_where)
                && count($condition_list_having) == 0
            ) {
                unset($condition_list_where['datetype']);
            }

        }

        // 並び順の指定
        if (array_key_exists('sort', $parameters)) {
            if (is_numeric($parameters['sort'])) {
                $var = intval($parameters['sort']);
                // 偶数なら昇順、奇数なら降順
                $sort = $var % 2 == 0 ? SORT_ASC : SORT_DESC;
                $sort_field = null;
                switch (intval($var / 2)) {
                    case '0':   // 申請時間
                        $sort_field = 'petitionTime';
                        break;
                    case '1':   // 最終承認時間
                        $sort_field = 'acceptTime';
                        break;
                    case '2':   // 却下時間
                        $sort_field = 'rejectTime';
                        break;
                    case '3':   // 完了時間
                        $sort_field = 'finishTime';
                        break;
                    case '4':   // 取消時間
                        $sort_field = 'cancelTime';
                        break;
                    default:    // それ以外の値は、エラー
                        $return_value['error_param'][] = '[sort]';
                        break;
                }
                $return_value['order'] = $sort;
                $return_value['sort'] = $sort_field;
            } else {
                $return_value['error_param'][] = '[sort]';
            }
        }

        //抽出条件 (申請番号)
        if (array_key_exists('petitionnumber', $parameters)) {
            $condition_list_where[] = [
                'column'   => 'p.col_petition_number',
                'operator' => 'LIKE',
                'value'    => $parameters['petitionnumber']
            ];
        }

        //抽出条件 (標題)
        if (array_key_exists('name', $parameters)) {
            $condition_list_where[] = [
                'column'   => 'p.col_name',
                'operator' => 'LIKE',
                'value'    => $parameters['name']
            ];
        }

        //抽出条件 (申請者)
        if (array_key_exists('creatorname', $parameters)) {
// 2008/01/11 Grn2.5対応 申請者カラムが col_creator_系 => col_user_系に変更
            $condition_list_where[] = [
                'column'   => 'p.col_user_name',
                'operator' => 'LIKE',
                'value'    => $parameters['creatorname']
            ];
        }
    }

    if (count($return_value['error_param'] == 0)) {
        // 抽出条件 cb_queryf
        if (count($condition_list_where) > 0) {
            $return_value['where_condition']
                = $form_manager_base->_createCondition($condition_list_where);
        }

        if (count($condition_list_having) > 0) {
            $return_value['having_condition']
                = $form_manager_base->_createCondition($condition_list_having);
        }
    }

    return $return_value;


}

// 2008/01/11 不具合管理 309WF情報取得-ステップの<status>要素値の不正
// 申請者本人に差戻した申請データを抽出した際、始めの経路ステータスが「3」（完了）のままになっている(不具合256)対応
// col_finished の値
//   NULL (0) -> 未処理
//   1        -> 却下
//   2        -> 差戻
//   3        -> 完了
// ステップの途中で col_finished が NULL(又は0) ならば、以降のステップは 0 に変換 ( ただし 値が1(却下),2(差戻)の場合はそのまま
// ステップ内に 2(差戻)があり、それ以前のステップ中に NULL(又は0) がある場合は、そのステップに差戻しが発生している
// ステップ内に 2(差戻)があり、それ以前のステップ中に NULL(又は0) がない場合は、申請者に差戻しが発生している
function api_format_step_status(& $path_step_list)
{

    $col_path_step_finished = 0;
//    $is_processing_id = 0;
    $indx = 0;
    $count = 0;
    $bl = false;
    foreach ($path_step_list as $pathstepdata_id => $path_step_data) {
        if ( ! $path_step_data['col_skip']) {
            // col_finished の値を加工 (差戻しを行うと、差し戻したステップ以降が、3になる)
            // 差戻の場合は、 差戻ステップ以降の値を 3 -> 0 に変換する

            // nullの場合は、0(未処理)に変換 
            $col_path_step_status
                = is_null($path_step_list[$pathstepdata_id]['col_finished'])
                ? '0' : $path_step_list[$pathstepdata_id]['col_finished'];

            /*
                        // 初回にNULL(0) のステップを別変数に退避
                        if($is_processing_id==0 && $col_path_step_status == 0 )
                            $is_processing_id = $pathstepdata_id;
            */
            if ( ! $bl && $col_path_step_status == 0) {
                $indx = $count;
                $bl = true;
            }
            $count++;

            if ($col_path_step_status == GRN_WORKFLOW_FINISHED_REJECTION
                || $col_path_step_status == GRN_WORKFLOW_FINISHED_REMAND
            ) {
                $col_path_step_finished = $col_path_step_status;
            }

            // 完了時(3)に、それ以前のステップで、差戻・却下が発生している場合は、 0 (未処理)に変換する
            if ($col_path_step_status != GRN_WORKFLOW_FINISHED_REJECTION
                && $col_path_step_status != GRN_WORKFLOW_FINISHED_REMAND
            ) {
                // 後の処理は、全部 未処理扱い
                if ($col_path_step_finished != 0) {
                    $col_path_step_status = '0';
                }
            }
            $path_step_list[$pathstepdata_id]['col_finished']
                = $col_path_step_status;
        } else {
            $path_step_list[$pathstepdata_id]['col_finished'] = null;
        }
    }

    $count = 0;
    // ステップ途中に差戻し先(col_finished ==null,0)がなかった場合 -> 申請者に差し戻した
    if ($col_path_step_finished == GRN_WORKFLOW_FINISHED_REMAND) {
        foreach ($path_step_list as $pathstepdata_id => $path_step_data) {
            if ( ! $path_step_data['col_skip']) {
                if ($indx <= $count) {
                    if ($path_step_list[$pathstepdata_id]['col_finished']
                        != GRN_WORKFLOW_FINISHED_REMAND
                    ) {
                        $path_step_list[$pathstepdata_id]['col_finished'] = '0';
                    }
                }
                $count++;

            }
        }

    }


}


?>

