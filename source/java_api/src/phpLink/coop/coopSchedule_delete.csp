<?php
/*
 * Created on 2006/10
 *
 *****注意****************************************************************************************************
 *
 * 繰り返し予定対応部分のソース(受信データ仕様含む)については、復活もあるかもしれないので念のため残しておく
 * ソース上部段階で、繰り返し予定・仮予約の場合はエラーではじく
 *
 *************************************************************************************************************
 * スケジュール削除機能
 *
 * ■データ受信仕様
 *
 *   項目名   |説明
 *   ---------+----------------------------------------------------------------
 *   event    |削除するイベントIDを指定します。
 *   bdate    |削除する予定日を指定します。(yyyy-mm-dd) ( java側から値はわたらない)
 *   member   |削除の対象となる参加者 ( java側では、0を固定値で渡す)
 *            |  0:全参加者の予定を削除する
 *            |  1:予定から自分だけ削除する
 *   apply    |削除する範囲を指定します。( java側では、allを固定値で渡す)
 *            |  this :今回の予定だけ削除
 *            |  after:指定した予定日以降の予定を削除
 *            |  all  :すべての予定を削除
 *  registrant|coopLoginにて使用  更新者を指定します。(→このユーザーでLoginAs)
 *            |パラメータがなければログインユーザーで更新
 *  page      |coopLoginにて使用"_coopSchedule_delete.csp" 
 *  app       |coopLoginにて使用"schedule"
 *
 * Update
 *   #11  2006/04/11  kubota
 *   #12  2006/10/31  tsukurimichi
 *   #13  2007/03/23  tsukurimichi
 * 制限事項
 *  公開先への通知は行わない
 *  削除は、全削除(一部削除 自分のみ削除は行わない)
 *  繰り返し予定/仮予定の削除は行わない→エラーで返す (2006/10)
 *  (けど繰り返し予定対応については念のため残しておく)
 * 
 * 汎用的に使えるようにするためアクセス権のチェックは行わない
 */
global $G_INPUT;
/////////////////////////////////////////////////////////////////////////////////////////
//20061120修正
//coopファイルが存在しないとFatal Erorrになるためファイル存在チェック
//$nextpage = basename($G_INPUT['page']);
$nextpage = "coopLogin.csp";
if (is_file(cb_basedir() . '/code/doc_root/' . dirname(cb_get_pagename()) . '/'
            . $nextpage)
) {
    //20061120修正
    //require( $nextpage );
} else {
    //コピーライトとHTML閉じタグ出力しない
    global $G_state_set;
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);

    //   2007/03/27 coopLogin.cspがない場合のエラーメッセージ修正 不具合管理(199)
    include_once('error_code.csp');
    header("X-Cybozu-Error:" . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Header Data><CR><LF>");
    print("1," . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Footer Data><CR><LF>");
    print("ERROR<CR><LF>");
    cb_safe_exit();
}

//ログイン認証
require('coopLogin.csp');

/////////////////////////////////////////////////////////////////////////////////////////
unset($G_application);
/////////////////////////////////////////////////////////////
$login_id = $G_login->getOID();

// -------- 
// brabrabra after success
// --------
$event_id = array_key_exists('event', $G_INPUT) ? $G_INPUT['event'] : null;
$apply = array_key_exists('apply', $G_INPUT) ? $G_INPUT['apply'] : null;
$member = array_key_exists('member', $G_INPUT) ? $G_INPUT['member'] : null;
$did = null;


require_once('schedule/application.csp');
$app = GRN_Schedule_Application::getInstance();

$event = &$app->getEvent($G_login, $event_id, null);

if ( ! $event) {
    cb_throw_error(E_GRN_SCHD_NOTFOUND_EVENT);
}


//繰り返し予定・仮予約の削除をしない →エラーを返す////////////////////////////////////////
if (is_a($event, 'GRN_Schedule_RepeatEvent')) {
    //   2007/03/26 スケジュール削除，繰返しのIDが来た場合のエラーメッセージ修正 不具合番号(194)
    include_once('error_code.csp');
    api_response_data(null, E_API_SCHEDULE_DELETE_REPEAT_PERMIT);
    cb_safe_exit();
} elseif (is_a($event, 'GRN_Schedule_TemporaryEvent')) {
    //   2007/03/26 スケジュール更新，仮予定のIDが来た場合のエラーメッセージ修正 不具合番号(194)
    include_once('error_code.csp');
    api_response_data(null, E_API_SCHEDULE_DELETE_ADJUST_PERMIT);
    cb_safe_exit();
}

//////////////////////////////////////////////////////////////////////////////////////////////


if (is_a($event, 'GRN_Schedule_NormalEvent')) {
    $date_tmp = $event->setdatetime;
    $date = new CB_Date();
    $date->year = intval($date_tmp->year);
    $date->month = intval($date_tmp->month);
    $date->day = intval($date_tmp->day);

} elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
    $date = $event->setdate;
} else {
    $date = null;
}

//////////////////////////////////////////////////////////////////////////////
// アクセス権のチェック
require_once('schedule/access_logic.csp');
$acc_logic = GRN_Schedule_Access_Logic::getInstance();
$dynamic_role = $uum->listGrantedRoles();
$access = $acc_logic->getEventAccess($G_login, $event, ['read', 'delete'],
    $dynamic_role);
if ($access['read'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_EVENT);
}
if ($access['delete'] == GRN_SCHD_ACCESS_DENY) {
    cb_throw_error(E_GRN_SCHD_ACCESSDENY_DELETE);
}
//////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////施設予約者のみ変更可能チェック///////
require_once('schedule/facility_system_logic.csp');
$facility_logic = GRN_Facility_SystemLogic::getInstance();

//start 2008/01/11 G2.5対応
//$modify_creator = $facility_logic->getFacilityDenyOther();
//if( $modify_creator == '1' )
$modify_user = $facility_logic->getFacilityModifyUser();
if ($modify_user === 'creator') //end 2008/01/11 G2.5対応
{
    // 施設で登録者しか変更を許していない場合
    if ((is_array($event->facilities) && count($event->facilities) > 0)) {
        require_once('schedule/facility_privilege.csp');
        $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
        // 2008/01/11 不具合№263対応
        //if( ! $privilege_logic->hasPrivilege( $G_login ) && is_a( $event->creator, 'CB_User' ) &&  $login_id != $event->creator->getOID() )
        if ( ! $privilege_logic->hasPrivilegeOfFacilities($G_login,
                $old_event->facilities, 'OR')
             && ((is_a($event->creator, 'CB_User')
                  && $login_id != $event->creator->getOID())
                 || is_string($event->creator))
        ) //end 2008/01/11
        {
            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
        }
    }
}
//start 2008/01/11 G2.5対応
// 登録者と共有メンバーに変更を許可する
elseif ($modify_user === 'member') {
    // 施設で登録者と共有メンバーしか変更を許していない場合
    if ((is_array($event->facilities) && count($event->facilities) > 0)
        || (is_a($event, 'GRN_Schedule_TemporaryEvent') && $event->isORSearch())
    ) {
        require_once('schedule/facility_privilege.csp');
        $privilege_logic = GRN_Facility_Privilege_Logic::getInstance();
        if ( ! $privilege_logic->hasPrivilegeOfFacilities($G_login,
                $event->facilities, 'OR')
             && (
                 (is_array($event->users)
                  && ! array_key_exists($login_id, $event->users))
                 || is_null($event->users)
             )
             && ((is_a($event->creator, 'CB_User')
                  && $login_id !== $event->creator->getOID())
                 || is_string($event->creator))
        ) {
            cb_throw_error(E_GRN_FCLT_DENY_MODIFY);
        }
    }
}
//end 2008/01/11 G2.5対応
/////////////////////////////////////////施設予約者のみ変更可能チェック///////

$b_notify = true;
$tsex = new CB_TimeStampEx();
$notify_date = $tsex->getDate();

$title = '';
if ($notify_date->compare($date) > 0) {
    $b_notify = false;
} else {
    require_once('schedule/notification.csp');
    $util = GRN_Schedule_Notify_Logic::getInstance();
    if (is_a($event, 'GRN_Schedule_NormalEvent')) {
        $title = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
    } elseif (is_a($event, 'GRN_Schedule_BannerEvent')) {
        $title = $util->getNotifyTitle(html_entity_decode($event->getTitle()));
    }
}

$event_type = $event->getEventType();
// 削除前に通知（別に消えないから後でもいいけど）
if ($b_notify && is_array($event->users) && count($event->users) > 0) {
    $app->setNotify($event->users, $G_login, $event, $date, $title, '',
        GRN_SCHEDULE_NOTIFY_DELETE, $tsex);
    $app->forwardMail($event, [GRN_SCHEDULE_NOTIFY_DELETE => $event->users],
        $G_login, $did);
}


// **************************************************************************
//   2007/03/22 削除処理において，公開先に通知が飛ばない 不具合管理(189)
//   
// **************************************************************************  

// 通知先の指定がある場合
if ($b_notify && $event->private && is_array($event->notify_address)
    && count($event->notify_address) > 0
) {
    $app->sendNotificationsToPublic($G_login, $event, $date, '', $tsex, $title,
        false, true, GRN_SCHEDULE_NOTIFY_DELETE, $did);
}
// ************************************************************************** 


// 削除
$app->deleteEvent($G_login, $event_id, $event_type, $date, $apply);

printf("<Header Data><CR><LF>");
printf("0,%s", $event_id);
printf("<Footer Data><CR><LF>");
printf("NOERROR<CR><LF>");

