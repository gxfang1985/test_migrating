<?php
/*
* Created on 2007-04-03
* Updated on 2011-03-28 XML出力部分の改修
*
* ファイルの情報XML書出し
* 
* ■受信データ仕様 
* 名前       | 必須 |   値    | 個数 | 備考
* ----------------------------|------------------------------------------------------------------------
* fid        |  △  | 数値    |  1   | 出力対象となるファイルID
* hid        |  △  | 数値    |  1   | 出力対象のフォルダID
* foldercode |  △  | 文字列  |  1   | 出力対象のフォルダコード
* items      |  ×  | 配列    | 複数 | 出力項目 
* registrant |  ×  | 文字列  |  1   | 更新者 のログインアカウント
*            |      |         |      | →coopLogin.cspにて、LoginAsを行う
* app        |  ○  | 固定値  |  1   | "cabinet"
*            |      |         |      | →coopLogin.cspにて、各アプリケーションオブジェクトの生成時使用*
* ■機能
* ・ファイル又はフォルダを指定し、ファイル管理上のファイル情報について、後述する書式のXMLで出力することができる
* ・[受信データ]を受取り、対象ファイル情報を指定された項目をXMLにて出力する
* ・[対象ファイルの指定] 以下のいづれか一つのみ有効とし、複数指定された場合は、ファイルID→フォルダID→フォルダコードの順で有効値を判定する
*  ・単一のファイルID    指定されたファイルのファイル情報を出力する
*  ・単一のフォルダID    フォルダ内のファイル情報を全て出力する
*  ・単一のフォルダコード    フォルダ内のファイル情報を全て出力する
*  ・ ファイル情報が複数ある場合の並び順は、 ファイルID昇順とする
*  ・ フォルダに対するアクセス権 →フォルダに対する読込権限がない場合はエラー (GRN_CBNT_17008)
*  [XMLの形式]              
*  <?xml version="1.0" encoding="UTF8" standalone="yes">
*  <file_information>
*    <files parent_id="" parent_code="">
*      <file id="">                                    [itemsの指定値]
*          <title />                     タイトル          0  
*          <description />               説明              1 
*          <max_version />               バージョン上限値  2
*          <name />                      ファイル名        3
*          <size />                      サイズ(byte)      4
*          <mime_type />                 MIMETYPE          5
*          <creator_id />                登録者ID          6
*          <creator_login_name />        登録者ログイン名  7
*          <creator_display_name />      登録者表示名      8
*          <create_time />               登録日時          9
*          <modifier_id />               更新者ID          10
*          <modifier_login_name />       更新者ログイン名  11
*          <modifier_display_name />     更新者表示名      12
*          <modify_time />               更新日時          13
*          <histories>
*            <history>
*              <active />                実体管理有無      14  (0：無効,1：有効)
*              <version />               バージョンNo      15
*              <name />                  ファイル名        16  
*              <action />                操作              17  1:CREATE,2:UPDATE,3:ROLLBACK,4:RESTRE
*              <comment />               更新コメント      18  
*              <modifier_id />           更新者ID          19
*              <modifier_login_name />   更新者ログイン名  20
*              <modifier_display_name /> 更新者表示名      21
*              <modify_time>             更新日時          22
*            </history>
*          </histories>
*       </file>
*    </files>
*  </file_information>
*/

require_once('coopUtility.csp');

global $G_INPUT;

// coopLogin.cspのファイル存在 /////////////////////////////////
if ( ! is_file('coopLogin.csp')) {
    global $G_state_set;
    $G_state_set->set('copyright_should_be_written', false);
    $G_state_set->set('html_should_be_closed', false);

    include_once("error_code.csp");

    header("X-Cybozu-Error:" . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Header Data><CR><LF>");
    print("1," . E_API_COMMON_COOPLOGIN_NOT_FOUND);
    print("<Footer Data><CR><LF>");
    print("ERROR<CR><LF>");
    cb_safe_exit();
}
////////////////////////////////////////////////////////////////

//ログイン認証
require('coopLogin.csp');
unset($uum);


// file群格納用
$files = null;

// folderオブジェクト格納用
$folder = null;


require_once('cabinet/folder.csp');
$folderManager = GRN_Cabinet_FolderManager::getInstance();
/** @var GRN_Cabinet $G_application */
// 受信データチェック////////////////////////////////////////////////////////////
if (array_key_exists('fid', $G_INPUT) && is_numeric($G_INPUT['fid'])) {
    // ファイルの取得
    if ( ! ($file =& $G_application->getFile($G_login, $G_INPUT['fid'],
        GRN_CABINET_ACCESS_R))
    ) {
        require_once('cabinet/error_code.csp');
        cb_throw_error(E_GRN_CABINET_FILE_NOT_FOUND);
    }

    //start 2008/01/15 G2.5対応 
    //不具合№286対応 ファイル情報取得で、ファイルID 1 指定時のエラー不正
    if ( ! $folder =& $G_application->getFileFolder($file)) {
        cb_throw_error(E_GRN_CABINET_FILE_NOT_FOUND);
    }
    //ゴミ箱ファイルを省く
    if ($file->isInTrash())       // Huy added
    {
        cb_throw_error(E_GRN_CABINET_FILE_NOT_FOUND);
    }
    //end 2008/01/15 G2.5対応

    $folder =& $G_application->getFileFolder($file);
    $files[] = $file;

} elseif (array_key_exists('hid', $G_INPUT) && is_numeric($G_INPUT['hid'])) {
    // フォルダの取得
    if ( ! ($folder = $folderManager->getFolder($G_login, $G_INPUT['hid'],
        GRN_CABINET_ACCESS_R, true))
    ) {
        require_once('cabinet/error_code.csp');
        cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
    }

    $files = $folder->getFiles();

} elseif (array_key_exists('foldercode', $G_INPUT)) {

    // フォルダの取得
    if ( ! ($folder = $folderManager->getFolderByForeignKey($G_login,
        $G_INPUT['foldercode'], GRN_CABINET_ACCESS_R, true))
    ) {
        require_once('cabinet/error_code.csp');
        cb_throw_error(E_GRN_CABINET_FOLDER_NOT_FOUND);
    }
    unset($folderManager);

    $files = $folder->getFiles();

}
unset($folderManager);


// パラメータエラー
if (is_null($folder) || ! is_array($files)) {
    $error_msg = "";

    if (array_key_exists('fid', $G_INPUT)
        && ! is_numeric($G_INPUT['fid'])
    )         // fid あるけど数値じゃない
    {
        $error_msg = "[fid]";
    } elseif (array_key_exists('hid', $G_INPUT)
              && ! is_numeric($G_INPUT['hid'])
    )    // hid あるけど数値じゃない
    {
        $error_msg = "[hid]";
    } else                                                                            // fid,hid,foldercodeのいずれもない
    {
        $error_msg = "[fid],[hid],[foldercode]";
    }

    include_once("error_code.csp");
    api_response_data(null, E_API_CABINET_PARAM_WRONG . $error_msg);
    cb_safe_exit();
}
//////////////////////////////////////////////////////////////////////////////////

// 出力項目群の取得
$xml_maps = api_get_xml_maps(@ $G_INPUT['items']);


// Open Temprary File
$temp_dir = cb_tmpdir();
$temp_file_name = tempnam($temp_dir, 'api_fileinfo_');

//Open XML Document
$xml_writer = new XMLWriter();
$xml_writer->openUri($temp_file_name);
$xml_writer->setIndentString(' ');
$xml_writer->setIndent(true);

$xml_writer->startDocument('1.0', 'UTF-8', 'yes');
// START XML書出し 
$xml_writer->startElement('file_information');                                 // file_information start

$xml_writer->startElement('files');                                            // files start
$xml_writer->writeAttribute('parent_id', $folder->getOID());
$xml_writer->writeAttribute('parent_code', $folder->get('foreign_key'));


foreach ($files as $file) {

    $xml_writer->startElement('file');                                     // file start
    $xml_writer->writeAttribute('id', $file->getOID());

    // ファイル情報整形
    $xml_fileinfo_map = api_get_file_info_array($file, $xml_maps['fileinfo']);
    // 項目書込
    api_xml_write_map_data($xml_writer, $xml_fileinfo_map);

    // 履歴情報 
    if (count($xml_maps['historyinfo']) > 0) {

        $logs = $file->getlogset();

        $xml_writer->startElement('histories');                        // histories start

        while ( ! is_null(($log =& $logs->iterate()))) {
            $xml_writer->startElement('history');                 // history start

            // 履歴情報整形
            $xml_loginfo_map = api_get_log_info_array($log,
                $xml_maps['historyinfo']);

            // 履歴項目書込
            api_xml_write_map_data($xml_writer, $xml_loginfo_map);

            $xml_writer->endElement();                            // history end
        }

        $xml_writer->endElement();                                    // histories end
    }

    $xml_writer->endElement();                                             // file  end

}

$xml_writer->endElement();                                                     // files end

$xml_writer->endElement();                                                         // file_information end

//End XML Document
$xml_writer->endDocument();
$xml_writer->flush();

// Download and Unlink Temporary File
cb_prepare_download('fileinformation.xml', 'application/xml', false);

$fp = fopen($temp_file_name, 'rb');

while ( ! feof($fp)) {
    echo fread($fp, 8192);
}

fclose($fp);

unlink($temp_file_name);

//処理おわり//////////////////////////////////////////////////////////////////////////////////////////////


function api_get_file_info_array(& $file, $xml_map)
{

    if ($file) {
        $xml_map['title']['value'] = $file->getTitle();
        $xml_map['description']['value'] = $file->getDescription();
        $xml_map['max_version']['value'] = $file->getMaxVersion();

        $body = &$file->getCurrentBody();
        $xml_map['name']['value'] = $body->get("name");
        $xml_map['size']['value'] = $body->get("size");
        $xml_map['mime_type']['value'] = $body->get("mime");


        $xml_map['create_time']['value']
            = api_format_datetime($file->get("ctime"));
        $xml_map['modify_time']['value']
            = api_format_datetime($file->get("mtime"));

        $c_user = $file->get('creator');
        if ($c_user) {
            $xml_map['creator_id']['value'] = $c_user->getOID();
            $xml_map['creator_login_name']['value']
                = $c_user->get("foreign_key");
            $xml_map['creator_display_name']['value']
                = $c_user->get("display_name");
        } else {
            $xml_map['creator_id']['value'] = 0;
            $xml_map['creator_login_name']['value']
                = $file->get("creator_foreign_key");
            $xml_map['creator_display_name']['value']
                = $file->get("creator_name");
        }

        $m_user = $file->get('modifier');
        if ($m_user) {
            $xml_map['modifier_id']['value'] = $m_user->getOID();
            $xml_map['modifier_login_name']['value']
                = $m_user->get("foreign_key");
            $xml_map['modifier_display_name']['value']
                = $m_user->get("display_name");
        } else {
            $xml_map['modifier_id']['value'] = 0;
            $xml_map['modifier_login_name']['value']
                = $file->get("modifier_foreign_key");
            $xml_map['modifier_display_name']['value']
                = $file->get("modifier_name");
        }
    }

    return $xml_map;

}


function api_get_log_info_array(& $log, $xml_map)
{

    if ($log) {
        $xml_map['version']['value'] = $log->get("version");
        $xml_map['active']['value'] = $log->fileExists() ? 1 : 0;
        $xml_map['name']['value'] = $log->get("filename");
        $xml_map['action']['value'] = $log->get("operation");
        $xml_map['comment']['value'] = $log->get("comment");
        $xml_map['modify_time']['value']
            = api_format_datetime($log->get("record_time"));

        $r_user = $log->get('recorder');
        if ($r_user) {
            $xml_map['modifier_id']['value'] = $r_user->getOID();
            $xml_map['modifier_login_name']['value']
                = $r_user->get("foreign_key");
            $xml_map['modifier_display_name']['value']
                = $r_user->get("display_name");
        } else {
            $xml_map['modifier_id']['value'] = 0;
            $xml_map['modifier_login_name']['value']
                = $log->get("recorder_foreign_key");
            $xml_map['modifier_display_name']['value']
                = $log->get("recorder_name");
        }
    }

    return $xml_map;

}

function api_get_xml_maps($items)
{

    if ( ! is_array($items)) {
        return ['fileinfo' => [], 'historyinfo' => []];
    }


    // XML書出用の配列
    //                                    element名              => array( itemsパラメータ値, xml値書出タイプ)
    $xml_map = [
        'fileinfo'    => [
            'title'                 => ['item' => '0', 'writeType' => 'text'],
            'description'           => [
                'item'      => '1',
                'writeType' => 'writeCDATA'
            ],
            'max_version'           => [
                'item'      => '2',
                'writeType' => 'writeRaw'
            ],
            'name'                  => ['item' => '3', 'writeType' => 'text'],
            'size'                  => [
                'item'      => '4',
                'writeType' => 'writeRaw'
            ],
            'mime_type'             => ['item' => '5', 'writeType' => 'text'],
            'creator_id'            => [
                'item'      => '6',
                'writeType' => 'writeRaw'
            ],
            'creator_login_name'    => ['item' => '7', 'writeType' => 'text'],
            'creator_display_name'  => ['item' => '8', 'writeType' => 'text'],
            'create_time'           => ['item' => '9', 'writeType' => 'text'],
            'modifier_id'           => [
                'item'      => '10',
                'writeType' => 'writeRaw'
            ],
            'modifier_login_name'   => ['item' => '11', 'writeType' => 'text'],
            'modifier_display_name' => ['item' => '12', 'writeType' => 'text'],
            'modify_time'           => ['item' => '13', 'writeType' => 'text']
        ],
        'historyinfo' => [
            'version'               => [
                'item'      => '14',
                'writeType' => 'writeRaw'
            ],
            'active'                => [
                'item'      => '15',
                'writeType' => 'writeRaw'
            ],
            'name'                  => ['item' => '16', 'writeType' => 'text'],
            'action'                => [
                'item'      => '17',
                'writeType' => 'writeRaw'
            ],
            'comment'               => [
                'item'      => '18',
                'writeType' => 'writeCDATA'
            ],
            'modifier_id'           => [
                'item'      => '19',
                'writeType' => 'writeRaw'
            ],
            'modifier_login_name'   => ['item' => '20', 'writeType' => 'text'],
            'modifier_display_name' => ['item' => '21', 'writeType' => 'text'],
            'modify_time'           => ['item' => '22', 'writeType' => 'text']
        ]
    ];

    // $xml_mapより出力しない項目を削除する
    $delete_array = [];
    foreach ($xml_map as $key => $value) {
        foreach ($value as $key2 => $value2) {
            if (array_search($value2['item'], $items, true) === false) {
                $delete_array[$key][$key2] = 0;
            }
        }
    }

    foreach ($delete_array as $key => $val) {
        foreach ($val as $key2 => $value2) {
            unset($xml_map[$key][$key2]);
        }
    }

    return $xml_map;
}




