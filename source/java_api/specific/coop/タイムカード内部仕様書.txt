タイムカード プログラム仕様書

0.目次
-------------------------------------------------------------------
    0.目次
    1.サンプルプログラム
        1-(ア) タイムカード修正
    2.ガルーン連携（JAVA）用プログラム
        2-(ア) タイムカード修正
    3.ガルーン連携（PHP）用プログラム
        3-(ア) タイムカード修正
    4.その他
-------------------------------------------------------------------

1.サンプルプログラム
    (ア) タイムカード修正
        [ファイル名]
            CmdTimecardAdd.java
        [クラス名]
            CmdTimecardAdd
        [概要]
            コマンドラインよりガルーン２へタイムカード修正を行う
        [機能]
            コマンドラインよりガルーン２へ任意のユーザーのタイムカード修正を行うことができる
            指定できるオプションのガイダンスを表示することができる
            例外発生時は、エラー内容を表示することができる
        [仕様]
            メソッド
                ・usage        ガイダンスの表示
                    パラメータ    なし
                    戻り値        なし
                    処理          ガイダンスを標準エラー出力に出力する
                ・main         メイン処理
                    パラメータ   String args[]  コマンドライン実行する場合の引数
                        ① -h    （ガイダンスの表示用）
                        ② -o    ガルーン２のURL
                        ③ -u    ガルーン２のログイン名
                        ④ -p    ③のパスワード
                        ⑤ -r    修正したい対象ユーザのログイン名
                        ⑥ -d    変更したい日付
                        ⑦ -st   出社時刻(H:mm形式 or "" or "*")
                        ⑧ -et   退社時刻(H:mm形式 or "" or "*")
                        ⑨ -tt   外出時刻(H:mm形式 or "" or "*")
                        ⑩ -bt   復帰時刻(H:mm形式 or "" or "*")
                        ⑪ -ab   不在時刻([修正前外出時刻,修正後外出時刻,修正後復帰時刻]形式)
                                 (複数指定可能 但し 6つまで)
                        ⑫ -m    備考
                        ⑬ -c    (登録内容クリアする)
                        ※②～⑫は、次の要素に値を指定することとする(例.-u sato)
                        ※①～⑬は、順不同とする
                        ※⑦～⑩について、とりうる値の意味は以下のとおり
                           ""  = 値クリア
                           "*" = 既存値のまま(変更しない)
                           H:mm形式 = 指定時刻に設定 (有効値 0:00 ～ 23:59)
                    戻り値        なし
                    処理
                        ① argsの要素数が０の場合は、ガイダンスを表示し処理を抜ける
                        ② args の要素より規定の文字列があった場合は、次の要素を変数に格納する※
                        ③ ガルーン２へ接続、ログイン (クラス   CoopLink コンストラクタ呼び出し)
                        ④ ガルーン２へタイムカード情報を送信 
                                                     (メソッド CoopLink.putTimecardAdd 呼び出し)
                        ⑤ ガルーン２をログアウト    (メソッド CoopLink.logout 呼び出し)
                    特記事項
                        例外が発生した場合は、エラー内容が標準エラー出力に出力される
                        catchしているエラー
                          ・ParserException
                          ・RemoretException
                          ・IOException
                          ・IllegalArgumentException
                          ・NullPointerException
                        ※URL,ログイン名、パスワード、日付がそれぞれ指定されていない場合は、標準入力
                          での再入力を求める
                        ※指定されたパラメータ(①～⑫)以外の引数がargsに渡された場合は、ガイダンス
                          を表示し、処理を抜ける

                        パラメータ[-ab]について----------------------------------------------------
                        外出・復帰時刻の最大回数が2回以上の場合に、修正したい外出時刻の特定のために
                        当パラメータを設けてある

                        外出・復帰時刻の最大回数が1回の場合は、パラメータ[-tt],[-bt]を使用すればよい
                        (この場合は、修正したい外出時刻が１つのため 指定された値で上書き可能になるから)

                        とりうる値の形式は[修正前外出時刻,修正後外出時刻,修正後復帰時刻]の形式とする
                        各項目時刻の形式は (H:mm形式 or "" or "*") とする
                           値の意味するところは、各項目によって異なる
                           [修正前外出時刻]
                               H:mm形式…既存に登録されている外出時刻について修正したい場合に,
                                         修正前の時刻を指定する
                               ""      …新規に登録したい場合に指定

                           [修正後外出時刻]
                               H:mm形式…[修正前外出時刻]で指定した外出時刻について時刻を指定する
                               ""      …外出時間を未設定(--時--分)に設定したい場合に指定する
                               "*"     …既存値のまま更新しない場合に指定する

                           [修正後復帰時刻]
                               H:mm形式…[修正前外出時刻]で指定した外出時刻に対応する復帰時刻
                                         について時刻を指定する
                               ""      …復帰時間を未設定(--時--分)に設定したい場合に指定する
                               "*"     …既存値のまま更新しない場合に指定する

                        カンマ(,)は省略不可
                        各時刻項目については省略可能

                        以下の値が許容される(全てのパターンはあげていない。あくまでも一例)
                        例)
                           -ab "10:00,11:10,12:00"  … 10:00の外出時刻を 外出 11:10 復帰 12:00 に変更する
                           -ab 10:00,11:10,12:00    … 同上

                           -ab "10:00,*,12:00"      … 10:00の外出時刻に対応する復帰時刻を 12:00に変更する
                                                       外出時刻については10:00のまま

                           -ab "10:00,,"            … 10:00の外出時刻について、
                                                       外出 --:-- 復帰 --:-- に変更する
                           -ab 10:00,"",""          … 同上

                           -ab ",14:00,"            … 外出時刻に新しく 14:00 を設定する
                        パラメータ[-ab]について----------------------------------------------------


        [使い方]
            #java CmdTimecardAdd -o http://localhost/cgi-bin/cbgrn/grn.cgi 
                                 -u "Administrator" -p "admin"  -r "user1"
                                 -d "2007-01-05" -st "10:00" -et "18:00" -tt "13:00" -bt "14:00"
                                 -m "本社帰社のため外出" 
            ※実際には１行。
            →[結果] localhostのガルーンに対して、以下のタイムカード情報が書き込まれる
                     ・対象ユーザー： A(ログインアカウント=user1)
                     ・対象日付    ： 2007-01-05
                     ・出社時刻    ： 10:00
                     ・退出時刻    ： 18:00
                     ・外出時刻    ： 13:00
                     ・復帰時刻    ： 14:00
                     ・備考        ： 本社帰社のため外出
                     正しく登録された場合は、なにも表示されない


2.ガルーン連携（JAVA）
    (ア) タイムカード修正
        [ファイル名]
            /jp/co/cybozu/CoopLink.java(garoon2.jar)
        [クラス]
            jp.co.cybozu.CoopLink 
        [メソッド]
            putTimecardAdd
        [概要]
            タイムカード情報をガルーン２にHTTPリクエストを送信し、ガルーン２からの
            レスポンスを取得する
        [機能]
            ガルーン２にタイムカード情報のパラメータをHTTPでPOSTすることができる
            ガルーン２からのレスポンスを取得し、結果をリターンすることができる
            正常に登録された場合は、戻り値なし、エラーの場合は、例外をthrowする
        [仕様]
            引数
               Calendar setDate         … タイムカードの日付
               String startTime         … タイムカードの出社時刻("","*",H:mm形式)
               String endTime           … タイムカードの出社時刻("","*",H:mm形式)
               String[][] abcencesTimes … {[修正前外出時刻],[修正後外出時刻],[修正後復帰時刻]} の２次元配列
                                           時刻については、("","*",null,H:mm形式)のいずれかの値であること
                                           →形式が違う場合は、IllegalArgumentException発生
                                           ・値初期化・新規登録の場合: ""
                                           ・既存値変更しない場合： "*" または null
                                           ・時刻を設定したい場合： H:mm形式
                                           [修正前外出時刻]に既存設定時刻を指定することによりそれぞれの
                                           不在時刻(外出・復帰時刻)を修正することが可能
                                           [修正前外出時刻]に""を指定した場合は、新規に不在時刻を登録
                                           各要素配列の要素数が3以外の場合は、IllegalArgumentException発生
               String memo              … タイムカードの備考.null指定可能(=備考変更しない)
               boolean clearFlg         … タイムカードのクリアフラグ(true:クリアする,false:クリアしない)
                                           既に設定してある日付(setDate)のタイムカード情報をクリアする
                                           このフラグは、他の項目より優先されます
               String registrant        … 修正対象ユーザーのログイン名.
                                           null指定可能(=対象ユーザーはログインユーザ) 
            戻り値
               void (なし)
            例外
               IOException               … 接続が確立できない等通信上のエラーが発生した場合 
               RemoteException           … ガルーン２連携用プログラム上でエラーが発生した場合
               
            処理
              [リクエスト送信処理]
               送信先   … CoopLinkコンストラクタで指定されたガルーン２のURL + "/coop/grnTimecard_add"
               送信方法 … POST(multipart/form-data)
               送信パラメータ
                    【パラメータ名】   【値】
                    "app"               固定値"timecard" (アプリケーション名)
                    "system"            固定値"2" (アプリケーション名)
                    "manage"            固定値"timecard" (アプリケーション名)
                    "remarks"           引数 memo(nullの場合は、パラメータなし)
                    "registrant"        引数 registrant(nullの場合は、パラメータなし)
                    "clear"             固定値"" (引数 clearFlg ==false の場合は、パラメータなし)
                    "date"              引数 setDate より yyyy-mm-dd形式(nullの場合は、パラメータなし)
                    "start_hour"        引数 startTime の Hour 
                                        (startTimeがnull or "*" の場合は "*",startTime==""ならば"")
                    "start_minute"      引数 startTime の Minute 
                                        (startTimeがnull or "*" の場合は "*",startTime==""ならば"")
                    "finish_hour"       引数 endTime の Hour 
                                        (endTimeがnull or "*" の場合は "*",endTime==""ならば"")
                    "finish_minute"     引数 endTime の Minute 
                                        (endTimeがnull or "*" の場合は "*",endTime==""ならば"")
                    "before_trip_mod_hour[]"  引数 abcencesTimes の各要素の配列の1要素目(時)
                                              (1要素目がnull or "" の場合は "",1要素目=="*"ならば"*")
                    "before_trip_mod_minute[]"  引数 abcencesTimes の各要素の配列の1要素目(分)
                                              (1要素目がnull or "" の場合は "",1要素目=="*"ならば"*")
                    "after_trip_mod_hour[]"  引数 abcencesTimes の各要素の配列の2要素目(時)
                                              (2要素目がnull or "*" の場合は "*",2要素目==""ならば"")
                    "after_trip_mod_minute[]"  引数 abcencesTimes の各要素の配列の2要素目(分)
                                              (2要素目がnull or "*" の場合は "*",2要素目==""ならば"")
                    "after_back_mod_hour[]"  引数 abcencesTimes の各要素の配列の3要素目(時)
                                              (3要素目がnull or "*" の場合は "*",3要素目==""ならば"")
                    "after_back_mod_minute[]"  引数 abcencesTimes の各要素の配列の3要素目(分)
                                              (3要素目がnull or "*" の場合は "*",3要素目==""ならば"")
              [レスポンス受信処理]
                CoopLink.processResult(java.net.HttpURLConnection hc, String context)参照
                取得したHTMLを解析
                 エラー
                    HTTPヘッダより"X-Cybozu-Error"フィールド取得 → フィールド有の場合は
                    RemortException発生
                    エラー文言 "failed in the registration of the timecard.
                                + (ガルーン２エラーNO)"

                    HTML内より"<Header Data><CR><LF>" と "<Footer Data>"に囲まれた文字列取得
                      (文字列の形式…[要素１],[要素２])
                    要素１が1の場合は、RemortException発生
                    エラー文言 "failed in the registration of the timecard. 
                                + ([要素２])"
                    
                 正常
                    HTML内より"<Header Data><CR><LF>" と "<Footer Data>"に囲まれた文字列取得
                      (文字列の形式…[要素１],[要素２])
                    →→要素１が0の場合正常とする。戻り値なし
              [備考]

        [呼び出し方]
            ---------------------------------------------------------------------------------------
            String url = "http://localhost/cgi-bin/cbgrn/grn.exe"; // GaroonのURL
            String user = "sato";                                  // ログインユーザーアカウント
            String password = "sato";                              // ログインパスワード
            String registrant = "matsuda";                         // 対象ユーザー
            SimpleDateFormat sdf = new SimpleDateFormat();
            sdf.setLenient( false );
            sdf.applyPattern( "yyyy-MM-dd" );
            Calendar setDate = Calendar.getInstance();
            setDate.setTime(sdf.parse("2007-1-25"));               // 設定日
            String start_time = "10:00";                           // 出社時刻
            String finish_time = "18:00";                          // 退社時刻
            String[][] absense_time = {
                                     {"","10:00","10:30"},
                                     {"","16:00","16:30"},
                                    };                             // 不在時刻
            String memo = "2回外出 外回り";                        // 備考
            boolean clearFlag = false;                             //クリアフラグ

            // Garoonへの接続&認証(ガルーンのURL,ログイン名,パスワード)
            CoopLink timecardLink = new CoopLink(url, user, password);

            // Garoonに掲示情報を送信
            timecardLink.putTimecard(setDate,                      // 設定日
                                     start_time,                   // 出社時刻
                                     finish_time,                  // 退社時刻
                                     absense_time,                 // 不在時刻
                                     memo,                         // 備考
                                     clearFlag,                    // クリアフラグ
                                     registrant);                  // 対象ユーザー
            // ガルーンとの接続終了
            timecardLink.logout();
            ---------------------------------------------------------------------------------------


3.ガルーン連携（PHP）
    (ア) タイムカード
        [ファイル名]
            coopTimecard_add.csp
        [概要]
            ガルーン２へタイムカードの修正を行う
        [機能]
            ガルーン２における
            [システム管理（各アプリケーション） > タイムカード > タイムカード一覧 > タイムカード
              > 時刻の修正 ] と同じ機能を有する
        [仕様]
            受信データ仕様
                項目名                   |説明
                -------------------------+--------------------------------------------------
                remarks                  |備考を指定
                clear                    |指定されたユーザ・日付のタイムカードを初期化する
                                         |(初期化しない場合は、パラメータ不要)
                date                     |設定日を指定(yyyy-mm-dd形式)
                start_hour               |出社時刻(時)を指定 ※1
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～23 
                start_minute             |出社時刻(分)を指定 ※1
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～59 
                finish_hour              |退社時刻(時)を指定 ※1
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～23 
                finish_minute            |退社時刻(分)を指定 ※1
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～59 
                before_trip_mod_hour[]   |修正前外出時刻(時)を指定 ※1,※2
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～23 
                before_trip_mod_minute[] |修正前外出時刻(分)を指定 ※1,※2
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～59 
                after_trip_mod_hour[]    |修正後外出時刻(時)を指定 ※1,※2
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～23 
                after_trip_mod_minute[]  |修正後外出時刻(分)を指定 ※1,※2
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～59 
                after_back_mod_hour[]    |修正後復帰時刻(時)を指定 ※1,※2
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～23 
                after_back_mod_minute[]  |修正後復帰時刻(分)を指定 ※1,※2
                                         |有効値 ""
                                         |有効値 "*" 
                                         |有効値 0～59 
                registrant               |coopLoginにて使用 対象者指定
                                         |パラメータがなければログインユーザーのタイムカード修正
                app                      |coopLoginにて使用"timecard"(アプリケーション名)
                system                   |coopLoginにて使用"2"(システム管理のアプリケーションチェック用)
                manage                   |coopLoginにて使用"timecard"(権限チェックをする管理項目名)

                ※1の配列xxxx_hourに有効値("" or "*")がある場合は、xxx_minuteは、参照されないよ！
                ※2の配列要素数は全て一致すること

            処理
              同フォルダ内のcoopLogin.csp をincludeする
              (ログインチェック,アプリケーション管理権限チェック)
              →ファイルがなければ "PageNotFound"エラー
              ---coopLogin.csp内処理-------------------------------------------------
                  セッションIDよりログインチェック
                  パラメータ["system"],["manage"]よりログインユーザーに対して
                  アプリケーション管理権限を有するかチェック
                  →権限がない場合は、エラー(GRN_CMMN_00005)
              -----------------------------------------------------------------------
              1.パラメータ["app"]よりアプリケーションの使用/停止状態のチェック
                アプリケーションが停止状態ならばエラー(GRN_CMMN_00003)
              
              2.パラメータ["registrant"]より対象ユーザーIDを取得
                パラメータ["registrant"]がなければ、ログインユーザーを対象ユーザーIDとする
                →対象ユーザーIDが設定されなければ、エラー(GRN_CMMN_00105)
              
              3.パラメータ["date"]のチェック
                パラメータが存在しない、有効値でない場合はエラー(GRN_TMCR_20002)
              
              4.timecard/logic.cspよりタイムカードロジッククラス インスタンス化
                対象ユーザー、日付にマッチするタイムカードレコード取得
                →レコードなければ、新規作成 (タイムカードロジックオブジェクト→createRecord)
              
              5a.パラメータ["clear"]が存在する場合は、パラメータ["date"]以外を削除
              
              5b.パラメータ["clear"]が存在しない場合 且つ パラメータ["date"]が未来日付の場合
                 →パラメータ["remarks"]が存在しない場合に、パラメータ["remarks"]に既存値を取得&セット
              
              5c.パラメータ["clear"]が存在しない場合 且つ パラメータ["date"]が過去/現在日付の場合
                 →パラメータが存在しないものについて、、既存値を取得しセットする。
                  ・パラメータ 不在情報の配列数のチェック→一致しない場合はエラー(GRN_TMCR_20000)
                    (before_trip_mod_hour[],before_trip_mod_minute[]
                     after_trip_mod_hour[],after_trip_mod_minute[],
                     after_back_mod_hour[],after_back_mod_minute[]
                    )
                   ・パラメータ["remarks"]について、存在しなければ、既存値をセット
                   ・パラメータ["start_hour"],[start_minute]について、存在しない、または["start_hour"]=="*"ならば
                     同パラメータに既存値セット (既存値が存在しない場合は、"")
                     ※【注意】start_hour=="*"ならば、start_minute == "15" などになっていても時・分ともに既存値セット
                   ・パラメータ["finish_hour"],[finish_minute]について、存在しない、または["finish_hour"]=="*"ならば
                     同パラメータに既存値セット (既存値が存在しない場合は、"")
                     ※【注意】finish_hour=="*"ならば、finish_minute == "15" などになっていても時・分ともに既存値セット
                   ・パラメータ 不在情報について、既存値取得
                     (最大回数の設定数==1の場合) 上書き
                       パラメータ 不在情報の要素数 > 1 の場合は、不在情報の最後の要素を有効値とし
                       その有効値(のhour)が"*"であれば、有効値は既存値とする

                       既存値ありの場合、有効値を以下のパラメータにセット
                       →パラメータ["tripXX_hour"],["tripXX_minute"],["backXX_hour"],["backXX_minute"]
                         ( XXはabsenceID)
                       既存値なしの場合、有効値を以下のパラメータにセット
                       →パラメータ["tripN1_hour"],["tripN1_minute"],["backN1_hour"],["backN1_minute"]

                     (最大回数の設定数>1の場合) マッチするもの上書き、マッチしないものはセットされている順に新規登録
                          ・パラメータ 不在情報の要素数 == 0 の場合
                                  以下のパラメータに既存外出・復帰時刻をセット
                                     →["tripXX_hour"],["tripXX_minute"],["backXX_hour"],["backXX_minute"]
                                       ( XXはabsenceID)
                          ・パラメータ 不在情報の要素数 > 0 の場合
                                  既存外出時刻と不在情報.修正前外出時刻(時・分)と一致の場合 
                                     以下のパラメータに修正後の外出・復帰時刻をセット
                                     (但し 修正後外出・復帰のhour == "*" ならば、既存値のまま)
                                     →["tripXX_hour"],["tripXX_minute"],["backXX_hour"],["backXX_minute"]
                                       ( XXはabsenceID)
                                  不一致の場合
                                     以下のパラメータに修正後外出・復帰時刻をセット
                                     (但し 修正後外出・復帰のhour == "*" またはminute=="*"の場合は ""(空文字))
                                     →パラメータ["tripNx_hour"],["tripNx_minute"],["backNx_hour"],["backNx_minute"]
                                       ( xは、既存値でヒットした件数 + 1の連番)
                   →以下不要になったパラメータの削除
                     [before_trip_mod_hour],[before_trip_mod_minute],[after_trip_mod_hour],[after_trip_mod_minute],
                     [after_back_mod_hour],[after_back_mod_minute]
              6.パラメータ["remarks"]について、改行コード除去 + 100文字以上切捨て →レコードについて備考の変更

              7.未来日付のチェック →パラメータ["date"] > システム日付ならば以下何もしない(即ち6.の備考のみ変更)
                (パラメータ["date"]<= システム日付 の場合)
                 ・出社/退社時刻について、レコード変更
                 ・不在時刻について外出/復帰時刻のレコード変更
                   (両方の時刻が未設定となれば不在レコード削除)
                 ・新たに追加される不在記録 (パラメータ"tripNx_hour"],["tripNx_minute"],["backNx_hour"],["backNx_minute"])
                   について、レコード作成

              8.不在記録/出社/退社/備考もクリアされている場合は、タイムカードレコードそのものを削除

              9.戻り値なしで、HTML吐き出し
                吐き出されるHTMLは以下固定
                (<Header Data><CR><LF>0,<Footer Data><CR><LF>NOERROR<CR><LF>)

            備考
              未来日付の場合は、備考以外のパラメータ(出社、退社、不在情報)無視する、備考のみ更新対象
              出社・退社,外出・復帰の時刻関係は、以下でなければならない
              ・出社<=外出<=復帰<=退出
              ・出社せずに退社はない
              ・出社せずに不在記録はない
              ・出社時刻より退社時刻が過去であることはない
              ・外出時刻は出社時刻より過去であることはない
              ・復帰時刻は出社時刻より過去であることはない
              ・復帰時刻は外出時刻より過去であることはない
              ・外出時刻は退社時刻より未来であることはない
              ・復帰時刻は退社時刻より未来であることはない
              ・復帰せずに退社することはない

              [ システム管理（各アプリケーション） > タイムカード > 一般設定 > ユーザーに時刻の修正を許可する]
              の設定値によらない
              ログインユーザーは、[タイムカード]のアプリケーション管理権限を有する必要あり
             (システム管理設定側のタイムカードの時刻修正にした理由は、
              個人画面側のタイムカード設定だと、上記システム管理でユーザーの時刻修正を認めない場合に
              ログインユーザー=一般ユーザーでAPI経由は変更できるとガルーンと整合性あわないため、
              ユーザーの時刻修正を認めない場合→API経由での変更はエラーにするとAPIとして使い勝手が悪いため)


4.その他
[環境]
・ガルーンサーバー側
  →以下のフォルダにガルーン連携(PHP)用プログラム cspファイル配置
  [ガルーン２インストールディレクトリ]/code/doc_root/coop/coopgrnTimecard_add.csp  (修正用)
                                                          coopLogin.csp  (全アプリ共通処理)

  ※ガルーン2をバージョンアップした時点でcoopディレクトリは削除されます。
    バージョンアップ作業を実施した場合には、再度、coopディレクトリを配置する必要がある


・連携用マシン(ガルーンサーバと兼ねても可)
  java1.4以降をインストール
  [jreインストールディレクトリ]/lib/ext/にガルーン連携（JAVA）用プログラムgaroon2.jarをコピーもしくは、
  実行時にクラスパスを通す
  サンプルプログラムについては、適当なディレクトリにあれば良し

[注意事項]
・サンプルプログラムについて
  →あくまでもガルーン連携（JAVA）用プログラムgaroon2.jarの使い方の一例としてのプログラム

以上

作成日  2007/01/15
作成者  tsukurimichi
version 1.0